
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010148  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010a8  080102d8  080102d8  000112d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011380  08011380  000131f8  2**0
                  CONTENTS
  4 .ARM          00000008  08011380  08011380  00012380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011388  08011388  000131f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011388  08011388  00012388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801138c  0801138c  0001238c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08011390  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000131f8  2**0
                  CONTENTS
 10 .bss          000052b0  200001f8  200001f8  000131f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200054a8  200054a8  000131f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000131f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e760  00000000  00000000  00013228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004091  00000000  00000000  00031988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bd0  00000000  00000000  00035a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015e0  00000000  00000000  000375f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006270  00000000  00000000  00038bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000206ef  00000000  00000000  0003ee40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9fd1  00000000  00000000  0005f52f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00149500  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008a28  00000000  00000000  00149544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  00151f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080102c0 	.word	0x080102c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	080102c0 	.word	0x080102c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <MahonyQuaternionUpdate>:
	q[2]=q2 * recipNorm;
	q[3]=q3 * recipNorm;
	}

void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz,float deltat,float q[4])
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b098      	sub	sp, #96	@ 0x60
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	ed87 0a07 	vstr	s0, [r7, #28]
 8000f82:	edc7 0a06 	vstr	s1, [r7, #24]
 8000f86:	ed87 1a05 	vstr	s2, [r7, #20]
 8000f8a:	edc7 1a04 	vstr	s3, [r7, #16]
 8000f8e:	ed87 2a03 	vstr	s4, [r7, #12]
 8000f92:	edc7 2a02 	vstr	s5, [r7, #8]
 8000f96:	ed87 3a01 	vstr	s6, [r7, #4]
 8000f9a:	6038      	str	r0, [r7, #0]
	float Kp =(2.0f * 0.5f);
 8000f9c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000fa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
	float Ki =0;//(2.0f * 0.5f);
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	65bb      	str	r3, [r7, #88]	@ 0x58

	float q0 = q[0], q1 = q[1], q2 = q[2], q3 = q[3];
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	657b      	str	r3, [r7, #84]	@ 0x54
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8000fc0:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fcc:	d10e      	bne.n	8000fec <MahonyQuaternionUpdate+0x74>
 8000fce:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fda:	d107      	bne.n	8000fec <MahonyQuaternionUpdate+0x74>
 8000fdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fe0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe8:	f000 8117 	beq.w	800121a <MahonyQuaternionUpdate+0x2a2>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8000fec:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ff0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ff4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ff8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001000:	edd7 7a05 	vldr	s15, [r7, #20]
 8001004:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800100c:	eeb0 0a67 	vmov.f32	s0, s15
 8001010:	f000 fa5e 	bl	80014d0 <invSqrt>
 8001014:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax *= recipNorm;
 8001018:	ed97 7a07 	vldr	s14, [r7, #28]
 800101c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001024:	edc7 7a07 	vstr	s15, [r7, #28]
		ay *= recipNorm;
 8001028:	ed97 7a06 	vldr	s14, [r7, #24]
 800102c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001034:	edc7 7a06 	vstr	s15, [r7, #24]
		az *= recipNorm;
 8001038:	ed97 7a05 	vldr	s14, [r7, #20]
 800103c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001044:	edc7 7a05 	vstr	s15, [r7, #20]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q1 * q3 - q0 * q2;
 8001048:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800104c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001050:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001054:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001058:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800105c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001064:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q0 * q1 + q2 * q3;
 8001068:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800106c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001070:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001074:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8001078:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800107c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001084:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q0 * q0 - 0.5f + q3 * q3;
 8001088:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800108c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001090:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001094:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001098:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800109c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
 80010a8:	ed97 7a06 	vldr	s14, [r7, #24]
 80010ac:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80010b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010b4:	edd7 6a05 	vldr	s13, [r7, #20]
 80010b8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80010bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az * halfvx - ax * halfvz);
 80010c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80010cc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80010d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80010d8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80010dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax * halfvy - ay * halfvx);
 80010e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80010ec:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80010f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010f4:	edd7 6a06 	vldr	s13, [r7, #24]
 80010f8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80010fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001104:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(Ki > 0.0f) {
 8001108:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800110c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001114:	dd51      	ble.n	80011ba <MahonyQuaternionUpdate+0x242>
			eInt[0] += Ki * halfex * deltat;	// integral error scaled by Ki
 8001116:	4bb2      	ldr	r3, [pc, #712]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 8001118:	ed93 7a00 	vldr	s14, [r3]
 800111c:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001120:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001124:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001128:	edd7 7a01 	vldr	s15, [r7, #4]
 800112c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001134:	4baa      	ldr	r3, [pc, #680]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 8001136:	edc3 7a00 	vstr	s15, [r3]
			eInt[1] += Ki * halfey * deltat;
 800113a:	4ba9      	ldr	r3, [pc, #676]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 800113c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001140:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001144:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001148:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800114c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001150:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001158:	4ba1      	ldr	r3, [pc, #644]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 800115a:	edc3 7a01 	vstr	s15, [r3, #4]
			eInt[2] += Ki * halfez * deltat;
 800115e:	4ba0      	ldr	r3, [pc, #640]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 8001160:	ed93 7a02 	vldr	s14, [r3, #8]
 8001164:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001168:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800116c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001170:	edd7 7a01 	vldr	s15, [r7, #4]
 8001174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117c:	4b98      	ldr	r3, [pc, #608]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 800117e:	edc3 7a02 	vstr	s15, [r3, #8]
			gx += eInt[0];	// apply integral feedback
 8001182:	4b97      	ldr	r3, [pc, #604]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 8001184:	edd3 7a00 	vldr	s15, [r3]
 8001188:	ed97 7a04 	vldr	s14, [r7, #16]
 800118c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001190:	edc7 7a04 	vstr	s15, [r7, #16]
			gy += eInt[1];
 8001194:	4b92      	ldr	r3, [pc, #584]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 8001196:	edd3 7a01 	vldr	s15, [r3, #4]
 800119a:	ed97 7a03 	vldr	s14, [r7, #12]
 800119e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a2:	edc7 7a03 	vstr	s15, [r7, #12]
			gz += eInt[2];
 80011a6:	4b8e      	ldr	r3, [pc, #568]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 80011a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80011ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80011b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b4:	edc7 7a02 	vstr	s15, [r7, #8]
 80011b8:	e00b      	b.n	80011d2 <MahonyQuaternionUpdate+0x25a>
		}
		else {
			eInt[0] = 0.0f;	// prevent integral windup
 80011ba:	4b89      	ldr	r3, [pc, #548]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
			eInt[1] = 0.0f;
 80011c2:	4b87      	ldr	r3, [pc, #540]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	605a      	str	r2, [r3, #4]
			eInt[2] = 0.0f;
 80011ca:	4b85      	ldr	r3, [pc, #532]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
		}

		// Apply proportional feedback
		gx += Kp * halfex;
 80011d2:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80011d6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80011da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011de:	ed97 7a04 	vldr	s14, [r7, #16]
 80011e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e6:	edc7 7a04 	vstr	s15, [r7, #16]
		gy += Kp * halfey;
 80011ea:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80011ee:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80011f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80011fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fe:	edc7 7a03 	vstr	s15, [r7, #12]
		gz += Kp * halfez;
 8001202:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001206:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800120a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800120e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001216:	edc7 7a02 	vstr	s15, [r7, #8]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * deltat);		// pre-multiply common factors
 800121a:	edd7 7a01 	vldr	s15, [r7, #4]
 800121e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001226:	ed97 7a04 	vldr	s14, [r7, #16]
 800122a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800122e:	edc7 7a04 	vstr	s15, [r7, #16]
	gy *= (0.5f * deltat);
 8001232:	edd7 7a01 	vldr	s15, [r7, #4]
 8001236:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800123a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800123e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001246:	edc7 7a03 	vstr	s15, [r7, #12]
	gz *= (0.5f * deltat);
 800124a:	edd7 7a01 	vldr	s15, [r7, #4]
 800124e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001256:	ed97 7a02 	vldr	s14, [r7, #8]
 800125a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125e:	edc7 7a02 	vstr	s15, [r7, #8]
	qa = q0;
 8001262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001264:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q1;
 8001266:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q2;
 800126a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800126c:	623b      	str	r3, [r7, #32]
	q0 += (-qb * gx - qc * gy - q3 * gz);
 800126e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001272:	eeb1 7a67 	vneg.f32	s14, s15
 8001276:	edd7 7a04 	vldr	s15, [r7, #16]
 800127a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001282:	edd7 7a03 	vldr	s15, [r7, #12]
 8001286:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800128a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800128e:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001292:	edd7 7a02 	vldr	s15, [r7, #8]
 8001296:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800129a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800129e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80012a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a6:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	q1 += (qa * gx + qc * gz - q3 * gy);
 80012aa:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80012ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012b6:	edd7 6a08 	vldr	s13, [r7, #32]
 80012ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80012be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012c6:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80012ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80012da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012de:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
	q2 += (qa * gy - qb * gz + q3 * gx);
 80012e2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80012e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ee:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80012f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80012f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012fe:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001302:	edd7 7a04 	vldr	s15, [r7, #16]
 8001306:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800130a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001316:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
	q3 += (qa * gz + qb * gy - qc * gx);
 800131a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800131e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001322:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001326:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800132a:	edd7 7a03 	vldr	s15, [r7, #12]
 800132e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001332:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001336:	edd7 6a08 	vldr	s13, [r7, #32]
 800133a:	edd7 7a04 	vldr	s15, [r7, #16]
 800133e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001342:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001346:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800134a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001352:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001356:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800135a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800135e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001362:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001366:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800136a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800136e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001372:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001376:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800137a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137e:	eeb0 0a67 	vmov.f32	s0, s15
 8001382:	f000 f8a5 	bl	80014d0 <invSqrt>
 8001386:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0]=q0 * recipNorm;
 800138a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800138e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	edc3 7a00 	vstr	s15, [r3]
	q[1]=q1 * recipNorm;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	3304      	adds	r3, #4
 80013a0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80013a4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80013a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ac:	edc3 7a00 	vstr	s15, [r3]
	q[2]=q2 * recipNorm;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	3308      	adds	r3, #8
 80013b4:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80013b8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80013bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c0:	edc3 7a00 	vstr	s15, [r3]
	q[3]=q3 * recipNorm;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	330c      	adds	r3, #12
 80013c8:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80013cc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80013d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d4:	edc3 7a00 	vstr	s15, [r3]
	}
 80013d8:	bf00      	nop
 80013da:	3760      	adds	r7, #96	@ 0x60
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000214 	.word	0x20000214
 80013e4:	00000000 	.word	0x00000000

080013e8 <GetYawFromQ>:
float GetYawFromQ(float q[4])
{
 80013e8:	b5b0      	push	{r4, r5, r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	return atan2(2.0f * (q[1] * q[2] + q[0] * q[3]),
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3304      	adds	r3, #4
 80013f4:	ed93 7a00 	vldr	s14, [r3]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3308      	adds	r3, #8
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	edd3 6a00 	vldr	s13, [r3]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	330c      	adds	r3, #12
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800141e:	ee17 0a90 	vmov	r0, s15
 8001422:	f7ff f891 	bl	8000548 <__aeabi_f2d>
 8001426:	4604      	mov	r4, r0
 8001428:	460d      	mov	r5, r1
	       q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3])*(180.0f/3.14159265359);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	ed93 7a00 	vldr	s14, [r3]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	ee27 7a27 	vmul.f32	s14, s14, s15
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3304      	adds	r3, #4
 800143e:	edd3 6a00 	vldr	s13, [r3]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3304      	adds	r3, #4
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800144e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3308      	adds	r3, #8
 8001456:	edd3 6a00 	vldr	s13, [r3]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3308      	adds	r3, #8
 800145e:	edd3 7a00 	vldr	s15, [r3]
 8001462:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001466:	ee37 7a67 	vsub.f32	s14, s14, s15
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	330c      	adds	r3, #12
 800146e:	edd3 6a00 	vldr	s13, [r3]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	330c      	adds	r3, #12
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800147e:	ee77 7a67 	vsub.f32	s15, s14, s15
	return atan2(2.0f * (q[1] * q[2] + q[0] * q[3]),
 8001482:	ee17 0a90 	vmov	r0, s15
 8001486:	f7ff f85f 	bl	8000548 <__aeabi_f2d>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	ec43 2b11 	vmov	d1, r2, r3
 8001492:	ec45 4b10 	vmov	d0, r4, r5
 8001496:	f00e fca9 	bl	800fdec <atan2>
 800149a:	ec51 0b10 	vmov	r0, r1, d0
	       q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3])*(180.0f/3.14159265359);
 800149e:	a30a      	add	r3, pc, #40	@ (adr r3, 80014c8 <GetYawFromQ+0xe0>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	f7ff f8a8 	bl	80005f8 <__aeabi_dmul>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f7ff fb9a 	bl	8000be8 <__aeabi_d2f>
 80014b4:	4603      	mov	r3, r0
 80014b6:	ee07 3a90 	vmov	s15, r3
	}
 80014ba:	eeb0 0a67 	vmov.f32	s0, s15
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bdb0      	pop	{r4, r5, r7, pc}
 80014c4:	f3af 8000 	nop.w
 80014c8:	1a63bfe5 	.word	0x1a63bfe5
 80014cc:	404ca5dc 	.word	0x404ca5dc

080014d0 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80014da:	edd7 7a01 	vldr	s15, [r7, #4]
 80014de:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80014e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e6:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	105a      	asrs	r2, r3, #1
 80014fa:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <invSqrt+0x74>)
 80014fc:	1a9b      	subs	r3, r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001508:	ed97 7a04 	vldr	s14, [r7, #16]
 800150c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001510:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001514:	edd7 7a04 	vldr	s15, [r7, #16]
 8001518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001520:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001524:	edd7 7a04 	vldr	s15, [r7, #16]
 8001528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152c:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	ee07 3a90 	vmov	s15, r3
}
 8001536:	eeb0 0a67 	vmov.f32	s0, s15
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	5f3759df 	.word	0x5f3759df

08001548 <PID_Init>:
    float output_max;   // Maximum output value
    uint32_t prevtick;
} PIDController;

// Initialize PID controller
void PID_Init(PIDController *pid, float Kp, float Ki, float Kd, float setpoint, float output_min, float output_max) {
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	@ 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	61f8      	str	r0, [r7, #28]
 8001550:	ed87 0a06 	vstr	s0, [r7, #24]
 8001554:	edc7 0a05 	vstr	s1, [r7, #20]
 8001558:	ed87 1a04 	vstr	s2, [r7, #16]
 800155c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001560:	ed87 2a02 	vstr	s4, [r7, #8]
 8001564:	edc7 2a01 	vstr	s5, [r7, #4]
    pid->Kp = Kp;
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	609a      	str	r2, [r3, #8]
    pid->setpoint = setpoint;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
    pid->prev_error = 0.0f;
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
    pid->output_min = output_min;
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	61da      	str	r2, [r3, #28]
    pid->output_max = output_max;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	621a      	str	r2, [r3, #32]
    pid->prevtick=0;
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	2200      	movs	r2, #0
 80015a0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80015a2:	bf00      	nop
 80015a4:	3724      	adds	r7, #36	@ 0x24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <PID_Update>:

// Update PID controller
float PID_Update(PIDController *pid, float measured_value) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	ed87 0a00 	vstr	s0, [r7]
	if(pid->prevtick==0)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d104      	bne.n	80015ce <PID_Update+0x1e>
		pid->prevtick=HAL_GetTick();
 80015c4:	f002 feb4 	bl	8004330 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	625a      	str	r2, [r3, #36]	@ 0x24

	float dt  = (HAL_GetTick() - pid->prevtick) *0.001f;
 80015ce:	f002 feaf 	bl	8004330 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	ee07 3a90 	vmov	s15, r3
 80015de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015e2:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001718 <PID_Update+0x168>
 80015e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ea:	edc7 7a06 	vstr	s15, [r7, #24]
    float error = pid->setpoint - measured_value;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	ed93 7a03 	vldr	s14, [r3, #12]
 80015f4:	edd7 7a00 	vldr	s15, [r7]
 80015f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015fc:	edc7 7a05 	vstr	s15, [r7, #20]
    float proportional = pid->Kp * error;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	ed97 7a05 	vldr	s14, [r7, #20]
 800160a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160e:	edc7 7a04 	vstr	s15, [r7, #16]

    // Integral term with anti-windup
    pid->integral += pid->Ki * error * dt;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	ed93 7a04 	vldr	s14, [r3, #16]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	edd3 6a01 	vldr	s13, [r3, #4]
 800161e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001622:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001626:	edd7 7a06 	vldr	s15, [r7, #24]
 800162a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800162e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	edc3 7a04 	vstr	s15, [r3, #16]

    float derivative = pid->Kd * (error - pid->prev_error) / dt;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	ed93 7a02 	vldr	s14, [r3, #8]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	edd3 7a06 	vldr	s15, [r3, #24]
 8001644:	edd7 6a05 	vldr	s13, [r7, #20]
 8001648:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800164c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001650:	ed97 7a06 	vldr	s14, [r7, #24]
 8001654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001658:	edc7 7a03 	vstr	s15, [r7, #12]

    float output = proportional + pid->integral + derivative;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001662:	edd7 7a04 	vldr	s15, [r7, #16]
 8001666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166a:	ed97 7a03 	vldr	s14, [r7, #12]
 800166e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001672:	edc7 7a07 	vstr	s15, [r7, #28]

    // Apply output limits
    if (output > pid->output_max) {
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	edd3 7a08 	vldr	s15, [r3, #32]
 800167c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001680:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001688:	dd16      	ble.n	80016b8 <PID_Update+0x108>
        output = pid->output_max;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	61fb      	str	r3, [r7, #28]
        // Anti-windup: Limit integral term
        pid->integral -= pid->Ki * error * dt;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	ed93 7a04 	vldr	s14, [r3, #16]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	edd3 6a01 	vldr	s13, [r3, #4]
 800169c:	edd7 7a05 	vldr	s15, [r7, #20]
 80016a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80016a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	edc3 7a04 	vstr	s15, [r3, #16]
 80016b6:	e01f      	b.n	80016f8 <PID_Update+0x148>
    } else if (output < pid->output_min) {
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	edd3 7a07 	vldr	s15, [r3, #28]
 80016be:	ed97 7a07 	vldr	s14, [r7, #28]
 80016c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ca:	d515      	bpl.n	80016f8 <PID_Update+0x148>
        output = pid->output_min;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	61fb      	str	r3, [r7, #28]
        // Anti-windup: Limit integral term
        pid->integral -= pid->Ki * error * dt;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	ed93 7a04 	vldr	s14, [r3, #16]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	edd3 6a01 	vldr	s13, [r3, #4]
 80016de:	edd7 7a05 	vldr	s15, [r7, #20]
 80016e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	edc3 7a04 	vstr	s15, [r3, #16]
    }

    pid->prev_error = error;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	619a      	str	r2, [r3, #24]
    pid->prevtick =HAL_GetTick();
 80016fe:	f002 fe17 	bl	8004330 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	625a      	str	r2, [r3, #36]	@ 0x24
    return output;
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	ee07 3a90 	vmov	s15, r3
}
 800170e:	eeb0 0a67 	vmov.f32	s0, s15
 8001712:	3720      	adds	r7, #32
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	3a83126f 	.word	0x3a83126f

0800171c <PID_Reset>:

void PID_Reset(PIDController* pid) {
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	pid->setpoint=0;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
    pid->prev_error = 0.0f;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
    pid->prevtick = 0;//HAL_GetTick();
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <Set_Motor_Direction>:
/* USER CODE BEGIN 0 */
uint8_t aRxBuffer[3]={0};
uint8_t buf[5]={0};

//SET both wheel direction
void Set_Motor_Direction(int foward_flag,int backward_flag) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, //AIn1 is forward AIn2 is backward
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf14      	ite	ne
 8001760:	2301      	movne	r3, #1
 8001762:	2300      	moveq	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	461a      	mov	r2, r3
 8001768:	2108      	movs	r1, #8
 800176a:	4814      	ldr	r0, [pc, #80]	@ (80017bc <Set_Motor_Direction+0x6c>)
 800176c:	f003 fd68 	bl	8005240 <HAL_GPIO_WritePin>
            ((foward_flag) ? GPIO_PIN_SET : GPIO_PIN_RESET));
    HAL_GPIO_WritePin(GPIOA, AIN2_Pin,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	bf0c      	ite	eq
 8001776:	2301      	moveq	r3, #1
 8001778:	2300      	movne	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	2104      	movs	r1, #4
 8001780:	480e      	ldr	r0, [pc, #56]	@ (80017bc <Set_Motor_Direction+0x6c>)
 8001782:	f003 fd5d 	bl	8005240 <HAL_GPIO_WritePin>
            ((foward_flag) ? GPIO_PIN_RESET : GPIO_PIN_SET));
    HAL_GPIO_WritePin(GPIOA, BIN2_Pin, //BIn1 is forward BIn2 is backward
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf0c      	ite	eq
 800178c:	2301      	moveq	r3, #1
 800178e:	2300      	movne	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	461a      	mov	r2, r3
 8001794:	2120      	movs	r1, #32
 8001796:	4809      	ldr	r0, [pc, #36]	@ (80017bc <Set_Motor_Direction+0x6c>)
 8001798:	f003 fd52 	bl	8005240 <HAL_GPIO_WritePin>
            ((backward_flag) ? GPIO_PIN_RESET : GPIO_PIN_SET));
    HAL_GPIO_WritePin(GPIOA, BIN1_Pin,
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bf14      	ite	ne
 80017a2:	2301      	movne	r3, #1
 80017a4:	2300      	moveq	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	461a      	mov	r2, r3
 80017aa:	2110      	movs	r1, #16
 80017ac:	4803      	ldr	r0, [pc, #12]	@ (80017bc <Set_Motor_Direction+0x6c>)
 80017ae:	f003 fd47 	bl	8005240 <HAL_GPIO_WritePin>
            ((backward_flag) ? GPIO_PIN_SET : GPIO_PIN_RESET));
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40020000 	.word	0x40020000

080017c0 <delay_us>:
void delay_us(uint16_t us)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6,0);
 80017ca:	4b09      	ldr	r3, [pc, #36]	@ (80017f0 <delay_us+0x30>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2200      	movs	r2, #0
 80017d0:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6)<us);
 80017d2:	bf00      	nop
 80017d4:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <delay_us+0x30>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d3f9      	bcc.n	80017d4 <delay_us+0x14>

}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000444 	.word	0x20000444

080017f4 <resetYaw>:
void resetYaw()
{	q[0]=1; q[1]=0; q[2]=0; q[3]=0;
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001830 <resetYaw+0x3c>)
 80017fa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <resetYaw+0x3c>)
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <resetYaw+0x3c>)
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <resetYaw+0x3c>)
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	60da      	str	r2, [r3, #12]
	yaw=0;
 8001818:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <resetYaw+0x40>)
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
	PID_Reset(&LMotorPID);
 8001820:	4805      	ldr	r0, [pc, #20]	@ (8001838 <resetYaw+0x44>)
 8001822:	f7ff ff7b 	bl	800171c <PID_Reset>
	PID_Reset(&RMotorPID);
 8001826:	4805      	ldr	r0, [pc, #20]	@ (800183c <resetYaw+0x48>)
 8001828:	f7ff ff78 	bl	800171c <PID_Reset>
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000004 	.word	0x20000004
 8001834:	20000580 	.word	0x20000580
 8001838:	20000584 	.word	0x20000584
 800183c:	200005ac 	.word	0x200005ac

08001840 <updateYaw>:
void updateYaw()//update yaw reading using filter
{
 8001840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001842:	ed2d 8b04 	vpush	{d8-d9}
 8001846:	af00      	add	r7, sp, #0
	static uint32_t prevtick=0;

	if(HAL_GetTick()-prevtick>1000L)//RST if never update for more than 1 second
 8001848:	f002 fd72 	bl	8004330 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	4b4c      	ldr	r3, [pc, #304]	@ (8001980 <updateYaw+0x140>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001858:	d905      	bls.n	8001866 <updateYaw+0x26>
		{prevtick=HAL_GetTick();return;}
 800185a:	f002 fd69 	bl	8004330 <HAL_GetTick>
 800185e:	4603      	mov	r3, r0
 8001860:	4a47      	ldr	r2, [pc, #284]	@ (8001980 <updateYaw+0x140>)
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	e084      	b.n	8001970 <updateYaw+0x130>
	ICM20948_readAccelerometer_all(&hi2c1,0,ACCEL_SENS,&accel);
 8001866:	4b47      	ldr	r3, [pc, #284]	@ (8001984 <updateYaw+0x144>)
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	4846      	ldr	r0, [pc, #280]	@ (8001988 <updateYaw+0x148>)
 800186e:	f008 f9bf 	bl	8009bf0 <ICM20948_readAccelerometer_all>
	ICM20948_readGyroscope_all(&hi2c1, 0, GYRO_SENS, &gyro);
 8001872:	4b46      	ldr	r3, [pc, #280]	@ (800198c <updateYaw+0x14c>)
 8001874:	2203      	movs	r2, #3
 8001876:	2100      	movs	r1, #0
 8001878:	4843      	ldr	r0, [pc, #268]	@ (8001988 <updateYaw+0x148>)
 800187a:	f008 f8a1 	bl	80099c0 <ICM20948_readGyroscope_all>
		  	  //ICM20948_readMagnetometer_all(&hi2c1,&mag);
		  	  //magcal_adjust(&mag,&mag_params);

		  	  //Madgwick Mahony
	MahonyQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 800187e:	4b41      	ldr	r3, [pc, #260]	@ (8001984 <updateYaw+0x144>)
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001990 <updateYaw+0x150>
 8001888:	ee27 8a87 	vmul.f32	s16, s15, s14
 800188c:	4b3d      	ldr	r3, [pc, #244]	@ (8001984 <updateYaw+0x144>)
 800188e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001892:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001990 <updateYaw+0x150>
 8001896:	ee67 8a87 	vmul.f32	s17, s15, s14
 800189a:	4b3a      	ldr	r3, [pc, #232]	@ (8001984 <updateYaw+0x144>)
 800189c:	edd3 7a02 	vldr	s15, [r3, #8]
 80018a0:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001990 <updateYaw+0x150>
 80018a4:	ee27 9a87 	vmul.f32	s18, s15, s14
		  			  gyro.x*DEG_TO_RAD,-gyro.y*DEG_TO_RAD,gyro.z*DEG_TO_RAD,
 80018a8:	4b38      	ldr	r3, [pc, #224]	@ (800198c <updateYaw+0x14c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fe4b 	bl	8000548 <__aeabi_f2d>
 80018b2:	a331      	add	r3, pc, #196	@ (adr r3, 8001978 <updateYaw+0x138>)
 80018b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b8:	f7fe fe9e 	bl	80005f8 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
	MahonyQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f7ff f990 	bl	8000be8 <__aeabi_d2f>
 80018c8:	4604      	mov	r4, r0
		  			  gyro.x*DEG_TO_RAD,-gyro.y*DEG_TO_RAD,gyro.z*DEG_TO_RAD,
 80018ca:	4b30      	ldr	r3, [pc, #192]	@ (800198c <updateYaw+0x14c>)
 80018cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80018d0:	eef1 7a67 	vneg.f32	s15, s15
 80018d4:	ee17 3a90 	vmov	r3, s15
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe35 	bl	8000548 <__aeabi_f2d>
 80018de:	a326      	add	r3, pc, #152	@ (adr r3, 8001978 <updateYaw+0x138>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe fe88 	bl	80005f8 <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
	MahonyQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f7ff f97a 	bl	8000be8 <__aeabi_d2f>
 80018f4:	4605      	mov	r5, r0
		  			  gyro.x*DEG_TO_RAD,-gyro.y*DEG_TO_RAD,gyro.z*DEG_TO_RAD,
 80018f6:	4b25      	ldr	r3, [pc, #148]	@ (800198c <updateYaw+0x14c>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fe24 	bl	8000548 <__aeabi_f2d>
 8001900:	a31d      	add	r3, pc, #116	@ (adr r3, 8001978 <updateYaw+0x138>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f7fe fe77 	bl	80005f8 <__aeabi_dmul>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
	MahonyQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	f7ff f969 	bl	8000be8 <__aeabi_d2f>
 8001916:	4606      	mov	r6, r0
					  (HAL_GetTick()-prevtick)*0.001f,q);
 8001918:	f002 fd0a 	bl	8004330 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	4b18      	ldr	r3, [pc, #96]	@ (8001980 <updateYaw+0x140>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	1ad3      	subs	r3, r2, r3
	MahonyQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 8001924:	ee07 3a90 	vmov	s15, r3
 8001928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800192c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001994 <updateYaw+0x154>
 8001930:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001934:	4818      	ldr	r0, [pc, #96]	@ (8001998 <updateYaw+0x158>)
 8001936:	eeb0 3a67 	vmov.f32	s6, s15
 800193a:	ee02 6a90 	vmov	s5, r6
 800193e:	ee02 5a10 	vmov	s4, r5
 8001942:	ee01 4a90 	vmov	s3, r4
 8001946:	eeb0 1a49 	vmov.f32	s2, s18
 800194a:	eef0 0a68 	vmov.f32	s1, s17
 800194e:	eeb0 0a48 	vmov.f32	s0, s16
 8001952:	f7ff fb11 	bl	8000f78 <MahonyQuaternionUpdate>

		  	  prevtick=HAL_GetTick();
 8001956:	f002 fceb 	bl	8004330 <HAL_GetTick>
 800195a:	4603      	mov	r3, r0
 800195c:	4a08      	ldr	r2, [pc, #32]	@ (8001980 <updateYaw+0x140>)
 800195e:	6013      	str	r3, [r2, #0]
		  	  yaw = GetYawFromQ(q);
 8001960:	480d      	ldr	r0, [pc, #52]	@ (8001998 <updateYaw+0x158>)
 8001962:	f7ff fd41 	bl	80013e8 <GetYawFromQ>
 8001966:	eef0 7a40 	vmov.f32	s15, s0
 800196a:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <updateYaw+0x15c>)
 800196c:	edc3 7a00 	vstr	s15, [r3]
	}
 8001970:	46bd      	mov	sp, r7
 8001972:	ecbd 8b04 	vpop	{d8-d9}
 8001976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001978:	a2529e84 	.word	0xa2529e84
 800197c:	3f91df46 	.word	0x3f91df46
 8001980:	200005f4 	.word	0x200005f4
 8001984:	20000568 	.word	0x20000568
 8001988:	200002d0 	.word	0x200002d0
 800198c:	20000574 	.word	0x20000574
 8001990:	411cf5c3 	.word	0x411cf5c3
 8001994:	3a83126f 	.word	0x3a83126f
 8001998:	20000004 	.word	0x20000004
 800199c:	20000580 	.word	0x20000580

080019a0 <Backward>:
void Backward(int target)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

	//Ensure yaw is reseted before turning
	//int target=-85;//90
	//int target=25;//360
	static uint8_t bTurn=1;
	if(bTurn&& target == 0)
 80019a8:	4b45      	ldr	r3, [pc, #276]	@ (8001ac0 <Backward+0x120>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00e      	beq.n	80019ce <Backward+0x2e>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d10b      	bne.n	80019ce <Backward+0x2e>
	{
		set_servo_angle(Center);
 80019b6:	205f      	movs	r0, #95	@ 0x5f
 80019b8:	f000 fd8c 	bl	80024d4 <set_servo_angle>
		osDelay(350);
 80019bc:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 80019c0:	f008 fc36 	bl	800a230 <osDelay>
		resetYaw();
 80019c4:	f7ff ff16 	bl	80017f4 <resetYaw>
		bTurn=0;
 80019c8:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac0 <Backward+0x120>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
	}
	updateYaw();
 80019ce:	f7ff ff37 	bl	8001840 <updateYaw>
	//osDelay(10);
	LMotorPID.setpoint=3;
 80019d2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ac4 <Backward+0x124>)
 80019d4:	4a3c      	ldr	r2, [pc, #240]	@ (8001ac8 <Backward+0x128>)
 80019d6:	60da      	str	r2, [r3, #12]
	RMotorPID.setpoint=3;
 80019d8:	4b3c      	ldr	r3, [pc, #240]	@ (8001acc <Backward+0x12c>)
 80019da:	4a3b      	ldr	r2, [pc, #236]	@ (8001ac8 <Backward+0x128>)
 80019dc:	60da      	str	r2, [r3, #12]

	if (yaw > target - 0.1f )
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	ee07 3a90 	vmov	s15, r3
 80019e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e8:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001ad0 <Backward+0x130>
 80019ec:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80019f0:	4b38      	ldr	r3, [pc, #224]	@ (8001ad4 <Backward+0x134>)
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fe:	d503      	bpl.n	8001a08 <Backward+0x68>
			  {
				  set_servo_angle(Slight_Left);
 8001a00:	2064      	movs	r0, #100	@ 0x64
 8001a02:	f000 fd67 	bl	80024d4 <set_servo_angle>
 8001a06:	e013      	b.n	8001a30 <Backward+0x90>
			  }
	else if(yaw < target + 0.1f)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	ee07 3a90 	vmov	s15, r3
 8001a0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a12:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001ad0 <Backward+0x130>
 8001a16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad4 <Backward+0x134>)
 8001a1c:	edd3 7a00 	vldr	s15, [r3]
 8001a20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a28:	dd02      	ble.n	8001a30 <Backward+0x90>
	{
		set_servo_angle(Slight_Right);
 8001a2a:	205a      	movs	r0, #90	@ 0x5a
 8001a2c:	f000 fd52 	bl	80024d4 <set_servo_angle>
	}
	if(Target_Distance- distanceTraveled <10)
 8001a30:	4b29      	ldr	r3, [pc, #164]	@ (8001ad8 <Backward+0x138>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	ee07 3a90 	vmov	s15, r3
 8001a38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a3c:	4b27      	ldr	r3, [pc, #156]	@ (8001adc <Backward+0x13c>)
 8001a3e:	edd3 7a00 	vldr	s15, [r3]
 8001a42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a46:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a52:	d505      	bpl.n	8001a60 <Backward+0xc0>
	{
	  LMotorPID.setpoint=2.5;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <Backward+0x124>)
 8001a56:	4a22      	ldr	r2, [pc, #136]	@ (8001ae0 <Backward+0x140>)
 8001a58:	60da      	str	r2, [r3, #12]
	  RMotorPID.setpoint=2.5;
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001acc <Backward+0x12c>)
 8001a5c:	4a20      	ldr	r2, [pc, #128]	@ (8001ae0 <Backward+0x140>)
 8001a5e:	60da      	str	r2, [r3, #12]
//	else if (yaw > target - 20.0f && yaw < target + 20.0f)
//	{
//	  LMotorPID.setpoint=0.5;
//	  RMotorPID.setpoint=0.35;
//	}
	int32_t L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8001a60:	4b20      	ldr	r3, [pc, #128]	@ (8001ae4 <Backward+0x144>)
 8001a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a66:	4610      	mov	r0, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f7ff f8bd 	bl	8000be8 <__aeabi_d2f>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	ee00 3a10 	vmov	s0, r3
 8001a74:	4813      	ldr	r0, [pc, #76]	@ (8001ac4 <Backward+0x124>)
 8001a76:	f7ff fd9b 	bl	80015b0 <PID_Update>
 8001a7a:	eef0 7a40 	vmov.f32	s15, s0
 8001a7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a82:	ee17 3a90 	vmov	r3, s15
 8001a86:	60fb      	str	r3, [r7, #12]
	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8001a88:	4b17      	ldr	r3, [pc, #92]	@ (8001ae8 <Backward+0x148>)
 8001a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8e:	4610      	mov	r0, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	f7ff f8a9 	bl	8000be8 <__aeabi_d2f>
 8001a96:	4603      	mov	r3, r0
 8001a98:	ee00 3a10 	vmov	s0, r3
 8001a9c:	480b      	ldr	r0, [pc, #44]	@ (8001acc <Backward+0x12c>)
 8001a9e:	f7ff fd87 	bl	80015b0 <PID_Update>
 8001aa2:	eef0 7a40 	vmov.f32	s15, s0
 8001aa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aaa:	ee17 3a90 	vmov	r3, s15
 8001aae:	60bb      	str	r3, [r7, #8]
	set_motor_pwm(L, R);
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	68f8      	ldr	r0, [r7, #12]
 8001ab4:	f000 fcc8 	bl	8002448 <set_motor_pwm>

}
 8001ab8:	bf00      	nop
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000018 	.word	0x20000018
 8001ac4:	20000584 	.word	0x20000584
 8001ac8:	40400000 	.word	0x40400000
 8001acc:	200005ac 	.word	0x200005ac
 8001ad0:	3dcccccd 	.word	0x3dcccccd
 8001ad4:	20000580 	.word	0x20000580
 8001ad8:	20000220 	.word	0x20000220
 8001adc:	20000224 	.word	0x20000224
 8001ae0:	40200000 	.word	0x40200000
 8001ae4:	20000558 	.word	0x20000558
 8001ae8:	20000560 	.word	0x20000560

08001aec <Forward>:
void Forward(int target)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

	//Ensure yaw is reseted before turning
	//int target=-85;//90
	//int target=25;//360
	static uint8_t bTurn=1;
	if(bTurn&&target==0)
 8001af4:	4b46      	ldr	r3, [pc, #280]	@ (8001c10 <Forward+0x124>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00e      	beq.n	8001b1a <Forward+0x2e>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10b      	bne.n	8001b1a <Forward+0x2e>
	{
		set_servo_angle(Center);
 8001b02:	205f      	movs	r0, #95	@ 0x5f
 8001b04:	f000 fce6 	bl	80024d4 <set_servo_angle>
		osDelay(350);
 8001b08:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8001b0c:	f008 fb90 	bl	800a230 <osDelay>
		resetYaw();
 8001b10:	f7ff fe70 	bl	80017f4 <resetYaw>
		bTurn=0;
 8001b14:	4b3e      	ldr	r3, [pc, #248]	@ (8001c10 <Forward+0x124>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
	}
	updateYaw();
 8001b1a:	f7ff fe91 	bl	8001840 <updateYaw>
	//osDelay(10);
	LMotorPID.setpoint=4;
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c14 <Forward+0x128>)
 8001b20:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8001b24:	60da      	str	r2, [r3, #12]
	RMotorPID.setpoint=4;
 8001b26:	4b3c      	ldr	r3, [pc, #240]	@ (8001c18 <Forward+0x12c>)
 8001b28:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8001b2c:	60da      	str	r2, [r3, #12]

	if (yaw > target - 0.1f )
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	ee07 3a90 	vmov	s15, r3
 8001b34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b38:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001c1c <Forward+0x130>
 8001b3c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001b40:	4b37      	ldr	r3, [pc, #220]	@ (8001c20 <Forward+0x134>)
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4e:	d503      	bpl.n	8001b58 <Forward+0x6c>
	  {
		  set_servo_angle(Slight_Right);
 8001b50:	205a      	movs	r0, #90	@ 0x5a
 8001b52:	f000 fcbf 	bl	80024d4 <set_servo_angle>
 8001b56:	e013      	b.n	8001b80 <Forward+0x94>
	  }
	else if(yaw < target + 0.1f)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	ee07 3a90 	vmov	s15, r3
 8001b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b62:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001c1c <Forward+0x130>
 8001b66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001c20 <Forward+0x134>)
 8001b6c:	edd3 7a00 	vldr	s15, [r3]
 8001b70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b78:	dd02      	ble.n	8001b80 <Forward+0x94>
	{
		set_servo_angle(Slight_Left);
 8001b7a:	2064      	movs	r0, #100	@ 0x64
 8001b7c:	f000 fcaa 	bl	80024d4 <set_servo_angle>
	}
		if(Target_Distance- distanceTraveled <10)
 8001b80:	4b28      	ldr	r3, [pc, #160]	@ (8001c24 <Forward+0x138>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8c:	4b26      	ldr	r3, [pc, #152]	@ (8001c28 <Forward+0x13c>)
 8001b8e:	edd3 7a00 	vldr	s15, [r3]
 8001b92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b96:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001b9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba2:	d505      	bpl.n	8001bb0 <Forward+0xc4>
		{
		  LMotorPID.setpoint=2.5;
 8001ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c14 <Forward+0x128>)
 8001ba6:	4a21      	ldr	r2, [pc, #132]	@ (8001c2c <Forward+0x140>)
 8001ba8:	60da      	str	r2, [r3, #12]
		  RMotorPID.setpoint=2.5;
 8001baa:	4b1b      	ldr	r3, [pc, #108]	@ (8001c18 <Forward+0x12c>)
 8001bac:	4a1f      	ldr	r2, [pc, #124]	@ (8001c2c <Forward+0x140>)
 8001bae:	60da      	str	r2, [r3, #12]
//	else if (yaw > target - 20.0f && yaw < target + 20.0f)
//	{
//	  LMotorPID.setpoint=0.5;
//	  RMotorPID.setpoint=0.35;
//	}
	int32_t L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8001bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c30 <Forward+0x144>)
 8001bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f7ff f815 	bl	8000be8 <__aeabi_d2f>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	ee00 3a10 	vmov	s0, r3
 8001bc4:	4813      	ldr	r0, [pc, #76]	@ (8001c14 <Forward+0x128>)
 8001bc6:	f7ff fcf3 	bl	80015b0 <PID_Update>
 8001bca:	eef0 7a40 	vmov.f32	s15, s0
 8001bce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bd2:	ee17 3a90 	vmov	r3, s15
 8001bd6:	60fb      	str	r3, [r7, #12]
	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8001bd8:	4b16      	ldr	r3, [pc, #88]	@ (8001c34 <Forward+0x148>)
 8001bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bde:	4610      	mov	r0, r2
 8001be0:	4619      	mov	r1, r3
 8001be2:	f7ff f801 	bl	8000be8 <__aeabi_d2f>
 8001be6:	4603      	mov	r3, r0
 8001be8:	ee00 3a10 	vmov	s0, r3
 8001bec:	480a      	ldr	r0, [pc, #40]	@ (8001c18 <Forward+0x12c>)
 8001bee:	f7ff fcdf 	bl	80015b0 <PID_Update>
 8001bf2:	eef0 7a40 	vmov.f32	s15, s0
 8001bf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bfa:	ee17 3a90 	vmov	r3, s15
 8001bfe:	60bb      	str	r3, [r7, #8]
	set_motor_pwm(L, R);
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 fc20 	bl	8002448 <set_motor_pwm>

}
 8001c08:	bf00      	nop
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000019 	.word	0x20000019
 8001c14:	20000584 	.word	0x20000584
 8001c18:	200005ac 	.word	0x200005ac
 8001c1c:	3dcccccd 	.word	0x3dcccccd
 8001c20:	20000580 	.word	0x20000580
 8001c24:	20000220 	.word	0x20000220
 8001c28:	20000224 	.word	0x20000224
 8001c2c:	40200000 	.word	0x40200000
 8001c30:	20000558 	.word	0x20000558
 8001c34:	20000560 	.word	0x20000560

08001c38 <BackRight>:
//	int32_t L=(int32_t)PID_Update(&LMotorPID, RPS_L);
//	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
//	set_motor_pwm(L, R);
//}
void BackRight(int target)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

	//Ensure yaw is reseted before turning
	//int target=-85;//90
	//int target=25;//360
	static uint8_t bTurn=1;
	if(bTurn&& target != 0)
 8001c40:	4b7a      	ldr	r3, [pc, #488]	@ (8001e2c <BackRight+0x1f4>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d02d      	beq.n	8001ca4 <BackRight+0x6c>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d02a      	beq.n	8001ca4 <BackRight+0x6c>
	{
		  distanceTraveled=0;
 8001c4e:	4b78      	ldr	r3, [pc, #480]	@ (8001e30 <BackRight+0x1f8>)
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
		  Target_Distance=1;
 8001c56:	4b77      	ldr	r3, [pc, #476]	@ (8001e34 <BackRight+0x1fc>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]
		  while(distanceTraveled < Target_Distance)
 8001c5c:	e006      	b.n	8001c6c <BackRight+0x34>
		  {
			  Set_Motor_Direction(0,0);
 8001c5e:	2100      	movs	r1, #0
 8001c60:	2000      	movs	r0, #0
 8001c62:	f7ff fd75 	bl	8001750 <Set_Motor_Direction>
			  Backward(0);
 8001c66:	2000      	movs	r0, #0
 8001c68:	f7ff fe9a 	bl	80019a0 <Backward>
		  while(distanceTraveled < Target_Distance)
 8001c6c:	4b71      	ldr	r3, [pc, #452]	@ (8001e34 <BackRight+0x1fc>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	ee07 3a90 	vmov	s15, r3
 8001c74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c78:	4b6d      	ldr	r3, [pc, #436]	@ (8001e30 <BackRight+0x1f8>)
 8001c7a:	edd3 7a00 	vldr	s15, [r3]
 8001c7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c86:	dcea      	bgt.n	8001c5e <BackRight+0x26>
		  }
		  Motor_Stop();
 8001c88:	f001 fb0a 	bl	80032a0 <Motor_Stop>
		set_servo_angle(Right);
 8001c8c:	2014      	movs	r0, #20
 8001c8e:	f000 fc21 	bl	80024d4 <set_servo_angle>
		osDelay(750);
 8001c92:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001c96:	f008 facb 	bl	800a230 <osDelay>
		resetYaw();
 8001c9a:	f7ff fdab 	bl	80017f4 <resetYaw>
		bTurn=0;
 8001c9e:	4b63      	ldr	r3, [pc, #396]	@ (8001e2c <BackRight+0x1f4>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
	}
	updateYaw();
 8001ca4:	f7ff fdcc 	bl	8001840 <updateYaw>
	//osDelay(10);
	LMotorPID.setpoint=4;
 8001ca8:	4b63      	ldr	r3, [pc, #396]	@ (8001e38 <BackRight+0x200>)
 8001caa:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8001cae:	60da      	str	r2, [r3, #12]
	RMotorPID.setpoint=1;
 8001cb0:	4b62      	ldr	r3, [pc, #392]	@ (8001e3c <BackRight+0x204>)
 8001cb2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001cb6:	60da      	str	r2, [r3, #12]

	if (yaw > target - 1.0f && yaw < target + 1.0f)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	ee07 3a90 	vmov	s15, r3
 8001cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001cc6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001cca:	4b5d      	ldr	r3, [pc, #372]	@ (8001e40 <BackRight+0x208>)
 8001ccc:	edd3 7a00 	vldr	s15, [r3]
 8001cd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd8:	d54f      	bpl.n	8001d7a <BackRight+0x142>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	ee07 3a90 	vmov	s15, r3
 8001ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ce8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001cec:	4b54      	ldr	r3, [pc, #336]	@ (8001e40 <BackRight+0x208>)
 8001cee:	edd3 7a00 	vldr	s15, [r3]
 8001cf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfa:	dd3e      	ble.n	8001d7a <BackRight+0x142>
			  {
				  set_motor_pwm(0, 0);
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f000 fba2 	bl	8002448 <set_motor_pwm>
				  PID_Reset(&LMotorPID);
 8001d04:	484c      	ldr	r0, [pc, #304]	@ (8001e38 <BackRight+0x200>)
 8001d06:	f7ff fd09 	bl	800171c <PID_Reset>
				  PID_Reset(&RMotorPID);
 8001d0a:	484c      	ldr	r0, [pc, #304]	@ (8001e3c <BackRight+0x204>)
 8001d0c:	f7ff fd06 	bl	800171c <PID_Reset>
				  set_servo_angle(Center);
 8001d10:	205f      	movs	r0, #95	@ 0x5f
 8001d12:	f000 fbdf 	bl	80024d4 <set_servo_angle>
				  osDelay(1000);
 8001d16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d1a:	f008 fa89 	bl	800a230 <osDelay>
				  distanceTraveled=0;
 8001d1e:	4b44      	ldr	r3, [pc, #272]	@ (8001e30 <BackRight+0x1f8>)
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
				  Target_Distance=12;
 8001d26:	4b43      	ldr	r3, [pc, #268]	@ (8001e34 <BackRight+0x1fc>)
 8001d28:	220c      	movs	r2, #12
 8001d2a:	601a      	str	r2, [r3, #0]
				  while(distanceTraveled < Target_Distance)
 8001d2c:	e006      	b.n	8001d3c <BackRight+0x104>
				  {
					  Set_Motor_Direction(0,0);
 8001d2e:	2100      	movs	r1, #0
 8001d30:	2000      	movs	r0, #0
 8001d32:	f7ff fd0d 	bl	8001750 <Set_Motor_Direction>
					  Backward(0);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7ff fe32 	bl	80019a0 <Backward>
				  while(distanceTraveled < Target_Distance)
 8001d3c:	4b3d      	ldr	r3, [pc, #244]	@ (8001e34 <BackRight+0x1fc>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	ee07 3a90 	vmov	s15, r3
 8001d44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d48:	4b39      	ldr	r3, [pc, #228]	@ (8001e30 <BackRight+0x1f8>)
 8001d4a:	edd3 7a00 	vldr	s15, [r3]
 8001d4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d56:	dcea      	bgt.n	8001d2e <BackRight+0xf6>
				  }
				  Motor_Stop();
 8001d58:	f001 faa2 	bl	80032a0 <Motor_Stop>
				  bTurn=1;
 8001d5c:	4b33      	ldr	r3, [pc, #204]	@ (8001e2c <BackRight+0x1f4>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
				  flagDone=1;
 8001d62:	4b38      	ldr	r3, [pc, #224]	@ (8001e44 <BackRight+0x20c>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	601a      	str	r2, [r3, #0]
				  tempflag=0;
 8001d68:	4b37      	ldr	r3, [pc, #220]	@ (8001e48 <BackRight+0x210>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
				  count++;
 8001d6e:	4b37      	ldr	r3, [pc, #220]	@ (8001e4c <BackRight+0x214>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	3301      	adds	r3, #1
 8001d74:	4a35      	ldr	r2, [pc, #212]	@ (8001e4c <BackRight+0x214>)
 8001d76:	6013      	str	r3, [r2, #0]
				  return;
 8001d78:	e055      	b.n	8001e26 <BackRight+0x1ee>
			  }
	else if (yaw > target - 25.0f && yaw < target + 25.0f)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	ee07 3a90 	vmov	s15, r3
 8001d80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d84:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001d88:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001d8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001e40 <BackRight+0x208>)
 8001d8e:	edd3 7a00 	vldr	s15, [r3]
 8001d92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9a:	d518      	bpl.n	8001dce <BackRight+0x196>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	ee07 3a90 	vmov	s15, r3
 8001da2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001da6:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001daa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001dae:	4b24      	ldr	r3, [pc, #144]	@ (8001e40 <BackRight+0x208>)
 8001db0:	edd3 7a00 	vldr	s15, [r3]
 8001db4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbc:	dd07      	ble.n	8001dce <BackRight+0x196>
	{
	  LMotorPID.setpoint=0.5;
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001e38 <BackRight+0x200>)
 8001dc0:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001dc4:	60da      	str	r2, [r3, #12]
	  RMotorPID.setpoint=0.5;//0.35
 8001dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e3c <BackRight+0x204>)
 8001dc8:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001dcc:	60da      	str	r2, [r3, #12]
	}
	int32_t L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8001dce:	4b20      	ldr	r3, [pc, #128]	@ (8001e50 <BackRight+0x218>)
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f7fe ff06 	bl	8000be8 <__aeabi_d2f>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	ee00 3a10 	vmov	s0, r3
 8001de2:	4815      	ldr	r0, [pc, #84]	@ (8001e38 <BackRight+0x200>)
 8001de4:	f7ff fbe4 	bl	80015b0 <PID_Update>
 8001de8:	eef0 7a40 	vmov.f32	s15, s0
 8001dec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001df0:	ee17 3a90 	vmov	r3, s15
 8001df4:	60fb      	str	r3, [r7, #12]
	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8001df6:	4b17      	ldr	r3, [pc, #92]	@ (8001e54 <BackRight+0x21c>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f7fe fef2 	bl	8000be8 <__aeabi_d2f>
 8001e04:	4603      	mov	r3, r0
 8001e06:	ee00 3a10 	vmov	s0, r3
 8001e0a:	480c      	ldr	r0, [pc, #48]	@ (8001e3c <BackRight+0x204>)
 8001e0c:	f7ff fbd0 	bl	80015b0 <PID_Update>
 8001e10:	eef0 7a40 	vmov.f32	s15, s0
 8001e14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e18:	ee17 3a90 	vmov	r3, s15
 8001e1c:	60bb      	str	r3, [r7, #8]
	set_motor_pwm(L, R);
 8001e1e:	68b9      	ldr	r1, [r7, #8]
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f000 fb11 	bl	8002448 <set_motor_pwm>
}
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	2000001a 	.word	0x2000001a
 8001e30:	20000224 	.word	0x20000224
 8001e34:	20000220 	.word	0x20000220
 8001e38:	20000584 	.word	0x20000584
 8001e3c:	200005ac 	.word	0x200005ac
 8001e40:	20000580 	.word	0x20000580
 8001e44:	2000022c 	.word	0x2000022c
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	20000234 	.word	0x20000234
 8001e50:	20000558 	.word	0x20000558
 8001e54:	20000560 	.word	0x20000560

08001e58 <BackLeft>:
void BackLeft(int target)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

	//Ensure yaw is reseted before turning
	//int target=-85;//90
	//int target=25;//360
	static uint8_t bTurn=1;
	if(bTurn&& target != 0)
 8001e60:	4b7c      	ldr	r3, [pc, #496]	@ (8002054 <BackLeft+0x1fc>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d02d      	beq.n	8001ec4 <BackLeft+0x6c>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d02a      	beq.n	8001ec4 <BackLeft+0x6c>
	{
		  distanceTraveled=0;
 8001e6e:	4b7a      	ldr	r3, [pc, #488]	@ (8002058 <BackLeft+0x200>)
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
		  Target_Distance=2;
 8001e76:	4b79      	ldr	r3, [pc, #484]	@ (800205c <BackLeft+0x204>)
 8001e78:	2202      	movs	r2, #2
 8001e7a:	601a      	str	r2, [r3, #0]
		  while(distanceTraveled < Target_Distance)
 8001e7c:	e006      	b.n	8001e8c <BackLeft+0x34>
		  {
			  Set_Motor_Direction(0,0);
 8001e7e:	2100      	movs	r1, #0
 8001e80:	2000      	movs	r0, #0
 8001e82:	f7ff fc65 	bl	8001750 <Set_Motor_Direction>
			  Backward(0);
 8001e86:	2000      	movs	r0, #0
 8001e88:	f7ff fd8a 	bl	80019a0 <Backward>
		  while(distanceTraveled < Target_Distance)
 8001e8c:	4b73      	ldr	r3, [pc, #460]	@ (800205c <BackLeft+0x204>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	ee07 3a90 	vmov	s15, r3
 8001e94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e98:	4b6f      	ldr	r3, [pc, #444]	@ (8002058 <BackLeft+0x200>)
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea6:	dcea      	bgt.n	8001e7e <BackLeft+0x26>
		  }
		  Motor_Stop();
 8001ea8:	f001 f9fa 	bl	80032a0 <Motor_Stop>
		set_servo_angle(Left);
 8001eac:	208c      	movs	r0, #140	@ 0x8c
 8001eae:	f000 fb11 	bl	80024d4 <set_servo_angle>
		osDelay(750);
 8001eb2:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001eb6:	f008 f9bb 	bl	800a230 <osDelay>
		resetYaw();
 8001eba:	f7ff fc9b 	bl	80017f4 <resetYaw>
		bTurn=0;
 8001ebe:	4b65      	ldr	r3, [pc, #404]	@ (8002054 <BackLeft+0x1fc>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	701a      	strb	r2, [r3, #0]
	}
	updateYaw();
 8001ec4:	f7ff fcbc 	bl	8001840 <updateYaw>
	//osDelay(10);
	LMotorPID.setpoint=1;
 8001ec8:	4b65      	ldr	r3, [pc, #404]	@ (8002060 <BackLeft+0x208>)
 8001eca:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001ece:	60da      	str	r2, [r3, #12]
	RMotorPID.setpoint=4;
 8001ed0:	4b64      	ldr	r3, [pc, #400]	@ (8002064 <BackLeft+0x20c>)
 8001ed2:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8001ed6:	60da      	str	r2, [r3, #12]

	if (yaw > target - 1.0f && yaw < target + 1.0f)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	ee07 3a90 	vmov	s15, r3
 8001ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ee2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ee6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001eea:	4b5f      	ldr	r3, [pc, #380]	@ (8002068 <BackLeft+0x210>)
 8001eec:	edd3 7a00 	vldr	s15, [r3]
 8001ef0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef8:	d553      	bpl.n	8001fa2 <BackLeft+0x14a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	ee07 3a90 	vmov	s15, r3
 8001f00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001f0c:	4b56      	ldr	r3, [pc, #344]	@ (8002068 <BackLeft+0x210>)
 8001f0e:	edd3 7a00 	vldr	s15, [r3]
 8001f12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1a:	dd42      	ble.n	8001fa2 <BackLeft+0x14a>
			  {
				  set_motor_pwm(0, 0);
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f000 fa92 	bl	8002448 <set_motor_pwm>
				  PID_Reset(&LMotorPID);
 8001f24:	484e      	ldr	r0, [pc, #312]	@ (8002060 <BackLeft+0x208>)
 8001f26:	f7ff fbf9 	bl	800171c <PID_Reset>
				  PID_Reset(&RMotorPID);
 8001f2a:	484e      	ldr	r0, [pc, #312]	@ (8002064 <BackLeft+0x20c>)
 8001f2c:	f7ff fbf6 	bl	800171c <PID_Reset>
				  set_servo_angle(Center);
 8001f30:	205f      	movs	r0, #95	@ 0x5f
 8001f32:	f000 facf 	bl	80024d4 <set_servo_angle>
				  osDelay(750);
 8001f36:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001f3a:	f008 f979 	bl	800a230 <osDelay>
				  distanceTraveled=0;
 8001f3e:	4b46      	ldr	r3, [pc, #280]	@ (8002058 <BackLeft+0x200>)
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
				  Target_Distance=12;
 8001f46:	4b45      	ldr	r3, [pc, #276]	@ (800205c <BackLeft+0x204>)
 8001f48:	220c      	movs	r2, #12
 8001f4a:	601a      	str	r2, [r3, #0]
				  while(distanceTraveled < Target_Distance)
 8001f4c:	e006      	b.n	8001f5c <BackLeft+0x104>
				  {
					  Set_Motor_Direction(0,0);
 8001f4e:	2100      	movs	r1, #0
 8001f50:	2000      	movs	r0, #0
 8001f52:	f7ff fbfd 	bl	8001750 <Set_Motor_Direction>
					  Backward(0);
 8001f56:	2000      	movs	r0, #0
 8001f58:	f7ff fd22 	bl	80019a0 <Backward>
				  while(distanceTraveled < Target_Distance)
 8001f5c:	4b3f      	ldr	r3, [pc, #252]	@ (800205c <BackLeft+0x204>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	ee07 3a90 	vmov	s15, r3
 8001f64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f68:	4b3b      	ldr	r3, [pc, #236]	@ (8002058 <BackLeft+0x200>)
 8001f6a:	edd3 7a00 	vldr	s15, [r3]
 8001f6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f76:	dcea      	bgt.n	8001f4e <BackLeft+0xf6>
				  }
				  Motor_Stop();
 8001f78:	f001 f992 	bl	80032a0 <Motor_Stop>
				  bTurn=1;
 8001f7c:	4b35      	ldr	r3, [pc, #212]	@ (8002054 <BackLeft+0x1fc>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
				  flagDone=1;
 8001f82:	4b3a      	ldr	r3, [pc, #232]	@ (800206c <BackLeft+0x214>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
				  tempflag=0;
 8001f88:	4b39      	ldr	r3, [pc, #228]	@ (8002070 <BackLeft+0x218>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
				  distanceTraveled=0;
 8001f8e:	4b32      	ldr	r3, [pc, #200]	@ (8002058 <BackLeft+0x200>)
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
				  count++;
 8001f96:	4b37      	ldr	r3, [pc, #220]	@ (8002074 <BackLeft+0x21c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	4a35      	ldr	r2, [pc, #212]	@ (8002074 <BackLeft+0x21c>)
 8001f9e:	6013      	str	r3, [r2, #0]
				  return;
 8001fa0:	e055      	b.n	800204e <BackLeft+0x1f6>
			  }
	else if (yaw > target - 25.0f && yaw < target + 25.0f)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	ee07 3a90 	vmov	s15, r3
 8001fa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fac:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001fb0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001fb4:	4b2c      	ldr	r3, [pc, #176]	@ (8002068 <BackLeft+0x210>)
 8001fb6:	edd3 7a00 	vldr	s15, [r3]
 8001fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc2:	d518      	bpl.n	8001ff6 <BackLeft+0x19e>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	ee07 3a90 	vmov	s15, r3
 8001fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fce:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001fd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001fd6:	4b24      	ldr	r3, [pc, #144]	@ (8002068 <BackLeft+0x210>)
 8001fd8:	edd3 7a00 	vldr	s15, [r3]
 8001fdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe4:	dd07      	ble.n	8001ff6 <BackLeft+0x19e>
	{
	  LMotorPID.setpoint=0.5;
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8002060 <BackLeft+0x208>)
 8001fe8:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001fec:	60da      	str	r2, [r3, #12]
	  RMotorPID.setpoint=0.5;//0.35
 8001fee:	4b1d      	ldr	r3, [pc, #116]	@ (8002064 <BackLeft+0x20c>)
 8001ff0:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001ff4:	60da      	str	r2, [r3, #12]
	}
	int32_t L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8001ff6:	4b20      	ldr	r3, [pc, #128]	@ (8002078 <BackLeft+0x220>)
 8001ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	f7fe fdf2 	bl	8000be8 <__aeabi_d2f>
 8002004:	4603      	mov	r3, r0
 8002006:	ee00 3a10 	vmov	s0, r3
 800200a:	4815      	ldr	r0, [pc, #84]	@ (8002060 <BackLeft+0x208>)
 800200c:	f7ff fad0 	bl	80015b0 <PID_Update>
 8002010:	eef0 7a40 	vmov.f32	s15, s0
 8002014:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002018:	ee17 3a90 	vmov	r3, s15
 800201c:	60fb      	str	r3, [r7, #12]
	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 800201e:	4b17      	ldr	r3, [pc, #92]	@ (800207c <BackLeft+0x224>)
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f7fe fdde 	bl	8000be8 <__aeabi_d2f>
 800202c:	4603      	mov	r3, r0
 800202e:	ee00 3a10 	vmov	s0, r3
 8002032:	480c      	ldr	r0, [pc, #48]	@ (8002064 <BackLeft+0x20c>)
 8002034:	f7ff fabc 	bl	80015b0 <PID_Update>
 8002038:	eef0 7a40 	vmov.f32	s15, s0
 800203c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002040:	ee17 3a90 	vmov	r3, s15
 8002044:	60bb      	str	r3, [r7, #8]
	set_motor_pwm(L, R);
 8002046:	68b9      	ldr	r1, [r7, #8]
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f000 f9fd 	bl	8002448 <set_motor_pwm>
}
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	2000001b 	.word	0x2000001b
 8002058:	20000224 	.word	0x20000224
 800205c:	20000220 	.word	0x20000220
 8002060:	20000584 	.word	0x20000584
 8002064:	200005ac 	.word	0x200005ac
 8002068:	20000580 	.word	0x20000580
 800206c:	2000022c 	.word	0x2000022c
 8002070:	20000000 	.word	0x20000000
 8002074:	20000234 	.word	0x20000234
 8002078:	20000558 	.word	0x20000558
 800207c:	20000560 	.word	0x20000560

08002080 <ForwardLeft>:
void ForwardLeft(int target)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

	//Ensure yaw is reseted before turning
	//int target=-85;//90
	//int target=25;//360
	static uint8_t bTurn=1;
	if(bTurn&& target != 0)
 8002088:	4b6b      	ldr	r3, [pc, #428]	@ (8002238 <ForwardLeft+0x1b8>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d02d      	beq.n	80020ec <ForwardLeft+0x6c>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d02a      	beq.n	80020ec <ForwardLeft+0x6c>
	{
		  distanceTraveled=0;
 8002096:	4b69      	ldr	r3, [pc, #420]	@ (800223c <ForwardLeft+0x1bc>)
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
		  Target_Distance=10;
 800209e:	4b68      	ldr	r3, [pc, #416]	@ (8002240 <ForwardLeft+0x1c0>)
 80020a0:	220a      	movs	r2, #10
 80020a2:	601a      	str	r2, [r3, #0]
		  while(distanceTraveled < Target_Distance)
 80020a4:	e006      	b.n	80020b4 <ForwardLeft+0x34>
		  {
			  Set_Motor_Direction(1,1);
 80020a6:	2101      	movs	r1, #1
 80020a8:	2001      	movs	r0, #1
 80020aa:	f7ff fb51 	bl	8001750 <Set_Motor_Direction>
			  Forward(0);
 80020ae:	2000      	movs	r0, #0
 80020b0:	f7ff fd1c 	bl	8001aec <Forward>
		  while(distanceTraveled < Target_Distance)
 80020b4:	4b62      	ldr	r3, [pc, #392]	@ (8002240 <ForwardLeft+0x1c0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	ee07 3a90 	vmov	s15, r3
 80020bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020c0:	4b5e      	ldr	r3, [pc, #376]	@ (800223c <ForwardLeft+0x1bc>)
 80020c2:	edd3 7a00 	vldr	s15, [r3]
 80020c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ce:	dcea      	bgt.n	80020a6 <ForwardLeft+0x26>
		  }
		  Motor_Stop();
 80020d0:	f001 f8e6 	bl	80032a0 <Motor_Stop>
		set_servo_angle(Left);
 80020d4:	208c      	movs	r0, #140	@ 0x8c
 80020d6:	f000 f9fd 	bl	80024d4 <set_servo_angle>
		osDelay(750);
 80020da:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80020de:	f008 f8a7 	bl	800a230 <osDelay>
		resetYaw();
 80020e2:	f7ff fb87 	bl	80017f4 <resetYaw>
		bTurn=0;
 80020e6:	4b54      	ldr	r3, [pc, #336]	@ (8002238 <ForwardLeft+0x1b8>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	701a      	strb	r2, [r3, #0]
	}
	updateYaw();
 80020ec:	f7ff fba8 	bl	8001840 <updateYaw>
	//osDelay(10);
	LMotorPID.setpoint=1;
 80020f0:	4b54      	ldr	r3, [pc, #336]	@ (8002244 <ForwardLeft+0x1c4>)
 80020f2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80020f6:	60da      	str	r2, [r3, #12]
	RMotorPID.setpoint=4;
 80020f8:	4b53      	ldr	r3, [pc, #332]	@ (8002248 <ForwardLeft+0x1c8>)
 80020fa:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80020fe:	60da      	str	r2, [r3, #12]

	if (yaw > target - 1.0f && yaw < target + 1.0f)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800210a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800210e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002112:	4b4e      	ldr	r3, [pc, #312]	@ (800224c <ForwardLeft+0x1cc>)
 8002114:	edd3 7a00 	vldr	s15, [r3]
 8002118:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800211c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002120:	d530      	bpl.n	8002184 <ForwardLeft+0x104>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	ee07 3a90 	vmov	s15, r3
 8002128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800212c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002130:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002134:	4b45      	ldr	r3, [pc, #276]	@ (800224c <ForwardLeft+0x1cc>)
 8002136:	edd3 7a00 	vldr	s15, [r3]
 800213a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800213e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002142:	dd1f      	ble.n	8002184 <ForwardLeft+0x104>
			  {
				  set_motor_pwm(0, 0);
 8002144:	2100      	movs	r1, #0
 8002146:	2000      	movs	r0, #0
 8002148:	f000 f97e 	bl	8002448 <set_motor_pwm>
				  PID_Reset(&LMotorPID);
 800214c:	483d      	ldr	r0, [pc, #244]	@ (8002244 <ForwardLeft+0x1c4>)
 800214e:	f7ff fae5 	bl	800171c <PID_Reset>
				  PID_Reset(&RMotorPID);
 8002152:	483d      	ldr	r0, [pc, #244]	@ (8002248 <ForwardLeft+0x1c8>)
 8002154:	f7ff fae2 	bl	800171c <PID_Reset>
				  set_servo_angle(Center);
 8002158:	205f      	movs	r0, #95	@ 0x5f
 800215a:	f000 f9bb 	bl	80024d4 <set_servo_angle>
				  osDelay(750);
 800215e:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8002162:	f008 f865 	bl	800a230 <osDelay>
				  bTurn=1;
 8002166:	4b34      	ldr	r3, [pc, #208]	@ (8002238 <ForwardLeft+0x1b8>)
 8002168:	2201      	movs	r2, #1
 800216a:	701a      	strb	r2, [r3, #0]
				  flagDone=1;
 800216c:	4b38      	ldr	r3, [pc, #224]	@ (8002250 <ForwardLeft+0x1d0>)
 800216e:	2201      	movs	r2, #1
 8002170:	601a      	str	r2, [r3, #0]
				  tempflag=0;
 8002172:	4b38      	ldr	r3, [pc, #224]	@ (8002254 <ForwardLeft+0x1d4>)
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
				  //Calibrate();
				  count++;
 8002178:	4b37      	ldr	r3, [pc, #220]	@ (8002258 <ForwardLeft+0x1d8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	4a36      	ldr	r2, [pc, #216]	@ (8002258 <ForwardLeft+0x1d8>)
 8002180:	6013      	str	r3, [r2, #0]
				  return;
 8002182:	e055      	b.n	8002230 <ForwardLeft+0x1b0>
			  }
	else if (yaw > target - 25.0f && yaw < target + 25.0f)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	ee07 3a90 	vmov	s15, r3
 800218a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800218e:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002192:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002196:	4b2d      	ldr	r3, [pc, #180]	@ (800224c <ForwardLeft+0x1cc>)
 8002198:	edd3 7a00 	vldr	s15, [r3]
 800219c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021a4:	d518      	bpl.n	80021d8 <ForwardLeft+0x158>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	ee07 3a90 	vmov	s15, r3
 80021ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b0:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80021b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80021b8:	4b24      	ldr	r3, [pc, #144]	@ (800224c <ForwardLeft+0x1cc>)
 80021ba:	edd3 7a00 	vldr	s15, [r3]
 80021be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c6:	dd07      	ble.n	80021d8 <ForwardLeft+0x158>
	{
	  LMotorPID.setpoint=0.5;
 80021c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002244 <ForwardLeft+0x1c4>)
 80021ca:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80021ce:	60da      	str	r2, [r3, #12]
	  RMotorPID.setpoint=0.5;//0.35
 80021d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002248 <ForwardLeft+0x1c8>)
 80021d2:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80021d6:	60da      	str	r2, [r3, #12]
	}
	int32_t L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 80021d8:	4b20      	ldr	r3, [pc, #128]	@ (800225c <ForwardLeft+0x1dc>)
 80021da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	f7fe fd01 	bl	8000be8 <__aeabi_d2f>
 80021e6:	4603      	mov	r3, r0
 80021e8:	ee00 3a10 	vmov	s0, r3
 80021ec:	4815      	ldr	r0, [pc, #84]	@ (8002244 <ForwardLeft+0x1c4>)
 80021ee:	f7ff f9df 	bl	80015b0 <PID_Update>
 80021f2:	eef0 7a40 	vmov.f32	s15, s0
 80021f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021fa:	ee17 3a90 	vmov	r3, s15
 80021fe:	60fb      	str	r3, [r7, #12]
	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8002200:	4b17      	ldr	r3, [pc, #92]	@ (8002260 <ForwardLeft+0x1e0>)
 8002202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002206:	4610      	mov	r0, r2
 8002208:	4619      	mov	r1, r3
 800220a:	f7fe fced 	bl	8000be8 <__aeabi_d2f>
 800220e:	4603      	mov	r3, r0
 8002210:	ee00 3a10 	vmov	s0, r3
 8002214:	480c      	ldr	r0, [pc, #48]	@ (8002248 <ForwardLeft+0x1c8>)
 8002216:	f7ff f9cb 	bl	80015b0 <PID_Update>
 800221a:	eef0 7a40 	vmov.f32	s15, s0
 800221e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002222:	ee17 3a90 	vmov	r3, s15
 8002226:	60bb      	str	r3, [r7, #8]
	set_motor_pwm(L, R);
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f90c 	bl	8002448 <set_motor_pwm>
}
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	2000001c 	.word	0x2000001c
 800223c:	20000224 	.word	0x20000224
 8002240:	20000220 	.word	0x20000220
 8002244:	20000584 	.word	0x20000584
 8002248:	200005ac 	.word	0x200005ac
 800224c:	20000580 	.word	0x20000580
 8002250:	2000022c 	.word	0x2000022c
 8002254:	20000000 	.word	0x20000000
 8002258:	20000234 	.word	0x20000234
 800225c:	20000558 	.word	0x20000558
 8002260:	20000560 	.word	0x20000560

08002264 <ForwardRight>:
void ForwardRight(int target)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]

	//Ensure yaw is reseted before turning
	//int target=-85;//90
	//int target=25;//360
	static uint8_t bTurn=1;
	if(bTurn&& target != 0)
 800226c:	4b6b      	ldr	r3, [pc, #428]	@ (800241c <ForwardRight+0x1b8>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d02d      	beq.n	80022d0 <ForwardRight+0x6c>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d02a      	beq.n	80022d0 <ForwardRight+0x6c>
	{
		  distanceTraveled=0;
 800227a:	4b69      	ldr	r3, [pc, #420]	@ (8002420 <ForwardRight+0x1bc>)
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
		  Target_Distance=10;
 8002282:	4b68      	ldr	r3, [pc, #416]	@ (8002424 <ForwardRight+0x1c0>)
 8002284:	220a      	movs	r2, #10
 8002286:	601a      	str	r2, [r3, #0]
		  while(distanceTraveled < Target_Distance)
 8002288:	e006      	b.n	8002298 <ForwardRight+0x34>
		  {
			  Set_Motor_Direction(1,1);
 800228a:	2101      	movs	r1, #1
 800228c:	2001      	movs	r0, #1
 800228e:	f7ff fa5f 	bl	8001750 <Set_Motor_Direction>
			  Forward(0);
 8002292:	2000      	movs	r0, #0
 8002294:	f7ff fc2a 	bl	8001aec <Forward>
		  while(distanceTraveled < Target_Distance)
 8002298:	4b62      	ldr	r3, [pc, #392]	@ (8002424 <ForwardRight+0x1c0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	ee07 3a90 	vmov	s15, r3
 80022a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022a4:	4b5e      	ldr	r3, [pc, #376]	@ (8002420 <ForwardRight+0x1bc>)
 80022a6:	edd3 7a00 	vldr	s15, [r3]
 80022aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b2:	dcea      	bgt.n	800228a <ForwardRight+0x26>
		  }
		  Motor_Stop();
 80022b4:	f000 fff4 	bl	80032a0 <Motor_Stop>
		set_servo_angle(Right);
 80022b8:	2014      	movs	r0, #20
 80022ba:	f000 f90b 	bl	80024d4 <set_servo_angle>
		osDelay(750);
 80022be:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80022c2:	f007 ffb5 	bl	800a230 <osDelay>
		resetYaw();
 80022c6:	f7ff fa95 	bl	80017f4 <resetYaw>
		bTurn=0;
 80022ca:	4b54      	ldr	r3, [pc, #336]	@ (800241c <ForwardRight+0x1b8>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	701a      	strb	r2, [r3, #0]
	}
	updateYaw();
 80022d0:	f7ff fab6 	bl	8001840 <updateYaw>
	//osDelay(10);
	LMotorPID.setpoint=4;
 80022d4:	4b54      	ldr	r3, [pc, #336]	@ (8002428 <ForwardRight+0x1c4>)
 80022d6:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80022da:	60da      	str	r2, [r3, #12]
	RMotorPID.setpoint=1;
 80022dc:	4b53      	ldr	r3, [pc, #332]	@ (800242c <ForwardRight+0x1c8>)
 80022de:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80022e2:	60da      	str	r2, [r3, #12]

	if (yaw > target - 1.0f && yaw < target + 1.0f)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	ee07 3a90 	vmov	s15, r3
 80022ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80022f2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80022f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002430 <ForwardRight+0x1cc>)
 80022f8:	edd3 7a00 	vldr	s15, [r3]
 80022fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002304:	d530      	bpl.n	8002368 <ForwardRight+0x104>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	ee07 3a90 	vmov	s15, r3
 800230c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002310:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002314:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002318:	4b45      	ldr	r3, [pc, #276]	@ (8002430 <ForwardRight+0x1cc>)
 800231a:	edd3 7a00 	vldr	s15, [r3]
 800231e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002326:	dd1f      	ble.n	8002368 <ForwardRight+0x104>
			  {
				  set_motor_pwm(0, 0);
 8002328:	2100      	movs	r1, #0
 800232a:	2000      	movs	r0, #0
 800232c:	f000 f88c 	bl	8002448 <set_motor_pwm>
				  PID_Reset(&LMotorPID);
 8002330:	483d      	ldr	r0, [pc, #244]	@ (8002428 <ForwardRight+0x1c4>)
 8002332:	f7ff f9f3 	bl	800171c <PID_Reset>
				  PID_Reset(&RMotorPID);
 8002336:	483d      	ldr	r0, [pc, #244]	@ (800242c <ForwardRight+0x1c8>)
 8002338:	f7ff f9f0 	bl	800171c <PID_Reset>
				  set_servo_angle(Center);
 800233c:	205f      	movs	r0, #95	@ 0x5f
 800233e:	f000 f8c9 	bl	80024d4 <set_servo_angle>
				  osDelay(750);
 8002342:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8002346:	f007 ff73 	bl	800a230 <osDelay>
				  bTurn=1;
 800234a:	4b34      	ldr	r3, [pc, #208]	@ (800241c <ForwardRight+0x1b8>)
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
				  flagDone=1;
 8002350:	4b38      	ldr	r3, [pc, #224]	@ (8002434 <ForwardRight+0x1d0>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]
				  tempflag=0;
 8002356:	4b38      	ldr	r3, [pc, #224]	@ (8002438 <ForwardRight+0x1d4>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
				  count++;
 800235c:	4b37      	ldr	r3, [pc, #220]	@ (800243c <ForwardRight+0x1d8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3301      	adds	r3, #1
 8002362:	4a36      	ldr	r2, [pc, #216]	@ (800243c <ForwardRight+0x1d8>)
 8002364:	6013      	str	r3, [r2, #0]
				  return;
 8002366:	e055      	b.n	8002414 <ForwardRight+0x1b0>
			  }
	else if (yaw > target - 25.0f && yaw < target + 25.0f)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	ee07 3a90 	vmov	s15, r3
 800236e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002372:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002376:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800237a:	4b2d      	ldr	r3, [pc, #180]	@ (8002430 <ForwardRight+0x1cc>)
 800237c:	edd3 7a00 	vldr	s15, [r3]
 8002380:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002388:	d518      	bpl.n	80023bc <ForwardRight+0x158>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	ee07 3a90 	vmov	s15, r3
 8002390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002394:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002398:	ee37 7a87 	vadd.f32	s14, s15, s14
 800239c:	4b24      	ldr	r3, [pc, #144]	@ (8002430 <ForwardRight+0x1cc>)
 800239e:	edd3 7a00 	vldr	s15, [r3]
 80023a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023aa:	dd07      	ble.n	80023bc <ForwardRight+0x158>
	{
	  LMotorPID.setpoint=0.5;
 80023ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002428 <ForwardRight+0x1c4>)
 80023ae:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80023b2:	60da      	str	r2, [r3, #12]
	  RMotorPID.setpoint=0.5;//0.35
 80023b4:	4b1d      	ldr	r3, [pc, #116]	@ (800242c <ForwardRight+0x1c8>)
 80023b6:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80023ba:	60da      	str	r2, [r3, #12]
	}
	int32_t L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 80023bc:	4b20      	ldr	r3, [pc, #128]	@ (8002440 <ForwardRight+0x1dc>)
 80023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c2:	4610      	mov	r0, r2
 80023c4:	4619      	mov	r1, r3
 80023c6:	f7fe fc0f 	bl	8000be8 <__aeabi_d2f>
 80023ca:	4603      	mov	r3, r0
 80023cc:	ee00 3a10 	vmov	s0, r3
 80023d0:	4815      	ldr	r0, [pc, #84]	@ (8002428 <ForwardRight+0x1c4>)
 80023d2:	f7ff f8ed 	bl	80015b0 <PID_Update>
 80023d6:	eef0 7a40 	vmov.f32	s15, s0
 80023da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023de:	ee17 3a90 	vmov	r3, s15
 80023e2:	60fb      	str	r3, [r7, #12]
	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 80023e4:	4b17      	ldr	r3, [pc, #92]	@ (8002444 <ForwardRight+0x1e0>)
 80023e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	f7fe fbfb 	bl	8000be8 <__aeabi_d2f>
 80023f2:	4603      	mov	r3, r0
 80023f4:	ee00 3a10 	vmov	s0, r3
 80023f8:	480c      	ldr	r0, [pc, #48]	@ (800242c <ForwardRight+0x1c8>)
 80023fa:	f7ff f8d9 	bl	80015b0 <PID_Update>
 80023fe:	eef0 7a40 	vmov.f32	s15, s0
 8002402:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002406:	ee17 3a90 	vmov	r3, s15
 800240a:	60bb      	str	r3, [r7, #8]
	set_motor_pwm(L, R);
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f81a 	bl	8002448 <set_motor_pwm>
}
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	2000001d 	.word	0x2000001d
 8002420:	20000224 	.word	0x20000224
 8002424:	20000220 	.word	0x20000220
 8002428:	20000584 	.word	0x20000584
 800242c:	200005ac 	.word	0x200005ac
 8002430:	20000580 	.word	0x20000580
 8002434:	2000022c 	.word	0x2000022c
 8002438:	20000000 	.word	0x20000000
 800243c:	20000234 	.word	0x20000234
 8002440:	20000558 	.word	0x20000558
 8002444:	20000560 	.word	0x20000560

08002448 <set_motor_pwm>:
//	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
//	set_motor_pwm(L, R);
//
//}
void set_motor_pwm(int32_t L,int32_t R)
{	//4k max pwm
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]

	pwmValL=L;
 8002452:	4a1d      	ldr	r2, [pc, #116]	@ (80024c8 <set_motor_pwm+0x80>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6013      	str	r3, [r2, #0]
	pwmValR=R;
 8002458:	4a1c      	ldr	r2, [pc, #112]	@ (80024cc <set_motor_pwm+0x84>)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6013      	str	r3, [r2, #0]
	 if(pwmValL<0)
 800245e:	4b1a      	ldr	r3, [pc, #104]	@ (80024c8 <set_motor_pwm+0x80>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	da04      	bge.n	8002470 <set_motor_pwm+0x28>
		 pwmValL=500;
 8002466:	4b18      	ldr	r3, [pc, #96]	@ (80024c8 <set_motor_pwm+0x80>)
 8002468:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	e008      	b.n	8002482 <set_motor_pwm+0x3a>
	 else if(pwmValL>4000)
 8002470:	4b15      	ldr	r3, [pc, #84]	@ (80024c8 <set_motor_pwm+0x80>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002478:	dd03      	ble.n	8002482 <set_motor_pwm+0x3a>
		 pwmValL=4000;
 800247a:	4b13      	ldr	r3, [pc, #76]	@ (80024c8 <set_motor_pwm+0x80>)
 800247c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8002480:	601a      	str	r2, [r3, #0]

	 if(pwmValR<0)
 8002482:	4b12      	ldr	r3, [pc, #72]	@ (80024cc <set_motor_pwm+0x84>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	da04      	bge.n	8002494 <set_motor_pwm+0x4c>
		  pwmValR=500;
 800248a:	4b10      	ldr	r3, [pc, #64]	@ (80024cc <set_motor_pwm+0x84>)
 800248c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e008      	b.n	80024a6 <set_motor_pwm+0x5e>
	 else if(pwmValL>4000)
 8002494:	4b0c      	ldr	r3, [pc, #48]	@ (80024c8 <set_motor_pwm+0x80>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800249c:	dd03      	ble.n	80024a6 <set_motor_pwm+0x5e>
		  pwmValR=4000;
 800249e:	4b0b      	ldr	r3, [pc, #44]	@ (80024cc <set_motor_pwm+0x84>)
 80024a0:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80024a4:	601a      	str	r2, [r3, #0]

	 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValL);
 80024a6:	4b08      	ldr	r3, [pc, #32]	@ (80024c8 <set_motor_pwm+0x80>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <set_motor_pwm+0x88>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	635a      	str	r2, [r3, #52]	@ 0x34
	 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmValR);
 80024b0:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <set_motor_pwm+0x84>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <set_motor_pwm+0x88>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	639a      	str	r2, [r3, #56]	@ 0x38

	}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	200005d4 	.word	0x200005d4
 80024cc:	200005d8 	.word	0x200005d8
 80024d0:	2000048c 	.word	0x2000048c

080024d4 <set_servo_angle>:
    	servo_pwm = MAX_SERVO;
    }
    htim1.Instance->CCR4 = servo_pwm;
}
void set_servo_angle(uint8_t value)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
    if (value > 180) value = 180;
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	2bb4      	cmp	r3, #180	@ 0xb4
 80024e2:	d901      	bls.n	80024e8 <set_servo_angle+0x14>
 80024e4:	23b4      	movs	r3, #180	@ 0xb4
 80024e6:	71fb      	strb	r3, [r7, #7]
    if (value < 0) value = 0;

	 servo_pwm = 240 - ((value * (240 - 60)) / 180);
 80024e8:	79fb      	ldrb	r3, [r7, #7]
 80024ea:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80024ee:	4a08      	ldr	r2, [pc, #32]	@ (8002510 <set_servo_angle+0x3c>)
 80024f0:	6013      	str	r3, [r2, #0]
    if(servo_pwm > MAX_SERVO)
    {
    	servo_pwm = MAX_SERVO;

    }*/
	 angle=value;
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	4a07      	ldr	r2, [pc, #28]	@ (8002514 <set_servo_angle+0x40>)
 80024f6:	6013      	str	r3, [r2, #0]
    htim1.Instance->CCR4 = servo_pwm;
 80024f8:	4b05      	ldr	r3, [pc, #20]	@ (8002510 <set_servo_angle+0x3c>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4b06      	ldr	r3, [pc, #24]	@ (8002518 <set_servo_angle+0x44>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000014 	.word	0x20000014
 8002514:	200005e0 	.word	0x200005e0
 8002518:	20000324 	.word	0x20000324

0800251c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002520:	f001 fea0 	bl	8004264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002524:	f000 f8d2 	bl	80026cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002528:	f000 fcc0 	bl	8002eac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800252c:	f000 fc94 	bl	8002e58 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002530:	f000 faee 	bl	8002b10 <MX_TIM3_Init>
  MX_TIM6_Init();
 8002534:	f000 fbb0 	bl	8002c98 <MX_TIM6_Init>
  MX_TIM1_Init();
 8002538:	f000 f9f8 	bl	800292c <MX_TIM1_Init>
  MX_TIM8_Init();
 800253c:	f000 fbe2 	bl	8002d04 <MX_TIM8_Init>
  MX_I2C1_Init();
 8002540:	f000 f9c6 	bl	80028d0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002544:	f000 fa90 	bl	8002a68 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002548:	f000 fb36 	bl	8002bb8 <MX_TIM4_Init>
  MX_ADC1_Init();
 800254c:	f000 f91c 	bl	8002788 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002550:	f000 f96c 	bl	800282c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8002554:	f00a fcb6 	bl	800cec4 <OLED_Init>
  ICM20948_init(&hi2c1,0,GYRO_SENS,ACCEL_SENS);
 8002558:	2300      	movs	r3, #0
 800255a:	2203      	movs	r2, #3
 800255c:	2100      	movs	r1, #0
 800255e:	483e      	ldr	r0, [pc, #248]	@ (8002658 <main+0x13c>)
 8002560:	f007 f9a7 	bl	80098b2 <ICM20948_init>

  HAL_Delay(200);
 8002564:	20c8      	movs	r0, #200	@ 0xc8
 8002566:	f001 feef 	bl	8004348 <HAL_Delay>
  OLED_ShowString(10, 10, "Press to Start\0");
 800256a:	4a3c      	ldr	r2, [pc, #240]	@ (800265c <main+0x140>)
 800256c:	210a      	movs	r1, #10
 800256e:	200a      	movs	r0, #10
 8002570:	f00a fc76 	bl	800ce60 <OLED_ShowString>
  OLED_Refresh_Gram();
 8002574:	f00a fb00 	bl	800cb78 <OLED_Refresh_Gram>
  while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8)!=0);
 8002578:	bf00      	nop
 800257a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800257e:	4838      	ldr	r0, [pc, #224]	@ (8002660 <main+0x144>)
 8002580:	f002 fe46 	bl	8005210 <HAL_GPIO_ReadPin>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f7      	bne.n	800257a <main+0x5e>
  ICM20948_CalibrateAccel(&hi2c1, ACCEL_SENS, 250);
 800258a:	22fa      	movs	r2, #250	@ 0xfa
 800258c:	2100      	movs	r1, #0
 800258e:	4832      	ldr	r0, [pc, #200]	@ (8002658 <main+0x13c>)
 8002590:	f007 fcda 	bl	8009f48 <ICM20948_CalibrateAccel>
  ICM20948_CalibrateGyro(&hi2c1,GYRO_SENS, 250);
 8002594:	22fa      	movs	r2, #250	@ 0xfa
 8002596:	2103      	movs	r1, #3
 8002598:	482f      	ldr	r0, [pc, #188]	@ (8002658 <main+0x13c>)
 800259a:	f007 fc2d 	bl	8009df8 <ICM20948_CalibrateGyro>

  HAL_TIM_Base_Start(&htim6);// for microseond delay
 800259e:	4831      	ldr	r0, [pc, #196]	@ (8002664 <main+0x148>)
 80025a0:	f004 fb76 	bl	8006c90 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);//Timer for ultra sonic
 80025a4:	2100      	movs	r1, #0
 80025a6:	4830      	ldr	r0, [pc, #192]	@ (8002668 <main+0x14c>)
 80025a8:	f004 fd56 	bl	8007058 <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart3,(uint8_t *)aRxBuffer,RECEIVE_BUFFER_SIZE);//Receive data from uart
 80025ac:	2204      	movs	r2, #4
 80025ae:	492f      	ldr	r1, [pc, #188]	@ (800266c <main+0x150>)
 80025b0:	482f      	ldr	r0, [pc, #188]	@ (8002670 <main+0x154>)
 80025b2:	f006 f932 	bl	800881a <HAL_UART_Receive_IT>


  PID_Init(&LMotorPID, 5*100.0f, 15 *100.0f,0 , 0, -1000, 4000);
 80025b6:	eddf 2a2f 	vldr	s5, [pc, #188]	@ 8002674 <main+0x158>
 80025ba:	ed9f 2a2f 	vldr	s4, [pc, #188]	@ 8002678 <main+0x15c>
 80025be:	eddf 1a2f 	vldr	s3, [pc, #188]	@ 800267c <main+0x160>
 80025c2:	ed9f 1a2e 	vldr	s2, [pc, #184]	@ 800267c <main+0x160>
 80025c6:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 8002680 <main+0x164>
 80025ca:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8002684 <main+0x168>
 80025ce:	482e      	ldr	r0, [pc, #184]	@ (8002688 <main+0x16c>)
 80025d0:	f7fe ffba 	bl	8001548 <PID_Init>
  PID_Init(&RMotorPID, 5*100.0f, 15 *100.0f,0 , 0, -1000, 4000);
 80025d4:	eddf 2a27 	vldr	s5, [pc, #156]	@ 8002674 <main+0x158>
 80025d8:	ed9f 2a27 	vldr	s4, [pc, #156]	@ 8002678 <main+0x15c>
 80025dc:	eddf 1a27 	vldr	s3, [pc, #156]	@ 800267c <main+0x160>
 80025e0:	ed9f 1a26 	vldr	s2, [pc, #152]	@ 800267c <main+0x160>
 80025e4:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8002680 <main+0x164>
 80025e8:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8002684 <main+0x168>
 80025ec:	4827      	ldr	r0, [pc, #156]	@ (800268c <main+0x170>)
 80025ee:	f7fe ffab 	bl	8001548 <PID_Init>
  Set_Motor_Direction(1,1);//Keep forget put lmao
 80025f2:	2101      	movs	r1, #1
 80025f4:	2001      	movs	r0, #1
 80025f6:	f7ff f8ab 	bl	8001750 <Set_Motor_Direction>
  functionCheck();
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80025fa:	f007 fd3d 	bl	800a078 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80025fe:	4a24      	ldr	r2, [pc, #144]	@ (8002690 <main+0x174>)
 8002600:	2100      	movs	r1, #0
 8002602:	4824      	ldr	r0, [pc, #144]	@ (8002694 <main+0x178>)
 8002604:	f007 fd82 	bl	800a10c <osThreadNew>
 8002608:	4603      	mov	r3, r0
 800260a:	4a23      	ldr	r2, [pc, #140]	@ (8002698 <main+0x17c>)
 800260c:	6013      	str	r3, [r2, #0]

  /* creation of oledTask */
  oledTaskHandle = osThreadNew(StartOledTask, NULL, &oledTask_attributes);
 800260e:	4a23      	ldr	r2, [pc, #140]	@ (800269c <main+0x180>)
 8002610:	2100      	movs	r1, #0
 8002612:	4823      	ldr	r0, [pc, #140]	@ (80026a0 <main+0x184>)
 8002614:	f007 fd7a 	bl	800a10c <osThreadNew>
 8002618:	4603      	mov	r3, r0
 800261a:	4a22      	ldr	r2, [pc, #136]	@ (80026a4 <main+0x188>)
 800261c:	6013      	str	r3, [r2, #0]

  /* creation of sensorTask */
  sensorTaskHandle = osThreadNew(Startsensor, NULL, &sensorTask_attributes);
 800261e:	4a22      	ldr	r2, [pc, #136]	@ (80026a8 <main+0x18c>)
 8002620:	2100      	movs	r1, #0
 8002622:	4822      	ldr	r0, [pc, #136]	@ (80026ac <main+0x190>)
 8002624:	f007 fd72 	bl	800a10c <osThreadNew>
 8002628:	4603      	mov	r3, r0
 800262a:	4a21      	ldr	r2, [pc, #132]	@ (80026b0 <main+0x194>)
 800262c:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 800262e:	4a21      	ldr	r2, [pc, #132]	@ (80026b4 <main+0x198>)
 8002630:	2100      	movs	r1, #0
 8002632:	4821      	ldr	r0, [pc, #132]	@ (80026b8 <main+0x19c>)
 8002634:	f007 fd6a 	bl	800a10c <osThreadNew>
 8002638:	4603      	mov	r3, r0
 800263a:	4a20      	ldr	r2, [pc, #128]	@ (80026bc <main+0x1a0>)
 800263c:	6013      	str	r3, [r2, #0]

  /* creation of robotTask */
  robotTaskHandle = osThreadNew(startrobotTask, NULL, &robotTask_attributes);
 800263e:	4a20      	ldr	r2, [pc, #128]	@ (80026c0 <main+0x1a4>)
 8002640:	2100      	movs	r1, #0
 8002642:	4820      	ldr	r0, [pc, #128]	@ (80026c4 <main+0x1a8>)
 8002644:	f007 fd62 	bl	800a10c <osThreadNew>
 8002648:	4603      	mov	r3, r0
 800264a:	4a1f      	ldr	r2, [pc, #124]	@ (80026c8 <main+0x1ac>)
 800264c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800264e:	f007 fd37 	bl	800a0c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002652:	bf00      	nop
 8002654:	e7fd      	b.n	8002652 <main+0x136>
 8002656:	bf00      	nop
 8002658:	200002d0 	.word	0x200002d0
 800265c:	080103d0 	.word	0x080103d0
 8002660:	40020c00 	.word	0x40020c00
 8002664:	20000444 	.word	0x20000444
 8002668:	200003fc 	.word	0x200003fc
 800266c:	200005e4 	.word	0x200005e4
 8002670:	200004d4 	.word	0x200004d4
 8002674:	457a0000 	.word	0x457a0000
 8002678:	c47a0000 	.word	0xc47a0000
 800267c:	00000000 	.word	0x00000000
 8002680:	44bb8000 	.word	0x44bb8000
 8002684:	43fa0000 	.word	0x43fa0000
 8002688:	20000584 	.word	0x20000584
 800268c:	200005ac 	.word	0x200005ac
 8002690:	08010470 	.word	0x08010470
 8002694:	08003309 	.word	0x08003309
 8002698:	2000051c 	.word	0x2000051c
 800269c:	08010494 	.word	0x08010494
 80026a0:	08003329 	.word	0x08003329
 80026a4:	20000520 	.word	0x20000520
 80026a8:	080104b8 	.word	0x080104b8
 80026ac:	0800346d 	.word	0x0800346d
 80026b0:	20000524 	.word	0x20000524
 80026b4:	080104dc 	.word	0x080104dc
 80026b8:	080034c1 	.word	0x080034c1
 80026bc:	20000528 	.word	0x20000528
 80026c0:	08010500 	.word	0x08010500
 80026c4:	08003779 	.word	0x08003779
 80026c8:	2000052c 	.word	0x2000052c

080026cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b094      	sub	sp, #80	@ 0x50
 80026d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026d2:	f107 0320 	add.w	r3, r7, #32
 80026d6:	2230      	movs	r2, #48	@ 0x30
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f00b fa97 	bl	800dc0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026e0:	f107 030c 	add.w	r3, r7, #12
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f0:	2300      	movs	r3, #0
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	4b22      	ldr	r3, [pc, #136]	@ (8002780 <SystemClock_Config+0xb4>)
 80026f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f8:	4a21      	ldr	r2, [pc, #132]	@ (8002780 <SystemClock_Config+0xb4>)
 80026fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002700:	4b1f      	ldr	r3, [pc, #124]	@ (8002780 <SystemClock_Config+0xb4>)
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800270c:	2300      	movs	r3, #0
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	4b1c      	ldr	r3, [pc, #112]	@ (8002784 <SystemClock_Config+0xb8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a1b      	ldr	r2, [pc, #108]	@ (8002784 <SystemClock_Config+0xb8>)
 8002716:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	4b19      	ldr	r3, [pc, #100]	@ (8002784 <SystemClock_Config+0xb8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002724:	607b      	str	r3, [r7, #4]
 8002726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002728:	2302      	movs	r3, #2
 800272a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800272c:	2301      	movs	r3, #1
 800272e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002730:	2310      	movs	r3, #16
 8002732:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002734:	2300      	movs	r3, #0
 8002736:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002738:	f107 0320 	add.w	r3, r7, #32
 800273c:	4618      	mov	r0, r3
 800273e:	f003 fdff 	bl	8006340 <HAL_RCC_OscConfig>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002748:	f001 f98a 	bl	8003a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800274c:	230f      	movs	r3, #15
 800274e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002750:	2300      	movs	r3, #0
 8002752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002758:	2300      	movs	r3, #0
 800275a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800275c:	2300      	movs	r3, #0
 800275e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002760:	f107 030c 	add.w	r3, r7, #12
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f004 f862 	bl	8006830 <HAL_RCC_ClockConfig>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002772:	f001 f975 	bl	8003a60 <Error_Handler>
  }
}
 8002776:	bf00      	nop
 8002778:	3750      	adds	r7, #80	@ 0x50
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40023800 	.word	0x40023800
 8002784:	40007000 	.word	0x40007000

08002788 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800278e:	463b      	mov	r3, r7
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800279a:	4b21      	ldr	r3, [pc, #132]	@ (8002820 <MX_ADC1_Init+0x98>)
 800279c:	4a21      	ldr	r2, [pc, #132]	@ (8002824 <MX_ADC1_Init+0x9c>)
 800279e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80027a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002820 <MX_ADC1_Init+0x98>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80027a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002820 <MX_ADC1_Init+0x98>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80027ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002820 <MX_ADC1_Init+0x98>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80027b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002820 <MX_ADC1_Init+0x98>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027b8:	4b19      	ldr	r3, [pc, #100]	@ (8002820 <MX_ADC1_Init+0x98>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027c0:	4b17      	ldr	r3, [pc, #92]	@ (8002820 <MX_ADC1_Init+0x98>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027c6:	4b16      	ldr	r3, [pc, #88]	@ (8002820 <MX_ADC1_Init+0x98>)
 80027c8:	4a17      	ldr	r2, [pc, #92]	@ (8002828 <MX_ADC1_Init+0xa0>)
 80027ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80027cc:	4b14      	ldr	r3, [pc, #80]	@ (8002820 <MX_ADC1_Init+0x98>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80027d2:	4b13      	ldr	r3, [pc, #76]	@ (8002820 <MX_ADC1_Init+0x98>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80027d8:	4b11      	ldr	r3, [pc, #68]	@ (8002820 <MX_ADC1_Init+0x98>)
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002820 <MX_ADC1_Init+0x98>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027e6:	480e      	ldr	r0, [pc, #56]	@ (8002820 <MX_ADC1_Init+0x98>)
 80027e8:	f001 fdd2 	bl	8004390 <HAL_ADC_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80027f2:	f001 f935 	bl	8003a60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80027fa:	2301      	movs	r3, #1
 80027fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80027fe:	2300      	movs	r3, #0
 8002800:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002802:	463b      	mov	r3, r7
 8002804:	4619      	mov	r1, r3
 8002806:	4806      	ldr	r0, [pc, #24]	@ (8002820 <MX_ADC1_Init+0x98>)
 8002808:	f001 ffa4 	bl	8004754 <HAL_ADC_ConfigChannel>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002812:	f001 f925 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000240 	.word	0x20000240
 8002824:	40012000 	.word	0x40012000
 8002828:	0f000001 	.word	0x0f000001

0800282c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002832:	463b      	mov	r3, r7
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800283e:	4b21      	ldr	r3, [pc, #132]	@ (80028c4 <MX_ADC2_Init+0x98>)
 8002840:	4a21      	ldr	r2, [pc, #132]	@ (80028c8 <MX_ADC2_Init+0x9c>)
 8002842:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002844:	4b1f      	ldr	r3, [pc, #124]	@ (80028c4 <MX_ADC2_Init+0x98>)
 8002846:	2200      	movs	r2, #0
 8002848:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800284a:	4b1e      	ldr	r3, [pc, #120]	@ (80028c4 <MX_ADC2_Init+0x98>)
 800284c:	2200      	movs	r2, #0
 800284e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002850:	4b1c      	ldr	r3, [pc, #112]	@ (80028c4 <MX_ADC2_Init+0x98>)
 8002852:	2200      	movs	r2, #0
 8002854:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002856:	4b1b      	ldr	r3, [pc, #108]	@ (80028c4 <MX_ADC2_Init+0x98>)
 8002858:	2200      	movs	r2, #0
 800285a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800285c:	4b19      	ldr	r3, [pc, #100]	@ (80028c4 <MX_ADC2_Init+0x98>)
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002864:	4b17      	ldr	r3, [pc, #92]	@ (80028c4 <MX_ADC2_Init+0x98>)
 8002866:	2200      	movs	r2, #0
 8002868:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800286a:	4b16      	ldr	r3, [pc, #88]	@ (80028c4 <MX_ADC2_Init+0x98>)
 800286c:	4a17      	ldr	r2, [pc, #92]	@ (80028cc <MX_ADC2_Init+0xa0>)
 800286e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002870:	4b14      	ldr	r3, [pc, #80]	@ (80028c4 <MX_ADC2_Init+0x98>)
 8002872:	2200      	movs	r2, #0
 8002874:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002876:	4b13      	ldr	r3, [pc, #76]	@ (80028c4 <MX_ADC2_Init+0x98>)
 8002878:	2201      	movs	r2, #1
 800287a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800287c:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <MX_ADC2_Init+0x98>)
 800287e:	2200      	movs	r2, #0
 8002880:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002884:	4b0f      	ldr	r3, [pc, #60]	@ (80028c4 <MX_ADC2_Init+0x98>)
 8002886:	2201      	movs	r2, #1
 8002888:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800288a:	480e      	ldr	r0, [pc, #56]	@ (80028c4 <MX_ADC2_Init+0x98>)
 800288c:	f001 fd80 	bl	8004390 <HAL_ADC_Init>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8002896:	f001 f8e3 	bl	8003a60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800289a:	2301      	movs	r3, #1
 800289c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800289e:	2301      	movs	r3, #1
 80028a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80028a6:	463b      	mov	r3, r7
 80028a8:	4619      	mov	r1, r3
 80028aa:	4806      	ldr	r0, [pc, #24]	@ (80028c4 <MX_ADC2_Init+0x98>)
 80028ac:	f001 ff52 	bl	8004754 <HAL_ADC_ConfigChannel>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80028b6:	f001 f8d3 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000288 	.word	0x20000288
 80028c8:	40012100 	.word	0x40012100
 80028cc:	0f000001 	.word	0x0f000001

080028d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80028d4:	4b12      	ldr	r3, [pc, #72]	@ (8002920 <MX_I2C1_Init+0x50>)
 80028d6:	4a13      	ldr	r2, [pc, #76]	@ (8002924 <MX_I2C1_Init+0x54>)
 80028d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80028da:	4b11      	ldr	r3, [pc, #68]	@ (8002920 <MX_I2C1_Init+0x50>)
 80028dc:	4a12      	ldr	r2, [pc, #72]	@ (8002928 <MX_I2C1_Init+0x58>)
 80028de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002920 <MX_I2C1_Init+0x50>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002920 <MX_I2C1_Init+0x50>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002920 <MX_I2C1_Init+0x50>)
 80028ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002920 <MX_I2C1_Init+0x50>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028fa:	4b09      	ldr	r3, [pc, #36]	@ (8002920 <MX_I2C1_Init+0x50>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002900:	4b07      	ldr	r3, [pc, #28]	@ (8002920 <MX_I2C1_Init+0x50>)
 8002902:	2200      	movs	r2, #0
 8002904:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002906:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <MX_I2C1_Init+0x50>)
 8002908:	2200      	movs	r2, #0
 800290a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800290c:	4804      	ldr	r0, [pc, #16]	@ (8002920 <MX_I2C1_Init+0x50>)
 800290e:	f002 fccb 	bl	80052a8 <HAL_I2C_Init>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002918:	f001 f8a2 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}
 8002920:	200002d0 	.word	0x200002d0
 8002924:	40005400 	.word	0x40005400
 8002928:	000186a0 	.word	0x000186a0

0800292c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b096      	sub	sp, #88	@ 0x58
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002932:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002940:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800294a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
 8002952:	605a      	str	r2, [r3, #4]
 8002954:	609a      	str	r2, [r3, #8]
 8002956:	60da      	str	r2, [r3, #12]
 8002958:	611a      	str	r2, [r3, #16]
 800295a:	615a      	str	r2, [r3, #20]
 800295c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800295e:	1d3b      	adds	r3, r7, #4
 8002960:	2220      	movs	r2, #32
 8002962:	2100      	movs	r1, #0
 8002964:	4618      	mov	r0, r3
 8002966:	f00b f952 	bl	800dc0e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800296a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a60 <MX_TIM1_Init+0x134>)
 800296c:	4a3d      	ldr	r2, [pc, #244]	@ (8002a64 <MX_TIM1_Init+0x138>)
 800296e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8002970:	4b3b      	ldr	r3, [pc, #236]	@ (8002a60 <MX_TIM1_Init+0x134>)
 8002972:	22a0      	movs	r2, #160	@ 0xa0
 8002974:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002976:	4b3a      	ldr	r3, [pc, #232]	@ (8002a60 <MX_TIM1_Init+0x134>)
 8002978:	2200      	movs	r2, #0
 800297a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800297c:	4b38      	ldr	r3, [pc, #224]	@ (8002a60 <MX_TIM1_Init+0x134>)
 800297e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002982:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002984:	4b36      	ldr	r3, [pc, #216]	@ (8002a60 <MX_TIM1_Init+0x134>)
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800298a:	4b35      	ldr	r3, [pc, #212]	@ (8002a60 <MX_TIM1_Init+0x134>)
 800298c:	2200      	movs	r2, #0
 800298e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002990:	4b33      	ldr	r3, [pc, #204]	@ (8002a60 <MX_TIM1_Init+0x134>)
 8002992:	2200      	movs	r2, #0
 8002994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002996:	4832      	ldr	r0, [pc, #200]	@ (8002a60 <MX_TIM1_Init+0x134>)
 8002998:	f004 f92a 	bl	8006bf0 <HAL_TIM_Base_Init>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80029a2:	f001 f85d 	bl	8003a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80029ac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80029b0:	4619      	mov	r1, r3
 80029b2:	482b      	ldr	r0, [pc, #172]	@ (8002a60 <MX_TIM1_Init+0x134>)
 80029b4:	f004 fffa 	bl	80079ac <HAL_TIM_ConfigClockSource>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80029be:	f001 f84f 	bl	8003a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80029c2:	4827      	ldr	r0, [pc, #156]	@ (8002a60 <MX_TIM1_Init+0x134>)
 80029c4:	f004 f9cc 	bl	8006d60 <HAL_TIM_PWM_Init>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80029ce:	f001 f847 	bl	8003a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029d2:	2300      	movs	r3, #0
 80029d4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029da:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80029de:	4619      	mov	r1, r3
 80029e0:	481f      	ldr	r0, [pc, #124]	@ (8002a60 <MX_TIM1_Init+0x134>)
 80029e2:	f005 fd5d 	bl	80084a0 <HAL_TIMEx_MasterConfigSynchronization>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80029ec:	f001 f838 	bl	8003a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029f0:	2360      	movs	r3, #96	@ 0x60
 80029f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029f8:	2300      	movs	r3, #0
 80029fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029fc:	2300      	movs	r3, #0
 80029fe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a00:	2300      	movs	r3, #0
 8002a02:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a04:	2300      	movs	r3, #0
 8002a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a0c:	220c      	movs	r2, #12
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4813      	ldr	r0, [pc, #76]	@ (8002a60 <MX_TIM1_Init+0x134>)
 8002a12:	f004 ff09 	bl	8007828 <HAL_TIM_PWM_ConfigChannel>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002a1c:	f001 f820 	bl	8003a60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a3e:	1d3b      	adds	r3, r7, #4
 8002a40:	4619      	mov	r1, r3
 8002a42:	4807      	ldr	r0, [pc, #28]	@ (8002a60 <MX_TIM1_Init+0x134>)
 8002a44:	f005 fda8 	bl	8008598 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8002a4e:	f001 f807 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002a52:	4803      	ldr	r0, [pc, #12]	@ (8002a60 <MX_TIM1_Init+0x134>)
 8002a54:	f001 fa3e 	bl	8003ed4 <HAL_TIM_MspPostInit>

}
 8002a58:	bf00      	nop
 8002a5a:	3758      	adds	r7, #88	@ 0x58
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000324 	.word	0x20000324
 8002a64:	40010000 	.word	0x40010000

08002a68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08c      	sub	sp, #48	@ 0x30
 8002a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a6e:	f107 030c 	add.w	r3, r7, #12
 8002a72:	2224      	movs	r2, #36	@ 0x24
 8002a74:	2100      	movs	r1, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f00b f8c9 	bl	800dc0e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a7c:	1d3b      	adds	r3, r7, #4
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a84:	4b21      	ldr	r3, [pc, #132]	@ (8002b0c <MX_TIM2_Init+0xa4>)
 8002a86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a8c:	4b1f      	ldr	r3, [pc, #124]	@ (8002b0c <MX_TIM2_Init+0xa4>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a92:	4b1e      	ldr	r3, [pc, #120]	@ (8002b0c <MX_TIM2_Init+0xa4>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002a98:	4b1c      	ldr	r3, [pc, #112]	@ (8002b0c <MX_TIM2_Init+0xa4>)
 8002a9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8002b0c <MX_TIM2_Init+0xa4>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aa6:	4b19      	ldr	r3, [pc, #100]	@ (8002b0c <MX_TIM2_Init+0xa4>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002aac:	2303      	movs	r3, #3
 8002aae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002abc:	230a      	movs	r3, #10
 8002abe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8002acc:	230a      	movs	r3, #10
 8002ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002ad0:	f107 030c 	add.w	r3, r7, #12
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	480d      	ldr	r0, [pc, #52]	@ (8002b0c <MX_TIM2_Init+0xa4>)
 8002ad8:	f004 fbe6 	bl	80072a8 <HAL_TIM_Encoder_Init>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002ae2:	f000 ffbd 	bl	8003a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002aee:	1d3b      	adds	r3, r7, #4
 8002af0:	4619      	mov	r1, r3
 8002af2:	4806      	ldr	r0, [pc, #24]	@ (8002b0c <MX_TIM2_Init+0xa4>)
 8002af4:	f005 fcd4 	bl	80084a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002afe:	f000 ffaf 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b02:	bf00      	nop
 8002b04:	3730      	adds	r7, #48	@ 0x30
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	2000036c 	.word	0x2000036c

08002b10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08c      	sub	sp, #48	@ 0x30
 8002b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b16:	f107 030c 	add.w	r3, r7, #12
 8002b1a:	2224      	movs	r2, #36	@ 0x24
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f00b f875 	bl	800dc0e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b24:	1d3b      	adds	r3, r7, #4
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b2c:	4b20      	ldr	r3, [pc, #128]	@ (8002bb0 <MX_TIM3_Init+0xa0>)
 8002b2e:	4a21      	ldr	r2, [pc, #132]	@ (8002bb4 <MX_TIM3_Init+0xa4>)
 8002b30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b32:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb0 <MX_TIM3_Init+0xa0>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b38:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb0 <MX_TIM3_Init+0xa0>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb0 <MX_TIM3_Init+0xa0>)
 8002b40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b44:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b46:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb0 <MX_TIM3_Init+0xa0>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b4c:	4b18      	ldr	r3, [pc, #96]	@ (8002bb0 <MX_TIM3_Init+0xa0>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b52:	2303      	movs	r3, #3
 8002b54:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002b62:	230a      	movs	r3, #10
 8002b64:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b66:	2300      	movs	r3, #0
 8002b68:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8002b72:	230a      	movs	r3, #10
 8002b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002b76:	f107 030c 	add.w	r3, r7, #12
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	480c      	ldr	r0, [pc, #48]	@ (8002bb0 <MX_TIM3_Init+0xa0>)
 8002b7e:	f004 fb93 	bl	80072a8 <HAL_TIM_Encoder_Init>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002b88:	f000 ff6a 	bl	8003a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	4619      	mov	r1, r3
 8002b98:	4805      	ldr	r0, [pc, #20]	@ (8002bb0 <MX_TIM3_Init+0xa0>)
 8002b9a:	f005 fc81 	bl	80084a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002ba4:	f000 ff5c 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ba8:	bf00      	nop
 8002baa:	3730      	adds	r7, #48	@ 0x30
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	200003b4 	.word	0x200003b4
 8002bb4:	40000400 	.word	0x40000400

08002bb8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08a      	sub	sp, #40	@ 0x28
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bbe:	f107 0318 	add.w	r3, r7, #24
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]
 8002bc8:	609a      	str	r2, [r3, #8]
 8002bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bcc:	f107 0310 	add.w	r3, r7, #16
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002bd6:	463b      	mov	r3, r7
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
 8002bdc:	605a      	str	r2, [r3, #4]
 8002bde:	609a      	str	r2, [r3, #8]
 8002be0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002be2:	4b2b      	ldr	r3, [pc, #172]	@ (8002c90 <MX_TIM4_Init+0xd8>)
 8002be4:	4a2b      	ldr	r2, [pc, #172]	@ (8002c94 <MX_TIM4_Init+0xdc>)
 8002be6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8002be8:	4b29      	ldr	r3, [pc, #164]	@ (8002c90 <MX_TIM4_Init+0xd8>)
 8002bea:	220f      	movs	r2, #15
 8002bec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bee:	4b28      	ldr	r3, [pc, #160]	@ (8002c90 <MX_TIM4_Init+0xd8>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002bf4:	4b26      	ldr	r3, [pc, #152]	@ (8002c90 <MX_TIM4_Init+0xd8>)
 8002bf6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bfa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bfc:	4b24      	ldr	r3, [pc, #144]	@ (8002c90 <MX_TIM4_Init+0xd8>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c02:	4b23      	ldr	r3, [pc, #140]	@ (8002c90 <MX_TIM4_Init+0xd8>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c08:	4821      	ldr	r0, [pc, #132]	@ (8002c90 <MX_TIM4_Init+0xd8>)
 8002c0a:	f003 fff1 	bl	8006bf0 <HAL_TIM_Base_Init>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8002c14:	f000 ff24 	bl	8003a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c1c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c1e:	f107 0318 	add.w	r3, r7, #24
 8002c22:	4619      	mov	r1, r3
 8002c24:	481a      	ldr	r0, [pc, #104]	@ (8002c90 <MX_TIM4_Init+0xd8>)
 8002c26:	f004 fec1 	bl	80079ac <HAL_TIM_ConfigClockSource>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002c30:	f000 ff16 	bl	8003a60 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002c34:	4816      	ldr	r0, [pc, #88]	@ (8002c90 <MX_TIM4_Init+0xd8>)
 8002c36:	f004 f9b5 	bl	8006fa4 <HAL_TIM_IC_Init>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002c40:	f000 ff0e 	bl	8003a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c44:	2300      	movs	r3, #0
 8002c46:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002c4c:	f107 0310 	add.w	r3, r7, #16
 8002c50:	4619      	mov	r1, r3
 8002c52:	480f      	ldr	r0, [pc, #60]	@ (8002c90 <MX_TIM4_Init+0xd8>)
 8002c54:	f005 fc24 	bl	80084a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8002c5e:	f000 feff 	bl	8003a60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002c62:	230a      	movs	r3, #10
 8002c64:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002c66:	2301      	movs	r3, #1
 8002c68:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002c72:	463b      	mov	r3, r7
 8002c74:	2200      	movs	r2, #0
 8002c76:	4619      	mov	r1, r3
 8002c78:	4805      	ldr	r0, [pc, #20]	@ (8002c90 <MX_TIM4_Init+0xd8>)
 8002c7a:	f004 fd39 	bl	80076f0 <HAL_TIM_IC_ConfigChannel>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8002c84:	f000 feec 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002c88:	bf00      	nop
 8002c8a:	3728      	adds	r7, #40	@ 0x28
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	200003fc 	.word	0x200003fc
 8002c94:	40000800 	.word	0x40000800

08002c98 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c9e:	463b      	mov	r3, r7
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002ca6:	4b15      	ldr	r3, [pc, #84]	@ (8002cfc <MX_TIM6_Init+0x64>)
 8002ca8:	4a15      	ldr	r2, [pc, #84]	@ (8002d00 <MX_TIM6_Init+0x68>)
 8002caa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 8002cac:	4b13      	ldr	r3, [pc, #76]	@ (8002cfc <MX_TIM6_Init+0x64>)
 8002cae:	220f      	movs	r2, #15
 8002cb0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb2:	4b12      	ldr	r3, [pc, #72]	@ (8002cfc <MX_TIM6_Init+0x64>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002cb8:	4b10      	ldr	r3, [pc, #64]	@ (8002cfc <MX_TIM6_Init+0x64>)
 8002cba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cbe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002cfc <MX_TIM6_Init+0x64>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002cc6:	480d      	ldr	r0, [pc, #52]	@ (8002cfc <MX_TIM6_Init+0x64>)
 8002cc8:	f003 ff92 	bl	8006bf0 <HAL_TIM_Base_Init>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002cd2:	f000 fec5 	bl	8003a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002cde:	463b      	mov	r3, r7
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4806      	ldr	r0, [pc, #24]	@ (8002cfc <MX_TIM6_Init+0x64>)
 8002ce4:	f005 fbdc 	bl	80084a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002cee:	f000 feb7 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002cf2:	bf00      	nop
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000444 	.word	0x20000444
 8002d00:	40001000 	.word	0x40001000

08002d04 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b096      	sub	sp, #88	@ 0x58
 8002d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d0a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	605a      	str	r2, [r3, #4]
 8002d14:	609a      	str	r2, [r3, #8]
 8002d16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d18:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d26:	2200      	movs	r2, #0
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	605a      	str	r2, [r3, #4]
 8002d2c:	609a      	str	r2, [r3, #8]
 8002d2e:	60da      	str	r2, [r3, #12]
 8002d30:	611a      	str	r2, [r3, #16]
 8002d32:	615a      	str	r2, [r3, #20]
 8002d34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d36:	1d3b      	adds	r3, r7, #4
 8002d38:	2220      	movs	r2, #32
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f00a ff66 	bl	800dc0e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002d42:	4b43      	ldr	r3, [pc, #268]	@ (8002e50 <MX_TIM8_Init+0x14c>)
 8002d44:	4a43      	ldr	r2, [pc, #268]	@ (8002e54 <MX_TIM8_Init+0x150>)
 8002d46:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002d48:	4b41      	ldr	r3, [pc, #260]	@ (8002e50 <MX_TIM8_Init+0x14c>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d4e:	4b40      	ldr	r3, [pc, #256]	@ (8002e50 <MX_TIM8_Init+0x14c>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8002d54:	4b3e      	ldr	r3, [pc, #248]	@ (8002e50 <MX_TIM8_Init+0x14c>)
 8002d56:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002d5a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d5c:	4b3c      	ldr	r3, [pc, #240]	@ (8002e50 <MX_TIM8_Init+0x14c>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002d62:	4b3b      	ldr	r3, [pc, #236]	@ (8002e50 <MX_TIM8_Init+0x14c>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d68:	4b39      	ldr	r3, [pc, #228]	@ (8002e50 <MX_TIM8_Init+0x14c>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002d6e:	4838      	ldr	r0, [pc, #224]	@ (8002e50 <MX_TIM8_Init+0x14c>)
 8002d70:	f003 ff3e 	bl	8006bf0 <HAL_TIM_Base_Init>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002d7a:	f000 fe71 	bl	8003a60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d82:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002d84:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4831      	ldr	r0, [pc, #196]	@ (8002e50 <MX_TIM8_Init+0x14c>)
 8002d8c:	f004 fe0e 	bl	80079ac <HAL_TIM_ConfigClockSource>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002d96:	f000 fe63 	bl	8003a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002d9a:	482d      	ldr	r0, [pc, #180]	@ (8002e50 <MX_TIM8_Init+0x14c>)
 8002d9c:	f003 ffe0 	bl	8006d60 <HAL_TIM_PWM_Init>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002da6:	f000 fe5b 	bl	8003a60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002daa:	2300      	movs	r3, #0
 8002dac:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dae:	2300      	movs	r3, #0
 8002db0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002db2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002db6:	4619      	mov	r1, r3
 8002db8:	4825      	ldr	r0, [pc, #148]	@ (8002e50 <MX_TIM8_Init+0x14c>)
 8002dba:	f005 fb71 	bl	80084a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002dc4:	f000 fe4c 	bl	8003a60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dc8:	2360      	movs	r3, #96	@ 0x60
 8002dca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002de0:	2300      	movs	r3, #0
 8002de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002de4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002de8:	2200      	movs	r2, #0
 8002dea:	4619      	mov	r1, r3
 8002dec:	4818      	ldr	r0, [pc, #96]	@ (8002e50 <MX_TIM8_Init+0x14c>)
 8002dee:	f004 fd1b 	bl	8007828 <HAL_TIM_PWM_ConfigChannel>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002df8:	f000 fe32 	bl	8003a60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002dfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e00:	2204      	movs	r2, #4
 8002e02:	4619      	mov	r1, r3
 8002e04:	4812      	ldr	r0, [pc, #72]	@ (8002e50 <MX_TIM8_Init+0x14c>)
 8002e06:	f004 fd0f 	bl	8007828 <HAL_TIM_PWM_ConfigChannel>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002e10:	f000 fe26 	bl	8003a60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e14:	2300      	movs	r3, #0
 8002e16:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e2c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002e32:	1d3b      	adds	r3, r7, #4
 8002e34:	4619      	mov	r1, r3
 8002e36:	4806      	ldr	r0, [pc, #24]	@ (8002e50 <MX_TIM8_Init+0x14c>)
 8002e38:	f005 fbae 	bl	8008598 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8002e42:	f000 fe0d 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002e46:	bf00      	nop
 8002e48:	3758      	adds	r7, #88	@ 0x58
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	2000048c 	.word	0x2000048c
 8002e54:	40010400 	.word	0x40010400

08002e58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ea4 <MX_USART3_UART_Init+0x4c>)
 8002e5e:	4a12      	ldr	r2, [pc, #72]	@ (8002ea8 <MX_USART3_UART_Init+0x50>)
 8002e60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e62:	4b10      	ldr	r3, [pc, #64]	@ (8002ea4 <MX_USART3_UART_Init+0x4c>)
 8002e64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea4 <MX_USART3_UART_Init+0x4c>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea4 <MX_USART3_UART_Init+0x4c>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e76:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea4 <MX_USART3_UART_Init+0x4c>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e7c:	4b09      	ldr	r3, [pc, #36]	@ (8002ea4 <MX_USART3_UART_Init+0x4c>)
 8002e7e:	220c      	movs	r2, #12
 8002e80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e82:	4b08      	ldr	r3, [pc, #32]	@ (8002ea4 <MX_USART3_UART_Init+0x4c>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e88:	4b06      	ldr	r3, [pc, #24]	@ (8002ea4 <MX_USART3_UART_Init+0x4c>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e8e:	4805      	ldr	r0, [pc, #20]	@ (8002ea4 <MX_USART3_UART_Init+0x4c>)
 8002e90:	f005 fbe8 	bl	8008664 <HAL_UART_Init>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002e9a:	f000 fde1 	bl	8003a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	200004d4 	.word	0x200004d4
 8002ea8:	40004800 	.word	0x40004800

08002eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08a      	sub	sp, #40	@ 0x28
 8002eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb2:	f107 0314 	add.w	r3, r7, #20
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	605a      	str	r2, [r3, #4]
 8002ebc:	609a      	str	r2, [r3, #8]
 8002ebe:	60da      	str	r2, [r3, #12]
 8002ec0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8002fc0 <MX_GPIO_Init+0x114>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	4a3d      	ldr	r2, [pc, #244]	@ (8002fc0 <MX_GPIO_Init+0x114>)
 8002ecc:	f043 0310 	orr.w	r3, r3, #16
 8002ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8002fc0 <MX_GPIO_Init+0x114>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	4b37      	ldr	r3, [pc, #220]	@ (8002fc0 <MX_GPIO_Init+0x114>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee6:	4a36      	ldr	r2, [pc, #216]	@ (8002fc0 <MX_GPIO_Init+0x114>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eee:	4b34      	ldr	r3, [pc, #208]	@ (8002fc0 <MX_GPIO_Init+0x114>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	4b30      	ldr	r3, [pc, #192]	@ (8002fc0 <MX_GPIO_Init+0x114>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	4a2f      	ldr	r2, [pc, #188]	@ (8002fc0 <MX_GPIO_Init+0x114>)
 8002f04:	f043 0308 	orr.w	r3, r3, #8
 8002f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f0a:	4b2d      	ldr	r3, [pc, #180]	@ (8002fc0 <MX_GPIO_Init+0x114>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	4b29      	ldr	r3, [pc, #164]	@ (8002fc0 <MX_GPIO_Init+0x114>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	4a28      	ldr	r2, [pc, #160]	@ (8002fc0 <MX_GPIO_Init+0x114>)
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f26:	4b26      	ldr	r3, [pc, #152]	@ (8002fc0 <MX_GPIO_Init+0x114>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	607b      	str	r3, [r7, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	603b      	str	r3, [r7, #0]
 8002f36:	4b22      	ldr	r3, [pc, #136]	@ (8002fc0 <MX_GPIO_Init+0x114>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3a:	4a21      	ldr	r2, [pc, #132]	@ (8002fc0 <MX_GPIO_Init+0x114>)
 8002f3c:	f043 0302 	orr.w	r3, r3, #2
 8002f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f42:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc0 <MX_GPIO_Init+0x114>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8002f54:	481b      	ldr	r0, [pc, #108]	@ (8002fc4 <MX_GPIO_Init+0x118>)
 8002f56:	f002 f973 	bl	8005240 <HAL_GPIO_WritePin>
                          |TRIG_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	213c      	movs	r1, #60	@ 0x3c
 8002f5e:	481a      	ldr	r0, [pc, #104]	@ (8002fc8 <MX_GPIO_Init+0x11c>)
 8002f60:	f002 f96e 	bl	8005240 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           TRIG_Pin LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8002f64:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002f68:	617b      	str	r3, [r7, #20]
                          |TRIG_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f72:	2300      	movs	r3, #0
 8002f74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f76:	f107 0314 	add.w	r3, r7, #20
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4811      	ldr	r0, [pc, #68]	@ (8002fc4 <MX_GPIO_Init+0x118>)
 8002f7e:	f001 ffab 	bl	8004ed8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8002f82:	233c      	movs	r3, #60	@ 0x3c
 8002f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f86:	2301      	movs	r3, #1
 8002f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f92:	f107 0314 	add.w	r3, r7, #20
 8002f96:	4619      	mov	r1, r3
 8002f98:	480b      	ldr	r0, [pc, #44]	@ (8002fc8 <MX_GPIO_Init+0x11c>)
 8002f9a:	f001 ff9d 	bl	8004ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fac:	f107 0314 	add.w	r3, r7, #20
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4806      	ldr	r0, [pc, #24]	@ (8002fcc <MX_GPIO_Init+0x120>)
 8002fb4:	f001 ff90 	bl	8004ed8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002fb8:	bf00      	nop
 8002fba:	3728      	adds	r7, #40	@ 0x28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40020000 	.word	0x40020000
 8002fcc:	40020c00 	.word	0x40020c00

08002fd0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//Interrupt Serial callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	6078      	str	r0, [r7, #4]
	//prevent unused argument
	UNUSED(huart);
	 snprintf(buf,sizeof(buf),"%5.2f",g_distanceUS);
 8002fd8:	4b18      	ldr	r3, [pc, #96]	@ (800303c <HAL_UART_RxCpltCallback+0x6c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fd fab3 	bl	8000548 <__aeabi_f2d>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	e9cd 2300 	strd	r2, r3, [sp]
 8002fea:	4a15      	ldr	r2, [pc, #84]	@ (8003040 <HAL_UART_RxCpltCallback+0x70>)
 8002fec:	2105      	movs	r1, #5
 8002fee:	4815      	ldr	r0, [pc, #84]	@ (8003044 <HAL_UART_RxCpltCallback+0x74>)
 8002ff0:	f00a fd96 	bl	800db20 <sniprintf>
	 if (strncmp(aRxBuffer, "RUSD",4) == 0)
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	4914      	ldr	r1, [pc, #80]	@ (8003048 <HAL_UART_RxCpltCallback+0x78>)
 8002ff8:	4814      	ldr	r0, [pc, #80]	@ (800304c <HAL_UART_RxCpltCallback+0x7c>)
 8002ffa:	f00a fe10 	bl	800dc1e <strncmp>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d106      	bne.n	8003012 <HAL_UART_RxCpltCallback+0x42>
	   {
		HAL_UART_Transmit(&huart3, (uint8_t*)buf,5,0XFFFF);
 8003004:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003008:	2205      	movs	r2, #5
 800300a:	490e      	ldr	r1, [pc, #56]	@ (8003044 <HAL_UART_RxCpltCallback+0x74>)
 800300c:	4810      	ldr	r0, [pc, #64]	@ (8003050 <HAL_UART_RxCpltCallback+0x80>)
 800300e:	f005 fb79 	bl	8008704 <HAL_UART_Transmit>
	    }
	//HAL_UART_Transmit(&huart3,(uint8_t *)aRxBuffer,4,0xFFFF);
	 if(flagReceived !=1){
 8003012:	4b10      	ldr	r3, [pc, #64]	@ (8003054 <HAL_UART_RxCpltCallback+0x84>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d00b      	beq.n	8003032 <HAL_UART_RxCpltCallback+0x62>
			flagReceived=1;
 800301a:	4b0e      	ldr	r3, [pc, #56]	@ (8003054 <HAL_UART_RxCpltCallback+0x84>)
 800301c:	2201      	movs	r2, #1
 800301e:	601a      	str	r2, [r3, #0]
			distanceTraveled=0;
 8003020:	4b0d      	ldr	r3, [pc, #52]	@ (8003058 <HAL_UART_RxCpltCallback+0x88>)
 8003022:	f04f 0200 	mov.w	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
			 HAL_UART_Receive_IT(&huart3,(uint8_t *)aRxBuffer,RECEIVE_BUFFER_SIZE);
 8003028:	2204      	movs	r2, #4
 800302a:	4908      	ldr	r1, [pc, #32]	@ (800304c <HAL_UART_RxCpltCallback+0x7c>)
 800302c:	4808      	ldr	r0, [pc, #32]	@ (8003050 <HAL_UART_RxCpltCallback+0x80>)
 800302e:	f005 fbf4 	bl	800881a <HAL_UART_Receive_IT>

	 }
	// servo_pwm  = atoi(aRxBuffer);
	//memset(aRxBuffer,0,sizeof(aRxBuffer));

}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	2000053c 	.word	0x2000053c
 8003040:	080103e0 	.word	0x080103e0
 8003044:	200005e8 	.word	0x200005e8
 8003048:	080103e8 	.word	0x080103e8
 800304c:	200005e4 	.word	0x200005e4
 8003050:	200004d4 	.word	0x200004d4
 8003054:	20000230 	.word	0x20000230
 8003058:	20000224 	.word	0x20000224
 800305c:	00000000 	.word	0x00000000

08003060 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	//timer 3 for the ultrasonic echo
if(htim==&htim4)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a41      	ldr	r2, [pc, #260]	@ (8003170 <HAL_TIM_IC_CaptureCallback+0x110>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d174      	bne.n	800315a <HAL_TIM_IC_CaptureCallback+0xfa>
{
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12)==1)//rising edge
 8003070:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003074:	483f      	ldr	r0, [pc, #252]	@ (8003174 <HAL_TIM_IC_CaptureCallback+0x114>)
 8003076:	f002 f8cb 	bl	8005210 <HAL_GPIO_ReadPin>
 800307a:	4603      	mov	r3, r0
 800307c:	2b01      	cmp	r3, #1
 800307e:	d108      	bne.n	8003092 <HAL_TIM_IC_CaptureCallback+0x32>
	{
		tc1=HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8003080:	2100      	movs	r1, #0
 8003082:	483b      	ldr	r0, [pc, #236]	@ (8003170 <HAL_TIM_IC_CaptureCallback+0x110>)
 8003084:	f004 fd5a 	bl	8007b3c <HAL_TIM_ReadCapturedValue>
 8003088:	4603      	mov	r3, r0
 800308a:	461a      	mov	r2, r3
 800308c:	4b3a      	ldr	r3, [pc, #232]	@ (8003178 <HAL_TIM_IC_CaptureCallback+0x118>)
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	e01e      	b.n	80030d0 <HAL_TIM_IC_CaptureCallback+0x70>

	}
	else
	{
		tc2=HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8003092:	2100      	movs	r1, #0
 8003094:	4836      	ldr	r0, [pc, #216]	@ (8003170 <HAL_TIM_IC_CaptureCallback+0x110>)
 8003096:	f004 fd51 	bl	8007b3c <HAL_TIM_ReadCapturedValue>
 800309a:	4603      	mov	r3, r0
 800309c:	461a      	mov	r2, r3
 800309e:	4b37      	ldr	r3, [pc, #220]	@ (800317c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80030a0:	601a      	str	r2, [r3, #0]
		if(tc2>tc1)
 80030a2:	4b36      	ldr	r3, [pc, #216]	@ (800317c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4b34      	ldr	r3, [pc, #208]	@ (8003178 <HAL_TIM_IC_CaptureCallback+0x118>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	dd07      	ble.n	80030be <HAL_TIM_IC_CaptureCallback+0x5e>
			echo = (tc2-tc1);
 80030ae:	4b33      	ldr	r3, [pc, #204]	@ (800317c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4b31      	ldr	r3, [pc, #196]	@ (8003178 <HAL_TIM_IC_CaptureCallback+0x118>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	4a31      	ldr	r2, [pc, #196]	@ (8003180 <HAL_TIM_IC_CaptureCallback+0x120>)
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	e008      	b.n	80030d0 <HAL_TIM_IC_CaptureCallback+0x70>
		else //tc2 overflow
			echo=((65536-tc1)+tc2);
 80030be:	4b2e      	ldr	r3, [pc, #184]	@ (8003178 <HAL_TIM_IC_CaptureCallback+0x118>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 80030c6:	4b2d      	ldr	r3, [pc, #180]	@ (800317c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4413      	add	r3, r2
 80030cc:	4a2c      	ldr	r2, [pc, #176]	@ (8003180 <HAL_TIM_IC_CaptureCallback+0x120>)
 80030ce:	6013      	str	r3, [r2, #0]
	}g_distanceUS = (tc2 > tc1 ? (tc2 - tc1) : (65535 - tc1 + tc2)) * 0.034 / 2;
 80030d0:	4b2a      	ldr	r3, [pc, #168]	@ (800317c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4b28      	ldr	r3, [pc, #160]	@ (8003178 <HAL_TIM_IC_CaptureCallback+0x118>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	dd08      	ble.n	80030ee <HAL_TIM_IC_CaptureCallback+0x8e>
 80030dc:	4b27      	ldr	r3, [pc, #156]	@ (800317c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4b25      	ldr	r3, [pc, #148]	@ (8003178 <HAL_TIM_IC_CaptureCallback+0x118>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd fa1c 	bl	8000524 <__aeabi_i2d>
 80030ec:	e00a      	b.n	8003104 <HAL_TIM_IC_CaptureCallback+0xa4>
 80030ee:	4b22      	ldr	r3, [pc, #136]	@ (8003178 <HAL_TIM_IC_CaptureCallback+0x118>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 80030f6:	33ff      	adds	r3, #255	@ 0xff
 80030f8:	4a20      	ldr	r2, [pc, #128]	@ (800317c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	4413      	add	r3, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fd fa10 	bl	8000524 <__aeabi_i2d>
 8003104:	a318      	add	r3, pc, #96	@ (adr r3, 8003168 <HAL_TIM_IC_CaptureCallback+0x108>)
 8003106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310a:	f7fd fa75 	bl	80005f8 <__aeabi_dmul>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4610      	mov	r0, r2
 8003114:	4619      	mov	r1, r3
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800311e:	f7fd fb95 	bl	800084c <__aeabi_ddiv>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4610      	mov	r0, r2
 8003128:	4619      	mov	r1, r3
 800312a:	f7fd fd5d 	bl	8000be8 <__aeabi_d2f>
 800312e:	4603      	mov	r3, r0
 8003130:	4a14      	ldr	r2, [pc, #80]	@ (8003184 <HAL_TIM_IC_CaptureCallback+0x124>)
 8003132:	6013      	str	r3, [r2, #0]
	if(g_distanceUS>400)
 8003134:	4b13      	ldr	r3, [pc, #76]	@ (8003184 <HAL_TIM_IC_CaptureCallback+0x124>)
 8003136:	edd3 7a00 	vldr	s15, [r3]
 800313a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8003188 <HAL_TIM_IC_CaptureCallback+0x128>
 800313e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003146:	dd04      	ble.n	8003152 <HAL_TIM_IC_CaptureCallback+0xf2>
	{
		g_distanceUS=last_valid;
 8003148:	4b10      	ldr	r3, [pc, #64]	@ (800318c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a0d      	ldr	r2, [pc, #52]	@ (8003184 <HAL_TIM_IC_CaptureCallback+0x124>)
 800314e:	6013      	str	r3, [r2, #0]
	else{
		last_valid=g_distanceUS;
	}
}

}
 8003150:	e003      	b.n	800315a <HAL_TIM_IC_CaptureCallback+0xfa>
		last_valid=g_distanceUS;
 8003152:	4b0c      	ldr	r3, [pc, #48]	@ (8003184 <HAL_TIM_IC_CaptureCallback+0x124>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a0d      	ldr	r2, [pc, #52]	@ (800318c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8003158:	6013      	str	r3, [r2, #0]
}
 800315a:	bf00      	nop
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	f3af 8000 	nop.w
 8003168:	b020c49c 	.word	0xb020c49c
 800316c:	3fa16872 	.word	0x3fa16872
 8003170:	200003fc 	.word	0x200003fc
 8003174:	40020c00 	.word	0x40020c00
 8003178:	20000530 	.word	0x20000530
 800317c:	20000534 	.word	0x20000534
 8003180:	20000538 	.word	0x20000538
 8003184:	2000053c 	.word	0x2000053c
 8003188:	43c80000 	.word	0x43c80000
 800318c:	20000540 	.word	0x20000540

08003190 <IR_Left_Read>:
void IR_Left_Read() {
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 8003194:	481e      	ldr	r0, [pc, #120]	@ (8003210 <IR_Left_Read+0x80>)
 8003196:	f001 f93f 	bl	8004418 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 10);
 800319a:	210a      	movs	r1, #10
 800319c:	481c      	ldr	r0, [pc, #112]	@ (8003210 <IR_Left_Read+0x80>)
 800319e:	f001 fa40 	bl	8004622 <HAL_ADC_PollForConversion>
	iDistanceL = HAL_ADC_GetValue(&hadc2);
 80031a2:	481b      	ldr	r0, [pc, #108]	@ (8003210 <IR_Left_Read+0x80>)
 80031a4:	f001 fac8 	bl	8004738 <HAL_ADC_GetValue>
 80031a8:	4603      	mov	r3, r0
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	4b19      	ldr	r3, [pc, #100]	@ (8003214 <IR_Left_Read+0x84>)
 80031ae:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 80031b0:	4817      	ldr	r0, [pc, #92]	@ (8003210 <IR_Left_Read+0x80>)
 80031b2:	f001 fa03 	bl	80045bc <HAL_ADC_Stop>

//	filtered_irreading = (FILTER_ALPHA2 * iDistanceL) + ((1 - FILTER_ALPHA2) * filtered_irreading);
//	filtered_irreading_int = (int) filtered_irreading;
	//iDistanceL=(int)pow(10, -1.754*(log10((float) iDistanceL))+7.064);
	iDistanceL=(int)(iDistanceL*-4.286e-03)+2.189e+01;
 80031b6:	4b17      	ldr	r3, [pc, #92]	@ (8003214 <IR_Left_Read+0x84>)
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fd f9b2 	bl	8000524 <__aeabi_i2d>
 80031c0:	a30f      	add	r3, pc, #60	@ (adr r3, 8003200 <IR_Left_Read+0x70>)
 80031c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c6:	f7fd fa17 	bl	80005f8 <__aeabi_dmul>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4610      	mov	r0, r2
 80031d0:	4619      	mov	r1, r3
 80031d2:	f7fd fcc1 	bl	8000b58 <__aeabi_d2iz>
 80031d6:	4603      	mov	r3, r0
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd f9a3 	bl	8000524 <__aeabi_i2d>
 80031de:	a30a      	add	r3, pc, #40	@ (adr r3, 8003208 <IR_Left_Read+0x78>)
 80031e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e4:	f7fd f852 	bl	800028c <__adddf3>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4610      	mov	r0, r2
 80031ee:	4619      	mov	r1, r3
 80031f0:	f7fd fcda 	bl	8000ba8 <__aeabi_d2uiz>
 80031f4:	4603      	mov	r3, r0
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	4b06      	ldr	r3, [pc, #24]	@ (8003214 <IR_Left_Read+0x84>)
 80031fa:	801a      	strh	r2, [r3, #0]
}
 80031fc:	bf00      	nop
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	5d4a5df2 	.word	0x5d4a5df2
 8003204:	bf718e32 	.word	0xbf718e32
 8003208:	0a3d70a4 	.word	0x0a3d70a4
 800320c:	4035e3d7 	.word	0x4035e3d7
 8003210:	20000288 	.word	0x20000288
 8003214:	200005ee 	.word	0x200005ee

08003218 <IR_Right_Read>:

void IR_Right_Read() {
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 800321c:	481e      	ldr	r0, [pc, #120]	@ (8003298 <IR_Right_Read+0x80>)
 800321e:	f001 f8fb 	bl	8004418 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8003222:	210a      	movs	r1, #10
 8003224:	481c      	ldr	r0, [pc, #112]	@ (8003298 <IR_Right_Read+0x80>)
 8003226:	f001 f9fc 	bl	8004622 <HAL_ADC_PollForConversion>
	iDistanceR = HAL_ADC_GetValue(&hadc1);
 800322a:	481b      	ldr	r0, [pc, #108]	@ (8003298 <IR_Right_Read+0x80>)
 800322c:	f001 fa84 	bl	8004738 <HAL_ADC_GetValue>
 8003230:	4603      	mov	r3, r0
 8003232:	b29a      	uxth	r2, r3
 8003234:	4b19      	ldr	r3, [pc, #100]	@ (800329c <IR_Right_Read+0x84>)
 8003236:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8003238:	4817      	ldr	r0, [pc, #92]	@ (8003298 <IR_Right_Read+0x80>)
 800323a:	f001 f9bf 	bl	80045bc <HAL_ADC_Stop>
	iDistanceR=(int)(iDistanceR*-4.286e-03)+2.189e+01;
 800323e:	4b17      	ldr	r3, [pc, #92]	@ (800329c <IR_Right_Read+0x84>)
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd f96e 	bl	8000524 <__aeabi_i2d>
 8003248:	a30f      	add	r3, pc, #60	@ (adr r3, 8003288 <IR_Right_Read+0x70>)
 800324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324e:	f7fd f9d3 	bl	80005f8 <__aeabi_dmul>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4610      	mov	r0, r2
 8003258:	4619      	mov	r1, r3
 800325a:	f7fd fc7d 	bl	8000b58 <__aeabi_d2iz>
 800325e:	4603      	mov	r3, r0
 8003260:	4618      	mov	r0, r3
 8003262:	f7fd f95f 	bl	8000524 <__aeabi_i2d>
 8003266:	a30a      	add	r3, pc, #40	@ (adr r3, 8003290 <IR_Right_Read+0x78>)
 8003268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326c:	f7fd f80e 	bl	800028c <__adddf3>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	f7fd fc96 	bl	8000ba8 <__aeabi_d2uiz>
 800327c:	4603      	mov	r3, r0
 800327e:	b29a      	uxth	r2, r3
 8003280:	4b06      	ldr	r3, [pc, #24]	@ (800329c <IR_Right_Read+0x84>)
 8003282:	801a      	strh	r2, [r3, #0]
}
 8003284:	bf00      	nop
 8003286:	bd80      	pop	{r7, pc}
 8003288:	5d4a5df2 	.word	0x5d4a5df2
 800328c:	bf718e32 	.word	0xbf718e32
 8003290:	0a3d70a4 	.word	0x0a3d70a4
 8003294:	4035e3d7 	.word	0x4035e3d7
 8003298:	20000240 	.word	0x20000240
 800329c:	200005f0 	.word	0x200005f0

080032a0 <Motor_Stop>:

void Motor_Stop()
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
	resetYaw();
 80032a4:	f7fe faa6 	bl	80017f4 <resetYaw>
	  PID_Reset(&LMotorPID);
 80032a8:	4811      	ldr	r0, [pc, #68]	@ (80032f0 <Motor_Stop+0x50>)
 80032aa:	f7fe fa37 	bl	800171c <PID_Reset>
	  PID_Reset(&RMotorPID);
 80032ae:	4811      	ldr	r0, [pc, #68]	@ (80032f4 <Motor_Stop+0x54>)
 80032b0:	f7fe fa34 	bl	800171c <PID_Reset>
	distanceTraveled=0;
 80032b4:	4b10      	ldr	r3, [pc, #64]	@ (80032f8 <Motor_Stop+0x58>)
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
    pwmValL = 0;
 80032bc:	4b0f      	ldr	r3, [pc, #60]	@ (80032fc <Motor_Stop+0x5c>)
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
    pwmValR = 0;
 80032c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003300 <Motor_Stop+0x60>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValL); // Stop left motor
 80032c8:	4b0c      	ldr	r3, [pc, #48]	@ (80032fc <Motor_Stop+0x5c>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003304 <Motor_Stop+0x64>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmValR); // Stop right motor
 80032d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003300 <Motor_Stop+0x60>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003304 <Motor_Stop+0x64>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	639a      	str	r2, [r3, #56]	@ 0x38
	set_servo_angle(Center);
 80032dc:	205f      	movs	r0, #95	@ 0x5f
 80032de:	f7ff f8f9 	bl	80024d4 <set_servo_angle>
	osDelay(1000);
 80032e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80032e6:	f006 ffa3 	bl	800a230 <osDelay>
	//reset_gyro_at_rest();
  //  count++;
}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000584 	.word	0x20000584
 80032f4:	200005ac 	.word	0x200005ac
 80032f8:	20000224 	.word	0x20000224
 80032fc:	200005d4 	.word	0x200005d4
 8003300:	200005d8 	.word	0x200005d8
 8003304:	2000048c 	.word	0x2000048c

08003308 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  	  HAL_GPIO_TogglePin(GPIOE,LED3_Pin);
 8003310:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003314:	4803      	ldr	r0, [pc, #12]	@ (8003324 <StartDefaultTask+0x1c>)
 8003316:	f001 ffac 	bl	8005272 <HAL_GPIO_TogglePin>
    osDelay(150);
 800331a:	2096      	movs	r0, #150	@ 0x96
 800331c:	f006 ff88 	bl	800a230 <osDelay>
	  	  HAL_GPIO_TogglePin(GPIOE,LED3_Pin);
 8003320:	bf00      	nop
 8003322:	e7f5      	b.n	8003310 <StartDefaultTask+0x8>
 8003324:	40021000 	.word	0x40021000

08003328 <StartOledTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOledTask */
void StartOledTask(void *argument)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b096      	sub	sp, #88	@ 0x58
 800332c:	af02      	add	r7, sp, #8
 800332e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledTask */
	char text[16]={};
 8003330:	2300      	movs	r3, #0
 8003332:	643b      	str	r3, [r7, #64]	@ 0x40
 8003334:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	609a      	str	r2, [r3, #8]
	char temp[50]={};
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	f107 0310 	add.w	r3, r7, #16
 8003348:	222e      	movs	r2, #46	@ 0x2e
 800334a:	2100      	movs	r1, #0
 800334c:	4618      	mov	r0, r3
 800334e:	f00a fc5e 	bl	800dc0e <memset>
//	RMotorPID.setpoint = 1;

  /* Infinite loop */
  for(;;)
  {
		snprintf(text, sizeof(text), "DistanceIRR:%d m", iDistanceR);
 8003352:	4b3b      	ldr	r3, [pc, #236]	@ (8003440 <StartOledTask+0x118>)
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800335a:	4a3a      	ldr	r2, [pc, #232]	@ (8003444 <StartOledTask+0x11c>)
 800335c:	2110      	movs	r1, #16
 800335e:	f00a fbdf 	bl	800db20 <sniprintf>
		OLED_ShowString(10, 40, text);
 8003362:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003366:	461a      	mov	r2, r3
 8003368:	2128      	movs	r1, #40	@ 0x28
 800336a:	200a      	movs	r0, #10
 800336c:	f009 fd78 	bl	800ce60 <OLED_ShowString>
		snprintf(text, sizeof(text), "Distance:%.2f", g_distanceUS);
 8003370:	4b35      	ldr	r3, [pc, #212]	@ (8003448 <StartOledTask+0x120>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f7fd f8e7 	bl	8000548 <__aeabi_f2d>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8003382:	e9cd 2300 	strd	r2, r3, [sp]
 8003386:	4a31      	ldr	r2, [pc, #196]	@ (800344c <StartOledTask+0x124>)
 8003388:	2110      	movs	r1, #16
 800338a:	f00a fbc9 	bl	800db20 <sniprintf>
		  OLED_ShowString(10, 20, text);
 800338e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003392:	461a      	mov	r2, r3
 8003394:	2114      	movs	r1, #20
 8003396:	200a      	movs	r0, #10
 8003398:	f009 fd62 	bl	800ce60 <OLED_ShowString>
		  snprintf(text, sizeof(text), "degree :%5.2f", yaw);//BEFORE DEGREE
 800339c:	4b2c      	ldr	r3, [pc, #176]	@ (8003450 <StartOledTask+0x128>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fd f8d1 	bl	8000548 <__aeabi_f2d>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80033ae:	e9cd 2300 	strd	r2, r3, [sp]
 80033b2:	4a28      	ldr	r2, [pc, #160]	@ (8003454 <StartOledTask+0x12c>)
 80033b4:	2110      	movs	r1, #16
 80033b6:	f00a fbb3 	bl	800db20 <sniprintf>
		  OLED_ShowString(10, 30, text);
 80033ba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80033be:	461a      	mov	r2, r3
 80033c0:	211e      	movs	r1, #30
 80033c2:	200a      	movs	r0, #10
 80033c4:	f009 fd4c 	bl	800ce60 <OLED_ShowString>
		  OLED_Refresh_Gram();
 80033c8:	f009 fbd6 	bl	800cb78 <OLED_Refresh_Gram>
		  snprintf(text, sizeof(text), "Distance: %d m", Target_Distance);
 80033cc:	4b22      	ldr	r3, [pc, #136]	@ (8003458 <StartOledTask+0x130>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80033d4:	4a21      	ldr	r2, [pc, #132]	@ (800345c <StartOledTask+0x134>)
 80033d6:	2110      	movs	r1, #16
 80033d8:	f00a fba2 	bl	800db20 <sniprintf>
		  OLED_ShowString(10, 10, text);
 80033dc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80033e0:	461a      	mov	r2, r3
 80033e2:	210a      	movs	r1, #10
 80033e4:	200a      	movs	r0, #10
 80033e6:	f009 fd3b 	bl	800ce60 <OLED_ShowString>
		  snprintf(text, sizeof(text), "DistanceT %.2f m", distanceTraveled);
 80033ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003460 <StartOledTask+0x138>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd f8aa 	bl	8000548 <__aeabi_f2d>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80033fc:	e9cd 2300 	strd	r2, r3, [sp]
 8003400:	4a18      	ldr	r2, [pc, #96]	@ (8003464 <StartOledTask+0x13c>)
 8003402:	2110      	movs	r1, #16
 8003404:	f00a fb8c 	bl	800db20 <sniprintf>
		  OLED_ShowString(10, 50, text);
 8003408:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800340c:	461a      	mov	r2, r3
 800340e:	2132      	movs	r1, #50	@ 0x32
 8003410:	200a      	movs	r0, #10
 8003412:	f009 fd25 	bl	800ce60 <OLED_ShowString>
		  snprintf(temp,sizeof(temp),"%.5f\r\n",yaw);
 8003416:	4b0e      	ldr	r3, [pc, #56]	@ (8003450 <StartOledTask+0x128>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7fd f894 	bl	8000548 <__aeabi_f2d>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	f107 000c 	add.w	r0, r7, #12
 8003428:	e9cd 2300 	strd	r2, r3, [sp]
 800342c:	4a0e      	ldr	r2, [pc, #56]	@ (8003468 <StartOledTask+0x140>)
 800342e:	2132      	movs	r1, #50	@ 0x32
 8003430:	f00a fb76 	bl	800db20 <sniprintf>

    osDelay(200);
 8003434:	20c8      	movs	r0, #200	@ 0xc8
 8003436:	f006 fefb 	bl	800a230 <osDelay>
		snprintf(text, sizeof(text), "DistanceIRR:%d m", iDistanceR);
 800343a:	bf00      	nop
 800343c:	e789      	b.n	8003352 <StartOledTask+0x2a>
 800343e:	bf00      	nop
 8003440:	200005f0 	.word	0x200005f0
 8003444:	080103f0 	.word	0x080103f0
 8003448:	2000053c 	.word	0x2000053c
 800344c:	08010404 	.word	0x08010404
 8003450:	20000580 	.word	0x20000580
 8003454:	08010414 	.word	0x08010414
 8003458:	20000220 	.word	0x20000220
 800345c:	08010424 	.word	0x08010424
 8003460:	20000224 	.word	0x20000224
 8003464:	08010434 	.word	0x08010434
 8003468:	08010448 	.word	0x08010448

0800346c <Startsensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startsensor */
void Startsensor(void *argument)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startsensor */
  /* Infinite loop */
	HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_RESET);
 8003474:	2200      	movs	r2, #0
 8003476:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800347a:	480f      	ldr	r0, [pc, #60]	@ (80034b8 <Startsensor+0x4c>)
 800347c:	f001 fee0 	bl	8005240 <HAL_GPIO_WritePin>
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_SET);
 8003480:	2201      	movs	r2, #1
 8003482:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003486:	480c      	ldr	r0, [pc, #48]	@ (80034b8 <Startsensor+0x4c>)
 8003488:	f001 feda 	bl	8005240 <HAL_GPIO_WritePin>
	delay_us(10);
 800348c:	200a      	movs	r0, #10
 800348e:	f7fe f997 	bl	80017c0 <delay_us>
	HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_RESET);
 8003492:	2200      	movs	r2, #0
 8003494:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003498:	4807      	ldr	r0, [pc, #28]	@ (80034b8 <Startsensor+0x4c>)
 800349a:	f001 fed1 	bl	8005240 <HAL_GPIO_WritePin>
	    //g_distanceUS = (tc2 > tc1 ? (tc2 - tc1) : (65535 - tc1 + tc2)) * 0.034 / 2; //echo/1000000.0f *343.0f/2.0f *100.0f equivalent
	osDelay(10);
 800349e:	200a      	movs	r0, #10
 80034a0:	f006 fec6 	bl	800a230 <osDelay>
	IR_Left_Read();
 80034a4:	f7ff fe74 	bl	8003190 <IR_Left_Read>
	IR_Right_Read();
 80034a8:	f7ff feb6 	bl	8003218 <IR_Right_Read>
	osDelay(100);
 80034ac:	2064      	movs	r0, #100	@ 0x64
 80034ae:	f006 febf 	bl	800a230 <osDelay>
	HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_SET);
 80034b2:	bf00      	nop
 80034b4:	e7e4      	b.n	8003480 <Startsensor+0x14>
 80034b6:	bf00      	nop
 80034b8:	40021000 	.word	0x40021000
 80034bc:	00000000 	.word	0x00000000

080034c0 <StartEncoderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08a      	sub	sp, #40	@ 0x28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80034c8:	213c      	movs	r1, #60	@ 0x3c
 80034ca:	48a1      	ldr	r0, [pc, #644]	@ (8003750 <StartEncoderTask+0x290>)
 80034cc:	f003 ff92 	bl	80073f4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80034d0:	213c      	movs	r1, #60	@ 0x3c
 80034d2:	48a0      	ldr	r0, [pc, #640]	@ (8003754 <StartEncoderTask+0x294>)
 80034d4:	f003 ff8e 	bl	80073f4 <HAL_TIM_Encoder_Start>

	int16_t cnt1L,cnt2L,diffL;
	int16_t cnt1R,cnt2R,diffR;
	uint32_t tick;
	cnt1L = __HAL_TIM_GET_COUNTER(&htim2);
 80034d8:	4b9d      	ldr	r3, [pc, #628]	@ (8003750 <StartEncoderTask+0x290>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	84fb      	strh	r3, [r7, #38]	@ 0x26
	cnt1R = __HAL_TIM_GET_COUNTER(&htim3);
 80034e0:	4b9c      	ldr	r3, [pc, #624]	@ (8003754 <StartEncoderTask+0x294>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e6:	847b      	strh	r3, [r7, #34]	@ 0x22
    tick = HAL_GetTick(); // in milliseconds
 80034e8:	f000 ff22 	bl	8004330 <HAL_GetTick>
 80034ec:	61f8      	str	r0, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
	  if (HAL_GetTick() - tick > 10L) { // Checking per second
 80034ee:	f000 ff1f 	bl	8004330 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b0a      	cmp	r3, #10
 80034fa:	f240 811e 	bls.w	800373a <StartEncoderTask+0x27a>
	              cnt2L = __HAL_TIM_GET_COUNTER(&htim2);
 80034fe:	4b94      	ldr	r3, [pc, #592]	@ (8003750 <StartEncoderTask+0x290>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003504:	837b      	strh	r3, [r7, #26]
	              cnt2R = __HAL_TIM_GET_COUNTER(&htim3);
 8003506:	4b93      	ldr	r3, [pc, #588]	@ (8003754 <StartEncoderTask+0x294>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350c:	833b      	strh	r3, [r7, #24]

	              //Left
	              if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 800350e:	4b90      	ldr	r3, [pc, #576]	@ (8003750 <StartEncoderTask+0x290>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b10      	cmp	r3, #16
 800351a:	d114      	bne.n	8003546 <StartEncoderTask+0x86>
	            	  diffL = (cnt2L < cnt1L) ? (cnt1L - cnt2L) : ((65535 - cnt2L) + cnt1L);
 800351c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8003520:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003524:	429a      	cmp	r2, r3
 8003526:	da05      	bge.n	8003534 <StartEncoderTask+0x74>
 8003528:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800352a:	8b7b      	ldrh	r3, [r7, #26]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	b29b      	uxth	r3, r3
 8003530:	b21b      	sxth	r3, r3
 8003532:	e006      	b.n	8003542 <StartEncoderTask+0x82>
 8003534:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003536:	8b7b      	ldrh	r3, [r7, #26]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	b29b      	uxth	r3, r3
 800353c:	3b01      	subs	r3, #1
 800353e:	b29b      	uxth	r3, r3
 8003540:	b21b      	sxth	r3, r3
 8003542:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003544:	e013      	b.n	800356e <StartEncoderTask+0xae>
	              } else {
	            	  diffL = (cnt2L > cnt1L) ? (cnt2L - cnt1L) : ((65535 - cnt1L) + cnt2L);
 8003546:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800354a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800354e:	429a      	cmp	r2, r3
 8003550:	dd05      	ble.n	800355e <StartEncoderTask+0x9e>
 8003552:	8b7a      	ldrh	r2, [r7, #26]
 8003554:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	b29b      	uxth	r3, r3
 800355a:	b21b      	sxth	r3, r3
 800355c:	e006      	b.n	800356c <StartEncoderTask+0xac>
 800355e:	8b7a      	ldrh	r2, [r7, #26]
 8003560:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29b      	uxth	r3, r3
 800356a:	b21b      	sxth	r3, r3
 800356c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	              }

	              //Right
	              if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) {
 800356e:	4b79      	ldr	r3, [pc, #484]	@ (8003754 <StartEncoderTask+0x294>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	2b10      	cmp	r3, #16
 800357a:	d114      	bne.n	80035a6 <StartEncoderTask+0xe6>
	              	            	  diffR = (cnt2R < cnt1R) ? (cnt1R - cnt2R) : ((65535 - cnt2R) + cnt1R);
 800357c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003580:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003584:	429a      	cmp	r2, r3
 8003586:	da05      	bge.n	8003594 <StartEncoderTask+0xd4>
 8003588:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800358a:	8b3b      	ldrh	r3, [r7, #24]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	b29b      	uxth	r3, r3
 8003590:	b21b      	sxth	r3, r3
 8003592:	e006      	b.n	80035a2 <StartEncoderTask+0xe2>
 8003594:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003596:	8b3b      	ldrh	r3, [r7, #24]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	b29b      	uxth	r3, r3
 800359c:	3b01      	subs	r3, #1
 800359e:	b29b      	uxth	r3, r3
 80035a0:	b21b      	sxth	r3, r3
 80035a2:	843b      	strh	r3, [r7, #32]
 80035a4:	e013      	b.n	80035ce <StartEncoderTask+0x10e>
	              	              } else {
	              	            	  diffR = (cnt2R > cnt1R) ? (cnt2R - cnt1R) : ((65535 - cnt1R) + cnt2R);
 80035a6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80035aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80035ae:	429a      	cmp	r2, r3
 80035b0:	dd05      	ble.n	80035be <StartEncoderTask+0xfe>
 80035b2:	8b3a      	ldrh	r2, [r7, #24]
 80035b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	b21b      	sxth	r3, r3
 80035bc:	e006      	b.n	80035cc <StartEncoderTask+0x10c>
 80035be:	8b3a      	ldrh	r2, [r7, #24]
 80035c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	b21b      	sxth	r3, r3
 80035cc:	843b      	strh	r3, [r7, #32]
	              	              }
	  // RPM Calculation
	  RPM_L = ((float) diffL / (ENCODER_PULSES_PER_REVOLUTION * 4));// * 60.0;
 80035ce:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80035d2:	ee07 3a90 	vmov	s15, r3
 80035d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035da:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8003758 <StartEncoderTask+0x298>
 80035de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80035e2:	ee16 0a90 	vmov	r0, s13
 80035e6:	f7fc ffaf 	bl	8000548 <__aeabi_f2d>
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	495b      	ldr	r1, [pc, #364]	@ (800375c <StartEncoderTask+0x29c>)
 80035f0:	e9c1 2300 	strd	r2, r3, [r1]
	  RPM_R = ((float) diffR / (ENCODER_PULSES_PER_REVOLUTION * 4));
 80035f4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80035f8:	ee07 3a90 	vmov	s15, r3
 80035fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003600:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8003758 <StartEncoderTask+0x298>
 8003604:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003608:	ee16 0a90 	vmov	r0, s13
 800360c:	f7fc ff9c 	bl	8000548 <__aeabi_f2d>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	4952      	ldr	r1, [pc, #328]	@ (8003760 <StartEncoderTask+0x2a0>)
 8003616:	e9c1 2300 	strd	r2, r3, [r1]

	  float dt = (HAL_GetTick() - tick) * 0.001f;
 800361a:	f000 fe89 	bl	8004330 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	ee07 3a90 	vmov	s15, r3
 8003628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800362c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003764 <StartEncoderTask+0x2a4>
 8003630:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003634:	edc7 7a05 	vstr	s15, [r7, #20]
	  RPS_L=((float) diffL / (ENCODER_PULSES_PER_REVOLUTION * 4* dt));
 8003638:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800363c:	ee07 3a90 	vmov	s15, r3
 8003640:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003644:	edd7 7a05 	vldr	s15, [r7, #20]
 8003648:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8003758 <StartEncoderTask+0x298>
 800364c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003650:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003654:	ee16 0a90 	vmov	r0, s13
 8003658:	f7fc ff76 	bl	8000548 <__aeabi_f2d>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4941      	ldr	r1, [pc, #260]	@ (8003768 <StartEncoderTask+0x2a8>)
 8003662:	e9c1 2300 	strd	r2, r3, [r1]
	  RPS_R=((float) diffR / (ENCODER_PULSES_PER_REVOLUTION * 4 *dt));
 8003666:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800366a:	ee07 3a90 	vmov	s15, r3
 800366e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003672:	edd7 7a05 	vldr	s15, [r7, #20]
 8003676:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003758 <StartEncoderTask+0x298>
 800367a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800367e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003682:	ee16 0a90 	vmov	r0, s13
 8003686:	f7fc ff5f 	bl	8000548 <__aeabi_f2d>
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	4937      	ldr	r1, [pc, #220]	@ (800376c <StartEncoderTask+0x2ac>)
 8003690:	e9c1 2300 	strd	r2, r3, [r1]

      // Calculate the distance traveled by each wheel (in meters)
      float distanceLeftThisSecond = RPM_L * PI * WHEEL_DIAMETER;
 8003694:	4b31      	ldr	r3, [pc, #196]	@ (800375c <StartEncoderTask+0x29c>)
 8003696:	e9d3 0100 	ldrd	r0, r1, [r3]
 800369a:	a32b      	add	r3, pc, #172	@ (adr r3, 8003748 <StartEncoderTask+0x288>)
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	f7fc ffaa 	bl	80005f8 <__aeabi_dmul>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4610      	mov	r0, r2
 80036aa:	4619      	mov	r1, r3
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	4b2f      	ldr	r3, [pc, #188]	@ (8003770 <StartEncoderTask+0x2b0>)
 80036b2:	f7fc ffa1 	bl	80005f8 <__aeabi_dmul>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4610      	mov	r0, r2
 80036bc:	4619      	mov	r1, r3
 80036be:	f7fd fa93 	bl	8000be8 <__aeabi_d2f>
 80036c2:	4603      	mov	r3, r0
 80036c4:	613b      	str	r3, [r7, #16]
      float distanceRightThisSecond = RPM_R * PI * WHEEL_DIAMETER;
 80036c6:	4b26      	ldr	r3, [pc, #152]	@ (8003760 <StartEncoderTask+0x2a0>)
 80036c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036cc:	a31e      	add	r3, pc, #120	@ (adr r3, 8003748 <StartEncoderTask+0x288>)
 80036ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d2:	f7fc ff91 	bl	80005f8 <__aeabi_dmul>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	4610      	mov	r0, r2
 80036dc:	4619      	mov	r1, r3
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	4b23      	ldr	r3, [pc, #140]	@ (8003770 <StartEncoderTask+0x2b0>)
 80036e4:	f7fc ff88 	bl	80005f8 <__aeabi_dmul>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4610      	mov	r0, r2
 80036ee:	4619      	mov	r1, r3
 80036f0:	f7fd fa7a 	bl	8000be8 <__aeabi_d2f>
 80036f4:	4603      	mov	r3, r0
 80036f6:	60fb      	str	r3, [r7, #12]

	    // Average the distances to account for potential minor differences in wheel speed
	    float distanceThisSecond = (distanceLeftThisSecond + distanceRightThisSecond) / 2.0;
 80036f8:	ed97 7a04 	vldr	s14, [r7, #16]
 80036fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003700:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003704:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003708:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800370c:	edc7 7a02 	vstr	s15, [r7, #8]
	    distanceTraveled += distanceThisSecond;
 8003710:	4b18      	ldr	r3, [pc, #96]	@ (8003774 <StartEncoderTask+0x2b4>)
 8003712:	ed93 7a00 	vldr	s14, [r3]
 8003716:	edd7 7a02 	vldr	s15, [r7, #8]
 800371a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800371e:	4b15      	ldr	r3, [pc, #84]	@ (8003774 <StartEncoderTask+0x2b4>)
 8003720:	edc3 7a00 	vstr	s15, [r3]
	    // Accumulate the total distance traveled
	  cnt1L = __HAL_TIM_GET_COUNTER(&htim2);
 8003724:	4b0a      	ldr	r3, [pc, #40]	@ (8003750 <StartEncoderTask+0x290>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	  cnt1R = __HAL_TIM_GET_COUNTER(&htim3);
 800372c:	4b09      	ldr	r3, [pc, #36]	@ (8003754 <StartEncoderTask+0x294>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	847b      	strh	r3, [r7, #34]	@ 0x22
	 tick = HAL_GetTick();
 8003734:	f000 fdfc 	bl	8004330 <HAL_GetTick>
 8003738:	61f8      	str	r0, [r7, #28]
  }
	  osDelay(50);
 800373a:	2032      	movs	r0, #50	@ 0x32
 800373c:	f006 fd78 	bl	800a230 <osDelay>
	  if (HAL_GetTick() - tick > 10L) { // Checking per second
 8003740:	e6d5      	b.n	80034ee <StartEncoderTask+0x2e>
 8003742:	bf00      	nop
 8003744:	f3af 8000 	nop.w
 8003748:	54442eea 	.word	0x54442eea
 800374c:	400921fb 	.word	0x400921fb
 8003750:	2000036c 	.word	0x2000036c
 8003754:	200003b4 	.word	0x200003b4
 8003758:	44a50000 	.word	0x44a50000
 800375c:	20000548 	.word	0x20000548
 8003760:	20000550 	.word	0x20000550
 8003764:	3a83126f 	.word	0x3a83126f
 8003768:	20000558 	.word	0x20000558
 800376c:	20000560 	.word	0x20000560
 8003770:	401a0000 	.word	0x401a0000
 8003774:	20000224 	.word	0x20000224

08003778 <startrobotTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startrobotTask */
void startrobotTask(void *argument)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startrobotTask */
  /* Infinite loop */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);//Start servo pwm timer
 8003780:	210c      	movs	r1, #12
 8003782:	48a3      	ldr	r0, [pc, #652]	@ (8003a10 <startrobotTask+0x298>)
 8003784:	f003 fb46 	bl	8006e14 <HAL_TIM_PWM_Start>
	degree=0;
 8003788:	4ba2      	ldr	r3, [pc, #648]	@ (8003a14 <startrobotTask+0x29c>)
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8003790:	2100      	movs	r1, #0
 8003792:	48a1      	ldr	r0, [pc, #644]	@ (8003a18 <startrobotTask+0x2a0>)
 8003794:	f003 fb3e 	bl	8006e14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8003798:	2104      	movs	r1, #4
 800379a:	489f      	ldr	r0, [pc, #636]	@ (8003a18 <startrobotTask+0x2a0>)
 800379c:	f003 fb3a 	bl	8006e14 <HAL_TIM_PWM_Start>

	while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8)==1);
 80037a0:	bf00      	nop
 80037a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80037a6:	489d      	ldr	r0, [pc, #628]	@ (8003a1c <startrobotTask+0x2a4>)
 80037a8:	f001 fd32 	bl	8005210 <HAL_GPIO_ReadPin>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d0f7      	beq.n	80037a2 <startrobotTask+0x2a>
	int labTarget=87;
 80037b2:	2357      	movs	r3, #87	@ 0x57
 80037b4:	60fb      	str	r3, [r7, #12]

		//{osDelay(200);osThreadYield();}
	//

	set_servo_angle(Center);
 80037b6:	205f      	movs	r0, #95	@ 0x5f
 80037b8:	f7fe fe8c 	bl	80024d4 <set_servo_angle>
	osDelay(200);
 80037bc:	20c8      	movs	r0, #200	@ 0xc8
 80037be:	f006 fd37 	bl	800a230 <osDelay>
	start_time = HAL_GetTick();
 80037c2:	f000 fdb5 	bl	8004330 <HAL_GetTick>
 80037c6:	4603      	mov	r3, r0
 80037c8:	4a95      	ldr	r2, [pc, #596]	@ (8003a20 <startrobotTask+0x2a8>)
 80037ca:	6013      	str	r3, [r2, #0]
	end_time = HAL_GetTick();  // Record end time
 80037cc:	f000 fdb0 	bl	8004330 <HAL_GetTick>
 80037d0:	4603      	mov	r3, r0
 80037d2:	4a94      	ldr	r2, [pc, #592]	@ (8003a24 <startrobotTask+0x2ac>)
 80037d4:	6013      	str	r3, [r2, #0]
	delta_time_sec= (end_time - start_time) * 0.001f; // Time difference in ms
 80037d6:	4b93      	ldr	r3, [pc, #588]	@ (8003a24 <startrobotTask+0x2ac>)
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	4b91      	ldr	r3, [pc, #580]	@ (8003a20 <startrobotTask+0x2a8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	ee07 3a90 	vmov	s15, r3
 80037e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037e8:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8003a28 <startrobotTask+0x2b0>
 80037ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037f0:	4b8e      	ldr	r3, [pc, #568]	@ (8003a2c <startrobotTask+0x2b4>)
 80037f2:	edc3 7a00 	vstr	s15, [r3]
  {

	  //TEST TURN SEGMENT
//	  {
//
		  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8)==0)
 80037f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80037fa:	4888      	ldr	r0, [pc, #544]	@ (8003a1c <startrobotTask+0x2a4>)
 80037fc:	f001 fd08 	bl	8005210 <HAL_GPIO_ReadPin>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d102      	bne.n	800380c <startrobotTask+0x94>
		  {
			  //resetYaw();
			  //yaw=0;
			  tempflag=1;
 8003806:	4b8a      	ldr	r3, [pc, #552]	@ (8003a30 <startrobotTask+0x2b8>)
 8003808:	2201      	movs	r2, #1
 800380a:	601a      	str	r2, [r3, #0]
			  //target=85;
			  //set_servo_angle(Right);
			  //osDelay(550);
		  }
//////
		  if(tempflag==1)
 800380c:	4b88      	ldr	r3, [pc, #544]	@ (8003a30 <startrobotTask+0x2b8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d12a      	bne.n	800386a <startrobotTask+0xf2>
			  {
			  if(count==0)
 8003814:	4b87      	ldr	r3, [pc, #540]	@ (8003a34 <startrobotTask+0x2bc>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10f      	bne.n	800383c <startrobotTask+0xc4>
			  {
				  flagReceived=1;
 800381c:	4b86      	ldr	r3, [pc, #536]	@ (8003a38 <startrobotTask+0x2c0>)
 800381e:	2201      	movs	r2, #1
 8003820:	601a      	str	r2, [r3, #0]
				  aRxBuffer[0]='D';
 8003822:	4b86      	ldr	r3, [pc, #536]	@ (8003a3c <startrobotTask+0x2c4>)
 8003824:	2244      	movs	r2, #68	@ 0x44
 8003826:	701a      	strb	r2, [r3, #0]
				  aRxBuffer[1]='1';
 8003828:	4b84      	ldr	r3, [pc, #528]	@ (8003a3c <startrobotTask+0x2c4>)
 800382a:	2231      	movs	r2, #49	@ 0x31
 800382c:	705a      	strb	r2, [r3, #1]
				  aRxBuffer[2]='0';
 800382e:	4b83      	ldr	r3, [pc, #524]	@ (8003a3c <startrobotTask+0x2c4>)
 8003830:	2230      	movs	r2, #48	@ 0x30
 8003832:	709a      	strb	r2, [r3, #2]
				  aRxBuffer[3]='0';
 8003834:	4b81      	ldr	r3, [pc, #516]	@ (8003a3c <startrobotTask+0x2c4>)
 8003836:	2230      	movs	r2, #48	@ 0x30
 8003838:	70da      	strb	r2, [r3, #3]
 800383a:	e016      	b.n	800386a <startrobotTask+0xf2>
			  }
			  else if (count==1)
 800383c:	4b7d      	ldr	r3, [pc, #500]	@ (8003a34 <startrobotTask+0x2bc>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d10f      	bne.n	8003864 <startrobotTask+0xec>
			  {
				  flagReceived=1;
 8003844:	4b7c      	ldr	r3, [pc, #496]	@ (8003a38 <startrobotTask+0x2c0>)
 8003846:	2201      	movs	r2, #1
 8003848:	601a      	str	r2, [r3, #0]
				  aRxBuffer[0]='D';
 800384a:	4b7c      	ldr	r3, [pc, #496]	@ (8003a3c <startrobotTask+0x2c4>)
 800384c:	2244      	movs	r2, #68	@ 0x44
 800384e:	701a      	strb	r2, [r3, #0]
				  aRxBuffer[1]='0';
 8003850:	4b7a      	ldr	r3, [pc, #488]	@ (8003a3c <startrobotTask+0x2c4>)
 8003852:	2230      	movs	r2, #48	@ 0x30
 8003854:	705a      	strb	r2, [r3, #1]
				  aRxBuffer[2]='0';
 8003856:	4b79      	ldr	r3, [pc, #484]	@ (8003a3c <startrobotTask+0x2c4>)
 8003858:	2230      	movs	r2, #48	@ 0x30
 800385a:	709a      	strb	r2, [r3, #2]
				  aRxBuffer[3]='0';
 800385c:	4b77      	ldr	r3, [pc, #476]	@ (8003a3c <startrobotTask+0x2c4>)
 800385e:	2230      	movs	r2, #48	@ 0x30
 8003860:	70da      	strb	r2, [r3, #3]
 8003862:	e002      	b.n	800386a <startrobotTask+0xf2>
			  }
			  else{
				  count=0;
 8003864:	4b73      	ldr	r3, [pc, #460]	@ (8003a34 <startrobotTask+0x2bc>)
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
//			  			  ForwardRightTest(-83);
			  				//ForwardRight(-84);

//	  }
	  //END OF TEST SEGMENT
	  	  	ICM20948_readGyroscope_all(&hi2c1, 0, GYRO_SENS, &accel);
 800386a:	4b75      	ldr	r3, [pc, #468]	@ (8003a40 <startrobotTask+0x2c8>)
 800386c:	2203      	movs	r2, #3
 800386e:	2100      	movs	r1, #0
 8003870:	4874      	ldr	r0, [pc, #464]	@ (8003a44 <startrobotTask+0x2cc>)
 8003872:	f006 f8a5 	bl	80099c0 <ICM20948_readGyroscope_all>
	  		end_time = HAL_GetTick();
 8003876:	f000 fd5b 	bl	8004330 <HAL_GetTick>
 800387a:	4603      	mov	r3, r0
 800387c:	4a69      	ldr	r2, [pc, #420]	@ (8003a24 <startrobotTask+0x2ac>)
 800387e:	6013      	str	r3, [r2, #0]
	  		delta_time_sec= (end_time - start_time) * 0.001f;
 8003880:	4b68      	ldr	r3, [pc, #416]	@ (8003a24 <startrobotTask+0x2ac>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4b66      	ldr	r3, [pc, #408]	@ (8003a20 <startrobotTask+0x2a8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	ee07 3a90 	vmov	s15, r3
 800388e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003892:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8003a28 <startrobotTask+0x2b0>
 8003896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800389a:	4b64      	ldr	r3, [pc, #400]	@ (8003a2c <startrobotTask+0x2b4>)
 800389c:	edc3 7a00 	vstr	s15, [r3]
	  		  start_time = HAL_GetTick();
 80038a0:	f000 fd46 	bl	8004330 <HAL_GetTick>
 80038a4:	4603      	mov	r3, r0
 80038a6:	4a5e      	ldr	r2, [pc, #376]	@ (8003a20 <startrobotTask+0x2a8>)
 80038a8:	6013      	str	r3, [r2, #0]
	  		  if(flagReceived==1&&flagDone!=1){
 80038aa:	4b63      	ldr	r3, [pc, #396]	@ (8003a38 <startrobotTask+0x2c0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	f040 8096 	bne.w	80039e0 <startrobotTask+0x268>
 80038b4:	4b64      	ldr	r3, [pc, #400]	@ (8003a48 <startrobotTask+0x2d0>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	f000 8091 	beq.w	80039e0 <startrobotTask+0x268>
	  			  char temp[4] = {0};  // Temporary buffer to hold up to 4 characters + null terminator
 80038be:	2300      	movs	r3, #0
 80038c0:	60bb      	str	r3, [r7, #8]
	  			  strncpy(temp, aRxBuffer+1, 3);
 80038c2:	4962      	ldr	r1, [pc, #392]	@ (8003a4c <startrobotTask+0x2d4>)
 80038c4:	f107 0308 	add.w	r3, r7, #8
 80038c8:	2203      	movs	r2, #3
 80038ca:	4618      	mov	r0, r3
 80038cc:	f00a f9b9 	bl	800dc42 <strncpy>
	  			  Target_Distance=atoi(temp);
 80038d0:	f107 0308 	add.w	r3, r7, #8
 80038d4:	4618      	mov	r0, r3
 80038d6:	f009 fb81 	bl	800cfdc <atoi>
 80038da:	4603      	mov	r3, r0
 80038dc:	4a5c      	ldr	r2, [pc, #368]	@ (8003a50 <startrobotTask+0x2d8>)
 80038de:	6013      	str	r3, [r2, #0]
	  				if(aRxBuffer[0]=='W' && distanceTraveled < Target_Distance){
 80038e0:	4b56      	ldr	r3, [pc, #344]	@ (8003a3c <startrobotTask+0x2c4>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b57      	cmp	r3, #87	@ 0x57
 80038e6:	d115      	bne.n	8003914 <startrobotTask+0x19c>
 80038e8:	4b59      	ldr	r3, [pc, #356]	@ (8003a50 <startrobotTask+0x2d8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	ee07 3a90 	vmov	s15, r3
 80038f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038f4:	4b57      	ldr	r3, [pc, #348]	@ (8003a54 <startrobotTask+0x2dc>)
 80038f6:	edd3 7a00 	vldr	s15, [r3]
 80038fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003902:	dd07      	ble.n	8003914 <startrobotTask+0x19c>
	  					Set_Motor_Direction(1,1);
 8003904:	2101      	movs	r1, #1
 8003906:	2001      	movs	r0, #1
 8003908:	f7fd ff22 	bl	8001750 <Set_Motor_Direction>
	  					Forward(0);
 800390c:	2000      	movs	r0, #0
 800390e:	f7fe f8ed 	bl	8001aec <Forward>
 8003912:	e064      	b.n	80039de <startrobotTask+0x266>
	  				}
	  				else if(aRxBuffer[0]=='D'&&aRxBuffer[1]=='1'){
 8003914:	4b49      	ldr	r3, [pc, #292]	@ (8003a3c <startrobotTask+0x2c4>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b44      	cmp	r3, #68	@ 0x44
 800391a:	d10d      	bne.n	8003938 <startrobotTask+0x1c0>
 800391c:	4b47      	ldr	r3, [pc, #284]	@ (8003a3c <startrobotTask+0x2c4>)
 800391e:	785b      	ldrb	r3, [r3, #1]
 8003920:	2b31      	cmp	r3, #49	@ 0x31
 8003922:	d109      	bne.n	8003938 <startrobotTask+0x1c0>
	  							Set_Motor_Direction(1,1);
 8003924:	2101      	movs	r1, #1
 8003926:	2001      	movs	r0, #1
 8003928:	f7fd ff12 	bl	8001750 <Set_Motor_Direction>
	  							ForwardRight(-labTarget);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	425b      	negs	r3, r3
 8003930:	4618      	mov	r0, r3
 8003932:	f7fe fc97 	bl	8002264 <ForwardRight>
 8003936:	e052      	b.n	80039de <startrobotTask+0x266>
	  				}
	  				else if(aRxBuffer[0]=='A' &&aRxBuffer[1]=='1'){
 8003938:	4b40      	ldr	r3, [pc, #256]	@ (8003a3c <startrobotTask+0x2c4>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b41      	cmp	r3, #65	@ 0x41
 800393e:	d10b      	bne.n	8003958 <startrobotTask+0x1e0>
 8003940:	4b3e      	ldr	r3, [pc, #248]	@ (8003a3c <startrobotTask+0x2c4>)
 8003942:	785b      	ldrb	r3, [r3, #1]
 8003944:	2b31      	cmp	r3, #49	@ 0x31
 8003946:	d107      	bne.n	8003958 <startrobotTask+0x1e0>
	  							Set_Motor_Direction(1,1);
 8003948:	2101      	movs	r1, #1
 800394a:	2001      	movs	r0, #1
 800394c:	f7fd ff00 	bl	8001750 <Set_Motor_Direction>
	  							ForwardLeft(labTarget);
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f7fe fb95 	bl	8002080 <ForwardLeft>
 8003956:	e042      	b.n	80039de <startrobotTask+0x266>
	  						}
	  				else if(aRxBuffer[0]=='D'&&aRxBuffer[1]=='0'){
 8003958:	4b38      	ldr	r3, [pc, #224]	@ (8003a3c <startrobotTask+0x2c4>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b44      	cmp	r3, #68	@ 0x44
 800395e:	d10b      	bne.n	8003978 <startrobotTask+0x200>
 8003960:	4b36      	ldr	r3, [pc, #216]	@ (8003a3c <startrobotTask+0x2c4>)
 8003962:	785b      	ldrb	r3, [r3, #1]
 8003964:	2b30      	cmp	r3, #48	@ 0x30
 8003966:	d107      	bne.n	8003978 <startrobotTask+0x200>
	  							Set_Motor_Direction(0,0);
 8003968:	2100      	movs	r1, #0
 800396a:	2000      	movs	r0, #0
 800396c:	f7fd fef0 	bl	8001750 <Set_Motor_Direction>
	  							BackRight(labTarget);
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f7fe f961 	bl	8001c38 <BackRight>
 8003976:	e032      	b.n	80039de <startrobotTask+0x266>
	  				}
	  				else if(aRxBuffer[0]=='A'&&aRxBuffer[1]=='0'){
 8003978:	4b30      	ldr	r3, [pc, #192]	@ (8003a3c <startrobotTask+0x2c4>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b41      	cmp	r3, #65	@ 0x41
 800397e:	d10d      	bne.n	800399c <startrobotTask+0x224>
 8003980:	4b2e      	ldr	r3, [pc, #184]	@ (8003a3c <startrobotTask+0x2c4>)
 8003982:	785b      	ldrb	r3, [r3, #1]
 8003984:	2b30      	cmp	r3, #48	@ 0x30
 8003986:	d109      	bne.n	800399c <startrobotTask+0x224>
	  							Set_Motor_Direction(0,0);
 8003988:	2100      	movs	r1, #0
 800398a:	2000      	movs	r0, #0
 800398c:	f7fd fee0 	bl	8001750 <Set_Motor_Direction>
	  							BackLeft(-labTarget);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	425b      	negs	r3, r3
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe fa5f 	bl	8001e58 <BackLeft>
 800399a:	e020      	b.n	80039de <startrobotTask+0x266>
	  				}
	  				else if(aRxBuffer[0]=='S' && distanceTraveled < Target_Distance)
 800399c:	4b27      	ldr	r3, [pc, #156]	@ (8003a3c <startrobotTask+0x2c4>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b53      	cmp	r3, #83	@ 0x53
 80039a2:	d115      	bne.n	80039d0 <startrobotTask+0x258>
 80039a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003a50 <startrobotTask+0x2d8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	ee07 3a90 	vmov	s15, r3
 80039ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039b0:	4b28      	ldr	r3, [pc, #160]	@ (8003a54 <startrobotTask+0x2dc>)
 80039b2:	edd3 7a00 	vldr	s15, [r3]
 80039b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039be:	dd07      	ble.n	80039d0 <startrobotTask+0x258>
	  				{
	  					Set_Motor_Direction(0,0);
 80039c0:	2100      	movs	r1, #0
 80039c2:	2000      	movs	r0, #0
 80039c4:	f7fd fec4 	bl	8001750 <Set_Motor_Direction>
	  					Backward(0);
 80039c8:	2000      	movs	r0, #0
 80039ca:	f7fd ffe9 	bl	80019a0 <Backward>
 80039ce:	e006      	b.n	80039de <startrobotTask+0x266>
	  				}
	  				else{
	  					flagDone=1;
 80039d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a48 <startrobotTask+0x2d0>)
 80039d2:	2201      	movs	r2, #1
 80039d4:	601a      	str	r2, [r3, #0]
	  					flagReceived=0;
 80039d6:	4b18      	ldr	r3, [pc, #96]	@ (8003a38 <startrobotTask+0x2c0>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
	  		  if(flagReceived==1&&flagDone!=1){
 80039dc:	e013      	b.n	8003a06 <startrobotTask+0x28e>
 80039de:	e012      	b.n	8003a06 <startrobotTask+0x28e>
	  				}
	  			}
	  			else if(flagDone==1)
 80039e0:	4b19      	ldr	r3, [pc, #100]	@ (8003a48 <startrobotTask+0x2d0>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d10e      	bne.n	8003a06 <startrobotTask+0x28e>
	  			{
	  				Motor_Stop();
 80039e8:	f7ff fc5a 	bl	80032a0 <Motor_Stop>
	  				HAL_UART_Transmit(&huart3,(uint8_t *)"ACK\r\n",5,0xFFFF);
 80039ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039f0:	2205      	movs	r2, #5
 80039f2:	4919      	ldr	r1, [pc, #100]	@ (8003a58 <startrobotTask+0x2e0>)
 80039f4:	4819      	ldr	r0, [pc, #100]	@ (8003a5c <startrobotTask+0x2e4>)
 80039f6:	f004 fe85 	bl	8008704 <HAL_UART_Transmit>
	  				flagReceived=0;
 80039fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003a38 <startrobotTask+0x2c0>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
	  				flagDone = 0;
 8003a00:	4b11      	ldr	r3, [pc, #68]	@ (8003a48 <startrobotTask+0x2d0>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
	  			}

    osDelay(10);
 8003a06:	200a      	movs	r0, #10
 8003a08:	f006 fc12 	bl	800a230 <osDelay>
  {
 8003a0c:	e6f3      	b.n	80037f6 <startrobotTask+0x7e>
 8003a0e:	bf00      	nop
 8003a10:	20000324 	.word	0x20000324
 8003a14:	200005dc 	.word	0x200005dc
 8003a18:	2000048c 	.word	0x2000048c
 8003a1c:	40020c00 	.word	0x40020c00
 8003a20:	20000238 	.word	0x20000238
 8003a24:	2000023c 	.word	0x2000023c
 8003a28:	3a83126f 	.word	0x3a83126f
 8003a2c:	20000228 	.word	0x20000228
 8003a30:	20000000 	.word	0x20000000
 8003a34:	20000234 	.word	0x20000234
 8003a38:	20000230 	.word	0x20000230
 8003a3c:	200005e4 	.word	0x200005e4
 8003a40:	20000568 	.word	0x20000568
 8003a44:	200002d0 	.word	0x200002d0
 8003a48:	2000022c 	.word	0x2000022c
 8003a4c:	200005e5 	.word	0x200005e5
 8003a50:	20000220 	.word	0x20000220
 8003a54:	20000224 	.word	0x20000224
 8003a58:	08010450 	.word	0x08010450
 8003a5c:	200004d4 	.word	0x200004d4

08003a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a64:	b672      	cpsid	i
}
 8003a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a68:	bf00      	nop
 8003a6a:	e7fd      	b.n	8003a68 <Error_Handler+0x8>

08003a6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	607b      	str	r3, [r7, #4]
 8003a76:	4b12      	ldr	r3, [pc, #72]	@ (8003ac0 <HAL_MspInit+0x54>)
 8003a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7a:	4a11      	ldr	r2, [pc, #68]	@ (8003ac0 <HAL_MspInit+0x54>)
 8003a7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a80:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a82:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac0 <HAL_MspInit+0x54>)
 8003a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a8a:	607b      	str	r3, [r7, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	603b      	str	r3, [r7, #0]
 8003a92:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac0 <HAL_MspInit+0x54>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac0 <HAL_MspInit+0x54>)
 8003a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a9e:	4b08      	ldr	r3, [pc, #32]	@ (8003ac0 <HAL_MspInit+0x54>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003aaa:	2200      	movs	r2, #0
 8003aac:	210f      	movs	r1, #15
 8003aae:	f06f 0001 	mvn.w	r0, #1
 8003ab2:	f001 f948 	bl	8004d46 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40023800 	.word	0x40023800

08003ac4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08c      	sub	sp, #48	@ 0x30
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003acc:	f107 031c 	add.w	r3, r7, #28
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	605a      	str	r2, [r3, #4]
 8003ad6:	609a      	str	r2, [r3, #8]
 8003ad8:	60da      	str	r2, [r3, #12]
 8003ada:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a2e      	ldr	r2, [pc, #184]	@ (8003b9c <HAL_ADC_MspInit+0xd8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d128      	bne.n	8003b38 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	4b2d      	ldr	r3, [pc, #180]	@ (8003ba0 <HAL_ADC_MspInit+0xdc>)
 8003aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aee:	4a2c      	ldr	r2, [pc, #176]	@ (8003ba0 <HAL_ADC_MspInit+0xdc>)
 8003af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003af6:	4b2a      	ldr	r3, [pc, #168]	@ (8003ba0 <HAL_ADC_MspInit+0xdc>)
 8003af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afe:	61bb      	str	r3, [r7, #24]
 8003b00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b02:	2300      	movs	r3, #0
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	4b26      	ldr	r3, [pc, #152]	@ (8003ba0 <HAL_ADC_MspInit+0xdc>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0a:	4a25      	ldr	r2, [pc, #148]	@ (8003ba0 <HAL_ADC_MspInit+0xdc>)
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b12:	4b23      	ldr	r3, [pc, #140]	@ (8003ba0 <HAL_ADC_MspInit+0xdc>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b22:	2303      	movs	r3, #3
 8003b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b2a:	f107 031c 	add.w	r3, r7, #28
 8003b2e:	4619      	mov	r1, r3
 8003b30:	481c      	ldr	r0, [pc, #112]	@ (8003ba4 <HAL_ADC_MspInit+0xe0>)
 8003b32:	f001 f9d1 	bl	8004ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003b36:	e02c      	b.n	8003b92 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ba8 <HAL_ADC_MspInit+0xe4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d127      	bne.n	8003b92 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003b42:	2300      	movs	r3, #0
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	4b16      	ldr	r3, [pc, #88]	@ (8003ba0 <HAL_ADC_MspInit+0xdc>)
 8003b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4a:	4a15      	ldr	r2, [pc, #84]	@ (8003ba0 <HAL_ADC_MspInit+0xdc>)
 8003b4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b52:	4b13      	ldr	r3, [pc, #76]	@ (8003ba0 <HAL_ADC_MspInit+0xdc>)
 8003b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba0 <HAL_ADC_MspInit+0xdc>)
 8003b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b66:	4a0e      	ldr	r2, [pc, #56]	@ (8003ba0 <HAL_ADC_MspInit+0xdc>)
 8003b68:	f043 0301 	orr.w	r3, r3, #1
 8003b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba0 <HAL_ADC_MspInit+0xdc>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b86:	f107 031c 	add.w	r3, r7, #28
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4805      	ldr	r0, [pc, #20]	@ (8003ba4 <HAL_ADC_MspInit+0xe0>)
 8003b8e:	f001 f9a3 	bl	8004ed8 <HAL_GPIO_Init>
}
 8003b92:	bf00      	nop
 8003b94:	3730      	adds	r7, #48	@ 0x30
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40012000 	.word	0x40012000
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	40020000 	.word	0x40020000
 8003ba8:	40012100 	.word	0x40012100

08003bac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08a      	sub	sp, #40	@ 0x28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb4:	f107 0314 	add.w	r3, r7, #20
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	605a      	str	r2, [r3, #4]
 8003bbe:	609a      	str	r2, [r3, #8]
 8003bc0:	60da      	str	r2, [r3, #12]
 8003bc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a19      	ldr	r2, [pc, #100]	@ (8003c30 <HAL_I2C_MspInit+0x84>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d12c      	bne.n	8003c28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	4b18      	ldr	r3, [pc, #96]	@ (8003c34 <HAL_I2C_MspInit+0x88>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd6:	4a17      	ldr	r2, [pc, #92]	@ (8003c34 <HAL_I2C_MspInit+0x88>)
 8003bd8:	f043 0302 	orr.w	r3, r3, #2
 8003bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bde:	4b15      	ldr	r3, [pc, #84]	@ (8003c34 <HAL_I2C_MspInit+0x88>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003bea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bf0:	2312      	movs	r3, #18
 8003bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003bfc:	2304      	movs	r3, #4
 8003bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c00:	f107 0314 	add.w	r3, r7, #20
 8003c04:	4619      	mov	r1, r3
 8003c06:	480c      	ldr	r0, [pc, #48]	@ (8003c38 <HAL_I2C_MspInit+0x8c>)
 8003c08:	f001 f966 	bl	8004ed8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	4b08      	ldr	r3, [pc, #32]	@ (8003c34 <HAL_I2C_MspInit+0x88>)
 8003c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c14:	4a07      	ldr	r2, [pc, #28]	@ (8003c34 <HAL_I2C_MspInit+0x88>)
 8003c16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003c1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c1c:	4b05      	ldr	r3, [pc, #20]	@ (8003c34 <HAL_I2C_MspInit+0x88>)
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003c28:	bf00      	nop
 8003c2a:	3728      	adds	r7, #40	@ 0x28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40005400 	.word	0x40005400
 8003c34:	40023800 	.word	0x40023800
 8003c38:	40020400 	.word	0x40020400

08003c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08e      	sub	sp, #56	@ 0x38
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	60da      	str	r2, [r3, #12]
 8003c52:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a4a      	ldr	r2, [pc, #296]	@ (8003d84 <HAL_TIM_Base_MspInit+0x148>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d10e      	bne.n	8003c7c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c5e:	2300      	movs	r3, #0
 8003c60:	623b      	str	r3, [r7, #32]
 8003c62:	4b49      	ldr	r3, [pc, #292]	@ (8003d88 <HAL_TIM_Base_MspInit+0x14c>)
 8003c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c66:	4a48      	ldr	r2, [pc, #288]	@ (8003d88 <HAL_TIM_Base_MspInit+0x14c>)
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c6e:	4b46      	ldr	r3, [pc, #280]	@ (8003d88 <HAL_TIM_Base_MspInit+0x14c>)
 8003c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	623b      	str	r3, [r7, #32]
 8003c78:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003c7a:	e07f      	b.n	8003d7c <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM4)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a42      	ldr	r2, [pc, #264]	@ (8003d8c <HAL_TIM_Base_MspInit+0x150>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d135      	bne.n	8003cf2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
 8003c8a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d88 <HAL_TIM_Base_MspInit+0x14c>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	4a3e      	ldr	r2, [pc, #248]	@ (8003d88 <HAL_TIM_Base_MspInit+0x14c>)
 8003c90:	f043 0304 	orr.w	r3, r3, #4
 8003c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c96:	4b3c      	ldr	r3, [pc, #240]	@ (8003d88 <HAL_TIM_Base_MspInit+0x14c>)
 8003c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	61fb      	str	r3, [r7, #28]
 8003ca0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	4b38      	ldr	r3, [pc, #224]	@ (8003d88 <HAL_TIM_Base_MspInit+0x14c>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003caa:	4a37      	ldr	r2, [pc, #220]	@ (8003d88 <HAL_TIM_Base_MspInit+0x14c>)
 8003cac:	f043 0308 	orr.w	r3, r3, #8
 8003cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cb2:	4b35      	ldr	r3, [pc, #212]	@ (8003d88 <HAL_TIM_Base_MspInit+0x14c>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	61bb      	str	r3, [r7, #24]
 8003cbc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003cbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cd8:	4619      	mov	r1, r3
 8003cda:	482d      	ldr	r0, [pc, #180]	@ (8003d90 <HAL_TIM_Base_MspInit+0x154>)
 8003cdc:	f001 f8fc 	bl	8004ed8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2105      	movs	r1, #5
 8003ce4:	201e      	movs	r0, #30
 8003ce6:	f001 f82e 	bl	8004d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003cea:	201e      	movs	r0, #30
 8003cec:	f001 f847 	bl	8004d7e <HAL_NVIC_EnableIRQ>
}
 8003cf0:	e044      	b.n	8003d7c <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM6)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a27      	ldr	r2, [pc, #156]	@ (8003d94 <HAL_TIM_Base_MspInit+0x158>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d10e      	bne.n	8003d1a <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	4b21      	ldr	r3, [pc, #132]	@ (8003d88 <HAL_TIM_Base_MspInit+0x14c>)
 8003d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d04:	4a20      	ldr	r2, [pc, #128]	@ (8003d88 <HAL_TIM_Base_MspInit+0x14c>)
 8003d06:	f043 0310 	orr.w	r3, r3, #16
 8003d0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d0c:	4b1e      	ldr	r3, [pc, #120]	@ (8003d88 <HAL_TIM_Base_MspInit+0x14c>)
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d10:	f003 0310 	and.w	r3, r3, #16
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	697b      	ldr	r3, [r7, #20]
}
 8003d18:	e030      	b.n	8003d7c <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM8)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8003d98 <HAL_TIM_Base_MspInit+0x15c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d12b      	bne.n	8003d7c <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003d24:	2300      	movs	r3, #0
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	4b17      	ldr	r3, [pc, #92]	@ (8003d88 <HAL_TIM_Base_MspInit+0x14c>)
 8003d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2c:	4a16      	ldr	r2, [pc, #88]	@ (8003d88 <HAL_TIM_Base_MspInit+0x14c>)
 8003d2e:	f043 0302 	orr.w	r3, r3, #2
 8003d32:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d34:	4b14      	ldr	r3, [pc, #80]	@ (8003d88 <HAL_TIM_Base_MspInit+0x14c>)
 8003d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	4b10      	ldr	r3, [pc, #64]	@ (8003d88 <HAL_TIM_Base_MspInit+0x14c>)
 8003d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d48:	4a0f      	ldr	r2, [pc, #60]	@ (8003d88 <HAL_TIM_Base_MspInit+0x14c>)
 8003d4a:	f043 0304 	orr.w	r3, r3, #4
 8003d4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d50:	4b0d      	ldr	r3, [pc, #52]	@ (8003d88 <HAL_TIM_Base_MspInit+0x14c>)
 8003d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d5c:	23c0      	movs	r3, #192	@ 0xc0
 8003d5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d60:	2302      	movs	r3, #2
 8003d62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d74:	4619      	mov	r1, r3
 8003d76:	4809      	ldr	r0, [pc, #36]	@ (8003d9c <HAL_TIM_Base_MspInit+0x160>)
 8003d78:	f001 f8ae 	bl	8004ed8 <HAL_GPIO_Init>
}
 8003d7c:	bf00      	nop
 8003d7e:	3738      	adds	r7, #56	@ 0x38
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40010000 	.word	0x40010000
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	40000800 	.word	0x40000800
 8003d90:	40020c00 	.word	0x40020c00
 8003d94:	40001000 	.word	0x40001000
 8003d98:	40010400 	.word	0x40010400
 8003d9c:	40020800 	.word	0x40020800

08003da0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08c      	sub	sp, #48	@ 0x30
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da8:	f107 031c 	add.w	r3, r7, #28
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	605a      	str	r2, [r3, #4]
 8003db2:	609a      	str	r2, [r3, #8]
 8003db4:	60da      	str	r2, [r3, #12]
 8003db6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dc0:	d14b      	bne.n	8003e5a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61bb      	str	r3, [r7, #24]
 8003dc6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dca:	4a3e      	ldr	r2, [pc, #248]	@ (8003ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dd2:	4b3c      	ldr	r3, [pc, #240]	@ (8003ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	61bb      	str	r3, [r7, #24]
 8003ddc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	4b38      	ldr	r3, [pc, #224]	@ (8003ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de6:	4a37      	ldr	r2, [pc, #220]	@ (8003ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dee:	4b35      	ldr	r3, [pc, #212]	@ (8003ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	617b      	str	r3, [r7, #20]
 8003df8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	4b31      	ldr	r3, [pc, #196]	@ (8003ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e02:	4a30      	ldr	r2, [pc, #192]	@ (8003ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e04:	f043 0302 	orr.w	r3, r3, #2
 8003e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e0a:	4b2e      	ldr	r3, [pc, #184]	@ (8003ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e24:	2300      	movs	r3, #0
 8003e26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e2c:	f107 031c 	add.w	r3, r7, #28
 8003e30:	4619      	mov	r1, r3
 8003e32:	4825      	ldr	r0, [pc, #148]	@ (8003ec8 <HAL_TIM_Encoder_MspInit+0x128>)
 8003e34:	f001 f850 	bl	8004ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003e38:	2308      	movs	r3, #8
 8003e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e40:	2300      	movs	r3, #0
 8003e42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e44:	2300      	movs	r3, #0
 8003e46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e4c:	f107 031c 	add.w	r3, r7, #28
 8003e50:	4619      	mov	r1, r3
 8003e52:	481e      	ldr	r0, [pc, #120]	@ (8003ecc <HAL_TIM_Encoder_MspInit+0x12c>)
 8003e54:	f001 f840 	bl	8004ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003e58:	e030      	b.n	8003ebc <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed0 <HAL_TIM_Encoder_MspInit+0x130>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d12b      	bne.n	8003ebc <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e64:	2300      	movs	r3, #0
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	4b16      	ldr	r3, [pc, #88]	@ (8003ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6c:	4a15      	ldr	r2, [pc, #84]	@ (8003ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e6e:	f043 0302 	orr.w	r3, r3, #2
 8003e72:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e74:	4b13      	ldr	r3, [pc, #76]	@ (8003ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e80:	2300      	movs	r3, #0
 8003e82:	60bb      	str	r3, [r7, #8]
 8003e84:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e88:	4a0e      	ldr	r2, [pc, #56]	@ (8003ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e8a:	f043 0301 	orr.w	r3, r3, #1
 8003e8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e90:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec4 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e9c:	23c0      	movs	r3, #192	@ 0xc0
 8003e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003eac:	2302      	movs	r3, #2
 8003eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb0:	f107 031c 	add.w	r3, r7, #28
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4804      	ldr	r0, [pc, #16]	@ (8003ec8 <HAL_TIM_Encoder_MspInit+0x128>)
 8003eb8:	f001 f80e 	bl	8004ed8 <HAL_GPIO_Init>
}
 8003ebc:	bf00      	nop
 8003ebe:	3730      	adds	r7, #48	@ 0x30
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	40020000 	.word	0x40020000
 8003ecc:	40020400 	.word	0x40020400
 8003ed0:	40000400 	.word	0x40000400

08003ed4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b088      	sub	sp, #32
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003edc:	f107 030c 	add.w	r3, r7, #12
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	60da      	str	r2, [r3, #12]
 8003eea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a12      	ldr	r2, [pc, #72]	@ (8003f3c <HAL_TIM_MspPostInit+0x68>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d11e      	bne.n	8003f34 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	4b11      	ldr	r3, [pc, #68]	@ (8003f40 <HAL_TIM_MspPostInit+0x6c>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efe:	4a10      	ldr	r2, [pc, #64]	@ (8003f40 <HAL_TIM_MspPostInit+0x6c>)
 8003f00:	f043 0310 	orr.w	r3, r3, #16
 8003f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f06:	4b0e      	ldr	r3, [pc, #56]	@ (8003f40 <HAL_TIM_MspPostInit+0x6c>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0a:	f003 0310 	and.w	r3, r3, #16
 8003f0e:	60bb      	str	r3, [r7, #8]
 8003f10:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003f12:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f18:	2302      	movs	r3, #2
 8003f1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003f24:	2301      	movs	r3, #1
 8003f26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f28:	f107 030c 	add.w	r3, r7, #12
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4805      	ldr	r0, [pc, #20]	@ (8003f44 <HAL_TIM_MspPostInit+0x70>)
 8003f30:	f000 ffd2 	bl	8004ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003f34:	bf00      	nop
 8003f36:	3720      	adds	r7, #32
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40010000 	.word	0x40010000
 8003f40:	40023800 	.word	0x40023800
 8003f44:	40021000 	.word	0x40021000

08003f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08a      	sub	sp, #40	@ 0x28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f50:	f107 0314 	add.w	r3, r7, #20
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	60da      	str	r2, [r3, #12]
 8003f5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a1d      	ldr	r2, [pc, #116]	@ (8003fdc <HAL_UART_MspInit+0x94>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d134      	bne.n	8003fd4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8003fe0 <HAL_UART_MspInit+0x98>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	4a1b      	ldr	r2, [pc, #108]	@ (8003fe0 <HAL_UART_MspInit+0x98>)
 8003f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f7a:	4b19      	ldr	r3, [pc, #100]	@ (8003fe0 <HAL_UART_MspInit+0x98>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f82:	613b      	str	r3, [r7, #16]
 8003f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	4b15      	ldr	r3, [pc, #84]	@ (8003fe0 <HAL_UART_MspInit+0x98>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8e:	4a14      	ldr	r2, [pc, #80]	@ (8003fe0 <HAL_UART_MspInit+0x98>)
 8003f90:	f043 0304 	orr.w	r3, r3, #4
 8003f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f96:	4b12      	ldr	r3, [pc, #72]	@ (8003fe0 <HAL_UART_MspInit+0x98>)
 8003f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003fa2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa8:	2302      	movs	r3, #2
 8003faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fac:	2300      	movs	r3, #0
 8003fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003fb4:	2307      	movs	r3, #7
 8003fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fb8:	f107 0314 	add.w	r3, r7, #20
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4809      	ldr	r0, [pc, #36]	@ (8003fe4 <HAL_UART_MspInit+0x9c>)
 8003fc0:	f000 ff8a 	bl	8004ed8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2105      	movs	r1, #5
 8003fc8:	2027      	movs	r0, #39	@ 0x27
 8003fca:	f000 febc 	bl	8004d46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003fce:	2027      	movs	r0, #39	@ 0x27
 8003fd0:	f000 fed5 	bl	8004d7e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8003fd4:	bf00      	nop
 8003fd6:	3728      	adds	r7, #40	@ 0x28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40004800 	.word	0x40004800
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	40020800 	.word	0x40020800

08003fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fec:	bf00      	nop
 8003fee:	e7fd      	b.n	8003fec <NMI_Handler+0x4>

08003ff0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ff4:	bf00      	nop
 8003ff6:	e7fd      	b.n	8003ff4 <HardFault_Handler+0x4>

08003ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ffc:	bf00      	nop
 8003ffe:	e7fd      	b.n	8003ffc <MemManage_Handler+0x4>

08004000 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004000:	b480      	push	{r7}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004004:	bf00      	nop
 8004006:	e7fd      	b.n	8004004 <BusFault_Handler+0x4>

08004008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800400c:	bf00      	nop
 800400e:	e7fd      	b.n	800400c <UsageFault_Handler+0x4>

08004010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004022:	f000 f971 	bl	8004308 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004026:	f007 fd2b 	bl	800ba80 <xTaskGetSchedulerState>
 800402a:	4603      	mov	r3, r0
 800402c:	2b01      	cmp	r3, #1
 800402e:	d001      	beq.n	8004034 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004030:	f008 fb22 	bl	800c678 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004034:	bf00      	nop
 8004036:	bd80      	pop	{r7, pc}

08004038 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800403c:	4802      	ldr	r0, [pc, #8]	@ (8004048 <TIM4_IRQHandler+0x10>)
 800403e:	f003 fa67 	bl	8007510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004042:	bf00      	nop
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	200003fc 	.word	0x200003fc

0800404c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004050:	4802      	ldr	r0, [pc, #8]	@ (800405c <USART3_IRQHandler+0x10>)
 8004052:	f004 fc07 	bl	8008864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004056:	bf00      	nop
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	200004d4 	.word	0x200004d4

08004060 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
	return 1;
 8004064:	2301      	movs	r3, #1
}
 8004066:	4618      	mov	r0, r3
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <_kill>:

int _kill(int pid, int sig)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800407a:	f009 fe3f 	bl	800dcfc <__errno>
 800407e:	4603      	mov	r3, r0
 8004080:	2216      	movs	r2, #22
 8004082:	601a      	str	r2, [r3, #0]
	return -1;
 8004084:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <_exit>:

void _exit (int status)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004098:	f04f 31ff 	mov.w	r1, #4294967295
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff ffe7 	bl	8004070 <_kill>
	while (1) {}		/* Make sure we hang here */
 80040a2:	bf00      	nop
 80040a4:	e7fd      	b.n	80040a2 <_exit+0x12>

080040a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b086      	sub	sp, #24
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	e00a      	b.n	80040ce <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80040b8:	f3af 8000 	nop.w
 80040bc:	4601      	mov	r1, r0
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	1c5a      	adds	r2, r3, #1
 80040c2:	60ba      	str	r2, [r7, #8]
 80040c4:	b2ca      	uxtb	r2, r1
 80040c6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	3301      	adds	r3, #1
 80040cc:	617b      	str	r3, [r7, #20]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	dbf0      	blt.n	80040b8 <_read+0x12>
	}

return len;
 80040d6:	687b      	ldr	r3, [r7, #4]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ec:	2300      	movs	r3, #0
 80040ee:	617b      	str	r3, [r7, #20]
 80040f0:	e009      	b.n	8004106 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	60ba      	str	r2, [r7, #8]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	3301      	adds	r3, #1
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	429a      	cmp	r2, r3
 800410c:	dbf1      	blt.n	80040f2 <_write+0x12>
	}
	return len;
 800410e:	687b      	ldr	r3, [r7, #4]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <_close>:

int _close(int file)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	return -1;
 8004120:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004124:	4618      	mov	r0, r3
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004140:	605a      	str	r2, [r3, #4]
	return 0;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <_isatty>:

int _isatty(int file)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
	return 1;
 8004158:	2301      	movs	r3, #1
}
 800415a:	4618      	mov	r0, r3
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004166:	b480      	push	{r7}
 8004168:	b085      	sub	sp, #20
 800416a:	af00      	add	r7, sp, #0
 800416c:	60f8      	str	r0, [r7, #12]
 800416e:	60b9      	str	r1, [r7, #8]
 8004170:	607a      	str	r2, [r7, #4]
	return 0;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004188:	4a14      	ldr	r2, [pc, #80]	@ (80041dc <_sbrk+0x5c>)
 800418a:	4b15      	ldr	r3, [pc, #84]	@ (80041e0 <_sbrk+0x60>)
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004194:	4b13      	ldr	r3, [pc, #76]	@ (80041e4 <_sbrk+0x64>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d102      	bne.n	80041a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800419c:	4b11      	ldr	r3, [pc, #68]	@ (80041e4 <_sbrk+0x64>)
 800419e:	4a12      	ldr	r2, [pc, #72]	@ (80041e8 <_sbrk+0x68>)
 80041a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041a2:	4b10      	ldr	r3, [pc, #64]	@ (80041e4 <_sbrk+0x64>)
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4413      	add	r3, r2
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d207      	bcs.n	80041c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041b0:	f009 fda4 	bl	800dcfc <__errno>
 80041b4:	4603      	mov	r3, r0
 80041b6:	220c      	movs	r2, #12
 80041b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041ba:	f04f 33ff 	mov.w	r3, #4294967295
 80041be:	e009      	b.n	80041d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041c0:	4b08      	ldr	r3, [pc, #32]	@ (80041e4 <_sbrk+0x64>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041c6:	4b07      	ldr	r3, [pc, #28]	@ (80041e4 <_sbrk+0x64>)
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4413      	add	r3, r2
 80041ce:	4a05      	ldr	r2, [pc, #20]	@ (80041e4 <_sbrk+0x64>)
 80041d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041d2:	68fb      	ldr	r3, [r7, #12]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	20020000 	.word	0x20020000
 80041e0:	00000400 	.word	0x00000400
 80041e4:	200005f8 	.word	0x200005f8
 80041e8:	200054a8 	.word	0x200054a8

080041ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041f0:	4b06      	ldr	r3, [pc, #24]	@ (800420c <SystemInit+0x20>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f6:	4a05      	ldr	r2, [pc, #20]	@ (800420c <SystemInit+0x20>)
 80041f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80041fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004200:	bf00      	nop
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	e000ed00 	.word	0xe000ed00

08004210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004210:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004248 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004214:	480d      	ldr	r0, [pc, #52]	@ (800424c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004216:	490e      	ldr	r1, [pc, #56]	@ (8004250 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004218:	4a0e      	ldr	r2, [pc, #56]	@ (8004254 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800421a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800421c:	e002      	b.n	8004224 <LoopCopyDataInit>

0800421e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800421e:	58d4      	ldr	r4, [r2, r3]
   str r4, [r0, r3]
 8004220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004222:	3304      	adds	r3, #4

08004224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004228:	d3f9      	bcc.n	800421e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800422a:	4a0b      	ldr	r2, [pc, #44]	@ (8004258 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800422c:	4c0b      	ldr	r4, [pc, #44]	@ (800425c <LoopFillZerobss+0x26>)
  movs r3, #0
 800422e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004230:	e001      	b.n	8004236 <LoopFillZerobss>

08004232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004234:	3204      	adds	r2, #4

08004236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004238:	d3fb      	bcc.n	8004232 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800423a:	f7ff ffd7 	bl	80041ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800423e:	f009 fd63 	bl	800dd08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004242:	f7fe f96b 	bl	800251c <main>
  bx  lr    
 8004246:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004248:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800424c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004250:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8004254:	08011390 	.word	0x08011390
  ldr r2, =_sbss
 8004258:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800425c:	200054a8 	.word	0x200054a8

08004260 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004260:	e7fe      	b.n	8004260 <ADC_IRQHandler>
	...

08004264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004268:	4b0e      	ldr	r3, [pc, #56]	@ (80042a4 <HAL_Init+0x40>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a0d      	ldr	r2, [pc, #52]	@ (80042a4 <HAL_Init+0x40>)
 800426e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004272:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004274:	4b0b      	ldr	r3, [pc, #44]	@ (80042a4 <HAL_Init+0x40>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a0a      	ldr	r2, [pc, #40]	@ (80042a4 <HAL_Init+0x40>)
 800427a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800427e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004280:	4b08      	ldr	r3, [pc, #32]	@ (80042a4 <HAL_Init+0x40>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a07      	ldr	r2, [pc, #28]	@ (80042a4 <HAL_Init+0x40>)
 8004286:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800428a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800428c:	2003      	movs	r0, #3
 800428e:	f000 fd4f 	bl	8004d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004292:	200f      	movs	r0, #15
 8004294:	f000 f808 	bl	80042a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004298:	f7ff fbe8 	bl	8003a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40023c00 	.word	0x40023c00

080042a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042b0:	4b12      	ldr	r3, [pc, #72]	@ (80042fc <HAL_InitTick+0x54>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	4b12      	ldr	r3, [pc, #72]	@ (8004300 <HAL_InitTick+0x58>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	4619      	mov	r1, r3
 80042ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80042be:	fbb3 f3f1 	udiv	r3, r3, r1
 80042c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fd67 	bl	8004d9a <HAL_SYSTICK_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e00e      	b.n	80042f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b0f      	cmp	r3, #15
 80042da:	d80a      	bhi.n	80042f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042dc:	2200      	movs	r2, #0
 80042de:	6879      	ldr	r1, [r7, #4]
 80042e0:	f04f 30ff 	mov.w	r0, #4294967295
 80042e4:	f000 fd2f 	bl	8004d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042e8:	4a06      	ldr	r2, [pc, #24]	@ (8004304 <HAL_InitTick+0x5c>)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	e000      	b.n	80042f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	20000020 	.word	0x20000020
 8004300:	20000028 	.word	0x20000028
 8004304:	20000024 	.word	0x20000024

08004308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800430c:	4b06      	ldr	r3, [pc, #24]	@ (8004328 <HAL_IncTick+0x20>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	461a      	mov	r2, r3
 8004312:	4b06      	ldr	r3, [pc, #24]	@ (800432c <HAL_IncTick+0x24>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4413      	add	r3, r2
 8004318:	4a04      	ldr	r2, [pc, #16]	@ (800432c <HAL_IncTick+0x24>)
 800431a:	6013      	str	r3, [r2, #0]
}
 800431c:	bf00      	nop
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	20000028 	.word	0x20000028
 800432c:	200005fc 	.word	0x200005fc

08004330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  return uwTick;
 8004334:	4b03      	ldr	r3, [pc, #12]	@ (8004344 <HAL_GetTick+0x14>)
 8004336:	681b      	ldr	r3, [r3, #0]
}
 8004338:	4618      	mov	r0, r3
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	200005fc 	.word	0x200005fc

08004348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004350:	f7ff ffee 	bl	8004330 <HAL_GetTick>
 8004354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004360:	d005      	beq.n	800436e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004362:	4b0a      	ldr	r3, [pc, #40]	@ (800438c <HAL_Delay+0x44>)
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4413      	add	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800436e:	bf00      	nop
 8004370:	f7ff ffde 	bl	8004330 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	429a      	cmp	r2, r3
 800437e:	d8f7      	bhi.n	8004370 <HAL_Delay+0x28>
  {
  }
}
 8004380:	bf00      	nop
 8004382:	bf00      	nop
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	20000028 	.word	0x20000028

08004390 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004398:	2300      	movs	r3, #0
 800439a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e033      	b.n	800440e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7ff fb88 	bl	8003ac4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	f003 0310 	and.w	r3, r3, #16
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d118      	bne.n	8004400 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80043d6:	f023 0302 	bic.w	r3, r3, #2
 80043da:	f043 0202 	orr.w	r2, r3, #2
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fad8 	bl	8004998 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	f023 0303 	bic.w	r3, r3, #3
 80043f6:	f043 0201 	orr.w	r2, r3, #1
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80043fe:	e001      	b.n	8004404 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800440c:	7bfb      	ldrb	r3, [r7, #15]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_ADC_Start+0x1a>
 800442e:	2302      	movs	r3, #2
 8004430:	e0b2      	b.n	8004598 <HAL_ADC_Start+0x180>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b01      	cmp	r3, #1
 8004446:	d018      	beq.n	800447a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689a      	ldr	r2, [r3, #8]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0201 	orr.w	r2, r2, #1
 8004456:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004458:	4b52      	ldr	r3, [pc, #328]	@ (80045a4 <HAL_ADC_Start+0x18c>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a52      	ldr	r2, [pc, #328]	@ (80045a8 <HAL_ADC_Start+0x190>)
 800445e:	fba2 2303 	umull	r2, r3, r2, r3
 8004462:	0c9a      	lsrs	r2, r3, #18
 8004464:	4613      	mov	r3, r2
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	4413      	add	r3, r2
 800446a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800446c:	e002      	b.n	8004474 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	3b01      	subs	r3, #1
 8004472:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f9      	bne.n	800446e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b01      	cmp	r3, #1
 8004486:	d17a      	bne.n	800457e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004490:	f023 0301 	bic.w	r3, r3, #1
 8004494:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d007      	beq.n	80044ba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80044b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044c6:	d106      	bne.n	80044d6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044cc:	f023 0206 	bic.w	r2, r3, #6
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	645a      	str	r2, [r3, #68]	@ 0x44
 80044d4:	e002      	b.n	80044dc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044e4:	4b31      	ldr	r3, [pc, #196]	@ (80045ac <HAL_ADC_Start+0x194>)
 80044e6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80044f0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f003 031f 	and.w	r3, r3, #31
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d12a      	bne.n	8004554 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a2b      	ldr	r2, [pc, #172]	@ (80045b0 <HAL_ADC_Start+0x198>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d015      	beq.n	8004534 <HAL_ADC_Start+0x11c>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a29      	ldr	r2, [pc, #164]	@ (80045b4 <HAL_ADC_Start+0x19c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d105      	bne.n	800451e <HAL_ADC_Start+0x106>
 8004512:	4b26      	ldr	r3, [pc, #152]	@ (80045ac <HAL_ADC_Start+0x194>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f003 031f 	and.w	r3, r3, #31
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00a      	beq.n	8004534 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a25      	ldr	r2, [pc, #148]	@ (80045b8 <HAL_ADC_Start+0x1a0>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d136      	bne.n	8004596 <HAL_ADC_Start+0x17e>
 8004528:	4b20      	ldr	r3, [pc, #128]	@ (80045ac <HAL_ADC_Start+0x194>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	2b00      	cmp	r3, #0
 8004532:	d130      	bne.n	8004596 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d129      	bne.n	8004596 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004550:	609a      	str	r2, [r3, #8]
 8004552:	e020      	b.n	8004596 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a15      	ldr	r2, [pc, #84]	@ (80045b0 <HAL_ADC_Start+0x198>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d11b      	bne.n	8004596 <HAL_ADC_Start+0x17e>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d114      	bne.n	8004596 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689a      	ldr	r2, [r3, #8]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800457a:	609a      	str	r2, [r3, #8]
 800457c:	e00b      	b.n	8004596 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004582:	f043 0210 	orr.w	r2, r3, #16
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458e:	f043 0201 	orr.w	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	20000020 	.word	0x20000020
 80045a8:	431bde83 	.word	0x431bde83
 80045ac:	40012300 	.word	0x40012300
 80045b0:	40012000 	.word	0x40012000
 80045b4:	40012100 	.word	0x40012100
 80045b8:	40012200 	.word	0x40012200

080045bc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <HAL_ADC_Stop+0x16>
 80045ce:	2302      	movs	r3, #2
 80045d0:	e021      	b.n	8004616 <HAL_ADC_Stop+0x5a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f022 0201 	bic.w	r2, r2, #1
 80045e8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d109      	bne.n	800460c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	f043 0201 	orr.w	r2, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b084      	sub	sp, #16
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800463a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800463e:	d113      	bne.n	8004668 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800464a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800464e:	d10b      	bne.n	8004668 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004654:	f043 0220 	orr.w	r2, r3, #32
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e063      	b.n	8004730 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004668:	f7ff fe62 	bl	8004330 <HAL_GetTick>
 800466c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800466e:	e021      	b.n	80046b4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004676:	d01d      	beq.n	80046b4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d007      	beq.n	800468e <HAL_ADC_PollForConversion+0x6c>
 800467e:	f7ff fe57 	bl	8004330 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d212      	bcs.n	80046b4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b02      	cmp	r3, #2
 800469a:	d00b      	beq.n	80046b4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a0:	f043 0204 	orr.w	r2, r3, #4
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e03d      	b.n	8004730 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d1d6      	bne.n	8004670 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f06f 0212 	mvn.w	r2, #18
 80046ca:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d123      	bne.n	800472e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d11f      	bne.n	800472e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d006      	beq.n	800470a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004706:	2b00      	cmp	r3, #0
 8004708:	d111      	bne.n	800472e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d105      	bne.n	800472e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004726:	f043 0201 	orr.w	r2, r3, #1
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800472e:	2300      	movs	r3, #0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004746:	4618      	mov	r0, r3
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
	...

08004754 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800475e:	2300      	movs	r3, #0
 8004760:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_ADC_ConfigChannel+0x1c>
 800476c:	2302      	movs	r3, #2
 800476e:	e105      	b.n	800497c <HAL_ADC_ConfigChannel+0x228>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b09      	cmp	r3, #9
 800477e:	d925      	bls.n	80047cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68d9      	ldr	r1, [r3, #12]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	b29b      	uxth	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	4613      	mov	r3, r2
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	4413      	add	r3, r2
 8004794:	3b1e      	subs	r3, #30
 8004796:	2207      	movs	r2, #7
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	43da      	mvns	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	400a      	ands	r2, r1
 80047a4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68d9      	ldr	r1, [r3, #12]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	4618      	mov	r0, r3
 80047b8:	4603      	mov	r3, r0
 80047ba:	005b      	lsls	r3, r3, #1
 80047bc:	4403      	add	r3, r0
 80047be:	3b1e      	subs	r3, #30
 80047c0:	409a      	lsls	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	60da      	str	r2, [r3, #12]
 80047ca:	e022      	b.n	8004812 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6919      	ldr	r1, [r3, #16]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	4613      	mov	r3, r2
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	4413      	add	r3, r2
 80047e0:	2207      	movs	r2, #7
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	43da      	mvns	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	400a      	ands	r2, r1
 80047ee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6919      	ldr	r1, [r3, #16]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	4618      	mov	r0, r3
 8004802:	4603      	mov	r3, r0
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	4403      	add	r3, r0
 8004808:	409a      	lsls	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b06      	cmp	r3, #6
 8004818:	d824      	bhi.n	8004864 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	3b05      	subs	r3, #5
 800482c:	221f      	movs	r2, #31
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	43da      	mvns	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	400a      	ands	r2, r1
 800483a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	b29b      	uxth	r3, r3
 8004848:	4618      	mov	r0, r3
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	4613      	mov	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4413      	add	r3, r2
 8004854:	3b05      	subs	r3, #5
 8004856:	fa00 f203 	lsl.w	r2, r0, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	635a      	str	r2, [r3, #52]	@ 0x34
 8004862:	e04c      	b.n	80048fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2b0c      	cmp	r3, #12
 800486a:	d824      	bhi.n	80048b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	4613      	mov	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	4413      	add	r3, r2
 800487c:	3b23      	subs	r3, #35	@ 0x23
 800487e:	221f      	movs	r2, #31
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	43da      	mvns	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	400a      	ands	r2, r1
 800488c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	b29b      	uxth	r3, r3
 800489a:	4618      	mov	r0, r3
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	3b23      	subs	r3, #35	@ 0x23
 80048a8:	fa00 f203 	lsl.w	r2, r0, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80048b4:	e023      	b.n	80048fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	3b41      	subs	r3, #65	@ 0x41
 80048c8:	221f      	movs	r2, #31
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	43da      	mvns	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	400a      	ands	r2, r1
 80048d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	4618      	mov	r0, r3
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	4613      	mov	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	3b41      	subs	r3, #65	@ 0x41
 80048f2:	fa00 f203 	lsl.w	r2, r0, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048fe:	4b22      	ldr	r3, [pc, #136]	@ (8004988 <HAL_ADC_ConfigChannel+0x234>)
 8004900:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a21      	ldr	r2, [pc, #132]	@ (800498c <HAL_ADC_ConfigChannel+0x238>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d109      	bne.n	8004920 <HAL_ADC_ConfigChannel+0x1cc>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b12      	cmp	r3, #18
 8004912:	d105      	bne.n	8004920 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a19      	ldr	r2, [pc, #100]	@ (800498c <HAL_ADC_ConfigChannel+0x238>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d123      	bne.n	8004972 <HAL_ADC_ConfigChannel+0x21e>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b10      	cmp	r3, #16
 8004930:	d003      	beq.n	800493a <HAL_ADC_ConfigChannel+0x1e6>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b11      	cmp	r3, #17
 8004938:	d11b      	bne.n	8004972 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b10      	cmp	r3, #16
 800494c:	d111      	bne.n	8004972 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800494e:	4b10      	ldr	r3, [pc, #64]	@ (8004990 <HAL_ADC_ConfigChannel+0x23c>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a10      	ldr	r2, [pc, #64]	@ (8004994 <HAL_ADC_ConfigChannel+0x240>)
 8004954:	fba2 2303 	umull	r2, r3, r2, r3
 8004958:	0c9a      	lsrs	r2, r3, #18
 800495a:	4613      	mov	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004964:	e002      	b.n	800496c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	3b01      	subs	r3, #1
 800496a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1f9      	bne.n	8004966 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	40012300 	.word	0x40012300
 800498c:	40012000 	.word	0x40012000
 8004990:	20000020 	.word	0x20000020
 8004994:	431bde83 	.word	0x431bde83

08004998 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049a0:	4b79      	ldr	r3, [pc, #484]	@ (8004b88 <ADC_Init+0x1f0>)
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	431a      	orrs	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6859      	ldr	r1, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	021a      	lsls	r2, r3, #8
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80049f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6859      	ldr	r1, [r3, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6899      	ldr	r1, [r3, #8]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2a:	4a58      	ldr	r2, [pc, #352]	@ (8004b8c <ADC_Init+0x1f4>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d022      	beq.n	8004a76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6899      	ldr	r1, [r3, #8]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004a60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6899      	ldr	r1, [r3, #8]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	609a      	str	r2, [r3, #8]
 8004a74:	e00f      	b.n	8004a96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004a84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004a94:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0202 	bic.w	r2, r2, #2
 8004aa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	6899      	ldr	r1, [r3, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	7e1b      	ldrb	r3, [r3, #24]
 8004ab0:	005a      	lsls	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01b      	beq.n	8004afc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ad2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004ae2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6859      	ldr	r1, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aee:	3b01      	subs	r3, #1
 8004af0:	035a      	lsls	r2, r3, #13
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
 8004afa:	e007      	b.n	8004b0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b0a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	051a      	lsls	r2, r3, #20
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004b40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6899      	ldr	r1, [r3, #8]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b4e:	025a      	lsls	r2, r3, #9
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689a      	ldr	r2, [r3, #8]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6899      	ldr	r1, [r3, #8]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	029a      	lsls	r2, r3, #10
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	609a      	str	r2, [r3, #8]
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	40012300 	.word	0x40012300
 8004b8c:	0f000001 	.word	0x0f000001

08004b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004bac:	4013      	ands	r3, r2
 8004bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bc2:	4a04      	ldr	r2, [pc, #16]	@ (8004bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	60d3      	str	r3, [r2, #12]
}
 8004bc8:	bf00      	nop
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	e000ed00 	.word	0xe000ed00

08004bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bdc:	4b04      	ldr	r3, [pc, #16]	@ (8004bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	0a1b      	lsrs	r3, r3, #8
 8004be2:	f003 0307 	and.w	r3, r3, #7
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	e000ed00 	.word	0xe000ed00

08004bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	db0b      	blt.n	8004c1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	f003 021f 	and.w	r2, r3, #31
 8004c0c:	4907      	ldr	r1, [pc, #28]	@ (8004c2c <__NVIC_EnableIRQ+0x38>)
 8004c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	2001      	movs	r0, #1
 8004c16:	fa00 f202 	lsl.w	r2, r0, r2
 8004c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	e000e100 	.word	0xe000e100

08004c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	6039      	str	r1, [r7, #0]
 8004c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	db0a      	blt.n	8004c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	490c      	ldr	r1, [pc, #48]	@ (8004c7c <__NVIC_SetPriority+0x4c>)
 8004c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4e:	0112      	lsls	r2, r2, #4
 8004c50:	b2d2      	uxtb	r2, r2
 8004c52:	440b      	add	r3, r1
 8004c54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c58:	e00a      	b.n	8004c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	4908      	ldr	r1, [pc, #32]	@ (8004c80 <__NVIC_SetPriority+0x50>)
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	3b04      	subs	r3, #4
 8004c68:	0112      	lsls	r2, r2, #4
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	761a      	strb	r2, [r3, #24]
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	e000e100 	.word	0xe000e100
 8004c80:	e000ed00 	.word	0xe000ed00

08004c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b089      	sub	sp, #36	@ 0x24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	f1c3 0307 	rsb	r3, r3, #7
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	bf28      	it	cs
 8004ca2:	2304      	movcs	r3, #4
 8004ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	3304      	adds	r3, #4
 8004caa:	2b06      	cmp	r3, #6
 8004cac:	d902      	bls.n	8004cb4 <NVIC_EncodePriority+0x30>
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	3b03      	subs	r3, #3
 8004cb2:	e000      	b.n	8004cb6 <NVIC_EncodePriority+0x32>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	43da      	mvns	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	401a      	ands	r2, r3
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd6:	43d9      	mvns	r1, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cdc:	4313      	orrs	r3, r2
         );
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3724      	adds	r7, #36	@ 0x24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
	...

08004cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cfc:	d301      	bcc.n	8004d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e00f      	b.n	8004d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d02:	4a0a      	ldr	r2, [pc, #40]	@ (8004d2c <SysTick_Config+0x40>)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d0a:	210f      	movs	r1, #15
 8004d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d10:	f7ff ff8e 	bl	8004c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d14:	4b05      	ldr	r3, [pc, #20]	@ (8004d2c <SysTick_Config+0x40>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d1a:	4b04      	ldr	r3, [pc, #16]	@ (8004d2c <SysTick_Config+0x40>)
 8004d1c:	2207      	movs	r2, #7
 8004d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	e000e010 	.word	0xe000e010

08004d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7ff ff29 	bl	8004b90 <__NVIC_SetPriorityGrouping>
}
 8004d3e:	bf00      	nop
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b086      	sub	sp, #24
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	60b9      	str	r1, [r7, #8]
 8004d50:	607a      	str	r2, [r7, #4]
 8004d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d58:	f7ff ff3e 	bl	8004bd8 <__NVIC_GetPriorityGrouping>
 8004d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	68b9      	ldr	r1, [r7, #8]
 8004d62:	6978      	ldr	r0, [r7, #20]
 8004d64:	f7ff ff8e 	bl	8004c84 <NVIC_EncodePriority>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d6e:	4611      	mov	r1, r2
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff ff5d 	bl	8004c30 <__NVIC_SetPriority>
}
 8004d76:	bf00      	nop
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b082      	sub	sp, #8
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	4603      	mov	r3, r0
 8004d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff ff31 	bl	8004bf4 <__NVIC_EnableIRQ>
}
 8004d92:	bf00      	nop
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b082      	sub	sp, #8
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff ffa2 	bl	8004cec <SysTick_Config>
 8004da8:	4603      	mov	r3, r0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b084      	sub	sp, #16
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dbe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004dc0:	f7ff fab6 	bl	8004330 <HAL_GetTick>
 8004dc4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d008      	beq.n	8004de4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2280      	movs	r2, #128	@ 0x80
 8004dd6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e052      	b.n	8004e8a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0216 	bic.w	r2, r2, #22
 8004df2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	695a      	ldr	r2, [r3, #20]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e02:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d103      	bne.n	8004e14 <HAL_DMA_Abort+0x62>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d007      	beq.n	8004e24 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0208 	bic.w	r2, r2, #8
 8004e22:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0201 	bic.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e34:	e013      	b.n	8004e5e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e36:	f7ff fa7b 	bl	8004330 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b05      	cmp	r3, #5
 8004e42:	d90c      	bls.n	8004e5e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2220      	movs	r2, #32
 8004e48:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2203      	movs	r2, #3
 8004e4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e015      	b.n	8004e8a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e4      	bne.n	8004e36 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e70:	223f      	movs	r2, #63	@ 0x3f
 8004e72:	409a      	lsls	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d004      	beq.n	8004eb0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2280      	movs	r2, #128	@ 0x80
 8004eaa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e00c      	b.n	8004eca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2205      	movs	r2, #5
 8004eb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0201 	bic.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	370c      	adds	r7, #12
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
	...

08004ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b089      	sub	sp, #36	@ 0x24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61fb      	str	r3, [r7, #28]
 8004ef2:	e16b      	b.n	80051cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4013      	ands	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	f040 815a 	bne.w	80051c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d005      	beq.n	8004f2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d130      	bne.n	8004f8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	2203      	movs	r2, #3
 8004f36:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3a:	43db      	mvns	r3, r3
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f60:	2201      	movs	r2, #1
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	fa02 f303 	lsl.w	r3, r2, r3
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	69ba      	ldr	r2, [r7, #24]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	091b      	lsrs	r3, r3, #4
 8004f76:	f003 0201 	and.w	r2, r3, #1
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f003 0303 	and.w	r3, r3, #3
 8004f94:	2b03      	cmp	r3, #3
 8004f96:	d017      	beq.n	8004fc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	2203      	movs	r2, #3
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	43db      	mvns	r3, r3
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	4013      	ands	r3, r2
 8004fae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f003 0303 	and.w	r3, r3, #3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d123      	bne.n	800501c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	08da      	lsrs	r2, r3, #3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3208      	adds	r2, #8
 8004fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	220f      	movs	r2, #15
 8004fec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff0:	43db      	mvns	r3, r3
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	f003 0307 	and.w	r3, r3, #7
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	4313      	orrs	r3, r2
 800500c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	08da      	lsrs	r2, r3, #3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3208      	adds	r2, #8
 8005016:	69b9      	ldr	r1, [r7, #24]
 8005018:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	2203      	movs	r2, #3
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	43db      	mvns	r3, r3
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	4013      	ands	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f003 0203 	and.w	r2, r3, #3
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	4313      	orrs	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005058:	2b00      	cmp	r3, #0
 800505a:	f000 80b4 	beq.w	80051c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800505e:	2300      	movs	r3, #0
 8005060:	60fb      	str	r3, [r7, #12]
 8005062:	4b60      	ldr	r3, [pc, #384]	@ (80051e4 <HAL_GPIO_Init+0x30c>)
 8005064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005066:	4a5f      	ldr	r2, [pc, #380]	@ (80051e4 <HAL_GPIO_Init+0x30c>)
 8005068:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800506c:	6453      	str	r3, [r2, #68]	@ 0x44
 800506e:	4b5d      	ldr	r3, [pc, #372]	@ (80051e4 <HAL_GPIO_Init+0x30c>)
 8005070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005072:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800507a:	4a5b      	ldr	r2, [pc, #364]	@ (80051e8 <HAL_GPIO_Init+0x310>)
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	089b      	lsrs	r3, r3, #2
 8005080:	3302      	adds	r3, #2
 8005082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005086:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	f003 0303 	and.w	r3, r3, #3
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	220f      	movs	r2, #15
 8005092:	fa02 f303 	lsl.w	r3, r2, r3
 8005096:	43db      	mvns	r3, r3
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	4013      	ands	r3, r2
 800509c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a52      	ldr	r2, [pc, #328]	@ (80051ec <HAL_GPIO_Init+0x314>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d02b      	beq.n	80050fe <HAL_GPIO_Init+0x226>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a51      	ldr	r2, [pc, #324]	@ (80051f0 <HAL_GPIO_Init+0x318>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d025      	beq.n	80050fa <HAL_GPIO_Init+0x222>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a50      	ldr	r2, [pc, #320]	@ (80051f4 <HAL_GPIO_Init+0x31c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d01f      	beq.n	80050f6 <HAL_GPIO_Init+0x21e>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a4f      	ldr	r2, [pc, #316]	@ (80051f8 <HAL_GPIO_Init+0x320>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d019      	beq.n	80050f2 <HAL_GPIO_Init+0x21a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a4e      	ldr	r2, [pc, #312]	@ (80051fc <HAL_GPIO_Init+0x324>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d013      	beq.n	80050ee <HAL_GPIO_Init+0x216>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a4d      	ldr	r2, [pc, #308]	@ (8005200 <HAL_GPIO_Init+0x328>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d00d      	beq.n	80050ea <HAL_GPIO_Init+0x212>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a4c      	ldr	r2, [pc, #304]	@ (8005204 <HAL_GPIO_Init+0x32c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d007      	beq.n	80050e6 <HAL_GPIO_Init+0x20e>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a4b      	ldr	r2, [pc, #300]	@ (8005208 <HAL_GPIO_Init+0x330>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d101      	bne.n	80050e2 <HAL_GPIO_Init+0x20a>
 80050de:	2307      	movs	r3, #7
 80050e0:	e00e      	b.n	8005100 <HAL_GPIO_Init+0x228>
 80050e2:	2308      	movs	r3, #8
 80050e4:	e00c      	b.n	8005100 <HAL_GPIO_Init+0x228>
 80050e6:	2306      	movs	r3, #6
 80050e8:	e00a      	b.n	8005100 <HAL_GPIO_Init+0x228>
 80050ea:	2305      	movs	r3, #5
 80050ec:	e008      	b.n	8005100 <HAL_GPIO_Init+0x228>
 80050ee:	2304      	movs	r3, #4
 80050f0:	e006      	b.n	8005100 <HAL_GPIO_Init+0x228>
 80050f2:	2303      	movs	r3, #3
 80050f4:	e004      	b.n	8005100 <HAL_GPIO_Init+0x228>
 80050f6:	2302      	movs	r3, #2
 80050f8:	e002      	b.n	8005100 <HAL_GPIO_Init+0x228>
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <HAL_GPIO_Init+0x228>
 80050fe:	2300      	movs	r3, #0
 8005100:	69fa      	ldr	r2, [r7, #28]
 8005102:	f002 0203 	and.w	r2, r2, #3
 8005106:	0092      	lsls	r2, r2, #2
 8005108:	4093      	lsls	r3, r2
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4313      	orrs	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005110:	4935      	ldr	r1, [pc, #212]	@ (80051e8 <HAL_GPIO_Init+0x310>)
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	089b      	lsrs	r3, r3, #2
 8005116:	3302      	adds	r3, #2
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800511e:	4b3b      	ldr	r3, [pc, #236]	@ (800520c <HAL_GPIO_Init+0x334>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	43db      	mvns	r3, r3
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	4013      	ands	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	4313      	orrs	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005142:	4a32      	ldr	r2, [pc, #200]	@ (800520c <HAL_GPIO_Init+0x334>)
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005148:	4b30      	ldr	r3, [pc, #192]	@ (800520c <HAL_GPIO_Init+0x334>)
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	43db      	mvns	r3, r3
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	4013      	ands	r3, r2
 8005156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800516c:	4a27      	ldr	r2, [pc, #156]	@ (800520c <HAL_GPIO_Init+0x334>)
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005172:	4b26      	ldr	r3, [pc, #152]	@ (800520c <HAL_GPIO_Init+0x334>)
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	43db      	mvns	r3, r3
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	4013      	ands	r3, r2
 8005180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	4313      	orrs	r3, r2
 8005194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005196:	4a1d      	ldr	r2, [pc, #116]	@ (800520c <HAL_GPIO_Init+0x334>)
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800519c:	4b1b      	ldr	r3, [pc, #108]	@ (800520c <HAL_GPIO_Init+0x334>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	43db      	mvns	r3, r3
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	4013      	ands	r3, r2
 80051aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	4313      	orrs	r3, r2
 80051be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051c0:	4a12      	ldr	r2, [pc, #72]	@ (800520c <HAL_GPIO_Init+0x334>)
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	3301      	adds	r3, #1
 80051ca:	61fb      	str	r3, [r7, #28]
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	2b0f      	cmp	r3, #15
 80051d0:	f67f ae90 	bls.w	8004ef4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop
 80051d8:	3724      	adds	r7, #36	@ 0x24
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40023800 	.word	0x40023800
 80051e8:	40013800 	.word	0x40013800
 80051ec:	40020000 	.word	0x40020000
 80051f0:	40020400 	.word	0x40020400
 80051f4:	40020800 	.word	0x40020800
 80051f8:	40020c00 	.word	0x40020c00
 80051fc:	40021000 	.word	0x40021000
 8005200:	40021400 	.word	0x40021400
 8005204:	40021800 	.word	0x40021800
 8005208:	40021c00 	.word	0x40021c00
 800520c:	40013c00 	.word	0x40013c00

08005210 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	460b      	mov	r3, r1
 800521a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	887b      	ldrh	r3, [r7, #2]
 8005222:	4013      	ands	r3, r2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005228:	2301      	movs	r3, #1
 800522a:	73fb      	strb	r3, [r7, #15]
 800522c:	e001      	b.n	8005232 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800522e:	2300      	movs	r3, #0
 8005230:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005232:	7bfb      	ldrb	r3, [r7, #15]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
 8005248:	460b      	mov	r3, r1
 800524a:	807b      	strh	r3, [r7, #2]
 800524c:	4613      	mov	r3, r2
 800524e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005250:	787b      	ldrb	r3, [r7, #1]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d003      	beq.n	800525e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005256:	887a      	ldrh	r2, [r7, #2]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800525c:	e003      	b.n	8005266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800525e:	887b      	ldrh	r3, [r7, #2]
 8005260:	041a      	lsls	r2, r3, #16
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	619a      	str	r2, [r3, #24]
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005272:	b480      	push	{r7}
 8005274:	b085      	sub	sp, #20
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	460b      	mov	r3, r1
 800527c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005284:	887a      	ldrh	r2, [r7, #2]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4013      	ands	r3, r2
 800528a:	041a      	lsls	r2, r3, #16
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	43d9      	mvns	r1, r3
 8005290:	887b      	ldrh	r3, [r7, #2]
 8005292:	400b      	ands	r3, r1
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	619a      	str	r2, [r3, #24]
}
 800529a:	bf00      	nop
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
	...

080052a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e12b      	b.n	8005512 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d106      	bne.n	80052d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7fe fc6c 	bl	8003bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2224      	movs	r2, #36	@ 0x24
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0201 	bic.w	r2, r2, #1
 80052ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800530a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800530c:	f001 fc48 	bl	8006ba0 <HAL_RCC_GetPCLK1Freq>
 8005310:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	4a81      	ldr	r2, [pc, #516]	@ (800551c <HAL_I2C_Init+0x274>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d807      	bhi.n	800532c <HAL_I2C_Init+0x84>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4a80      	ldr	r2, [pc, #512]	@ (8005520 <HAL_I2C_Init+0x278>)
 8005320:	4293      	cmp	r3, r2
 8005322:	bf94      	ite	ls
 8005324:	2301      	movls	r3, #1
 8005326:	2300      	movhi	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	e006      	b.n	800533a <HAL_I2C_Init+0x92>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4a7d      	ldr	r2, [pc, #500]	@ (8005524 <HAL_I2C_Init+0x27c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	bf94      	ite	ls
 8005334:	2301      	movls	r3, #1
 8005336:	2300      	movhi	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e0e7      	b.n	8005512 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4a78      	ldr	r2, [pc, #480]	@ (8005528 <HAL_I2C_Init+0x280>)
 8005346:	fba2 2303 	umull	r2, r3, r2, r3
 800534a:	0c9b      	lsrs	r3, r3, #18
 800534c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	430a      	orrs	r2, r1
 8005360:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	4a6a      	ldr	r2, [pc, #424]	@ (800551c <HAL_I2C_Init+0x274>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d802      	bhi.n	800537c <HAL_I2C_Init+0xd4>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	3301      	adds	r3, #1
 800537a:	e009      	b.n	8005390 <HAL_I2C_Init+0xe8>
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005382:	fb02 f303 	mul.w	r3, r2, r3
 8005386:	4a69      	ldr	r2, [pc, #420]	@ (800552c <HAL_I2C_Init+0x284>)
 8005388:	fba2 2303 	umull	r2, r3, r2, r3
 800538c:	099b      	lsrs	r3, r3, #6
 800538e:	3301      	adds	r3, #1
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6812      	ldr	r2, [r2, #0]
 8005394:	430b      	orrs	r3, r1
 8005396:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80053a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	495c      	ldr	r1, [pc, #368]	@ (800551c <HAL_I2C_Init+0x274>)
 80053ac:	428b      	cmp	r3, r1
 80053ae:	d819      	bhi.n	80053e4 <HAL_I2C_Init+0x13c>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	1e59      	subs	r1, r3, #1
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80053be:	1c59      	adds	r1, r3, #1
 80053c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80053c4:	400b      	ands	r3, r1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <HAL_I2C_Init+0x138>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	1e59      	subs	r1, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	005b      	lsls	r3, r3, #1
 80053d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80053d8:	3301      	adds	r3, #1
 80053da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053de:	e051      	b.n	8005484 <HAL_I2C_Init+0x1dc>
 80053e0:	2304      	movs	r3, #4
 80053e2:	e04f      	b.n	8005484 <HAL_I2C_Init+0x1dc>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d111      	bne.n	8005410 <HAL_I2C_Init+0x168>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	1e58      	subs	r0, r3, #1
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6859      	ldr	r1, [r3, #4]
 80053f4:	460b      	mov	r3, r1
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	440b      	add	r3, r1
 80053fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80053fe:	3301      	adds	r3, #1
 8005400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005404:	2b00      	cmp	r3, #0
 8005406:	bf0c      	ite	eq
 8005408:	2301      	moveq	r3, #1
 800540a:	2300      	movne	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	e012      	b.n	8005436 <HAL_I2C_Init+0x18e>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	1e58      	subs	r0, r3, #1
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6859      	ldr	r1, [r3, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	440b      	add	r3, r1
 800541e:	0099      	lsls	r1, r3, #2
 8005420:	440b      	add	r3, r1
 8005422:	fbb0 f3f3 	udiv	r3, r0, r3
 8005426:	3301      	adds	r3, #1
 8005428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800542c:	2b00      	cmp	r3, #0
 800542e:	bf0c      	ite	eq
 8005430:	2301      	moveq	r3, #1
 8005432:	2300      	movne	r3, #0
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <HAL_I2C_Init+0x196>
 800543a:	2301      	movs	r3, #1
 800543c:	e022      	b.n	8005484 <HAL_I2C_Init+0x1dc>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10e      	bne.n	8005464 <HAL_I2C_Init+0x1bc>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	1e58      	subs	r0, r3, #1
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6859      	ldr	r1, [r3, #4]
 800544e:	460b      	mov	r3, r1
 8005450:	005b      	lsls	r3, r3, #1
 8005452:	440b      	add	r3, r1
 8005454:	fbb0 f3f3 	udiv	r3, r0, r3
 8005458:	3301      	adds	r3, #1
 800545a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800545e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005462:	e00f      	b.n	8005484 <HAL_I2C_Init+0x1dc>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	1e58      	subs	r0, r3, #1
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6859      	ldr	r1, [r3, #4]
 800546c:	460b      	mov	r3, r1
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	440b      	add	r3, r1
 8005472:	0099      	lsls	r1, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	fbb0 f3f3 	udiv	r3, r0, r3
 800547a:	3301      	adds	r3, #1
 800547c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005480:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005484:	6879      	ldr	r1, [r7, #4]
 8005486:	6809      	ldr	r1, [r1, #0]
 8005488:	4313      	orrs	r3, r2
 800548a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	69da      	ldr	r2, [r3, #28]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80054b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	6911      	ldr	r1, [r2, #16]
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	68d2      	ldr	r2, [r2, #12]
 80054be:	4311      	orrs	r1, r2
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6812      	ldr	r2, [r2, #0]
 80054c4:	430b      	orrs	r3, r1
 80054c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695a      	ldr	r2, [r3, #20]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0201 	orr.w	r2, r2, #1
 80054f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	000186a0 	.word	0x000186a0
 8005520:	001e847f 	.word	0x001e847f
 8005524:	003d08ff 	.word	0x003d08ff
 8005528:	431bde83 	.word	0x431bde83
 800552c:	10624dd3 	.word	0x10624dd3

08005530 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af02      	add	r7, sp, #8
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	4608      	mov	r0, r1
 800553a:	4611      	mov	r1, r2
 800553c:	461a      	mov	r2, r3
 800553e:	4603      	mov	r3, r0
 8005540:	817b      	strh	r3, [r7, #10]
 8005542:	460b      	mov	r3, r1
 8005544:	813b      	strh	r3, [r7, #8]
 8005546:	4613      	mov	r3, r2
 8005548:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800554a:	f7fe fef1 	bl	8004330 <HAL_GetTick>
 800554e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005556:	b2db      	uxtb	r3, r3
 8005558:	2b20      	cmp	r3, #32
 800555a:	f040 80d9 	bne.w	8005710 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	2319      	movs	r3, #25
 8005564:	2201      	movs	r2, #1
 8005566:	496d      	ldr	r1, [pc, #436]	@ (800571c <HAL_I2C_Mem_Write+0x1ec>)
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 fc8b 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005574:	2302      	movs	r3, #2
 8005576:	e0cc      	b.n	8005712 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800557e:	2b01      	cmp	r3, #1
 8005580:	d101      	bne.n	8005586 <HAL_I2C_Mem_Write+0x56>
 8005582:	2302      	movs	r3, #2
 8005584:	e0c5      	b.n	8005712 <HAL_I2C_Mem_Write+0x1e2>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b01      	cmp	r3, #1
 800559a:	d007      	beq.n	80055ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0201 	orr.w	r2, r2, #1
 80055aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2221      	movs	r2, #33	@ 0x21
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2240      	movs	r2, #64	@ 0x40
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a3a      	ldr	r2, [r7, #32]
 80055d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80055dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4a4d      	ldr	r2, [pc, #308]	@ (8005720 <HAL_I2C_Mem_Write+0x1f0>)
 80055ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055ee:	88f8      	ldrh	r0, [r7, #6]
 80055f0:	893a      	ldrh	r2, [r7, #8]
 80055f2:	8979      	ldrh	r1, [r7, #10]
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	9301      	str	r3, [sp, #4]
 80055f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	4603      	mov	r3, r0
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f000 fac2 	bl	8005b88 <I2C_RequestMemoryWrite>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d052      	beq.n	80056b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e081      	b.n	8005712 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 fd50 	bl	80060b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00d      	beq.n	800563a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005622:	2b04      	cmp	r3, #4
 8005624:	d107      	bne.n	8005636 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005634:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e06b      	b.n	8005712 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563e:	781a      	ldrb	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564a:	1c5a      	adds	r2, r3, #1
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005654:	3b01      	subs	r3, #1
 8005656:	b29a      	uxth	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005660:	b29b      	uxth	r3, r3
 8005662:	3b01      	subs	r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	695b      	ldr	r3, [r3, #20]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b04      	cmp	r3, #4
 8005676:	d11b      	bne.n	80056b0 <HAL_I2C_Mem_Write+0x180>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800567c:	2b00      	cmp	r3, #0
 800567e:	d017      	beq.n	80056b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005684:	781a      	ldrb	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800569a:	3b01      	subs	r3, #1
 800569c:	b29a      	uxth	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	3b01      	subs	r3, #1
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1aa      	bne.n	800560e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 fd43 	bl	8006148 <I2C_WaitOnBTFFlagUntilTimeout>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00d      	beq.n	80056e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	d107      	bne.n	80056e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e016      	b.n	8005712 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2220      	movs	r2, #32
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800570c:	2300      	movs	r3, #0
 800570e:	e000      	b.n	8005712 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005710:	2302      	movs	r3, #2
  }
}
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	00100002 	.word	0x00100002
 8005720:	ffff0000 	.word	0xffff0000

08005724 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08c      	sub	sp, #48	@ 0x30
 8005728:	af02      	add	r7, sp, #8
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	4608      	mov	r0, r1
 800572e:	4611      	mov	r1, r2
 8005730:	461a      	mov	r2, r3
 8005732:	4603      	mov	r3, r0
 8005734:	817b      	strh	r3, [r7, #10]
 8005736:	460b      	mov	r3, r1
 8005738:	813b      	strh	r3, [r7, #8]
 800573a:	4613      	mov	r3, r2
 800573c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800573e:	f7fe fdf7 	bl	8004330 <HAL_GetTick>
 8005742:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b20      	cmp	r3, #32
 800574e:	f040 8214 	bne.w	8005b7a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	2319      	movs	r3, #25
 8005758:	2201      	movs	r2, #1
 800575a:	497b      	ldr	r1, [pc, #492]	@ (8005948 <HAL_I2C_Mem_Read+0x224>)
 800575c:	68f8      	ldr	r0, [r7, #12]
 800575e:	f000 fb91 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005768:	2302      	movs	r3, #2
 800576a:	e207      	b.n	8005b7c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005772:	2b01      	cmp	r3, #1
 8005774:	d101      	bne.n	800577a <HAL_I2C_Mem_Read+0x56>
 8005776:	2302      	movs	r3, #2
 8005778:	e200      	b.n	8005b7c <HAL_I2C_Mem_Read+0x458>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b01      	cmp	r3, #1
 800578e:	d007      	beq.n	80057a0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0201 	orr.w	r2, r2, #1
 800579e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2222      	movs	r2, #34	@ 0x22
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2240      	movs	r2, #64	@ 0x40
 80057bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80057d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	4a5b      	ldr	r2, [pc, #364]	@ (800594c <HAL_I2C_Mem_Read+0x228>)
 80057e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057e2:	88f8      	ldrh	r0, [r7, #6]
 80057e4:	893a      	ldrh	r2, [r7, #8]
 80057e6:	8979      	ldrh	r1, [r7, #10]
 80057e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ea:	9301      	str	r3, [sp, #4]
 80057ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	4603      	mov	r3, r0
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 fa5e 	bl	8005cb4 <I2C_RequestMemoryRead>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e1bc      	b.n	8005b7c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005806:	2b00      	cmp	r3, #0
 8005808:	d113      	bne.n	8005832 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800580a:	2300      	movs	r3, #0
 800580c:	623b      	str	r3, [r7, #32]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	623b      	str	r3, [r7, #32]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	623b      	str	r3, [r7, #32]
 800581e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	e190      	b.n	8005b54 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005836:	2b01      	cmp	r3, #1
 8005838:	d11b      	bne.n	8005872 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005848:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800584a:	2300      	movs	r3, #0
 800584c:	61fb      	str	r3, [r7, #28]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	61fb      	str	r3, [r7, #28]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	61fb      	str	r3, [r7, #28]
 800585e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	e170      	b.n	8005b54 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005876:	2b02      	cmp	r3, #2
 8005878:	d11b      	bne.n	80058b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005888:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005898:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800589a:	2300      	movs	r3, #0
 800589c:	61bb      	str	r3, [r7, #24]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
 80058a4:	61bb      	str	r3, [r7, #24]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	61bb      	str	r3, [r7, #24]
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	e150      	b.n	8005b54 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058b2:	2300      	movs	r3, #0
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	617b      	str	r3, [r7, #20]
 80058c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80058c8:	e144      	b.n	8005b54 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	f200 80f1 	bhi.w	8005ab6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d123      	bne.n	8005924 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 fc79 	bl	80061d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e145      	b.n	8005b7c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	691a      	ldr	r2, [r3, #16]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005902:	1c5a      	adds	r2, r3, #1
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800590c:	3b01      	subs	r3, #1
 800590e:	b29a      	uxth	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005918:	b29b      	uxth	r3, r3
 800591a:	3b01      	subs	r3, #1
 800591c:	b29a      	uxth	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005922:	e117      	b.n	8005b54 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005928:	2b02      	cmp	r3, #2
 800592a:	d14e      	bne.n	80059ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800592c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005932:	2200      	movs	r2, #0
 8005934:	4906      	ldr	r1, [pc, #24]	@ (8005950 <HAL_I2C_Mem_Read+0x22c>)
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 faa4 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d008      	beq.n	8005954 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e11a      	b.n	8005b7c <HAL_I2C_Mem_Read+0x458>
 8005946:	bf00      	nop
 8005948:	00100002 	.word	0x00100002
 800594c:	ffff0000 	.word	0xffff0000
 8005950:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005962:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691a      	ldr	r2, [r3, #16]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005976:	1c5a      	adds	r2, r3, #1
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005980:	3b01      	subs	r3, #1
 8005982:	b29a      	uxth	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800598c:	b29b      	uxth	r3, r3
 800598e:	3b01      	subs	r3, #1
 8005990:	b29a      	uxth	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059be:	b29b      	uxth	r3, r3
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80059c8:	e0c4      	b.n	8005b54 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d0:	2200      	movs	r2, #0
 80059d2:	496c      	ldr	r1, [pc, #432]	@ (8005b84 <HAL_I2C_Mem_Read+0x460>)
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 fa55 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e0cb      	b.n	8005b7c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691a      	ldr	r2, [r3, #16]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	4955      	ldr	r1, [pc, #340]	@ (8005b84 <HAL_I2C_Mem_Read+0x460>)
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 fa27 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d001      	beq.n	8005a40 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e09d      	b.n	8005b7c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	691a      	ldr	r2, [r3, #16]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	691a      	ldr	r2, [r3, #16]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	3b01      	subs	r3, #1
 8005aae:	b29a      	uxth	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ab4:	e04e      	b.n	8005b54 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ab6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ab8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f000 fb8c 	bl	80061d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e058      	b.n	8005b7c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	691a      	ldr	r2, [r3, #16]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad4:	b2d2      	uxtb	r2, r2
 8005ad6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005adc:	1c5a      	adds	r2, r3, #1
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	3b01      	subs	r3, #1
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	f003 0304 	and.w	r3, r3, #4
 8005b06:	2b04      	cmp	r3, #4
 8005b08:	d124      	bne.n	8005b54 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d107      	bne.n	8005b22 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b20:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	691a      	ldr	r2, [r3, #16]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2c:	b2d2      	uxtb	r2, r2
 8005b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f47f aeb6 	bne.w	80058ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2220      	movs	r2, #32
 8005b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	e000      	b.n	8005b7c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005b7a:	2302      	movs	r3, #2
  }
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3728      	adds	r7, #40	@ 0x28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	00010004 	.word	0x00010004

08005b88 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af02      	add	r7, sp, #8
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	4608      	mov	r0, r1
 8005b92:	4611      	mov	r1, r2
 8005b94:	461a      	mov	r2, r3
 8005b96:	4603      	mov	r3, r0
 8005b98:	817b      	strh	r3, [r7, #10]
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	813b      	strh	r3, [r7, #8]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bb0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 f960 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00d      	beq.n	8005be6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bd8:	d103      	bne.n	8005be2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005be0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e05f      	b.n	8005ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005be6:	897b      	ldrh	r3, [r7, #10]
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	461a      	mov	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005bf4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf8:	6a3a      	ldr	r2, [r7, #32]
 8005bfa:	492d      	ldr	r1, [pc, #180]	@ (8005cb0 <I2C_RequestMemoryWrite+0x128>)
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f9bb 	bl	8005f78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d001      	beq.n	8005c0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e04c      	b.n	8005ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	617b      	str	r3, [r7, #20]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699b      	ldr	r3, [r3, #24]
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c24:	6a39      	ldr	r1, [r7, #32]
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 fa46 	bl	80060b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00d      	beq.n	8005c4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d107      	bne.n	8005c4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e02b      	b.n	8005ca6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c4e:	88fb      	ldrh	r3, [r7, #6]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d105      	bne.n	8005c60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c54:	893b      	ldrh	r3, [r7, #8]
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	611a      	str	r2, [r3, #16]
 8005c5e:	e021      	b.n	8005ca4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c60:	893b      	ldrh	r3, [r7, #8]
 8005c62:	0a1b      	lsrs	r3, r3, #8
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c70:	6a39      	ldr	r1, [r7, #32]
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 fa20 	bl	80060b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00d      	beq.n	8005c9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d107      	bne.n	8005c96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e005      	b.n	8005ca6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c9a:	893b      	ldrh	r3, [r7, #8]
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	00010002 	.word	0x00010002

08005cb4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af02      	add	r7, sp, #8
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	4608      	mov	r0, r1
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	817b      	strh	r3, [r7, #10]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	813b      	strh	r3, [r7, #8]
 8005cca:	4613      	mov	r3, r2
 8005ccc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005cdc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 f8c2 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00d      	beq.n	8005d22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d14:	d103      	bne.n	8005d1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e0aa      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d22:	897b      	ldrh	r3, [r7, #10]
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	461a      	mov	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d34:	6a3a      	ldr	r2, [r7, #32]
 8005d36:	4952      	ldr	r1, [pc, #328]	@ (8005e80 <I2C_RequestMemoryRead+0x1cc>)
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 f91d 	bl	8005f78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e097      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d48:	2300      	movs	r3, #0
 8005d4a:	617b      	str	r3, [r7, #20]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	617b      	str	r3, [r7, #20]
 8005d5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d60:	6a39      	ldr	r1, [r7, #32]
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 f9a8 	bl	80060b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00d      	beq.n	8005d8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	d107      	bne.n	8005d86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e076      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d8a:	88fb      	ldrh	r3, [r7, #6]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d105      	bne.n	8005d9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d90:	893b      	ldrh	r3, [r7, #8]
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	611a      	str	r2, [r3, #16]
 8005d9a:	e021      	b.n	8005de0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d9c:	893b      	ldrh	r3, [r7, #8]
 8005d9e:	0a1b      	lsrs	r3, r3, #8
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005daa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dac:	6a39      	ldr	r1, [r7, #32]
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 f982 	bl	80060b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00d      	beq.n	8005dd6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d107      	bne.n	8005dd2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e050      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dd6:	893b      	ldrh	r3, [r7, #8]
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005de0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005de2:	6a39      	ldr	r1, [r7, #32]
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 f967 	bl	80060b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00d      	beq.n	8005e0c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df4:	2b04      	cmp	r3, #4
 8005df6:	d107      	bne.n	8005e08 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e06:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e035      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e1a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	6a3b      	ldr	r3, [r7, #32]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 f82b 	bl	8005e84 <I2C_WaitOnFlagUntilTimeout>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00d      	beq.n	8005e50 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e42:	d103      	bne.n	8005e4c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e013      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e50:	897b      	ldrh	r3, [r7, #10]
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	f043 0301 	orr.w	r3, r3, #1
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e62:	6a3a      	ldr	r2, [r7, #32]
 8005e64:	4906      	ldr	r1, [pc, #24]	@ (8005e80 <I2C_RequestMemoryRead+0x1cc>)
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 f886 	bl	8005f78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e000      	b.n	8005e78 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	00010002 	.word	0x00010002

08005e84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	603b      	str	r3, [r7, #0]
 8005e90:	4613      	mov	r3, r2
 8005e92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e94:	e048      	b.n	8005f28 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9c:	d044      	beq.n	8005f28 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e9e:	f7fe fa47 	bl	8004330 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d302      	bcc.n	8005eb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d139      	bne.n	8005f28 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	0c1b      	lsrs	r3, r3, #16
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d10d      	bne.n	8005eda <I2C_WaitOnFlagUntilTimeout+0x56>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	43da      	mvns	r2, r3
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	4013      	ands	r3, r2
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	bf0c      	ite	eq
 8005ed0:	2301      	moveq	r3, #1
 8005ed2:	2300      	movne	r3, #0
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	e00c      	b.n	8005ef4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	43da      	mvns	r2, r3
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	bf0c      	ite	eq
 8005eec:	2301      	moveq	r3, #1
 8005eee:	2300      	movne	r3, #0
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	79fb      	ldrb	r3, [r7, #7]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d116      	bne.n	8005f28 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f14:	f043 0220 	orr.w	r2, r3, #32
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e023      	b.n	8005f70 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	0c1b      	lsrs	r3, r3, #16
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d10d      	bne.n	8005f4e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	43da      	mvns	r2, r3
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	bf0c      	ite	eq
 8005f44:	2301      	moveq	r3, #1
 8005f46:	2300      	movne	r3, #0
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	e00c      	b.n	8005f68 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	43da      	mvns	r2, r3
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	4013      	ands	r3, r2
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	bf0c      	ite	eq
 8005f60:	2301      	moveq	r3, #1
 8005f62:	2300      	movne	r3, #0
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	461a      	mov	r2, r3
 8005f68:	79fb      	ldrb	r3, [r7, #7]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d093      	beq.n	8005e96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
 8005f84:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f86:	e071      	b.n	800606c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f96:	d123      	bne.n	8005fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fa6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005fb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fcc:	f043 0204 	orr.w	r2, r3, #4
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e067      	b.n	80060b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe6:	d041      	beq.n	800606c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fe8:	f7fe f9a2 	bl	8004330 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d302      	bcc.n	8005ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d136      	bne.n	800606c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	0c1b      	lsrs	r3, r3, #16
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b01      	cmp	r3, #1
 8006006:	d10c      	bne.n	8006022 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	43da      	mvns	r2, r3
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4013      	ands	r3, r2
 8006014:	b29b      	uxth	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	bf14      	ite	ne
 800601a:	2301      	movne	r3, #1
 800601c:	2300      	moveq	r3, #0
 800601e:	b2db      	uxtb	r3, r3
 8006020:	e00b      	b.n	800603a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	43da      	mvns	r2, r3
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	4013      	ands	r3, r2
 800602e:	b29b      	uxth	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	bf14      	ite	ne
 8006034:	2301      	movne	r3, #1
 8006036:	2300      	moveq	r3, #0
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d016      	beq.n	800606c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2220      	movs	r2, #32
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006058:	f043 0220 	orr.w	r2, r3, #32
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e021      	b.n	80060b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	0c1b      	lsrs	r3, r3, #16
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b01      	cmp	r3, #1
 8006074:	d10c      	bne.n	8006090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	43da      	mvns	r2, r3
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	4013      	ands	r3, r2
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	bf14      	ite	ne
 8006088:	2301      	movne	r3, #1
 800608a:	2300      	moveq	r3, #0
 800608c:	b2db      	uxtb	r3, r3
 800608e:	e00b      	b.n	80060a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	43da      	mvns	r2, r3
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	4013      	ands	r3, r2
 800609c:	b29b      	uxth	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	bf14      	ite	ne
 80060a2:	2301      	movne	r3, #1
 80060a4:	2300      	moveq	r3, #0
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f47f af6d 	bne.w	8005f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060c4:	e034      	b.n	8006130 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 f8e3 	bl	8006292 <I2C_IsAcknowledgeFailed>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e034      	b.n	8006140 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060dc:	d028      	beq.n	8006130 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060de:	f7fe f927 	bl	8004330 <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d302      	bcc.n	80060f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d11d      	bne.n	8006130 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060fe:	2b80      	cmp	r3, #128	@ 0x80
 8006100:	d016      	beq.n	8006130 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2220      	movs	r2, #32
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611c:	f043 0220 	orr.w	r2, r3, #32
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e007      	b.n	8006140 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800613a:	2b80      	cmp	r3, #128	@ 0x80
 800613c:	d1c3      	bne.n	80060c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006154:	e034      	b.n	80061c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f000 f89b 	bl	8006292 <I2C_IsAcknowledgeFailed>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e034      	b.n	80061d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616c:	d028      	beq.n	80061c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800616e:	f7fe f8df 	bl	8004330 <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	429a      	cmp	r2, r3
 800617c:	d302      	bcc.n	8006184 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d11d      	bne.n	80061c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	f003 0304 	and.w	r3, r3, #4
 800618e:	2b04      	cmp	r3, #4
 8006190:	d016      	beq.n	80061c0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2220      	movs	r2, #32
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ac:	f043 0220 	orr.w	r2, r3, #32
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e007      	b.n	80061d0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	f003 0304 	and.w	r3, r3, #4
 80061ca:	2b04      	cmp	r3, #4
 80061cc:	d1c3      	bne.n	8006156 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061e4:	e049      	b.n	800627a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	f003 0310 	and.w	r3, r3, #16
 80061f0:	2b10      	cmp	r3, #16
 80061f2:	d119      	bne.n	8006228 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f06f 0210 	mvn.w	r2, #16
 80061fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2220      	movs	r2, #32
 8006208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e030      	b.n	800628a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006228:	f7fe f882 	bl	8004330 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	429a      	cmp	r2, r3
 8006236:	d302      	bcc.n	800623e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d11d      	bne.n	800627a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006248:	2b40      	cmp	r3, #64	@ 0x40
 800624a:	d016      	beq.n	800627a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2220      	movs	r2, #32
 8006256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006266:	f043 0220 	orr.w	r2, r3, #32
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e007      	b.n	800628a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	695b      	ldr	r3, [r3, #20]
 8006280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006284:	2b40      	cmp	r3, #64	@ 0x40
 8006286:	d1ae      	bne.n	80061e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006292:	b480      	push	{r7}
 8006294:	b083      	sub	sp, #12
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062a8:	d11b      	bne.n	80062e2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80062b2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2220      	movs	r2, #32
 80062be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ce:	f043 0204 	orr.w	r2, r3, #4
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e000      	b.n	80062e4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80062f6:	4b06      	ldr	r3, [pc, #24]	@ (8006310 <HAL_PWR_EnableBkUpAccess+0x20>)
 80062f8:	2201      	movs	r2, #1
 80062fa:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80062fc:	4b05      	ldr	r3, [pc, #20]	@ (8006314 <HAL_PWR_EnableBkUpAccess+0x24>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006302:	687b      	ldr	r3, [r7, #4]
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	420e0020 	.word	0x420e0020
 8006314:	40007000 	.word	0x40007000

08006318 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800631e:	4b06      	ldr	r3, [pc, #24]	@ (8006338 <HAL_PWR_DisableBkUpAccess+0x20>)
 8006320:	2200      	movs	r2, #0
 8006322:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006324:	4b05      	ldr	r3, [pc, #20]	@ (800633c <HAL_PWR_DisableBkUpAccess+0x24>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800632a:	687b      	ldr	r3, [r7, #4]
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	420e0020 	.word	0x420e0020
 800633c:	40007000 	.word	0x40007000

08006340 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e267      	b.n	8006822 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d075      	beq.n	800644a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800635e:	4b88      	ldr	r3, [pc, #544]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f003 030c 	and.w	r3, r3, #12
 8006366:	2b04      	cmp	r3, #4
 8006368:	d00c      	beq.n	8006384 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800636a:	4b85      	ldr	r3, [pc, #532]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006372:	2b08      	cmp	r3, #8
 8006374:	d112      	bne.n	800639c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006376:	4b82      	ldr	r3, [pc, #520]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800637e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006382:	d10b      	bne.n	800639c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006384:	4b7e      	ldr	r3, [pc, #504]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d05b      	beq.n	8006448 <HAL_RCC_OscConfig+0x108>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d157      	bne.n	8006448 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	e242      	b.n	8006822 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063a4:	d106      	bne.n	80063b4 <HAL_RCC_OscConfig+0x74>
 80063a6:	4b76      	ldr	r3, [pc, #472]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a75      	ldr	r2, [pc, #468]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 80063ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063b0:	6013      	str	r3, [r2, #0]
 80063b2:	e01d      	b.n	80063f0 <HAL_RCC_OscConfig+0xb0>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063bc:	d10c      	bne.n	80063d8 <HAL_RCC_OscConfig+0x98>
 80063be:	4b70      	ldr	r3, [pc, #448]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a6f      	ldr	r2, [pc, #444]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 80063c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	4b6d      	ldr	r3, [pc, #436]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a6c      	ldr	r2, [pc, #432]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 80063d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063d4:	6013      	str	r3, [r2, #0]
 80063d6:	e00b      	b.n	80063f0 <HAL_RCC_OscConfig+0xb0>
 80063d8:	4b69      	ldr	r3, [pc, #420]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a68      	ldr	r2, [pc, #416]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 80063de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063e2:	6013      	str	r3, [r2, #0]
 80063e4:	4b66      	ldr	r3, [pc, #408]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a65      	ldr	r2, [pc, #404]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 80063ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d013      	beq.n	8006420 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f8:	f7fd ff9a 	bl	8004330 <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006400:	f7fd ff96 	bl	8004330 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b64      	cmp	r3, #100	@ 0x64
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e207      	b.n	8006822 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006412:	4b5b      	ldr	r3, [pc, #364]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0f0      	beq.n	8006400 <HAL_RCC_OscConfig+0xc0>
 800641e:	e014      	b.n	800644a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006420:	f7fd ff86 	bl	8004330 <HAL_GetTick>
 8006424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006426:	e008      	b.n	800643a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006428:	f7fd ff82 	bl	8004330 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b64      	cmp	r3, #100	@ 0x64
 8006434:	d901      	bls.n	800643a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e1f3      	b.n	8006822 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800643a:	4b51      	ldr	r3, [pc, #324]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1f0      	bne.n	8006428 <HAL_RCC_OscConfig+0xe8>
 8006446:	e000      	b.n	800644a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d063      	beq.n	800651e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006456:	4b4a      	ldr	r3, [pc, #296]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 030c 	and.w	r3, r3, #12
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00b      	beq.n	800647a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006462:	4b47      	ldr	r3, [pc, #284]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800646a:	2b08      	cmp	r3, #8
 800646c:	d11c      	bne.n	80064a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800646e:	4b44      	ldr	r3, [pc, #272]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d116      	bne.n	80064a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800647a:	4b41      	ldr	r3, [pc, #260]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d005      	beq.n	8006492 <HAL_RCC_OscConfig+0x152>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d001      	beq.n	8006492 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e1c7      	b.n	8006822 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006492:	4b3b      	ldr	r3, [pc, #236]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	00db      	lsls	r3, r3, #3
 80064a0:	4937      	ldr	r1, [pc, #220]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064a6:	e03a      	b.n	800651e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d020      	beq.n	80064f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064b0:	4b34      	ldr	r3, [pc, #208]	@ (8006584 <HAL_RCC_OscConfig+0x244>)
 80064b2:	2201      	movs	r2, #1
 80064b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b6:	f7fd ff3b 	bl	8004330 <HAL_GetTick>
 80064ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064bc:	e008      	b.n	80064d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064be:	f7fd ff37 	bl	8004330 <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d901      	bls.n	80064d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80064cc:	2303      	movs	r3, #3
 80064ce:	e1a8      	b.n	8006822 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064d0:	4b2b      	ldr	r3, [pc, #172]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d0f0      	beq.n	80064be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064dc:	4b28      	ldr	r3, [pc, #160]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	00db      	lsls	r3, r3, #3
 80064ea:	4925      	ldr	r1, [pc, #148]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	600b      	str	r3, [r1, #0]
 80064f0:	e015      	b.n	800651e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064f2:	4b24      	ldr	r3, [pc, #144]	@ (8006584 <HAL_RCC_OscConfig+0x244>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f8:	f7fd ff1a 	bl	8004330 <HAL_GetTick>
 80064fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064fe:	e008      	b.n	8006512 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006500:	f7fd ff16 	bl	8004330 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b02      	cmp	r3, #2
 800650c:	d901      	bls.n	8006512 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e187      	b.n	8006822 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006512:	4b1b      	ldr	r3, [pc, #108]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1f0      	bne.n	8006500 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0308 	and.w	r3, r3, #8
 8006526:	2b00      	cmp	r3, #0
 8006528:	d036      	beq.n	8006598 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d016      	beq.n	8006560 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006532:	4b15      	ldr	r3, [pc, #84]	@ (8006588 <HAL_RCC_OscConfig+0x248>)
 8006534:	2201      	movs	r2, #1
 8006536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006538:	f7fd fefa 	bl	8004330 <HAL_GetTick>
 800653c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800653e:	e008      	b.n	8006552 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006540:	f7fd fef6 	bl	8004330 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e167      	b.n	8006822 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006552:	4b0b      	ldr	r3, [pc, #44]	@ (8006580 <HAL_RCC_OscConfig+0x240>)
 8006554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0f0      	beq.n	8006540 <HAL_RCC_OscConfig+0x200>
 800655e:	e01b      	b.n	8006598 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006560:	4b09      	ldr	r3, [pc, #36]	@ (8006588 <HAL_RCC_OscConfig+0x248>)
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006566:	f7fd fee3 	bl	8004330 <HAL_GetTick>
 800656a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800656c:	e00e      	b.n	800658c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800656e:	f7fd fedf 	bl	8004330 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d907      	bls.n	800658c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e150      	b.n	8006822 <HAL_RCC_OscConfig+0x4e2>
 8006580:	40023800 	.word	0x40023800
 8006584:	42470000 	.word	0x42470000
 8006588:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800658c:	4b88      	ldr	r3, [pc, #544]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 800658e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1ea      	bne.n	800656e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 8097 	beq.w	80066d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065a6:	2300      	movs	r3, #0
 80065a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065aa:	4b81      	ldr	r3, [pc, #516]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 80065ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10f      	bne.n	80065d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065b6:	2300      	movs	r3, #0
 80065b8:	60bb      	str	r3, [r7, #8]
 80065ba:	4b7d      	ldr	r3, [pc, #500]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 80065bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065be:	4a7c      	ldr	r2, [pc, #496]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 80065c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80065c6:	4b7a      	ldr	r3, [pc, #488]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 80065c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065ce:	60bb      	str	r3, [r7, #8]
 80065d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065d2:	2301      	movs	r3, #1
 80065d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065d6:	4b77      	ldr	r3, [pc, #476]	@ (80067b4 <HAL_RCC_OscConfig+0x474>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d118      	bne.n	8006614 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065e2:	4b74      	ldr	r3, [pc, #464]	@ (80067b4 <HAL_RCC_OscConfig+0x474>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a73      	ldr	r2, [pc, #460]	@ (80067b4 <HAL_RCC_OscConfig+0x474>)
 80065e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065ee:	f7fd fe9f 	bl	8004330 <HAL_GetTick>
 80065f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065f4:	e008      	b.n	8006608 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065f6:	f7fd fe9b 	bl	8004330 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	2b02      	cmp	r3, #2
 8006602:	d901      	bls.n	8006608 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e10c      	b.n	8006822 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006608:	4b6a      	ldr	r3, [pc, #424]	@ (80067b4 <HAL_RCC_OscConfig+0x474>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0f0      	beq.n	80065f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d106      	bne.n	800662a <HAL_RCC_OscConfig+0x2ea>
 800661c:	4b64      	ldr	r3, [pc, #400]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 800661e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006620:	4a63      	ldr	r2, [pc, #396]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 8006622:	f043 0301 	orr.w	r3, r3, #1
 8006626:	6713      	str	r3, [r2, #112]	@ 0x70
 8006628:	e01c      	b.n	8006664 <HAL_RCC_OscConfig+0x324>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	2b05      	cmp	r3, #5
 8006630:	d10c      	bne.n	800664c <HAL_RCC_OscConfig+0x30c>
 8006632:	4b5f      	ldr	r3, [pc, #380]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 8006634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006636:	4a5e      	ldr	r2, [pc, #376]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 8006638:	f043 0304 	orr.w	r3, r3, #4
 800663c:	6713      	str	r3, [r2, #112]	@ 0x70
 800663e:	4b5c      	ldr	r3, [pc, #368]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 8006640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006642:	4a5b      	ldr	r2, [pc, #364]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 8006644:	f043 0301 	orr.w	r3, r3, #1
 8006648:	6713      	str	r3, [r2, #112]	@ 0x70
 800664a:	e00b      	b.n	8006664 <HAL_RCC_OscConfig+0x324>
 800664c:	4b58      	ldr	r3, [pc, #352]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 800664e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006650:	4a57      	ldr	r2, [pc, #348]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 8006652:	f023 0301 	bic.w	r3, r3, #1
 8006656:	6713      	str	r3, [r2, #112]	@ 0x70
 8006658:	4b55      	ldr	r3, [pc, #340]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 800665a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800665c:	4a54      	ldr	r2, [pc, #336]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 800665e:	f023 0304 	bic.w	r3, r3, #4
 8006662:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d015      	beq.n	8006698 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800666c:	f7fd fe60 	bl	8004330 <HAL_GetTick>
 8006670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006672:	e00a      	b.n	800668a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006674:	f7fd fe5c 	bl	8004330 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006682:	4293      	cmp	r3, r2
 8006684:	d901      	bls.n	800668a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e0cb      	b.n	8006822 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800668a:	4b49      	ldr	r3, [pc, #292]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 800668c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d0ee      	beq.n	8006674 <HAL_RCC_OscConfig+0x334>
 8006696:	e014      	b.n	80066c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006698:	f7fd fe4a 	bl	8004330 <HAL_GetTick>
 800669c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800669e:	e00a      	b.n	80066b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066a0:	f7fd fe46 	bl	8004330 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d901      	bls.n	80066b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e0b5      	b.n	8006822 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066b6:	4b3e      	ldr	r3, [pc, #248]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 80066b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1ee      	bne.n	80066a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066c2:	7dfb      	ldrb	r3, [r7, #23]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d105      	bne.n	80066d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066c8:	4b39      	ldr	r3, [pc, #228]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 80066ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066cc:	4a38      	ldr	r2, [pc, #224]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 80066ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 80a1 	beq.w	8006820 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066de:	4b34      	ldr	r3, [pc, #208]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f003 030c 	and.w	r3, r3, #12
 80066e6:	2b08      	cmp	r3, #8
 80066e8:	d05c      	beq.n	80067a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d141      	bne.n	8006776 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066f2:	4b31      	ldr	r3, [pc, #196]	@ (80067b8 <HAL_RCC_OscConfig+0x478>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066f8:	f7fd fe1a 	bl	8004330 <HAL_GetTick>
 80066fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066fe:	e008      	b.n	8006712 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006700:	f7fd fe16 	bl	8004330 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b02      	cmp	r3, #2
 800670c:	d901      	bls.n	8006712 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e087      	b.n	8006822 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006712:	4b27      	ldr	r3, [pc, #156]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1f0      	bne.n	8006700 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	69da      	ldr	r2, [r3, #28]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	431a      	orrs	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800672c:	019b      	lsls	r3, r3, #6
 800672e:	431a      	orrs	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006734:	085b      	lsrs	r3, r3, #1
 8006736:	3b01      	subs	r3, #1
 8006738:	041b      	lsls	r3, r3, #16
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006740:	061b      	lsls	r3, r3, #24
 8006742:	491b      	ldr	r1, [pc, #108]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 8006744:	4313      	orrs	r3, r2
 8006746:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006748:	4b1b      	ldr	r3, [pc, #108]	@ (80067b8 <HAL_RCC_OscConfig+0x478>)
 800674a:	2201      	movs	r2, #1
 800674c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800674e:	f7fd fdef 	bl	8004330 <HAL_GetTick>
 8006752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006754:	e008      	b.n	8006768 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006756:	f7fd fdeb 	bl	8004330 <HAL_GetTick>
 800675a:	4602      	mov	r2, r0
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	2b02      	cmp	r3, #2
 8006762:	d901      	bls.n	8006768 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e05c      	b.n	8006822 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006768:	4b11      	ldr	r3, [pc, #68]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d0f0      	beq.n	8006756 <HAL_RCC_OscConfig+0x416>
 8006774:	e054      	b.n	8006820 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006776:	4b10      	ldr	r3, [pc, #64]	@ (80067b8 <HAL_RCC_OscConfig+0x478>)
 8006778:	2200      	movs	r2, #0
 800677a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800677c:	f7fd fdd8 	bl	8004330 <HAL_GetTick>
 8006780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006782:	e008      	b.n	8006796 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006784:	f7fd fdd4 	bl	8004330 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d901      	bls.n	8006796 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e045      	b.n	8006822 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006796:	4b06      	ldr	r3, [pc, #24]	@ (80067b0 <HAL_RCC_OscConfig+0x470>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1f0      	bne.n	8006784 <HAL_RCC_OscConfig+0x444>
 80067a2:	e03d      	b.n	8006820 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d107      	bne.n	80067bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e038      	b.n	8006822 <HAL_RCC_OscConfig+0x4e2>
 80067b0:	40023800 	.word	0x40023800
 80067b4:	40007000 	.word	0x40007000
 80067b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067bc:	4b1b      	ldr	r3, [pc, #108]	@ (800682c <HAL_RCC_OscConfig+0x4ec>)
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d028      	beq.n	800681c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d121      	bne.n	800681c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d11a      	bne.n	800681c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80067ec:	4013      	ands	r3, r2
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80067f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d111      	bne.n	800681c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006802:	085b      	lsrs	r3, r3, #1
 8006804:	3b01      	subs	r3, #1
 8006806:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006808:	429a      	cmp	r2, r3
 800680a:	d107      	bne.n	800681c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006816:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006818:	429a      	cmp	r2, r3
 800681a:	d001      	beq.n	8006820 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e000      	b.n	8006822 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	40023800 	.word	0x40023800

08006830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e0cc      	b.n	80069de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006844:	4b68      	ldr	r3, [pc, #416]	@ (80069e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0307 	and.w	r3, r3, #7
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	429a      	cmp	r2, r3
 8006850:	d90c      	bls.n	800686c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006852:	4b65      	ldr	r3, [pc, #404]	@ (80069e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	b2d2      	uxtb	r2, r2
 8006858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800685a:	4b63      	ldr	r3, [pc, #396]	@ (80069e8 <HAL_RCC_ClockConfig+0x1b8>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0307 	and.w	r3, r3, #7
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	429a      	cmp	r2, r3
 8006866:	d001      	beq.n	800686c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e0b8      	b.n	80069de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0302 	and.w	r3, r3, #2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d020      	beq.n	80068ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0304 	and.w	r3, r3, #4
 8006880:	2b00      	cmp	r3, #0
 8006882:	d005      	beq.n	8006890 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006884:	4b59      	ldr	r3, [pc, #356]	@ (80069ec <HAL_RCC_ClockConfig+0x1bc>)
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	4a58      	ldr	r2, [pc, #352]	@ (80069ec <HAL_RCC_ClockConfig+0x1bc>)
 800688a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800688e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0308 	and.w	r3, r3, #8
 8006898:	2b00      	cmp	r3, #0
 800689a:	d005      	beq.n	80068a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800689c:	4b53      	ldr	r3, [pc, #332]	@ (80069ec <HAL_RCC_ClockConfig+0x1bc>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	4a52      	ldr	r2, [pc, #328]	@ (80069ec <HAL_RCC_ClockConfig+0x1bc>)
 80068a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80068a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068a8:	4b50      	ldr	r3, [pc, #320]	@ (80069ec <HAL_RCC_ClockConfig+0x1bc>)
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	494d      	ldr	r1, [pc, #308]	@ (80069ec <HAL_RCC_ClockConfig+0x1bc>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d044      	beq.n	8006950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d107      	bne.n	80068de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ce:	4b47      	ldr	r3, [pc, #284]	@ (80069ec <HAL_RCC_ClockConfig+0x1bc>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d119      	bne.n	800690e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e07f      	b.n	80069de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d003      	beq.n	80068ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d107      	bne.n	80068fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068ee:	4b3f      	ldr	r3, [pc, #252]	@ (80069ec <HAL_RCC_ClockConfig+0x1bc>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d109      	bne.n	800690e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e06f      	b.n	80069de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068fe:	4b3b      	ldr	r3, [pc, #236]	@ (80069ec <HAL_RCC_ClockConfig+0x1bc>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e067      	b.n	80069de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800690e:	4b37      	ldr	r3, [pc, #220]	@ (80069ec <HAL_RCC_ClockConfig+0x1bc>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f023 0203 	bic.w	r2, r3, #3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	4934      	ldr	r1, [pc, #208]	@ (80069ec <HAL_RCC_ClockConfig+0x1bc>)
 800691c:	4313      	orrs	r3, r2
 800691e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006920:	f7fd fd06 	bl	8004330 <HAL_GetTick>
 8006924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006926:	e00a      	b.n	800693e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006928:	f7fd fd02 	bl	8004330 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006936:	4293      	cmp	r3, r2
 8006938:	d901      	bls.n	800693e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e04f      	b.n	80069de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800693e:	4b2b      	ldr	r3, [pc, #172]	@ (80069ec <HAL_RCC_ClockConfig+0x1bc>)
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f003 020c 	and.w	r2, r3, #12
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	429a      	cmp	r2, r3
 800694e:	d1eb      	bne.n	8006928 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006950:	4b25      	ldr	r3, [pc, #148]	@ (80069e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0307 	and.w	r3, r3, #7
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	429a      	cmp	r2, r3
 800695c:	d20c      	bcs.n	8006978 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800695e:	4b22      	ldr	r3, [pc, #136]	@ (80069e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	b2d2      	uxtb	r2, r2
 8006964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006966:	4b20      	ldr	r3, [pc, #128]	@ (80069e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0307 	and.w	r3, r3, #7
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	429a      	cmp	r2, r3
 8006972:	d001      	beq.n	8006978 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e032      	b.n	80069de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0304 	and.w	r3, r3, #4
 8006980:	2b00      	cmp	r3, #0
 8006982:	d008      	beq.n	8006996 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006984:	4b19      	ldr	r3, [pc, #100]	@ (80069ec <HAL_RCC_ClockConfig+0x1bc>)
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	4916      	ldr	r1, [pc, #88]	@ (80069ec <HAL_RCC_ClockConfig+0x1bc>)
 8006992:	4313      	orrs	r3, r2
 8006994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0308 	and.w	r3, r3, #8
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d009      	beq.n	80069b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069a2:	4b12      	ldr	r3, [pc, #72]	@ (80069ec <HAL_RCC_ClockConfig+0x1bc>)
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	00db      	lsls	r3, r3, #3
 80069b0:	490e      	ldr	r1, [pc, #56]	@ (80069ec <HAL_RCC_ClockConfig+0x1bc>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069b6:	f000 f821 	bl	80069fc <HAL_RCC_GetSysClockFreq>
 80069ba:	4602      	mov	r2, r0
 80069bc:	4b0b      	ldr	r3, [pc, #44]	@ (80069ec <HAL_RCC_ClockConfig+0x1bc>)
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	091b      	lsrs	r3, r3, #4
 80069c2:	f003 030f 	and.w	r3, r3, #15
 80069c6:	490a      	ldr	r1, [pc, #40]	@ (80069f0 <HAL_RCC_ClockConfig+0x1c0>)
 80069c8:	5ccb      	ldrb	r3, [r1, r3]
 80069ca:	fa22 f303 	lsr.w	r3, r2, r3
 80069ce:	4a09      	ldr	r2, [pc, #36]	@ (80069f4 <HAL_RCC_ClockConfig+0x1c4>)
 80069d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80069d2:	4b09      	ldr	r3, [pc, #36]	@ (80069f8 <HAL_RCC_ClockConfig+0x1c8>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7fd fc66 	bl	80042a8 <HAL_InitTick>

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	40023c00 	.word	0x40023c00
 80069ec:	40023800 	.word	0x40023800
 80069f0:	08010524 	.word	0x08010524
 80069f4:	20000020 	.word	0x20000020
 80069f8:	20000024 	.word	0x20000024

080069fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a00:	b090      	sub	sp, #64	@ 0x40
 8006a02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a14:	4b59      	ldr	r3, [pc, #356]	@ (8006b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f003 030c 	and.w	r3, r3, #12
 8006a1c:	2b08      	cmp	r3, #8
 8006a1e:	d00d      	beq.n	8006a3c <HAL_RCC_GetSysClockFreq+0x40>
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	f200 80a1 	bhi.w	8006b68 <HAL_RCC_GetSysClockFreq+0x16c>
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <HAL_RCC_GetSysClockFreq+0x34>
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	d003      	beq.n	8006a36 <HAL_RCC_GetSysClockFreq+0x3a>
 8006a2e:	e09b      	b.n	8006b68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a30:	4b53      	ldr	r3, [pc, #332]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x184>)
 8006a32:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006a34:	e09b      	b.n	8006b6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a36:	4b53      	ldr	r3, [pc, #332]	@ (8006b84 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a38:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006a3a:	e098      	b.n	8006b6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a3c:	4b4f      	ldr	r3, [pc, #316]	@ (8006b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a44:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a46:	4b4d      	ldr	r3, [pc, #308]	@ (8006b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d028      	beq.n	8006aa4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a52:	4b4a      	ldr	r3, [pc, #296]	@ (8006b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	099b      	lsrs	r3, r3, #6
 8006a58:	2200      	movs	r2, #0
 8006a5a:	623b      	str	r3, [r7, #32]
 8006a5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a5e:	6a3b      	ldr	r3, [r7, #32]
 8006a60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006a64:	2100      	movs	r1, #0
 8006a66:	4b47      	ldr	r3, [pc, #284]	@ (8006b84 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a68:	fb03 f201 	mul.w	r2, r3, r1
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	fb00 f303 	mul.w	r3, r0, r3
 8006a72:	4413      	add	r3, r2
 8006a74:	4a43      	ldr	r2, [pc, #268]	@ (8006b84 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a76:	fba0 1202 	umull	r1, r2, r0, r2
 8006a7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a7c:	460a      	mov	r2, r1
 8006a7e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006a80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a82:	4413      	add	r3, r2
 8006a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a88:	2200      	movs	r2, #0
 8006a8a:	61bb      	str	r3, [r7, #24]
 8006a8c:	61fa      	str	r2, [r7, #28]
 8006a8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006a96:	f7fa f8f7 	bl	8000c88 <__aeabi_uldivmod>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006aa2:	e053      	b.n	8006b4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aa4:	4b35      	ldr	r3, [pc, #212]	@ (8006b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	099b      	lsrs	r3, r3, #6
 8006aaa:	2200      	movs	r2, #0
 8006aac:	613b      	str	r3, [r7, #16]
 8006aae:	617a      	str	r2, [r7, #20]
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006ab6:	f04f 0b00 	mov.w	fp, #0
 8006aba:	4652      	mov	r2, sl
 8006abc:	465b      	mov	r3, fp
 8006abe:	f04f 0000 	mov.w	r0, #0
 8006ac2:	f04f 0100 	mov.w	r1, #0
 8006ac6:	0159      	lsls	r1, r3, #5
 8006ac8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006acc:	0150      	lsls	r0, r2, #5
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	ebb2 080a 	subs.w	r8, r2, sl
 8006ad6:	eb63 090b 	sbc.w	r9, r3, fp
 8006ada:	f04f 0200 	mov.w	r2, #0
 8006ade:	f04f 0300 	mov.w	r3, #0
 8006ae2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006ae6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006aea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006aee:	ebb2 0408 	subs.w	r4, r2, r8
 8006af2:	eb63 0509 	sbc.w	r5, r3, r9
 8006af6:	f04f 0200 	mov.w	r2, #0
 8006afa:	f04f 0300 	mov.w	r3, #0
 8006afe:	00eb      	lsls	r3, r5, #3
 8006b00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b04:	00e2      	lsls	r2, r4, #3
 8006b06:	4614      	mov	r4, r2
 8006b08:	461d      	mov	r5, r3
 8006b0a:	eb14 030a 	adds.w	r3, r4, sl
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	eb45 030b 	adc.w	r3, r5, fp
 8006b14:	607b      	str	r3, [r7, #4]
 8006b16:	f04f 0200 	mov.w	r2, #0
 8006b1a:	f04f 0300 	mov.w	r3, #0
 8006b1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b22:	4629      	mov	r1, r5
 8006b24:	028b      	lsls	r3, r1, #10
 8006b26:	4621      	mov	r1, r4
 8006b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b2c:	4621      	mov	r1, r4
 8006b2e:	028a      	lsls	r2, r1, #10
 8006b30:	4610      	mov	r0, r2
 8006b32:	4619      	mov	r1, r3
 8006b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b36:	2200      	movs	r2, #0
 8006b38:	60bb      	str	r3, [r7, #8]
 8006b3a:	60fa      	str	r2, [r7, #12]
 8006b3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b40:	f7fa f8a2 	bl	8000c88 <__aeabi_uldivmod>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	4613      	mov	r3, r2
 8006b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	0c1b      	lsrs	r3, r3, #16
 8006b52:	f003 0303 	and.w	r3, r3, #3
 8006b56:	3301      	adds	r3, #1
 8006b58:	005b      	lsls	r3, r3, #1
 8006b5a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006b5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006b66:	e002      	b.n	8006b6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b68:	4b05      	ldr	r3, [pc, #20]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0x184>)
 8006b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3740      	adds	r7, #64	@ 0x40
 8006b74:	46bd      	mov	sp, r7
 8006b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b7a:	bf00      	nop
 8006b7c:	40023800 	.word	0x40023800
 8006b80:	00f42400 	.word	0x00f42400
 8006b84:	017d7840 	.word	0x017d7840

08006b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b8c:	4b03      	ldr	r3, [pc, #12]	@ (8006b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	20000020 	.word	0x20000020

08006ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ba4:	f7ff fff0 	bl	8006b88 <HAL_RCC_GetHCLKFreq>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	4b05      	ldr	r3, [pc, #20]	@ (8006bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	0a9b      	lsrs	r3, r3, #10
 8006bb0:	f003 0307 	and.w	r3, r3, #7
 8006bb4:	4903      	ldr	r1, [pc, #12]	@ (8006bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bb6:	5ccb      	ldrb	r3, [r1, r3]
 8006bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	40023800 	.word	0x40023800
 8006bc4:	08010534 	.word	0x08010534

08006bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006bcc:	f7ff ffdc 	bl	8006b88 <HAL_RCC_GetHCLKFreq>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	4b05      	ldr	r3, [pc, #20]	@ (8006be8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	0b5b      	lsrs	r3, r3, #13
 8006bd8:	f003 0307 	and.w	r3, r3, #7
 8006bdc:	4903      	ldr	r1, [pc, #12]	@ (8006bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bde:	5ccb      	ldrb	r3, [r1, r3]
 8006be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	40023800 	.word	0x40023800
 8006bec:	08010534 	.word	0x08010534

08006bf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d101      	bne.n	8006c02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e041      	b.n	8006c86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d106      	bne.n	8006c1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7fd f810 	bl	8003c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	4610      	mov	r0, r2
 8006c30:	f000 fff0 	bl	8007c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
	...

08006c90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d001      	beq.n	8006ca8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e046      	b.n	8006d36 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a23      	ldr	r2, [pc, #140]	@ (8006d44 <HAL_TIM_Base_Start+0xb4>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d022      	beq.n	8006d00 <HAL_TIM_Base_Start+0x70>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cc2:	d01d      	beq.n	8006d00 <HAL_TIM_Base_Start+0x70>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a1f      	ldr	r2, [pc, #124]	@ (8006d48 <HAL_TIM_Base_Start+0xb8>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d018      	beq.n	8006d00 <HAL_TIM_Base_Start+0x70>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a1e      	ldr	r2, [pc, #120]	@ (8006d4c <HAL_TIM_Base_Start+0xbc>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d013      	beq.n	8006d00 <HAL_TIM_Base_Start+0x70>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a1c      	ldr	r2, [pc, #112]	@ (8006d50 <HAL_TIM_Base_Start+0xc0>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d00e      	beq.n	8006d00 <HAL_TIM_Base_Start+0x70>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a1b      	ldr	r2, [pc, #108]	@ (8006d54 <HAL_TIM_Base_Start+0xc4>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d009      	beq.n	8006d00 <HAL_TIM_Base_Start+0x70>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a19      	ldr	r2, [pc, #100]	@ (8006d58 <HAL_TIM_Base_Start+0xc8>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d004      	beq.n	8006d00 <HAL_TIM_Base_Start+0x70>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a18      	ldr	r2, [pc, #96]	@ (8006d5c <HAL_TIM_Base_Start+0xcc>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d111      	bne.n	8006d24 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2b06      	cmp	r3, #6
 8006d10:	d010      	beq.n	8006d34 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f042 0201 	orr.w	r2, r2, #1
 8006d20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d22:	e007      	b.n	8006d34 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0201 	orr.w	r2, r2, #1
 8006d32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3714      	adds	r7, #20
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	40010000 	.word	0x40010000
 8006d48:	40000400 	.word	0x40000400
 8006d4c:	40000800 	.word	0x40000800
 8006d50:	40000c00 	.word	0x40000c00
 8006d54:	40010400 	.word	0x40010400
 8006d58:	40014000 	.word	0x40014000
 8006d5c:	40001800 	.word	0x40001800

08006d60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e041      	b.n	8006df6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d106      	bne.n	8006d8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f839 	bl	8006dfe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2202      	movs	r2, #2
 8006d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681a      	ldr	r2, [r3, #0]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	4610      	mov	r0, r2
 8006da0:	f000 ff38 	bl	8007c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e06:	bf00      	nop
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
	...

08006e14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d109      	bne.n	8006e38 <HAL_TIM_PWM_Start+0x24>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	bf14      	ite	ne
 8006e30:	2301      	movne	r3, #1
 8006e32:	2300      	moveq	r3, #0
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	e022      	b.n	8006e7e <HAL_TIM_PWM_Start+0x6a>
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	d109      	bne.n	8006e52 <HAL_TIM_PWM_Start+0x3e>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	bf14      	ite	ne
 8006e4a:	2301      	movne	r3, #1
 8006e4c:	2300      	moveq	r3, #0
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	e015      	b.n	8006e7e <HAL_TIM_PWM_Start+0x6a>
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b08      	cmp	r3, #8
 8006e56:	d109      	bne.n	8006e6c <HAL_TIM_PWM_Start+0x58>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	bf14      	ite	ne
 8006e64:	2301      	movne	r3, #1
 8006e66:	2300      	moveq	r3, #0
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	e008      	b.n	8006e7e <HAL_TIM_PWM_Start+0x6a>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	bf14      	ite	ne
 8006e78:	2301      	movne	r3, #1
 8006e7a:	2300      	moveq	r3, #0
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e07c      	b.n	8006f80 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d104      	bne.n	8006e96 <HAL_TIM_PWM_Start+0x82>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2202      	movs	r2, #2
 8006e90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e94:	e013      	b.n	8006ebe <HAL_TIM_PWM_Start+0xaa>
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b04      	cmp	r3, #4
 8006e9a:	d104      	bne.n	8006ea6 <HAL_TIM_PWM_Start+0x92>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ea4:	e00b      	b.n	8006ebe <HAL_TIM_PWM_Start+0xaa>
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b08      	cmp	r3, #8
 8006eaa:	d104      	bne.n	8006eb6 <HAL_TIM_PWM_Start+0xa2>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006eb4:	e003      	b.n	8006ebe <HAL_TIM_PWM_Start+0xaa>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2202      	movs	r2, #2
 8006eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f001 fac4 	bl	8008454 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a2d      	ldr	r2, [pc, #180]	@ (8006f88 <HAL_TIM_PWM_Start+0x174>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d004      	beq.n	8006ee0 <HAL_TIM_PWM_Start+0xcc>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a2c      	ldr	r2, [pc, #176]	@ (8006f8c <HAL_TIM_PWM_Start+0x178>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d101      	bne.n	8006ee4 <HAL_TIM_PWM_Start+0xd0>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e000      	b.n	8006ee6 <HAL_TIM_PWM_Start+0xd2>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d007      	beq.n	8006efa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ef8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a22      	ldr	r2, [pc, #136]	@ (8006f88 <HAL_TIM_PWM_Start+0x174>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d022      	beq.n	8006f4a <HAL_TIM_PWM_Start+0x136>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f0c:	d01d      	beq.n	8006f4a <HAL_TIM_PWM_Start+0x136>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a1f      	ldr	r2, [pc, #124]	@ (8006f90 <HAL_TIM_PWM_Start+0x17c>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d018      	beq.n	8006f4a <HAL_TIM_PWM_Start+0x136>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8006f94 <HAL_TIM_PWM_Start+0x180>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d013      	beq.n	8006f4a <HAL_TIM_PWM_Start+0x136>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a1c      	ldr	r2, [pc, #112]	@ (8006f98 <HAL_TIM_PWM_Start+0x184>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d00e      	beq.n	8006f4a <HAL_TIM_PWM_Start+0x136>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a16      	ldr	r2, [pc, #88]	@ (8006f8c <HAL_TIM_PWM_Start+0x178>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d009      	beq.n	8006f4a <HAL_TIM_PWM_Start+0x136>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a18      	ldr	r2, [pc, #96]	@ (8006f9c <HAL_TIM_PWM_Start+0x188>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d004      	beq.n	8006f4a <HAL_TIM_PWM_Start+0x136>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a16      	ldr	r2, [pc, #88]	@ (8006fa0 <HAL_TIM_PWM_Start+0x18c>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d111      	bne.n	8006f6e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f003 0307 	and.w	r3, r3, #7
 8006f54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2b06      	cmp	r3, #6
 8006f5a:	d010      	beq.n	8006f7e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0201 	orr.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f6c:	e007      	b.n	8006f7e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f042 0201 	orr.w	r2, r2, #1
 8006f7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	40010000 	.word	0x40010000
 8006f8c:	40010400 	.word	0x40010400
 8006f90:	40000400 	.word	0x40000400
 8006f94:	40000800 	.word	0x40000800
 8006f98:	40000c00 	.word	0x40000c00
 8006f9c:	40014000 	.word	0x40014000
 8006fa0:	40001800 	.word	0x40001800

08006fa4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e041      	b.n	800703a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d106      	bne.n	8006fd0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f839 	bl	8007042 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	3304      	adds	r3, #4
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	f000 fe16 	bl	8007c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007042:	b480      	push	{r7}
 8007044:	b083      	sub	sp, #12
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800704a:	bf00      	nop
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
	...

08007058 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d104      	bne.n	8007076 <HAL_TIM_IC_Start_IT+0x1e>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007072:	b2db      	uxtb	r3, r3
 8007074:	e013      	b.n	800709e <HAL_TIM_IC_Start_IT+0x46>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b04      	cmp	r3, #4
 800707a:	d104      	bne.n	8007086 <HAL_TIM_IC_Start_IT+0x2e>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007082:	b2db      	uxtb	r3, r3
 8007084:	e00b      	b.n	800709e <HAL_TIM_IC_Start_IT+0x46>
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b08      	cmp	r3, #8
 800708a:	d104      	bne.n	8007096 <HAL_TIM_IC_Start_IT+0x3e>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007092:	b2db      	uxtb	r3, r3
 8007094:	e003      	b.n	800709e <HAL_TIM_IC_Start_IT+0x46>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800709c:	b2db      	uxtb	r3, r3
 800709e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d104      	bne.n	80070b0 <HAL_TIM_IC_Start_IT+0x58>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	e013      	b.n	80070d8 <HAL_TIM_IC_Start_IT+0x80>
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2b04      	cmp	r3, #4
 80070b4:	d104      	bne.n	80070c0 <HAL_TIM_IC_Start_IT+0x68>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	e00b      	b.n	80070d8 <HAL_TIM_IC_Start_IT+0x80>
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2b08      	cmp	r3, #8
 80070c4:	d104      	bne.n	80070d0 <HAL_TIM_IC_Start_IT+0x78>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	e003      	b.n	80070d8 <HAL_TIM_IC_Start_IT+0x80>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80070da:	7bbb      	ldrb	r3, [r7, #14]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d102      	bne.n	80070e6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80070e0:	7b7b      	ldrb	r3, [r7, #13]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d001      	beq.n	80070ea <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e0cc      	b.n	8007284 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d104      	bne.n	80070fa <HAL_TIM_IC_Start_IT+0xa2>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070f8:	e013      	b.n	8007122 <HAL_TIM_IC_Start_IT+0xca>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	d104      	bne.n	800710a <HAL_TIM_IC_Start_IT+0xb2>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007108:	e00b      	b.n	8007122 <HAL_TIM_IC_Start_IT+0xca>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b08      	cmp	r3, #8
 800710e:	d104      	bne.n	800711a <HAL_TIM_IC_Start_IT+0xc2>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007118:	e003      	b.n	8007122 <HAL_TIM_IC_Start_IT+0xca>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2202      	movs	r2, #2
 800711e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d104      	bne.n	8007132 <HAL_TIM_IC_Start_IT+0xda>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2202      	movs	r2, #2
 800712c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007130:	e013      	b.n	800715a <HAL_TIM_IC_Start_IT+0x102>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2b04      	cmp	r3, #4
 8007136:	d104      	bne.n	8007142 <HAL_TIM_IC_Start_IT+0xea>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2202      	movs	r2, #2
 800713c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007140:	e00b      	b.n	800715a <HAL_TIM_IC_Start_IT+0x102>
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2b08      	cmp	r3, #8
 8007146:	d104      	bne.n	8007152 <HAL_TIM_IC_Start_IT+0xfa>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007150:	e003      	b.n	800715a <HAL_TIM_IC_Start_IT+0x102>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2202      	movs	r2, #2
 8007156:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2b0c      	cmp	r3, #12
 800715e:	d841      	bhi.n	80071e4 <HAL_TIM_IC_Start_IT+0x18c>
 8007160:	a201      	add	r2, pc, #4	@ (adr r2, 8007168 <HAL_TIM_IC_Start_IT+0x110>)
 8007162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007166:	bf00      	nop
 8007168:	0800719d 	.word	0x0800719d
 800716c:	080071e5 	.word	0x080071e5
 8007170:	080071e5 	.word	0x080071e5
 8007174:	080071e5 	.word	0x080071e5
 8007178:	080071af 	.word	0x080071af
 800717c:	080071e5 	.word	0x080071e5
 8007180:	080071e5 	.word	0x080071e5
 8007184:	080071e5 	.word	0x080071e5
 8007188:	080071c1 	.word	0x080071c1
 800718c:	080071e5 	.word	0x080071e5
 8007190:	080071e5 	.word	0x080071e5
 8007194:	080071e5 	.word	0x080071e5
 8007198:	080071d3 	.word	0x080071d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f042 0202 	orr.w	r2, r2, #2
 80071aa:	60da      	str	r2, [r3, #12]
      break;
 80071ac:	e01d      	b.n	80071ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68da      	ldr	r2, [r3, #12]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f042 0204 	orr.w	r2, r2, #4
 80071bc:	60da      	str	r2, [r3, #12]
      break;
 80071be:	e014      	b.n	80071ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68da      	ldr	r2, [r3, #12]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f042 0208 	orr.w	r2, r2, #8
 80071ce:	60da      	str	r2, [r3, #12]
      break;
 80071d0:	e00b      	b.n	80071ea <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68da      	ldr	r2, [r3, #12]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f042 0210 	orr.w	r2, r2, #16
 80071e0:	60da      	str	r2, [r3, #12]
      break;
 80071e2:	e002      	b.n	80071ea <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	73fb      	strb	r3, [r7, #15]
      break;
 80071e8:	bf00      	nop
  }

  if (status == HAL_OK)
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d148      	bne.n	8007282 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2201      	movs	r2, #1
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f001 f92b 	bl	8008454 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a22      	ldr	r2, [pc, #136]	@ (800728c <HAL_TIM_IC_Start_IT+0x234>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d022      	beq.n	800724e <HAL_TIM_IC_Start_IT+0x1f6>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007210:	d01d      	beq.n	800724e <HAL_TIM_IC_Start_IT+0x1f6>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a1e      	ldr	r2, [pc, #120]	@ (8007290 <HAL_TIM_IC_Start_IT+0x238>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d018      	beq.n	800724e <HAL_TIM_IC_Start_IT+0x1f6>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a1c      	ldr	r2, [pc, #112]	@ (8007294 <HAL_TIM_IC_Start_IT+0x23c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d013      	beq.n	800724e <HAL_TIM_IC_Start_IT+0x1f6>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a1b      	ldr	r2, [pc, #108]	@ (8007298 <HAL_TIM_IC_Start_IT+0x240>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d00e      	beq.n	800724e <HAL_TIM_IC_Start_IT+0x1f6>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a19      	ldr	r2, [pc, #100]	@ (800729c <HAL_TIM_IC_Start_IT+0x244>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d009      	beq.n	800724e <HAL_TIM_IC_Start_IT+0x1f6>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a18      	ldr	r2, [pc, #96]	@ (80072a0 <HAL_TIM_IC_Start_IT+0x248>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d004      	beq.n	800724e <HAL_TIM_IC_Start_IT+0x1f6>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a16      	ldr	r2, [pc, #88]	@ (80072a4 <HAL_TIM_IC_Start_IT+0x24c>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d111      	bne.n	8007272 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f003 0307 	and.w	r3, r3, #7
 8007258:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b06      	cmp	r3, #6
 800725e:	d010      	beq.n	8007282 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0201 	orr.w	r2, r2, #1
 800726e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007270:	e007      	b.n	8007282 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f042 0201 	orr.w	r2, r2, #1
 8007280:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007282:	7bfb      	ldrb	r3, [r7, #15]
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	40010000 	.word	0x40010000
 8007290:	40000400 	.word	0x40000400
 8007294:	40000800 	.word	0x40000800
 8007298:	40000c00 	.word	0x40000c00
 800729c:	40010400 	.word	0x40010400
 80072a0:	40014000 	.word	0x40014000
 80072a4:	40001800 	.word	0x40001800

080072a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e097      	b.n	80073ec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d106      	bne.n	80072d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7fc fd65 	bl	8003da0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2202      	movs	r2, #2
 80072da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	6812      	ldr	r2, [r2, #0]
 80072e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80072ec:	f023 0307 	bic.w	r3, r3, #7
 80072f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	3304      	adds	r3, #4
 80072fa:	4619      	mov	r1, r3
 80072fc:	4610      	mov	r0, r2
 80072fe:	f000 fc89 	bl	8007c14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	4313      	orrs	r3, r2
 8007322:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800732a:	f023 0303 	bic.w	r3, r3, #3
 800732e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	689a      	ldr	r2, [r3, #8]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	021b      	lsls	r3, r3, #8
 800733a:	4313      	orrs	r3, r2
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	4313      	orrs	r3, r2
 8007340:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007348:	f023 030c 	bic.w	r3, r3, #12
 800734c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007354:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007358:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	68da      	ldr	r2, [r3, #12]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	69db      	ldr	r3, [r3, #28]
 8007362:	021b      	lsls	r3, r3, #8
 8007364:	4313      	orrs	r3, r2
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	4313      	orrs	r3, r2
 800736a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	011a      	lsls	r2, r3, #4
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	031b      	lsls	r3, r3, #12
 8007378:	4313      	orrs	r3, r2
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	4313      	orrs	r3, r2
 800737e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007386:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800738e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	011b      	lsls	r3, r3, #4
 800739a:	4313      	orrs	r3, r2
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	4313      	orrs	r3, r2
 80073a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	693a      	ldr	r2, [r7, #16]
 80073b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3718      	adds	r7, #24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007404:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800740c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007414:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800741c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d110      	bne.n	8007446 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007424:	7bfb      	ldrb	r3, [r7, #15]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d102      	bne.n	8007430 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800742a:	7b7b      	ldrb	r3, [r7, #13]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d001      	beq.n	8007434 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e069      	b.n	8007508 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2202      	movs	r2, #2
 8007438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2202      	movs	r2, #2
 8007440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007444:	e031      	b.n	80074aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b04      	cmp	r3, #4
 800744a:	d110      	bne.n	800746e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800744c:	7bbb      	ldrb	r3, [r7, #14]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d102      	bne.n	8007458 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007452:	7b3b      	ldrb	r3, [r7, #12]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d001      	beq.n	800745c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e055      	b.n	8007508 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2202      	movs	r2, #2
 8007468:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800746c:	e01d      	b.n	80074aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800746e:	7bfb      	ldrb	r3, [r7, #15]
 8007470:	2b01      	cmp	r3, #1
 8007472:	d108      	bne.n	8007486 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007474:	7bbb      	ldrb	r3, [r7, #14]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d105      	bne.n	8007486 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800747a:	7b7b      	ldrb	r3, [r7, #13]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d102      	bne.n	8007486 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007480:	7b3b      	ldrb	r3, [r7, #12]
 8007482:	2b01      	cmp	r3, #1
 8007484:	d001      	beq.n	800748a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e03e      	b.n	8007508 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2202      	movs	r2, #2
 800748e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2202      	movs	r2, #2
 8007496:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2202      	movs	r2, #2
 800749e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2202      	movs	r2, #2
 80074a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d003      	beq.n	80074b8 <HAL_TIM_Encoder_Start+0xc4>
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	2b04      	cmp	r3, #4
 80074b4:	d008      	beq.n	80074c8 <HAL_TIM_Encoder_Start+0xd4>
 80074b6:	e00f      	b.n	80074d8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2201      	movs	r2, #1
 80074be:	2100      	movs	r1, #0
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 ffc7 	bl	8008454 <TIM_CCxChannelCmd>
      break;
 80074c6:	e016      	b.n	80074f6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2201      	movs	r2, #1
 80074ce:	2104      	movs	r1, #4
 80074d0:	4618      	mov	r0, r3
 80074d2:	f000 ffbf 	bl	8008454 <TIM_CCxChannelCmd>
      break;
 80074d6:	e00e      	b.n	80074f6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2201      	movs	r2, #1
 80074de:	2100      	movs	r1, #0
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 ffb7 	bl	8008454 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2201      	movs	r2, #1
 80074ec:	2104      	movs	r1, #4
 80074ee:	4618      	mov	r0, r3
 80074f0:	f000 ffb0 	bl	8008454 <TIM_CCxChannelCmd>
      break;
 80074f4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f042 0201 	orr.w	r2, r2, #1
 8007504:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3710      	adds	r7, #16
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d020      	beq.n	8007574 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f003 0302 	and.w	r3, r3, #2
 8007538:	2b00      	cmp	r3, #0
 800753a:	d01b      	beq.n	8007574 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f06f 0202 	mvn.w	r2, #2
 8007544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	699b      	ldr	r3, [r3, #24]
 8007552:	f003 0303 	and.w	r3, r3, #3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d003      	beq.n	8007562 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7fb fd80 	bl	8003060 <HAL_TIM_IC_CaptureCallback>
 8007560:	e005      	b.n	800756e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fb38 	bl	8007bd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fb3f 	bl	8007bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f003 0304 	and.w	r3, r3, #4
 800757a:	2b00      	cmp	r3, #0
 800757c:	d020      	beq.n	80075c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f003 0304 	and.w	r3, r3, #4
 8007584:	2b00      	cmp	r3, #0
 8007586:	d01b      	beq.n	80075c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f06f 0204 	mvn.w	r2, #4
 8007590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2202      	movs	r2, #2
 8007596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7fb fd5a 	bl	8003060 <HAL_TIM_IC_CaptureCallback>
 80075ac:	e005      	b.n	80075ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 fb12 	bl	8007bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fb19 	bl	8007bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	f003 0308 	and.w	r3, r3, #8
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d020      	beq.n	800760c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f003 0308 	and.w	r3, r3, #8
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d01b      	beq.n	800760c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f06f 0208 	mvn.w	r2, #8
 80075dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2204      	movs	r2, #4
 80075e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	f003 0303 	and.w	r3, r3, #3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7fb fd34 	bl	8003060 <HAL_TIM_IC_CaptureCallback>
 80075f8:	e005      	b.n	8007606 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 faec 	bl	8007bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 faf3 	bl	8007bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	f003 0310 	and.w	r3, r3, #16
 8007612:	2b00      	cmp	r3, #0
 8007614:	d020      	beq.n	8007658 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f003 0310 	and.w	r3, r3, #16
 800761c:	2b00      	cmp	r3, #0
 800761e:	d01b      	beq.n	8007658 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f06f 0210 	mvn.w	r2, #16
 8007628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2208      	movs	r2, #8
 800762e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	69db      	ldr	r3, [r3, #28]
 8007636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800763a:	2b00      	cmp	r3, #0
 800763c:	d003      	beq.n	8007646 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7fb fd0e 	bl	8003060 <HAL_TIM_IC_CaptureCallback>
 8007644:	e005      	b.n	8007652 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fac6 	bl	8007bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 facd 	bl	8007bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00c      	beq.n	800767c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	2b00      	cmp	r3, #0
 800766a:	d007      	beq.n	800767c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f06f 0201 	mvn.w	r2, #1
 8007674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 faa4 	bl	8007bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00c      	beq.n	80076a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800768c:	2b00      	cmp	r3, #0
 800768e:	d007      	beq.n	80076a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 ffd8 	bl	8008650 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00c      	beq.n	80076c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d007      	beq.n	80076c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80076bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fa9e 	bl	8007c00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	f003 0320 	and.w	r3, r3, #32
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00c      	beq.n	80076e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f003 0320 	and.w	r3, r3, #32
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d007      	beq.n	80076e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f06f 0220 	mvn.w	r2, #32
 80076e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 ffaa 	bl	800863c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076e8:	bf00      	nop
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076fc:	2300      	movs	r3, #0
 80076fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007706:	2b01      	cmp	r3, #1
 8007708:	d101      	bne.n	800770e <HAL_TIM_IC_ConfigChannel+0x1e>
 800770a:	2302      	movs	r3, #2
 800770c:	e088      	b.n	8007820 <HAL_TIM_IC_ConfigChannel+0x130>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d11b      	bne.n	8007754 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800772c:	f000 fcce 	bl	80080cc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	699a      	ldr	r2, [r3, #24]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f022 020c 	bic.w	r2, r2, #12
 800773e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6999      	ldr	r1, [r3, #24]
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	689a      	ldr	r2, [r3, #8]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	619a      	str	r2, [r3, #24]
 8007752:	e060      	b.n	8007816 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b04      	cmp	r3, #4
 8007758:	d11c      	bne.n	8007794 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800776a:	f000 fd52 	bl	8008212 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	699a      	ldr	r2, [r3, #24]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800777c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6999      	ldr	r1, [r3, #24]
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	021a      	lsls	r2, r3, #8
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	430a      	orrs	r2, r1
 8007790:	619a      	str	r2, [r3, #24]
 8007792:	e040      	b.n	8007816 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b08      	cmp	r3, #8
 8007798:	d11b      	bne.n	80077d2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80077aa:	f000 fd9f 	bl	80082ec <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	69da      	ldr	r2, [r3, #28]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f022 020c 	bic.w	r2, r2, #12
 80077bc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	69d9      	ldr	r1, [r3, #28]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	430a      	orrs	r2, r1
 80077ce:	61da      	str	r2, [r3, #28]
 80077d0:	e021      	b.n	8007816 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b0c      	cmp	r3, #12
 80077d6:	d11c      	bne.n	8007812 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80077e8:	f000 fdbc 	bl	8008364 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	69da      	ldr	r2, [r3, #28]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80077fa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	69d9      	ldr	r1, [r3, #28]
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	021a      	lsls	r2, r3, #8
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	430a      	orrs	r2, r1
 800780e:	61da      	str	r2, [r3, #28]
 8007810:	e001      	b.n	8007816 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800781e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3718      	adds	r7, #24
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800783e:	2b01      	cmp	r3, #1
 8007840:	d101      	bne.n	8007846 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007842:	2302      	movs	r3, #2
 8007844:	e0ae      	b.n	80079a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2b0c      	cmp	r3, #12
 8007852:	f200 809f 	bhi.w	8007994 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007856:	a201      	add	r2, pc, #4	@ (adr r2, 800785c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785c:	08007891 	.word	0x08007891
 8007860:	08007995 	.word	0x08007995
 8007864:	08007995 	.word	0x08007995
 8007868:	08007995 	.word	0x08007995
 800786c:	080078d1 	.word	0x080078d1
 8007870:	08007995 	.word	0x08007995
 8007874:	08007995 	.word	0x08007995
 8007878:	08007995 	.word	0x08007995
 800787c:	08007913 	.word	0x08007913
 8007880:	08007995 	.word	0x08007995
 8007884:	08007995 	.word	0x08007995
 8007888:	08007995 	.word	0x08007995
 800788c:	08007953 	.word	0x08007953
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68b9      	ldr	r1, [r7, #8]
 8007896:	4618      	mov	r0, r3
 8007898:	f000 fa68 	bl	8007d6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	699a      	ldr	r2, [r3, #24]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f042 0208 	orr.w	r2, r2, #8
 80078aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	699a      	ldr	r2, [r3, #24]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f022 0204 	bic.w	r2, r2, #4
 80078ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6999      	ldr	r1, [r3, #24]
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	691a      	ldr	r2, [r3, #16]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	430a      	orrs	r2, r1
 80078cc:	619a      	str	r2, [r3, #24]
      break;
 80078ce:	e064      	b.n	800799a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68b9      	ldr	r1, [r7, #8]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 fab8 	bl	8007e4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	699a      	ldr	r2, [r3, #24]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	699a      	ldr	r2, [r3, #24]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6999      	ldr	r1, [r3, #24]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	021a      	lsls	r2, r3, #8
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	430a      	orrs	r2, r1
 800790e:	619a      	str	r2, [r3, #24]
      break;
 8007910:	e043      	b.n	800799a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68b9      	ldr	r1, [r7, #8]
 8007918:	4618      	mov	r0, r3
 800791a:	f000 fb0d 	bl	8007f38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	69da      	ldr	r2, [r3, #28]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f042 0208 	orr.w	r2, r2, #8
 800792c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	69da      	ldr	r2, [r3, #28]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f022 0204 	bic.w	r2, r2, #4
 800793c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	69d9      	ldr	r1, [r3, #28]
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	691a      	ldr	r2, [r3, #16]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	430a      	orrs	r2, r1
 800794e:	61da      	str	r2, [r3, #28]
      break;
 8007950:	e023      	b.n	800799a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68b9      	ldr	r1, [r7, #8]
 8007958:	4618      	mov	r0, r3
 800795a:	f000 fb61 	bl	8008020 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	69da      	ldr	r2, [r3, #28]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800796c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	69da      	ldr	r2, [r3, #28]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800797c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	69d9      	ldr	r1, [r3, #28]
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	021a      	lsls	r2, r3, #8
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	430a      	orrs	r2, r1
 8007990:	61da      	str	r2, [r3, #28]
      break;
 8007992:	e002      	b.n	800799a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	75fb      	strb	r3, [r7, #23]
      break;
 8007998:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d101      	bne.n	80079c8 <HAL_TIM_ConfigClockSource+0x1c>
 80079c4:	2302      	movs	r3, #2
 80079c6:	e0b4      	b.n	8007b32 <HAL_TIM_ConfigClockSource+0x186>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2202      	movs	r2, #2
 80079d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80079e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80079ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a00:	d03e      	beq.n	8007a80 <HAL_TIM_ConfigClockSource+0xd4>
 8007a02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a06:	f200 8087 	bhi.w	8007b18 <HAL_TIM_ConfigClockSource+0x16c>
 8007a0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a0e:	f000 8086 	beq.w	8007b1e <HAL_TIM_ConfigClockSource+0x172>
 8007a12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a16:	d87f      	bhi.n	8007b18 <HAL_TIM_ConfigClockSource+0x16c>
 8007a18:	2b70      	cmp	r3, #112	@ 0x70
 8007a1a:	d01a      	beq.n	8007a52 <HAL_TIM_ConfigClockSource+0xa6>
 8007a1c:	2b70      	cmp	r3, #112	@ 0x70
 8007a1e:	d87b      	bhi.n	8007b18 <HAL_TIM_ConfigClockSource+0x16c>
 8007a20:	2b60      	cmp	r3, #96	@ 0x60
 8007a22:	d050      	beq.n	8007ac6 <HAL_TIM_ConfigClockSource+0x11a>
 8007a24:	2b60      	cmp	r3, #96	@ 0x60
 8007a26:	d877      	bhi.n	8007b18 <HAL_TIM_ConfigClockSource+0x16c>
 8007a28:	2b50      	cmp	r3, #80	@ 0x50
 8007a2a:	d03c      	beq.n	8007aa6 <HAL_TIM_ConfigClockSource+0xfa>
 8007a2c:	2b50      	cmp	r3, #80	@ 0x50
 8007a2e:	d873      	bhi.n	8007b18 <HAL_TIM_ConfigClockSource+0x16c>
 8007a30:	2b40      	cmp	r3, #64	@ 0x40
 8007a32:	d058      	beq.n	8007ae6 <HAL_TIM_ConfigClockSource+0x13a>
 8007a34:	2b40      	cmp	r3, #64	@ 0x40
 8007a36:	d86f      	bhi.n	8007b18 <HAL_TIM_ConfigClockSource+0x16c>
 8007a38:	2b30      	cmp	r3, #48	@ 0x30
 8007a3a:	d064      	beq.n	8007b06 <HAL_TIM_ConfigClockSource+0x15a>
 8007a3c:	2b30      	cmp	r3, #48	@ 0x30
 8007a3e:	d86b      	bhi.n	8007b18 <HAL_TIM_ConfigClockSource+0x16c>
 8007a40:	2b20      	cmp	r3, #32
 8007a42:	d060      	beq.n	8007b06 <HAL_TIM_ConfigClockSource+0x15a>
 8007a44:	2b20      	cmp	r3, #32
 8007a46:	d867      	bhi.n	8007b18 <HAL_TIM_ConfigClockSource+0x16c>
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d05c      	beq.n	8007b06 <HAL_TIM_ConfigClockSource+0x15a>
 8007a4c:	2b10      	cmp	r3, #16
 8007a4e:	d05a      	beq.n	8007b06 <HAL_TIM_ConfigClockSource+0x15a>
 8007a50:	e062      	b.n	8007b18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a62:	f000 fcd7 	bl	8008414 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007a74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	609a      	str	r2, [r3, #8]
      break;
 8007a7e:	e04f      	b.n	8007b20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a90:	f000 fcc0 	bl	8008414 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	689a      	ldr	r2, [r3, #8]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007aa2:	609a      	str	r2, [r3, #8]
      break;
 8007aa4:	e03c      	b.n	8007b20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	f000 fb7e 	bl	80081b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2150      	movs	r1, #80	@ 0x50
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 fc8d 	bl	80083de <TIM_ITRx_SetConfig>
      break;
 8007ac4:	e02c      	b.n	8007b20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	f000 fbda 	bl	800828c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2160      	movs	r1, #96	@ 0x60
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f000 fc7d 	bl	80083de <TIM_ITRx_SetConfig>
      break;
 8007ae4:	e01c      	b.n	8007b20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007af2:	461a      	mov	r2, r3
 8007af4:	f000 fb5e 	bl	80081b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2140      	movs	r1, #64	@ 0x40
 8007afe:	4618      	mov	r0, r3
 8007b00:	f000 fc6d 	bl	80083de <TIM_ITRx_SetConfig>
      break;
 8007b04:	e00c      	b.n	8007b20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	4610      	mov	r0, r2
 8007b12:	f000 fc64 	bl	80083de <TIM_ITRx_SetConfig>
      break;
 8007b16:	e003      	b.n	8007b20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b1c:	e000      	b.n	8007b20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
	...

08007b3c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	2b0c      	cmp	r3, #12
 8007b4e:	d831      	bhi.n	8007bb4 <HAL_TIM_ReadCapturedValue+0x78>
 8007b50:	a201      	add	r2, pc, #4	@ (adr r2, 8007b58 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b56:	bf00      	nop
 8007b58:	08007b8d 	.word	0x08007b8d
 8007b5c:	08007bb5 	.word	0x08007bb5
 8007b60:	08007bb5 	.word	0x08007bb5
 8007b64:	08007bb5 	.word	0x08007bb5
 8007b68:	08007b97 	.word	0x08007b97
 8007b6c:	08007bb5 	.word	0x08007bb5
 8007b70:	08007bb5 	.word	0x08007bb5
 8007b74:	08007bb5 	.word	0x08007bb5
 8007b78:	08007ba1 	.word	0x08007ba1
 8007b7c:	08007bb5 	.word	0x08007bb5
 8007b80:	08007bb5 	.word	0x08007bb5
 8007b84:	08007bb5 	.word	0x08007bb5
 8007b88:	08007bab 	.word	0x08007bab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b92:	60fb      	str	r3, [r7, #12]

      break;
 8007b94:	e00f      	b.n	8007bb6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b9c:	60fb      	str	r3, [r7, #12]

      break;
 8007b9e:	e00a      	b.n	8007bb6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ba6:	60fb      	str	r3, [r7, #12]

      break;
 8007ba8:	e005      	b.n	8007bb6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb0:	60fb      	str	r3, [r7, #12]

      break;
 8007bb2:	e000      	b.n	8007bb6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007bb4:	bf00      	nop
  }

  return tmpreg;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a46      	ldr	r2, [pc, #280]	@ (8007d40 <TIM_Base_SetConfig+0x12c>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d013      	beq.n	8007c54 <TIM_Base_SetConfig+0x40>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c32:	d00f      	beq.n	8007c54 <TIM_Base_SetConfig+0x40>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a43      	ldr	r2, [pc, #268]	@ (8007d44 <TIM_Base_SetConfig+0x130>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d00b      	beq.n	8007c54 <TIM_Base_SetConfig+0x40>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a42      	ldr	r2, [pc, #264]	@ (8007d48 <TIM_Base_SetConfig+0x134>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d007      	beq.n	8007c54 <TIM_Base_SetConfig+0x40>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4a41      	ldr	r2, [pc, #260]	@ (8007d4c <TIM_Base_SetConfig+0x138>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d003      	beq.n	8007c54 <TIM_Base_SetConfig+0x40>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a40      	ldr	r2, [pc, #256]	@ (8007d50 <TIM_Base_SetConfig+0x13c>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d108      	bne.n	8007c66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4a35      	ldr	r2, [pc, #212]	@ (8007d40 <TIM_Base_SetConfig+0x12c>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d02b      	beq.n	8007cc6 <TIM_Base_SetConfig+0xb2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c74:	d027      	beq.n	8007cc6 <TIM_Base_SetConfig+0xb2>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a32      	ldr	r2, [pc, #200]	@ (8007d44 <TIM_Base_SetConfig+0x130>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d023      	beq.n	8007cc6 <TIM_Base_SetConfig+0xb2>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a31      	ldr	r2, [pc, #196]	@ (8007d48 <TIM_Base_SetConfig+0x134>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d01f      	beq.n	8007cc6 <TIM_Base_SetConfig+0xb2>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a30      	ldr	r2, [pc, #192]	@ (8007d4c <TIM_Base_SetConfig+0x138>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d01b      	beq.n	8007cc6 <TIM_Base_SetConfig+0xb2>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a2f      	ldr	r2, [pc, #188]	@ (8007d50 <TIM_Base_SetConfig+0x13c>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d017      	beq.n	8007cc6 <TIM_Base_SetConfig+0xb2>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a2e      	ldr	r2, [pc, #184]	@ (8007d54 <TIM_Base_SetConfig+0x140>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d013      	beq.n	8007cc6 <TIM_Base_SetConfig+0xb2>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a2d      	ldr	r2, [pc, #180]	@ (8007d58 <TIM_Base_SetConfig+0x144>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d00f      	beq.n	8007cc6 <TIM_Base_SetConfig+0xb2>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	4a2c      	ldr	r2, [pc, #176]	@ (8007d5c <TIM_Base_SetConfig+0x148>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d00b      	beq.n	8007cc6 <TIM_Base_SetConfig+0xb2>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4a2b      	ldr	r2, [pc, #172]	@ (8007d60 <TIM_Base_SetConfig+0x14c>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d007      	beq.n	8007cc6 <TIM_Base_SetConfig+0xb2>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a2a      	ldr	r2, [pc, #168]	@ (8007d64 <TIM_Base_SetConfig+0x150>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d003      	beq.n	8007cc6 <TIM_Base_SetConfig+0xb2>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	4a29      	ldr	r2, [pc, #164]	@ (8007d68 <TIM_Base_SetConfig+0x154>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d108      	bne.n	8007cd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	689a      	ldr	r2, [r3, #8]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a10      	ldr	r2, [pc, #64]	@ (8007d40 <TIM_Base_SetConfig+0x12c>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d003      	beq.n	8007d0c <TIM_Base_SetConfig+0xf8>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a12      	ldr	r2, [pc, #72]	@ (8007d50 <TIM_Base_SetConfig+0x13c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d103      	bne.n	8007d14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	691a      	ldr	r2, [r3, #16]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	f003 0301 	and.w	r3, r3, #1
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d105      	bne.n	8007d32 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	f023 0201 	bic.w	r2, r3, #1
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	611a      	str	r2, [r3, #16]
  }
}
 8007d32:	bf00      	nop
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	40010000 	.word	0x40010000
 8007d44:	40000400 	.word	0x40000400
 8007d48:	40000800 	.word	0x40000800
 8007d4c:	40000c00 	.word	0x40000c00
 8007d50:	40010400 	.word	0x40010400
 8007d54:	40014000 	.word	0x40014000
 8007d58:	40014400 	.word	0x40014400
 8007d5c:	40014800 	.word	0x40014800
 8007d60:	40001800 	.word	0x40001800
 8007d64:	40001c00 	.word	0x40001c00
 8007d68:	40002000 	.word	0x40002000

08007d6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a1b      	ldr	r3, [r3, #32]
 8007d80:	f023 0201 	bic.w	r2, r3, #1
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f023 0303 	bic.w	r3, r3, #3
 8007da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f023 0302 	bic.w	r3, r3, #2
 8007db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a20      	ldr	r2, [pc, #128]	@ (8007e44 <TIM_OC1_SetConfig+0xd8>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d003      	beq.n	8007dd0 <TIM_OC1_SetConfig+0x64>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a1f      	ldr	r2, [pc, #124]	@ (8007e48 <TIM_OC1_SetConfig+0xdc>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d10c      	bne.n	8007dea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	f023 0308 	bic.w	r3, r3, #8
 8007dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f023 0304 	bic.w	r3, r3, #4
 8007de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a15      	ldr	r2, [pc, #84]	@ (8007e44 <TIM_OC1_SetConfig+0xd8>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d003      	beq.n	8007dfa <TIM_OC1_SetConfig+0x8e>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a14      	ldr	r2, [pc, #80]	@ (8007e48 <TIM_OC1_SetConfig+0xdc>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d111      	bne.n	8007e1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	685a      	ldr	r2, [r3, #4]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	697a      	ldr	r2, [r7, #20]
 8007e36:	621a      	str	r2, [r3, #32]
}
 8007e38:	bf00      	nop
 8007e3a:	371c      	adds	r7, #28
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr
 8007e44:	40010000 	.word	0x40010000
 8007e48:	40010400 	.word	0x40010400

08007e4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b087      	sub	sp, #28
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
 8007e60:	f023 0210 	bic.w	r2, r3, #16
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	021b      	lsls	r3, r3, #8
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	f023 0320 	bic.w	r3, r3, #32
 8007e96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	011b      	lsls	r3, r3, #4
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a22      	ldr	r2, [pc, #136]	@ (8007f30 <TIM_OC2_SetConfig+0xe4>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d003      	beq.n	8007eb4 <TIM_OC2_SetConfig+0x68>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a21      	ldr	r2, [pc, #132]	@ (8007f34 <TIM_OC2_SetConfig+0xe8>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d10d      	bne.n	8007ed0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007eba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	011b      	lsls	r3, r3, #4
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ece:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a17      	ldr	r2, [pc, #92]	@ (8007f30 <TIM_OC2_SetConfig+0xe4>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d003      	beq.n	8007ee0 <TIM_OC2_SetConfig+0x94>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a16      	ldr	r2, [pc, #88]	@ (8007f34 <TIM_OC2_SetConfig+0xe8>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d113      	bne.n	8007f08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ee6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007eee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	695b      	ldr	r3, [r3, #20]
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	693a      	ldr	r2, [r7, #16]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	693a      	ldr	r2, [r7, #16]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	693a      	ldr	r2, [r7, #16]
 8007f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	685a      	ldr	r2, [r3, #4]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	621a      	str	r2, [r3, #32]
}
 8007f22:	bf00      	nop
 8007f24:	371c      	adds	r7, #28
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	40010000 	.word	0x40010000
 8007f34:	40010400 	.word	0x40010400

08007f38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b087      	sub	sp, #28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a1b      	ldr	r3, [r3, #32]
 8007f4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	69db      	ldr	r3, [r3, #28]
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f023 0303 	bic.w	r3, r3, #3
 8007f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	021b      	lsls	r3, r3, #8
 8007f88:	697a      	ldr	r2, [r7, #20]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a21      	ldr	r2, [pc, #132]	@ (8008018 <TIM_OC3_SetConfig+0xe0>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d003      	beq.n	8007f9e <TIM_OC3_SetConfig+0x66>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a20      	ldr	r2, [pc, #128]	@ (800801c <TIM_OC3_SetConfig+0xe4>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d10d      	bne.n	8007fba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007fa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	021b      	lsls	r3, r3, #8
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007fb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a16      	ldr	r2, [pc, #88]	@ (8008018 <TIM_OC3_SetConfig+0xe0>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d003      	beq.n	8007fca <TIM_OC3_SetConfig+0x92>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a15      	ldr	r2, [pc, #84]	@ (800801c <TIM_OC3_SetConfig+0xe4>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d113      	bne.n	8007ff2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	011b      	lsls	r3, r3, #4
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	011b      	lsls	r3, r3, #4
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	685a      	ldr	r2, [r3, #4]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	621a      	str	r2, [r3, #32]
}
 800800c:	bf00      	nop
 800800e:	371c      	adds	r7, #28
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	40010000 	.word	0x40010000
 800801c:	40010400 	.word	0x40010400

08008020 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a1b      	ldr	r3, [r3, #32]
 8008034:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	69db      	ldr	r3, [r3, #28]
 8008046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800804e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	021b      	lsls	r3, r3, #8
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	4313      	orrs	r3, r2
 8008062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800806a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	031b      	lsls	r3, r3, #12
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	4313      	orrs	r3, r2
 8008076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a12      	ldr	r2, [pc, #72]	@ (80080c4 <TIM_OC4_SetConfig+0xa4>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d003      	beq.n	8008088 <TIM_OC4_SetConfig+0x68>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a11      	ldr	r2, [pc, #68]	@ (80080c8 <TIM_OC4_SetConfig+0xa8>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d109      	bne.n	800809c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800808e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	019b      	lsls	r3, r3, #6
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	4313      	orrs	r3, r2
 800809a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	685a      	ldr	r2, [r3, #4]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	621a      	str	r2, [r3, #32]
}
 80080b6:	bf00      	nop
 80080b8:	371c      	adds	r7, #28
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	40010000 	.word	0x40010000
 80080c8:	40010400 	.word	0x40010400

080080cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b087      	sub	sp, #28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
 80080d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6a1b      	ldr	r3, [r3, #32]
 80080de:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6a1b      	ldr	r3, [r3, #32]
 80080e4:	f023 0201 	bic.w	r2, r3, #1
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	4a28      	ldr	r2, [pc, #160]	@ (8008198 <TIM_TI1_SetConfig+0xcc>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d01b      	beq.n	8008132 <TIM_TI1_SetConfig+0x66>
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008100:	d017      	beq.n	8008132 <TIM_TI1_SetConfig+0x66>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	4a25      	ldr	r2, [pc, #148]	@ (800819c <TIM_TI1_SetConfig+0xd0>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d013      	beq.n	8008132 <TIM_TI1_SetConfig+0x66>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	4a24      	ldr	r2, [pc, #144]	@ (80081a0 <TIM_TI1_SetConfig+0xd4>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d00f      	beq.n	8008132 <TIM_TI1_SetConfig+0x66>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	4a23      	ldr	r2, [pc, #140]	@ (80081a4 <TIM_TI1_SetConfig+0xd8>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d00b      	beq.n	8008132 <TIM_TI1_SetConfig+0x66>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	4a22      	ldr	r2, [pc, #136]	@ (80081a8 <TIM_TI1_SetConfig+0xdc>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d007      	beq.n	8008132 <TIM_TI1_SetConfig+0x66>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	4a21      	ldr	r2, [pc, #132]	@ (80081ac <TIM_TI1_SetConfig+0xe0>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d003      	beq.n	8008132 <TIM_TI1_SetConfig+0x66>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	4a20      	ldr	r2, [pc, #128]	@ (80081b0 <TIM_TI1_SetConfig+0xe4>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d101      	bne.n	8008136 <TIM_TI1_SetConfig+0x6a>
 8008132:	2301      	movs	r3, #1
 8008134:	e000      	b.n	8008138 <TIM_TI1_SetConfig+0x6c>
 8008136:	2300      	movs	r3, #0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d008      	beq.n	800814e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	f023 0303 	bic.w	r3, r3, #3
 8008142:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4313      	orrs	r3, r2
 800814a:	617b      	str	r3, [r7, #20]
 800814c:	e003      	b.n	8008156 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	f043 0301 	orr.w	r3, r3, #1
 8008154:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800815c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	011b      	lsls	r3, r3, #4
 8008162:	b2db      	uxtb	r3, r3
 8008164:	697a      	ldr	r2, [r7, #20]
 8008166:	4313      	orrs	r3, r2
 8008168:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	f023 030a 	bic.w	r3, r3, #10
 8008170:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	f003 030a 	and.w	r3, r3, #10
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	4313      	orrs	r3, r2
 800817c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	693a      	ldr	r2, [r7, #16]
 8008188:	621a      	str	r2, [r3, #32]
}
 800818a:	bf00      	nop
 800818c:	371c      	adds	r7, #28
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	40010000 	.word	0x40010000
 800819c:	40000400 	.word	0x40000400
 80081a0:	40000800 	.word	0x40000800
 80081a4:	40000c00 	.word	0x40000c00
 80081a8:	40010400 	.word	0x40010400
 80081ac:	40014000 	.word	0x40014000
 80081b0:	40001800 	.word	0x40001800

080081b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b087      	sub	sp, #28
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
 80081c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6a1b      	ldr	r3, [r3, #32]
 80081ca:	f023 0201 	bic.w	r2, r3, #1
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	011b      	lsls	r3, r3, #4
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f023 030a 	bic.w	r3, r3, #10
 80081f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	693a      	ldr	r2, [r7, #16]
 80081fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	621a      	str	r2, [r3, #32]
}
 8008206:	bf00      	nop
 8008208:	371c      	adds	r7, #28
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008212:	b480      	push	{r7}
 8008214:	b087      	sub	sp, #28
 8008216:	af00      	add	r7, sp, #0
 8008218:	60f8      	str	r0, [r7, #12]
 800821a:	60b9      	str	r1, [r7, #8]
 800821c:	607a      	str	r2, [r7, #4]
 800821e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6a1b      	ldr	r3, [r3, #32]
 8008224:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	f023 0210 	bic.w	r2, r3, #16
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800823e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	021b      	lsls	r3, r3, #8
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	4313      	orrs	r3, r2
 8008248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008250:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	031b      	lsls	r3, r3, #12
 8008256:	b29b      	uxth	r3, r3
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	4313      	orrs	r3, r2
 800825c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008264:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	011b      	lsls	r3, r3, #4
 800826a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800826e:	697a      	ldr	r2, [r7, #20]
 8008270:	4313      	orrs	r3, r2
 8008272:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	621a      	str	r2, [r3, #32]
}
 8008280:	bf00      	nop
 8008282:	371c      	adds	r7, #28
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6a1b      	ldr	r3, [r3, #32]
 800829c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	f023 0210 	bic.w	r2, r3, #16
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	699b      	ldr	r3, [r3, #24]
 80082ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80082b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	031b      	lsls	r3, r3, #12
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	4313      	orrs	r3, r2
 80082c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80082c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	011b      	lsls	r3, r3, #4
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	693a      	ldr	r2, [r7, #16]
 80082d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	697a      	ldr	r2, [r7, #20]
 80082de:	621a      	str	r2, [r3, #32]
}
 80082e0:	bf00      	nop
 80082e2:	371c      	adds	r7, #28
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b087      	sub	sp, #28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
 80082f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6a1b      	ldr	r3, [r3, #32]
 8008304:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	69db      	ldr	r3, [r3, #28]
 8008310:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	f023 0303 	bic.w	r3, r3, #3
 8008318:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800831a:	693a      	ldr	r2, [r7, #16]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4313      	orrs	r3, r2
 8008320:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008328:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	011b      	lsls	r3, r3, #4
 800832e:	b2db      	uxtb	r3, r3
 8008330:	693a      	ldr	r2, [r7, #16]
 8008332:	4313      	orrs	r3, r2
 8008334:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800833c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	021b      	lsls	r3, r3, #8
 8008342:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	4313      	orrs	r3, r2
 800834a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	693a      	ldr	r2, [r7, #16]
 8008350:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	697a      	ldr	r2, [r7, #20]
 8008356:	621a      	str	r2, [r3, #32]
}
 8008358:	bf00      	nop
 800835a:	371c      	adds	r7, #28
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008364:	b480      	push	{r7}
 8008366:	b087      	sub	sp, #28
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6a1b      	ldr	r3, [r3, #32]
 800837c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	69db      	ldr	r3, [r3, #28]
 8008388:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008390:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	021b      	lsls	r3, r3, #8
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	4313      	orrs	r3, r2
 800839a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80083a2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	031b      	lsls	r3, r3, #12
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80083b6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	031b      	lsls	r3, r3, #12
 80083bc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	693a      	ldr	r2, [r7, #16]
 80083ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	621a      	str	r2, [r3, #32]
}
 80083d2:	bf00      	nop
 80083d4:	371c      	adds	r7, #28
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083de:	b480      	push	{r7}
 80083e0:	b085      	sub	sp, #20
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	f043 0307 	orr.w	r3, r3, #7
 8008400:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	609a      	str	r2, [r3, #8]
}
 8008408:	bf00      	nop
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008414:	b480      	push	{r7}
 8008416:	b087      	sub	sp, #28
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
 8008420:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800842e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	021a      	lsls	r2, r3, #8
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	431a      	orrs	r2, r3
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	4313      	orrs	r3, r2
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	4313      	orrs	r3, r2
 8008440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	697a      	ldr	r2, [r7, #20]
 8008446:	609a      	str	r2, [r3, #8]
}
 8008448:	bf00      	nop
 800844a:	371c      	adds	r7, #28
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008454:	b480      	push	{r7}
 8008456:	b087      	sub	sp, #28
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	f003 031f 	and.w	r3, r3, #31
 8008466:	2201      	movs	r2, #1
 8008468:	fa02 f303 	lsl.w	r3, r2, r3
 800846c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6a1a      	ldr	r2, [r3, #32]
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	43db      	mvns	r3, r3
 8008476:	401a      	ands	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6a1a      	ldr	r2, [r3, #32]
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	f003 031f 	and.w	r3, r3, #31
 8008486:	6879      	ldr	r1, [r7, #4]
 8008488:	fa01 f303 	lsl.w	r3, r1, r3
 800848c:	431a      	orrs	r2, r3
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	621a      	str	r2, [r3, #32]
}
 8008492:	bf00      	nop
 8008494:	371c      	adds	r7, #28
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
	...

080084a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d101      	bne.n	80084b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084b4:	2302      	movs	r3, #2
 80084b6:	e05a      	b.n	800856e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2202      	movs	r2, #2
 80084c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a21      	ldr	r2, [pc, #132]	@ (800857c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d022      	beq.n	8008542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008504:	d01d      	beq.n	8008542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a1d      	ldr	r2, [pc, #116]	@ (8008580 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d018      	beq.n	8008542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a1b      	ldr	r2, [pc, #108]	@ (8008584 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d013      	beq.n	8008542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a1a      	ldr	r2, [pc, #104]	@ (8008588 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d00e      	beq.n	8008542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a18      	ldr	r2, [pc, #96]	@ (800858c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d009      	beq.n	8008542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a17      	ldr	r2, [pc, #92]	@ (8008590 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d004      	beq.n	8008542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a15      	ldr	r2, [pc, #84]	@ (8008594 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d10c      	bne.n	800855c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008548:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	4313      	orrs	r3, r2
 8008552:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68ba      	ldr	r2, [r7, #8]
 800855a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3714      	adds	r7, #20
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	40010000 	.word	0x40010000
 8008580:	40000400 	.word	0x40000400
 8008584:	40000800 	.word	0x40000800
 8008588:	40000c00 	.word	0x40000c00
 800858c:	40010400 	.word	0x40010400
 8008590:	40014000 	.word	0x40014000
 8008594:	40001800 	.word	0x40001800

08008598 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80085a2:	2300      	movs	r3, #0
 80085a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d101      	bne.n	80085b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80085b0:	2302      	movs	r3, #2
 80085b2:	e03d      	b.n	8008630 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	4313      	orrs	r3, r2
 8008600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	695b      	ldr	r3, [r3, #20]
 800860c:	4313      	orrs	r3, r2
 800860e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	4313      	orrs	r3, r2
 800861c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3714      	adds	r7, #20
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d101      	bne.n	8008676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e042      	b.n	80086fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d106      	bne.n	8008690 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f7fb fc5c 	bl	8003f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2224      	movs	r2, #36	@ 0x24
 8008694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68da      	ldr	r2, [r3, #12]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80086a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fdbd 	bl	8009228 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	691a      	ldr	r2, [r3, #16]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80086bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	695a      	ldr	r2, [r3, #20]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80086cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68da      	ldr	r2, [r3, #12]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80086dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2220      	movs	r2, #32
 80086e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2220      	movs	r2, #32
 80086f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b08a      	sub	sp, #40	@ 0x28
 8008708:	af02      	add	r7, sp, #8
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	603b      	str	r3, [r7, #0]
 8008710:	4613      	mov	r3, r2
 8008712:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008714:	2300      	movs	r3, #0
 8008716:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b20      	cmp	r3, #32
 8008722:	d175      	bne.n	8008810 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d002      	beq.n	8008730 <HAL_UART_Transmit+0x2c>
 800872a:	88fb      	ldrh	r3, [r7, #6]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d101      	bne.n	8008734 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	e06e      	b.n	8008812 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2221      	movs	r2, #33	@ 0x21
 800873e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008742:	f7fb fdf5 	bl	8004330 <HAL_GetTick>
 8008746:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	88fa      	ldrh	r2, [r7, #6]
 800874c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	88fa      	ldrh	r2, [r7, #6]
 8008752:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800875c:	d108      	bne.n	8008770 <HAL_UART_Transmit+0x6c>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d104      	bne.n	8008770 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008766:	2300      	movs	r3, #0
 8008768:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	61bb      	str	r3, [r7, #24]
 800876e:	e003      	b.n	8008778 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008774:	2300      	movs	r3, #0
 8008776:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008778:	e02e      	b.n	80087d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	9300      	str	r3, [sp, #0]
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	2200      	movs	r2, #0
 8008782:	2180      	movs	r1, #128	@ 0x80
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f000 fb1f 	bl	8008dc8 <UART_WaitOnFlagUntilTimeout>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d005      	beq.n	800879c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2220      	movs	r2, #32
 8008794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e03a      	b.n	8008812 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10b      	bne.n	80087ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	881b      	ldrh	r3, [r3, #0]
 80087a6:	461a      	mov	r2, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	3302      	adds	r3, #2
 80087b6:	61bb      	str	r3, [r7, #24]
 80087b8:	e007      	b.n	80087ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	781a      	ldrb	r2, [r3, #0]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	3301      	adds	r3, #1
 80087c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	3b01      	subs	r3, #1
 80087d2:	b29a      	uxth	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80087dc:	b29b      	uxth	r3, r3
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1cb      	bne.n	800877a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	2200      	movs	r2, #0
 80087ea:	2140      	movs	r1, #64	@ 0x40
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 faeb 	bl	8008dc8 <UART_WaitOnFlagUntilTimeout>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d005      	beq.n	8008804 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2220      	movs	r2, #32
 80087fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	e006      	b.n	8008812 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2220      	movs	r2, #32
 8008808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800880c:	2300      	movs	r3, #0
 800880e:	e000      	b.n	8008812 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008810:	2302      	movs	r3, #2
  }
}
 8008812:	4618      	mov	r0, r3
 8008814:	3720      	adds	r7, #32
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800881a:	b580      	push	{r7, lr}
 800881c:	b084      	sub	sp, #16
 800881e:	af00      	add	r7, sp, #0
 8008820:	60f8      	str	r0, [r7, #12]
 8008822:	60b9      	str	r1, [r7, #8]
 8008824:	4613      	mov	r3, r2
 8008826:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800882e:	b2db      	uxtb	r3, r3
 8008830:	2b20      	cmp	r3, #32
 8008832:	d112      	bne.n	800885a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d002      	beq.n	8008840 <HAL_UART_Receive_IT+0x26>
 800883a:	88fb      	ldrh	r3, [r7, #6]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d101      	bne.n	8008844 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008840:	2301      	movs	r3, #1
 8008842:	e00b      	b.n	800885c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800884a:	88fb      	ldrh	r3, [r7, #6]
 800884c:	461a      	mov	r2, r3
 800884e:	68b9      	ldr	r1, [r7, #8]
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f000 fb12 	bl	8008e7a <UART_Start_Receive_IT>
 8008856:	4603      	mov	r3, r0
 8008858:	e000      	b.n	800885c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800885a:	2302      	movs	r3, #2
  }
}
 800885c:	4618      	mov	r0, r3
 800885e:	3710      	adds	r7, #16
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b0ba      	sub	sp, #232	@ 0xe8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800888a:	2300      	movs	r3, #0
 800888c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008890:	2300      	movs	r3, #0
 8008892:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800889a:	f003 030f 	and.w	r3, r3, #15
 800889e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80088a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10f      	bne.n	80088ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088ae:	f003 0320 	and.w	r3, r3, #32
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d009      	beq.n	80088ca <HAL_UART_IRQHandler+0x66>
 80088b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088ba:	f003 0320 	and.w	r3, r3, #32
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d003      	beq.n	80088ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fbf2 	bl	80090ac <UART_Receive_IT>
      return;
 80088c8:	e25b      	b.n	8008d82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80088ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f000 80de 	beq.w	8008a90 <HAL_UART_IRQHandler+0x22c>
 80088d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088d8:	f003 0301 	and.w	r3, r3, #1
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d106      	bne.n	80088ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80088e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 80d1 	beq.w	8008a90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80088ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00b      	beq.n	8008912 <HAL_UART_IRQHandler+0xae>
 80088fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008902:	2b00      	cmp	r3, #0
 8008904:	d005      	beq.n	8008912 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800890a:	f043 0201 	orr.w	r2, r3, #1
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008916:	f003 0304 	and.w	r3, r3, #4
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00b      	beq.n	8008936 <HAL_UART_IRQHandler+0xd2>
 800891e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008922:	f003 0301 	and.w	r3, r3, #1
 8008926:	2b00      	cmp	r3, #0
 8008928:	d005      	beq.n	8008936 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800892e:	f043 0202 	orr.w	r2, r3, #2
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800893a:	f003 0302 	and.w	r3, r3, #2
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00b      	beq.n	800895a <HAL_UART_IRQHandler+0xf6>
 8008942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008946:	f003 0301 	and.w	r3, r3, #1
 800894a:	2b00      	cmp	r3, #0
 800894c:	d005      	beq.n	800895a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008952:	f043 0204 	orr.w	r2, r3, #4
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800895a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800895e:	f003 0308 	and.w	r3, r3, #8
 8008962:	2b00      	cmp	r3, #0
 8008964:	d011      	beq.n	800898a <HAL_UART_IRQHandler+0x126>
 8008966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800896a:	f003 0320 	and.w	r3, r3, #32
 800896e:	2b00      	cmp	r3, #0
 8008970:	d105      	bne.n	800897e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	2b00      	cmp	r3, #0
 800897c:	d005      	beq.n	800898a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008982:	f043 0208 	orr.w	r2, r3, #8
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 81f2 	beq.w	8008d78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008998:	f003 0320 	and.w	r3, r3, #32
 800899c:	2b00      	cmp	r3, #0
 800899e:	d008      	beq.n	80089b2 <HAL_UART_IRQHandler+0x14e>
 80089a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089a4:	f003 0320 	and.w	r3, r3, #32
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d002      	beq.n	80089b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fb7d 	bl	80090ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089bc:	2b40      	cmp	r3, #64	@ 0x40
 80089be:	bf0c      	ite	eq
 80089c0:	2301      	moveq	r3, #1
 80089c2:	2300      	movne	r3, #0
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ce:	f003 0308 	and.w	r3, r3, #8
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d103      	bne.n	80089de <HAL_UART_IRQHandler+0x17a>
 80089d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d04f      	beq.n	8008a7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fa85 	bl	8008eee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089ee:	2b40      	cmp	r3, #64	@ 0x40
 80089f0:	d141      	bne.n	8008a76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3314      	adds	r3, #20
 80089f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008a00:	e853 3f00 	ldrex	r3, [r3]
 8008a04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008a08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	3314      	adds	r3, #20
 8008a1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008a1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008a22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008a2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008a2e:	e841 2300 	strex	r3, r2, [r1]
 8008a32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008a36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1d9      	bne.n	80089f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d013      	beq.n	8008a6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a4a:	4a7e      	ldr	r2, [pc, #504]	@ (8008c44 <HAL_UART_IRQHandler+0x3e0>)
 8008a4c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fc fa1d 	bl	8004e92 <HAL_DMA_Abort_IT>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d016      	beq.n	8008a8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008a68:	4610      	mov	r0, r2
 8008a6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a6c:	e00e      	b.n	8008a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 f994 	bl	8008d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a74:	e00a      	b.n	8008a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f990 	bl	8008d9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a7c:	e006      	b.n	8008a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f98c 	bl	8008d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008a8a:	e175      	b.n	8008d78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a8c:	bf00      	nop
    return;
 8008a8e:	e173      	b.n	8008d78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	f040 814f 	bne.w	8008d38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a9e:	f003 0310 	and.w	r3, r3, #16
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 8148 	beq.w	8008d38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aac:	f003 0310 	and.w	r3, r3, #16
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f000 8141 	beq.w	8008d38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	60bb      	str	r3, [r7, #8]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	60bb      	str	r3, [r7, #8]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	60bb      	str	r3, [r7, #8]
 8008aca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ad6:	2b40      	cmp	r3, #64	@ 0x40
 8008ad8:	f040 80b6 	bne.w	8008c48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ae8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f000 8145 	beq.w	8008d7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008af6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008afa:	429a      	cmp	r2, r3
 8008afc:	f080 813e 	bcs.w	8008d7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b0c:	69db      	ldr	r3, [r3, #28]
 8008b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b12:	f000 8088 	beq.w	8008c26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	330c      	adds	r3, #12
 8008b1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008b24:	e853 3f00 	ldrex	r3, [r3]
 8008b28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008b2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	330c      	adds	r3, #12
 8008b3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008b42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008b46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008b4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008b52:	e841 2300 	strex	r3, r2, [r1]
 8008b56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008b5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1d9      	bne.n	8008b16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	3314      	adds	r3, #20
 8008b68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b6c:	e853 3f00 	ldrex	r3, [r3]
 8008b70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008b72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b74:	f023 0301 	bic.w	r3, r3, #1
 8008b78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	3314      	adds	r3, #20
 8008b82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008b86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008b8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008b8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008b92:	e841 2300 	strex	r3, r2, [r1]
 8008b96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008b98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d1e1      	bne.n	8008b62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	3314      	adds	r3, #20
 8008ba4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ba8:	e853 3f00 	ldrex	r3, [r3]
 8008bac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008bae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	3314      	adds	r3, #20
 8008bbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008bc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008bc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008bc8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008bca:	e841 2300 	strex	r3, r2, [r1]
 8008bce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008bd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1e3      	bne.n	8008b9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2220      	movs	r2, #32
 8008bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	330c      	adds	r3, #12
 8008bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bee:	e853 3f00 	ldrex	r3, [r3]
 8008bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008bf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008bf6:	f023 0310 	bic.w	r3, r3, #16
 8008bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	330c      	adds	r3, #12
 8008c04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008c08:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008c0a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c10:	e841 2300 	strex	r3, r2, [r1]
 8008c14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1e3      	bne.n	8008be4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fc f8c6 	bl	8004db2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2202      	movs	r2, #2
 8008c2a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	1ad3      	subs	r3, r2, r3
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 f8b7 	bl	8008db0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c42:	e09b      	b.n	8008d7c <HAL_UART_IRQHandler+0x518>
 8008c44:	08008fb5 	.word	0x08008fb5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f000 808e 	beq.w	8008d80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008c64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f000 8089 	beq.w	8008d80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	330c      	adds	r3, #12
 8008c74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c78:	e853 3f00 	ldrex	r3, [r3]
 8008c7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	330c      	adds	r3, #12
 8008c8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008c92:	647a      	str	r2, [r7, #68]	@ 0x44
 8008c94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c9a:	e841 2300 	strex	r3, r2, [r1]
 8008c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1e3      	bne.n	8008c6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	3314      	adds	r3, #20
 8008cac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb0:	e853 3f00 	ldrex	r3, [r3]
 8008cb4:	623b      	str	r3, [r7, #32]
   return(result);
 8008cb6:	6a3b      	ldr	r3, [r7, #32]
 8008cb8:	f023 0301 	bic.w	r3, r3, #1
 8008cbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	3314      	adds	r3, #20
 8008cc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008cca:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008cd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cd2:	e841 2300 	strex	r3, r2, [r1]
 8008cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1e3      	bne.n	8008ca6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2220      	movs	r2, #32
 8008ce2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	330c      	adds	r3, #12
 8008cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	e853 3f00 	ldrex	r3, [r3]
 8008cfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f023 0310 	bic.w	r3, r3, #16
 8008d02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	330c      	adds	r3, #12
 8008d0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008d10:	61fa      	str	r2, [r7, #28]
 8008d12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d14:	69b9      	ldr	r1, [r7, #24]
 8008d16:	69fa      	ldr	r2, [r7, #28]
 8008d18:	e841 2300 	strex	r3, r2, [r1]
 8008d1c:	617b      	str	r3, [r7, #20]
   return(result);
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1e3      	bne.n	8008cec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2202      	movs	r2, #2
 8008d28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f83d 	bl	8008db0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008d36:	e023      	b.n	8008d80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d009      	beq.n	8008d58 <HAL_UART_IRQHandler+0x4f4>
 8008d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d003      	beq.n	8008d58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f943 	bl	8008fdc <UART_Transmit_IT>
    return;
 8008d56:	e014      	b.n	8008d82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00e      	beq.n	8008d82 <HAL_UART_IRQHandler+0x51e>
 8008d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d008      	beq.n	8008d82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 f983 	bl	800907c <UART_EndTransmit_IT>
    return;
 8008d76:	e004      	b.n	8008d82 <HAL_UART_IRQHandler+0x51e>
    return;
 8008d78:	bf00      	nop
 8008d7a:	e002      	b.n	8008d82 <HAL_UART_IRQHandler+0x51e>
      return;
 8008d7c:	bf00      	nop
 8008d7e:	e000      	b.n	8008d82 <HAL_UART_IRQHandler+0x51e>
      return;
 8008d80:	bf00      	nop
  }
}
 8008d82:	37e8      	adds	r7, #232	@ 0xe8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	460b      	mov	r3, r1
 8008dba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	603b      	str	r3, [r7, #0]
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dd8:	e03b      	b.n	8008e52 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008de0:	d037      	beq.n	8008e52 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008de2:	f7fb faa5 	bl	8004330 <HAL_GetTick>
 8008de6:	4602      	mov	r2, r0
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	6a3a      	ldr	r2, [r7, #32]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d302      	bcc.n	8008df8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008df2:	6a3b      	ldr	r3, [r7, #32]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d101      	bne.n	8008dfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e03a      	b.n	8008e72 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	f003 0304 	and.w	r3, r3, #4
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d023      	beq.n	8008e52 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	2b80      	cmp	r3, #128	@ 0x80
 8008e0e:	d020      	beq.n	8008e52 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	2b40      	cmp	r3, #64	@ 0x40
 8008e14:	d01d      	beq.n	8008e52 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 0308 	and.w	r3, r3, #8
 8008e20:	2b08      	cmp	r3, #8
 8008e22:	d116      	bne.n	8008e52 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008e24:	2300      	movs	r3, #0
 8008e26:	617b      	str	r3, [r7, #20]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	617b      	str	r3, [r7, #20]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	617b      	str	r3, [r7, #20]
 8008e38:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 f857 	bl	8008eee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2208      	movs	r2, #8
 8008e44:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e00f      	b.n	8008e72 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	bf0c      	ite	eq
 8008e62:	2301      	moveq	r3, #1
 8008e64:	2300      	movne	r3, #0
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	461a      	mov	r2, r3
 8008e6a:	79fb      	ldrb	r3, [r7, #7]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d0b4      	beq.n	8008dda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3718      	adds	r7, #24
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e7a:	b480      	push	{r7}
 8008e7c:	b085      	sub	sp, #20
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	60f8      	str	r0, [r7, #12]
 8008e82:	60b9      	str	r1, [r7, #8]
 8008e84:	4613      	mov	r3, r2
 8008e86:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	88fa      	ldrh	r2, [r7, #6]
 8008e92:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	88fa      	ldrh	r2, [r7, #6]
 8008e98:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2222      	movs	r2, #34	@ 0x22
 8008ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d007      	beq.n	8008ec0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68da      	ldr	r2, [r3, #12]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ebe:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	695a      	ldr	r2, [r3, #20]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f042 0201 	orr.w	r2, r2, #1
 8008ece:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68da      	ldr	r2, [r3, #12]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f042 0220 	orr.w	r2, r2, #32
 8008ede:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3714      	adds	r7, #20
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr

08008eee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b095      	sub	sp, #84	@ 0x54
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	330c      	adds	r3, #12
 8008efc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f00:	e853 3f00 	ldrex	r3, [r3]
 8008f04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	330c      	adds	r3, #12
 8008f14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008f16:	643a      	str	r2, [r7, #64]	@ 0x40
 8008f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f1e:	e841 2300 	strex	r3, r2, [r1]
 8008f22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1e5      	bne.n	8008ef6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	3314      	adds	r3, #20
 8008f30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f32:	6a3b      	ldr	r3, [r7, #32]
 8008f34:	e853 3f00 	ldrex	r3, [r3]
 8008f38:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	f023 0301 	bic.w	r3, r3, #1
 8008f40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	3314      	adds	r3, #20
 8008f48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f52:	e841 2300 	strex	r3, r2, [r1]
 8008f56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1e5      	bne.n	8008f2a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d119      	bne.n	8008f9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	330c      	adds	r3, #12
 8008f6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	e853 3f00 	ldrex	r3, [r3]
 8008f74:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	f023 0310 	bic.w	r3, r3, #16
 8008f7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	330c      	adds	r3, #12
 8008f84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f86:	61ba      	str	r2, [r7, #24]
 8008f88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8a:	6979      	ldr	r1, [r7, #20]
 8008f8c:	69ba      	ldr	r2, [r7, #24]
 8008f8e:	e841 2300 	strex	r3, r2, [r1]
 8008f92:	613b      	str	r3, [r7, #16]
   return(result);
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1e5      	bne.n	8008f66 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2220      	movs	r2, #32
 8008f9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008fa8:	bf00      	nop
 8008faa:	3754      	adds	r7, #84	@ 0x54
 8008fac:	46bd      	mov	sp, r7
 8008fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb2:	4770      	bx	lr

08008fb4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f7ff fee4 	bl	8008d9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fd4:	bf00      	nop
 8008fd6:	3710      	adds	r7, #16
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd80      	pop	{r7, pc}

08008fdc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	2b21      	cmp	r3, #33	@ 0x21
 8008fee:	d13e      	bne.n	800906e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ff8:	d114      	bne.n	8009024 <UART_Transmit_IT+0x48>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d110      	bne.n	8009024 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6a1b      	ldr	r3, [r3, #32]
 8009006:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	881b      	ldrh	r3, [r3, #0]
 800900c:	461a      	mov	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009016:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6a1b      	ldr	r3, [r3, #32]
 800901c:	1c9a      	adds	r2, r3, #2
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	621a      	str	r2, [r3, #32]
 8009022:	e008      	b.n	8009036 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a1b      	ldr	r3, [r3, #32]
 8009028:	1c59      	adds	r1, r3, #1
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	6211      	str	r1, [r2, #32]
 800902e:	781a      	ldrb	r2, [r3, #0]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800903a:	b29b      	uxth	r3, r3
 800903c:	3b01      	subs	r3, #1
 800903e:	b29b      	uxth	r3, r3
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	4619      	mov	r1, r3
 8009044:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10f      	bne.n	800906a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68da      	ldr	r2, [r3, #12]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009058:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68da      	ldr	r2, [r3, #12]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009068:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	e000      	b.n	8009070 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800906e:	2302      	movs	r3, #2
  }
}
 8009070:	4618      	mov	r0, r3
 8009072:	3714      	adds	r7, #20
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68da      	ldr	r2, [r3, #12]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009092:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2220      	movs	r2, #32
 8009098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7ff fe73 	bl	8008d88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b08c      	sub	sp, #48	@ 0x30
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	2b22      	cmp	r3, #34	@ 0x22
 80090be:	f040 80ae 	bne.w	800921e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80090ca:	d117      	bne.n	80090fc <UART_Receive_IT+0x50>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d113      	bne.n	80090fc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80090d4:	2300      	movs	r3, #0
 80090d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090f4:	1c9a      	adds	r2, r3, #2
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80090fa:	e026      	b.n	800914a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009100:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009102:	2300      	movs	r3, #0
 8009104:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800910e:	d007      	beq.n	8009120 <UART_Receive_IT+0x74>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d10a      	bne.n	800912e <UART_Receive_IT+0x82>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d106      	bne.n	800912e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	b2da      	uxtb	r2, r3
 8009128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800912a:	701a      	strb	r2, [r3, #0]
 800912c:	e008      	b.n	8009140 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	b2db      	uxtb	r3, r3
 8009136:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800913a:	b2da      	uxtb	r2, r3
 800913c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800913e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009144:	1c5a      	adds	r2, r3, #1
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800914e:	b29b      	uxth	r3, r3
 8009150:	3b01      	subs	r3, #1
 8009152:	b29b      	uxth	r3, r3
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	4619      	mov	r1, r3
 8009158:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800915a:	2b00      	cmp	r3, #0
 800915c:	d15d      	bne.n	800921a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68da      	ldr	r2, [r3, #12]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f022 0220 	bic.w	r2, r2, #32
 800916c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68da      	ldr	r2, [r3, #12]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800917c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	695a      	ldr	r2, [r3, #20]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f022 0201 	bic.w	r2, r2, #1
 800918c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2220      	movs	r2, #32
 8009192:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d135      	bne.n	8009210 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	330c      	adds	r3, #12
 80091b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	e853 3f00 	ldrex	r3, [r3]
 80091b8:	613b      	str	r3, [r7, #16]
   return(result);
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	f023 0310 	bic.w	r3, r3, #16
 80091c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	330c      	adds	r3, #12
 80091c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091ca:	623a      	str	r2, [r7, #32]
 80091cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ce:	69f9      	ldr	r1, [r7, #28]
 80091d0:	6a3a      	ldr	r2, [r7, #32]
 80091d2:	e841 2300 	strex	r3, r2, [r1]
 80091d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d1e5      	bne.n	80091aa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f003 0310 	and.w	r3, r3, #16
 80091e8:	2b10      	cmp	r3, #16
 80091ea:	d10a      	bne.n	8009202 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80091ec:	2300      	movs	r3, #0
 80091ee:	60fb      	str	r3, [r7, #12]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	60fb      	str	r3, [r7, #12]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	60fb      	str	r3, [r7, #12]
 8009200:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7ff fdd1 	bl	8008db0 <HAL_UARTEx_RxEventCallback>
 800920e:	e002      	b.n	8009216 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f7f9 fedd 	bl	8002fd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009216:	2300      	movs	r3, #0
 8009218:	e002      	b.n	8009220 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800921a:	2300      	movs	r3, #0
 800921c:	e000      	b.n	8009220 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800921e:	2302      	movs	r3, #2
  }
}
 8009220:	4618      	mov	r0, r3
 8009222:	3730      	adds	r7, #48	@ 0x30
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}

08009228 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800922c:	b0c0      	sub	sp, #256	@ 0x100
 800922e:	af00      	add	r7, sp, #0
 8009230:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	691b      	ldr	r3, [r3, #16]
 800923c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009244:	68d9      	ldr	r1, [r3, #12]
 8009246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	ea40 0301 	orr.w	r3, r0, r1
 8009250:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009256:	689a      	ldr	r2, [r3, #8]
 8009258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	431a      	orrs	r2, r3
 8009260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009264:	695b      	ldr	r3, [r3, #20]
 8009266:	431a      	orrs	r2, r3
 8009268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800926c:	69db      	ldr	r3, [r3, #28]
 800926e:	4313      	orrs	r3, r2
 8009270:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009280:	f021 010c 	bic.w	r1, r1, #12
 8009284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800928e:	430b      	orrs	r3, r1
 8009290:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800929e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092a2:	6999      	ldr	r1, [r3, #24]
 80092a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	ea40 0301 	orr.w	r3, r0, r1
 80092ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80092b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	4b8f      	ldr	r3, [pc, #572]	@ (80094f4 <UART_SetConfig+0x2cc>)
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d005      	beq.n	80092c8 <UART_SetConfig+0xa0>
 80092bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	4b8d      	ldr	r3, [pc, #564]	@ (80094f8 <UART_SetConfig+0x2d0>)
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d104      	bne.n	80092d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80092c8:	f7fd fc7e 	bl	8006bc8 <HAL_RCC_GetPCLK2Freq>
 80092cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80092d0:	e003      	b.n	80092da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80092d2:	f7fd fc65 	bl	8006ba0 <HAL_RCC_GetPCLK1Freq>
 80092d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092de:	69db      	ldr	r3, [r3, #28]
 80092e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092e4:	f040 810c 	bne.w	8009500 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80092e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092ec:	2200      	movs	r2, #0
 80092ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80092f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80092f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80092fa:	4622      	mov	r2, r4
 80092fc:	462b      	mov	r3, r5
 80092fe:	1891      	adds	r1, r2, r2
 8009300:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009302:	415b      	adcs	r3, r3
 8009304:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009306:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800930a:	4621      	mov	r1, r4
 800930c:	eb12 0801 	adds.w	r8, r2, r1
 8009310:	4629      	mov	r1, r5
 8009312:	eb43 0901 	adc.w	r9, r3, r1
 8009316:	f04f 0200 	mov.w	r2, #0
 800931a:	f04f 0300 	mov.w	r3, #0
 800931e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009322:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009326:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800932a:	4690      	mov	r8, r2
 800932c:	4699      	mov	r9, r3
 800932e:	4623      	mov	r3, r4
 8009330:	eb18 0303 	adds.w	r3, r8, r3
 8009334:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009338:	462b      	mov	r3, r5
 800933a:	eb49 0303 	adc.w	r3, r9, r3
 800933e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800934e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009352:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009356:	460b      	mov	r3, r1
 8009358:	18db      	adds	r3, r3, r3
 800935a:	653b      	str	r3, [r7, #80]	@ 0x50
 800935c:	4613      	mov	r3, r2
 800935e:	eb42 0303 	adc.w	r3, r2, r3
 8009362:	657b      	str	r3, [r7, #84]	@ 0x54
 8009364:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009368:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800936c:	f7f7 fc8c 	bl	8000c88 <__aeabi_uldivmod>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	4b61      	ldr	r3, [pc, #388]	@ (80094fc <UART_SetConfig+0x2d4>)
 8009376:	fba3 2302 	umull	r2, r3, r3, r2
 800937a:	095b      	lsrs	r3, r3, #5
 800937c:	011c      	lsls	r4, r3, #4
 800937e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009382:	2200      	movs	r2, #0
 8009384:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009388:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800938c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009390:	4642      	mov	r2, r8
 8009392:	464b      	mov	r3, r9
 8009394:	1891      	adds	r1, r2, r2
 8009396:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009398:	415b      	adcs	r3, r3
 800939a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800939c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80093a0:	4641      	mov	r1, r8
 80093a2:	eb12 0a01 	adds.w	sl, r2, r1
 80093a6:	4649      	mov	r1, r9
 80093a8:	eb43 0b01 	adc.w	fp, r3, r1
 80093ac:	f04f 0200 	mov.w	r2, #0
 80093b0:	f04f 0300 	mov.w	r3, #0
 80093b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80093b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80093bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093c0:	4692      	mov	sl, r2
 80093c2:	469b      	mov	fp, r3
 80093c4:	4643      	mov	r3, r8
 80093c6:	eb1a 0303 	adds.w	r3, sl, r3
 80093ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80093ce:	464b      	mov	r3, r9
 80093d0:	eb4b 0303 	adc.w	r3, fp, r3
 80093d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80093d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80093e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80093e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80093ec:	460b      	mov	r3, r1
 80093ee:	18db      	adds	r3, r3, r3
 80093f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80093f2:	4613      	mov	r3, r2
 80093f4:	eb42 0303 	adc.w	r3, r2, r3
 80093f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80093fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80093fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009402:	f7f7 fc41 	bl	8000c88 <__aeabi_uldivmod>
 8009406:	4602      	mov	r2, r0
 8009408:	460b      	mov	r3, r1
 800940a:	4611      	mov	r1, r2
 800940c:	4b3b      	ldr	r3, [pc, #236]	@ (80094fc <UART_SetConfig+0x2d4>)
 800940e:	fba3 2301 	umull	r2, r3, r3, r1
 8009412:	095b      	lsrs	r3, r3, #5
 8009414:	2264      	movs	r2, #100	@ 0x64
 8009416:	fb02 f303 	mul.w	r3, r2, r3
 800941a:	1acb      	subs	r3, r1, r3
 800941c:	00db      	lsls	r3, r3, #3
 800941e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009422:	4b36      	ldr	r3, [pc, #216]	@ (80094fc <UART_SetConfig+0x2d4>)
 8009424:	fba3 2302 	umull	r2, r3, r3, r2
 8009428:	095b      	lsrs	r3, r3, #5
 800942a:	005b      	lsls	r3, r3, #1
 800942c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009430:	441c      	add	r4, r3
 8009432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009436:	2200      	movs	r2, #0
 8009438:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800943c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009440:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009444:	4642      	mov	r2, r8
 8009446:	464b      	mov	r3, r9
 8009448:	1891      	adds	r1, r2, r2
 800944a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800944c:	415b      	adcs	r3, r3
 800944e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009450:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009454:	4641      	mov	r1, r8
 8009456:	1851      	adds	r1, r2, r1
 8009458:	6339      	str	r1, [r7, #48]	@ 0x30
 800945a:	4649      	mov	r1, r9
 800945c:	414b      	adcs	r3, r1
 800945e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009460:	f04f 0200 	mov.w	r2, #0
 8009464:	f04f 0300 	mov.w	r3, #0
 8009468:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800946c:	4659      	mov	r1, fp
 800946e:	00cb      	lsls	r3, r1, #3
 8009470:	4651      	mov	r1, sl
 8009472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009476:	4651      	mov	r1, sl
 8009478:	00ca      	lsls	r2, r1, #3
 800947a:	4610      	mov	r0, r2
 800947c:	4619      	mov	r1, r3
 800947e:	4603      	mov	r3, r0
 8009480:	4642      	mov	r2, r8
 8009482:	189b      	adds	r3, r3, r2
 8009484:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009488:	464b      	mov	r3, r9
 800948a:	460a      	mov	r2, r1
 800948c:	eb42 0303 	adc.w	r3, r2, r3
 8009490:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80094a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80094a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80094a8:	460b      	mov	r3, r1
 80094aa:	18db      	adds	r3, r3, r3
 80094ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094ae:	4613      	mov	r3, r2
 80094b0:	eb42 0303 	adc.w	r3, r2, r3
 80094b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80094ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80094be:	f7f7 fbe3 	bl	8000c88 <__aeabi_uldivmod>
 80094c2:	4602      	mov	r2, r0
 80094c4:	460b      	mov	r3, r1
 80094c6:	4b0d      	ldr	r3, [pc, #52]	@ (80094fc <UART_SetConfig+0x2d4>)
 80094c8:	fba3 1302 	umull	r1, r3, r3, r2
 80094cc:	095b      	lsrs	r3, r3, #5
 80094ce:	2164      	movs	r1, #100	@ 0x64
 80094d0:	fb01 f303 	mul.w	r3, r1, r3
 80094d4:	1ad3      	subs	r3, r2, r3
 80094d6:	00db      	lsls	r3, r3, #3
 80094d8:	3332      	adds	r3, #50	@ 0x32
 80094da:	4a08      	ldr	r2, [pc, #32]	@ (80094fc <UART_SetConfig+0x2d4>)
 80094dc:	fba2 2303 	umull	r2, r3, r2, r3
 80094e0:	095b      	lsrs	r3, r3, #5
 80094e2:	f003 0207 	and.w	r2, r3, #7
 80094e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4422      	add	r2, r4
 80094ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80094f0:	e106      	b.n	8009700 <UART_SetConfig+0x4d8>
 80094f2:	bf00      	nop
 80094f4:	40011000 	.word	0x40011000
 80094f8:	40011400 	.word	0x40011400
 80094fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009504:	2200      	movs	r2, #0
 8009506:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800950a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800950e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009512:	4642      	mov	r2, r8
 8009514:	464b      	mov	r3, r9
 8009516:	1891      	adds	r1, r2, r2
 8009518:	6239      	str	r1, [r7, #32]
 800951a:	415b      	adcs	r3, r3
 800951c:	627b      	str	r3, [r7, #36]	@ 0x24
 800951e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009522:	4641      	mov	r1, r8
 8009524:	1854      	adds	r4, r2, r1
 8009526:	4649      	mov	r1, r9
 8009528:	eb43 0501 	adc.w	r5, r3, r1
 800952c:	f04f 0200 	mov.w	r2, #0
 8009530:	f04f 0300 	mov.w	r3, #0
 8009534:	00eb      	lsls	r3, r5, #3
 8009536:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800953a:	00e2      	lsls	r2, r4, #3
 800953c:	4614      	mov	r4, r2
 800953e:	461d      	mov	r5, r3
 8009540:	4643      	mov	r3, r8
 8009542:	18e3      	adds	r3, r4, r3
 8009544:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009548:	464b      	mov	r3, r9
 800954a:	eb45 0303 	adc.w	r3, r5, r3
 800954e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800955e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009562:	f04f 0200 	mov.w	r2, #0
 8009566:	f04f 0300 	mov.w	r3, #0
 800956a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800956e:	4629      	mov	r1, r5
 8009570:	008b      	lsls	r3, r1, #2
 8009572:	4621      	mov	r1, r4
 8009574:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009578:	4621      	mov	r1, r4
 800957a:	008a      	lsls	r2, r1, #2
 800957c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009580:	f7f7 fb82 	bl	8000c88 <__aeabi_uldivmod>
 8009584:	4602      	mov	r2, r0
 8009586:	460b      	mov	r3, r1
 8009588:	4b60      	ldr	r3, [pc, #384]	@ (800970c <UART_SetConfig+0x4e4>)
 800958a:	fba3 2302 	umull	r2, r3, r3, r2
 800958e:	095b      	lsrs	r3, r3, #5
 8009590:	011c      	lsls	r4, r3, #4
 8009592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009596:	2200      	movs	r2, #0
 8009598:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800959c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80095a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80095a4:	4642      	mov	r2, r8
 80095a6:	464b      	mov	r3, r9
 80095a8:	1891      	adds	r1, r2, r2
 80095aa:	61b9      	str	r1, [r7, #24]
 80095ac:	415b      	adcs	r3, r3
 80095ae:	61fb      	str	r3, [r7, #28]
 80095b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80095b4:	4641      	mov	r1, r8
 80095b6:	1851      	adds	r1, r2, r1
 80095b8:	6139      	str	r1, [r7, #16]
 80095ba:	4649      	mov	r1, r9
 80095bc:	414b      	adcs	r3, r1
 80095be:	617b      	str	r3, [r7, #20]
 80095c0:	f04f 0200 	mov.w	r2, #0
 80095c4:	f04f 0300 	mov.w	r3, #0
 80095c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80095cc:	4659      	mov	r1, fp
 80095ce:	00cb      	lsls	r3, r1, #3
 80095d0:	4651      	mov	r1, sl
 80095d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095d6:	4651      	mov	r1, sl
 80095d8:	00ca      	lsls	r2, r1, #3
 80095da:	4610      	mov	r0, r2
 80095dc:	4619      	mov	r1, r3
 80095de:	4603      	mov	r3, r0
 80095e0:	4642      	mov	r2, r8
 80095e2:	189b      	adds	r3, r3, r2
 80095e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80095e8:	464b      	mov	r3, r9
 80095ea:	460a      	mov	r2, r1
 80095ec:	eb42 0303 	adc.w	r3, r2, r3
 80095f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80095f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80095fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009600:	f04f 0200 	mov.w	r2, #0
 8009604:	f04f 0300 	mov.w	r3, #0
 8009608:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800960c:	4649      	mov	r1, r9
 800960e:	008b      	lsls	r3, r1, #2
 8009610:	4641      	mov	r1, r8
 8009612:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009616:	4641      	mov	r1, r8
 8009618:	008a      	lsls	r2, r1, #2
 800961a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800961e:	f7f7 fb33 	bl	8000c88 <__aeabi_uldivmod>
 8009622:	4602      	mov	r2, r0
 8009624:	460b      	mov	r3, r1
 8009626:	4611      	mov	r1, r2
 8009628:	4b38      	ldr	r3, [pc, #224]	@ (800970c <UART_SetConfig+0x4e4>)
 800962a:	fba3 2301 	umull	r2, r3, r3, r1
 800962e:	095b      	lsrs	r3, r3, #5
 8009630:	2264      	movs	r2, #100	@ 0x64
 8009632:	fb02 f303 	mul.w	r3, r2, r3
 8009636:	1acb      	subs	r3, r1, r3
 8009638:	011b      	lsls	r3, r3, #4
 800963a:	3332      	adds	r3, #50	@ 0x32
 800963c:	4a33      	ldr	r2, [pc, #204]	@ (800970c <UART_SetConfig+0x4e4>)
 800963e:	fba2 2303 	umull	r2, r3, r2, r3
 8009642:	095b      	lsrs	r3, r3, #5
 8009644:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009648:	441c      	add	r4, r3
 800964a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800964e:	2200      	movs	r2, #0
 8009650:	673b      	str	r3, [r7, #112]	@ 0x70
 8009652:	677a      	str	r2, [r7, #116]	@ 0x74
 8009654:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009658:	4642      	mov	r2, r8
 800965a:	464b      	mov	r3, r9
 800965c:	1891      	adds	r1, r2, r2
 800965e:	60b9      	str	r1, [r7, #8]
 8009660:	415b      	adcs	r3, r3
 8009662:	60fb      	str	r3, [r7, #12]
 8009664:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009668:	4641      	mov	r1, r8
 800966a:	1851      	adds	r1, r2, r1
 800966c:	6039      	str	r1, [r7, #0]
 800966e:	4649      	mov	r1, r9
 8009670:	414b      	adcs	r3, r1
 8009672:	607b      	str	r3, [r7, #4]
 8009674:	f04f 0200 	mov.w	r2, #0
 8009678:	f04f 0300 	mov.w	r3, #0
 800967c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009680:	4659      	mov	r1, fp
 8009682:	00cb      	lsls	r3, r1, #3
 8009684:	4651      	mov	r1, sl
 8009686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800968a:	4651      	mov	r1, sl
 800968c:	00ca      	lsls	r2, r1, #3
 800968e:	4610      	mov	r0, r2
 8009690:	4619      	mov	r1, r3
 8009692:	4603      	mov	r3, r0
 8009694:	4642      	mov	r2, r8
 8009696:	189b      	adds	r3, r3, r2
 8009698:	66bb      	str	r3, [r7, #104]	@ 0x68
 800969a:	464b      	mov	r3, r9
 800969c:	460a      	mov	r2, r1
 800969e:	eb42 0303 	adc.w	r3, r2, r3
 80096a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80096a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80096ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80096b0:	f04f 0200 	mov.w	r2, #0
 80096b4:	f04f 0300 	mov.w	r3, #0
 80096b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80096bc:	4649      	mov	r1, r9
 80096be:	008b      	lsls	r3, r1, #2
 80096c0:	4641      	mov	r1, r8
 80096c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096c6:	4641      	mov	r1, r8
 80096c8:	008a      	lsls	r2, r1, #2
 80096ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80096ce:	f7f7 fadb 	bl	8000c88 <__aeabi_uldivmod>
 80096d2:	4602      	mov	r2, r0
 80096d4:	460b      	mov	r3, r1
 80096d6:	4b0d      	ldr	r3, [pc, #52]	@ (800970c <UART_SetConfig+0x4e4>)
 80096d8:	fba3 1302 	umull	r1, r3, r3, r2
 80096dc:	095b      	lsrs	r3, r3, #5
 80096de:	2164      	movs	r1, #100	@ 0x64
 80096e0:	fb01 f303 	mul.w	r3, r1, r3
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	011b      	lsls	r3, r3, #4
 80096e8:	3332      	adds	r3, #50	@ 0x32
 80096ea:	4a08      	ldr	r2, [pc, #32]	@ (800970c <UART_SetConfig+0x4e4>)
 80096ec:	fba2 2303 	umull	r2, r3, r2, r3
 80096f0:	095b      	lsrs	r3, r3, #5
 80096f2:	f003 020f 	and.w	r2, r3, #15
 80096f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4422      	add	r2, r4
 80096fe:	609a      	str	r2, [r3, #8]
}
 8009700:	bf00      	nop
 8009702:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009706:	46bd      	mov	sp, r7
 8009708:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800970c:	51eb851f 	.word	0x51eb851f

08009710 <_ICM20948_SelectUserBank>:

#include "ICM20948.h"

static float accel_offset[3] = {0,0,0};

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 8009710:	b580      	push	{r7, lr}
 8009712:	b08a      	sub	sp, #40	@ 0x28
 8009714:	af04      	add	r7, sp, #16
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	460b      	mov	r3, r1
 800971a:	607a      	str	r2, [r7, #4]
 800971c:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	b2db      	uxtb	r3, r3
 8009726:	011b      	lsls	r3, r3, #4
 8009728:	b2db      	uxtb	r3, r3
 800972a:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 800972c:	7afb      	ldrb	r3, [r7, #11]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d101      	bne.n	8009736 <_ICM20948_SelectUserBank+0x26>
 8009732:	2368      	movs	r3, #104	@ 0x68
 8009734:	e000      	b.n	8009738 <_ICM20948_SelectUserBank+0x28>
 8009736:	2369      	movs	r3, #105	@ 0x69
 8009738:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800973a:	7dbb      	ldrb	r3, [r7, #22]
 800973c:	b29b      	uxth	r3, r3
 800973e:	005b      	lsls	r3, r3, #1
 8009740:	b299      	uxth	r1, r3
 8009742:	230a      	movs	r3, #10
 8009744:	9302      	str	r3, [sp, #8]
 8009746:	2301      	movs	r3, #1
 8009748:	9301      	str	r3, [sp, #4]
 800974a:	f107 0315 	add.w	r3, r7, #21
 800974e:	9300      	str	r3, [sp, #0]
 8009750:	2301      	movs	r3, #1
 8009752:	227f      	movs	r2, #127	@ 0x7f
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	f7fb feeb 	bl	8005530 <HAL_I2C_Mem_Write>
 800975a:	4603      	mov	r3, r0
 800975c:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800975e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009760:	4618      	mov	r0, r3
 8009762:	3718      	adds	r7, #24
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 8009768:	b580      	push	{r7, lr}
 800976a:	b088      	sub	sp, #32
 800976c:	af04      	add	r7, sp, #16
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	4608      	mov	r0, r1
 8009772:	4611      	mov	r1, r2
 8009774:	461a      	mov	r2, r3
 8009776:	4603      	mov	r3, r0
 8009778:	70fb      	strb	r3, [r7, #3]
 800977a:	460b      	mov	r3, r1
 800977c:	70bb      	strb	r3, [r7, #2]
 800977e:	4613      	mov	r3, r2
 8009780:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8009786:	78fb      	ldrb	r3, [r7, #3]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d101      	bne.n	8009790 <_ICM20948_WriteByte+0x28>
 800978c:	2368      	movs	r3, #104	@ 0x68
 800978e:	e000      	b.n	8009792 <_ICM20948_WriteByte+0x2a>
 8009790:	2369      	movs	r3, #105	@ 0x69
 8009792:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8009794:	7bbb      	ldrb	r3, [r7, #14]
 8009796:	b29b      	uxth	r3, r3
 8009798:	005b      	lsls	r3, r3, #1
 800979a:	b299      	uxth	r1, r3
 800979c:	78bb      	ldrb	r3, [r7, #2]
 800979e:	b29a      	uxth	r2, r3
 80097a0:	230a      	movs	r3, #10
 80097a2:	9302      	str	r3, [sp, #8]
 80097a4:	2301      	movs	r3, #1
 80097a6:	9301      	str	r3, [sp, #4]
 80097a8:	1c7b      	adds	r3, r7, #1
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	2301      	movs	r3, #1
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7fb febe 	bl	8005530 <HAL_I2C_Mem_Write>
 80097b4:	4603      	mov	r3, r0
 80097b6:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <_ICM20948_BrustRead>:
			10);

	return status;
}

HAL_StatusTypeDef _ICM20948_BrustRead(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const startAddress, uint16_t const amountOfRegistersToRead, uint8_t * readData) {
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b088      	sub	sp, #32
 80097c6:	af04      	add	r7, sp, #16
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	4608      	mov	r0, r1
 80097cc:	4611      	mov	r1, r2
 80097ce:	461a      	mov	r2, r3
 80097d0:	4603      	mov	r3, r0
 80097d2:	70fb      	strb	r3, [r7, #3]
 80097d4:	460b      	mov	r3, r1
 80097d6:	70bb      	strb	r3, [r7, #2]
 80097d8:	4613      	mov	r3, r2
 80097da:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 80097e0:	78fb      	ldrb	r3, [r7, #3]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d101      	bne.n	80097ea <_ICM20948_BrustRead+0x28>
 80097e6:	2368      	movs	r3, #104	@ 0x68
 80097e8:	e000      	b.n	80097ec <_ICM20948_BrustRead+0x2a>
 80097ea:	2369      	movs	r3, #105	@ 0x69
 80097ec:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(
 80097ee:	7bbb      	ldrb	r3, [r7, #14]
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	005b      	lsls	r3, r3, #1
 80097f4:	b299      	uxth	r1, r3
 80097f6:	78bb      	ldrb	r3, [r7, #2]
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	230a      	movs	r3, #10
 80097fc:	9302      	str	r3, [sp, #8]
 80097fe:	883b      	ldrh	r3, [r7, #0]
 8009800:	9301      	str	r3, [sp, #4]
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	2301      	movs	r3, #1
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7fb ff8b 	bl	8005724 <HAL_I2C_Mem_Read>
 800980e:	4603      	mov	r3, r0
 8009810:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			amountOfRegistersToRead * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8009812:	7bfb      	ldrb	r3, [r7, #15]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <_ICM20948_BurstWrite>:

HAL_StatusTypeDef _ICM20948_BurstWrite(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const startAddress, uint16_t const amountOfRegistersToWrite, uint8_t * writeData) {
 800981c:	b580      	push	{r7, lr}
 800981e:	b088      	sub	sp, #32
 8009820:	af04      	add	r7, sp, #16
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	4608      	mov	r0, r1
 8009826:	4611      	mov	r1, r2
 8009828:	461a      	mov	r2, r3
 800982a:	4603      	mov	r3, r0
 800982c:	70fb      	strb	r3, [r7, #3]
 800982e:	460b      	mov	r3, r1
 8009830:	70bb      	strb	r3, [r7, #2]
 8009832:	4613      	mov	r3, r2
 8009834:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 800983a:	78fb      	ldrb	r3, [r7, #3]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d101      	bne.n	8009844 <_ICM20948_BurstWrite+0x28>
 8009840:	2368      	movs	r3, #104	@ 0x68
 8009842:	e000      	b.n	8009846 <_ICM20948_BurstWrite+0x2a>
 8009844:	2369      	movs	r3, #105	@ 0x69
 8009846:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8009848:	7bbb      	ldrb	r3, [r7, #14]
 800984a:	b29b      	uxth	r3, r3
 800984c:	005b      	lsls	r3, r3, #1
 800984e:	b299      	uxth	r1, r3
 8009850:	78bb      	ldrb	r3, [r7, #2]
 8009852:	b29a      	uxth	r2, r3
 8009854:	230a      	movs	r3, #10
 8009856:	9302      	str	r3, [sp, #8]
 8009858:	883b      	ldrh	r3, [r7, #0]
 800985a:	9301      	str	r3, [sp, #4]
 800985c:	69bb      	ldr	r3, [r7, #24]
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	2301      	movs	r3, #1
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f7fb fe64 	bl	8005530 <HAL_I2C_Mem_Write>
 8009868:	4603      	mov	r3, r0
 800986a:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			writeData,
			amountOfRegistersToWrite * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800986c:	7bfb      	ldrb	r3, [r7, #15]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <_AK09916_WriteByte>:

HAL_StatusTypeDef _AK09916_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const registerAddress, uint8_t writeData) {
 8009876:	b580      	push	{r7, lr}
 8009878:	b088      	sub	sp, #32
 800987a:	af04      	add	r7, sp, #16
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	460b      	mov	r3, r1
 8009880:	70fb      	strb	r3, [r7, #3]
 8009882:	4613      	mov	r3, r2
 8009884:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 800988a:	78fb      	ldrb	r3, [r7, #3]
 800988c:	b29a      	uxth	r2, r3
 800988e:	230a      	movs	r3, #10
 8009890:	9302      	str	r3, [sp, #8]
 8009892:	2301      	movs	r3, #1
 8009894:	9301      	str	r3, [sp, #4]
 8009896:	1cbb      	adds	r3, r7, #2
 8009898:	9300      	str	r3, [sp, #0]
 800989a:	2301      	movs	r3, #1
 800989c:	2118      	movs	r1, #24
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f7fb fe46 	bl	8005530 <HAL_I2C_Mem_Write>
 80098a4:	4603      	mov	r3, r0
 80098a6:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80098a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <ICM20948_init>:
	}
	
	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity) {
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b084      	sub	sp, #16
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	4608      	mov	r0, r1
 80098bc:	4611      	mov	r1, r2
 80098be:	461a      	mov	r2, r3
 80098c0:	4603      	mov	r3, r0
 80098c2:	70fb      	strb	r3, [r7, #3]
 80098c4:	460b      	mov	r3, r1
 80098c6:	70bb      	strb	r3, [r7, #2]
 80098c8:	4613      	mov	r3, r2
 80098ca:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 80098cc:	2300      	movs	r3, #0
 80098ce:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 80098d0:	78fb      	ldrb	r3, [r7, #3]
 80098d2:	2200      	movs	r2, #0
 80098d4:	4619      	mov	r1, r3
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f7ff ff1a 	bl	8009710 <_ICM20948_SelectUserBank>
 80098dc:	4603      	mov	r3, r0
 80098de:	73fb      	strb	r3, [r7, #15]

	do{
	status = _ICM20948_WriteByte(
 80098e0:	78f9      	ldrb	r1, [r7, #3]
 80098e2:	2380      	movs	r3, #128	@ 0x80
 80098e4:	2206      	movs	r2, #6
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f7ff ff3e 	bl	8009768 <_ICM20948_WriteByte>
 80098ec:	4603      	mov	r3, r0
 80098ee:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);
	}
	while(status!=HAL_OK);
 80098f0:	7bfb      	ldrb	r3, [r7, #15]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1f4      	bne.n	80098e0 <ICM20948_init+0x2e>


	HAL_Delay(200);
 80098f6:	20c8      	movs	r0, #200	@ 0xc8
 80098f8:	f7fa fd26 	bl	8004348 <HAL_Delay>

	status = _ICM20948_WriteByte(
 80098fc:	78f9      	ldrb	r1, [r7, #3]
 80098fe:	2301      	movs	r3, #1
 8009900:	2206      	movs	r2, #6
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f7ff ff30 	bl	8009768 <_ICM20948_WriteByte>
 8009908:	4603      	mov	r3, r0
 800990a:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_AUTO_SELECT_CLOCK);

	//enable both gyroscope and accelerometer
	status = _ICM20948_WriteByte(
 800990c:	78f9      	ldrb	r1, [r7, #3]
 800990e:	2300      	movs	r3, #0
 8009910:	2207      	movs	r2, #7
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f7ff ff28 	bl	8009768 <_ICM20948_WriteByte>
 8009918:	4603      	mov	r3, r0
 800991a:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); // For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 800991c:	78fb      	ldrb	r3, [r7, #3]
 800991e:	2202      	movs	r2, #2
 8009920:	4619      	mov	r1, r3
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7ff fef4 	bl	8009710 <_ICM20948_SelectUserBank>
 8009928:	4603      	mov	r3, r0
 800992a:	73fb      	strb	r3, [r7, #15]
	//gyroscope sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			0 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << GYRO_FS_SEL_BIT|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 800992c:	78bb      	ldrb	r3, [r7, #2]
 800992e:	005b      	lsls	r3, r3, #1
 8009930:	b25b      	sxtb	r3, r3
 8009932:	f043 0301 	orr.w	r3, r3, #1
 8009936:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 8009938:	b2db      	uxtb	r3, r3
 800993a:	78f9      	ldrb	r1, [r7, #3]
 800993c:	2201      	movs	r2, #1
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f7ff ff12 	bl	8009768 <_ICM20948_WriteByte>
 8009944:	4603      	mov	r3, r0
 8009946:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 8009948:	78f9      	ldrb	r1, [r7, #3]
 800994a:	2304      	movs	r3, #4
 800994c:	2200      	movs	r2, #0
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f7ff ff0a 	bl	8009768 <_ICM20948_WriteByte>
 8009954:	4603      	mov	r3, r0
 8009956:	73fb      	strb	r3, [r7, #15]
	//accelerometer sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
			1 << ACCEL_DLPFCFG_BIT|selectAccelSensitivity << ACCEL_FS_SEL_BIT|0x01 << ACCEL_FCHOICE_BIT);
 8009958:	787b      	ldrb	r3, [r7, #1]
 800995a:	005b      	lsls	r3, r3, #1
 800995c:	b25b      	sxtb	r3, r3
 800995e:	f043 0309 	orr.w	r3, r3, #9
 8009962:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 8009964:	b2db      	uxtb	r3, r3
 8009966:	78f9      	ldrb	r1, [r7, #3]
 8009968:	2214      	movs	r2, #20
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f7ff fefc 	bl	8009768 <_ICM20948_WriteByte>
 8009970:	4603      	mov	r3, r0
 8009972:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 8009974:	78f9      	ldrb	r1, [r7, #3]
 8009976:	2304      	movs	r3, #4
 8009978:	2211      	movs	r2, #17
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7ff fef4 	bl	8009768 <_ICM20948_WriteByte>
 8009980:	4603      	mov	r3, r0
 8009982:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
			4);


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8009984:	78fb      	ldrb	r3, [r7, #3]
 8009986:	2200      	movs	r2, #0
 8009988:	4619      	mov	r1, r3
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f7ff fec0 	bl	8009710 <_ICM20948_SelectUserBank>
 8009990:	4603      	mov	r3, r0
 8009992:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 8009994:	78f9      	ldrb	r1, [r7, #3]
 8009996:	2302      	movs	r3, #2
 8009998:	220f      	movs	r2, #15
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f7ff fee4 	bl	8009768 <_ICM20948_WriteByte>
 80099a0:	4603      	mov	r3, r0
 80099a2:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

	status = _AK09916_WriteByte(
 80099a4:	2208      	movs	r2, #8
 80099a6:	2131      	movs	r1, #49	@ 0x31
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f7ff ff64 	bl	8009876 <_AK09916_WriteByte>
 80099ae:	4603      	mov	r3, r0
 80099b0:	73fb      	strb	r3, [r7, #15]
			hi2c,
			AK09916__CNTL2__REGISTER,
			0x08);
}
 80099b2:	bf00      	nop
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	0000      	movs	r0, r0
 80099bc:	0000      	movs	r0, r0
	...

080099c0 <ICM20948_readGyroscope_all>:
			break;
	}

}

void ICM20948_readGyroscope_all(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, float reading[3]) {
 80099c0:	b590      	push	{r4, r7, lr}
 80099c2:	b08f      	sub	sp, #60	@ 0x3c
 80099c4:	af02      	add	r7, sp, #8
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	607b      	str	r3, [r7, #4]
 80099ca:	460b      	mov	r3, r1
 80099cc:	72fb      	strb	r3, [r7, #11]
 80099ce:	4613      	mov	r3, r2
 80099d0:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[6];

	//_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__GYRO_XOUT_H__REGISTER, 6, readData);
 80099d2:	7af9      	ldrb	r1, [r7, #11]
 80099d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80099d8:	9300      	str	r3, [sp, #0]
 80099da:	2306      	movs	r3, #6
 80099dc:	2233      	movs	r2, #51	@ 0x33
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f7ff feef 	bl	80097c2 <_ICM20948_BrustRead>

	int16_t rD_int[3];
		rD_int[X] = readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE];
 80099e4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80099e8:	021b      	lsls	r3, r3, #8
 80099ea:	b21a      	sxth	r2, r3
 80099ec:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80099f0:	b21b      	sxth	r3, r3
 80099f2:	4313      	orrs	r3, r2
 80099f4:	b21b      	sxth	r3, r3
 80099f6:	843b      	strh	r3, [r7, #32]
		rD_int[Y] = readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE];
 80099f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80099fc:	021b      	lsls	r3, r3, #8
 80099fe:	b21a      	sxth	r2, r3
 8009a00:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a04:	b21b      	sxth	r3, r3
 8009a06:	4313      	orrs	r3, r2
 8009a08:	b21b      	sxth	r3, r3
 8009a0a:	847b      	strh	r3, [r7, #34]	@ 0x22
		rD_int[Z] = readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE];
 8009a0c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a10:	021b      	lsls	r3, r3, #8
 8009a12:	b21a      	sxth	r2, r3
 8009a14:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8009a18:	b21b      	sxth	r3, r3
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	b21b      	sxth	r3, r3
 8009a1e:	84bb      	strh	r3, [r7, #36]	@ 0x24

		float rD[3];
		rD[X] = (float) rD_int[X];
 8009a20:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009a24:	ee07 3a90 	vmov	s15, r3
 8009a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a2c:	edc7 7a05 	vstr	s15, [r7, #20]
		rD[Y] = (float) rD_int[Y];
 8009a30:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8009a34:	ee07 3a90 	vmov	s15, r3
 8009a38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a3c:	edc7 7a06 	vstr	s15, [r7, #24]
		rD[Z] = (float) rD_int[Z];
 8009a40:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8009a44:	ee07 3a90 	vmov	s15, r3
 8009a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a4c:	edc7 7a07 	vstr	s15, [r7, #28]

	//*gyroZ = (float) -reading;
	switch (selectGyroSensitivity) {
 8009a50:	7abb      	ldrb	r3, [r7, #10]
 8009a52:	2b03      	cmp	r3, #3
 8009a54:	f200 80bc 	bhi.w	8009bd0 <ICM20948_readGyroscope_all+0x210>
 8009a58:	a201      	add	r2, pc, #4	@ (adr r2, 8009a60 <ICM20948_readGyroscope_all+0xa0>)
 8009a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a5e:	bf00      	nop
 8009a60:	08009a71 	.word	0x08009a71
 8009a64:	08009aad 	.word	0x08009aad
 8009a68:	08009ae9 	.word	0x08009ae9
 8009a6c:	08009b5d 	.word	0x08009b5d
		case GYRO_FULL_SCALE_250DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 8009a70:	ed97 7a05 	vldr	s14, [r7, #20]
 8009a74:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 8009be8 <ICM20948_readGyroscope_all+0x228>
 8009a78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	edc3 7a00 	vstr	s15, [r3]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 8009a82:	ed97 7a06 	vldr	s14, [r7, #24]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	3304      	adds	r3, #4
 8009a8a:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8009be8 <ICM20948_readGyroscope_all+0x228>
 8009a8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009a92:	edc3 7a00 	vstr	s15, [r3]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 8009a96:	ed97 7a07 	vldr	s14, [r7, #28]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	3308      	adds	r3, #8
 8009a9e:	eddf 6a52 	vldr	s13, [pc, #328]	@ 8009be8 <ICM20948_readGyroscope_all+0x228>
 8009aa2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009aa6:	edc3 7a00 	vstr	s15, [r3]
			break;
 8009aaa:	e091      	b.n	8009bd0 <ICM20948_readGyroscope_all+0x210>
		case GYRO_FULL_SCALE_500DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 8009aac:	ed97 7a05 	vldr	s14, [r7, #20]
 8009ab0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009bec <ICM20948_readGyroscope_all+0x22c>
 8009ab4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	edc3 7a00 	vstr	s15, [r3]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 8009abe:	ed97 7a06 	vldr	s14, [r7, #24]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	3304      	adds	r3, #4
 8009ac6:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8009bec <ICM20948_readGyroscope_all+0x22c>
 8009aca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009ace:	edc3 7a00 	vstr	s15, [r3]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 8009ad2:	ed97 7a07 	vldr	s14, [r7, #28]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	3308      	adds	r3, #8
 8009ada:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8009bec <ICM20948_readGyroscope_all+0x22c>
 8009ade:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009ae2:	edc3 7a00 	vstr	s15, [r3]
			break;
 8009ae6:	e073      	b.n	8009bd0 <ICM20948_readGyroscope_all+0x210>
		case GYRO_FULL_SCALE_1000DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7f6 fd2c 	bl	8000548 <__aeabi_f2d>
 8009af0:	a339      	add	r3, pc, #228	@ (adr r3, 8009bd8 <ICM20948_readGyroscope_all+0x218>)
 8009af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af6:	f7f6 fea9 	bl	800084c <__aeabi_ddiv>
 8009afa:	4602      	mov	r2, r0
 8009afc:	460b      	mov	r3, r1
 8009afe:	4610      	mov	r0, r2
 8009b00:	4619      	mov	r1, r3
 8009b02:	f7f7 f871 	bl	8000be8 <__aeabi_d2f>
 8009b06:	4602      	mov	r2, r0
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	601a      	str	r2, [r3, #0]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7f6 fd1a 	bl	8000548 <__aeabi_f2d>
 8009b14:	a330      	add	r3, pc, #192	@ (adr r3, 8009bd8 <ICM20948_readGyroscope_all+0x218>)
 8009b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1a:	f7f6 fe97 	bl	800084c <__aeabi_ddiv>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	460b      	mov	r3, r1
 8009b22:	4610      	mov	r0, r2
 8009b24:	4619      	mov	r1, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	1d1c      	adds	r4, r3, #4
 8009b2a:	f7f7 f85d 	bl	8000be8 <__aeabi_d2f>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	6023      	str	r3, [r4, #0]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7f6 fd07 	bl	8000548 <__aeabi_f2d>
 8009b3a:	a327      	add	r3, pc, #156	@ (adr r3, 8009bd8 <ICM20948_readGyroscope_all+0x218>)
 8009b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b40:	f7f6 fe84 	bl	800084c <__aeabi_ddiv>
 8009b44:	4602      	mov	r2, r0
 8009b46:	460b      	mov	r3, r1
 8009b48:	4610      	mov	r0, r2
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f103 0408 	add.w	r4, r3, #8
 8009b52:	f7f7 f849 	bl	8000be8 <__aeabi_d2f>
 8009b56:	4603      	mov	r3, r0
 8009b58:	6023      	str	r3, [r4, #0]
			break;
 8009b5a:	e039      	b.n	8009bd0 <ICM20948_readGyroscope_all+0x210>
		case GYRO_FULL_SCALE_2000DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7f6 fcf2 	bl	8000548 <__aeabi_f2d>
 8009b64:	a31e      	add	r3, pc, #120	@ (adr r3, 8009be0 <ICM20948_readGyroscope_all+0x220>)
 8009b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6a:	f7f6 fe6f 	bl	800084c <__aeabi_ddiv>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	4610      	mov	r0, r2
 8009b74:	4619      	mov	r1, r3
 8009b76:	f7f7 f837 	bl	8000be8 <__aeabi_d2f>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	601a      	str	r2, [r3, #0]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7f6 fce0 	bl	8000548 <__aeabi_f2d>
 8009b88:	a315      	add	r3, pc, #84	@ (adr r3, 8009be0 <ICM20948_readGyroscope_all+0x220>)
 8009b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8e:	f7f6 fe5d 	bl	800084c <__aeabi_ddiv>
 8009b92:	4602      	mov	r2, r0
 8009b94:	460b      	mov	r3, r1
 8009b96:	4610      	mov	r0, r2
 8009b98:	4619      	mov	r1, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	1d1c      	adds	r4, r3, #4
 8009b9e:	f7f7 f823 	bl	8000be8 <__aeabi_d2f>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	6023      	str	r3, [r4, #0]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7f6 fccd 	bl	8000548 <__aeabi_f2d>
 8009bae:	a30c      	add	r3, pc, #48	@ (adr r3, 8009be0 <ICM20948_readGyroscope_all+0x220>)
 8009bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb4:	f7f6 fe4a 	bl	800084c <__aeabi_ddiv>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	460b      	mov	r3, r1
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f103 0408 	add.w	r4, r3, #8
 8009bc6:	f7f7 f80f 	bl	8000be8 <__aeabi_d2f>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	6023      	str	r3, [r4, #0]
			break;
 8009bce:	bf00      	nop
	}

}
 8009bd0:	bf00      	nop
 8009bd2:	3734      	adds	r7, #52	@ 0x34
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd90      	pop	{r4, r7, pc}
 8009bd8:	66666666 	.word	0x66666666
 8009bdc:	40406666 	.word	0x40406666
 8009be0:	66666666 	.word	0x66666666
 8009be4:	40306666 	.word	0x40306666
 8009be8:	43030000 	.word	0x43030000
 8009bec:	42830000 	.word	0x42830000

08009bf0 <ICM20948_readAccelerometer_all>:

void ICM20948_readAccelerometer_all(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectAccelSensitivity, float readings[3]) {
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b08e      	sub	sp, #56	@ 0x38
 8009bf4:	af02      	add	r7, sp, #8
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	607b      	str	r3, [r7, #4]
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	72fb      	strb	r3, [r7, #11]
 8009bfe:	4613      	mov	r3, r2
 8009c00:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[6];

//	_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__ACCEL_XOUT_H__REGISTER, 6, readData);
 8009c02:	7af9      	ldrb	r1, [r7, #11]
 8009c04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009c08:	9300      	str	r3, [sp, #0]
 8009c0a:	2306      	movs	r3, #6
 8009c0c:	222d      	movs	r2, #45	@ 0x2d
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f7ff fdd7 	bl	80097c2 <_ICM20948_BrustRead>


	int16_t rD_int[3];
	rD_int[X] = readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE];
 8009c14:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009c18:	021b      	lsls	r3, r3, #8
 8009c1a:	b21a      	sxth	r2, r3
 8009c1c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009c20:	b21b      	sxth	r3, r3
 8009c22:	4313      	orrs	r3, r2
 8009c24:	b21b      	sxth	r3, r3
 8009c26:	843b      	strh	r3, [r7, #32]
	rD_int[Y] = readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE];
 8009c28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009c2c:	021b      	lsls	r3, r3, #8
 8009c2e:	b21a      	sxth	r2, r3
 8009c30:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c34:	b21b      	sxth	r3, r3
 8009c36:	4313      	orrs	r3, r2
 8009c38:	b21b      	sxth	r3, r3
 8009c3a:	847b      	strh	r3, [r7, #34]	@ 0x22
	rD_int[Z] = readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE];
 8009c3c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009c40:	021b      	lsls	r3, r3, #8
 8009c42:	b21a      	sxth	r2, r3
 8009c44:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8009c48:	b21b      	sxth	r3, r3
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	b21b      	sxth	r3, r3
 8009c4e:	84bb      	strh	r3, [r7, #36]	@ 0x24

	float rD[3];
	rD[X] = (float) rD_int[X];
 8009c50:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009c54:	ee07 3a90 	vmov	s15, r3
 8009c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c5c:	edc7 7a05 	vstr	s15, [r7, #20]
	rD[Y] = (float) rD_int[Y];
 8009c60:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8009c64:	ee07 3a90 	vmov	s15, r3
 8009c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c6c:	edc7 7a06 	vstr	s15, [r7, #24]
	rD[Z] = (float) rD_int[Z];
 8009c70:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8009c74:	ee07 3a90 	vmov	s15, r3
 8009c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c7c:	edc7 7a07 	vstr	s15, [r7, #28]

	switch (selectAccelSensitivity) {
 8009c80:	7abb      	ldrb	r3, [r7, #10]
 8009c82:	2b03      	cmp	r3, #3
 8009c84:	f200 8084 	bhi.w	8009d90 <ICM20948_readAccelerometer_all+0x1a0>
 8009c88:	a201      	add	r2, pc, #4	@ (adr r2, 8009c90 <ICM20948_readAccelerometer_all+0xa0>)
 8009c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c8e:	bf00      	nop
 8009c90:	08009ca1 	.word	0x08009ca1
 8009c94:	08009cdd 	.word	0x08009cdd
 8009c98:	08009d19 	.word	0x08009d19
 8009c9c:	08009d55 	.word	0x08009d55
		case ACCEL_FULL_SCALE_2G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 8009ca0:	ed97 7a05 	vldr	s14, [r7, #20]
 8009ca4:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009de4 <ICM20948_readAccelerometer_all+0x1f4>
 8009ca8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 8009cb2:	ed97 7a06 	vldr	s14, [r7, #24]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	3304      	adds	r3, #4
 8009cba:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8009de4 <ICM20948_readAccelerometer_all+0x1f4>
 8009cbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009cc2:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 8009cc6:	ed97 7a07 	vldr	s14, [r7, #28]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	3308      	adds	r3, #8
 8009cce:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8009de4 <ICM20948_readAccelerometer_all+0x1f4>
 8009cd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009cd6:	edc3 7a00 	vstr	s15, [r3]
			break;
 8009cda:	e059      	b.n	8009d90 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_4G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 8009cdc:	ed97 7a05 	vldr	s14, [r7, #20]
 8009ce0:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8009de8 <ICM20948_readAccelerometer_all+0x1f8>
 8009ce4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 8009cee:	ed97 7a06 	vldr	s14, [r7, #24]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	3304      	adds	r3, #4
 8009cf6:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8009de8 <ICM20948_readAccelerometer_all+0x1f8>
 8009cfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009cfe:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 8009d02:	ed97 7a07 	vldr	s14, [r7, #28]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	3308      	adds	r3, #8
 8009d0a:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8009de8 <ICM20948_readAccelerometer_all+0x1f8>
 8009d0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d12:	edc3 7a00 	vstr	s15, [r3]
			break;
 8009d16:	e03b      	b.n	8009d90 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_8G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 8009d18:	ed97 7a05 	vldr	s14, [r7, #20]
 8009d1c:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8009dec <ICM20948_readAccelerometer_all+0x1fc>
 8009d20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 8009d2a:	ed97 7a06 	vldr	s14, [r7, #24]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	3304      	adds	r3, #4
 8009d32:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8009dec <ICM20948_readAccelerometer_all+0x1fc>
 8009d36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d3a:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 8009d3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	3308      	adds	r3, #8
 8009d46:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8009dec <ICM20948_readAccelerometer_all+0x1fc>
 8009d4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d4e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8009d52:	e01d      	b.n	8009d90 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_16G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 8009d54:	ed97 7a05 	vldr	s14, [r7, #20]
 8009d58:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8009df0 <ICM20948_readAccelerometer_all+0x200>
 8009d5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 8009d66:	ed97 7a06 	vldr	s14, [r7, #24]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8009df0 <ICM20948_readAccelerometer_all+0x200>
 8009d72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d76:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 8009d7a:	ed97 7a07 	vldr	s14, [r7, #28]
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	3308      	adds	r3, #8
 8009d82:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8009df0 <ICM20948_readAccelerometer_all+0x200>
 8009d86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d8a:	edc3 7a00 	vstr	s15, [r3]
			break;
 8009d8e:	bf00      	nop
	}
	readings[X] -=accel_offset[X];
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	ed93 7a00 	vldr	s14, [r3]
 8009d96:	4b17      	ldr	r3, [pc, #92]	@ (8009df4 <ICM20948_readAccelerometer_all+0x204>)
 8009d98:	edd3 7a00 	vldr	s15, [r3]
 8009d9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	edc3 7a00 	vstr	s15, [r3]
	readings[Y] -=accel_offset[Y];
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	3304      	adds	r3, #4
 8009daa:	ed93 7a00 	vldr	s14, [r3]
 8009dae:	4b11      	ldr	r3, [pc, #68]	@ (8009df4 <ICM20948_readAccelerometer_all+0x204>)
 8009db0:	edd3 7a01 	vldr	s15, [r3, #4]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	3304      	adds	r3, #4
 8009db8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009dbc:	edc3 7a00 	vstr	s15, [r3]
	readings[Z] -=accel_offset[Z];
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	3308      	adds	r3, #8
 8009dc4:	ed93 7a00 	vldr	s14, [r3]
 8009dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8009df4 <ICM20948_readAccelerometer_all+0x204>)
 8009dca:	edd3 7a02 	vldr	s15, [r3, #8]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	3308      	adds	r3, #8
 8009dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009dd6:	edc3 7a00 	vstr	s15, [r3]
}
 8009dda:	bf00      	nop
 8009ddc:	3730      	adds	r7, #48	@ 0x30
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	46800000 	.word	0x46800000
 8009de8:	46000000 	.word	0x46000000
 8009dec:	45800000 	.word	0x45800000
 8009df0:	45000000 	.word	0x45000000
 8009df4:	20000600 	.word	0x20000600

08009df8 <ICM20948_CalibrateGyro>:
			mag[i] = reading * MAG_SENSITIVITY_SCALE_FACTOR;
		}
	}

void ICM20948_CalibrateGyro(I2C_HandleTypeDef * hi2c,const uint8_t sensitivity,int samples)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b090      	sub	sp, #64	@ 0x40
 8009dfc:	af02      	add	r7, sp, #8
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	460b      	mov	r3, r1
 8009e02:	607a      	str	r2, [r7, #4]
 8009e04:	72fb      	strb	r3, [r7, #11]
	//float temp[3]={};
	int32_t gyro_bias[3] = {0};
 8009e06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	601a      	str	r2, [r3, #0]
 8009e0e:	605a      	str	r2, [r3, #4]
 8009e10:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 8009e12:	2300      	movs	r3, #0
 8009e14:	623b      	str	r3, [r7, #32]
 8009e16:	2300      	movs	r3, #0
 8009e18:	84bb      	strh	r3, [r7, #36]	@ 0x24

		for(int i = 0; i < samples; i++)
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e1e:	e032      	b.n	8009e86 <ICM20948_CalibrateGyro+0x8e>
		{
			uint8_t readData[6];
			//_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
			_ICM20948_BrustRead(hi2c, 0, ICM20948__USER_BANK_0__GYRO_XOUT_H__REGISTER, 6, readData);
 8009e20:	f107 0318 	add.w	r3, r7, #24
 8009e24:	9300      	str	r3, [sp, #0]
 8009e26:	2306      	movs	r3, #6
 8009e28:	2233      	movs	r2, #51	@ 0x33
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	68f8      	ldr	r0, [r7, #12]
 8009e2e:	f7ff fcc8 	bl	80097c2 <_ICM20948_BrustRead>

			int16_t temp[3];
			temp[X] = readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE];
 8009e32:	7e3b      	ldrb	r3, [r7, #24]
 8009e34:	021b      	lsls	r3, r3, #8
 8009e36:	b21a      	sxth	r2, r3
 8009e38:	7e7b      	ldrb	r3, [r7, #25]
 8009e3a:	b21b      	sxth	r3, r3
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	b21b      	sxth	r3, r3
 8009e40:	823b      	strh	r3, [r7, #16]
			temp[Y] = readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE];
 8009e42:	7ebb      	ldrb	r3, [r7, #26]
 8009e44:	021b      	lsls	r3, r3, #8
 8009e46:	b21a      	sxth	r2, r3
 8009e48:	7efb      	ldrb	r3, [r7, #27]
 8009e4a:	b21b      	sxth	r3, r3
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	b21b      	sxth	r3, r3
 8009e50:	827b      	strh	r3, [r7, #18]
			temp[Z] = readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE];
 8009e52:	7f3b      	ldrb	r3, [r7, #28]
 8009e54:	021b      	lsls	r3, r3, #8
 8009e56:	b21a      	sxth	r2, r3
 8009e58:	7f7b      	ldrb	r3, [r7, #29]
 8009e5a:	b21b      	sxth	r3, r3
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	b21b      	sxth	r3, r3
 8009e60:	82bb      	strh	r3, [r7, #20]

			gyro_bias[0] += temp[0];
 8009e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e64:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009e68:	4413      	add	r3, r2
 8009e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
			gyro_bias[1] += temp[1];
 8009e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e6e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8009e72:	4413      	add	r3, r2
 8009e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
			gyro_bias[2] += temp[2];
 8009e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e78:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	633b      	str	r3, [r7, #48]	@ 0x30
		for(int i = 0; i < samples; i++)
 8009e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e82:	3301      	adds	r3, #1
 8009e84:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	dbc8      	blt.n	8009e20 <ICM20948_CalibrateGyro+0x28>
		}

		gyro_bias[0] /= samples;
 8009e8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	fb92 f3f3 	sdiv	r3, r2, r3
 8009e96:	62bb      	str	r3, [r7, #40]	@ 0x28
		gyro_bias[1] /= samples;
 8009e98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8009ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		gyro_bias[2] /= samples;
 8009ea2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	fb92 f3f3 	sdiv	r3, r2, r3
 8009eaa:	633b      	str	r3, [r7, #48]	@ 0x30

		// Construct the gyro biases for push to the hardware gyro bias registers,
		// which are reset to zero upon device startup.
		// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
		// Biases are additive, so change sign on calculated average gyro biases
		gyro_offset[0] = (-gyro_bias[0] * 2  >> 8) & 0xFF;
 8009eac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009eae:	4613      	mov	r3, r2
 8009eb0:	07db      	lsls	r3, r3, #31
 8009eb2:	1a9b      	subs	r3, r3, r2
 8009eb4:	005b      	lsls	r3, r3, #1
 8009eb6:	121b      	asrs	r3, r3, #8
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	f887 3020 	strb.w	r3, [r7, #32]
		gyro_offset[1] = (-gyro_bias[0] * 2)       & 0xFF;
 8009ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	01d2      	lsls	r2, r2, #7
 8009ec6:	1ad3      	subs	r3, r2, r3
 8009ec8:	005b      	lsls	r3, r3, #1
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		gyro_offset[2] = (-gyro_bias[1] * 2  >> 8) & 0xFF;
 8009ed0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	07db      	lsls	r3, r3, #31
 8009ed6:	1a9b      	subs	r3, r3, r2
 8009ed8:	005b      	lsls	r3, r3, #1
 8009eda:	121b      	asrs	r3, r3, #8
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		gyro_offset[3] = (-gyro_bias[1] * 2)       & 0xFF;
 8009ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	01d2      	lsls	r2, r2, #7
 8009eea:	1ad3      	subs	r3, r2, r3
 8009eec:	005b      	lsls	r3, r3, #1
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		gyro_offset[4] = (-gyro_bias[2] * 2  >> 8) & 0xFF;
 8009ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	07db      	lsls	r3, r3, #31
 8009efa:	1a9b      	subs	r3, r3, r2
 8009efc:	005b      	lsls	r3, r3, #1
 8009efe:	121b      	asrs	r3, r3, #8
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		gyro_offset[5] = (-gyro_bias[2] * 2)       & 0xFF;
 8009f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	01d2      	lsls	r2, r2, #7
 8009f0e:	1ad3      	subs	r3, r2, r3
 8009f10:	005b      	lsls	r3, r3, #1
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		_ICM20948_SelectUserBank(hi2c,0, USER_BANK_2);
 8009f18:	2202      	movs	r2, #2
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f7ff fbf7 	bl	8009710 <_ICM20948_SelectUserBank>
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+2,gyro_offset[2]);
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+3,gyro_offset[3]);
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+4,gyro_offset[4]);
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+5,gyro_offset[5]);

		_ICM20948_BurstWrite(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER,6,gyro_offset);
 8009f22:	f107 0320 	add.w	r3, r7, #32
 8009f26:	9300      	str	r3, [sp, #0]
 8009f28:	2306      	movs	r3, #6
 8009f2a:	2203      	movs	r2, #3
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f7ff fc74 	bl	800981c <_ICM20948_BurstWrite>
		_ICM20948_SelectUserBank(hi2c,0, USER_BANK_0);
 8009f34:	2200      	movs	r2, #0
 8009f36:	2100      	movs	r1, #0
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	f7ff fbe9 	bl	8009710 <_ICM20948_SelectUserBank>
	}
 8009f3e:	bf00      	nop
 8009f40:	3738      	adds	r7, #56	@ 0x38
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
	...

08009f48 <ICM20948_CalibrateAccel>:

void ICM20948_CalibrateAccel(I2C_HandleTypeDef * hi2c,const uint8_t sensitivity,int samples)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b08c      	sub	sp, #48	@ 0x30
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	460b      	mov	r3, r1
 8009f52:	607a      	str	r2, [r7, #4]
 8009f54:	72fb      	strb	r3, [r7, #11]
	float accel_bias[3] = {0};
 8009f56:	f107 0320 	add.w	r3, r7, #32
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	601a      	str	r2, [r3, #0]
 8009f5e:	605a      	str	r2, [r3, #4]
 8009f60:	609a      	str	r2, [r3, #8]

			for(int i = 0; i < samples; i++)
 8009f62:	2300      	movs	r3, #0
 8009f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f66:	e025      	b.n	8009fb4 <ICM20948_CalibrateAccel+0x6c>
			{

				//_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
				float temp[3];
				ICM20948_readAccelerometer_all(hi2c, 0, sensitivity, temp);
 8009f68:	f107 0314 	add.w	r3, r7, #20
 8009f6c:	7afa      	ldrb	r2, [r7, #11]
 8009f6e:	2100      	movs	r1, #0
 8009f70:	68f8      	ldr	r0, [r7, #12]
 8009f72:	f7ff fe3d 	bl	8009bf0 <ICM20948_readAccelerometer_all>


				accel_bias[0] += temp[0];
 8009f76:	ed97 7a08 	vldr	s14, [r7, #32]
 8009f7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8009f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f82:	edc7 7a08 	vstr	s15, [r7, #32]
				accel_bias[1] += temp[1];
 8009f86:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8009f8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8009f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f92:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
				accel_bias[2] += (temp[2]-1.0f);//ignore the gravity
 8009f96:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8009f9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fa2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009faa:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			for(int i = 0; i < samples; i++)
 8009fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009fb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	dbd5      	blt.n	8009f68 <ICM20948_CalibrateAccel+0x20>
			}

			accel_offset[0] =accel_bias[0]/ samples;
 8009fbc:	edd7 6a08 	vldr	s13, [r7, #32]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	ee07 3a90 	vmov	s15, r3
 8009fc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009fca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fce:	4b0f      	ldr	r3, [pc, #60]	@ (800a00c <ICM20948_CalibrateAccel+0xc4>)
 8009fd0:	edc3 7a00 	vstr	s15, [r3]
			accel_offset[1] =accel_bias[1]/ samples;
 8009fd4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	ee07 3a90 	vmov	s15, r3
 8009fde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fe6:	4b09      	ldr	r3, [pc, #36]	@ (800a00c <ICM20948_CalibrateAccel+0xc4>)
 8009fe8:	edc3 7a01 	vstr	s15, [r3, #4]
			accel_offset[2] =accel_bias[2]/ samples;
 8009fec:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	ee07 3a90 	vmov	s15, r3
 8009ff6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ffe:	4b03      	ldr	r3, [pc, #12]	@ (800a00c <ICM20948_CalibrateAccel+0xc4>)
 800a000:	edc3 7a02 	vstr	s15, [r3, #8]
	}
 800a004:	bf00      	nop
 800a006:	3730      	adds	r7, #48	@ 0x30
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}
 800a00c:	20000600 	.word	0x20000600

0800a010 <__NVIC_SetPriority>:
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	4603      	mov	r3, r0
 800a018:	6039      	str	r1, [r7, #0]
 800a01a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a01c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a020:	2b00      	cmp	r3, #0
 800a022:	db0a      	blt.n	800a03a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	b2da      	uxtb	r2, r3
 800a028:	490c      	ldr	r1, [pc, #48]	@ (800a05c <__NVIC_SetPriority+0x4c>)
 800a02a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a02e:	0112      	lsls	r2, r2, #4
 800a030:	b2d2      	uxtb	r2, r2
 800a032:	440b      	add	r3, r1
 800a034:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a038:	e00a      	b.n	800a050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	b2da      	uxtb	r2, r3
 800a03e:	4908      	ldr	r1, [pc, #32]	@ (800a060 <__NVIC_SetPriority+0x50>)
 800a040:	79fb      	ldrb	r3, [r7, #7]
 800a042:	f003 030f 	and.w	r3, r3, #15
 800a046:	3b04      	subs	r3, #4
 800a048:	0112      	lsls	r2, r2, #4
 800a04a:	b2d2      	uxtb	r2, r2
 800a04c:	440b      	add	r3, r1
 800a04e:	761a      	strb	r2, [r3, #24]
}
 800a050:	bf00      	nop
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr
 800a05c:	e000e100 	.word	0xe000e100
 800a060:	e000ed00 	.word	0xe000ed00

0800a064 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a064:	b580      	push	{r7, lr}
 800a066:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a068:	2100      	movs	r1, #0
 800a06a:	f06f 0004 	mvn.w	r0, #4
 800a06e:	f7ff ffcf 	bl	800a010 <__NVIC_SetPriority>
#endif
}
 800a072:	bf00      	nop
 800a074:	bd80      	pop	{r7, pc}
	...

0800a078 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a07e:	f3ef 8305 	mrs	r3, IPSR
 800a082:	603b      	str	r3, [r7, #0]
  return(result);
 800a084:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a086:	2b00      	cmp	r3, #0
 800a088:	d003      	beq.n	800a092 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a08a:	f06f 0305 	mvn.w	r3, #5
 800a08e:	607b      	str	r3, [r7, #4]
 800a090:	e00c      	b.n	800a0ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a092:	4b0a      	ldr	r3, [pc, #40]	@ (800a0bc <osKernelInitialize+0x44>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d105      	bne.n	800a0a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a09a:	4b08      	ldr	r3, [pc, #32]	@ (800a0bc <osKernelInitialize+0x44>)
 800a09c:	2201      	movs	r2, #1
 800a09e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	607b      	str	r3, [r7, #4]
 800a0a4:	e002      	b.n	800a0ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a0a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a0ac:	687b      	ldr	r3, [r7, #4]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	2000060c 	.word	0x2000060c

0800a0c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0c6:	f3ef 8305 	mrs	r3, IPSR
 800a0ca:	603b      	str	r3, [r7, #0]
  return(result);
 800a0cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d003      	beq.n	800a0da <osKernelStart+0x1a>
    stat = osErrorISR;
 800a0d2:	f06f 0305 	mvn.w	r3, #5
 800a0d6:	607b      	str	r3, [r7, #4]
 800a0d8:	e010      	b.n	800a0fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a0da:	4b0b      	ldr	r3, [pc, #44]	@ (800a108 <osKernelStart+0x48>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d109      	bne.n	800a0f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a0e2:	f7ff ffbf 	bl	800a064 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a0e6:	4b08      	ldr	r3, [pc, #32]	@ (800a108 <osKernelStart+0x48>)
 800a0e8:	2202      	movs	r2, #2
 800a0ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a0ec:	f001 f87a 	bl	800b1e4 <vTaskStartScheduler>
      stat = osOK;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	607b      	str	r3, [r7, #4]
 800a0f4:	e002      	b.n	800a0fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a0f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a0fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a0fc:	687b      	ldr	r3, [r7, #4]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3708      	adds	r7, #8
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	2000060c 	.word	0x2000060c

0800a10c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b08e      	sub	sp, #56	@ 0x38
 800a110:	af04      	add	r7, sp, #16
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a118:	2300      	movs	r3, #0
 800a11a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a11c:	f3ef 8305 	mrs	r3, IPSR
 800a120:	617b      	str	r3, [r7, #20]
  return(result);
 800a122:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a124:	2b00      	cmp	r3, #0
 800a126:	d17e      	bne.n	800a226 <osThreadNew+0x11a>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d07b      	beq.n	800a226 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a12e:	2380      	movs	r3, #128	@ 0x80
 800a130:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a132:	2318      	movs	r3, #24
 800a134:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a136:	2300      	movs	r3, #0
 800a138:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a13a:	f04f 33ff 	mov.w	r3, #4294967295
 800a13e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d045      	beq.n	800a1d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d002      	beq.n	800a154 <osThreadNew+0x48>
        name = attr->name;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	699b      	ldr	r3, [r3, #24]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d002      	beq.n	800a162 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	699b      	ldr	r3, [r3, #24]
 800a160:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d008      	beq.n	800a17a <osThreadNew+0x6e>
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	2b38      	cmp	r3, #56	@ 0x38
 800a16c:	d805      	bhi.n	800a17a <osThreadNew+0x6e>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	2b00      	cmp	r3, #0
 800a178:	d001      	beq.n	800a17e <osThreadNew+0x72>
        return (NULL);
 800a17a:	2300      	movs	r3, #0
 800a17c:	e054      	b.n	800a228 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	695b      	ldr	r3, [r3, #20]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d003      	beq.n	800a18e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	695b      	ldr	r3, [r3, #20]
 800a18a:	089b      	lsrs	r3, r3, #2
 800a18c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00e      	beq.n	800a1b4 <osThreadNew+0xa8>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	2b5b      	cmp	r3, #91	@ 0x5b
 800a19c:	d90a      	bls.n	800a1b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d006      	beq.n	800a1b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	695b      	ldr	r3, [r3, #20]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d002      	beq.n	800a1b4 <osThreadNew+0xa8>
        mem = 1;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	61bb      	str	r3, [r7, #24]
 800a1b2:	e010      	b.n	800a1d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10c      	bne.n	800a1d6 <osThreadNew+0xca>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d108      	bne.n	800a1d6 <osThreadNew+0xca>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	691b      	ldr	r3, [r3, #16]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d104      	bne.n	800a1d6 <osThreadNew+0xca>
          mem = 0;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	61bb      	str	r3, [r7, #24]
 800a1d0:	e001      	b.n	800a1d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d110      	bne.n	800a1fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1e4:	9202      	str	r2, [sp, #8]
 800a1e6:	9301      	str	r3, [sp, #4]
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	9300      	str	r3, [sp, #0]
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	6a3a      	ldr	r2, [r7, #32]
 800a1f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f000 fe1a 	bl	800ae2c <xTaskCreateStatic>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	613b      	str	r3, [r7, #16]
 800a1fc:	e013      	b.n	800a226 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d110      	bne.n	800a226 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a204:	6a3b      	ldr	r3, [r7, #32]
 800a206:	b29a      	uxth	r2, r3
 800a208:	f107 0310 	add.w	r3, r7, #16
 800a20c:	9301      	str	r3, [sp, #4]
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	9300      	str	r3, [sp, #0]
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	f000 fe68 	bl	800aeec <xTaskCreate>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d001      	beq.n	800a226 <osThreadNew+0x11a>
            hTask = NULL;
 800a222:	2300      	movs	r3, #0
 800a224:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a226:	693b      	ldr	r3, [r7, #16]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3728      	adds	r7, #40	@ 0x28
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a238:	f3ef 8305 	mrs	r3, IPSR
 800a23c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a23e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a240:	2b00      	cmp	r3, #0
 800a242:	d003      	beq.n	800a24c <osDelay+0x1c>
    stat = osErrorISR;
 800a244:	f06f 0305 	mvn.w	r3, #5
 800a248:	60fb      	str	r3, [r7, #12]
 800a24a:	e007      	b.n	800a25c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a24c:	2300      	movs	r3, #0
 800a24e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d002      	beq.n	800a25c <osDelay+0x2c>
      vTaskDelay(ticks);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 ff8e 	bl	800b178 <vTaskDelay>
    }
  }

  return (stat);
 800a25c:	68fb      	ldr	r3, [r7, #12]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
	...

0800a268 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	4a07      	ldr	r2, [pc, #28]	@ (800a294 <vApplicationGetIdleTaskMemory+0x2c>)
 800a278:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	4a06      	ldr	r2, [pc, #24]	@ (800a298 <vApplicationGetIdleTaskMemory+0x30>)
 800a27e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2280      	movs	r2, #128	@ 0x80
 800a284:	601a      	str	r2, [r3, #0]
}
 800a286:	bf00      	nop
 800a288:	3714      	adds	r7, #20
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	20000610 	.word	0x20000610
 800a298:	2000066c 	.word	0x2000066c

0800a29c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	4a07      	ldr	r2, [pc, #28]	@ (800a2c8 <vApplicationGetTimerTaskMemory+0x2c>)
 800a2ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	4a06      	ldr	r2, [pc, #24]	@ (800a2cc <vApplicationGetTimerTaskMemory+0x30>)
 800a2b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a2ba:	601a      	str	r2, [r3, #0]
}
 800a2bc:	bf00      	nop
 800a2be:	3714      	adds	r7, #20
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr
 800a2c8:	2000086c 	.word	0x2000086c
 800a2cc:	200008c8 	.word	0x200008c8

0800a2d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f103 0208 	add.w	r2, r3, #8
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f103 0208 	add.w	r2, r3, #8
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f103 0208 	add.w	r2, r3, #8
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a304:	bf00      	nop
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a31e:	bf00      	nop
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a32a:	b480      	push	{r7}
 800a32c:	b085      	sub	sp, #20
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
 800a332:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	689a      	ldr	r2, [r3, #8]
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	683a      	ldr	r2, [r7, #0]
 800a34e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	683a      	ldr	r2, [r7, #0]
 800a354:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	1c5a      	adds	r2, r3, #1
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	601a      	str	r2, [r3, #0]
}
 800a366:	bf00      	nop
 800a368:	3714      	adds	r7, #20
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr

0800a372 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a372:	b480      	push	{r7}
 800a374:	b085      	sub	sp, #20
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a388:	d103      	bne.n	800a392 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	60fb      	str	r3, [r7, #12]
 800a390:	e00c      	b.n	800a3ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	3308      	adds	r3, #8
 800a396:	60fb      	str	r3, [r7, #12]
 800a398:	e002      	b.n	800a3a0 <vListInsert+0x2e>
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	60fb      	str	r3, [r7, #12]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68ba      	ldr	r2, [r7, #8]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d2f6      	bcs.n	800a39a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	685a      	ldr	r2, [r3, #4]
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	683a      	ldr	r2, [r7, #0]
 800a3ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	683a      	ldr	r2, [r7, #0]
 800a3c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	1c5a      	adds	r2, r3, #1
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	601a      	str	r2, [r3, #0]
}
 800a3d8:	bf00      	nop
 800a3da:	3714      	adds	r7, #20
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	6892      	ldr	r2, [r2, #8]
 800a3fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	6852      	ldr	r2, [r2, #4]
 800a404:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d103      	bne.n	800a418 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	689a      	ldr	r2, [r3, #8]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	1e5a      	subs	r2, r3, #1
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3714      	adds	r7, #20
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d10b      	bne.n	800a464 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a450:	f383 8811 	msr	BASEPRI, r3
 800a454:	f3bf 8f6f 	isb	sy
 800a458:	f3bf 8f4f 	dsb	sy
 800a45c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a45e:	bf00      	nop
 800a460:	bf00      	nop
 800a462:	e7fd      	b.n	800a460 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a464:	f002 f878 	bl	800c558 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a470:	68f9      	ldr	r1, [r7, #12]
 800a472:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a474:	fb01 f303 	mul.w	r3, r1, r3
 800a478:	441a      	add	r2, r3
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a494:	3b01      	subs	r3, #1
 800a496:	68f9      	ldr	r1, [r7, #12]
 800a498:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a49a:	fb01 f303 	mul.w	r3, r1, r3
 800a49e:	441a      	add	r2, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	22ff      	movs	r2, #255	@ 0xff
 800a4a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	22ff      	movs	r2, #255	@ 0xff
 800a4b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d114      	bne.n	800a4e4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d01a      	beq.n	800a4f8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	3310      	adds	r3, #16
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f001 f91a 	bl	800b700 <xTaskRemoveFromEventList>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d012      	beq.n	800a4f8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a508 <xQueueGenericReset+0xd0>)
 800a4d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4d8:	601a      	str	r2, [r3, #0]
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	f3bf 8f6f 	isb	sy
 800a4e2:	e009      	b.n	800a4f8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	3310      	adds	r3, #16
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7ff fef1 	bl	800a2d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	3324      	adds	r3, #36	@ 0x24
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7ff feec 	bl	800a2d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a4f8:	f002 f860 	bl	800c5bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a4fc:	2301      	movs	r3, #1
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	e000ed04 	.word	0xe000ed04

0800a50c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b08e      	sub	sp, #56	@ 0x38
 800a510:	af02      	add	r7, sp, #8
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
 800a518:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d10b      	bne.n	800a538 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a524:	f383 8811 	msr	BASEPRI, r3
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a532:	bf00      	nop
 800a534:	bf00      	nop
 800a536:	e7fd      	b.n	800a534 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d10b      	bne.n	800a556 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a550:	bf00      	nop
 800a552:	bf00      	nop
 800a554:	e7fd      	b.n	800a552 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d002      	beq.n	800a562 <xQueueGenericCreateStatic+0x56>
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d001      	beq.n	800a566 <xQueueGenericCreateStatic+0x5a>
 800a562:	2301      	movs	r3, #1
 800a564:	e000      	b.n	800a568 <xQueueGenericCreateStatic+0x5c>
 800a566:	2300      	movs	r3, #0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10b      	bne.n	800a584 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a56c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	623b      	str	r3, [r7, #32]
}
 800a57e:	bf00      	nop
 800a580:	bf00      	nop
 800a582:	e7fd      	b.n	800a580 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d102      	bne.n	800a590 <xQueueGenericCreateStatic+0x84>
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d101      	bne.n	800a594 <xQueueGenericCreateStatic+0x88>
 800a590:	2301      	movs	r3, #1
 800a592:	e000      	b.n	800a596 <xQueueGenericCreateStatic+0x8a>
 800a594:	2300      	movs	r3, #0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d10b      	bne.n	800a5b2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a59e:	f383 8811 	msr	BASEPRI, r3
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	f3bf 8f4f 	dsb	sy
 800a5aa:	61fb      	str	r3, [r7, #28]
}
 800a5ac:	bf00      	nop
 800a5ae:	bf00      	nop
 800a5b0:	e7fd      	b.n	800a5ae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a5b2:	2350      	movs	r3, #80	@ 0x50
 800a5b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	2b50      	cmp	r3, #80	@ 0x50
 800a5ba:	d00b      	beq.n	800a5d4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a5bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c0:	f383 8811 	msr	BASEPRI, r3
 800a5c4:	f3bf 8f6f 	isb	sy
 800a5c8:	f3bf 8f4f 	dsb	sy
 800a5cc:	61bb      	str	r3, [r7, #24]
}
 800a5ce:	bf00      	nop
 800a5d0:	bf00      	nop
 800a5d2:	e7fd      	b.n	800a5d0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a5d4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a5da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d00d      	beq.n	800a5fc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a5e8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ee:	9300      	str	r3, [sp, #0]
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	68b9      	ldr	r1, [r7, #8]
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f000 f805 	bl	800a606 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3730      	adds	r7, #48	@ 0x30
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b084      	sub	sp, #16
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	60f8      	str	r0, [r7, #12]
 800a60e:	60b9      	str	r1, [r7, #8]
 800a610:	607a      	str	r2, [r7, #4]
 800a612:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d103      	bne.n	800a622 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	69ba      	ldr	r2, [r7, #24]
 800a61e:	601a      	str	r2, [r3, #0]
 800a620:	e002      	b.n	800a628 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a628:	69bb      	ldr	r3, [r7, #24]
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	68ba      	ldr	r2, [r7, #8]
 800a632:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a634:	2101      	movs	r1, #1
 800a636:	69b8      	ldr	r0, [r7, #24]
 800a638:	f7ff fefe 	bl	800a438 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	78fa      	ldrb	r2, [r7, #3]
 800a640:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a644:	bf00      	nop
 800a646:	3710      	adds	r7, #16
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b08e      	sub	sp, #56	@ 0x38
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
 800a658:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a65a:	2300      	movs	r3, #0
 800a65c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a664:	2b00      	cmp	r3, #0
 800a666:	d10b      	bne.n	800a680 <xQueueGenericSend+0x34>
	__asm volatile
 800a668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a66c:	f383 8811 	msr	BASEPRI, r3
 800a670:	f3bf 8f6f 	isb	sy
 800a674:	f3bf 8f4f 	dsb	sy
 800a678:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a67a:	bf00      	nop
 800a67c:	bf00      	nop
 800a67e:	e7fd      	b.n	800a67c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d103      	bne.n	800a68e <xQueueGenericSend+0x42>
 800a686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d101      	bne.n	800a692 <xQueueGenericSend+0x46>
 800a68e:	2301      	movs	r3, #1
 800a690:	e000      	b.n	800a694 <xQueueGenericSend+0x48>
 800a692:	2300      	movs	r3, #0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d10b      	bne.n	800a6b0 <xQueueGenericSend+0x64>
	__asm volatile
 800a698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a69c:	f383 8811 	msr	BASEPRI, r3
 800a6a0:	f3bf 8f6f 	isb	sy
 800a6a4:	f3bf 8f4f 	dsb	sy
 800a6a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a6aa:	bf00      	nop
 800a6ac:	bf00      	nop
 800a6ae:	e7fd      	b.n	800a6ac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	2b02      	cmp	r3, #2
 800a6b4:	d103      	bne.n	800a6be <xQueueGenericSend+0x72>
 800a6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d101      	bne.n	800a6c2 <xQueueGenericSend+0x76>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e000      	b.n	800a6c4 <xQueueGenericSend+0x78>
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d10b      	bne.n	800a6e0 <xQueueGenericSend+0x94>
	__asm volatile
 800a6c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6cc:	f383 8811 	msr	BASEPRI, r3
 800a6d0:	f3bf 8f6f 	isb	sy
 800a6d4:	f3bf 8f4f 	dsb	sy
 800a6d8:	623b      	str	r3, [r7, #32]
}
 800a6da:	bf00      	nop
 800a6dc:	bf00      	nop
 800a6de:	e7fd      	b.n	800a6dc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6e0:	f001 f9ce 	bl	800ba80 <xTaskGetSchedulerState>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d102      	bne.n	800a6f0 <xQueueGenericSend+0xa4>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d101      	bne.n	800a6f4 <xQueueGenericSend+0xa8>
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e000      	b.n	800a6f6 <xQueueGenericSend+0xaa>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10b      	bne.n	800a712 <xQueueGenericSend+0xc6>
	__asm volatile
 800a6fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	61fb      	str	r3, [r7, #28]
}
 800a70c:	bf00      	nop
 800a70e:	bf00      	nop
 800a710:	e7fd      	b.n	800a70e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a712:	f001 ff21 	bl	800c558 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a718:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a71c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a71e:	429a      	cmp	r2, r3
 800a720:	d302      	bcc.n	800a728 <xQueueGenericSend+0xdc>
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	2b02      	cmp	r3, #2
 800a726:	d129      	bne.n	800a77c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a728:	683a      	ldr	r2, [r7, #0]
 800a72a:	68b9      	ldr	r1, [r7, #8]
 800a72c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a72e:	f000 fa0f 	bl	800ab50 <prvCopyDataToQueue>
 800a732:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d010      	beq.n	800a75e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73e:	3324      	adds	r3, #36	@ 0x24
 800a740:	4618      	mov	r0, r3
 800a742:	f000 ffdd 	bl	800b700 <xTaskRemoveFromEventList>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d013      	beq.n	800a774 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a74c:	4b3f      	ldr	r3, [pc, #252]	@ (800a84c <xQueueGenericSend+0x200>)
 800a74e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a752:	601a      	str	r2, [r3, #0]
 800a754:	f3bf 8f4f 	dsb	sy
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	e00a      	b.n	800a774 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a760:	2b00      	cmp	r3, #0
 800a762:	d007      	beq.n	800a774 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a764:	4b39      	ldr	r3, [pc, #228]	@ (800a84c <xQueueGenericSend+0x200>)
 800a766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a76a:	601a      	str	r2, [r3, #0]
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a774:	f001 ff22 	bl	800c5bc <vPortExitCritical>
				return pdPASS;
 800a778:	2301      	movs	r3, #1
 800a77a:	e063      	b.n	800a844 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d103      	bne.n	800a78a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a782:	f001 ff1b 	bl	800c5bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a786:	2300      	movs	r3, #0
 800a788:	e05c      	b.n	800a844 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a78a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d106      	bne.n	800a79e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a790:	f107 0314 	add.w	r3, r7, #20
 800a794:	4618      	mov	r0, r3
 800a796:	f001 f817 	bl	800b7c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a79a:	2301      	movs	r3, #1
 800a79c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a79e:	f001 ff0d 	bl	800c5bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7a2:	f000 fd87 	bl	800b2b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7a6:	f001 fed7 	bl	800c558 <vPortEnterCritical>
 800a7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a7b0:	b25b      	sxtb	r3, r3
 800a7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7b6:	d103      	bne.n	800a7c0 <xQueueGenericSend+0x174>
 800a7b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a7c6:	b25b      	sxtb	r3, r3
 800a7c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7cc:	d103      	bne.n	800a7d6 <xQueueGenericSend+0x18a>
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a7d6:	f001 fef1 	bl	800c5bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7da:	1d3a      	adds	r2, r7, #4
 800a7dc:	f107 0314 	add.w	r3, r7, #20
 800a7e0:	4611      	mov	r1, r2
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f001 f806 	bl	800b7f4 <xTaskCheckForTimeOut>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d124      	bne.n	800a838 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a7ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7f0:	f000 faa6 	bl	800ad40 <prvIsQueueFull>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d018      	beq.n	800a82c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7fc:	3310      	adds	r3, #16
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	4611      	mov	r1, r2
 800a802:	4618      	mov	r0, r3
 800a804:	f000 ff2a 	bl	800b65c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a808:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a80a:	f000 fa31 	bl	800ac70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a80e:	f000 fd5f 	bl	800b2d0 <xTaskResumeAll>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	f47f af7c 	bne.w	800a712 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a81a:	4b0c      	ldr	r3, [pc, #48]	@ (800a84c <xQueueGenericSend+0x200>)
 800a81c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a820:	601a      	str	r2, [r3, #0]
 800a822:	f3bf 8f4f 	dsb	sy
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	e772      	b.n	800a712 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a82c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a82e:	f000 fa1f 	bl	800ac70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a832:	f000 fd4d 	bl	800b2d0 <xTaskResumeAll>
 800a836:	e76c      	b.n	800a712 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a838:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a83a:	f000 fa19 	bl	800ac70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a83e:	f000 fd47 	bl	800b2d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a842:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a844:	4618      	mov	r0, r3
 800a846:	3738      	adds	r7, #56	@ 0x38
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	e000ed04 	.word	0xe000ed04

0800a850 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b090      	sub	sp, #64	@ 0x40
 800a854:	af00      	add	r7, sp, #0
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	607a      	str	r2, [r7, #4]
 800a85c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10b      	bne.n	800a880 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a86c:	f383 8811 	msr	BASEPRI, r3
 800a870:	f3bf 8f6f 	isb	sy
 800a874:	f3bf 8f4f 	dsb	sy
 800a878:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a87a:	bf00      	nop
 800a87c:	bf00      	nop
 800a87e:	e7fd      	b.n	800a87c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d103      	bne.n	800a88e <xQueueGenericSendFromISR+0x3e>
 800a886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d101      	bne.n	800a892 <xQueueGenericSendFromISR+0x42>
 800a88e:	2301      	movs	r3, #1
 800a890:	e000      	b.n	800a894 <xQueueGenericSendFromISR+0x44>
 800a892:	2300      	movs	r3, #0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10b      	bne.n	800a8b0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a89c:	f383 8811 	msr	BASEPRI, r3
 800a8a0:	f3bf 8f6f 	isb	sy
 800a8a4:	f3bf 8f4f 	dsb	sy
 800a8a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a8aa:	bf00      	nop
 800a8ac:	bf00      	nop
 800a8ae:	e7fd      	b.n	800a8ac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d103      	bne.n	800a8be <xQueueGenericSendFromISR+0x6e>
 800a8b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d101      	bne.n	800a8c2 <xQueueGenericSendFromISR+0x72>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e000      	b.n	800a8c4 <xQueueGenericSendFromISR+0x74>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d10b      	bne.n	800a8e0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a8c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8cc:	f383 8811 	msr	BASEPRI, r3
 800a8d0:	f3bf 8f6f 	isb	sy
 800a8d4:	f3bf 8f4f 	dsb	sy
 800a8d8:	623b      	str	r3, [r7, #32]
}
 800a8da:	bf00      	nop
 800a8dc:	bf00      	nop
 800a8de:	e7fd      	b.n	800a8dc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8e0:	f001 ff1a 	bl	800c718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a8e4:	f3ef 8211 	mrs	r2, BASEPRI
 800a8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ec:	f383 8811 	msr	BASEPRI, r3
 800a8f0:	f3bf 8f6f 	isb	sy
 800a8f4:	f3bf 8f4f 	dsb	sy
 800a8f8:	61fa      	str	r2, [r7, #28]
 800a8fa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a8fc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8fe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a902:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a908:	429a      	cmp	r2, r3
 800a90a:	d302      	bcc.n	800a912 <xQueueGenericSendFromISR+0xc2>
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	2b02      	cmp	r3, #2
 800a910:	d12f      	bne.n	800a972 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a914:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a918:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a91e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a920:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a922:	683a      	ldr	r2, [r7, #0]
 800a924:	68b9      	ldr	r1, [r7, #8]
 800a926:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a928:	f000 f912 	bl	800ab50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a92c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a930:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a934:	d112      	bne.n	800a95c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d016      	beq.n	800a96c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a93e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a940:	3324      	adds	r3, #36	@ 0x24
 800a942:	4618      	mov	r0, r3
 800a944:	f000 fedc 	bl	800b700 <xTaskRemoveFromEventList>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00e      	beq.n	800a96c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00b      	beq.n	800a96c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	601a      	str	r2, [r3, #0]
 800a95a:	e007      	b.n	800a96c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a95c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a960:	3301      	adds	r3, #1
 800a962:	b2db      	uxtb	r3, r3
 800a964:	b25a      	sxtb	r2, r3
 800a966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a968:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a96c:	2301      	movs	r3, #1
 800a96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a970:	e001      	b.n	800a976 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a972:	2300      	movs	r3, #0
 800a974:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a978:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a980:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a984:	4618      	mov	r0, r3
 800a986:	3740      	adds	r7, #64	@ 0x40
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b08c      	sub	sp, #48	@ 0x30
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a998:	2300      	movs	r3, #0
 800a99a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10b      	bne.n	800a9be <xQueueReceive+0x32>
	__asm volatile
 800a9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9aa:	f383 8811 	msr	BASEPRI, r3
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f3bf 8f4f 	dsb	sy
 800a9b6:	623b      	str	r3, [r7, #32]
}
 800a9b8:	bf00      	nop
 800a9ba:	bf00      	nop
 800a9bc:	e7fd      	b.n	800a9ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d103      	bne.n	800a9cc <xQueueReceive+0x40>
 800a9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d101      	bne.n	800a9d0 <xQueueReceive+0x44>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	e000      	b.n	800a9d2 <xQueueReceive+0x46>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d10b      	bne.n	800a9ee <xQueueReceive+0x62>
	__asm volatile
 800a9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9da:	f383 8811 	msr	BASEPRI, r3
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	61fb      	str	r3, [r7, #28]
}
 800a9e8:	bf00      	nop
 800a9ea:	bf00      	nop
 800a9ec:	e7fd      	b.n	800a9ea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9ee:	f001 f847 	bl	800ba80 <xTaskGetSchedulerState>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d102      	bne.n	800a9fe <xQueueReceive+0x72>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d101      	bne.n	800aa02 <xQueueReceive+0x76>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e000      	b.n	800aa04 <xQueueReceive+0x78>
 800aa02:	2300      	movs	r3, #0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d10b      	bne.n	800aa20 <xQueueReceive+0x94>
	__asm volatile
 800aa08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa0c:	f383 8811 	msr	BASEPRI, r3
 800aa10:	f3bf 8f6f 	isb	sy
 800aa14:	f3bf 8f4f 	dsb	sy
 800aa18:	61bb      	str	r3, [r7, #24]
}
 800aa1a:	bf00      	nop
 800aa1c:	bf00      	nop
 800aa1e:	e7fd      	b.n	800aa1c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa20:	f001 fd9a 	bl	800c558 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa28:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d01f      	beq.n	800aa70 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa30:	68b9      	ldr	r1, [r7, #8]
 800aa32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa34:	f000 f8f6 	bl	800ac24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3a:	1e5a      	subs	r2, r3, #1
 800aa3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa3e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d00f      	beq.n	800aa68 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa4a:	3310      	adds	r3, #16
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f000 fe57 	bl	800b700 <xTaskRemoveFromEventList>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d007      	beq.n	800aa68 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa58:	4b3c      	ldr	r3, [pc, #240]	@ (800ab4c <xQueueReceive+0x1c0>)
 800aa5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa5e:	601a      	str	r2, [r3, #0]
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa68:	f001 fda8 	bl	800c5bc <vPortExitCritical>
				return pdPASS;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e069      	b.n	800ab44 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d103      	bne.n	800aa7e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa76:	f001 fda1 	bl	800c5bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	e062      	b.n	800ab44 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d106      	bne.n	800aa92 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa84:	f107 0310 	add.w	r3, r7, #16
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f000 fe9d 	bl	800b7c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa92:	f001 fd93 	bl	800c5bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa96:	f000 fc0d 	bl	800b2b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa9a:	f001 fd5d 	bl	800c558 <vPortEnterCritical>
 800aa9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aaa4:	b25b      	sxtb	r3, r3
 800aaa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaaa:	d103      	bne.n	800aab4 <xQueueReceive+0x128>
 800aaac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaae:	2200      	movs	r2, #0
 800aab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aab6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aaba:	b25b      	sxtb	r3, r3
 800aabc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aac0:	d103      	bne.n	800aaca <xQueueReceive+0x13e>
 800aac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac4:	2200      	movs	r2, #0
 800aac6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aaca:	f001 fd77 	bl	800c5bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aace:	1d3a      	adds	r2, r7, #4
 800aad0:	f107 0310 	add.w	r3, r7, #16
 800aad4:	4611      	mov	r1, r2
 800aad6:	4618      	mov	r0, r3
 800aad8:	f000 fe8c 	bl	800b7f4 <xTaskCheckForTimeOut>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d123      	bne.n	800ab2a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aae2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aae4:	f000 f916 	bl	800ad14 <prvIsQueueEmpty>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d017      	beq.n	800ab1e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aaee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf0:	3324      	adds	r3, #36	@ 0x24
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	4611      	mov	r1, r2
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f000 fdb0 	bl	800b65c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aafc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aafe:	f000 f8b7 	bl	800ac70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab02:	f000 fbe5 	bl	800b2d0 <xTaskResumeAll>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d189      	bne.n	800aa20 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ab0c:	4b0f      	ldr	r3, [pc, #60]	@ (800ab4c <xQueueReceive+0x1c0>)
 800ab0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab12:	601a      	str	r2, [r3, #0]
 800ab14:	f3bf 8f4f 	dsb	sy
 800ab18:	f3bf 8f6f 	isb	sy
 800ab1c:	e780      	b.n	800aa20 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ab1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab20:	f000 f8a6 	bl	800ac70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab24:	f000 fbd4 	bl	800b2d0 <xTaskResumeAll>
 800ab28:	e77a      	b.n	800aa20 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ab2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab2c:	f000 f8a0 	bl	800ac70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab30:	f000 fbce 	bl	800b2d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab36:	f000 f8ed 	bl	800ad14 <prvIsQueueEmpty>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f43f af6f 	beq.w	800aa20 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab42:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3730      	adds	r7, #48	@ 0x30
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	e000ed04 	.word	0xe000ed04

0800ab50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d10d      	bne.n	800ab8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d14d      	bne.n	800ac12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f000 ff9e 	bl	800babc <xTaskPriorityDisinherit>
 800ab80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	609a      	str	r2, [r3, #8]
 800ab88:	e043      	b.n	800ac12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d119      	bne.n	800abc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6858      	ldr	r0, [r3, #4]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab98:	461a      	mov	r2, r3
 800ab9a:	68b9      	ldr	r1, [r7, #8]
 800ab9c:	f003 f8db 	bl	800dd56 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	685a      	ldr	r2, [r3, #4]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aba8:	441a      	add	r2, r3
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	685a      	ldr	r2, [r3, #4]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d32b      	bcc.n	800ac12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	605a      	str	r2, [r3, #4]
 800abc2:	e026      	b.n	800ac12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	68d8      	ldr	r0, [r3, #12]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abcc:	461a      	mov	r2, r3
 800abce:	68b9      	ldr	r1, [r7, #8]
 800abd0:	f003 f8c1 	bl	800dd56 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	68da      	ldr	r2, [r3, #12]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abdc:	425b      	negs	r3, r3
 800abde:	441a      	add	r2, r3
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	68da      	ldr	r2, [r3, #12]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	429a      	cmp	r2, r3
 800abee:	d207      	bcs.n	800ac00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	689a      	ldr	r2, [r3, #8]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abf8:	425b      	negs	r3, r3
 800abfa:	441a      	add	r2, r3
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2b02      	cmp	r3, #2
 800ac04:	d105      	bne.n	800ac12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d002      	beq.n	800ac12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	1c5a      	adds	r2, r3, #1
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ac1a:	697b      	ldr	r3, [r7, #20]
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3718      	adds	r7, #24
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d018      	beq.n	800ac68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	68da      	ldr	r2, [r3, #12]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac3e:	441a      	add	r2, r3
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	68da      	ldr	r2, [r3, #12]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d303      	bcc.n	800ac58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	68d9      	ldr	r1, [r3, #12]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac60:	461a      	mov	r2, r3
 800ac62:	6838      	ldr	r0, [r7, #0]
 800ac64:	f003 f877 	bl	800dd56 <memcpy>
	}
}
 800ac68:	bf00      	nop
 800ac6a:	3708      	adds	r7, #8
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac78:	f001 fc6e 	bl	800c558 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac84:	e011      	b.n	800acaa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d012      	beq.n	800acb4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	3324      	adds	r3, #36	@ 0x24
 800ac92:	4618      	mov	r0, r3
 800ac94:	f000 fd34 	bl	800b700 <xTaskRemoveFromEventList>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac9e:	f000 fe0d 	bl	800b8bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aca2:	7bfb      	ldrb	r3, [r7, #15]
 800aca4:	3b01      	subs	r3, #1
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800acaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	dce9      	bgt.n	800ac86 <prvUnlockQueue+0x16>
 800acb2:	e000      	b.n	800acb6 <prvUnlockQueue+0x46>
					break;
 800acb4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	22ff      	movs	r2, #255	@ 0xff
 800acba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800acbe:	f001 fc7d 	bl	800c5bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800acc2:	f001 fc49 	bl	800c558 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800accc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acce:	e011      	b.n	800acf4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d012      	beq.n	800acfe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	3310      	adds	r3, #16
 800acdc:	4618      	mov	r0, r3
 800acde:	f000 fd0f 	bl	800b700 <xTaskRemoveFromEventList>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d001      	beq.n	800acec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ace8:	f000 fde8 	bl	800b8bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800acec:	7bbb      	ldrb	r3, [r7, #14]
 800acee:	3b01      	subs	r3, #1
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	dce9      	bgt.n	800acd0 <prvUnlockQueue+0x60>
 800acfc:	e000      	b.n	800ad00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800acfe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	22ff      	movs	r2, #255	@ 0xff
 800ad04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ad08:	f001 fc58 	bl	800c5bc <vPortExitCritical>
}
 800ad0c:	bf00      	nop
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad1c:	f001 fc1c 	bl	800c558 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d102      	bne.n	800ad2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	60fb      	str	r3, [r7, #12]
 800ad2c:	e001      	b.n	800ad32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad32:	f001 fc43 	bl	800c5bc <vPortExitCritical>

	return xReturn;
 800ad36:	68fb      	ldr	r3, [r7, #12]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3710      	adds	r7, #16
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad48:	f001 fc06 	bl	800c558 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d102      	bne.n	800ad5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	60fb      	str	r3, [r7, #12]
 800ad5c:	e001      	b.n	800ad62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad62:	f001 fc2b 	bl	800c5bc <vPortExitCritical>

	return xReturn;
 800ad66:	68fb      	ldr	r3, [r7, #12]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	60fb      	str	r3, [r7, #12]
 800ad7e:	e014      	b.n	800adaa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ad80:	4a0f      	ldr	r2, [pc, #60]	@ (800adc0 <vQueueAddToRegistry+0x50>)
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d10b      	bne.n	800ada4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ad8c:	490c      	ldr	r1, [pc, #48]	@ (800adc0 <vQueueAddToRegistry+0x50>)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	683a      	ldr	r2, [r7, #0]
 800ad92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ad96:	4a0a      	ldr	r2, [pc, #40]	@ (800adc0 <vQueueAddToRegistry+0x50>)
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	00db      	lsls	r3, r3, #3
 800ad9c:	4413      	add	r3, r2
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ada2:	e006      	b.n	800adb2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	3301      	adds	r3, #1
 800ada8:	60fb      	str	r3, [r7, #12]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2b07      	cmp	r3, #7
 800adae:	d9e7      	bls.n	800ad80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800adb0:	bf00      	nop
 800adb2:	bf00      	nop
 800adb4:	3714      	adds	r7, #20
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	20000cc8 	.word	0x20000cc8

0800adc4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b086      	sub	sp, #24
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800add4:	f001 fbc0 	bl	800c558 <vPortEnterCritical>
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800adde:	b25b      	sxtb	r3, r3
 800ade0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ade4:	d103      	bne.n	800adee <vQueueWaitForMessageRestricted+0x2a>
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800adf4:	b25b      	sxtb	r3, r3
 800adf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adfa:	d103      	bne.n	800ae04 <vQueueWaitForMessageRestricted+0x40>
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae04:	f001 fbda 	bl	800c5bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d106      	bne.n	800ae1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	3324      	adds	r3, #36	@ 0x24
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	68b9      	ldr	r1, [r7, #8]
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f000 fc45 	bl	800b6a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ae1e:	6978      	ldr	r0, [r7, #20]
 800ae20:	f7ff ff26 	bl	800ac70 <prvUnlockQueue>
	}
 800ae24:	bf00      	nop
 800ae26:	3718      	adds	r7, #24
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b08e      	sub	sp, #56	@ 0x38
 800ae30:	af04      	add	r7, sp, #16
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
 800ae38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ae3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d10b      	bne.n	800ae58 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ae40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	623b      	str	r3, [r7, #32]
}
 800ae52:	bf00      	nop
 800ae54:	bf00      	nop
 800ae56:	e7fd      	b.n	800ae54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ae58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d10b      	bne.n	800ae76 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ae5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	61fb      	str	r3, [r7, #28]
}
 800ae70:	bf00      	nop
 800ae72:	bf00      	nop
 800ae74:	e7fd      	b.n	800ae72 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae76:	235c      	movs	r3, #92	@ 0x5c
 800ae78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	2b5c      	cmp	r3, #92	@ 0x5c
 800ae7e:	d00b      	beq.n	800ae98 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ae80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	61bb      	str	r3, [r7, #24]
}
 800ae92:	bf00      	nop
 800ae94:	bf00      	nop
 800ae96:	e7fd      	b.n	800ae94 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae98:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d01e      	beq.n	800aede <xTaskCreateStatic+0xb2>
 800aea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d01b      	beq.n	800aede <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aeaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aeae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aeb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb2:	2202      	movs	r2, #2
 800aeb4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aeb8:	2300      	movs	r3, #0
 800aeba:	9303      	str	r3, [sp, #12]
 800aebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aebe:	9302      	str	r3, [sp, #8]
 800aec0:	f107 0314 	add.w	r3, r7, #20
 800aec4:	9301      	str	r3, [sp, #4]
 800aec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec8:	9300      	str	r3, [sp, #0]
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	68b9      	ldr	r1, [r7, #8]
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	f000 f850 	bl	800af76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aed6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aed8:	f000 f8de 	bl	800b098 <prvAddNewTaskToReadyList>
 800aedc:	e001      	b.n	800aee2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800aede:	2300      	movs	r3, #0
 800aee0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aee2:	697b      	ldr	r3, [r7, #20]
	}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3728      	adds	r7, #40	@ 0x28
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b08c      	sub	sp, #48	@ 0x30
 800aef0:	af04      	add	r7, sp, #16
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	603b      	str	r3, [r7, #0]
 800aef8:	4613      	mov	r3, r2
 800aefa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aefc:	88fb      	ldrh	r3, [r7, #6]
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4618      	mov	r0, r3
 800af02:	f001 fc4b 	bl	800c79c <pvPortMalloc>
 800af06:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00e      	beq.n	800af2c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800af0e:	205c      	movs	r0, #92	@ 0x5c
 800af10:	f001 fc44 	bl	800c79c <pvPortMalloc>
 800af14:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d003      	beq.n	800af24 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	697a      	ldr	r2, [r7, #20]
 800af20:	631a      	str	r2, [r3, #48]	@ 0x30
 800af22:	e005      	b.n	800af30 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800af24:	6978      	ldr	r0, [r7, #20]
 800af26:	f001 fd07 	bl	800c938 <vPortFree>
 800af2a:	e001      	b.n	800af30 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800af2c:	2300      	movs	r3, #0
 800af2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d017      	beq.n	800af66 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	2200      	movs	r2, #0
 800af3a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800af3e:	88fa      	ldrh	r2, [r7, #6]
 800af40:	2300      	movs	r3, #0
 800af42:	9303      	str	r3, [sp, #12]
 800af44:	69fb      	ldr	r3, [r7, #28]
 800af46:	9302      	str	r3, [sp, #8]
 800af48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af4a:	9301      	str	r3, [sp, #4]
 800af4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af4e:	9300      	str	r3, [sp, #0]
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	68b9      	ldr	r1, [r7, #8]
 800af54:	68f8      	ldr	r0, [r7, #12]
 800af56:	f000 f80e 	bl	800af76 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af5a:	69f8      	ldr	r0, [r7, #28]
 800af5c:	f000 f89c 	bl	800b098 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af60:	2301      	movs	r3, #1
 800af62:	61bb      	str	r3, [r7, #24]
 800af64:	e002      	b.n	800af6c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af66:	f04f 33ff 	mov.w	r3, #4294967295
 800af6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af6c:	69bb      	ldr	r3, [r7, #24]
	}
 800af6e:	4618      	mov	r0, r3
 800af70:	3720      	adds	r7, #32
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b088      	sub	sp, #32
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	60f8      	str	r0, [r7, #12]
 800af7e:	60b9      	str	r1, [r7, #8]
 800af80:	607a      	str	r2, [r7, #4]
 800af82:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800af84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af86:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	461a      	mov	r2, r3
 800af8e:	21a5      	movs	r1, #165	@ 0xa5
 800af90:	f002 fe3d 	bl	800dc0e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af9e:	3b01      	subs	r3, #1
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	4413      	add	r3, r2
 800afa4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	f023 0307 	bic.w	r3, r3, #7
 800afac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	f003 0307 	and.w	r3, r3, #7
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00b      	beq.n	800afd0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800afb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afbc:	f383 8811 	msr	BASEPRI, r3
 800afc0:	f3bf 8f6f 	isb	sy
 800afc4:	f3bf 8f4f 	dsb	sy
 800afc8:	617b      	str	r3, [r7, #20]
}
 800afca:	bf00      	nop
 800afcc:	bf00      	nop
 800afce:	e7fd      	b.n	800afcc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d01f      	beq.n	800b016 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afd6:	2300      	movs	r3, #0
 800afd8:	61fb      	str	r3, [r7, #28]
 800afda:	e012      	b.n	800b002 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800afdc:	68ba      	ldr	r2, [r7, #8]
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	4413      	add	r3, r2
 800afe2:	7819      	ldrb	r1, [r3, #0]
 800afe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afe6:	69fb      	ldr	r3, [r7, #28]
 800afe8:	4413      	add	r3, r2
 800afea:	3334      	adds	r3, #52	@ 0x34
 800afec:	460a      	mov	r2, r1
 800afee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aff0:	68ba      	ldr	r2, [r7, #8]
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	4413      	add	r3, r2
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d006      	beq.n	800b00a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800affc:	69fb      	ldr	r3, [r7, #28]
 800affe:	3301      	adds	r3, #1
 800b000:	61fb      	str	r3, [r7, #28]
 800b002:	69fb      	ldr	r3, [r7, #28]
 800b004:	2b0f      	cmp	r3, #15
 800b006:	d9e9      	bls.n	800afdc <prvInitialiseNewTask+0x66>
 800b008:	e000      	b.n	800b00c <prvInitialiseNewTask+0x96>
			{
				break;
 800b00a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b00e:	2200      	movs	r2, #0
 800b010:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b014:	e003      	b.n	800b01e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b018:	2200      	movs	r2, #0
 800b01a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b020:	2b37      	cmp	r3, #55	@ 0x37
 800b022:	d901      	bls.n	800b028 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b024:	2337      	movs	r3, #55	@ 0x37
 800b026:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b02a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b02c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b030:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b032:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b036:	2200      	movs	r2, #0
 800b038:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03c:	3304      	adds	r3, #4
 800b03e:	4618      	mov	r0, r3
 800b040:	f7ff f966 	bl	800a310 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b046:	3318      	adds	r3, #24
 800b048:	4618      	mov	r0, r3
 800b04a:	f7ff f961 	bl	800a310 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b052:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b056:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b05c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b062:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b066:	2200      	movs	r2, #0
 800b068:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06c:	2200      	movs	r2, #0
 800b06e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b072:	683a      	ldr	r2, [r7, #0]
 800b074:	68f9      	ldr	r1, [r7, #12]
 800b076:	69b8      	ldr	r0, [r7, #24]
 800b078:	f001 f93e 	bl	800c2f8 <pxPortInitialiseStack>
 800b07c:	4602      	mov	r2, r0
 800b07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b080:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b084:	2b00      	cmp	r3, #0
 800b086:	d002      	beq.n	800b08e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b08a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b08c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b08e:	bf00      	nop
 800b090:	3720      	adds	r7, #32
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
	...

0800b098 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b0a0:	f001 fa5a 	bl	800c558 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b0a4:	4b2d      	ldr	r3, [pc, #180]	@ (800b15c <prvAddNewTaskToReadyList+0xc4>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	4a2c      	ldr	r2, [pc, #176]	@ (800b15c <prvAddNewTaskToReadyList+0xc4>)
 800b0ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b0ae:	4b2c      	ldr	r3, [pc, #176]	@ (800b160 <prvAddNewTaskToReadyList+0xc8>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d109      	bne.n	800b0ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b0b6:	4a2a      	ldr	r2, [pc, #168]	@ (800b160 <prvAddNewTaskToReadyList+0xc8>)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b0bc:	4b27      	ldr	r3, [pc, #156]	@ (800b15c <prvAddNewTaskToReadyList+0xc4>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d110      	bne.n	800b0e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b0c4:	f000 fc1e 	bl	800b904 <prvInitialiseTaskLists>
 800b0c8:	e00d      	b.n	800b0e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b0ca:	4b26      	ldr	r3, [pc, #152]	@ (800b164 <prvAddNewTaskToReadyList+0xcc>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d109      	bne.n	800b0e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b0d2:	4b23      	ldr	r3, [pc, #140]	@ (800b160 <prvAddNewTaskToReadyList+0xc8>)
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d802      	bhi.n	800b0e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b0e0:	4a1f      	ldr	r2, [pc, #124]	@ (800b160 <prvAddNewTaskToReadyList+0xc8>)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b0e6:	4b20      	ldr	r3, [pc, #128]	@ (800b168 <prvAddNewTaskToReadyList+0xd0>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	4a1e      	ldr	r2, [pc, #120]	@ (800b168 <prvAddNewTaskToReadyList+0xd0>)
 800b0ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b0f0:	4b1d      	ldr	r3, [pc, #116]	@ (800b168 <prvAddNewTaskToReadyList+0xd0>)
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0fc:	4b1b      	ldr	r3, [pc, #108]	@ (800b16c <prvAddNewTaskToReadyList+0xd4>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	429a      	cmp	r2, r3
 800b102:	d903      	bls.n	800b10c <prvAddNewTaskToReadyList+0x74>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b108:	4a18      	ldr	r2, [pc, #96]	@ (800b16c <prvAddNewTaskToReadyList+0xd4>)
 800b10a:	6013      	str	r3, [r2, #0]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b110:	4613      	mov	r3, r2
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	4413      	add	r3, r2
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	4a15      	ldr	r2, [pc, #84]	@ (800b170 <prvAddNewTaskToReadyList+0xd8>)
 800b11a:	441a      	add	r2, r3
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	3304      	adds	r3, #4
 800b120:	4619      	mov	r1, r3
 800b122:	4610      	mov	r0, r2
 800b124:	f7ff f901 	bl	800a32a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b128:	f001 fa48 	bl	800c5bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b12c:	4b0d      	ldr	r3, [pc, #52]	@ (800b164 <prvAddNewTaskToReadyList+0xcc>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d00e      	beq.n	800b152 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b134:	4b0a      	ldr	r3, [pc, #40]	@ (800b160 <prvAddNewTaskToReadyList+0xc8>)
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b13e:	429a      	cmp	r2, r3
 800b140:	d207      	bcs.n	800b152 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b142:	4b0c      	ldr	r3, [pc, #48]	@ (800b174 <prvAddNewTaskToReadyList+0xdc>)
 800b144:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b148:	601a      	str	r2, [r3, #0]
 800b14a:	f3bf 8f4f 	dsb	sy
 800b14e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b152:	bf00      	nop
 800b154:	3708      	adds	r7, #8
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	200011dc 	.word	0x200011dc
 800b160:	20000d08 	.word	0x20000d08
 800b164:	200011e8 	.word	0x200011e8
 800b168:	200011f8 	.word	0x200011f8
 800b16c:	200011e4 	.word	0x200011e4
 800b170:	20000d0c 	.word	0x20000d0c
 800b174:	e000ed04 	.word	0xe000ed04

0800b178 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b180:	2300      	movs	r3, #0
 800b182:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d018      	beq.n	800b1bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b18a:	4b14      	ldr	r3, [pc, #80]	@ (800b1dc <vTaskDelay+0x64>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d00b      	beq.n	800b1aa <vTaskDelay+0x32>
	__asm volatile
 800b192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b196:	f383 8811 	msr	BASEPRI, r3
 800b19a:	f3bf 8f6f 	isb	sy
 800b19e:	f3bf 8f4f 	dsb	sy
 800b1a2:	60bb      	str	r3, [r7, #8]
}
 800b1a4:	bf00      	nop
 800b1a6:	bf00      	nop
 800b1a8:	e7fd      	b.n	800b1a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b1aa:	f000 f883 	bl	800b2b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 fcf3 	bl	800bb9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b1b6:	f000 f88b 	bl	800b2d0 <xTaskResumeAll>
 800b1ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d107      	bne.n	800b1d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b1c2:	4b07      	ldr	r3, [pc, #28]	@ (800b1e0 <vTaskDelay+0x68>)
 800b1c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1c8:	601a      	str	r2, [r3, #0]
 800b1ca:	f3bf 8f4f 	dsb	sy
 800b1ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b1d2:	bf00      	nop
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	20001204 	.word	0x20001204
 800b1e0:	e000ed04 	.word	0xe000ed04

0800b1e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b08a      	sub	sp, #40	@ 0x28
 800b1e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b1f2:	463a      	mov	r2, r7
 800b1f4:	1d39      	adds	r1, r7, #4
 800b1f6:	f107 0308 	add.w	r3, r7, #8
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7ff f834 	bl	800a268 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b200:	6839      	ldr	r1, [r7, #0]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	68ba      	ldr	r2, [r7, #8]
 800b206:	9202      	str	r2, [sp, #8]
 800b208:	9301      	str	r3, [sp, #4]
 800b20a:	2300      	movs	r3, #0
 800b20c:	9300      	str	r3, [sp, #0]
 800b20e:	2300      	movs	r3, #0
 800b210:	460a      	mov	r2, r1
 800b212:	4922      	ldr	r1, [pc, #136]	@ (800b29c <vTaskStartScheduler+0xb8>)
 800b214:	4822      	ldr	r0, [pc, #136]	@ (800b2a0 <vTaskStartScheduler+0xbc>)
 800b216:	f7ff fe09 	bl	800ae2c <xTaskCreateStatic>
 800b21a:	4603      	mov	r3, r0
 800b21c:	4a21      	ldr	r2, [pc, #132]	@ (800b2a4 <vTaskStartScheduler+0xc0>)
 800b21e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b220:	4b20      	ldr	r3, [pc, #128]	@ (800b2a4 <vTaskStartScheduler+0xc0>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d002      	beq.n	800b22e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b228:	2301      	movs	r3, #1
 800b22a:	617b      	str	r3, [r7, #20]
 800b22c:	e001      	b.n	800b232 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b22e:	2300      	movs	r3, #0
 800b230:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	2b01      	cmp	r3, #1
 800b236:	d102      	bne.n	800b23e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b238:	f000 fd04 	bl	800bc44 <xTimerCreateTimerTask>
 800b23c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	2b01      	cmp	r3, #1
 800b242:	d116      	bne.n	800b272 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b248:	f383 8811 	msr	BASEPRI, r3
 800b24c:	f3bf 8f6f 	isb	sy
 800b250:	f3bf 8f4f 	dsb	sy
 800b254:	613b      	str	r3, [r7, #16]
}
 800b256:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b258:	4b13      	ldr	r3, [pc, #76]	@ (800b2a8 <vTaskStartScheduler+0xc4>)
 800b25a:	f04f 32ff 	mov.w	r2, #4294967295
 800b25e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b260:	4b12      	ldr	r3, [pc, #72]	@ (800b2ac <vTaskStartScheduler+0xc8>)
 800b262:	2201      	movs	r2, #1
 800b264:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b266:	4b12      	ldr	r3, [pc, #72]	@ (800b2b0 <vTaskStartScheduler+0xcc>)
 800b268:	2200      	movs	r2, #0
 800b26a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b26c:	f001 f8d0 	bl	800c410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b270:	e00f      	b.n	800b292 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b278:	d10b      	bne.n	800b292 <vTaskStartScheduler+0xae>
	__asm volatile
 800b27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b27e:	f383 8811 	msr	BASEPRI, r3
 800b282:	f3bf 8f6f 	isb	sy
 800b286:	f3bf 8f4f 	dsb	sy
 800b28a:	60fb      	str	r3, [r7, #12]
}
 800b28c:	bf00      	nop
 800b28e:	bf00      	nop
 800b290:	e7fd      	b.n	800b28e <vTaskStartScheduler+0xaa>
}
 800b292:	bf00      	nop
 800b294:	3718      	adds	r7, #24
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	08010458 	.word	0x08010458
 800b2a0:	0800b8d5 	.word	0x0800b8d5
 800b2a4:	20001200 	.word	0x20001200
 800b2a8:	200011fc 	.word	0x200011fc
 800b2ac:	200011e8 	.word	0x200011e8
 800b2b0:	200011e0 	.word	0x200011e0

0800b2b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b2b8:	4b04      	ldr	r3, [pc, #16]	@ (800b2cc <vTaskSuspendAll+0x18>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	3301      	adds	r3, #1
 800b2be:	4a03      	ldr	r2, [pc, #12]	@ (800b2cc <vTaskSuspendAll+0x18>)
 800b2c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b2c2:	bf00      	nop
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr
 800b2cc:	20001204 	.word	0x20001204

0800b2d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b2de:	4b42      	ldr	r3, [pc, #264]	@ (800b3e8 <xTaskResumeAll+0x118>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d10b      	bne.n	800b2fe <xTaskResumeAll+0x2e>
	__asm volatile
 800b2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2ea:	f383 8811 	msr	BASEPRI, r3
 800b2ee:	f3bf 8f6f 	isb	sy
 800b2f2:	f3bf 8f4f 	dsb	sy
 800b2f6:	603b      	str	r3, [r7, #0]
}
 800b2f8:	bf00      	nop
 800b2fa:	bf00      	nop
 800b2fc:	e7fd      	b.n	800b2fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b2fe:	f001 f92b 	bl	800c558 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b302:	4b39      	ldr	r3, [pc, #228]	@ (800b3e8 <xTaskResumeAll+0x118>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	3b01      	subs	r3, #1
 800b308:	4a37      	ldr	r2, [pc, #220]	@ (800b3e8 <xTaskResumeAll+0x118>)
 800b30a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b30c:	4b36      	ldr	r3, [pc, #216]	@ (800b3e8 <xTaskResumeAll+0x118>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d162      	bne.n	800b3da <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b314:	4b35      	ldr	r3, [pc, #212]	@ (800b3ec <xTaskResumeAll+0x11c>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d05e      	beq.n	800b3da <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b31c:	e02f      	b.n	800b37e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b31e:	4b34      	ldr	r3, [pc, #208]	@ (800b3f0 <xTaskResumeAll+0x120>)
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	68db      	ldr	r3, [r3, #12]
 800b324:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	3318      	adds	r3, #24
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7ff f85a 	bl	800a3e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	3304      	adds	r3, #4
 800b334:	4618      	mov	r0, r3
 800b336:	f7ff f855 	bl	800a3e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b33e:	4b2d      	ldr	r3, [pc, #180]	@ (800b3f4 <xTaskResumeAll+0x124>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	429a      	cmp	r2, r3
 800b344:	d903      	bls.n	800b34e <xTaskResumeAll+0x7e>
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b34a:	4a2a      	ldr	r2, [pc, #168]	@ (800b3f4 <xTaskResumeAll+0x124>)
 800b34c:	6013      	str	r3, [r2, #0]
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b352:	4613      	mov	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4413      	add	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	4a27      	ldr	r2, [pc, #156]	@ (800b3f8 <xTaskResumeAll+0x128>)
 800b35c:	441a      	add	r2, r3
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	3304      	adds	r3, #4
 800b362:	4619      	mov	r1, r3
 800b364:	4610      	mov	r0, r2
 800b366:	f7fe ffe0 	bl	800a32a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b36e:	4b23      	ldr	r3, [pc, #140]	@ (800b3fc <xTaskResumeAll+0x12c>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b374:	429a      	cmp	r2, r3
 800b376:	d302      	bcc.n	800b37e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b378:	4b21      	ldr	r3, [pc, #132]	@ (800b400 <xTaskResumeAll+0x130>)
 800b37a:	2201      	movs	r2, #1
 800b37c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b37e:	4b1c      	ldr	r3, [pc, #112]	@ (800b3f0 <xTaskResumeAll+0x120>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1cb      	bne.n	800b31e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d001      	beq.n	800b390 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b38c:	f000 fb58 	bl	800ba40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b390:	4b1c      	ldr	r3, [pc, #112]	@ (800b404 <xTaskResumeAll+0x134>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d010      	beq.n	800b3be <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b39c:	f000 f846 	bl	800b42c <xTaskIncrementTick>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d002      	beq.n	800b3ac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b3a6:	4b16      	ldr	r3, [pc, #88]	@ (800b400 <xTaskResumeAll+0x130>)
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d1f1      	bne.n	800b39c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b3b8:	4b12      	ldr	r3, [pc, #72]	@ (800b404 <xTaskResumeAll+0x134>)
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b3be:	4b10      	ldr	r3, [pc, #64]	@ (800b400 <xTaskResumeAll+0x130>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d009      	beq.n	800b3da <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b3ca:	4b0f      	ldr	r3, [pc, #60]	@ (800b408 <xTaskResumeAll+0x138>)
 800b3cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3d0:	601a      	str	r2, [r3, #0]
 800b3d2:	f3bf 8f4f 	dsb	sy
 800b3d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b3da:	f001 f8ef 	bl	800c5bc <vPortExitCritical>

	return xAlreadyYielded;
 800b3de:	68bb      	ldr	r3, [r7, #8]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3710      	adds	r7, #16
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	20001204 	.word	0x20001204
 800b3ec:	200011dc 	.word	0x200011dc
 800b3f0:	2000119c 	.word	0x2000119c
 800b3f4:	200011e4 	.word	0x200011e4
 800b3f8:	20000d0c 	.word	0x20000d0c
 800b3fc:	20000d08 	.word	0x20000d08
 800b400:	200011f0 	.word	0x200011f0
 800b404:	200011ec 	.word	0x200011ec
 800b408:	e000ed04 	.word	0xe000ed04

0800b40c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b412:	4b05      	ldr	r3, [pc, #20]	@ (800b428 <xTaskGetTickCount+0x1c>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b418:	687b      	ldr	r3, [r7, #4]
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	370c      	adds	r7, #12
 800b41e:	46bd      	mov	sp, r7
 800b420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b424:	4770      	bx	lr
 800b426:	bf00      	nop
 800b428:	200011e0 	.word	0x200011e0

0800b42c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b086      	sub	sp, #24
 800b430:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b432:	2300      	movs	r3, #0
 800b434:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b436:	4b4f      	ldr	r3, [pc, #316]	@ (800b574 <xTaskIncrementTick+0x148>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	f040 8090 	bne.w	800b560 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b440:	4b4d      	ldr	r3, [pc, #308]	@ (800b578 <xTaskIncrementTick+0x14c>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	3301      	adds	r3, #1
 800b446:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b448:	4a4b      	ldr	r2, [pc, #300]	@ (800b578 <xTaskIncrementTick+0x14c>)
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d121      	bne.n	800b498 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b454:	4b49      	ldr	r3, [pc, #292]	@ (800b57c <xTaskIncrementTick+0x150>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d00b      	beq.n	800b476 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b462:	f383 8811 	msr	BASEPRI, r3
 800b466:	f3bf 8f6f 	isb	sy
 800b46a:	f3bf 8f4f 	dsb	sy
 800b46e:	603b      	str	r3, [r7, #0]
}
 800b470:	bf00      	nop
 800b472:	bf00      	nop
 800b474:	e7fd      	b.n	800b472 <xTaskIncrementTick+0x46>
 800b476:	4b41      	ldr	r3, [pc, #260]	@ (800b57c <xTaskIncrementTick+0x150>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	60fb      	str	r3, [r7, #12]
 800b47c:	4b40      	ldr	r3, [pc, #256]	@ (800b580 <xTaskIncrementTick+0x154>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4a3e      	ldr	r2, [pc, #248]	@ (800b57c <xTaskIncrementTick+0x150>)
 800b482:	6013      	str	r3, [r2, #0]
 800b484:	4a3e      	ldr	r2, [pc, #248]	@ (800b580 <xTaskIncrementTick+0x154>)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6013      	str	r3, [r2, #0]
 800b48a:	4b3e      	ldr	r3, [pc, #248]	@ (800b584 <xTaskIncrementTick+0x158>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	3301      	adds	r3, #1
 800b490:	4a3c      	ldr	r2, [pc, #240]	@ (800b584 <xTaskIncrementTick+0x158>)
 800b492:	6013      	str	r3, [r2, #0]
 800b494:	f000 fad4 	bl	800ba40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b498:	4b3b      	ldr	r3, [pc, #236]	@ (800b588 <xTaskIncrementTick+0x15c>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	693a      	ldr	r2, [r7, #16]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d349      	bcc.n	800b536 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4a2:	4b36      	ldr	r3, [pc, #216]	@ (800b57c <xTaskIncrementTick+0x150>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d104      	bne.n	800b4b6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4ac:	4b36      	ldr	r3, [pc, #216]	@ (800b588 <xTaskIncrementTick+0x15c>)
 800b4ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b4b2:	601a      	str	r2, [r3, #0]
					break;
 800b4b4:	e03f      	b.n	800b536 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4b6:	4b31      	ldr	r3, [pc, #196]	@ (800b57c <xTaskIncrementTick+0x150>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b4c6:	693a      	ldr	r2, [r7, #16]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d203      	bcs.n	800b4d6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b4ce:	4a2e      	ldr	r2, [pc, #184]	@ (800b588 <xTaskIncrementTick+0x15c>)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b4d4:	e02f      	b.n	800b536 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	3304      	adds	r3, #4
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7fe ff82 	bl	800a3e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d004      	beq.n	800b4f2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	3318      	adds	r3, #24
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7fe ff79 	bl	800a3e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4f6:	4b25      	ldr	r3, [pc, #148]	@ (800b58c <xTaskIncrementTick+0x160>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d903      	bls.n	800b506 <xTaskIncrementTick+0xda>
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b502:	4a22      	ldr	r2, [pc, #136]	@ (800b58c <xTaskIncrementTick+0x160>)
 800b504:	6013      	str	r3, [r2, #0]
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b50a:	4613      	mov	r3, r2
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	4413      	add	r3, r2
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	4a1f      	ldr	r2, [pc, #124]	@ (800b590 <xTaskIncrementTick+0x164>)
 800b514:	441a      	add	r2, r3
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	3304      	adds	r3, #4
 800b51a:	4619      	mov	r1, r3
 800b51c:	4610      	mov	r0, r2
 800b51e:	f7fe ff04 	bl	800a32a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b526:	4b1b      	ldr	r3, [pc, #108]	@ (800b594 <xTaskIncrementTick+0x168>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d3b8      	bcc.n	800b4a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b530:	2301      	movs	r3, #1
 800b532:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b534:	e7b5      	b.n	800b4a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b536:	4b17      	ldr	r3, [pc, #92]	@ (800b594 <xTaskIncrementTick+0x168>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b53c:	4914      	ldr	r1, [pc, #80]	@ (800b590 <xTaskIncrementTick+0x164>)
 800b53e:	4613      	mov	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	440b      	add	r3, r1
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	d901      	bls.n	800b552 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b54e:	2301      	movs	r3, #1
 800b550:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b552:	4b11      	ldr	r3, [pc, #68]	@ (800b598 <xTaskIncrementTick+0x16c>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d007      	beq.n	800b56a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b55a:	2301      	movs	r3, #1
 800b55c:	617b      	str	r3, [r7, #20]
 800b55e:	e004      	b.n	800b56a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b560:	4b0e      	ldr	r3, [pc, #56]	@ (800b59c <xTaskIncrementTick+0x170>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	3301      	adds	r3, #1
 800b566:	4a0d      	ldr	r2, [pc, #52]	@ (800b59c <xTaskIncrementTick+0x170>)
 800b568:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b56a:	697b      	ldr	r3, [r7, #20]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3718      	adds	r7, #24
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	20001204 	.word	0x20001204
 800b578:	200011e0 	.word	0x200011e0
 800b57c:	20001194 	.word	0x20001194
 800b580:	20001198 	.word	0x20001198
 800b584:	200011f4 	.word	0x200011f4
 800b588:	200011fc 	.word	0x200011fc
 800b58c:	200011e4 	.word	0x200011e4
 800b590:	20000d0c 	.word	0x20000d0c
 800b594:	20000d08 	.word	0x20000d08
 800b598:	200011f0 	.word	0x200011f0
 800b59c:	200011ec 	.word	0x200011ec

0800b5a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b085      	sub	sp, #20
 800b5a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b5a6:	4b28      	ldr	r3, [pc, #160]	@ (800b648 <vTaskSwitchContext+0xa8>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d003      	beq.n	800b5b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b5ae:	4b27      	ldr	r3, [pc, #156]	@ (800b64c <vTaskSwitchContext+0xac>)
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b5b4:	e042      	b.n	800b63c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b5b6:	4b25      	ldr	r3, [pc, #148]	@ (800b64c <vTaskSwitchContext+0xac>)
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5bc:	4b24      	ldr	r3, [pc, #144]	@ (800b650 <vTaskSwitchContext+0xb0>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	60fb      	str	r3, [r7, #12]
 800b5c2:	e011      	b.n	800b5e8 <vTaskSwitchContext+0x48>
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d10b      	bne.n	800b5e2 <vTaskSwitchContext+0x42>
	__asm volatile
 800b5ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ce:	f383 8811 	msr	BASEPRI, r3
 800b5d2:	f3bf 8f6f 	isb	sy
 800b5d6:	f3bf 8f4f 	dsb	sy
 800b5da:	607b      	str	r3, [r7, #4]
}
 800b5dc:	bf00      	nop
 800b5de:	bf00      	nop
 800b5e0:	e7fd      	b.n	800b5de <vTaskSwitchContext+0x3e>
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	3b01      	subs	r3, #1
 800b5e6:	60fb      	str	r3, [r7, #12]
 800b5e8:	491a      	ldr	r1, [pc, #104]	@ (800b654 <vTaskSwitchContext+0xb4>)
 800b5ea:	68fa      	ldr	r2, [r7, #12]
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	009b      	lsls	r3, r3, #2
 800b5f0:	4413      	add	r3, r2
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	440b      	add	r3, r1
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d0e3      	beq.n	800b5c4 <vTaskSwitchContext+0x24>
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	4613      	mov	r3, r2
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	4413      	add	r3, r2
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	4a13      	ldr	r2, [pc, #76]	@ (800b654 <vTaskSwitchContext+0xb4>)
 800b608:	4413      	add	r3, r2
 800b60a:	60bb      	str	r3, [r7, #8]
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	685a      	ldr	r2, [r3, #4]
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	605a      	str	r2, [r3, #4]
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	685a      	ldr	r2, [r3, #4]
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	3308      	adds	r3, #8
 800b61e:	429a      	cmp	r2, r3
 800b620:	d104      	bne.n	800b62c <vTaskSwitchContext+0x8c>
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	685a      	ldr	r2, [r3, #4]
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	605a      	str	r2, [r3, #4]
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	4a09      	ldr	r2, [pc, #36]	@ (800b658 <vTaskSwitchContext+0xb8>)
 800b634:	6013      	str	r3, [r2, #0]
 800b636:	4a06      	ldr	r2, [pc, #24]	@ (800b650 <vTaskSwitchContext+0xb0>)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	6013      	str	r3, [r2, #0]
}
 800b63c:	bf00      	nop
 800b63e:	3714      	adds	r7, #20
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr
 800b648:	20001204 	.word	0x20001204
 800b64c:	200011f0 	.word	0x200011f0
 800b650:	200011e4 	.word	0x200011e4
 800b654:	20000d0c 	.word	0x20000d0c
 800b658:	20000d08 	.word	0x20000d08

0800b65c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b084      	sub	sp, #16
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d10b      	bne.n	800b684 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b670:	f383 8811 	msr	BASEPRI, r3
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	60fb      	str	r3, [r7, #12]
}
 800b67e:	bf00      	nop
 800b680:	bf00      	nop
 800b682:	e7fd      	b.n	800b680 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b684:	4b07      	ldr	r3, [pc, #28]	@ (800b6a4 <vTaskPlaceOnEventList+0x48>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	3318      	adds	r3, #24
 800b68a:	4619      	mov	r1, r3
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f7fe fe70 	bl	800a372 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b692:	2101      	movs	r1, #1
 800b694:	6838      	ldr	r0, [r7, #0]
 800b696:	f000 fa81 	bl	800bb9c <prvAddCurrentTaskToDelayedList>
}
 800b69a:	bf00      	nop
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
 800b6a2:	bf00      	nop
 800b6a4:	20000d08 	.word	0x20000d08

0800b6a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b086      	sub	sp, #24
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	60b9      	str	r1, [r7, #8]
 800b6b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d10b      	bne.n	800b6d2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b6ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6be:	f383 8811 	msr	BASEPRI, r3
 800b6c2:	f3bf 8f6f 	isb	sy
 800b6c6:	f3bf 8f4f 	dsb	sy
 800b6ca:	617b      	str	r3, [r7, #20]
}
 800b6cc:	bf00      	nop
 800b6ce:	bf00      	nop
 800b6d0:	e7fd      	b.n	800b6ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b6d2:	4b0a      	ldr	r3, [pc, #40]	@ (800b6fc <vTaskPlaceOnEventListRestricted+0x54>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	3318      	adds	r3, #24
 800b6d8:	4619      	mov	r1, r3
 800b6da:	68f8      	ldr	r0, [r7, #12]
 800b6dc:	f7fe fe25 	bl	800a32a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d002      	beq.n	800b6ec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b6e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b6ec:	6879      	ldr	r1, [r7, #4]
 800b6ee:	68b8      	ldr	r0, [r7, #8]
 800b6f0:	f000 fa54 	bl	800bb9c <prvAddCurrentTaskToDelayedList>
	}
 800b6f4:	bf00      	nop
 800b6f6:	3718      	adds	r7, #24
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	20000d08 	.word	0x20000d08

0800b700 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b086      	sub	sp, #24
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d10b      	bne.n	800b72e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b71a:	f383 8811 	msr	BASEPRI, r3
 800b71e:	f3bf 8f6f 	isb	sy
 800b722:	f3bf 8f4f 	dsb	sy
 800b726:	60fb      	str	r3, [r7, #12]
}
 800b728:	bf00      	nop
 800b72a:	bf00      	nop
 800b72c:	e7fd      	b.n	800b72a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	3318      	adds	r3, #24
 800b732:	4618      	mov	r0, r3
 800b734:	f7fe fe56 	bl	800a3e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b738:	4b1d      	ldr	r3, [pc, #116]	@ (800b7b0 <xTaskRemoveFromEventList+0xb0>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d11d      	bne.n	800b77c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	3304      	adds	r3, #4
 800b744:	4618      	mov	r0, r3
 800b746:	f7fe fe4d 	bl	800a3e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b74e:	4b19      	ldr	r3, [pc, #100]	@ (800b7b4 <xTaskRemoveFromEventList+0xb4>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	429a      	cmp	r2, r3
 800b754:	d903      	bls.n	800b75e <xTaskRemoveFromEventList+0x5e>
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b75a:	4a16      	ldr	r2, [pc, #88]	@ (800b7b4 <xTaskRemoveFromEventList+0xb4>)
 800b75c:	6013      	str	r3, [r2, #0]
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b762:	4613      	mov	r3, r2
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	4413      	add	r3, r2
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	4a13      	ldr	r2, [pc, #76]	@ (800b7b8 <xTaskRemoveFromEventList+0xb8>)
 800b76c:	441a      	add	r2, r3
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	3304      	adds	r3, #4
 800b772:	4619      	mov	r1, r3
 800b774:	4610      	mov	r0, r2
 800b776:	f7fe fdd8 	bl	800a32a <vListInsertEnd>
 800b77a:	e005      	b.n	800b788 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	3318      	adds	r3, #24
 800b780:	4619      	mov	r1, r3
 800b782:	480e      	ldr	r0, [pc, #56]	@ (800b7bc <xTaskRemoveFromEventList+0xbc>)
 800b784:	f7fe fdd1 	bl	800a32a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b78c:	4b0c      	ldr	r3, [pc, #48]	@ (800b7c0 <xTaskRemoveFromEventList+0xc0>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b792:	429a      	cmp	r2, r3
 800b794:	d905      	bls.n	800b7a2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b796:	2301      	movs	r3, #1
 800b798:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b79a:	4b0a      	ldr	r3, [pc, #40]	@ (800b7c4 <xTaskRemoveFromEventList+0xc4>)
 800b79c:	2201      	movs	r2, #1
 800b79e:	601a      	str	r2, [r3, #0]
 800b7a0:	e001      	b.n	800b7a6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b7a6:	697b      	ldr	r3, [r7, #20]
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3718      	adds	r7, #24
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	20001204 	.word	0x20001204
 800b7b4:	200011e4 	.word	0x200011e4
 800b7b8:	20000d0c 	.word	0x20000d0c
 800b7bc:	2000119c 	.word	0x2000119c
 800b7c0:	20000d08 	.word	0x20000d08
 800b7c4:	200011f0 	.word	0x200011f0

0800b7c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b7d0:	4b06      	ldr	r3, [pc, #24]	@ (800b7ec <vTaskInternalSetTimeOutState+0x24>)
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b7d8:	4b05      	ldr	r3, [pc, #20]	@ (800b7f0 <vTaskInternalSetTimeOutState+0x28>)
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	605a      	str	r2, [r3, #4]
}
 800b7e0:	bf00      	nop
 800b7e2:	370c      	adds	r7, #12
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr
 800b7ec:	200011f4 	.word	0x200011f4
 800b7f0:	200011e0 	.word	0x200011e0

0800b7f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b088      	sub	sp, #32
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d10b      	bne.n	800b81c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b808:	f383 8811 	msr	BASEPRI, r3
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f3bf 8f4f 	dsb	sy
 800b814:	613b      	str	r3, [r7, #16]
}
 800b816:	bf00      	nop
 800b818:	bf00      	nop
 800b81a:	e7fd      	b.n	800b818 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d10b      	bne.n	800b83a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b826:	f383 8811 	msr	BASEPRI, r3
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	f3bf 8f4f 	dsb	sy
 800b832:	60fb      	str	r3, [r7, #12]
}
 800b834:	bf00      	nop
 800b836:	bf00      	nop
 800b838:	e7fd      	b.n	800b836 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b83a:	f000 fe8d 	bl	800c558 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b83e:	4b1d      	ldr	r3, [pc, #116]	@ (800b8b4 <xTaskCheckForTimeOut+0xc0>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	69ba      	ldr	r2, [r7, #24]
 800b84a:	1ad3      	subs	r3, r2, r3
 800b84c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b856:	d102      	bne.n	800b85e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b858:	2300      	movs	r3, #0
 800b85a:	61fb      	str	r3, [r7, #28]
 800b85c:	e023      	b.n	800b8a6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681a      	ldr	r2, [r3, #0]
 800b862:	4b15      	ldr	r3, [pc, #84]	@ (800b8b8 <xTaskCheckForTimeOut+0xc4>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	429a      	cmp	r2, r3
 800b868:	d007      	beq.n	800b87a <xTaskCheckForTimeOut+0x86>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	69ba      	ldr	r2, [r7, #24]
 800b870:	429a      	cmp	r2, r3
 800b872:	d302      	bcc.n	800b87a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b874:	2301      	movs	r3, #1
 800b876:	61fb      	str	r3, [r7, #28]
 800b878:	e015      	b.n	800b8a6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	697a      	ldr	r2, [r7, #20]
 800b880:	429a      	cmp	r2, r3
 800b882:	d20b      	bcs.n	800b89c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	1ad2      	subs	r2, r2, r3
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f7ff ff99 	bl	800b7c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b896:	2300      	movs	r3, #0
 800b898:	61fb      	str	r3, [r7, #28]
 800b89a:	e004      	b.n	800b8a6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b8a6:	f000 fe89 	bl	800c5bc <vPortExitCritical>

	return xReturn;
 800b8aa:	69fb      	ldr	r3, [r7, #28]
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3720      	adds	r7, #32
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	200011e0 	.word	0x200011e0
 800b8b8:	200011f4 	.word	0x200011f4

0800b8bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b8bc:	b480      	push	{r7}
 800b8be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b8c0:	4b03      	ldr	r3, [pc, #12]	@ (800b8d0 <vTaskMissedYield+0x14>)
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	601a      	str	r2, [r3, #0]
}
 800b8c6:	bf00      	nop
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr
 800b8d0:	200011f0 	.word	0x200011f0

0800b8d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b8dc:	f000 f852 	bl	800b984 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b8e0:	4b06      	ldr	r3, [pc, #24]	@ (800b8fc <prvIdleTask+0x28>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d9f9      	bls.n	800b8dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800b8e8:	4b05      	ldr	r3, [pc, #20]	@ (800b900 <prvIdleTask+0x2c>)
 800b8ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8ee:	601a      	str	r2, [r3, #0]
 800b8f0:	f3bf 8f4f 	dsb	sy
 800b8f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b8f8:	e7f0      	b.n	800b8dc <prvIdleTask+0x8>
 800b8fa:	bf00      	nop
 800b8fc:	20000d0c 	.word	0x20000d0c
 800b900:	e000ed04 	.word	0xe000ed04

0800b904 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b90a:	2300      	movs	r3, #0
 800b90c:	607b      	str	r3, [r7, #4]
 800b90e:	e00c      	b.n	800b92a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	4613      	mov	r3, r2
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	4413      	add	r3, r2
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	4a12      	ldr	r2, [pc, #72]	@ (800b964 <prvInitialiseTaskLists+0x60>)
 800b91c:	4413      	add	r3, r2
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fe fcd6 	bl	800a2d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	3301      	adds	r3, #1
 800b928:	607b      	str	r3, [r7, #4]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2b37      	cmp	r3, #55	@ 0x37
 800b92e:	d9ef      	bls.n	800b910 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b930:	480d      	ldr	r0, [pc, #52]	@ (800b968 <prvInitialiseTaskLists+0x64>)
 800b932:	f7fe fccd 	bl	800a2d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b936:	480d      	ldr	r0, [pc, #52]	@ (800b96c <prvInitialiseTaskLists+0x68>)
 800b938:	f7fe fcca 	bl	800a2d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b93c:	480c      	ldr	r0, [pc, #48]	@ (800b970 <prvInitialiseTaskLists+0x6c>)
 800b93e:	f7fe fcc7 	bl	800a2d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b942:	480c      	ldr	r0, [pc, #48]	@ (800b974 <prvInitialiseTaskLists+0x70>)
 800b944:	f7fe fcc4 	bl	800a2d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b948:	480b      	ldr	r0, [pc, #44]	@ (800b978 <prvInitialiseTaskLists+0x74>)
 800b94a:	f7fe fcc1 	bl	800a2d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b94e:	4b0b      	ldr	r3, [pc, #44]	@ (800b97c <prvInitialiseTaskLists+0x78>)
 800b950:	4a05      	ldr	r2, [pc, #20]	@ (800b968 <prvInitialiseTaskLists+0x64>)
 800b952:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b954:	4b0a      	ldr	r3, [pc, #40]	@ (800b980 <prvInitialiseTaskLists+0x7c>)
 800b956:	4a05      	ldr	r2, [pc, #20]	@ (800b96c <prvInitialiseTaskLists+0x68>)
 800b958:	601a      	str	r2, [r3, #0]
}
 800b95a:	bf00      	nop
 800b95c:	3708      	adds	r7, #8
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	20000d0c 	.word	0x20000d0c
 800b968:	2000116c 	.word	0x2000116c
 800b96c:	20001180 	.word	0x20001180
 800b970:	2000119c 	.word	0x2000119c
 800b974:	200011b0 	.word	0x200011b0
 800b978:	200011c8 	.word	0x200011c8
 800b97c:	20001194 	.word	0x20001194
 800b980:	20001198 	.word	0x20001198

0800b984 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b98a:	e019      	b.n	800b9c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b98c:	f000 fde4 	bl	800c558 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b990:	4b10      	ldr	r3, [pc, #64]	@ (800b9d4 <prvCheckTasksWaitingTermination+0x50>)
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	3304      	adds	r3, #4
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7fe fd21 	bl	800a3e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b9a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b9d8 <prvCheckTasksWaitingTermination+0x54>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	3b01      	subs	r3, #1
 800b9a8:	4a0b      	ldr	r2, [pc, #44]	@ (800b9d8 <prvCheckTasksWaitingTermination+0x54>)
 800b9aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b9ac:	4b0b      	ldr	r3, [pc, #44]	@ (800b9dc <prvCheckTasksWaitingTermination+0x58>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	3b01      	subs	r3, #1
 800b9b2:	4a0a      	ldr	r2, [pc, #40]	@ (800b9dc <prvCheckTasksWaitingTermination+0x58>)
 800b9b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b9b6:	f000 fe01 	bl	800c5bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 f810 	bl	800b9e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b9c0:	4b06      	ldr	r3, [pc, #24]	@ (800b9dc <prvCheckTasksWaitingTermination+0x58>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d1e1      	bne.n	800b98c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b9c8:	bf00      	nop
 800b9ca:	bf00      	nop
 800b9cc:	3708      	adds	r7, #8
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	200011b0 	.word	0x200011b0
 800b9d8:	200011dc 	.word	0x200011dc
 800b9dc:	200011c4 	.word	0x200011c4

0800b9e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d108      	bne.n	800ba04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f000 ff9e 	bl	800c938 <vPortFree>
				vPortFree( pxTCB );
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 ff9b 	bl	800c938 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ba02:	e019      	b.n	800ba38 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d103      	bne.n	800ba16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 ff92 	bl	800c938 <vPortFree>
	}
 800ba14:	e010      	b.n	800ba38 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ba1c:	2b02      	cmp	r3, #2
 800ba1e:	d00b      	beq.n	800ba38 <prvDeleteTCB+0x58>
	__asm volatile
 800ba20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba24:	f383 8811 	msr	BASEPRI, r3
 800ba28:	f3bf 8f6f 	isb	sy
 800ba2c:	f3bf 8f4f 	dsb	sy
 800ba30:	60fb      	str	r3, [r7, #12]
}
 800ba32:	bf00      	nop
 800ba34:	bf00      	nop
 800ba36:	e7fd      	b.n	800ba34 <prvDeleteTCB+0x54>
	}
 800ba38:	bf00      	nop
 800ba3a:	3710      	adds	r7, #16
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ba40:	b480      	push	{r7}
 800ba42:	b083      	sub	sp, #12
 800ba44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba46:	4b0c      	ldr	r3, [pc, #48]	@ (800ba78 <prvResetNextTaskUnblockTime+0x38>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d104      	bne.n	800ba5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ba50:	4b0a      	ldr	r3, [pc, #40]	@ (800ba7c <prvResetNextTaskUnblockTime+0x3c>)
 800ba52:	f04f 32ff 	mov.w	r2, #4294967295
 800ba56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ba58:	e008      	b.n	800ba6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba5a:	4b07      	ldr	r3, [pc, #28]	@ (800ba78 <prvResetNextTaskUnblockTime+0x38>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	68db      	ldr	r3, [r3, #12]
 800ba62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	4a04      	ldr	r2, [pc, #16]	@ (800ba7c <prvResetNextTaskUnblockTime+0x3c>)
 800ba6a:	6013      	str	r3, [r2, #0]
}
 800ba6c:	bf00      	nop
 800ba6e:	370c      	adds	r7, #12
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr
 800ba78:	20001194 	.word	0x20001194
 800ba7c:	200011fc 	.word	0x200011fc

0800ba80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ba80:	b480      	push	{r7}
 800ba82:	b083      	sub	sp, #12
 800ba84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba86:	4b0b      	ldr	r3, [pc, #44]	@ (800bab4 <xTaskGetSchedulerState+0x34>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d102      	bne.n	800ba94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	607b      	str	r3, [r7, #4]
 800ba92:	e008      	b.n	800baa6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba94:	4b08      	ldr	r3, [pc, #32]	@ (800bab8 <xTaskGetSchedulerState+0x38>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d102      	bne.n	800baa2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba9c:	2302      	movs	r3, #2
 800ba9e:	607b      	str	r3, [r7, #4]
 800baa0:	e001      	b.n	800baa6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800baa2:	2300      	movs	r3, #0
 800baa4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800baa6:	687b      	ldr	r3, [r7, #4]
	}
 800baa8:	4618      	mov	r0, r3
 800baaa:	370c      	adds	r7, #12
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr
 800bab4:	200011e8 	.word	0x200011e8
 800bab8:	20001204 	.word	0x20001204

0800babc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800babc:	b580      	push	{r7, lr}
 800babe:	b086      	sub	sp, #24
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bac8:	2300      	movs	r3, #0
 800baca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d058      	beq.n	800bb84 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bad2:	4b2f      	ldr	r3, [pc, #188]	@ (800bb90 <xTaskPriorityDisinherit+0xd4>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	693a      	ldr	r2, [r7, #16]
 800bad8:	429a      	cmp	r2, r3
 800bada:	d00b      	beq.n	800baf4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800badc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae0:	f383 8811 	msr	BASEPRI, r3
 800bae4:	f3bf 8f6f 	isb	sy
 800bae8:	f3bf 8f4f 	dsb	sy
 800baec:	60fb      	str	r3, [r7, #12]
}
 800baee:	bf00      	nop
 800baf0:	bf00      	nop
 800baf2:	e7fd      	b.n	800baf0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d10b      	bne.n	800bb14 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bafc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb00:	f383 8811 	msr	BASEPRI, r3
 800bb04:	f3bf 8f6f 	isb	sy
 800bb08:	f3bf 8f4f 	dsb	sy
 800bb0c:	60bb      	str	r3, [r7, #8]
}
 800bb0e:	bf00      	nop
 800bb10:	bf00      	nop
 800bb12:	e7fd      	b.n	800bb10 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb18:	1e5a      	subs	r2, r3, #1
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d02c      	beq.n	800bb84 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d128      	bne.n	800bb84 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	3304      	adds	r3, #4
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7fe fc54 	bl	800a3e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb48:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb54:	4b0f      	ldr	r3, [pc, #60]	@ (800bb94 <xTaskPriorityDisinherit+0xd8>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d903      	bls.n	800bb64 <xTaskPriorityDisinherit+0xa8>
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb60:	4a0c      	ldr	r2, [pc, #48]	@ (800bb94 <xTaskPriorityDisinherit+0xd8>)
 800bb62:	6013      	str	r3, [r2, #0]
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb68:	4613      	mov	r3, r2
 800bb6a:	009b      	lsls	r3, r3, #2
 800bb6c:	4413      	add	r3, r2
 800bb6e:	009b      	lsls	r3, r3, #2
 800bb70:	4a09      	ldr	r2, [pc, #36]	@ (800bb98 <xTaskPriorityDisinherit+0xdc>)
 800bb72:	441a      	add	r2, r3
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	3304      	adds	r3, #4
 800bb78:	4619      	mov	r1, r3
 800bb7a:	4610      	mov	r0, r2
 800bb7c:	f7fe fbd5 	bl	800a32a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bb80:	2301      	movs	r3, #1
 800bb82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb84:	697b      	ldr	r3, [r7, #20]
	}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3718      	adds	r7, #24
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	20000d08 	.word	0x20000d08
 800bb94:	200011e4 	.word	0x200011e4
 800bb98:	20000d0c 	.word	0x20000d0c

0800bb9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bba6:	4b21      	ldr	r3, [pc, #132]	@ (800bc2c <prvAddCurrentTaskToDelayedList+0x90>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbac:	4b20      	ldr	r3, [pc, #128]	@ (800bc30 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	3304      	adds	r3, #4
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fe fc16 	bl	800a3e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbbe:	d10a      	bne.n	800bbd6 <prvAddCurrentTaskToDelayedList+0x3a>
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d007      	beq.n	800bbd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbc6:	4b1a      	ldr	r3, [pc, #104]	@ (800bc30 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	3304      	adds	r3, #4
 800bbcc:	4619      	mov	r1, r3
 800bbce:	4819      	ldr	r0, [pc, #100]	@ (800bc34 <prvAddCurrentTaskToDelayedList+0x98>)
 800bbd0:	f7fe fbab 	bl	800a32a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bbd4:	e026      	b.n	800bc24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bbd6:	68fa      	ldr	r2, [r7, #12]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	4413      	add	r3, r2
 800bbdc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bbde:	4b14      	ldr	r3, [pc, #80]	@ (800bc30 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bbe6:	68ba      	ldr	r2, [r7, #8]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d209      	bcs.n	800bc02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbee:	4b12      	ldr	r3, [pc, #72]	@ (800bc38 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	4b0f      	ldr	r3, [pc, #60]	@ (800bc30 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	3304      	adds	r3, #4
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	4610      	mov	r0, r2
 800bbfc:	f7fe fbb9 	bl	800a372 <vListInsert>
}
 800bc00:	e010      	b.n	800bc24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc02:	4b0e      	ldr	r3, [pc, #56]	@ (800bc3c <prvAddCurrentTaskToDelayedList+0xa0>)
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	4b0a      	ldr	r3, [pc, #40]	@ (800bc30 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	3304      	adds	r3, #4
 800bc0c:	4619      	mov	r1, r3
 800bc0e:	4610      	mov	r0, r2
 800bc10:	f7fe fbaf 	bl	800a372 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc14:	4b0a      	ldr	r3, [pc, #40]	@ (800bc40 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	68ba      	ldr	r2, [r7, #8]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d202      	bcs.n	800bc24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc1e:	4a08      	ldr	r2, [pc, #32]	@ (800bc40 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	6013      	str	r3, [r2, #0]
}
 800bc24:	bf00      	nop
 800bc26:	3710      	adds	r7, #16
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	200011e0 	.word	0x200011e0
 800bc30:	20000d08 	.word	0x20000d08
 800bc34:	200011c8 	.word	0x200011c8
 800bc38:	20001198 	.word	0x20001198
 800bc3c:	20001194 	.word	0x20001194
 800bc40:	200011fc 	.word	0x200011fc

0800bc44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b08a      	sub	sp, #40	@ 0x28
 800bc48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bc4e:	f000 fb13 	bl	800c278 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bc52:	4b1d      	ldr	r3, [pc, #116]	@ (800bcc8 <xTimerCreateTimerTask+0x84>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d021      	beq.n	800bc9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bc62:	1d3a      	adds	r2, r7, #4
 800bc64:	f107 0108 	add.w	r1, r7, #8
 800bc68:	f107 030c 	add.w	r3, r7, #12
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f7fe fb15 	bl	800a29c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc72:	6879      	ldr	r1, [r7, #4]
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	9202      	str	r2, [sp, #8]
 800bc7a:	9301      	str	r3, [sp, #4]
 800bc7c:	2302      	movs	r3, #2
 800bc7e:	9300      	str	r3, [sp, #0]
 800bc80:	2300      	movs	r3, #0
 800bc82:	460a      	mov	r2, r1
 800bc84:	4911      	ldr	r1, [pc, #68]	@ (800bccc <xTimerCreateTimerTask+0x88>)
 800bc86:	4812      	ldr	r0, [pc, #72]	@ (800bcd0 <xTimerCreateTimerTask+0x8c>)
 800bc88:	f7ff f8d0 	bl	800ae2c <xTaskCreateStatic>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	4a11      	ldr	r2, [pc, #68]	@ (800bcd4 <xTimerCreateTimerTask+0x90>)
 800bc90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bc92:	4b10      	ldr	r3, [pc, #64]	@ (800bcd4 <xTimerCreateTimerTask+0x90>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d001      	beq.n	800bc9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d10b      	bne.n	800bcbc <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bca8:	f383 8811 	msr	BASEPRI, r3
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	f3bf 8f4f 	dsb	sy
 800bcb4:	613b      	str	r3, [r7, #16]
}
 800bcb6:	bf00      	nop
 800bcb8:	bf00      	nop
 800bcba:	e7fd      	b.n	800bcb8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bcbc:	697b      	ldr	r3, [r7, #20]
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3718      	adds	r7, #24
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	20001238 	.word	0x20001238
 800bccc:	08010460 	.word	0x08010460
 800bcd0:	0800be11 	.word	0x0800be11
 800bcd4:	2000123c 	.word	0x2000123c

0800bcd8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b08a      	sub	sp, #40	@ 0x28
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	60f8      	str	r0, [r7, #12]
 800bce0:	60b9      	str	r1, [r7, #8]
 800bce2:	607a      	str	r2, [r7, #4]
 800bce4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bce6:	2300      	movs	r3, #0
 800bce8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d10b      	bne.n	800bd08 <xTimerGenericCommand+0x30>
	__asm volatile
 800bcf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf4:	f383 8811 	msr	BASEPRI, r3
 800bcf8:	f3bf 8f6f 	isb	sy
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	623b      	str	r3, [r7, #32]
}
 800bd02:	bf00      	nop
 800bd04:	bf00      	nop
 800bd06:	e7fd      	b.n	800bd04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bd08:	4b19      	ldr	r3, [pc, #100]	@ (800bd70 <xTimerGenericCommand+0x98>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d02a      	beq.n	800bd66 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	2b05      	cmp	r3, #5
 800bd20:	dc18      	bgt.n	800bd54 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd22:	f7ff fead 	bl	800ba80 <xTaskGetSchedulerState>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b02      	cmp	r3, #2
 800bd2a:	d109      	bne.n	800bd40 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd2c:	4b10      	ldr	r3, [pc, #64]	@ (800bd70 <xTimerGenericCommand+0x98>)
 800bd2e:	6818      	ldr	r0, [r3, #0]
 800bd30:	f107 0110 	add.w	r1, r7, #16
 800bd34:	2300      	movs	r3, #0
 800bd36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd38:	f7fe fc88 	bl	800a64c <xQueueGenericSend>
 800bd3c:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd3e:	e012      	b.n	800bd66 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd40:	4b0b      	ldr	r3, [pc, #44]	@ (800bd70 <xTimerGenericCommand+0x98>)
 800bd42:	6818      	ldr	r0, [r3, #0]
 800bd44:	f107 0110 	add.w	r1, r7, #16
 800bd48:	2300      	movs	r3, #0
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f7fe fc7e 	bl	800a64c <xQueueGenericSend>
 800bd50:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd52:	e008      	b.n	800bd66 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bd54:	4b06      	ldr	r3, [pc, #24]	@ (800bd70 <xTimerGenericCommand+0x98>)
 800bd56:	6818      	ldr	r0, [r3, #0]
 800bd58:	f107 0110 	add.w	r1, r7, #16
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	683a      	ldr	r2, [r7, #0]
 800bd60:	f7fe fd76 	bl	800a850 <xQueueGenericSendFromISR>
 800bd64:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bd66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3728      	adds	r7, #40	@ 0x28
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}
 800bd70:	20001238 	.word	0x20001238

0800bd74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b088      	sub	sp, #32
 800bd78:	af02      	add	r7, sp, #8
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd7e:	4b23      	ldr	r3, [pc, #140]	@ (800be0c <prvProcessExpiredTimer+0x98>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	68db      	ldr	r3, [r3, #12]
 800bd84:	68db      	ldr	r3, [r3, #12]
 800bd86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	3304      	adds	r3, #4
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f7fe fb29 	bl	800a3e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd98:	f003 0304 	and.w	r3, r3, #4
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d023      	beq.n	800bde8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	699a      	ldr	r2, [r3, #24]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	18d1      	adds	r1, r2, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	683a      	ldr	r2, [r7, #0]
 800bdac:	6978      	ldr	r0, [r7, #20]
 800bdae:	f000 f8d5 	bl	800bf5c <prvInsertTimerInActiveList>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d020      	beq.n	800bdfa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bdb8:	2300      	movs	r3, #0
 800bdba:	9300      	str	r3, [sp, #0]
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	2100      	movs	r1, #0
 800bdc2:	6978      	ldr	r0, [r7, #20]
 800bdc4:	f7ff ff88 	bl	800bcd8 <xTimerGenericCommand>
 800bdc8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d114      	bne.n	800bdfa <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bdd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdd4:	f383 8811 	msr	BASEPRI, r3
 800bdd8:	f3bf 8f6f 	isb	sy
 800bddc:	f3bf 8f4f 	dsb	sy
 800bde0:	60fb      	str	r3, [r7, #12]
}
 800bde2:	bf00      	nop
 800bde4:	bf00      	nop
 800bde6:	e7fd      	b.n	800bde4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdee:	f023 0301 	bic.w	r3, r3, #1
 800bdf2:	b2da      	uxtb	r2, r3
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	6a1b      	ldr	r3, [r3, #32]
 800bdfe:	6978      	ldr	r0, [r7, #20]
 800be00:	4798      	blx	r3
}
 800be02:	bf00      	nop
 800be04:	3718      	adds	r7, #24
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	20001230 	.word	0x20001230

0800be10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be18:	f107 0308 	add.w	r3, r7, #8
 800be1c:	4618      	mov	r0, r3
 800be1e:	f000 f859 	bl	800bed4 <prvGetNextExpireTime>
 800be22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	4619      	mov	r1, r3
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f000 f805 	bl	800be38 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be2e:	f000 f8d7 	bl	800bfe0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be32:	bf00      	nop
 800be34:	e7f0      	b.n	800be18 <prvTimerTask+0x8>
	...

0800be38 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800be42:	f7ff fa37 	bl	800b2b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be46:	f107 0308 	add.w	r3, r7, #8
 800be4a:	4618      	mov	r0, r3
 800be4c:	f000 f866 	bl	800bf1c <prvSampleTimeNow>
 800be50:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d130      	bne.n	800beba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d10a      	bne.n	800be74 <prvProcessTimerOrBlockTask+0x3c>
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	429a      	cmp	r2, r3
 800be64:	d806      	bhi.n	800be74 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800be66:	f7ff fa33 	bl	800b2d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800be6a:	68f9      	ldr	r1, [r7, #12]
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f7ff ff81 	bl	800bd74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800be72:	e024      	b.n	800bebe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d008      	beq.n	800be8c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be7a:	4b13      	ldr	r3, [pc, #76]	@ (800bec8 <prvProcessTimerOrBlockTask+0x90>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d101      	bne.n	800be88 <prvProcessTimerOrBlockTask+0x50>
 800be84:	2301      	movs	r3, #1
 800be86:	e000      	b.n	800be8a <prvProcessTimerOrBlockTask+0x52>
 800be88:	2300      	movs	r3, #0
 800be8a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800be8c:	4b0f      	ldr	r3, [pc, #60]	@ (800becc <prvProcessTimerOrBlockTask+0x94>)
 800be8e:	6818      	ldr	r0, [r3, #0]
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	1ad3      	subs	r3, r2, r3
 800be96:	683a      	ldr	r2, [r7, #0]
 800be98:	4619      	mov	r1, r3
 800be9a:	f7fe ff93 	bl	800adc4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800be9e:	f7ff fa17 	bl	800b2d0 <xTaskResumeAll>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d10a      	bne.n	800bebe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bea8:	4b09      	ldr	r3, [pc, #36]	@ (800bed0 <prvProcessTimerOrBlockTask+0x98>)
 800beaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800beae:	601a      	str	r2, [r3, #0]
 800beb0:	f3bf 8f4f 	dsb	sy
 800beb4:	f3bf 8f6f 	isb	sy
}
 800beb8:	e001      	b.n	800bebe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800beba:	f7ff fa09 	bl	800b2d0 <xTaskResumeAll>
}
 800bebe:	bf00      	nop
 800bec0:	3710      	adds	r7, #16
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	bf00      	nop
 800bec8:	20001234 	.word	0x20001234
 800becc:	20001238 	.word	0x20001238
 800bed0:	e000ed04 	.word	0xe000ed04

0800bed4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bed4:	b480      	push	{r7}
 800bed6:	b085      	sub	sp, #20
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bedc:	4b0e      	ldr	r3, [pc, #56]	@ (800bf18 <prvGetNextExpireTime+0x44>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d101      	bne.n	800beea <prvGetNextExpireTime+0x16>
 800bee6:	2201      	movs	r2, #1
 800bee8:	e000      	b.n	800beec <prvGetNextExpireTime+0x18>
 800beea:	2200      	movs	r2, #0
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d105      	bne.n	800bf04 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bef8:	4b07      	ldr	r3, [pc, #28]	@ (800bf18 <prvGetNextExpireTime+0x44>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	60fb      	str	r3, [r7, #12]
 800bf02:	e001      	b.n	800bf08 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bf04:	2300      	movs	r3, #0
 800bf06:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bf08:	68fb      	ldr	r3, [r7, #12]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3714      	adds	r7, #20
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr
 800bf16:	bf00      	nop
 800bf18:	20001230 	.word	0x20001230

0800bf1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b084      	sub	sp, #16
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf24:	f7ff fa72 	bl	800b40c <xTaskGetTickCount>
 800bf28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf2a:	4b0b      	ldr	r3, [pc, #44]	@ (800bf58 <prvSampleTimeNow+0x3c>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	68fa      	ldr	r2, [r7, #12]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d205      	bcs.n	800bf40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf34:	f000 f93a 	bl	800c1ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	601a      	str	r2, [r3, #0]
 800bf3e:	e002      	b.n	800bf46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2200      	movs	r2, #0
 800bf44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bf46:	4a04      	ldr	r2, [pc, #16]	@ (800bf58 <prvSampleTimeNow+0x3c>)
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3710      	adds	r7, #16
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	20001240 	.word	0x20001240

0800bf5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b086      	sub	sp, #24
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	60b9      	str	r1, [r7, #8]
 800bf66:	607a      	str	r2, [r7, #4]
 800bf68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	68ba      	ldr	r2, [r7, #8]
 800bf72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	68fa      	ldr	r2, [r7, #12]
 800bf78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf7a:	68ba      	ldr	r2, [r7, #8]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d812      	bhi.n	800bfa8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	1ad2      	subs	r2, r2, r3
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	699b      	ldr	r3, [r3, #24]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d302      	bcc.n	800bf96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bf90:	2301      	movs	r3, #1
 800bf92:	617b      	str	r3, [r7, #20]
 800bf94:	e01b      	b.n	800bfce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bf96:	4b10      	ldr	r3, [pc, #64]	@ (800bfd8 <prvInsertTimerInActiveList+0x7c>)
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	3304      	adds	r3, #4
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	4610      	mov	r0, r2
 800bfa2:	f7fe f9e6 	bl	800a372 <vListInsert>
 800bfa6:	e012      	b.n	800bfce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d206      	bcs.n	800bfbe <prvInsertTimerInActiveList+0x62>
 800bfb0:	68ba      	ldr	r2, [r7, #8]
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	429a      	cmp	r2, r3
 800bfb6:	d302      	bcc.n	800bfbe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	617b      	str	r3, [r7, #20]
 800bfbc:	e007      	b.n	800bfce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfbe:	4b07      	ldr	r3, [pc, #28]	@ (800bfdc <prvInsertTimerInActiveList+0x80>)
 800bfc0:	681a      	ldr	r2, [r3, #0]
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	3304      	adds	r3, #4
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	4610      	mov	r0, r2
 800bfca:	f7fe f9d2 	bl	800a372 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bfce:	697b      	ldr	r3, [r7, #20]
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3718      	adds	r7, #24
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	20001234 	.word	0x20001234
 800bfdc:	20001230 	.word	0x20001230

0800bfe0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b08e      	sub	sp, #56	@ 0x38
 800bfe4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bfe6:	e0ce      	b.n	800c186 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	da19      	bge.n	800c022 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bfee:	1d3b      	adds	r3, r7, #4
 800bff0:	3304      	adds	r3, #4
 800bff2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d10b      	bne.n	800c012 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bffe:	f383 8811 	msr	BASEPRI, r3
 800c002:	f3bf 8f6f 	isb	sy
 800c006:	f3bf 8f4f 	dsb	sy
 800c00a:	61fb      	str	r3, [r7, #28]
}
 800c00c:	bf00      	nop
 800c00e:	bf00      	nop
 800c010:	e7fd      	b.n	800c00e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c018:	6850      	ldr	r0, [r2, #4]
 800c01a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c01c:	6892      	ldr	r2, [r2, #8]
 800c01e:	4611      	mov	r1, r2
 800c020:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2b00      	cmp	r3, #0
 800c026:	f2c0 80ae 	blt.w	800c186 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c030:	695b      	ldr	r3, [r3, #20]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d004      	beq.n	800c040 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c038:	3304      	adds	r3, #4
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fe f9d2 	bl	800a3e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c040:	463b      	mov	r3, r7
 800c042:	4618      	mov	r0, r3
 800c044:	f7ff ff6a 	bl	800bf1c <prvSampleTimeNow>
 800c048:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2b09      	cmp	r3, #9
 800c04e:	f200 8097 	bhi.w	800c180 <prvProcessReceivedCommands+0x1a0>
 800c052:	a201      	add	r2, pc, #4	@ (adr r2, 800c058 <prvProcessReceivedCommands+0x78>)
 800c054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c058:	0800c081 	.word	0x0800c081
 800c05c:	0800c081 	.word	0x0800c081
 800c060:	0800c081 	.word	0x0800c081
 800c064:	0800c0f7 	.word	0x0800c0f7
 800c068:	0800c10b 	.word	0x0800c10b
 800c06c:	0800c157 	.word	0x0800c157
 800c070:	0800c081 	.word	0x0800c081
 800c074:	0800c081 	.word	0x0800c081
 800c078:	0800c0f7 	.word	0x0800c0f7
 800c07c:	0800c10b 	.word	0x0800c10b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c082:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c086:	f043 0301 	orr.w	r3, r3, #1
 800c08a:	b2da      	uxtb	r2, r3
 800c08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c08e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c092:	68ba      	ldr	r2, [r7, #8]
 800c094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c096:	699b      	ldr	r3, [r3, #24]
 800c098:	18d1      	adds	r1, r2, r3
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c09e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0a0:	f7ff ff5c 	bl	800bf5c <prvInsertTimerInActiveList>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d06c      	beq.n	800c184 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ac:	6a1b      	ldr	r3, [r3, #32]
 800c0ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0b8:	f003 0304 	and.w	r3, r3, #4
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d061      	beq.n	800c184 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c4:	699b      	ldr	r3, [r3, #24]
 800c0c6:	441a      	add	r2, r3
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	9300      	str	r3, [sp, #0]
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	2100      	movs	r1, #0
 800c0d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0d2:	f7ff fe01 	bl	800bcd8 <xTimerGenericCommand>
 800c0d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c0d8:	6a3b      	ldr	r3, [r7, #32]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d152      	bne.n	800c184 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0e2:	f383 8811 	msr	BASEPRI, r3
 800c0e6:	f3bf 8f6f 	isb	sy
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	61bb      	str	r3, [r7, #24]
}
 800c0f0:	bf00      	nop
 800c0f2:	bf00      	nop
 800c0f4:	e7fd      	b.n	800c0f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0fc:	f023 0301 	bic.w	r3, r3, #1
 800c100:	b2da      	uxtb	r2, r3
 800c102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c104:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c108:	e03d      	b.n	800c186 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c10a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c10c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c110:	f043 0301 	orr.w	r3, r3, #1
 800c114:	b2da      	uxtb	r2, r3
 800c116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c118:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c11c:	68ba      	ldr	r2, [r7, #8]
 800c11e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c120:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c124:	699b      	ldr	r3, [r3, #24]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d10b      	bne.n	800c142 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c12a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c12e:	f383 8811 	msr	BASEPRI, r3
 800c132:	f3bf 8f6f 	isb	sy
 800c136:	f3bf 8f4f 	dsb	sy
 800c13a:	617b      	str	r3, [r7, #20]
}
 800c13c:	bf00      	nop
 800c13e:	bf00      	nop
 800c140:	e7fd      	b.n	800c13e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c144:	699a      	ldr	r2, [r3, #24]
 800c146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c148:	18d1      	adds	r1, r2, r3
 800c14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c14c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c14e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c150:	f7ff ff04 	bl	800bf5c <prvInsertTimerInActiveList>
					break;
 800c154:	e017      	b.n	800c186 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c158:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c15c:	f003 0302 	and.w	r3, r3, #2
 800c160:	2b00      	cmp	r3, #0
 800c162:	d103      	bne.n	800c16c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c164:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c166:	f000 fbe7 	bl	800c938 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c16a:	e00c      	b.n	800c186 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c16c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c16e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c172:	f023 0301 	bic.w	r3, r3, #1
 800c176:	b2da      	uxtb	r2, r3
 800c178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c17a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c17e:	e002      	b.n	800c186 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c180:	bf00      	nop
 800c182:	e000      	b.n	800c186 <prvProcessReceivedCommands+0x1a6>
					break;
 800c184:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c186:	4b08      	ldr	r3, [pc, #32]	@ (800c1a8 <prvProcessReceivedCommands+0x1c8>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	1d39      	adds	r1, r7, #4
 800c18c:	2200      	movs	r2, #0
 800c18e:	4618      	mov	r0, r3
 800c190:	f7fe fbfc 	bl	800a98c <xQueueReceive>
 800c194:	4603      	mov	r3, r0
 800c196:	2b00      	cmp	r3, #0
 800c198:	f47f af26 	bne.w	800bfe8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c19c:	bf00      	nop
 800c19e:	bf00      	nop
 800c1a0:	3730      	adds	r7, #48	@ 0x30
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	20001238 	.word	0x20001238

0800c1ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b088      	sub	sp, #32
 800c1b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c1b2:	e049      	b.n	800c248 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c1b4:	4b2e      	ldr	r3, [pc, #184]	@ (800c270 <prvSwitchTimerLists+0xc4>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	68db      	ldr	r3, [r3, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1be:	4b2c      	ldr	r3, [pc, #176]	@ (800c270 <prvSwitchTimerLists+0xc4>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	68db      	ldr	r3, [r3, #12]
 800c1c4:	68db      	ldr	r3, [r3, #12]
 800c1c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	3304      	adds	r3, #4
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f7fe f909 	bl	800a3e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	6a1b      	ldr	r3, [r3, #32]
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1e0:	f003 0304 	and.w	r3, r3, #4
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d02f      	beq.n	800c248 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	699b      	ldr	r3, [r3, #24]
 800c1ec:	693a      	ldr	r2, [r7, #16]
 800c1ee:	4413      	add	r3, r2
 800c1f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c1f2:	68ba      	ldr	r2, [r7, #8]
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d90e      	bls.n	800c218 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	68ba      	ldr	r2, [r7, #8]
 800c1fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	68fa      	ldr	r2, [r7, #12]
 800c204:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c206:	4b1a      	ldr	r3, [pc, #104]	@ (800c270 <prvSwitchTimerLists+0xc4>)
 800c208:	681a      	ldr	r2, [r3, #0]
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	3304      	adds	r3, #4
 800c20e:	4619      	mov	r1, r3
 800c210:	4610      	mov	r0, r2
 800c212:	f7fe f8ae 	bl	800a372 <vListInsert>
 800c216:	e017      	b.n	800c248 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c218:	2300      	movs	r3, #0
 800c21a:	9300      	str	r3, [sp, #0]
 800c21c:	2300      	movs	r3, #0
 800c21e:	693a      	ldr	r2, [r7, #16]
 800c220:	2100      	movs	r1, #0
 800c222:	68f8      	ldr	r0, [r7, #12]
 800c224:	f7ff fd58 	bl	800bcd8 <xTimerGenericCommand>
 800c228:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d10b      	bne.n	800c248 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c234:	f383 8811 	msr	BASEPRI, r3
 800c238:	f3bf 8f6f 	isb	sy
 800c23c:	f3bf 8f4f 	dsb	sy
 800c240:	603b      	str	r3, [r7, #0]
}
 800c242:	bf00      	nop
 800c244:	bf00      	nop
 800c246:	e7fd      	b.n	800c244 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c248:	4b09      	ldr	r3, [pc, #36]	@ (800c270 <prvSwitchTimerLists+0xc4>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d1b0      	bne.n	800c1b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c252:	4b07      	ldr	r3, [pc, #28]	@ (800c270 <prvSwitchTimerLists+0xc4>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c258:	4b06      	ldr	r3, [pc, #24]	@ (800c274 <prvSwitchTimerLists+0xc8>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	4a04      	ldr	r2, [pc, #16]	@ (800c270 <prvSwitchTimerLists+0xc4>)
 800c25e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c260:	4a04      	ldr	r2, [pc, #16]	@ (800c274 <prvSwitchTimerLists+0xc8>)
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	6013      	str	r3, [r2, #0]
}
 800c266:	bf00      	nop
 800c268:	3718      	adds	r7, #24
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	20001230 	.word	0x20001230
 800c274:	20001234 	.word	0x20001234

0800c278 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b082      	sub	sp, #8
 800c27c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c27e:	f000 f96b 	bl	800c558 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c282:	4b15      	ldr	r3, [pc, #84]	@ (800c2d8 <prvCheckForValidListAndQueue+0x60>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d120      	bne.n	800c2cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c28a:	4814      	ldr	r0, [pc, #80]	@ (800c2dc <prvCheckForValidListAndQueue+0x64>)
 800c28c:	f7fe f820 	bl	800a2d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c290:	4813      	ldr	r0, [pc, #76]	@ (800c2e0 <prvCheckForValidListAndQueue+0x68>)
 800c292:	f7fe f81d 	bl	800a2d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c296:	4b13      	ldr	r3, [pc, #76]	@ (800c2e4 <prvCheckForValidListAndQueue+0x6c>)
 800c298:	4a10      	ldr	r2, [pc, #64]	@ (800c2dc <prvCheckForValidListAndQueue+0x64>)
 800c29a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c29c:	4b12      	ldr	r3, [pc, #72]	@ (800c2e8 <prvCheckForValidListAndQueue+0x70>)
 800c29e:	4a10      	ldr	r2, [pc, #64]	@ (800c2e0 <prvCheckForValidListAndQueue+0x68>)
 800c2a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	9300      	str	r3, [sp, #0]
 800c2a6:	4b11      	ldr	r3, [pc, #68]	@ (800c2ec <prvCheckForValidListAndQueue+0x74>)
 800c2a8:	4a11      	ldr	r2, [pc, #68]	@ (800c2f0 <prvCheckForValidListAndQueue+0x78>)
 800c2aa:	2110      	movs	r1, #16
 800c2ac:	200a      	movs	r0, #10
 800c2ae:	f7fe f92d 	bl	800a50c <xQueueGenericCreateStatic>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	4a08      	ldr	r2, [pc, #32]	@ (800c2d8 <prvCheckForValidListAndQueue+0x60>)
 800c2b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c2b8:	4b07      	ldr	r3, [pc, #28]	@ (800c2d8 <prvCheckForValidListAndQueue+0x60>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d005      	beq.n	800c2cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c2c0:	4b05      	ldr	r3, [pc, #20]	@ (800c2d8 <prvCheckForValidListAndQueue+0x60>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	490b      	ldr	r1, [pc, #44]	@ (800c2f4 <prvCheckForValidListAndQueue+0x7c>)
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7fe fd52 	bl	800ad70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2cc:	f000 f976 	bl	800c5bc <vPortExitCritical>
}
 800c2d0:	bf00      	nop
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
 800c2d6:	bf00      	nop
 800c2d8:	20001238 	.word	0x20001238
 800c2dc:	20001208 	.word	0x20001208
 800c2e0:	2000121c 	.word	0x2000121c
 800c2e4:	20001230 	.word	0x20001230
 800c2e8:	20001234 	.word	0x20001234
 800c2ec:	200012e4 	.word	0x200012e4
 800c2f0:	20001244 	.word	0x20001244
 800c2f4:	08010468 	.word	0x08010468

0800c2f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b085      	sub	sp, #20
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	60f8      	str	r0, [r7, #12]
 800c300:	60b9      	str	r1, [r7, #8]
 800c302:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	3b04      	subs	r3, #4
 800c308:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	3b04      	subs	r3, #4
 800c316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	f023 0201 	bic.w	r2, r3, #1
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	3b04      	subs	r3, #4
 800c326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c328:	4a0c      	ldr	r2, [pc, #48]	@ (800c35c <pxPortInitialiseStack+0x64>)
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	3b14      	subs	r3, #20
 800c332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	3b04      	subs	r3, #4
 800c33e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f06f 0202 	mvn.w	r2, #2
 800c346:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	3b20      	subs	r3, #32
 800c34c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c34e:	68fb      	ldr	r3, [r7, #12]
}
 800c350:	4618      	mov	r0, r3
 800c352:	3714      	adds	r7, #20
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr
 800c35c:	0800c361 	.word	0x0800c361

0800c360 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c360:	b480      	push	{r7}
 800c362:	b085      	sub	sp, #20
 800c364:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c366:	2300      	movs	r3, #0
 800c368:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c36a:	4b13      	ldr	r3, [pc, #76]	@ (800c3b8 <prvTaskExitError+0x58>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c372:	d00b      	beq.n	800c38c <prvTaskExitError+0x2c>
	__asm volatile
 800c374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c378:	f383 8811 	msr	BASEPRI, r3
 800c37c:	f3bf 8f6f 	isb	sy
 800c380:	f3bf 8f4f 	dsb	sy
 800c384:	60fb      	str	r3, [r7, #12]
}
 800c386:	bf00      	nop
 800c388:	bf00      	nop
 800c38a:	e7fd      	b.n	800c388 <prvTaskExitError+0x28>
	__asm volatile
 800c38c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c390:	f383 8811 	msr	BASEPRI, r3
 800c394:	f3bf 8f6f 	isb	sy
 800c398:	f3bf 8f4f 	dsb	sy
 800c39c:	60bb      	str	r3, [r7, #8]
}
 800c39e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c3a0:	bf00      	nop
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d0fc      	beq.n	800c3a2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c3a8:	bf00      	nop
 800c3aa:	bf00      	nop
 800c3ac:	3714      	adds	r7, #20
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b4:	4770      	bx	lr
 800c3b6:	bf00      	nop
 800c3b8:	2000002c 	.word	0x2000002c
 800c3bc:	00000000 	.word	0x00000000

0800c3c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c3c0:	4b07      	ldr	r3, [pc, #28]	@ (800c3e0 <pxCurrentTCBConst2>)
 800c3c2:	6819      	ldr	r1, [r3, #0]
 800c3c4:	6808      	ldr	r0, [r1, #0]
 800c3c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ca:	f380 8809 	msr	PSP, r0
 800c3ce:	f3bf 8f6f 	isb	sy
 800c3d2:	f04f 0000 	mov.w	r0, #0
 800c3d6:	f380 8811 	msr	BASEPRI, r0
 800c3da:	4770      	bx	lr
 800c3dc:	f3af 8000 	nop.w

0800c3e0 <pxCurrentTCBConst2>:
 800c3e0:	20000d08 	.word	0x20000d08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c3e4:	bf00      	nop
 800c3e6:	bf00      	nop

0800c3e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c3e8:	4808      	ldr	r0, [pc, #32]	@ (800c40c <prvPortStartFirstTask+0x24>)
 800c3ea:	6800      	ldr	r0, [r0, #0]
 800c3ec:	6800      	ldr	r0, [r0, #0]
 800c3ee:	f380 8808 	msr	MSP, r0
 800c3f2:	f04f 0000 	mov.w	r0, #0
 800c3f6:	f380 8814 	msr	CONTROL, r0
 800c3fa:	b662      	cpsie	i
 800c3fc:	b661      	cpsie	f
 800c3fe:	f3bf 8f4f 	dsb	sy
 800c402:	f3bf 8f6f 	isb	sy
 800c406:	df00      	svc	0
 800c408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c40a:	bf00      	nop
 800c40c:	e000ed08 	.word	0xe000ed08

0800c410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b086      	sub	sp, #24
 800c414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c416:	4b47      	ldr	r3, [pc, #284]	@ (800c534 <xPortStartScheduler+0x124>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4a47      	ldr	r2, [pc, #284]	@ (800c538 <xPortStartScheduler+0x128>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d10b      	bne.n	800c438 <xPortStartScheduler+0x28>
	__asm volatile
 800c420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	613b      	str	r3, [r7, #16]
}
 800c432:	bf00      	nop
 800c434:	bf00      	nop
 800c436:	e7fd      	b.n	800c434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c438:	4b3e      	ldr	r3, [pc, #248]	@ (800c534 <xPortStartScheduler+0x124>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a3f      	ldr	r2, [pc, #252]	@ (800c53c <xPortStartScheduler+0x12c>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d10b      	bne.n	800c45a <xPortStartScheduler+0x4a>
	__asm volatile
 800c442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c446:	f383 8811 	msr	BASEPRI, r3
 800c44a:	f3bf 8f6f 	isb	sy
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	60fb      	str	r3, [r7, #12]
}
 800c454:	bf00      	nop
 800c456:	bf00      	nop
 800c458:	e7fd      	b.n	800c456 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c45a:	4b39      	ldr	r3, [pc, #228]	@ (800c540 <xPortStartScheduler+0x130>)
 800c45c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	781b      	ldrb	r3, [r3, #0]
 800c462:	b2db      	uxtb	r3, r3
 800c464:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	22ff      	movs	r2, #255	@ 0xff
 800c46a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	b2db      	uxtb	r3, r3
 800c472:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c474:	78fb      	ldrb	r3, [r7, #3]
 800c476:	b2db      	uxtb	r3, r3
 800c478:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c47c:	b2da      	uxtb	r2, r3
 800c47e:	4b31      	ldr	r3, [pc, #196]	@ (800c544 <xPortStartScheduler+0x134>)
 800c480:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c482:	4b31      	ldr	r3, [pc, #196]	@ (800c548 <xPortStartScheduler+0x138>)
 800c484:	2207      	movs	r2, #7
 800c486:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c488:	e009      	b.n	800c49e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c48a:	4b2f      	ldr	r3, [pc, #188]	@ (800c548 <xPortStartScheduler+0x138>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	3b01      	subs	r3, #1
 800c490:	4a2d      	ldr	r2, [pc, #180]	@ (800c548 <xPortStartScheduler+0x138>)
 800c492:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c494:	78fb      	ldrb	r3, [r7, #3]
 800c496:	b2db      	uxtb	r3, r3
 800c498:	005b      	lsls	r3, r3, #1
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c49e:	78fb      	ldrb	r3, [r7, #3]
 800c4a0:	b2db      	uxtb	r3, r3
 800c4a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4a6:	2b80      	cmp	r3, #128	@ 0x80
 800c4a8:	d0ef      	beq.n	800c48a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c4aa:	4b27      	ldr	r3, [pc, #156]	@ (800c548 <xPortStartScheduler+0x138>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f1c3 0307 	rsb	r3, r3, #7
 800c4b2:	2b04      	cmp	r3, #4
 800c4b4:	d00b      	beq.n	800c4ce <xPortStartScheduler+0xbe>
	__asm volatile
 800c4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ba:	f383 8811 	msr	BASEPRI, r3
 800c4be:	f3bf 8f6f 	isb	sy
 800c4c2:	f3bf 8f4f 	dsb	sy
 800c4c6:	60bb      	str	r3, [r7, #8]
}
 800c4c8:	bf00      	nop
 800c4ca:	bf00      	nop
 800c4cc:	e7fd      	b.n	800c4ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c4ce:	4b1e      	ldr	r3, [pc, #120]	@ (800c548 <xPortStartScheduler+0x138>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	021b      	lsls	r3, r3, #8
 800c4d4:	4a1c      	ldr	r2, [pc, #112]	@ (800c548 <xPortStartScheduler+0x138>)
 800c4d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c4d8:	4b1b      	ldr	r3, [pc, #108]	@ (800c548 <xPortStartScheduler+0x138>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c4e0:	4a19      	ldr	r2, [pc, #100]	@ (800c548 <xPortStartScheduler+0x138>)
 800c4e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	b2da      	uxtb	r2, r3
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c4ec:	4b17      	ldr	r3, [pc, #92]	@ (800c54c <xPortStartScheduler+0x13c>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a16      	ldr	r2, [pc, #88]	@ (800c54c <xPortStartScheduler+0x13c>)
 800c4f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c4f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c4f8:	4b14      	ldr	r3, [pc, #80]	@ (800c54c <xPortStartScheduler+0x13c>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a13      	ldr	r2, [pc, #76]	@ (800c54c <xPortStartScheduler+0x13c>)
 800c4fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c502:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c504:	f000 f8da 	bl	800c6bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c508:	4b11      	ldr	r3, [pc, #68]	@ (800c550 <xPortStartScheduler+0x140>)
 800c50a:	2200      	movs	r2, #0
 800c50c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c50e:	f000 f8f9 	bl	800c704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c512:	4b10      	ldr	r3, [pc, #64]	@ (800c554 <xPortStartScheduler+0x144>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	4a0f      	ldr	r2, [pc, #60]	@ (800c554 <xPortStartScheduler+0x144>)
 800c518:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c51c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c51e:	f7ff ff63 	bl	800c3e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c522:	f7ff f83d 	bl	800b5a0 <vTaskSwitchContext>
	prvTaskExitError();
 800c526:	f7ff ff1b 	bl	800c360 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c52a:	2300      	movs	r3, #0
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3718      	adds	r7, #24
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}
 800c534:	e000ed00 	.word	0xe000ed00
 800c538:	410fc271 	.word	0x410fc271
 800c53c:	410fc270 	.word	0x410fc270
 800c540:	e000e400 	.word	0xe000e400
 800c544:	20001334 	.word	0x20001334
 800c548:	20001338 	.word	0x20001338
 800c54c:	e000ed20 	.word	0xe000ed20
 800c550:	2000002c 	.word	0x2000002c
 800c554:	e000ef34 	.word	0xe000ef34

0800c558 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
	__asm volatile
 800c55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c562:	f383 8811 	msr	BASEPRI, r3
 800c566:	f3bf 8f6f 	isb	sy
 800c56a:	f3bf 8f4f 	dsb	sy
 800c56e:	607b      	str	r3, [r7, #4]
}
 800c570:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c572:	4b10      	ldr	r3, [pc, #64]	@ (800c5b4 <vPortEnterCritical+0x5c>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	3301      	adds	r3, #1
 800c578:	4a0e      	ldr	r2, [pc, #56]	@ (800c5b4 <vPortEnterCritical+0x5c>)
 800c57a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c57c:	4b0d      	ldr	r3, [pc, #52]	@ (800c5b4 <vPortEnterCritical+0x5c>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2b01      	cmp	r3, #1
 800c582:	d110      	bne.n	800c5a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c584:	4b0c      	ldr	r3, [pc, #48]	@ (800c5b8 <vPortEnterCritical+0x60>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d00b      	beq.n	800c5a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c592:	f383 8811 	msr	BASEPRI, r3
 800c596:	f3bf 8f6f 	isb	sy
 800c59a:	f3bf 8f4f 	dsb	sy
 800c59e:	603b      	str	r3, [r7, #0]
}
 800c5a0:	bf00      	nop
 800c5a2:	bf00      	nop
 800c5a4:	e7fd      	b.n	800c5a2 <vPortEnterCritical+0x4a>
	}
}
 800c5a6:	bf00      	nop
 800c5a8:	370c      	adds	r7, #12
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr
 800c5b2:	bf00      	nop
 800c5b4:	2000002c 	.word	0x2000002c
 800c5b8:	e000ed04 	.word	0xe000ed04

0800c5bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c5c2:	4b12      	ldr	r3, [pc, #72]	@ (800c60c <vPortExitCritical+0x50>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d10b      	bne.n	800c5e2 <vPortExitCritical+0x26>
	__asm volatile
 800c5ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ce:	f383 8811 	msr	BASEPRI, r3
 800c5d2:	f3bf 8f6f 	isb	sy
 800c5d6:	f3bf 8f4f 	dsb	sy
 800c5da:	607b      	str	r3, [r7, #4]
}
 800c5dc:	bf00      	nop
 800c5de:	bf00      	nop
 800c5e0:	e7fd      	b.n	800c5de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c5e2:	4b0a      	ldr	r3, [pc, #40]	@ (800c60c <vPortExitCritical+0x50>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	3b01      	subs	r3, #1
 800c5e8:	4a08      	ldr	r2, [pc, #32]	@ (800c60c <vPortExitCritical+0x50>)
 800c5ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c5ec:	4b07      	ldr	r3, [pc, #28]	@ (800c60c <vPortExitCritical+0x50>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d105      	bne.n	800c600 <vPortExitCritical+0x44>
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	f383 8811 	msr	BASEPRI, r3
}
 800c5fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c600:	bf00      	nop
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr
 800c60c:	2000002c 	.word	0x2000002c

0800c610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c610:	f3ef 8009 	mrs	r0, PSP
 800c614:	f3bf 8f6f 	isb	sy
 800c618:	4b15      	ldr	r3, [pc, #84]	@ (800c670 <pxCurrentTCBConst>)
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	f01e 0f10 	tst.w	lr, #16
 800c620:	bf08      	it	eq
 800c622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c62a:	6010      	str	r0, [r2, #0]
 800c62c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c630:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c634:	f380 8811 	msr	BASEPRI, r0
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f7fe ffae 	bl	800b5a0 <vTaskSwitchContext>
 800c644:	f04f 0000 	mov.w	r0, #0
 800c648:	f380 8811 	msr	BASEPRI, r0
 800c64c:	bc09      	pop	{r0, r3}
 800c64e:	6819      	ldr	r1, [r3, #0]
 800c650:	6808      	ldr	r0, [r1, #0]
 800c652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c656:	f01e 0f10 	tst.w	lr, #16
 800c65a:	bf08      	it	eq
 800c65c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c660:	f380 8809 	msr	PSP, r0
 800c664:	f3bf 8f6f 	isb	sy
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop
 800c66c:	f3af 8000 	nop.w

0800c670 <pxCurrentTCBConst>:
 800c670:	20000d08 	.word	0x20000d08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c674:	bf00      	nop
 800c676:	bf00      	nop

0800c678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
	__asm volatile
 800c67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c682:	f383 8811 	msr	BASEPRI, r3
 800c686:	f3bf 8f6f 	isb	sy
 800c68a:	f3bf 8f4f 	dsb	sy
 800c68e:	607b      	str	r3, [r7, #4]
}
 800c690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c692:	f7fe fecb 	bl	800b42c <xTaskIncrementTick>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d003      	beq.n	800c6a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c69c:	4b06      	ldr	r3, [pc, #24]	@ (800c6b8 <xPortSysTickHandler+0x40>)
 800c69e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	f383 8811 	msr	BASEPRI, r3
}
 800c6ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c6b0:	bf00      	nop
 800c6b2:	3708      	adds	r7, #8
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	e000ed04 	.word	0xe000ed04

0800c6bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c6bc:	b480      	push	{r7}
 800c6be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c6c0:	4b0b      	ldr	r3, [pc, #44]	@ (800c6f0 <vPortSetupTimerInterrupt+0x34>)
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c6c6:	4b0b      	ldr	r3, [pc, #44]	@ (800c6f4 <vPortSetupTimerInterrupt+0x38>)
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c6cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c6f8 <vPortSetupTimerInterrupt+0x3c>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a0a      	ldr	r2, [pc, #40]	@ (800c6fc <vPortSetupTimerInterrupt+0x40>)
 800c6d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6d6:	099b      	lsrs	r3, r3, #6
 800c6d8:	4a09      	ldr	r2, [pc, #36]	@ (800c700 <vPortSetupTimerInterrupt+0x44>)
 800c6da:	3b01      	subs	r3, #1
 800c6dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c6de:	4b04      	ldr	r3, [pc, #16]	@ (800c6f0 <vPortSetupTimerInterrupt+0x34>)
 800c6e0:	2207      	movs	r2, #7
 800c6e2:	601a      	str	r2, [r3, #0]
}
 800c6e4:	bf00      	nop
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr
 800c6ee:	bf00      	nop
 800c6f0:	e000e010 	.word	0xe000e010
 800c6f4:	e000e018 	.word	0xe000e018
 800c6f8:	20000020 	.word	0x20000020
 800c6fc:	10624dd3 	.word	0x10624dd3
 800c700:	e000e014 	.word	0xe000e014

0800c704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c704:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c714 <vPortEnableVFP+0x10>
 800c708:	6801      	ldr	r1, [r0, #0]
 800c70a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c70e:	6001      	str	r1, [r0, #0]
 800c710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c712:	bf00      	nop
 800c714:	e000ed88 	.word	0xe000ed88

0800c718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c718:	b480      	push	{r7}
 800c71a:	b085      	sub	sp, #20
 800c71c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c71e:	f3ef 8305 	mrs	r3, IPSR
 800c722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2b0f      	cmp	r3, #15
 800c728:	d915      	bls.n	800c756 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c72a:	4a18      	ldr	r2, [pc, #96]	@ (800c78c <vPortValidateInterruptPriority+0x74>)
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	4413      	add	r3, r2
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c734:	4b16      	ldr	r3, [pc, #88]	@ (800c790 <vPortValidateInterruptPriority+0x78>)
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	7afa      	ldrb	r2, [r7, #11]
 800c73a:	429a      	cmp	r2, r3
 800c73c:	d20b      	bcs.n	800c756 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c742:	f383 8811 	msr	BASEPRI, r3
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	607b      	str	r3, [r7, #4]
}
 800c750:	bf00      	nop
 800c752:	bf00      	nop
 800c754:	e7fd      	b.n	800c752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c756:	4b0f      	ldr	r3, [pc, #60]	@ (800c794 <vPortValidateInterruptPriority+0x7c>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c75e:	4b0e      	ldr	r3, [pc, #56]	@ (800c798 <vPortValidateInterruptPriority+0x80>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	429a      	cmp	r2, r3
 800c764:	d90b      	bls.n	800c77e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c76a:	f383 8811 	msr	BASEPRI, r3
 800c76e:	f3bf 8f6f 	isb	sy
 800c772:	f3bf 8f4f 	dsb	sy
 800c776:	603b      	str	r3, [r7, #0]
}
 800c778:	bf00      	nop
 800c77a:	bf00      	nop
 800c77c:	e7fd      	b.n	800c77a <vPortValidateInterruptPriority+0x62>
	}
 800c77e:	bf00      	nop
 800c780:	3714      	adds	r7, #20
 800c782:	46bd      	mov	sp, r7
 800c784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	e000e3f0 	.word	0xe000e3f0
 800c790:	20001334 	.word	0x20001334
 800c794:	e000ed0c 	.word	0xe000ed0c
 800c798:	20001338 	.word	0x20001338

0800c79c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b08a      	sub	sp, #40	@ 0x28
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c7a8:	f7fe fd84 	bl	800b2b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c7ac:	4b5c      	ldr	r3, [pc, #368]	@ (800c920 <pvPortMalloc+0x184>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d101      	bne.n	800c7b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c7b4:	f000 f924 	bl	800ca00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c7b8:	4b5a      	ldr	r3, [pc, #360]	@ (800c924 <pvPortMalloc+0x188>)
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	4013      	ands	r3, r2
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	f040 8095 	bne.w	800c8f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d01e      	beq.n	800c80a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c7cc:	2208      	movs	r2, #8
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	4413      	add	r3, r2
 800c7d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f003 0307 	and.w	r3, r3, #7
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d015      	beq.n	800c80a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f023 0307 	bic.w	r3, r3, #7
 800c7e4:	3308      	adds	r3, #8
 800c7e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f003 0307 	and.w	r3, r3, #7
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d00b      	beq.n	800c80a <pvPortMalloc+0x6e>
	__asm volatile
 800c7f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7f6:	f383 8811 	msr	BASEPRI, r3
 800c7fa:	f3bf 8f6f 	isb	sy
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	617b      	str	r3, [r7, #20]
}
 800c804:	bf00      	nop
 800c806:	bf00      	nop
 800c808:	e7fd      	b.n	800c806 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d06f      	beq.n	800c8f0 <pvPortMalloc+0x154>
 800c810:	4b45      	ldr	r3, [pc, #276]	@ (800c928 <pvPortMalloc+0x18c>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	687a      	ldr	r2, [r7, #4]
 800c816:	429a      	cmp	r2, r3
 800c818:	d86a      	bhi.n	800c8f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c81a:	4b44      	ldr	r3, [pc, #272]	@ (800c92c <pvPortMalloc+0x190>)
 800c81c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c81e:	4b43      	ldr	r3, [pc, #268]	@ (800c92c <pvPortMalloc+0x190>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c824:	e004      	b.n	800c830 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c828:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	687a      	ldr	r2, [r7, #4]
 800c836:	429a      	cmp	r2, r3
 800c838:	d903      	bls.n	800c842 <pvPortMalloc+0xa6>
 800c83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d1f1      	bne.n	800c826 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c842:	4b37      	ldr	r3, [pc, #220]	@ (800c920 <pvPortMalloc+0x184>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c848:	429a      	cmp	r2, r3
 800c84a:	d051      	beq.n	800c8f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c84c:	6a3b      	ldr	r3, [r7, #32]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	2208      	movs	r2, #8
 800c852:	4413      	add	r3, r2
 800c854:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	6a3b      	ldr	r3, [r7, #32]
 800c85c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c860:	685a      	ldr	r2, [r3, #4]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	1ad2      	subs	r2, r2, r3
 800c866:	2308      	movs	r3, #8
 800c868:	005b      	lsls	r3, r3, #1
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d920      	bls.n	800c8b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c86e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	4413      	add	r3, r2
 800c874:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c876:	69bb      	ldr	r3, [r7, #24]
 800c878:	f003 0307 	and.w	r3, r3, #7
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d00b      	beq.n	800c898 <pvPortMalloc+0xfc>
	__asm volatile
 800c880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c884:	f383 8811 	msr	BASEPRI, r3
 800c888:	f3bf 8f6f 	isb	sy
 800c88c:	f3bf 8f4f 	dsb	sy
 800c890:	613b      	str	r3, [r7, #16]
}
 800c892:	bf00      	nop
 800c894:	bf00      	nop
 800c896:	e7fd      	b.n	800c894 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c89a:	685a      	ldr	r2, [r3, #4]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	1ad2      	subs	r2, r2, r3
 800c8a0:	69bb      	ldr	r3, [r7, #24]
 800c8a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a6:	687a      	ldr	r2, [r7, #4]
 800c8a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c8aa:	69b8      	ldr	r0, [r7, #24]
 800c8ac:	f000 f90a 	bl	800cac4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c8b0:	4b1d      	ldr	r3, [pc, #116]	@ (800c928 <pvPortMalloc+0x18c>)
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	1ad3      	subs	r3, r2, r3
 800c8ba:	4a1b      	ldr	r2, [pc, #108]	@ (800c928 <pvPortMalloc+0x18c>)
 800c8bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c8be:	4b1a      	ldr	r3, [pc, #104]	@ (800c928 <pvPortMalloc+0x18c>)
 800c8c0:	681a      	ldr	r2, [r3, #0]
 800c8c2:	4b1b      	ldr	r3, [pc, #108]	@ (800c930 <pvPortMalloc+0x194>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d203      	bcs.n	800c8d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c8ca:	4b17      	ldr	r3, [pc, #92]	@ (800c928 <pvPortMalloc+0x18c>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	4a18      	ldr	r2, [pc, #96]	@ (800c930 <pvPortMalloc+0x194>)
 800c8d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c8d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d4:	685a      	ldr	r2, [r3, #4]
 800c8d6:	4b13      	ldr	r3, [pc, #76]	@ (800c924 <pvPortMalloc+0x188>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	431a      	orrs	r2, r3
 800c8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c8e6:	4b13      	ldr	r3, [pc, #76]	@ (800c934 <pvPortMalloc+0x198>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	4a11      	ldr	r2, [pc, #68]	@ (800c934 <pvPortMalloc+0x198>)
 800c8ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c8f0:	f7fe fcee 	bl	800b2d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8f4:	69fb      	ldr	r3, [r7, #28]
 800c8f6:	f003 0307 	and.w	r3, r3, #7
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d00b      	beq.n	800c916 <pvPortMalloc+0x17a>
	__asm volatile
 800c8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c902:	f383 8811 	msr	BASEPRI, r3
 800c906:	f3bf 8f6f 	isb	sy
 800c90a:	f3bf 8f4f 	dsb	sy
 800c90e:	60fb      	str	r3, [r7, #12]
}
 800c910:	bf00      	nop
 800c912:	bf00      	nop
 800c914:	e7fd      	b.n	800c912 <pvPortMalloc+0x176>
	return pvReturn;
 800c916:	69fb      	ldr	r3, [r7, #28]
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3728      	adds	r7, #40	@ 0x28
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}
 800c920:	20004f44 	.word	0x20004f44
 800c924:	20004f58 	.word	0x20004f58
 800c928:	20004f48 	.word	0x20004f48
 800c92c:	20004f3c 	.word	0x20004f3c
 800c930:	20004f4c 	.word	0x20004f4c
 800c934:	20004f50 	.word	0x20004f50

0800c938 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b086      	sub	sp, #24
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d04f      	beq.n	800c9ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c94a:	2308      	movs	r3, #8
 800c94c:	425b      	negs	r3, r3
 800c94e:	697a      	ldr	r2, [r7, #20]
 800c950:	4413      	add	r3, r2
 800c952:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	685a      	ldr	r2, [r3, #4]
 800c95c:	4b25      	ldr	r3, [pc, #148]	@ (800c9f4 <vPortFree+0xbc>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4013      	ands	r3, r2
 800c962:	2b00      	cmp	r3, #0
 800c964:	d10b      	bne.n	800c97e <vPortFree+0x46>
	__asm volatile
 800c966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c96a:	f383 8811 	msr	BASEPRI, r3
 800c96e:	f3bf 8f6f 	isb	sy
 800c972:	f3bf 8f4f 	dsb	sy
 800c976:	60fb      	str	r3, [r7, #12]
}
 800c978:	bf00      	nop
 800c97a:	bf00      	nop
 800c97c:	e7fd      	b.n	800c97a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d00b      	beq.n	800c99e <vPortFree+0x66>
	__asm volatile
 800c986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c98a:	f383 8811 	msr	BASEPRI, r3
 800c98e:	f3bf 8f6f 	isb	sy
 800c992:	f3bf 8f4f 	dsb	sy
 800c996:	60bb      	str	r3, [r7, #8]
}
 800c998:	bf00      	nop
 800c99a:	bf00      	nop
 800c99c:	e7fd      	b.n	800c99a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	685a      	ldr	r2, [r3, #4]
 800c9a2:	4b14      	ldr	r3, [pc, #80]	@ (800c9f4 <vPortFree+0xbc>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4013      	ands	r3, r2
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d01e      	beq.n	800c9ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d11a      	bne.n	800c9ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	685a      	ldr	r2, [r3, #4]
 800c9b8:	4b0e      	ldr	r3, [pc, #56]	@ (800c9f4 <vPortFree+0xbc>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	43db      	mvns	r3, r3
 800c9be:	401a      	ands	r2, r3
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c9c4:	f7fe fc76 	bl	800b2b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	685a      	ldr	r2, [r3, #4]
 800c9cc:	4b0a      	ldr	r3, [pc, #40]	@ (800c9f8 <vPortFree+0xc0>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	4a09      	ldr	r2, [pc, #36]	@ (800c9f8 <vPortFree+0xc0>)
 800c9d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c9d6:	6938      	ldr	r0, [r7, #16]
 800c9d8:	f000 f874 	bl	800cac4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c9dc:	4b07      	ldr	r3, [pc, #28]	@ (800c9fc <vPortFree+0xc4>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	4a06      	ldr	r2, [pc, #24]	@ (800c9fc <vPortFree+0xc4>)
 800c9e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c9e6:	f7fe fc73 	bl	800b2d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c9ea:	bf00      	nop
 800c9ec:	3718      	adds	r7, #24
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	20004f58 	.word	0x20004f58
 800c9f8:	20004f48 	.word	0x20004f48
 800c9fc:	20004f54 	.word	0x20004f54

0800ca00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca00:	b480      	push	{r7}
 800ca02:	b085      	sub	sp, #20
 800ca04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca06:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ca0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca0c:	4b27      	ldr	r3, [pc, #156]	@ (800caac <prvHeapInit+0xac>)
 800ca0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f003 0307 	and.w	r3, r3, #7
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d00c      	beq.n	800ca34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	3307      	adds	r3, #7
 800ca1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f023 0307 	bic.w	r3, r3, #7
 800ca26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca28:	68ba      	ldr	r2, [r7, #8]
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	1ad3      	subs	r3, r2, r3
 800ca2e:	4a1f      	ldr	r2, [pc, #124]	@ (800caac <prvHeapInit+0xac>)
 800ca30:	4413      	add	r3, r2
 800ca32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca38:	4a1d      	ldr	r2, [pc, #116]	@ (800cab0 <prvHeapInit+0xb0>)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca3e:	4b1c      	ldr	r3, [pc, #112]	@ (800cab0 <prvHeapInit+0xb0>)
 800ca40:	2200      	movs	r2, #0
 800ca42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	68ba      	ldr	r2, [r7, #8]
 800ca48:	4413      	add	r3, r2
 800ca4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca4c:	2208      	movs	r2, #8
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	1a9b      	subs	r3, r3, r2
 800ca52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f023 0307 	bic.w	r3, r3, #7
 800ca5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	4a15      	ldr	r2, [pc, #84]	@ (800cab4 <prvHeapInit+0xb4>)
 800ca60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca62:	4b14      	ldr	r3, [pc, #80]	@ (800cab4 <prvHeapInit+0xb4>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2200      	movs	r2, #0
 800ca68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca6a:	4b12      	ldr	r3, [pc, #72]	@ (800cab4 <prvHeapInit+0xb4>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	68fa      	ldr	r2, [r7, #12]
 800ca7a:	1ad2      	subs	r2, r2, r3
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca80:	4b0c      	ldr	r3, [pc, #48]	@ (800cab4 <prvHeapInit+0xb4>)
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	4a0a      	ldr	r2, [pc, #40]	@ (800cab8 <prvHeapInit+0xb8>)
 800ca8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	685b      	ldr	r3, [r3, #4]
 800ca94:	4a09      	ldr	r2, [pc, #36]	@ (800cabc <prvHeapInit+0xbc>)
 800ca96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca98:	4b09      	ldr	r3, [pc, #36]	@ (800cac0 <prvHeapInit+0xc0>)
 800ca9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ca9e:	601a      	str	r2, [r3, #0]
}
 800caa0:	bf00      	nop
 800caa2:	3714      	adds	r7, #20
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr
 800caac:	2000133c 	.word	0x2000133c
 800cab0:	20004f3c 	.word	0x20004f3c
 800cab4:	20004f44 	.word	0x20004f44
 800cab8:	20004f4c 	.word	0x20004f4c
 800cabc:	20004f48 	.word	0x20004f48
 800cac0:	20004f58 	.word	0x20004f58

0800cac4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cac4:	b480      	push	{r7}
 800cac6:	b085      	sub	sp, #20
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cacc:	4b28      	ldr	r3, [pc, #160]	@ (800cb70 <prvInsertBlockIntoFreeList+0xac>)
 800cace:	60fb      	str	r3, [r7, #12]
 800cad0:	e002      	b.n	800cad8 <prvInsertBlockIntoFreeList+0x14>
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	60fb      	str	r3, [r7, #12]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	429a      	cmp	r2, r3
 800cae0:	d8f7      	bhi.n	800cad2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	68ba      	ldr	r2, [r7, #8]
 800caec:	4413      	add	r3, r2
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d108      	bne.n	800cb06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	685a      	ldr	r2, [r3, #4]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	441a      	add	r2, r3
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	68ba      	ldr	r2, [r7, #8]
 800cb10:	441a      	add	r2, r3
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d118      	bne.n	800cb4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681a      	ldr	r2, [r3, #0]
 800cb1e:	4b15      	ldr	r3, [pc, #84]	@ (800cb74 <prvInsertBlockIntoFreeList+0xb0>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d00d      	beq.n	800cb42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	685a      	ldr	r2, [r3, #4]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	441a      	add	r2, r3
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	601a      	str	r2, [r3, #0]
 800cb40:	e008      	b.n	800cb54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb42:	4b0c      	ldr	r3, [pc, #48]	@ (800cb74 <prvInsertBlockIntoFreeList+0xb0>)
 800cb44:	681a      	ldr	r2, [r3, #0]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	601a      	str	r2, [r3, #0]
 800cb4a:	e003      	b.n	800cb54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681a      	ldr	r2, [r3, #0]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb54:	68fa      	ldr	r2, [r7, #12]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d002      	beq.n	800cb62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	687a      	ldr	r2, [r7, #4]
 800cb60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb62:	bf00      	nop
 800cb64:	3714      	adds	r7, #20
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr
 800cb6e:	bf00      	nop
 800cb70:	20004f3c 	.word	0x20004f3c
 800cb74:	20004f44 	.word	0x20004f44

0800cb78 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800cb7e:	2300      	movs	r3, #0
 800cb80:	71fb      	strb	r3, [r7, #7]
 800cb82:	e026      	b.n	800cbd2 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800cb84:	79fb      	ldrb	r3, [r7, #7]
 800cb86:	3b50      	subs	r3, #80	@ 0x50
 800cb88:	b2db      	uxtb	r3, r3
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f000 f82b 	bl	800cbe8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800cb92:	2100      	movs	r1, #0
 800cb94:	2000      	movs	r0, #0
 800cb96:	f000 f827 	bl	800cbe8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800cb9a:	2100      	movs	r1, #0
 800cb9c:	2010      	movs	r0, #16
 800cb9e:	f000 f823 	bl	800cbe8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800cba2:	2300      	movs	r3, #0
 800cba4:	71bb      	strb	r3, [r7, #6]
 800cba6:	e00d      	b.n	800cbc4 <OLED_Refresh_Gram+0x4c>
 800cba8:	79ba      	ldrb	r2, [r7, #6]
 800cbaa:	79fb      	ldrb	r3, [r7, #7]
 800cbac:	490d      	ldr	r1, [pc, #52]	@ (800cbe4 <OLED_Refresh_Gram+0x6c>)
 800cbae:	00d2      	lsls	r2, r2, #3
 800cbb0:	440a      	add	r2, r1
 800cbb2:	4413      	add	r3, r2
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	2101      	movs	r1, #1
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f000 f815 	bl	800cbe8 <OLED_WR_Byte>
 800cbbe:	79bb      	ldrb	r3, [r7, #6]
 800cbc0:	3301      	adds	r3, #1
 800cbc2:	71bb      	strb	r3, [r7, #6]
 800cbc4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	daed      	bge.n	800cba8 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800cbcc:	79fb      	ldrb	r3, [r7, #7]
 800cbce:	3301      	adds	r3, #1
 800cbd0:	71fb      	strb	r3, [r7, #7]
 800cbd2:	79fb      	ldrb	r3, [r7, #7]
 800cbd4:	2b07      	cmp	r3, #7
 800cbd6:	d9d5      	bls.n	800cb84 <OLED_Refresh_Gram+0xc>
	}   
}
 800cbd8:	bf00      	nop
 800cbda:	bf00      	nop
 800cbdc:	3708      	adds	r7, #8
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop
 800cbe4:	20004f5c 	.word	0x20004f5c

0800cbe8 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	4603      	mov	r3, r0
 800cbf0:	460a      	mov	r2, r1
 800cbf2:	71fb      	strb	r3, [r7, #7]
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800cbf8:	79bb      	ldrb	r3, [r7, #6]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d006      	beq.n	800cc0c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800cbfe:	2201      	movs	r2, #1
 800cc00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cc04:	481c      	ldr	r0, [pc, #112]	@ (800cc78 <OLED_WR_Byte+0x90>)
 800cc06:	f7f8 fb1b 	bl	8005240 <HAL_GPIO_WritePin>
 800cc0a:	e005      	b.n	800cc18 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cc12:	4819      	ldr	r0, [pc, #100]	@ (800cc78 <OLED_WR_Byte+0x90>)
 800cc14:	f7f8 fb14 	bl	8005240 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800cc18:	2300      	movs	r3, #0
 800cc1a:	73fb      	strb	r3, [r7, #15]
 800cc1c:	e01e      	b.n	800cc5c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800cc1e:	2200      	movs	r2, #0
 800cc20:	2120      	movs	r1, #32
 800cc22:	4815      	ldr	r0, [pc, #84]	@ (800cc78 <OLED_WR_Byte+0x90>)
 800cc24:	f7f8 fb0c 	bl	8005240 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800cc28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	da05      	bge.n	800cc3c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800cc30:	2201      	movs	r2, #1
 800cc32:	2140      	movs	r1, #64	@ 0x40
 800cc34:	4810      	ldr	r0, [pc, #64]	@ (800cc78 <OLED_WR_Byte+0x90>)
 800cc36:	f7f8 fb03 	bl	8005240 <HAL_GPIO_WritePin>
 800cc3a:	e004      	b.n	800cc46 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	2140      	movs	r1, #64	@ 0x40
 800cc40:	480d      	ldr	r0, [pc, #52]	@ (800cc78 <OLED_WR_Byte+0x90>)
 800cc42:	f7f8 fafd 	bl	8005240 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800cc46:	2201      	movs	r2, #1
 800cc48:	2120      	movs	r1, #32
 800cc4a:	480b      	ldr	r0, [pc, #44]	@ (800cc78 <OLED_WR_Byte+0x90>)
 800cc4c:	f7f8 faf8 	bl	8005240 <HAL_GPIO_WritePin>
		dat<<=1;   
 800cc50:	79fb      	ldrb	r3, [r7, #7]
 800cc52:	005b      	lsls	r3, r3, #1
 800cc54:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800cc56:	7bfb      	ldrb	r3, [r7, #15]
 800cc58:	3301      	adds	r3, #1
 800cc5a:	73fb      	strb	r3, [r7, #15]
 800cc5c:	7bfb      	ldrb	r3, [r7, #15]
 800cc5e:	2b07      	cmp	r3, #7
 800cc60:	d9dd      	bls.n	800cc1e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800cc62:	2201      	movs	r2, #1
 800cc64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cc68:	4803      	ldr	r0, [pc, #12]	@ (800cc78 <OLED_WR_Byte+0x90>)
 800cc6a:	f7f8 fae9 	bl	8005240 <HAL_GPIO_WritePin>
} 
 800cc6e:	bf00      	nop
 800cc70:	3710      	adds	r7, #16
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop
 800cc78:	40021000 	.word	0x40021000

0800cc7c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800cc82:	2300      	movs	r3, #0
 800cc84:	71fb      	strb	r3, [r7, #7]
 800cc86:	e014      	b.n	800ccb2 <OLED_Clear+0x36>
 800cc88:	2300      	movs	r3, #0
 800cc8a:	71bb      	strb	r3, [r7, #6]
 800cc8c:	e00a      	b.n	800cca4 <OLED_Clear+0x28>
 800cc8e:	79ba      	ldrb	r2, [r7, #6]
 800cc90:	79fb      	ldrb	r3, [r7, #7]
 800cc92:	490c      	ldr	r1, [pc, #48]	@ (800ccc4 <OLED_Clear+0x48>)
 800cc94:	00d2      	lsls	r2, r2, #3
 800cc96:	440a      	add	r2, r1
 800cc98:	4413      	add	r3, r2
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	701a      	strb	r2, [r3, #0]
 800cc9e:	79bb      	ldrb	r3, [r7, #6]
 800cca0:	3301      	adds	r3, #1
 800cca2:	71bb      	strb	r3, [r7, #6]
 800cca4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	daf0      	bge.n	800cc8e <OLED_Clear+0x12>
 800ccac:	79fb      	ldrb	r3, [r7, #7]
 800ccae:	3301      	adds	r3, #1
 800ccb0:	71fb      	strb	r3, [r7, #7]
 800ccb2:	79fb      	ldrb	r3, [r7, #7]
 800ccb4:	2b07      	cmp	r3, #7
 800ccb6:	d9e7      	bls.n	800cc88 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800ccb8:	f7ff ff5e 	bl	800cb78 <OLED_Refresh_Gram>
}
 800ccbc:	bf00      	nop
 800ccbe:	3708      	adds	r7, #8
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}
 800ccc4:	20004f5c 	.word	0x20004f5c

0800ccc8 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b085      	sub	sp, #20
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	4603      	mov	r3, r0
 800ccd0:	71fb      	strb	r3, [r7, #7]
 800ccd2:	460b      	mov	r3, r1
 800ccd4:	71bb      	strb	r3, [r7, #6]
 800ccd6:	4613      	mov	r3, r2
 800ccd8:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800ccde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	db41      	blt.n	800cd6a <OLED_DrawPoint+0xa2>
 800cce6:	79bb      	ldrb	r3, [r7, #6]
 800cce8:	2b3f      	cmp	r3, #63	@ 0x3f
 800ccea:	d83e      	bhi.n	800cd6a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800ccec:	79bb      	ldrb	r3, [r7, #6]
 800ccee:	08db      	lsrs	r3, r3, #3
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	f1c3 0307 	rsb	r3, r3, #7
 800ccf6:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800ccf8:	79bb      	ldrb	r3, [r7, #6]
 800ccfa:	f003 0307 	and.w	r3, r3, #7
 800ccfe:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800cd00:	7b7b      	ldrb	r3, [r7, #13]
 800cd02:	f1c3 0307 	rsb	r3, r3, #7
 800cd06:	2201      	movs	r2, #1
 800cd08:	fa02 f303 	lsl.w	r3, r2, r3
 800cd0c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800cd0e:	797b      	ldrb	r3, [r7, #5]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d012      	beq.n	800cd3a <OLED_DrawPoint+0x72>
 800cd14:	79fa      	ldrb	r2, [r7, #7]
 800cd16:	7bbb      	ldrb	r3, [r7, #14]
 800cd18:	4917      	ldr	r1, [pc, #92]	@ (800cd78 <OLED_DrawPoint+0xb0>)
 800cd1a:	00d2      	lsls	r2, r2, #3
 800cd1c:	440a      	add	r2, r1
 800cd1e:	4413      	add	r3, r2
 800cd20:	7818      	ldrb	r0, [r3, #0]
 800cd22:	79fa      	ldrb	r2, [r7, #7]
 800cd24:	7bbb      	ldrb	r3, [r7, #14]
 800cd26:	7bf9      	ldrb	r1, [r7, #15]
 800cd28:	4301      	orrs	r1, r0
 800cd2a:	b2c8      	uxtb	r0, r1
 800cd2c:	4912      	ldr	r1, [pc, #72]	@ (800cd78 <OLED_DrawPoint+0xb0>)
 800cd2e:	00d2      	lsls	r2, r2, #3
 800cd30:	440a      	add	r2, r1
 800cd32:	4413      	add	r3, r2
 800cd34:	4602      	mov	r2, r0
 800cd36:	701a      	strb	r2, [r3, #0]
 800cd38:	e018      	b.n	800cd6c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800cd3a:	79fa      	ldrb	r2, [r7, #7]
 800cd3c:	7bbb      	ldrb	r3, [r7, #14]
 800cd3e:	490e      	ldr	r1, [pc, #56]	@ (800cd78 <OLED_DrawPoint+0xb0>)
 800cd40:	00d2      	lsls	r2, r2, #3
 800cd42:	440a      	add	r2, r1
 800cd44:	4413      	add	r3, r2
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	b25a      	sxtb	r2, r3
 800cd4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd4e:	43db      	mvns	r3, r3
 800cd50:	b25b      	sxtb	r3, r3
 800cd52:	4013      	ands	r3, r2
 800cd54:	b259      	sxtb	r1, r3
 800cd56:	79fa      	ldrb	r2, [r7, #7]
 800cd58:	7bbb      	ldrb	r3, [r7, #14]
 800cd5a:	b2c8      	uxtb	r0, r1
 800cd5c:	4906      	ldr	r1, [pc, #24]	@ (800cd78 <OLED_DrawPoint+0xb0>)
 800cd5e:	00d2      	lsls	r2, r2, #3
 800cd60:	440a      	add	r2, r1
 800cd62:	4413      	add	r3, r2
 800cd64:	4602      	mov	r2, r0
 800cd66:	701a      	strb	r2, [r3, #0]
 800cd68:	e000      	b.n	800cd6c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800cd6a:	bf00      	nop
}
 800cd6c:	3714      	adds	r7, #20
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr
 800cd76:	bf00      	nop
 800cd78:	20004f5c 	.word	0x20004f5c

0800cd7c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800cd7c:	b590      	push	{r4, r7, lr}
 800cd7e:	b085      	sub	sp, #20
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	4604      	mov	r4, r0
 800cd84:	4608      	mov	r0, r1
 800cd86:	4611      	mov	r1, r2
 800cd88:	461a      	mov	r2, r3
 800cd8a:	4623      	mov	r3, r4
 800cd8c:	71fb      	strb	r3, [r7, #7]
 800cd8e:	4603      	mov	r3, r0
 800cd90:	71bb      	strb	r3, [r7, #6]
 800cd92:	460b      	mov	r3, r1
 800cd94:	717b      	strb	r3, [r7, #5]
 800cd96:	4613      	mov	r3, r2
 800cd98:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800cd9a:	79bb      	ldrb	r3, [r7, #6]
 800cd9c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800cd9e:	797b      	ldrb	r3, [r7, #5]
 800cda0:	3b20      	subs	r3, #32
 800cda2:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800cda4:	2300      	movs	r3, #0
 800cda6:	73bb      	strb	r3, [r7, #14]
 800cda8:	e04d      	b.n	800ce46 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800cdaa:	793b      	ldrb	r3, [r7, #4]
 800cdac:	2b0c      	cmp	r3, #12
 800cdae:	d10b      	bne.n	800cdc8 <OLED_ShowChar+0x4c>
 800cdb0:	797a      	ldrb	r2, [r7, #5]
 800cdb2:	7bb9      	ldrb	r1, [r7, #14]
 800cdb4:	4828      	ldr	r0, [pc, #160]	@ (800ce58 <OLED_ShowChar+0xdc>)
 800cdb6:	4613      	mov	r3, r2
 800cdb8:	005b      	lsls	r3, r3, #1
 800cdba:	4413      	add	r3, r2
 800cdbc:	009b      	lsls	r3, r3, #2
 800cdbe:	4403      	add	r3, r0
 800cdc0:	440b      	add	r3, r1
 800cdc2:	781b      	ldrb	r3, [r3, #0]
 800cdc4:	73fb      	strb	r3, [r7, #15]
 800cdc6:	e007      	b.n	800cdd8 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800cdc8:	797a      	ldrb	r2, [r7, #5]
 800cdca:	7bbb      	ldrb	r3, [r7, #14]
 800cdcc:	4923      	ldr	r1, [pc, #140]	@ (800ce5c <OLED_ShowChar+0xe0>)
 800cdce:	0112      	lsls	r2, r2, #4
 800cdd0:	440a      	add	r2, r1
 800cdd2:	4413      	add	r3, r2
 800cdd4:	781b      	ldrb	r3, [r3, #0]
 800cdd6:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800cdd8:	2300      	movs	r3, #0
 800cdda:	737b      	strb	r3, [r7, #13]
 800cddc:	e02d      	b.n	800ce3a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800cdde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	da07      	bge.n	800cdf6 <OLED_ShowChar+0x7a>
 800cde6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800cdea:	79b9      	ldrb	r1, [r7, #6]
 800cdec:	79fb      	ldrb	r3, [r7, #7]
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7ff ff6a 	bl	800ccc8 <OLED_DrawPoint>
 800cdf4:	e00c      	b.n	800ce10 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800cdf6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	bf0c      	ite	eq
 800cdfe:	2301      	moveq	r3, #1
 800ce00:	2300      	movne	r3, #0
 800ce02:	b2db      	uxtb	r3, r3
 800ce04:	461a      	mov	r2, r3
 800ce06:	79b9      	ldrb	r1, [r7, #6]
 800ce08:	79fb      	ldrb	r3, [r7, #7]
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7ff ff5c 	bl	800ccc8 <OLED_DrawPoint>
			temp<<=1;
 800ce10:	7bfb      	ldrb	r3, [r7, #15]
 800ce12:	005b      	lsls	r3, r3, #1
 800ce14:	73fb      	strb	r3, [r7, #15]
			y++;
 800ce16:	79bb      	ldrb	r3, [r7, #6]
 800ce18:	3301      	adds	r3, #1
 800ce1a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800ce1c:	79ba      	ldrb	r2, [r7, #6]
 800ce1e:	7b3b      	ldrb	r3, [r7, #12]
 800ce20:	1ad2      	subs	r2, r2, r3
 800ce22:	793b      	ldrb	r3, [r7, #4]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d105      	bne.n	800ce34 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800ce28:	7b3b      	ldrb	r3, [r7, #12]
 800ce2a:	71bb      	strb	r3, [r7, #6]
				x++;
 800ce2c:	79fb      	ldrb	r3, [r7, #7]
 800ce2e:	3301      	adds	r3, #1
 800ce30:	71fb      	strb	r3, [r7, #7]
				break;
 800ce32:	e005      	b.n	800ce40 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800ce34:	7b7b      	ldrb	r3, [r7, #13]
 800ce36:	3301      	adds	r3, #1
 800ce38:	737b      	strb	r3, [r7, #13]
 800ce3a:	7b7b      	ldrb	r3, [r7, #13]
 800ce3c:	2b07      	cmp	r3, #7
 800ce3e:	d9ce      	bls.n	800cdde <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800ce40:	7bbb      	ldrb	r3, [r7, #14]
 800ce42:	3301      	adds	r3, #1
 800ce44:	73bb      	strb	r3, [r7, #14]
 800ce46:	7bba      	ldrb	r2, [r7, #14]
 800ce48:	793b      	ldrb	r3, [r7, #4]
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d3ad      	bcc.n	800cdaa <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800ce4e:	bf00      	nop
 800ce50:	bf00      	nop
 800ce52:	3714      	adds	r7, #20
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd90      	pop	{r4, r7, pc}
 800ce58:	0801053c 	.word	0x0801053c
 800ce5c:	080109b0 	.word	0x080109b0

0800ce60 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b084      	sub	sp, #16
 800ce64:	af02      	add	r7, sp, #8
 800ce66:	4603      	mov	r3, r0
 800ce68:	603a      	str	r2, [r7, #0]
 800ce6a:	71fb      	strb	r3, [r7, #7]
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800ce70:	e01f      	b.n	800ceb2 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800ce72:	79fb      	ldrb	r3, [r7, #7]
 800ce74:	2b7a      	cmp	r3, #122	@ 0x7a
 800ce76:	d904      	bls.n	800ce82 <OLED_ShowString+0x22>
 800ce78:	2300      	movs	r3, #0
 800ce7a:	71fb      	strb	r3, [r7, #7]
 800ce7c:	79bb      	ldrb	r3, [r7, #6]
 800ce7e:	3310      	adds	r3, #16
 800ce80:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800ce82:	79bb      	ldrb	r3, [r7, #6]
 800ce84:	2b3a      	cmp	r3, #58	@ 0x3a
 800ce86:	d905      	bls.n	800ce94 <OLED_ShowString+0x34>
 800ce88:	2300      	movs	r3, #0
 800ce8a:	71fb      	strb	r3, [r7, #7]
 800ce8c:	79fb      	ldrb	r3, [r7, #7]
 800ce8e:	71bb      	strb	r3, [r7, #6]
 800ce90:	f7ff fef4 	bl	800cc7c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	781a      	ldrb	r2, [r3, #0]
 800ce98:	79b9      	ldrb	r1, [r7, #6]
 800ce9a:	79f8      	ldrb	r0, [r7, #7]
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	9300      	str	r3, [sp, #0]
 800cea0:	230c      	movs	r3, #12
 800cea2:	f7ff ff6b 	bl	800cd7c <OLED_ShowChar>
        x+=8;
 800cea6:	79fb      	ldrb	r3, [r7, #7]
 800cea8:	3308      	adds	r3, #8
 800ceaa:	71fb      	strb	r3, [r7, #7]
        p++;
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	3301      	adds	r3, #1
 800ceb0:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d1db      	bne.n	800ce72 <OLED_ShowString+0x12>
    }  
}	 
 800ceba:	bf00      	nop
 800cebc:	bf00      	nop
 800cebe:	3708      	adds	r7, #8
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <OLED_Init>:

void OLED_Init(void)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800cec8:	f7f9 fa12 	bl	80062f0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800cecc:	4b41      	ldr	r3, [pc, #260]	@ (800cfd4 <OLED_Init+0x110>)
 800cece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ced0:	4a40      	ldr	r2, [pc, #256]	@ (800cfd4 <OLED_Init+0x110>)
 800ced2:	f023 0301 	bic.w	r3, r3, #1
 800ced6:	6713      	str	r3, [r2, #112]	@ 0x70
 800ced8:	4b3e      	ldr	r3, [pc, #248]	@ (800cfd4 <OLED_Init+0x110>)
 800ceda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cedc:	4a3d      	ldr	r2, [pc, #244]	@ (800cfd4 <OLED_Init+0x110>)
 800cede:	f023 0304 	bic.w	r3, r3, #4
 800cee2:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800cee4:	f7f9 fa18 	bl	8006318 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800cee8:	2200      	movs	r2, #0
 800ceea:	2180      	movs	r1, #128	@ 0x80
 800ceec:	483a      	ldr	r0, [pc, #232]	@ (800cfd8 <OLED_Init+0x114>)
 800ceee:	f7f8 f9a7 	bl	8005240 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800cef2:	2064      	movs	r0, #100	@ 0x64
 800cef4:	f7f7 fa28 	bl	8004348 <HAL_Delay>
	OLED_RST_Set();
 800cef8:	2201      	movs	r2, #1
 800cefa:	2180      	movs	r1, #128	@ 0x80
 800cefc:	4836      	ldr	r0, [pc, #216]	@ (800cfd8 <OLED_Init+0x114>)
 800cefe:	f7f8 f99f 	bl	8005240 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800cf02:	2100      	movs	r1, #0
 800cf04:	20ae      	movs	r0, #174	@ 0xae
 800cf06:	f7ff fe6f 	bl	800cbe8 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800cf0a:	2100      	movs	r1, #0
 800cf0c:	20d5      	movs	r0, #213	@ 0xd5
 800cf0e:	f7ff fe6b 	bl	800cbe8 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800cf12:	2100      	movs	r1, #0
 800cf14:	2050      	movs	r0, #80	@ 0x50
 800cf16:	f7ff fe67 	bl	800cbe8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800cf1a:	2100      	movs	r1, #0
 800cf1c:	20a8      	movs	r0, #168	@ 0xa8
 800cf1e:	f7ff fe63 	bl	800cbe8 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800cf22:	2100      	movs	r1, #0
 800cf24:	203f      	movs	r0, #63	@ 0x3f
 800cf26:	f7ff fe5f 	bl	800cbe8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800cf2a:	2100      	movs	r1, #0
 800cf2c:	20d3      	movs	r0, #211	@ 0xd3
 800cf2e:	f7ff fe5b 	bl	800cbe8 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800cf32:	2100      	movs	r1, #0
 800cf34:	2000      	movs	r0, #0
 800cf36:	f7ff fe57 	bl	800cbe8 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800cf3a:	2100      	movs	r1, #0
 800cf3c:	2040      	movs	r0, #64	@ 0x40
 800cf3e:	f7ff fe53 	bl	800cbe8 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800cf42:	2100      	movs	r1, #0
 800cf44:	208d      	movs	r0, #141	@ 0x8d
 800cf46:	f7ff fe4f 	bl	800cbe8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800cf4a:	2100      	movs	r1, #0
 800cf4c:	2014      	movs	r0, #20
 800cf4e:	f7ff fe4b 	bl	800cbe8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800cf52:	2100      	movs	r1, #0
 800cf54:	2020      	movs	r0, #32
 800cf56:	f7ff fe47 	bl	800cbe8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800cf5a:	2100      	movs	r1, #0
 800cf5c:	2002      	movs	r0, #2
 800cf5e:	f7ff fe43 	bl	800cbe8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800cf62:	2100      	movs	r1, #0
 800cf64:	20a1      	movs	r0, #161	@ 0xa1
 800cf66:	f7ff fe3f 	bl	800cbe8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800cf6a:	2100      	movs	r1, #0
 800cf6c:	20c0      	movs	r0, #192	@ 0xc0
 800cf6e:	f7ff fe3b 	bl	800cbe8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800cf72:	2100      	movs	r1, #0
 800cf74:	20da      	movs	r0, #218	@ 0xda
 800cf76:	f7ff fe37 	bl	800cbe8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800cf7a:	2100      	movs	r1, #0
 800cf7c:	2012      	movs	r0, #18
 800cf7e:	f7ff fe33 	bl	800cbe8 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800cf82:	2100      	movs	r1, #0
 800cf84:	2081      	movs	r0, #129	@ 0x81
 800cf86:	f7ff fe2f 	bl	800cbe8 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800cf8a:	2100      	movs	r1, #0
 800cf8c:	20ef      	movs	r0, #239	@ 0xef
 800cf8e:	f7ff fe2b 	bl	800cbe8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800cf92:	2100      	movs	r1, #0
 800cf94:	20d9      	movs	r0, #217	@ 0xd9
 800cf96:	f7ff fe27 	bl	800cbe8 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800cf9a:	2100      	movs	r1, #0
 800cf9c:	20f1      	movs	r0, #241	@ 0xf1
 800cf9e:	f7ff fe23 	bl	800cbe8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800cfa2:	2100      	movs	r1, #0
 800cfa4:	20db      	movs	r0, #219	@ 0xdb
 800cfa6:	f7ff fe1f 	bl	800cbe8 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800cfaa:	2100      	movs	r1, #0
 800cfac:	2030      	movs	r0, #48	@ 0x30
 800cfae:	f7ff fe1b 	bl	800cbe8 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800cfb2:	2100      	movs	r1, #0
 800cfb4:	20a4      	movs	r0, #164	@ 0xa4
 800cfb6:	f7ff fe17 	bl	800cbe8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800cfba:	2100      	movs	r1, #0
 800cfbc:	20a6      	movs	r0, #166	@ 0xa6
 800cfbe:	f7ff fe13 	bl	800cbe8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800cfc2:	2100      	movs	r1, #0
 800cfc4:	20af      	movs	r0, #175	@ 0xaf
 800cfc6:	f7ff fe0f 	bl	800cbe8 <OLED_WR_Byte>
	OLED_Clear(); 
 800cfca:	f7ff fe57 	bl	800cc7c <OLED_Clear>
 800cfce:	bf00      	nop
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	40023800 	.word	0x40023800
 800cfd8:	40021000 	.word	0x40021000

0800cfdc <atoi>:
 800cfdc:	220a      	movs	r2, #10
 800cfde:	2100      	movs	r1, #0
 800cfe0:	f000 b87a 	b.w	800d0d8 <strtol>

0800cfe4 <_strtol_l.constprop.0>:
 800cfe4:	2b24      	cmp	r3, #36	@ 0x24
 800cfe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfea:	4686      	mov	lr, r0
 800cfec:	4690      	mov	r8, r2
 800cfee:	d801      	bhi.n	800cff4 <_strtol_l.constprop.0+0x10>
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	d106      	bne.n	800d002 <_strtol_l.constprop.0+0x1e>
 800cff4:	f000 fe82 	bl	800dcfc <__errno>
 800cff8:	2316      	movs	r3, #22
 800cffa:	6003      	str	r3, [r0, #0]
 800cffc:	2000      	movs	r0, #0
 800cffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d002:	4834      	ldr	r0, [pc, #208]	@ (800d0d4 <_strtol_l.constprop.0+0xf0>)
 800d004:	460d      	mov	r5, r1
 800d006:	462a      	mov	r2, r5
 800d008:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d00c:	5d06      	ldrb	r6, [r0, r4]
 800d00e:	f016 0608 	ands.w	r6, r6, #8
 800d012:	d1f8      	bne.n	800d006 <_strtol_l.constprop.0+0x22>
 800d014:	2c2d      	cmp	r4, #45	@ 0x2d
 800d016:	d12d      	bne.n	800d074 <_strtol_l.constprop.0+0x90>
 800d018:	782c      	ldrb	r4, [r5, #0]
 800d01a:	2601      	movs	r6, #1
 800d01c:	1c95      	adds	r5, r2, #2
 800d01e:	f033 0210 	bics.w	r2, r3, #16
 800d022:	d109      	bne.n	800d038 <_strtol_l.constprop.0+0x54>
 800d024:	2c30      	cmp	r4, #48	@ 0x30
 800d026:	d12a      	bne.n	800d07e <_strtol_l.constprop.0+0x9a>
 800d028:	782a      	ldrb	r2, [r5, #0]
 800d02a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d02e:	2a58      	cmp	r2, #88	@ 0x58
 800d030:	d125      	bne.n	800d07e <_strtol_l.constprop.0+0x9a>
 800d032:	786c      	ldrb	r4, [r5, #1]
 800d034:	2310      	movs	r3, #16
 800d036:	3502      	adds	r5, #2
 800d038:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d03c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d040:	2200      	movs	r2, #0
 800d042:	fbbc f9f3 	udiv	r9, ip, r3
 800d046:	4610      	mov	r0, r2
 800d048:	fb03 ca19 	mls	sl, r3, r9, ip
 800d04c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d050:	2f09      	cmp	r7, #9
 800d052:	d81b      	bhi.n	800d08c <_strtol_l.constprop.0+0xa8>
 800d054:	463c      	mov	r4, r7
 800d056:	42a3      	cmp	r3, r4
 800d058:	dd27      	ble.n	800d0aa <_strtol_l.constprop.0+0xc6>
 800d05a:	1c57      	adds	r7, r2, #1
 800d05c:	d007      	beq.n	800d06e <_strtol_l.constprop.0+0x8a>
 800d05e:	4581      	cmp	r9, r0
 800d060:	d320      	bcc.n	800d0a4 <_strtol_l.constprop.0+0xc0>
 800d062:	d101      	bne.n	800d068 <_strtol_l.constprop.0+0x84>
 800d064:	45a2      	cmp	sl, r4
 800d066:	db1d      	blt.n	800d0a4 <_strtol_l.constprop.0+0xc0>
 800d068:	fb00 4003 	mla	r0, r0, r3, r4
 800d06c:	2201      	movs	r2, #1
 800d06e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d072:	e7eb      	b.n	800d04c <_strtol_l.constprop.0+0x68>
 800d074:	2c2b      	cmp	r4, #43	@ 0x2b
 800d076:	bf04      	itt	eq
 800d078:	782c      	ldrbeq	r4, [r5, #0]
 800d07a:	1c95      	addeq	r5, r2, #2
 800d07c:	e7cf      	b.n	800d01e <_strtol_l.constprop.0+0x3a>
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d1da      	bne.n	800d038 <_strtol_l.constprop.0+0x54>
 800d082:	2c30      	cmp	r4, #48	@ 0x30
 800d084:	bf0c      	ite	eq
 800d086:	2308      	moveq	r3, #8
 800d088:	230a      	movne	r3, #10
 800d08a:	e7d5      	b.n	800d038 <_strtol_l.constprop.0+0x54>
 800d08c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d090:	2f19      	cmp	r7, #25
 800d092:	d801      	bhi.n	800d098 <_strtol_l.constprop.0+0xb4>
 800d094:	3c37      	subs	r4, #55	@ 0x37
 800d096:	e7de      	b.n	800d056 <_strtol_l.constprop.0+0x72>
 800d098:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d09c:	2f19      	cmp	r7, #25
 800d09e:	d804      	bhi.n	800d0aa <_strtol_l.constprop.0+0xc6>
 800d0a0:	3c57      	subs	r4, #87	@ 0x57
 800d0a2:	e7d8      	b.n	800d056 <_strtol_l.constprop.0+0x72>
 800d0a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d0a8:	e7e1      	b.n	800d06e <_strtol_l.constprop.0+0x8a>
 800d0aa:	1c53      	adds	r3, r2, #1
 800d0ac:	d108      	bne.n	800d0c0 <_strtol_l.constprop.0+0xdc>
 800d0ae:	2322      	movs	r3, #34	@ 0x22
 800d0b0:	f8ce 3000 	str.w	r3, [lr]
 800d0b4:	4660      	mov	r0, ip
 800d0b6:	f1b8 0f00 	cmp.w	r8, #0
 800d0ba:	d0a0      	beq.n	800cffe <_strtol_l.constprop.0+0x1a>
 800d0bc:	1e69      	subs	r1, r5, #1
 800d0be:	e006      	b.n	800d0ce <_strtol_l.constprop.0+0xea>
 800d0c0:	b106      	cbz	r6, 800d0c4 <_strtol_l.constprop.0+0xe0>
 800d0c2:	4240      	negs	r0, r0
 800d0c4:	f1b8 0f00 	cmp.w	r8, #0
 800d0c8:	d099      	beq.n	800cffe <_strtol_l.constprop.0+0x1a>
 800d0ca:	2a00      	cmp	r2, #0
 800d0cc:	d1f6      	bne.n	800d0bc <_strtol_l.constprop.0+0xd8>
 800d0ce:	f8c8 1000 	str.w	r1, [r8]
 800d0d2:	e794      	b.n	800cffe <_strtol_l.constprop.0+0x1a>
 800d0d4:	08010fa1 	.word	0x08010fa1

0800d0d8 <strtol>:
 800d0d8:	4613      	mov	r3, r2
 800d0da:	460a      	mov	r2, r1
 800d0dc:	4601      	mov	r1, r0
 800d0de:	4802      	ldr	r0, [pc, #8]	@ (800d0e8 <strtol+0x10>)
 800d0e0:	6800      	ldr	r0, [r0, #0]
 800d0e2:	f7ff bf7f 	b.w	800cfe4 <_strtol_l.constprop.0>
 800d0e6:	bf00      	nop
 800d0e8:	2000003c 	.word	0x2000003c

0800d0ec <__cvt>:
 800d0ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0f0:	ec57 6b10 	vmov	r6, r7, d0
 800d0f4:	2f00      	cmp	r7, #0
 800d0f6:	460c      	mov	r4, r1
 800d0f8:	4619      	mov	r1, r3
 800d0fa:	463b      	mov	r3, r7
 800d0fc:	bfbb      	ittet	lt
 800d0fe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d102:	461f      	movlt	r7, r3
 800d104:	2300      	movge	r3, #0
 800d106:	232d      	movlt	r3, #45	@ 0x2d
 800d108:	700b      	strb	r3, [r1, #0]
 800d10a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d10c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d110:	4691      	mov	r9, r2
 800d112:	f023 0820 	bic.w	r8, r3, #32
 800d116:	bfbc      	itt	lt
 800d118:	4632      	movlt	r2, r6
 800d11a:	4616      	movlt	r6, r2
 800d11c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d120:	d005      	beq.n	800d12e <__cvt+0x42>
 800d122:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d126:	d100      	bne.n	800d12a <__cvt+0x3e>
 800d128:	3401      	adds	r4, #1
 800d12a:	2102      	movs	r1, #2
 800d12c:	e000      	b.n	800d130 <__cvt+0x44>
 800d12e:	2103      	movs	r1, #3
 800d130:	ab03      	add	r3, sp, #12
 800d132:	9301      	str	r3, [sp, #4]
 800d134:	ab02      	add	r3, sp, #8
 800d136:	9300      	str	r3, [sp, #0]
 800d138:	ec47 6b10 	vmov	d0, r6, r7
 800d13c:	4653      	mov	r3, sl
 800d13e:	4622      	mov	r2, r4
 800d140:	f000 fea2 	bl	800de88 <_dtoa_r>
 800d144:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d148:	4605      	mov	r5, r0
 800d14a:	d119      	bne.n	800d180 <__cvt+0x94>
 800d14c:	f019 0f01 	tst.w	r9, #1
 800d150:	d00e      	beq.n	800d170 <__cvt+0x84>
 800d152:	eb00 0904 	add.w	r9, r0, r4
 800d156:	2200      	movs	r2, #0
 800d158:	2300      	movs	r3, #0
 800d15a:	4630      	mov	r0, r6
 800d15c:	4639      	mov	r1, r7
 800d15e:	f7f3 fcb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800d162:	b108      	cbz	r0, 800d168 <__cvt+0x7c>
 800d164:	f8cd 900c 	str.w	r9, [sp, #12]
 800d168:	2230      	movs	r2, #48	@ 0x30
 800d16a:	9b03      	ldr	r3, [sp, #12]
 800d16c:	454b      	cmp	r3, r9
 800d16e:	d31e      	bcc.n	800d1ae <__cvt+0xc2>
 800d170:	9b03      	ldr	r3, [sp, #12]
 800d172:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d174:	1b5b      	subs	r3, r3, r5
 800d176:	4628      	mov	r0, r5
 800d178:	6013      	str	r3, [r2, #0]
 800d17a:	b004      	add	sp, #16
 800d17c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d180:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d184:	eb00 0904 	add.w	r9, r0, r4
 800d188:	d1e5      	bne.n	800d156 <__cvt+0x6a>
 800d18a:	7803      	ldrb	r3, [r0, #0]
 800d18c:	2b30      	cmp	r3, #48	@ 0x30
 800d18e:	d10a      	bne.n	800d1a6 <__cvt+0xba>
 800d190:	2200      	movs	r2, #0
 800d192:	2300      	movs	r3, #0
 800d194:	4630      	mov	r0, r6
 800d196:	4639      	mov	r1, r7
 800d198:	f7f3 fc96 	bl	8000ac8 <__aeabi_dcmpeq>
 800d19c:	b918      	cbnz	r0, 800d1a6 <__cvt+0xba>
 800d19e:	f1c4 0401 	rsb	r4, r4, #1
 800d1a2:	f8ca 4000 	str.w	r4, [sl]
 800d1a6:	f8da 3000 	ldr.w	r3, [sl]
 800d1aa:	4499      	add	r9, r3
 800d1ac:	e7d3      	b.n	800d156 <__cvt+0x6a>
 800d1ae:	1c59      	adds	r1, r3, #1
 800d1b0:	9103      	str	r1, [sp, #12]
 800d1b2:	701a      	strb	r2, [r3, #0]
 800d1b4:	e7d9      	b.n	800d16a <__cvt+0x7e>

0800d1b6 <__exponent>:
 800d1b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1b8:	2900      	cmp	r1, #0
 800d1ba:	bfba      	itte	lt
 800d1bc:	4249      	neglt	r1, r1
 800d1be:	232d      	movlt	r3, #45	@ 0x2d
 800d1c0:	232b      	movge	r3, #43	@ 0x2b
 800d1c2:	2909      	cmp	r1, #9
 800d1c4:	7002      	strb	r2, [r0, #0]
 800d1c6:	7043      	strb	r3, [r0, #1]
 800d1c8:	dd29      	ble.n	800d21e <__exponent+0x68>
 800d1ca:	f10d 0307 	add.w	r3, sp, #7
 800d1ce:	461d      	mov	r5, r3
 800d1d0:	270a      	movs	r7, #10
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	fbb1 f6f7 	udiv	r6, r1, r7
 800d1d8:	fb07 1416 	mls	r4, r7, r6, r1
 800d1dc:	3430      	adds	r4, #48	@ 0x30
 800d1de:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d1e2:	460c      	mov	r4, r1
 800d1e4:	2c63      	cmp	r4, #99	@ 0x63
 800d1e6:	f103 33ff 	add.w	r3, r3, #4294967295
 800d1ea:	4631      	mov	r1, r6
 800d1ec:	dcf1      	bgt.n	800d1d2 <__exponent+0x1c>
 800d1ee:	3130      	adds	r1, #48	@ 0x30
 800d1f0:	1e94      	subs	r4, r2, #2
 800d1f2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d1f6:	1c41      	adds	r1, r0, #1
 800d1f8:	4623      	mov	r3, r4
 800d1fa:	42ab      	cmp	r3, r5
 800d1fc:	d30a      	bcc.n	800d214 <__exponent+0x5e>
 800d1fe:	f10d 0309 	add.w	r3, sp, #9
 800d202:	1a9b      	subs	r3, r3, r2
 800d204:	42ac      	cmp	r4, r5
 800d206:	bf88      	it	hi
 800d208:	2300      	movhi	r3, #0
 800d20a:	3302      	adds	r3, #2
 800d20c:	4403      	add	r3, r0
 800d20e:	1a18      	subs	r0, r3, r0
 800d210:	b003      	add	sp, #12
 800d212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d214:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d218:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d21c:	e7ed      	b.n	800d1fa <__exponent+0x44>
 800d21e:	2330      	movs	r3, #48	@ 0x30
 800d220:	3130      	adds	r1, #48	@ 0x30
 800d222:	7083      	strb	r3, [r0, #2]
 800d224:	70c1      	strb	r1, [r0, #3]
 800d226:	1d03      	adds	r3, r0, #4
 800d228:	e7f1      	b.n	800d20e <__exponent+0x58>
	...

0800d22c <_printf_float>:
 800d22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d230:	b08d      	sub	sp, #52	@ 0x34
 800d232:	460c      	mov	r4, r1
 800d234:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d238:	4616      	mov	r6, r2
 800d23a:	461f      	mov	r7, r3
 800d23c:	4605      	mov	r5, r0
 800d23e:	f000 fd13 	bl	800dc68 <_localeconv_r>
 800d242:	6803      	ldr	r3, [r0, #0]
 800d244:	9304      	str	r3, [sp, #16]
 800d246:	4618      	mov	r0, r3
 800d248:	f7f3 f812 	bl	8000270 <strlen>
 800d24c:	2300      	movs	r3, #0
 800d24e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d250:	f8d8 3000 	ldr.w	r3, [r8]
 800d254:	9005      	str	r0, [sp, #20]
 800d256:	3307      	adds	r3, #7
 800d258:	f023 0307 	bic.w	r3, r3, #7
 800d25c:	f103 0208 	add.w	r2, r3, #8
 800d260:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d264:	f8d4 b000 	ldr.w	fp, [r4]
 800d268:	f8c8 2000 	str.w	r2, [r8]
 800d26c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d270:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d274:	9307      	str	r3, [sp, #28]
 800d276:	f8cd 8018 	str.w	r8, [sp, #24]
 800d27a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d27e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d282:	4b9c      	ldr	r3, [pc, #624]	@ (800d4f4 <_printf_float+0x2c8>)
 800d284:	f04f 32ff 	mov.w	r2, #4294967295
 800d288:	f7f3 fc50 	bl	8000b2c <__aeabi_dcmpun>
 800d28c:	bb70      	cbnz	r0, 800d2ec <_printf_float+0xc0>
 800d28e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d292:	4b98      	ldr	r3, [pc, #608]	@ (800d4f4 <_printf_float+0x2c8>)
 800d294:	f04f 32ff 	mov.w	r2, #4294967295
 800d298:	f7f3 fc2a 	bl	8000af0 <__aeabi_dcmple>
 800d29c:	bb30      	cbnz	r0, 800d2ec <_printf_float+0xc0>
 800d29e:	2200      	movs	r2, #0
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	4640      	mov	r0, r8
 800d2a4:	4649      	mov	r1, r9
 800d2a6:	f7f3 fc19 	bl	8000adc <__aeabi_dcmplt>
 800d2aa:	b110      	cbz	r0, 800d2b2 <_printf_float+0x86>
 800d2ac:	232d      	movs	r3, #45	@ 0x2d
 800d2ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d2b2:	4a91      	ldr	r2, [pc, #580]	@ (800d4f8 <_printf_float+0x2cc>)
 800d2b4:	4b91      	ldr	r3, [pc, #580]	@ (800d4fc <_printf_float+0x2d0>)
 800d2b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d2ba:	bf94      	ite	ls
 800d2bc:	4690      	movls	r8, r2
 800d2be:	4698      	movhi	r8, r3
 800d2c0:	2303      	movs	r3, #3
 800d2c2:	6123      	str	r3, [r4, #16]
 800d2c4:	f02b 0304 	bic.w	r3, fp, #4
 800d2c8:	6023      	str	r3, [r4, #0]
 800d2ca:	f04f 0900 	mov.w	r9, #0
 800d2ce:	9700      	str	r7, [sp, #0]
 800d2d0:	4633      	mov	r3, r6
 800d2d2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d2d4:	4621      	mov	r1, r4
 800d2d6:	4628      	mov	r0, r5
 800d2d8:	f000 f9d2 	bl	800d680 <_printf_common>
 800d2dc:	3001      	adds	r0, #1
 800d2de:	f040 808d 	bne.w	800d3fc <_printf_float+0x1d0>
 800d2e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d2e6:	b00d      	add	sp, #52	@ 0x34
 800d2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ec:	4642      	mov	r2, r8
 800d2ee:	464b      	mov	r3, r9
 800d2f0:	4640      	mov	r0, r8
 800d2f2:	4649      	mov	r1, r9
 800d2f4:	f7f3 fc1a 	bl	8000b2c <__aeabi_dcmpun>
 800d2f8:	b140      	cbz	r0, 800d30c <_printf_float+0xe0>
 800d2fa:	464b      	mov	r3, r9
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	bfbc      	itt	lt
 800d300:	232d      	movlt	r3, #45	@ 0x2d
 800d302:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d306:	4a7e      	ldr	r2, [pc, #504]	@ (800d500 <_printf_float+0x2d4>)
 800d308:	4b7e      	ldr	r3, [pc, #504]	@ (800d504 <_printf_float+0x2d8>)
 800d30a:	e7d4      	b.n	800d2b6 <_printf_float+0x8a>
 800d30c:	6863      	ldr	r3, [r4, #4]
 800d30e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d312:	9206      	str	r2, [sp, #24]
 800d314:	1c5a      	adds	r2, r3, #1
 800d316:	d13b      	bne.n	800d390 <_printf_float+0x164>
 800d318:	2306      	movs	r3, #6
 800d31a:	6063      	str	r3, [r4, #4]
 800d31c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d320:	2300      	movs	r3, #0
 800d322:	6022      	str	r2, [r4, #0]
 800d324:	9303      	str	r3, [sp, #12]
 800d326:	ab0a      	add	r3, sp, #40	@ 0x28
 800d328:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d32c:	ab09      	add	r3, sp, #36	@ 0x24
 800d32e:	9300      	str	r3, [sp, #0]
 800d330:	6861      	ldr	r1, [r4, #4]
 800d332:	ec49 8b10 	vmov	d0, r8, r9
 800d336:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d33a:	4628      	mov	r0, r5
 800d33c:	f7ff fed6 	bl	800d0ec <__cvt>
 800d340:	9b06      	ldr	r3, [sp, #24]
 800d342:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d344:	2b47      	cmp	r3, #71	@ 0x47
 800d346:	4680      	mov	r8, r0
 800d348:	d129      	bne.n	800d39e <_printf_float+0x172>
 800d34a:	1cc8      	adds	r0, r1, #3
 800d34c:	db02      	blt.n	800d354 <_printf_float+0x128>
 800d34e:	6863      	ldr	r3, [r4, #4]
 800d350:	4299      	cmp	r1, r3
 800d352:	dd41      	ble.n	800d3d8 <_printf_float+0x1ac>
 800d354:	f1aa 0a02 	sub.w	sl, sl, #2
 800d358:	fa5f fa8a 	uxtb.w	sl, sl
 800d35c:	3901      	subs	r1, #1
 800d35e:	4652      	mov	r2, sl
 800d360:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d364:	9109      	str	r1, [sp, #36]	@ 0x24
 800d366:	f7ff ff26 	bl	800d1b6 <__exponent>
 800d36a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d36c:	1813      	adds	r3, r2, r0
 800d36e:	2a01      	cmp	r2, #1
 800d370:	4681      	mov	r9, r0
 800d372:	6123      	str	r3, [r4, #16]
 800d374:	dc02      	bgt.n	800d37c <_printf_float+0x150>
 800d376:	6822      	ldr	r2, [r4, #0]
 800d378:	07d2      	lsls	r2, r2, #31
 800d37a:	d501      	bpl.n	800d380 <_printf_float+0x154>
 800d37c:	3301      	adds	r3, #1
 800d37e:	6123      	str	r3, [r4, #16]
 800d380:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d384:	2b00      	cmp	r3, #0
 800d386:	d0a2      	beq.n	800d2ce <_printf_float+0xa2>
 800d388:	232d      	movs	r3, #45	@ 0x2d
 800d38a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d38e:	e79e      	b.n	800d2ce <_printf_float+0xa2>
 800d390:	9a06      	ldr	r2, [sp, #24]
 800d392:	2a47      	cmp	r2, #71	@ 0x47
 800d394:	d1c2      	bne.n	800d31c <_printf_float+0xf0>
 800d396:	2b00      	cmp	r3, #0
 800d398:	d1c0      	bne.n	800d31c <_printf_float+0xf0>
 800d39a:	2301      	movs	r3, #1
 800d39c:	e7bd      	b.n	800d31a <_printf_float+0xee>
 800d39e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d3a2:	d9db      	bls.n	800d35c <_printf_float+0x130>
 800d3a4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d3a8:	d118      	bne.n	800d3dc <_printf_float+0x1b0>
 800d3aa:	2900      	cmp	r1, #0
 800d3ac:	6863      	ldr	r3, [r4, #4]
 800d3ae:	dd0b      	ble.n	800d3c8 <_printf_float+0x19c>
 800d3b0:	6121      	str	r1, [r4, #16]
 800d3b2:	b913      	cbnz	r3, 800d3ba <_printf_float+0x18e>
 800d3b4:	6822      	ldr	r2, [r4, #0]
 800d3b6:	07d0      	lsls	r0, r2, #31
 800d3b8:	d502      	bpl.n	800d3c0 <_printf_float+0x194>
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	440b      	add	r3, r1
 800d3be:	6123      	str	r3, [r4, #16]
 800d3c0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d3c2:	f04f 0900 	mov.w	r9, #0
 800d3c6:	e7db      	b.n	800d380 <_printf_float+0x154>
 800d3c8:	b913      	cbnz	r3, 800d3d0 <_printf_float+0x1a4>
 800d3ca:	6822      	ldr	r2, [r4, #0]
 800d3cc:	07d2      	lsls	r2, r2, #31
 800d3ce:	d501      	bpl.n	800d3d4 <_printf_float+0x1a8>
 800d3d0:	3302      	adds	r3, #2
 800d3d2:	e7f4      	b.n	800d3be <_printf_float+0x192>
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	e7f2      	b.n	800d3be <_printf_float+0x192>
 800d3d8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d3dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d3de:	4299      	cmp	r1, r3
 800d3e0:	db05      	blt.n	800d3ee <_printf_float+0x1c2>
 800d3e2:	6823      	ldr	r3, [r4, #0]
 800d3e4:	6121      	str	r1, [r4, #16]
 800d3e6:	07d8      	lsls	r0, r3, #31
 800d3e8:	d5ea      	bpl.n	800d3c0 <_printf_float+0x194>
 800d3ea:	1c4b      	adds	r3, r1, #1
 800d3ec:	e7e7      	b.n	800d3be <_printf_float+0x192>
 800d3ee:	2900      	cmp	r1, #0
 800d3f0:	bfd4      	ite	le
 800d3f2:	f1c1 0202 	rsble	r2, r1, #2
 800d3f6:	2201      	movgt	r2, #1
 800d3f8:	4413      	add	r3, r2
 800d3fa:	e7e0      	b.n	800d3be <_printf_float+0x192>
 800d3fc:	6823      	ldr	r3, [r4, #0]
 800d3fe:	055a      	lsls	r2, r3, #21
 800d400:	d407      	bmi.n	800d412 <_printf_float+0x1e6>
 800d402:	6923      	ldr	r3, [r4, #16]
 800d404:	4642      	mov	r2, r8
 800d406:	4631      	mov	r1, r6
 800d408:	4628      	mov	r0, r5
 800d40a:	47b8      	blx	r7
 800d40c:	3001      	adds	r0, #1
 800d40e:	d12b      	bne.n	800d468 <_printf_float+0x23c>
 800d410:	e767      	b.n	800d2e2 <_printf_float+0xb6>
 800d412:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d416:	f240 80dd 	bls.w	800d5d4 <_printf_float+0x3a8>
 800d41a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d41e:	2200      	movs	r2, #0
 800d420:	2300      	movs	r3, #0
 800d422:	f7f3 fb51 	bl	8000ac8 <__aeabi_dcmpeq>
 800d426:	2800      	cmp	r0, #0
 800d428:	d033      	beq.n	800d492 <_printf_float+0x266>
 800d42a:	4a37      	ldr	r2, [pc, #220]	@ (800d508 <_printf_float+0x2dc>)
 800d42c:	2301      	movs	r3, #1
 800d42e:	4631      	mov	r1, r6
 800d430:	4628      	mov	r0, r5
 800d432:	47b8      	blx	r7
 800d434:	3001      	adds	r0, #1
 800d436:	f43f af54 	beq.w	800d2e2 <_printf_float+0xb6>
 800d43a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d43e:	4543      	cmp	r3, r8
 800d440:	db02      	blt.n	800d448 <_printf_float+0x21c>
 800d442:	6823      	ldr	r3, [r4, #0]
 800d444:	07d8      	lsls	r0, r3, #31
 800d446:	d50f      	bpl.n	800d468 <_printf_float+0x23c>
 800d448:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d44c:	4631      	mov	r1, r6
 800d44e:	4628      	mov	r0, r5
 800d450:	47b8      	blx	r7
 800d452:	3001      	adds	r0, #1
 800d454:	f43f af45 	beq.w	800d2e2 <_printf_float+0xb6>
 800d458:	f04f 0900 	mov.w	r9, #0
 800d45c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d460:	f104 0a1a 	add.w	sl, r4, #26
 800d464:	45c8      	cmp	r8, r9
 800d466:	dc09      	bgt.n	800d47c <_printf_float+0x250>
 800d468:	6823      	ldr	r3, [r4, #0]
 800d46a:	079b      	lsls	r3, r3, #30
 800d46c:	f100 8103 	bmi.w	800d676 <_printf_float+0x44a>
 800d470:	68e0      	ldr	r0, [r4, #12]
 800d472:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d474:	4298      	cmp	r0, r3
 800d476:	bfb8      	it	lt
 800d478:	4618      	movlt	r0, r3
 800d47a:	e734      	b.n	800d2e6 <_printf_float+0xba>
 800d47c:	2301      	movs	r3, #1
 800d47e:	4652      	mov	r2, sl
 800d480:	4631      	mov	r1, r6
 800d482:	4628      	mov	r0, r5
 800d484:	47b8      	blx	r7
 800d486:	3001      	adds	r0, #1
 800d488:	f43f af2b 	beq.w	800d2e2 <_printf_float+0xb6>
 800d48c:	f109 0901 	add.w	r9, r9, #1
 800d490:	e7e8      	b.n	800d464 <_printf_float+0x238>
 800d492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d494:	2b00      	cmp	r3, #0
 800d496:	dc39      	bgt.n	800d50c <_printf_float+0x2e0>
 800d498:	4a1b      	ldr	r2, [pc, #108]	@ (800d508 <_printf_float+0x2dc>)
 800d49a:	2301      	movs	r3, #1
 800d49c:	4631      	mov	r1, r6
 800d49e:	4628      	mov	r0, r5
 800d4a0:	47b8      	blx	r7
 800d4a2:	3001      	adds	r0, #1
 800d4a4:	f43f af1d 	beq.w	800d2e2 <_printf_float+0xb6>
 800d4a8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d4ac:	ea59 0303 	orrs.w	r3, r9, r3
 800d4b0:	d102      	bne.n	800d4b8 <_printf_float+0x28c>
 800d4b2:	6823      	ldr	r3, [r4, #0]
 800d4b4:	07d9      	lsls	r1, r3, #31
 800d4b6:	d5d7      	bpl.n	800d468 <_printf_float+0x23c>
 800d4b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4bc:	4631      	mov	r1, r6
 800d4be:	4628      	mov	r0, r5
 800d4c0:	47b8      	blx	r7
 800d4c2:	3001      	adds	r0, #1
 800d4c4:	f43f af0d 	beq.w	800d2e2 <_printf_float+0xb6>
 800d4c8:	f04f 0a00 	mov.w	sl, #0
 800d4cc:	f104 0b1a 	add.w	fp, r4, #26
 800d4d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4d2:	425b      	negs	r3, r3
 800d4d4:	4553      	cmp	r3, sl
 800d4d6:	dc01      	bgt.n	800d4dc <_printf_float+0x2b0>
 800d4d8:	464b      	mov	r3, r9
 800d4da:	e793      	b.n	800d404 <_printf_float+0x1d8>
 800d4dc:	2301      	movs	r3, #1
 800d4de:	465a      	mov	r2, fp
 800d4e0:	4631      	mov	r1, r6
 800d4e2:	4628      	mov	r0, r5
 800d4e4:	47b8      	blx	r7
 800d4e6:	3001      	adds	r0, #1
 800d4e8:	f43f aefb 	beq.w	800d2e2 <_printf_float+0xb6>
 800d4ec:	f10a 0a01 	add.w	sl, sl, #1
 800d4f0:	e7ee      	b.n	800d4d0 <_printf_float+0x2a4>
 800d4f2:	bf00      	nop
 800d4f4:	7fefffff 	.word	0x7fefffff
 800d4f8:	080110a1 	.word	0x080110a1
 800d4fc:	080110a5 	.word	0x080110a5
 800d500:	080110a9 	.word	0x080110a9
 800d504:	080110ad 	.word	0x080110ad
 800d508:	080110b1 	.word	0x080110b1
 800d50c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d50e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d512:	4553      	cmp	r3, sl
 800d514:	bfa8      	it	ge
 800d516:	4653      	movge	r3, sl
 800d518:	2b00      	cmp	r3, #0
 800d51a:	4699      	mov	r9, r3
 800d51c:	dc36      	bgt.n	800d58c <_printf_float+0x360>
 800d51e:	f04f 0b00 	mov.w	fp, #0
 800d522:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d526:	f104 021a 	add.w	r2, r4, #26
 800d52a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d52c:	9306      	str	r3, [sp, #24]
 800d52e:	eba3 0309 	sub.w	r3, r3, r9
 800d532:	455b      	cmp	r3, fp
 800d534:	dc31      	bgt.n	800d59a <_printf_float+0x36e>
 800d536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d538:	459a      	cmp	sl, r3
 800d53a:	dc3a      	bgt.n	800d5b2 <_printf_float+0x386>
 800d53c:	6823      	ldr	r3, [r4, #0]
 800d53e:	07da      	lsls	r2, r3, #31
 800d540:	d437      	bmi.n	800d5b2 <_printf_float+0x386>
 800d542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d544:	ebaa 0903 	sub.w	r9, sl, r3
 800d548:	9b06      	ldr	r3, [sp, #24]
 800d54a:	ebaa 0303 	sub.w	r3, sl, r3
 800d54e:	4599      	cmp	r9, r3
 800d550:	bfa8      	it	ge
 800d552:	4699      	movge	r9, r3
 800d554:	f1b9 0f00 	cmp.w	r9, #0
 800d558:	dc33      	bgt.n	800d5c2 <_printf_float+0x396>
 800d55a:	f04f 0800 	mov.w	r8, #0
 800d55e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d562:	f104 0b1a 	add.w	fp, r4, #26
 800d566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d568:	ebaa 0303 	sub.w	r3, sl, r3
 800d56c:	eba3 0309 	sub.w	r3, r3, r9
 800d570:	4543      	cmp	r3, r8
 800d572:	f77f af79 	ble.w	800d468 <_printf_float+0x23c>
 800d576:	2301      	movs	r3, #1
 800d578:	465a      	mov	r2, fp
 800d57a:	4631      	mov	r1, r6
 800d57c:	4628      	mov	r0, r5
 800d57e:	47b8      	blx	r7
 800d580:	3001      	adds	r0, #1
 800d582:	f43f aeae 	beq.w	800d2e2 <_printf_float+0xb6>
 800d586:	f108 0801 	add.w	r8, r8, #1
 800d58a:	e7ec      	b.n	800d566 <_printf_float+0x33a>
 800d58c:	4642      	mov	r2, r8
 800d58e:	4631      	mov	r1, r6
 800d590:	4628      	mov	r0, r5
 800d592:	47b8      	blx	r7
 800d594:	3001      	adds	r0, #1
 800d596:	d1c2      	bne.n	800d51e <_printf_float+0x2f2>
 800d598:	e6a3      	b.n	800d2e2 <_printf_float+0xb6>
 800d59a:	2301      	movs	r3, #1
 800d59c:	4631      	mov	r1, r6
 800d59e:	4628      	mov	r0, r5
 800d5a0:	9206      	str	r2, [sp, #24]
 800d5a2:	47b8      	blx	r7
 800d5a4:	3001      	adds	r0, #1
 800d5a6:	f43f ae9c 	beq.w	800d2e2 <_printf_float+0xb6>
 800d5aa:	9a06      	ldr	r2, [sp, #24]
 800d5ac:	f10b 0b01 	add.w	fp, fp, #1
 800d5b0:	e7bb      	b.n	800d52a <_printf_float+0x2fe>
 800d5b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5b6:	4631      	mov	r1, r6
 800d5b8:	4628      	mov	r0, r5
 800d5ba:	47b8      	blx	r7
 800d5bc:	3001      	adds	r0, #1
 800d5be:	d1c0      	bne.n	800d542 <_printf_float+0x316>
 800d5c0:	e68f      	b.n	800d2e2 <_printf_float+0xb6>
 800d5c2:	9a06      	ldr	r2, [sp, #24]
 800d5c4:	464b      	mov	r3, r9
 800d5c6:	4442      	add	r2, r8
 800d5c8:	4631      	mov	r1, r6
 800d5ca:	4628      	mov	r0, r5
 800d5cc:	47b8      	blx	r7
 800d5ce:	3001      	adds	r0, #1
 800d5d0:	d1c3      	bne.n	800d55a <_printf_float+0x32e>
 800d5d2:	e686      	b.n	800d2e2 <_printf_float+0xb6>
 800d5d4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d5d8:	f1ba 0f01 	cmp.w	sl, #1
 800d5dc:	dc01      	bgt.n	800d5e2 <_printf_float+0x3b6>
 800d5de:	07db      	lsls	r3, r3, #31
 800d5e0:	d536      	bpl.n	800d650 <_printf_float+0x424>
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	4642      	mov	r2, r8
 800d5e6:	4631      	mov	r1, r6
 800d5e8:	4628      	mov	r0, r5
 800d5ea:	47b8      	blx	r7
 800d5ec:	3001      	adds	r0, #1
 800d5ee:	f43f ae78 	beq.w	800d2e2 <_printf_float+0xb6>
 800d5f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5f6:	4631      	mov	r1, r6
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	47b8      	blx	r7
 800d5fc:	3001      	adds	r0, #1
 800d5fe:	f43f ae70 	beq.w	800d2e2 <_printf_float+0xb6>
 800d602:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d606:	2200      	movs	r2, #0
 800d608:	2300      	movs	r3, #0
 800d60a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d60e:	f7f3 fa5b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d612:	b9c0      	cbnz	r0, 800d646 <_printf_float+0x41a>
 800d614:	4653      	mov	r3, sl
 800d616:	f108 0201 	add.w	r2, r8, #1
 800d61a:	4631      	mov	r1, r6
 800d61c:	4628      	mov	r0, r5
 800d61e:	47b8      	blx	r7
 800d620:	3001      	adds	r0, #1
 800d622:	d10c      	bne.n	800d63e <_printf_float+0x412>
 800d624:	e65d      	b.n	800d2e2 <_printf_float+0xb6>
 800d626:	2301      	movs	r3, #1
 800d628:	465a      	mov	r2, fp
 800d62a:	4631      	mov	r1, r6
 800d62c:	4628      	mov	r0, r5
 800d62e:	47b8      	blx	r7
 800d630:	3001      	adds	r0, #1
 800d632:	f43f ae56 	beq.w	800d2e2 <_printf_float+0xb6>
 800d636:	f108 0801 	add.w	r8, r8, #1
 800d63a:	45d0      	cmp	r8, sl
 800d63c:	dbf3      	blt.n	800d626 <_printf_float+0x3fa>
 800d63e:	464b      	mov	r3, r9
 800d640:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d644:	e6df      	b.n	800d406 <_printf_float+0x1da>
 800d646:	f04f 0800 	mov.w	r8, #0
 800d64a:	f104 0b1a 	add.w	fp, r4, #26
 800d64e:	e7f4      	b.n	800d63a <_printf_float+0x40e>
 800d650:	2301      	movs	r3, #1
 800d652:	4642      	mov	r2, r8
 800d654:	e7e1      	b.n	800d61a <_printf_float+0x3ee>
 800d656:	2301      	movs	r3, #1
 800d658:	464a      	mov	r2, r9
 800d65a:	4631      	mov	r1, r6
 800d65c:	4628      	mov	r0, r5
 800d65e:	47b8      	blx	r7
 800d660:	3001      	adds	r0, #1
 800d662:	f43f ae3e 	beq.w	800d2e2 <_printf_float+0xb6>
 800d666:	f108 0801 	add.w	r8, r8, #1
 800d66a:	68e3      	ldr	r3, [r4, #12]
 800d66c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d66e:	1a5b      	subs	r3, r3, r1
 800d670:	4543      	cmp	r3, r8
 800d672:	dcf0      	bgt.n	800d656 <_printf_float+0x42a>
 800d674:	e6fc      	b.n	800d470 <_printf_float+0x244>
 800d676:	f04f 0800 	mov.w	r8, #0
 800d67a:	f104 0919 	add.w	r9, r4, #25
 800d67e:	e7f4      	b.n	800d66a <_printf_float+0x43e>

0800d680 <_printf_common>:
 800d680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d684:	4616      	mov	r6, r2
 800d686:	4698      	mov	r8, r3
 800d688:	688a      	ldr	r2, [r1, #8]
 800d68a:	690b      	ldr	r3, [r1, #16]
 800d68c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d690:	4293      	cmp	r3, r2
 800d692:	bfb8      	it	lt
 800d694:	4613      	movlt	r3, r2
 800d696:	6033      	str	r3, [r6, #0]
 800d698:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d69c:	4607      	mov	r7, r0
 800d69e:	460c      	mov	r4, r1
 800d6a0:	b10a      	cbz	r2, 800d6a6 <_printf_common+0x26>
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	6033      	str	r3, [r6, #0]
 800d6a6:	6823      	ldr	r3, [r4, #0]
 800d6a8:	0699      	lsls	r1, r3, #26
 800d6aa:	bf42      	ittt	mi
 800d6ac:	6833      	ldrmi	r3, [r6, #0]
 800d6ae:	3302      	addmi	r3, #2
 800d6b0:	6033      	strmi	r3, [r6, #0]
 800d6b2:	6825      	ldr	r5, [r4, #0]
 800d6b4:	f015 0506 	ands.w	r5, r5, #6
 800d6b8:	d106      	bne.n	800d6c8 <_printf_common+0x48>
 800d6ba:	f104 0a19 	add.w	sl, r4, #25
 800d6be:	68e3      	ldr	r3, [r4, #12]
 800d6c0:	6832      	ldr	r2, [r6, #0]
 800d6c2:	1a9b      	subs	r3, r3, r2
 800d6c4:	42ab      	cmp	r3, r5
 800d6c6:	dc26      	bgt.n	800d716 <_printf_common+0x96>
 800d6c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d6cc:	6822      	ldr	r2, [r4, #0]
 800d6ce:	3b00      	subs	r3, #0
 800d6d0:	bf18      	it	ne
 800d6d2:	2301      	movne	r3, #1
 800d6d4:	0692      	lsls	r2, r2, #26
 800d6d6:	d42b      	bmi.n	800d730 <_printf_common+0xb0>
 800d6d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d6dc:	4641      	mov	r1, r8
 800d6de:	4638      	mov	r0, r7
 800d6e0:	47c8      	blx	r9
 800d6e2:	3001      	adds	r0, #1
 800d6e4:	d01e      	beq.n	800d724 <_printf_common+0xa4>
 800d6e6:	6823      	ldr	r3, [r4, #0]
 800d6e8:	6922      	ldr	r2, [r4, #16]
 800d6ea:	f003 0306 	and.w	r3, r3, #6
 800d6ee:	2b04      	cmp	r3, #4
 800d6f0:	bf02      	ittt	eq
 800d6f2:	68e5      	ldreq	r5, [r4, #12]
 800d6f4:	6833      	ldreq	r3, [r6, #0]
 800d6f6:	1aed      	subeq	r5, r5, r3
 800d6f8:	68a3      	ldr	r3, [r4, #8]
 800d6fa:	bf0c      	ite	eq
 800d6fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d700:	2500      	movne	r5, #0
 800d702:	4293      	cmp	r3, r2
 800d704:	bfc4      	itt	gt
 800d706:	1a9b      	subgt	r3, r3, r2
 800d708:	18ed      	addgt	r5, r5, r3
 800d70a:	2600      	movs	r6, #0
 800d70c:	341a      	adds	r4, #26
 800d70e:	42b5      	cmp	r5, r6
 800d710:	d11a      	bne.n	800d748 <_printf_common+0xc8>
 800d712:	2000      	movs	r0, #0
 800d714:	e008      	b.n	800d728 <_printf_common+0xa8>
 800d716:	2301      	movs	r3, #1
 800d718:	4652      	mov	r2, sl
 800d71a:	4641      	mov	r1, r8
 800d71c:	4638      	mov	r0, r7
 800d71e:	47c8      	blx	r9
 800d720:	3001      	adds	r0, #1
 800d722:	d103      	bne.n	800d72c <_printf_common+0xac>
 800d724:	f04f 30ff 	mov.w	r0, #4294967295
 800d728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d72c:	3501      	adds	r5, #1
 800d72e:	e7c6      	b.n	800d6be <_printf_common+0x3e>
 800d730:	18e1      	adds	r1, r4, r3
 800d732:	1c5a      	adds	r2, r3, #1
 800d734:	2030      	movs	r0, #48	@ 0x30
 800d736:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d73a:	4422      	add	r2, r4
 800d73c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d740:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d744:	3302      	adds	r3, #2
 800d746:	e7c7      	b.n	800d6d8 <_printf_common+0x58>
 800d748:	2301      	movs	r3, #1
 800d74a:	4622      	mov	r2, r4
 800d74c:	4641      	mov	r1, r8
 800d74e:	4638      	mov	r0, r7
 800d750:	47c8      	blx	r9
 800d752:	3001      	adds	r0, #1
 800d754:	d0e6      	beq.n	800d724 <_printf_common+0xa4>
 800d756:	3601      	adds	r6, #1
 800d758:	e7d9      	b.n	800d70e <_printf_common+0x8e>
	...

0800d75c <_printf_i>:
 800d75c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d760:	7e0f      	ldrb	r7, [r1, #24]
 800d762:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d764:	2f78      	cmp	r7, #120	@ 0x78
 800d766:	4691      	mov	r9, r2
 800d768:	4680      	mov	r8, r0
 800d76a:	460c      	mov	r4, r1
 800d76c:	469a      	mov	sl, r3
 800d76e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d772:	d807      	bhi.n	800d784 <_printf_i+0x28>
 800d774:	2f62      	cmp	r7, #98	@ 0x62
 800d776:	d80a      	bhi.n	800d78e <_printf_i+0x32>
 800d778:	2f00      	cmp	r7, #0
 800d77a:	f000 80d2 	beq.w	800d922 <_printf_i+0x1c6>
 800d77e:	2f58      	cmp	r7, #88	@ 0x58
 800d780:	f000 80b9 	beq.w	800d8f6 <_printf_i+0x19a>
 800d784:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d788:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d78c:	e03a      	b.n	800d804 <_printf_i+0xa8>
 800d78e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d792:	2b15      	cmp	r3, #21
 800d794:	d8f6      	bhi.n	800d784 <_printf_i+0x28>
 800d796:	a101      	add	r1, pc, #4	@ (adr r1, 800d79c <_printf_i+0x40>)
 800d798:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d79c:	0800d7f5 	.word	0x0800d7f5
 800d7a0:	0800d809 	.word	0x0800d809
 800d7a4:	0800d785 	.word	0x0800d785
 800d7a8:	0800d785 	.word	0x0800d785
 800d7ac:	0800d785 	.word	0x0800d785
 800d7b0:	0800d785 	.word	0x0800d785
 800d7b4:	0800d809 	.word	0x0800d809
 800d7b8:	0800d785 	.word	0x0800d785
 800d7bc:	0800d785 	.word	0x0800d785
 800d7c0:	0800d785 	.word	0x0800d785
 800d7c4:	0800d785 	.word	0x0800d785
 800d7c8:	0800d909 	.word	0x0800d909
 800d7cc:	0800d833 	.word	0x0800d833
 800d7d0:	0800d8c3 	.word	0x0800d8c3
 800d7d4:	0800d785 	.word	0x0800d785
 800d7d8:	0800d785 	.word	0x0800d785
 800d7dc:	0800d92b 	.word	0x0800d92b
 800d7e0:	0800d785 	.word	0x0800d785
 800d7e4:	0800d833 	.word	0x0800d833
 800d7e8:	0800d785 	.word	0x0800d785
 800d7ec:	0800d785 	.word	0x0800d785
 800d7f0:	0800d8cb 	.word	0x0800d8cb
 800d7f4:	6833      	ldr	r3, [r6, #0]
 800d7f6:	1d1a      	adds	r2, r3, #4
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	6032      	str	r2, [r6, #0]
 800d7fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d800:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d804:	2301      	movs	r3, #1
 800d806:	e09d      	b.n	800d944 <_printf_i+0x1e8>
 800d808:	6833      	ldr	r3, [r6, #0]
 800d80a:	6820      	ldr	r0, [r4, #0]
 800d80c:	1d19      	adds	r1, r3, #4
 800d80e:	6031      	str	r1, [r6, #0]
 800d810:	0606      	lsls	r6, r0, #24
 800d812:	d501      	bpl.n	800d818 <_printf_i+0xbc>
 800d814:	681d      	ldr	r5, [r3, #0]
 800d816:	e003      	b.n	800d820 <_printf_i+0xc4>
 800d818:	0645      	lsls	r5, r0, #25
 800d81a:	d5fb      	bpl.n	800d814 <_printf_i+0xb8>
 800d81c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d820:	2d00      	cmp	r5, #0
 800d822:	da03      	bge.n	800d82c <_printf_i+0xd0>
 800d824:	232d      	movs	r3, #45	@ 0x2d
 800d826:	426d      	negs	r5, r5
 800d828:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d82c:	4859      	ldr	r0, [pc, #356]	@ (800d994 <_printf_i+0x238>)
 800d82e:	230a      	movs	r3, #10
 800d830:	e011      	b.n	800d856 <_printf_i+0xfa>
 800d832:	6821      	ldr	r1, [r4, #0]
 800d834:	6833      	ldr	r3, [r6, #0]
 800d836:	0608      	lsls	r0, r1, #24
 800d838:	f853 5b04 	ldr.w	r5, [r3], #4
 800d83c:	d402      	bmi.n	800d844 <_printf_i+0xe8>
 800d83e:	0649      	lsls	r1, r1, #25
 800d840:	bf48      	it	mi
 800d842:	b2ad      	uxthmi	r5, r5
 800d844:	2f6f      	cmp	r7, #111	@ 0x6f
 800d846:	4853      	ldr	r0, [pc, #332]	@ (800d994 <_printf_i+0x238>)
 800d848:	6033      	str	r3, [r6, #0]
 800d84a:	bf14      	ite	ne
 800d84c:	230a      	movne	r3, #10
 800d84e:	2308      	moveq	r3, #8
 800d850:	2100      	movs	r1, #0
 800d852:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d856:	6866      	ldr	r6, [r4, #4]
 800d858:	60a6      	str	r6, [r4, #8]
 800d85a:	2e00      	cmp	r6, #0
 800d85c:	bfa2      	ittt	ge
 800d85e:	6821      	ldrge	r1, [r4, #0]
 800d860:	f021 0104 	bicge.w	r1, r1, #4
 800d864:	6021      	strge	r1, [r4, #0]
 800d866:	b90d      	cbnz	r5, 800d86c <_printf_i+0x110>
 800d868:	2e00      	cmp	r6, #0
 800d86a:	d04b      	beq.n	800d904 <_printf_i+0x1a8>
 800d86c:	4616      	mov	r6, r2
 800d86e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d872:	fb03 5711 	mls	r7, r3, r1, r5
 800d876:	5dc7      	ldrb	r7, [r0, r7]
 800d878:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d87c:	462f      	mov	r7, r5
 800d87e:	42bb      	cmp	r3, r7
 800d880:	460d      	mov	r5, r1
 800d882:	d9f4      	bls.n	800d86e <_printf_i+0x112>
 800d884:	2b08      	cmp	r3, #8
 800d886:	d10b      	bne.n	800d8a0 <_printf_i+0x144>
 800d888:	6823      	ldr	r3, [r4, #0]
 800d88a:	07df      	lsls	r7, r3, #31
 800d88c:	d508      	bpl.n	800d8a0 <_printf_i+0x144>
 800d88e:	6923      	ldr	r3, [r4, #16]
 800d890:	6861      	ldr	r1, [r4, #4]
 800d892:	4299      	cmp	r1, r3
 800d894:	bfde      	ittt	le
 800d896:	2330      	movle	r3, #48	@ 0x30
 800d898:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d89c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d8a0:	1b92      	subs	r2, r2, r6
 800d8a2:	6122      	str	r2, [r4, #16]
 800d8a4:	f8cd a000 	str.w	sl, [sp]
 800d8a8:	464b      	mov	r3, r9
 800d8aa:	aa03      	add	r2, sp, #12
 800d8ac:	4621      	mov	r1, r4
 800d8ae:	4640      	mov	r0, r8
 800d8b0:	f7ff fee6 	bl	800d680 <_printf_common>
 800d8b4:	3001      	adds	r0, #1
 800d8b6:	d14a      	bne.n	800d94e <_printf_i+0x1f2>
 800d8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8bc:	b004      	add	sp, #16
 800d8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8c2:	6823      	ldr	r3, [r4, #0]
 800d8c4:	f043 0320 	orr.w	r3, r3, #32
 800d8c8:	6023      	str	r3, [r4, #0]
 800d8ca:	4833      	ldr	r0, [pc, #204]	@ (800d998 <_printf_i+0x23c>)
 800d8cc:	2778      	movs	r7, #120	@ 0x78
 800d8ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d8d2:	6823      	ldr	r3, [r4, #0]
 800d8d4:	6831      	ldr	r1, [r6, #0]
 800d8d6:	061f      	lsls	r7, r3, #24
 800d8d8:	f851 5b04 	ldr.w	r5, [r1], #4
 800d8dc:	d402      	bmi.n	800d8e4 <_printf_i+0x188>
 800d8de:	065f      	lsls	r7, r3, #25
 800d8e0:	bf48      	it	mi
 800d8e2:	b2ad      	uxthmi	r5, r5
 800d8e4:	6031      	str	r1, [r6, #0]
 800d8e6:	07d9      	lsls	r1, r3, #31
 800d8e8:	bf44      	itt	mi
 800d8ea:	f043 0320 	orrmi.w	r3, r3, #32
 800d8ee:	6023      	strmi	r3, [r4, #0]
 800d8f0:	b11d      	cbz	r5, 800d8fa <_printf_i+0x19e>
 800d8f2:	2310      	movs	r3, #16
 800d8f4:	e7ac      	b.n	800d850 <_printf_i+0xf4>
 800d8f6:	4827      	ldr	r0, [pc, #156]	@ (800d994 <_printf_i+0x238>)
 800d8f8:	e7e9      	b.n	800d8ce <_printf_i+0x172>
 800d8fa:	6823      	ldr	r3, [r4, #0]
 800d8fc:	f023 0320 	bic.w	r3, r3, #32
 800d900:	6023      	str	r3, [r4, #0]
 800d902:	e7f6      	b.n	800d8f2 <_printf_i+0x196>
 800d904:	4616      	mov	r6, r2
 800d906:	e7bd      	b.n	800d884 <_printf_i+0x128>
 800d908:	6833      	ldr	r3, [r6, #0]
 800d90a:	6825      	ldr	r5, [r4, #0]
 800d90c:	6961      	ldr	r1, [r4, #20]
 800d90e:	1d18      	adds	r0, r3, #4
 800d910:	6030      	str	r0, [r6, #0]
 800d912:	062e      	lsls	r6, r5, #24
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	d501      	bpl.n	800d91c <_printf_i+0x1c0>
 800d918:	6019      	str	r1, [r3, #0]
 800d91a:	e002      	b.n	800d922 <_printf_i+0x1c6>
 800d91c:	0668      	lsls	r0, r5, #25
 800d91e:	d5fb      	bpl.n	800d918 <_printf_i+0x1bc>
 800d920:	8019      	strh	r1, [r3, #0]
 800d922:	2300      	movs	r3, #0
 800d924:	6123      	str	r3, [r4, #16]
 800d926:	4616      	mov	r6, r2
 800d928:	e7bc      	b.n	800d8a4 <_printf_i+0x148>
 800d92a:	6833      	ldr	r3, [r6, #0]
 800d92c:	1d1a      	adds	r2, r3, #4
 800d92e:	6032      	str	r2, [r6, #0]
 800d930:	681e      	ldr	r6, [r3, #0]
 800d932:	6862      	ldr	r2, [r4, #4]
 800d934:	2100      	movs	r1, #0
 800d936:	4630      	mov	r0, r6
 800d938:	f7f2 fc4a 	bl	80001d0 <memchr>
 800d93c:	b108      	cbz	r0, 800d942 <_printf_i+0x1e6>
 800d93e:	1b80      	subs	r0, r0, r6
 800d940:	6060      	str	r0, [r4, #4]
 800d942:	6863      	ldr	r3, [r4, #4]
 800d944:	6123      	str	r3, [r4, #16]
 800d946:	2300      	movs	r3, #0
 800d948:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d94c:	e7aa      	b.n	800d8a4 <_printf_i+0x148>
 800d94e:	6923      	ldr	r3, [r4, #16]
 800d950:	4632      	mov	r2, r6
 800d952:	4649      	mov	r1, r9
 800d954:	4640      	mov	r0, r8
 800d956:	47d0      	blx	sl
 800d958:	3001      	adds	r0, #1
 800d95a:	d0ad      	beq.n	800d8b8 <_printf_i+0x15c>
 800d95c:	6823      	ldr	r3, [r4, #0]
 800d95e:	079b      	lsls	r3, r3, #30
 800d960:	d413      	bmi.n	800d98a <_printf_i+0x22e>
 800d962:	68e0      	ldr	r0, [r4, #12]
 800d964:	9b03      	ldr	r3, [sp, #12]
 800d966:	4298      	cmp	r0, r3
 800d968:	bfb8      	it	lt
 800d96a:	4618      	movlt	r0, r3
 800d96c:	e7a6      	b.n	800d8bc <_printf_i+0x160>
 800d96e:	2301      	movs	r3, #1
 800d970:	4632      	mov	r2, r6
 800d972:	4649      	mov	r1, r9
 800d974:	4640      	mov	r0, r8
 800d976:	47d0      	blx	sl
 800d978:	3001      	adds	r0, #1
 800d97a:	d09d      	beq.n	800d8b8 <_printf_i+0x15c>
 800d97c:	3501      	adds	r5, #1
 800d97e:	68e3      	ldr	r3, [r4, #12]
 800d980:	9903      	ldr	r1, [sp, #12]
 800d982:	1a5b      	subs	r3, r3, r1
 800d984:	42ab      	cmp	r3, r5
 800d986:	dcf2      	bgt.n	800d96e <_printf_i+0x212>
 800d988:	e7eb      	b.n	800d962 <_printf_i+0x206>
 800d98a:	2500      	movs	r5, #0
 800d98c:	f104 0619 	add.w	r6, r4, #25
 800d990:	e7f5      	b.n	800d97e <_printf_i+0x222>
 800d992:	bf00      	nop
 800d994:	080110b3 	.word	0x080110b3
 800d998:	080110c4 	.word	0x080110c4

0800d99c <std>:
 800d99c:	2300      	movs	r3, #0
 800d99e:	b510      	push	{r4, lr}
 800d9a0:	4604      	mov	r4, r0
 800d9a2:	e9c0 3300 	strd	r3, r3, [r0]
 800d9a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d9aa:	6083      	str	r3, [r0, #8]
 800d9ac:	8181      	strh	r1, [r0, #12]
 800d9ae:	6643      	str	r3, [r0, #100]	@ 0x64
 800d9b0:	81c2      	strh	r2, [r0, #14]
 800d9b2:	6183      	str	r3, [r0, #24]
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	2208      	movs	r2, #8
 800d9b8:	305c      	adds	r0, #92	@ 0x5c
 800d9ba:	f000 f928 	bl	800dc0e <memset>
 800d9be:	4b0d      	ldr	r3, [pc, #52]	@ (800d9f4 <std+0x58>)
 800d9c0:	6263      	str	r3, [r4, #36]	@ 0x24
 800d9c2:	4b0d      	ldr	r3, [pc, #52]	@ (800d9f8 <std+0x5c>)
 800d9c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d9c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d9fc <std+0x60>)
 800d9c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d9ca:	4b0d      	ldr	r3, [pc, #52]	@ (800da00 <std+0x64>)
 800d9cc:	6323      	str	r3, [r4, #48]	@ 0x30
 800d9ce:	4b0d      	ldr	r3, [pc, #52]	@ (800da04 <std+0x68>)
 800d9d0:	6224      	str	r4, [r4, #32]
 800d9d2:	429c      	cmp	r4, r3
 800d9d4:	d006      	beq.n	800d9e4 <std+0x48>
 800d9d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d9da:	4294      	cmp	r4, r2
 800d9dc:	d002      	beq.n	800d9e4 <std+0x48>
 800d9de:	33d0      	adds	r3, #208	@ 0xd0
 800d9e0:	429c      	cmp	r4, r3
 800d9e2:	d105      	bne.n	800d9f0 <std+0x54>
 800d9e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d9e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9ec:	f000 b9b0 	b.w	800dd50 <__retarget_lock_init_recursive>
 800d9f0:	bd10      	pop	{r4, pc}
 800d9f2:	bf00      	nop
 800d9f4:	0800db89 	.word	0x0800db89
 800d9f8:	0800dbab 	.word	0x0800dbab
 800d9fc:	0800dbe3 	.word	0x0800dbe3
 800da00:	0800dc07 	.word	0x0800dc07
 800da04:	2000535c 	.word	0x2000535c

0800da08 <stdio_exit_handler>:
 800da08:	4a02      	ldr	r2, [pc, #8]	@ (800da14 <stdio_exit_handler+0xc>)
 800da0a:	4903      	ldr	r1, [pc, #12]	@ (800da18 <stdio_exit_handler+0x10>)
 800da0c:	4803      	ldr	r0, [pc, #12]	@ (800da1c <stdio_exit_handler+0x14>)
 800da0e:	f000 b869 	b.w	800dae4 <_fwalk_sglue>
 800da12:	bf00      	nop
 800da14:	20000030 	.word	0x20000030
 800da18:	0800f6cd 	.word	0x0800f6cd
 800da1c:	20000040 	.word	0x20000040

0800da20 <cleanup_stdio>:
 800da20:	6841      	ldr	r1, [r0, #4]
 800da22:	4b0c      	ldr	r3, [pc, #48]	@ (800da54 <cleanup_stdio+0x34>)
 800da24:	4299      	cmp	r1, r3
 800da26:	b510      	push	{r4, lr}
 800da28:	4604      	mov	r4, r0
 800da2a:	d001      	beq.n	800da30 <cleanup_stdio+0x10>
 800da2c:	f001 fe4e 	bl	800f6cc <_fflush_r>
 800da30:	68a1      	ldr	r1, [r4, #8]
 800da32:	4b09      	ldr	r3, [pc, #36]	@ (800da58 <cleanup_stdio+0x38>)
 800da34:	4299      	cmp	r1, r3
 800da36:	d002      	beq.n	800da3e <cleanup_stdio+0x1e>
 800da38:	4620      	mov	r0, r4
 800da3a:	f001 fe47 	bl	800f6cc <_fflush_r>
 800da3e:	68e1      	ldr	r1, [r4, #12]
 800da40:	4b06      	ldr	r3, [pc, #24]	@ (800da5c <cleanup_stdio+0x3c>)
 800da42:	4299      	cmp	r1, r3
 800da44:	d004      	beq.n	800da50 <cleanup_stdio+0x30>
 800da46:	4620      	mov	r0, r4
 800da48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da4c:	f001 be3e 	b.w	800f6cc <_fflush_r>
 800da50:	bd10      	pop	{r4, pc}
 800da52:	bf00      	nop
 800da54:	2000535c 	.word	0x2000535c
 800da58:	200053c4 	.word	0x200053c4
 800da5c:	2000542c 	.word	0x2000542c

0800da60 <global_stdio_init.part.0>:
 800da60:	b510      	push	{r4, lr}
 800da62:	4b0b      	ldr	r3, [pc, #44]	@ (800da90 <global_stdio_init.part.0+0x30>)
 800da64:	4c0b      	ldr	r4, [pc, #44]	@ (800da94 <global_stdio_init.part.0+0x34>)
 800da66:	4a0c      	ldr	r2, [pc, #48]	@ (800da98 <global_stdio_init.part.0+0x38>)
 800da68:	601a      	str	r2, [r3, #0]
 800da6a:	4620      	mov	r0, r4
 800da6c:	2200      	movs	r2, #0
 800da6e:	2104      	movs	r1, #4
 800da70:	f7ff ff94 	bl	800d99c <std>
 800da74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800da78:	2201      	movs	r2, #1
 800da7a:	2109      	movs	r1, #9
 800da7c:	f7ff ff8e 	bl	800d99c <std>
 800da80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800da84:	2202      	movs	r2, #2
 800da86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da8a:	2112      	movs	r1, #18
 800da8c:	f7ff bf86 	b.w	800d99c <std>
 800da90:	20005494 	.word	0x20005494
 800da94:	2000535c 	.word	0x2000535c
 800da98:	0800da09 	.word	0x0800da09

0800da9c <__sfp_lock_acquire>:
 800da9c:	4801      	ldr	r0, [pc, #4]	@ (800daa4 <__sfp_lock_acquire+0x8>)
 800da9e:	f000 b958 	b.w	800dd52 <__retarget_lock_acquire_recursive>
 800daa2:	bf00      	nop
 800daa4:	2000549d 	.word	0x2000549d

0800daa8 <__sfp_lock_release>:
 800daa8:	4801      	ldr	r0, [pc, #4]	@ (800dab0 <__sfp_lock_release+0x8>)
 800daaa:	f000 b953 	b.w	800dd54 <__retarget_lock_release_recursive>
 800daae:	bf00      	nop
 800dab0:	2000549d 	.word	0x2000549d

0800dab4 <__sinit>:
 800dab4:	b510      	push	{r4, lr}
 800dab6:	4604      	mov	r4, r0
 800dab8:	f7ff fff0 	bl	800da9c <__sfp_lock_acquire>
 800dabc:	6a23      	ldr	r3, [r4, #32]
 800dabe:	b11b      	cbz	r3, 800dac8 <__sinit+0x14>
 800dac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dac4:	f7ff bff0 	b.w	800daa8 <__sfp_lock_release>
 800dac8:	4b04      	ldr	r3, [pc, #16]	@ (800dadc <__sinit+0x28>)
 800daca:	6223      	str	r3, [r4, #32]
 800dacc:	4b04      	ldr	r3, [pc, #16]	@ (800dae0 <__sinit+0x2c>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d1f5      	bne.n	800dac0 <__sinit+0xc>
 800dad4:	f7ff ffc4 	bl	800da60 <global_stdio_init.part.0>
 800dad8:	e7f2      	b.n	800dac0 <__sinit+0xc>
 800dada:	bf00      	nop
 800dadc:	0800da21 	.word	0x0800da21
 800dae0:	20005494 	.word	0x20005494

0800dae4 <_fwalk_sglue>:
 800dae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dae8:	4607      	mov	r7, r0
 800daea:	4688      	mov	r8, r1
 800daec:	4614      	mov	r4, r2
 800daee:	2600      	movs	r6, #0
 800daf0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800daf4:	f1b9 0901 	subs.w	r9, r9, #1
 800daf8:	d505      	bpl.n	800db06 <_fwalk_sglue+0x22>
 800dafa:	6824      	ldr	r4, [r4, #0]
 800dafc:	2c00      	cmp	r4, #0
 800dafe:	d1f7      	bne.n	800daf0 <_fwalk_sglue+0xc>
 800db00:	4630      	mov	r0, r6
 800db02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db06:	89ab      	ldrh	r3, [r5, #12]
 800db08:	2b01      	cmp	r3, #1
 800db0a:	d907      	bls.n	800db1c <_fwalk_sglue+0x38>
 800db0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db10:	3301      	adds	r3, #1
 800db12:	d003      	beq.n	800db1c <_fwalk_sglue+0x38>
 800db14:	4629      	mov	r1, r5
 800db16:	4638      	mov	r0, r7
 800db18:	47c0      	blx	r8
 800db1a:	4306      	orrs	r6, r0
 800db1c:	3568      	adds	r5, #104	@ 0x68
 800db1e:	e7e9      	b.n	800daf4 <_fwalk_sglue+0x10>

0800db20 <sniprintf>:
 800db20:	b40c      	push	{r2, r3}
 800db22:	b530      	push	{r4, r5, lr}
 800db24:	4b17      	ldr	r3, [pc, #92]	@ (800db84 <sniprintf+0x64>)
 800db26:	1e0c      	subs	r4, r1, #0
 800db28:	681d      	ldr	r5, [r3, #0]
 800db2a:	b09d      	sub	sp, #116	@ 0x74
 800db2c:	da08      	bge.n	800db40 <sniprintf+0x20>
 800db2e:	238b      	movs	r3, #139	@ 0x8b
 800db30:	602b      	str	r3, [r5, #0]
 800db32:	f04f 30ff 	mov.w	r0, #4294967295
 800db36:	b01d      	add	sp, #116	@ 0x74
 800db38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db3c:	b002      	add	sp, #8
 800db3e:	4770      	bx	lr
 800db40:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800db44:	f8ad 3014 	strh.w	r3, [sp, #20]
 800db48:	bf14      	ite	ne
 800db4a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800db4e:	4623      	moveq	r3, r4
 800db50:	9304      	str	r3, [sp, #16]
 800db52:	9307      	str	r3, [sp, #28]
 800db54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db58:	9002      	str	r0, [sp, #8]
 800db5a:	9006      	str	r0, [sp, #24]
 800db5c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800db60:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800db62:	ab21      	add	r3, sp, #132	@ 0x84
 800db64:	a902      	add	r1, sp, #8
 800db66:	4628      	mov	r0, r5
 800db68:	9301      	str	r3, [sp, #4]
 800db6a:	f001 fc2f 	bl	800f3cc <_svfiprintf_r>
 800db6e:	1c43      	adds	r3, r0, #1
 800db70:	bfbc      	itt	lt
 800db72:	238b      	movlt	r3, #139	@ 0x8b
 800db74:	602b      	strlt	r3, [r5, #0]
 800db76:	2c00      	cmp	r4, #0
 800db78:	d0dd      	beq.n	800db36 <sniprintf+0x16>
 800db7a:	9b02      	ldr	r3, [sp, #8]
 800db7c:	2200      	movs	r2, #0
 800db7e:	701a      	strb	r2, [r3, #0]
 800db80:	e7d9      	b.n	800db36 <sniprintf+0x16>
 800db82:	bf00      	nop
 800db84:	2000003c 	.word	0x2000003c

0800db88 <__sread>:
 800db88:	b510      	push	{r4, lr}
 800db8a:	460c      	mov	r4, r1
 800db8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db90:	f000 f890 	bl	800dcb4 <_read_r>
 800db94:	2800      	cmp	r0, #0
 800db96:	bfab      	itete	ge
 800db98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800db9a:	89a3      	ldrhlt	r3, [r4, #12]
 800db9c:	181b      	addge	r3, r3, r0
 800db9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dba2:	bfac      	ite	ge
 800dba4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dba6:	81a3      	strhlt	r3, [r4, #12]
 800dba8:	bd10      	pop	{r4, pc}

0800dbaa <__swrite>:
 800dbaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbae:	461f      	mov	r7, r3
 800dbb0:	898b      	ldrh	r3, [r1, #12]
 800dbb2:	05db      	lsls	r3, r3, #23
 800dbb4:	4605      	mov	r5, r0
 800dbb6:	460c      	mov	r4, r1
 800dbb8:	4616      	mov	r6, r2
 800dbba:	d505      	bpl.n	800dbc8 <__swrite+0x1e>
 800dbbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbc0:	2302      	movs	r3, #2
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	f000 f864 	bl	800dc90 <_lseek_r>
 800dbc8:	89a3      	ldrh	r3, [r4, #12]
 800dbca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dbd2:	81a3      	strh	r3, [r4, #12]
 800dbd4:	4632      	mov	r2, r6
 800dbd6:	463b      	mov	r3, r7
 800dbd8:	4628      	mov	r0, r5
 800dbda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbde:	f000 b87b 	b.w	800dcd8 <_write_r>

0800dbe2 <__sseek>:
 800dbe2:	b510      	push	{r4, lr}
 800dbe4:	460c      	mov	r4, r1
 800dbe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbea:	f000 f851 	bl	800dc90 <_lseek_r>
 800dbee:	1c43      	adds	r3, r0, #1
 800dbf0:	89a3      	ldrh	r3, [r4, #12]
 800dbf2:	bf15      	itete	ne
 800dbf4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dbf6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dbfa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dbfe:	81a3      	strheq	r3, [r4, #12]
 800dc00:	bf18      	it	ne
 800dc02:	81a3      	strhne	r3, [r4, #12]
 800dc04:	bd10      	pop	{r4, pc}

0800dc06 <__sclose>:
 800dc06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc0a:	f000 b831 	b.w	800dc70 <_close_r>

0800dc0e <memset>:
 800dc0e:	4402      	add	r2, r0
 800dc10:	4603      	mov	r3, r0
 800dc12:	4293      	cmp	r3, r2
 800dc14:	d100      	bne.n	800dc18 <memset+0xa>
 800dc16:	4770      	bx	lr
 800dc18:	f803 1b01 	strb.w	r1, [r3], #1
 800dc1c:	e7f9      	b.n	800dc12 <memset+0x4>

0800dc1e <strncmp>:
 800dc1e:	b510      	push	{r4, lr}
 800dc20:	b16a      	cbz	r2, 800dc3e <strncmp+0x20>
 800dc22:	3901      	subs	r1, #1
 800dc24:	1884      	adds	r4, r0, r2
 800dc26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc2a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d103      	bne.n	800dc3a <strncmp+0x1c>
 800dc32:	42a0      	cmp	r0, r4
 800dc34:	d001      	beq.n	800dc3a <strncmp+0x1c>
 800dc36:	2a00      	cmp	r2, #0
 800dc38:	d1f5      	bne.n	800dc26 <strncmp+0x8>
 800dc3a:	1ad0      	subs	r0, r2, r3
 800dc3c:	bd10      	pop	{r4, pc}
 800dc3e:	4610      	mov	r0, r2
 800dc40:	e7fc      	b.n	800dc3c <strncmp+0x1e>

0800dc42 <strncpy>:
 800dc42:	b510      	push	{r4, lr}
 800dc44:	3901      	subs	r1, #1
 800dc46:	4603      	mov	r3, r0
 800dc48:	b132      	cbz	r2, 800dc58 <strncpy+0x16>
 800dc4a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dc4e:	f803 4b01 	strb.w	r4, [r3], #1
 800dc52:	3a01      	subs	r2, #1
 800dc54:	2c00      	cmp	r4, #0
 800dc56:	d1f7      	bne.n	800dc48 <strncpy+0x6>
 800dc58:	441a      	add	r2, r3
 800dc5a:	2100      	movs	r1, #0
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d100      	bne.n	800dc62 <strncpy+0x20>
 800dc60:	bd10      	pop	{r4, pc}
 800dc62:	f803 1b01 	strb.w	r1, [r3], #1
 800dc66:	e7f9      	b.n	800dc5c <strncpy+0x1a>

0800dc68 <_localeconv_r>:
 800dc68:	4800      	ldr	r0, [pc, #0]	@ (800dc6c <_localeconv_r+0x4>)
 800dc6a:	4770      	bx	lr
 800dc6c:	2000017c 	.word	0x2000017c

0800dc70 <_close_r>:
 800dc70:	b538      	push	{r3, r4, r5, lr}
 800dc72:	4d06      	ldr	r5, [pc, #24]	@ (800dc8c <_close_r+0x1c>)
 800dc74:	2300      	movs	r3, #0
 800dc76:	4604      	mov	r4, r0
 800dc78:	4608      	mov	r0, r1
 800dc7a:	602b      	str	r3, [r5, #0]
 800dc7c:	f7f6 fa4c 	bl	8004118 <_close>
 800dc80:	1c43      	adds	r3, r0, #1
 800dc82:	d102      	bne.n	800dc8a <_close_r+0x1a>
 800dc84:	682b      	ldr	r3, [r5, #0]
 800dc86:	b103      	cbz	r3, 800dc8a <_close_r+0x1a>
 800dc88:	6023      	str	r3, [r4, #0]
 800dc8a:	bd38      	pop	{r3, r4, r5, pc}
 800dc8c:	20005498 	.word	0x20005498

0800dc90 <_lseek_r>:
 800dc90:	b538      	push	{r3, r4, r5, lr}
 800dc92:	4d07      	ldr	r5, [pc, #28]	@ (800dcb0 <_lseek_r+0x20>)
 800dc94:	4604      	mov	r4, r0
 800dc96:	4608      	mov	r0, r1
 800dc98:	4611      	mov	r1, r2
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	602a      	str	r2, [r5, #0]
 800dc9e:	461a      	mov	r2, r3
 800dca0:	f7f6 fa61 	bl	8004166 <_lseek>
 800dca4:	1c43      	adds	r3, r0, #1
 800dca6:	d102      	bne.n	800dcae <_lseek_r+0x1e>
 800dca8:	682b      	ldr	r3, [r5, #0]
 800dcaa:	b103      	cbz	r3, 800dcae <_lseek_r+0x1e>
 800dcac:	6023      	str	r3, [r4, #0]
 800dcae:	bd38      	pop	{r3, r4, r5, pc}
 800dcb0:	20005498 	.word	0x20005498

0800dcb4 <_read_r>:
 800dcb4:	b538      	push	{r3, r4, r5, lr}
 800dcb6:	4d07      	ldr	r5, [pc, #28]	@ (800dcd4 <_read_r+0x20>)
 800dcb8:	4604      	mov	r4, r0
 800dcba:	4608      	mov	r0, r1
 800dcbc:	4611      	mov	r1, r2
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	602a      	str	r2, [r5, #0]
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	f7f6 f9ef 	bl	80040a6 <_read>
 800dcc8:	1c43      	adds	r3, r0, #1
 800dcca:	d102      	bne.n	800dcd2 <_read_r+0x1e>
 800dccc:	682b      	ldr	r3, [r5, #0]
 800dcce:	b103      	cbz	r3, 800dcd2 <_read_r+0x1e>
 800dcd0:	6023      	str	r3, [r4, #0]
 800dcd2:	bd38      	pop	{r3, r4, r5, pc}
 800dcd4:	20005498 	.word	0x20005498

0800dcd8 <_write_r>:
 800dcd8:	b538      	push	{r3, r4, r5, lr}
 800dcda:	4d07      	ldr	r5, [pc, #28]	@ (800dcf8 <_write_r+0x20>)
 800dcdc:	4604      	mov	r4, r0
 800dcde:	4608      	mov	r0, r1
 800dce0:	4611      	mov	r1, r2
 800dce2:	2200      	movs	r2, #0
 800dce4:	602a      	str	r2, [r5, #0]
 800dce6:	461a      	mov	r2, r3
 800dce8:	f7f6 f9fa 	bl	80040e0 <_write>
 800dcec:	1c43      	adds	r3, r0, #1
 800dcee:	d102      	bne.n	800dcf6 <_write_r+0x1e>
 800dcf0:	682b      	ldr	r3, [r5, #0]
 800dcf2:	b103      	cbz	r3, 800dcf6 <_write_r+0x1e>
 800dcf4:	6023      	str	r3, [r4, #0]
 800dcf6:	bd38      	pop	{r3, r4, r5, pc}
 800dcf8:	20005498 	.word	0x20005498

0800dcfc <__errno>:
 800dcfc:	4b01      	ldr	r3, [pc, #4]	@ (800dd04 <__errno+0x8>)
 800dcfe:	6818      	ldr	r0, [r3, #0]
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	2000003c 	.word	0x2000003c

0800dd08 <__libc_init_array>:
 800dd08:	b570      	push	{r4, r5, r6, lr}
 800dd0a:	4d0d      	ldr	r5, [pc, #52]	@ (800dd40 <__libc_init_array+0x38>)
 800dd0c:	4c0d      	ldr	r4, [pc, #52]	@ (800dd44 <__libc_init_array+0x3c>)
 800dd0e:	1b64      	subs	r4, r4, r5
 800dd10:	10a4      	asrs	r4, r4, #2
 800dd12:	2600      	movs	r6, #0
 800dd14:	42a6      	cmp	r6, r4
 800dd16:	d109      	bne.n	800dd2c <__libc_init_array+0x24>
 800dd18:	4d0b      	ldr	r5, [pc, #44]	@ (800dd48 <__libc_init_array+0x40>)
 800dd1a:	4c0c      	ldr	r4, [pc, #48]	@ (800dd4c <__libc_init_array+0x44>)
 800dd1c:	f002 fad0 	bl	80102c0 <_init>
 800dd20:	1b64      	subs	r4, r4, r5
 800dd22:	10a4      	asrs	r4, r4, #2
 800dd24:	2600      	movs	r6, #0
 800dd26:	42a6      	cmp	r6, r4
 800dd28:	d105      	bne.n	800dd36 <__libc_init_array+0x2e>
 800dd2a:	bd70      	pop	{r4, r5, r6, pc}
 800dd2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd30:	4798      	blx	r3
 800dd32:	3601      	adds	r6, #1
 800dd34:	e7ee      	b.n	800dd14 <__libc_init_array+0xc>
 800dd36:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd3a:	4798      	blx	r3
 800dd3c:	3601      	adds	r6, #1
 800dd3e:	e7f2      	b.n	800dd26 <__libc_init_array+0x1e>
 800dd40:	08011388 	.word	0x08011388
 800dd44:	08011388 	.word	0x08011388
 800dd48:	08011388 	.word	0x08011388
 800dd4c:	0801138c 	.word	0x0801138c

0800dd50 <__retarget_lock_init_recursive>:
 800dd50:	4770      	bx	lr

0800dd52 <__retarget_lock_acquire_recursive>:
 800dd52:	4770      	bx	lr

0800dd54 <__retarget_lock_release_recursive>:
 800dd54:	4770      	bx	lr

0800dd56 <memcpy>:
 800dd56:	440a      	add	r2, r1
 800dd58:	4291      	cmp	r1, r2
 800dd5a:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd5e:	d100      	bne.n	800dd62 <memcpy+0xc>
 800dd60:	4770      	bx	lr
 800dd62:	b510      	push	{r4, lr}
 800dd64:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd68:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd6c:	4291      	cmp	r1, r2
 800dd6e:	d1f9      	bne.n	800dd64 <memcpy+0xe>
 800dd70:	bd10      	pop	{r4, pc}

0800dd72 <quorem>:
 800dd72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd76:	6903      	ldr	r3, [r0, #16]
 800dd78:	690c      	ldr	r4, [r1, #16]
 800dd7a:	42a3      	cmp	r3, r4
 800dd7c:	4607      	mov	r7, r0
 800dd7e:	db7e      	blt.n	800de7e <quorem+0x10c>
 800dd80:	3c01      	subs	r4, #1
 800dd82:	f101 0814 	add.w	r8, r1, #20
 800dd86:	00a3      	lsls	r3, r4, #2
 800dd88:	f100 0514 	add.w	r5, r0, #20
 800dd8c:	9300      	str	r3, [sp, #0]
 800dd8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd92:	9301      	str	r3, [sp, #4]
 800dd94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dd98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dda4:	fbb2 f6f3 	udiv	r6, r2, r3
 800dda8:	d32e      	bcc.n	800de08 <quorem+0x96>
 800ddaa:	f04f 0a00 	mov.w	sl, #0
 800ddae:	46c4      	mov	ip, r8
 800ddb0:	46ae      	mov	lr, r5
 800ddb2:	46d3      	mov	fp, sl
 800ddb4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ddb8:	b298      	uxth	r0, r3
 800ddba:	fb06 a000 	mla	r0, r6, r0, sl
 800ddbe:	0c02      	lsrs	r2, r0, #16
 800ddc0:	0c1b      	lsrs	r3, r3, #16
 800ddc2:	fb06 2303 	mla	r3, r6, r3, r2
 800ddc6:	f8de 2000 	ldr.w	r2, [lr]
 800ddca:	b280      	uxth	r0, r0
 800ddcc:	b292      	uxth	r2, r2
 800ddce:	1a12      	subs	r2, r2, r0
 800ddd0:	445a      	add	r2, fp
 800ddd2:	f8de 0000 	ldr.w	r0, [lr]
 800ddd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dde0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dde4:	b292      	uxth	r2, r2
 800dde6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ddea:	45e1      	cmp	r9, ip
 800ddec:	f84e 2b04 	str.w	r2, [lr], #4
 800ddf0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ddf4:	d2de      	bcs.n	800ddb4 <quorem+0x42>
 800ddf6:	9b00      	ldr	r3, [sp, #0]
 800ddf8:	58eb      	ldr	r3, [r5, r3]
 800ddfa:	b92b      	cbnz	r3, 800de08 <quorem+0x96>
 800ddfc:	9b01      	ldr	r3, [sp, #4]
 800ddfe:	3b04      	subs	r3, #4
 800de00:	429d      	cmp	r5, r3
 800de02:	461a      	mov	r2, r3
 800de04:	d32f      	bcc.n	800de66 <quorem+0xf4>
 800de06:	613c      	str	r4, [r7, #16]
 800de08:	4638      	mov	r0, r7
 800de0a:	f001 f97b 	bl	800f104 <__mcmp>
 800de0e:	2800      	cmp	r0, #0
 800de10:	db25      	blt.n	800de5e <quorem+0xec>
 800de12:	4629      	mov	r1, r5
 800de14:	2000      	movs	r0, #0
 800de16:	f858 2b04 	ldr.w	r2, [r8], #4
 800de1a:	f8d1 c000 	ldr.w	ip, [r1]
 800de1e:	fa1f fe82 	uxth.w	lr, r2
 800de22:	fa1f f38c 	uxth.w	r3, ip
 800de26:	eba3 030e 	sub.w	r3, r3, lr
 800de2a:	4403      	add	r3, r0
 800de2c:	0c12      	lsrs	r2, r2, #16
 800de2e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800de32:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800de36:	b29b      	uxth	r3, r3
 800de38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de3c:	45c1      	cmp	r9, r8
 800de3e:	f841 3b04 	str.w	r3, [r1], #4
 800de42:	ea4f 4022 	mov.w	r0, r2, asr #16
 800de46:	d2e6      	bcs.n	800de16 <quorem+0xa4>
 800de48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de50:	b922      	cbnz	r2, 800de5c <quorem+0xea>
 800de52:	3b04      	subs	r3, #4
 800de54:	429d      	cmp	r5, r3
 800de56:	461a      	mov	r2, r3
 800de58:	d30b      	bcc.n	800de72 <quorem+0x100>
 800de5a:	613c      	str	r4, [r7, #16]
 800de5c:	3601      	adds	r6, #1
 800de5e:	4630      	mov	r0, r6
 800de60:	b003      	add	sp, #12
 800de62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de66:	6812      	ldr	r2, [r2, #0]
 800de68:	3b04      	subs	r3, #4
 800de6a:	2a00      	cmp	r2, #0
 800de6c:	d1cb      	bne.n	800de06 <quorem+0x94>
 800de6e:	3c01      	subs	r4, #1
 800de70:	e7c6      	b.n	800de00 <quorem+0x8e>
 800de72:	6812      	ldr	r2, [r2, #0]
 800de74:	3b04      	subs	r3, #4
 800de76:	2a00      	cmp	r2, #0
 800de78:	d1ef      	bne.n	800de5a <quorem+0xe8>
 800de7a:	3c01      	subs	r4, #1
 800de7c:	e7ea      	b.n	800de54 <quorem+0xe2>
 800de7e:	2000      	movs	r0, #0
 800de80:	e7ee      	b.n	800de60 <quorem+0xee>
 800de82:	0000      	movs	r0, r0
 800de84:	0000      	movs	r0, r0
	...

0800de88 <_dtoa_r>:
 800de88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de8c:	69c7      	ldr	r7, [r0, #28]
 800de8e:	b099      	sub	sp, #100	@ 0x64
 800de90:	ed8d 0b02 	vstr	d0, [sp, #8]
 800de94:	ec55 4b10 	vmov	r4, r5, d0
 800de98:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800de9a:	9109      	str	r1, [sp, #36]	@ 0x24
 800de9c:	4683      	mov	fp, r0
 800de9e:	920e      	str	r2, [sp, #56]	@ 0x38
 800dea0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dea2:	b97f      	cbnz	r7, 800dec4 <_dtoa_r+0x3c>
 800dea4:	2010      	movs	r0, #16
 800dea6:	f000 fdfd 	bl	800eaa4 <malloc>
 800deaa:	4602      	mov	r2, r0
 800deac:	f8cb 001c 	str.w	r0, [fp, #28]
 800deb0:	b920      	cbnz	r0, 800debc <_dtoa_r+0x34>
 800deb2:	4ba7      	ldr	r3, [pc, #668]	@ (800e150 <_dtoa_r+0x2c8>)
 800deb4:	21ef      	movs	r1, #239	@ 0xef
 800deb6:	48a7      	ldr	r0, [pc, #668]	@ (800e154 <_dtoa_r+0x2cc>)
 800deb8:	f001 fc5a 	bl	800f770 <__assert_func>
 800debc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dec0:	6007      	str	r7, [r0, #0]
 800dec2:	60c7      	str	r7, [r0, #12]
 800dec4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dec8:	6819      	ldr	r1, [r3, #0]
 800deca:	b159      	cbz	r1, 800dee4 <_dtoa_r+0x5c>
 800decc:	685a      	ldr	r2, [r3, #4]
 800dece:	604a      	str	r2, [r1, #4]
 800ded0:	2301      	movs	r3, #1
 800ded2:	4093      	lsls	r3, r2
 800ded4:	608b      	str	r3, [r1, #8]
 800ded6:	4658      	mov	r0, fp
 800ded8:	f000 feda 	bl	800ec90 <_Bfree>
 800dedc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dee0:	2200      	movs	r2, #0
 800dee2:	601a      	str	r2, [r3, #0]
 800dee4:	1e2b      	subs	r3, r5, #0
 800dee6:	bfb9      	ittee	lt
 800dee8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800deec:	9303      	strlt	r3, [sp, #12]
 800deee:	2300      	movge	r3, #0
 800def0:	6033      	strge	r3, [r6, #0]
 800def2:	9f03      	ldr	r7, [sp, #12]
 800def4:	4b98      	ldr	r3, [pc, #608]	@ (800e158 <_dtoa_r+0x2d0>)
 800def6:	bfbc      	itt	lt
 800def8:	2201      	movlt	r2, #1
 800defa:	6032      	strlt	r2, [r6, #0]
 800defc:	43bb      	bics	r3, r7
 800defe:	d112      	bne.n	800df26 <_dtoa_r+0x9e>
 800df00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800df02:	f242 730f 	movw	r3, #9999	@ 0x270f
 800df06:	6013      	str	r3, [r2, #0]
 800df08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800df0c:	4323      	orrs	r3, r4
 800df0e:	f000 854d 	beq.w	800e9ac <_dtoa_r+0xb24>
 800df12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800df14:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e16c <_dtoa_r+0x2e4>
 800df18:	2b00      	cmp	r3, #0
 800df1a:	f000 854f 	beq.w	800e9bc <_dtoa_r+0xb34>
 800df1e:	f10a 0303 	add.w	r3, sl, #3
 800df22:	f000 bd49 	b.w	800e9b8 <_dtoa_r+0xb30>
 800df26:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df2a:	2200      	movs	r2, #0
 800df2c:	ec51 0b17 	vmov	r0, r1, d7
 800df30:	2300      	movs	r3, #0
 800df32:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800df36:	f7f2 fdc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800df3a:	4680      	mov	r8, r0
 800df3c:	b158      	cbz	r0, 800df56 <_dtoa_r+0xce>
 800df3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800df40:	2301      	movs	r3, #1
 800df42:	6013      	str	r3, [r2, #0]
 800df44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800df46:	b113      	cbz	r3, 800df4e <_dtoa_r+0xc6>
 800df48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800df4a:	4b84      	ldr	r3, [pc, #528]	@ (800e15c <_dtoa_r+0x2d4>)
 800df4c:	6013      	str	r3, [r2, #0]
 800df4e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e170 <_dtoa_r+0x2e8>
 800df52:	f000 bd33 	b.w	800e9bc <_dtoa_r+0xb34>
 800df56:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800df5a:	aa16      	add	r2, sp, #88	@ 0x58
 800df5c:	a917      	add	r1, sp, #92	@ 0x5c
 800df5e:	4658      	mov	r0, fp
 800df60:	f001 f980 	bl	800f264 <__d2b>
 800df64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800df68:	4681      	mov	r9, r0
 800df6a:	2e00      	cmp	r6, #0
 800df6c:	d077      	beq.n	800e05e <_dtoa_r+0x1d6>
 800df6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800df70:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800df74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800df80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800df84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800df88:	4619      	mov	r1, r3
 800df8a:	2200      	movs	r2, #0
 800df8c:	4b74      	ldr	r3, [pc, #464]	@ (800e160 <_dtoa_r+0x2d8>)
 800df8e:	f7f2 f97b 	bl	8000288 <__aeabi_dsub>
 800df92:	a369      	add	r3, pc, #420	@ (adr r3, 800e138 <_dtoa_r+0x2b0>)
 800df94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df98:	f7f2 fb2e 	bl	80005f8 <__aeabi_dmul>
 800df9c:	a368      	add	r3, pc, #416	@ (adr r3, 800e140 <_dtoa_r+0x2b8>)
 800df9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa2:	f7f2 f973 	bl	800028c <__adddf3>
 800dfa6:	4604      	mov	r4, r0
 800dfa8:	4630      	mov	r0, r6
 800dfaa:	460d      	mov	r5, r1
 800dfac:	f7f2 faba 	bl	8000524 <__aeabi_i2d>
 800dfb0:	a365      	add	r3, pc, #404	@ (adr r3, 800e148 <_dtoa_r+0x2c0>)
 800dfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb6:	f7f2 fb1f 	bl	80005f8 <__aeabi_dmul>
 800dfba:	4602      	mov	r2, r0
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	4629      	mov	r1, r5
 800dfc2:	f7f2 f963 	bl	800028c <__adddf3>
 800dfc6:	4604      	mov	r4, r0
 800dfc8:	460d      	mov	r5, r1
 800dfca:	f7f2 fdc5 	bl	8000b58 <__aeabi_d2iz>
 800dfce:	2200      	movs	r2, #0
 800dfd0:	4607      	mov	r7, r0
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	4620      	mov	r0, r4
 800dfd6:	4629      	mov	r1, r5
 800dfd8:	f7f2 fd80 	bl	8000adc <__aeabi_dcmplt>
 800dfdc:	b140      	cbz	r0, 800dff0 <_dtoa_r+0x168>
 800dfde:	4638      	mov	r0, r7
 800dfe0:	f7f2 faa0 	bl	8000524 <__aeabi_i2d>
 800dfe4:	4622      	mov	r2, r4
 800dfe6:	462b      	mov	r3, r5
 800dfe8:	f7f2 fd6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfec:	b900      	cbnz	r0, 800dff0 <_dtoa_r+0x168>
 800dfee:	3f01      	subs	r7, #1
 800dff0:	2f16      	cmp	r7, #22
 800dff2:	d851      	bhi.n	800e098 <_dtoa_r+0x210>
 800dff4:	4b5b      	ldr	r3, [pc, #364]	@ (800e164 <_dtoa_r+0x2dc>)
 800dff6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e002:	f7f2 fd6b 	bl	8000adc <__aeabi_dcmplt>
 800e006:	2800      	cmp	r0, #0
 800e008:	d048      	beq.n	800e09c <_dtoa_r+0x214>
 800e00a:	3f01      	subs	r7, #1
 800e00c:	2300      	movs	r3, #0
 800e00e:	9312      	str	r3, [sp, #72]	@ 0x48
 800e010:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e012:	1b9b      	subs	r3, r3, r6
 800e014:	1e5a      	subs	r2, r3, #1
 800e016:	bf44      	itt	mi
 800e018:	f1c3 0801 	rsbmi	r8, r3, #1
 800e01c:	2300      	movmi	r3, #0
 800e01e:	9208      	str	r2, [sp, #32]
 800e020:	bf54      	ite	pl
 800e022:	f04f 0800 	movpl.w	r8, #0
 800e026:	9308      	strmi	r3, [sp, #32]
 800e028:	2f00      	cmp	r7, #0
 800e02a:	db39      	blt.n	800e0a0 <_dtoa_r+0x218>
 800e02c:	9b08      	ldr	r3, [sp, #32]
 800e02e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e030:	443b      	add	r3, r7
 800e032:	9308      	str	r3, [sp, #32]
 800e034:	2300      	movs	r3, #0
 800e036:	930a      	str	r3, [sp, #40]	@ 0x28
 800e038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e03a:	2b09      	cmp	r3, #9
 800e03c:	d864      	bhi.n	800e108 <_dtoa_r+0x280>
 800e03e:	2b05      	cmp	r3, #5
 800e040:	bfc4      	itt	gt
 800e042:	3b04      	subgt	r3, #4
 800e044:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e048:	f1a3 0302 	sub.w	r3, r3, #2
 800e04c:	bfcc      	ite	gt
 800e04e:	2400      	movgt	r4, #0
 800e050:	2401      	movle	r4, #1
 800e052:	2b03      	cmp	r3, #3
 800e054:	d863      	bhi.n	800e11e <_dtoa_r+0x296>
 800e056:	e8df f003 	tbb	[pc, r3]
 800e05a:	372a      	.short	0x372a
 800e05c:	5535      	.short	0x5535
 800e05e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e062:	441e      	add	r6, r3
 800e064:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e068:	2b20      	cmp	r3, #32
 800e06a:	bfc1      	itttt	gt
 800e06c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e070:	409f      	lslgt	r7, r3
 800e072:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e076:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e07a:	bfd6      	itet	le
 800e07c:	f1c3 0320 	rsble	r3, r3, #32
 800e080:	ea47 0003 	orrgt.w	r0, r7, r3
 800e084:	fa04 f003 	lslle.w	r0, r4, r3
 800e088:	f7f2 fa3c 	bl	8000504 <__aeabi_ui2d>
 800e08c:	2201      	movs	r2, #1
 800e08e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e092:	3e01      	subs	r6, #1
 800e094:	9214      	str	r2, [sp, #80]	@ 0x50
 800e096:	e777      	b.n	800df88 <_dtoa_r+0x100>
 800e098:	2301      	movs	r3, #1
 800e09a:	e7b8      	b.n	800e00e <_dtoa_r+0x186>
 800e09c:	9012      	str	r0, [sp, #72]	@ 0x48
 800e09e:	e7b7      	b.n	800e010 <_dtoa_r+0x188>
 800e0a0:	427b      	negs	r3, r7
 800e0a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	eba8 0807 	sub.w	r8, r8, r7
 800e0aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e0ac:	e7c4      	b.n	800e038 <_dtoa_r+0x1b0>
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e0b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	dc35      	bgt.n	800e124 <_dtoa_r+0x29c>
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	9300      	str	r3, [sp, #0]
 800e0bc:	9307      	str	r3, [sp, #28]
 800e0be:	461a      	mov	r2, r3
 800e0c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e0c2:	e00b      	b.n	800e0dc <_dtoa_r+0x254>
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	e7f3      	b.n	800e0b0 <_dtoa_r+0x228>
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e0cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0ce:	18fb      	adds	r3, r7, r3
 800e0d0:	9300      	str	r3, [sp, #0]
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	2b01      	cmp	r3, #1
 800e0d6:	9307      	str	r3, [sp, #28]
 800e0d8:	bfb8      	it	lt
 800e0da:	2301      	movlt	r3, #1
 800e0dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e0e0:	2100      	movs	r1, #0
 800e0e2:	2204      	movs	r2, #4
 800e0e4:	f102 0514 	add.w	r5, r2, #20
 800e0e8:	429d      	cmp	r5, r3
 800e0ea:	d91f      	bls.n	800e12c <_dtoa_r+0x2a4>
 800e0ec:	6041      	str	r1, [r0, #4]
 800e0ee:	4658      	mov	r0, fp
 800e0f0:	f000 fd8e 	bl	800ec10 <_Balloc>
 800e0f4:	4682      	mov	sl, r0
 800e0f6:	2800      	cmp	r0, #0
 800e0f8:	d13c      	bne.n	800e174 <_dtoa_r+0x2ec>
 800e0fa:	4b1b      	ldr	r3, [pc, #108]	@ (800e168 <_dtoa_r+0x2e0>)
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	f240 11af 	movw	r1, #431	@ 0x1af
 800e102:	e6d8      	b.n	800deb6 <_dtoa_r+0x2e>
 800e104:	2301      	movs	r3, #1
 800e106:	e7e0      	b.n	800e0ca <_dtoa_r+0x242>
 800e108:	2401      	movs	r4, #1
 800e10a:	2300      	movs	r3, #0
 800e10c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e10e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e110:	f04f 33ff 	mov.w	r3, #4294967295
 800e114:	9300      	str	r3, [sp, #0]
 800e116:	9307      	str	r3, [sp, #28]
 800e118:	2200      	movs	r2, #0
 800e11a:	2312      	movs	r3, #18
 800e11c:	e7d0      	b.n	800e0c0 <_dtoa_r+0x238>
 800e11e:	2301      	movs	r3, #1
 800e120:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e122:	e7f5      	b.n	800e110 <_dtoa_r+0x288>
 800e124:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e126:	9300      	str	r3, [sp, #0]
 800e128:	9307      	str	r3, [sp, #28]
 800e12a:	e7d7      	b.n	800e0dc <_dtoa_r+0x254>
 800e12c:	3101      	adds	r1, #1
 800e12e:	0052      	lsls	r2, r2, #1
 800e130:	e7d8      	b.n	800e0e4 <_dtoa_r+0x25c>
 800e132:	bf00      	nop
 800e134:	f3af 8000 	nop.w
 800e138:	636f4361 	.word	0x636f4361
 800e13c:	3fd287a7 	.word	0x3fd287a7
 800e140:	8b60c8b3 	.word	0x8b60c8b3
 800e144:	3fc68a28 	.word	0x3fc68a28
 800e148:	509f79fb 	.word	0x509f79fb
 800e14c:	3fd34413 	.word	0x3fd34413
 800e150:	080110e2 	.word	0x080110e2
 800e154:	080110f9 	.word	0x080110f9
 800e158:	7ff00000 	.word	0x7ff00000
 800e15c:	080110b2 	.word	0x080110b2
 800e160:	3ff80000 	.word	0x3ff80000
 800e164:	080111f0 	.word	0x080111f0
 800e168:	08011151 	.word	0x08011151
 800e16c:	080110de 	.word	0x080110de
 800e170:	080110b1 	.word	0x080110b1
 800e174:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e178:	6018      	str	r0, [r3, #0]
 800e17a:	9b07      	ldr	r3, [sp, #28]
 800e17c:	2b0e      	cmp	r3, #14
 800e17e:	f200 80a4 	bhi.w	800e2ca <_dtoa_r+0x442>
 800e182:	2c00      	cmp	r4, #0
 800e184:	f000 80a1 	beq.w	800e2ca <_dtoa_r+0x442>
 800e188:	2f00      	cmp	r7, #0
 800e18a:	dd33      	ble.n	800e1f4 <_dtoa_r+0x36c>
 800e18c:	4bad      	ldr	r3, [pc, #692]	@ (800e444 <_dtoa_r+0x5bc>)
 800e18e:	f007 020f 	and.w	r2, r7, #15
 800e192:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e196:	ed93 7b00 	vldr	d7, [r3]
 800e19a:	05f8      	lsls	r0, r7, #23
 800e19c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e1a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e1a4:	d516      	bpl.n	800e1d4 <_dtoa_r+0x34c>
 800e1a6:	4ba8      	ldr	r3, [pc, #672]	@ (800e448 <_dtoa_r+0x5c0>)
 800e1a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e1ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e1b0:	f7f2 fb4c 	bl	800084c <__aeabi_ddiv>
 800e1b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1b8:	f004 040f 	and.w	r4, r4, #15
 800e1bc:	2603      	movs	r6, #3
 800e1be:	4da2      	ldr	r5, [pc, #648]	@ (800e448 <_dtoa_r+0x5c0>)
 800e1c0:	b954      	cbnz	r4, 800e1d8 <_dtoa_r+0x350>
 800e1c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e1c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1ca:	f7f2 fb3f 	bl	800084c <__aeabi_ddiv>
 800e1ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1d2:	e028      	b.n	800e226 <_dtoa_r+0x39e>
 800e1d4:	2602      	movs	r6, #2
 800e1d6:	e7f2      	b.n	800e1be <_dtoa_r+0x336>
 800e1d8:	07e1      	lsls	r1, r4, #31
 800e1da:	d508      	bpl.n	800e1ee <_dtoa_r+0x366>
 800e1dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e1e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e1e4:	f7f2 fa08 	bl	80005f8 <__aeabi_dmul>
 800e1e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e1ec:	3601      	adds	r6, #1
 800e1ee:	1064      	asrs	r4, r4, #1
 800e1f0:	3508      	adds	r5, #8
 800e1f2:	e7e5      	b.n	800e1c0 <_dtoa_r+0x338>
 800e1f4:	f000 80d2 	beq.w	800e39c <_dtoa_r+0x514>
 800e1f8:	427c      	negs	r4, r7
 800e1fa:	4b92      	ldr	r3, [pc, #584]	@ (800e444 <_dtoa_r+0x5bc>)
 800e1fc:	4d92      	ldr	r5, [pc, #584]	@ (800e448 <_dtoa_r+0x5c0>)
 800e1fe:	f004 020f 	and.w	r2, r4, #15
 800e202:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e20a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e20e:	f7f2 f9f3 	bl	80005f8 <__aeabi_dmul>
 800e212:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e216:	1124      	asrs	r4, r4, #4
 800e218:	2300      	movs	r3, #0
 800e21a:	2602      	movs	r6, #2
 800e21c:	2c00      	cmp	r4, #0
 800e21e:	f040 80b2 	bne.w	800e386 <_dtoa_r+0x4fe>
 800e222:	2b00      	cmp	r3, #0
 800e224:	d1d3      	bne.n	800e1ce <_dtoa_r+0x346>
 800e226:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e228:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	f000 80b7 	beq.w	800e3a0 <_dtoa_r+0x518>
 800e232:	4b86      	ldr	r3, [pc, #536]	@ (800e44c <_dtoa_r+0x5c4>)
 800e234:	2200      	movs	r2, #0
 800e236:	4620      	mov	r0, r4
 800e238:	4629      	mov	r1, r5
 800e23a:	f7f2 fc4f 	bl	8000adc <__aeabi_dcmplt>
 800e23e:	2800      	cmp	r0, #0
 800e240:	f000 80ae 	beq.w	800e3a0 <_dtoa_r+0x518>
 800e244:	9b07      	ldr	r3, [sp, #28]
 800e246:	2b00      	cmp	r3, #0
 800e248:	f000 80aa 	beq.w	800e3a0 <_dtoa_r+0x518>
 800e24c:	9b00      	ldr	r3, [sp, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	dd37      	ble.n	800e2c2 <_dtoa_r+0x43a>
 800e252:	1e7b      	subs	r3, r7, #1
 800e254:	9304      	str	r3, [sp, #16]
 800e256:	4620      	mov	r0, r4
 800e258:	4b7d      	ldr	r3, [pc, #500]	@ (800e450 <_dtoa_r+0x5c8>)
 800e25a:	2200      	movs	r2, #0
 800e25c:	4629      	mov	r1, r5
 800e25e:	f7f2 f9cb 	bl	80005f8 <__aeabi_dmul>
 800e262:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e266:	9c00      	ldr	r4, [sp, #0]
 800e268:	3601      	adds	r6, #1
 800e26a:	4630      	mov	r0, r6
 800e26c:	f7f2 f95a 	bl	8000524 <__aeabi_i2d>
 800e270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e274:	f7f2 f9c0 	bl	80005f8 <__aeabi_dmul>
 800e278:	4b76      	ldr	r3, [pc, #472]	@ (800e454 <_dtoa_r+0x5cc>)
 800e27a:	2200      	movs	r2, #0
 800e27c:	f7f2 f806 	bl	800028c <__adddf3>
 800e280:	4605      	mov	r5, r0
 800e282:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e286:	2c00      	cmp	r4, #0
 800e288:	f040 808d 	bne.w	800e3a6 <_dtoa_r+0x51e>
 800e28c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e290:	4b71      	ldr	r3, [pc, #452]	@ (800e458 <_dtoa_r+0x5d0>)
 800e292:	2200      	movs	r2, #0
 800e294:	f7f1 fff8 	bl	8000288 <__aeabi_dsub>
 800e298:	4602      	mov	r2, r0
 800e29a:	460b      	mov	r3, r1
 800e29c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e2a0:	462a      	mov	r2, r5
 800e2a2:	4633      	mov	r3, r6
 800e2a4:	f7f2 fc38 	bl	8000b18 <__aeabi_dcmpgt>
 800e2a8:	2800      	cmp	r0, #0
 800e2aa:	f040 828b 	bne.w	800e7c4 <_dtoa_r+0x93c>
 800e2ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2b2:	462a      	mov	r2, r5
 800e2b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e2b8:	f7f2 fc10 	bl	8000adc <__aeabi_dcmplt>
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	f040 8128 	bne.w	800e512 <_dtoa_r+0x68a>
 800e2c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e2c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e2ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	f2c0 815a 	blt.w	800e586 <_dtoa_r+0x6fe>
 800e2d2:	2f0e      	cmp	r7, #14
 800e2d4:	f300 8157 	bgt.w	800e586 <_dtoa_r+0x6fe>
 800e2d8:	4b5a      	ldr	r3, [pc, #360]	@ (800e444 <_dtoa_r+0x5bc>)
 800e2da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e2de:	ed93 7b00 	vldr	d7, [r3]
 800e2e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	ed8d 7b00 	vstr	d7, [sp]
 800e2ea:	da03      	bge.n	800e2f4 <_dtoa_r+0x46c>
 800e2ec:	9b07      	ldr	r3, [sp, #28]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	f340 8101 	ble.w	800e4f6 <_dtoa_r+0x66e>
 800e2f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e2f8:	4656      	mov	r6, sl
 800e2fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2fe:	4620      	mov	r0, r4
 800e300:	4629      	mov	r1, r5
 800e302:	f7f2 faa3 	bl	800084c <__aeabi_ddiv>
 800e306:	f7f2 fc27 	bl	8000b58 <__aeabi_d2iz>
 800e30a:	4680      	mov	r8, r0
 800e30c:	f7f2 f90a 	bl	8000524 <__aeabi_i2d>
 800e310:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e314:	f7f2 f970 	bl	80005f8 <__aeabi_dmul>
 800e318:	4602      	mov	r2, r0
 800e31a:	460b      	mov	r3, r1
 800e31c:	4620      	mov	r0, r4
 800e31e:	4629      	mov	r1, r5
 800e320:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e324:	f7f1 ffb0 	bl	8000288 <__aeabi_dsub>
 800e328:	f806 4b01 	strb.w	r4, [r6], #1
 800e32c:	9d07      	ldr	r5, [sp, #28]
 800e32e:	eba6 040a 	sub.w	r4, r6, sl
 800e332:	42a5      	cmp	r5, r4
 800e334:	4602      	mov	r2, r0
 800e336:	460b      	mov	r3, r1
 800e338:	f040 8117 	bne.w	800e56a <_dtoa_r+0x6e2>
 800e33c:	f7f1 ffa6 	bl	800028c <__adddf3>
 800e340:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e344:	4604      	mov	r4, r0
 800e346:	460d      	mov	r5, r1
 800e348:	f7f2 fbe6 	bl	8000b18 <__aeabi_dcmpgt>
 800e34c:	2800      	cmp	r0, #0
 800e34e:	f040 80f9 	bne.w	800e544 <_dtoa_r+0x6bc>
 800e352:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e356:	4620      	mov	r0, r4
 800e358:	4629      	mov	r1, r5
 800e35a:	f7f2 fbb5 	bl	8000ac8 <__aeabi_dcmpeq>
 800e35e:	b118      	cbz	r0, 800e368 <_dtoa_r+0x4e0>
 800e360:	f018 0f01 	tst.w	r8, #1
 800e364:	f040 80ee 	bne.w	800e544 <_dtoa_r+0x6bc>
 800e368:	4649      	mov	r1, r9
 800e36a:	4658      	mov	r0, fp
 800e36c:	f000 fc90 	bl	800ec90 <_Bfree>
 800e370:	2300      	movs	r3, #0
 800e372:	7033      	strb	r3, [r6, #0]
 800e374:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e376:	3701      	adds	r7, #1
 800e378:	601f      	str	r7, [r3, #0]
 800e37a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	f000 831d 	beq.w	800e9bc <_dtoa_r+0xb34>
 800e382:	601e      	str	r6, [r3, #0]
 800e384:	e31a      	b.n	800e9bc <_dtoa_r+0xb34>
 800e386:	07e2      	lsls	r2, r4, #31
 800e388:	d505      	bpl.n	800e396 <_dtoa_r+0x50e>
 800e38a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e38e:	f7f2 f933 	bl	80005f8 <__aeabi_dmul>
 800e392:	3601      	adds	r6, #1
 800e394:	2301      	movs	r3, #1
 800e396:	1064      	asrs	r4, r4, #1
 800e398:	3508      	adds	r5, #8
 800e39a:	e73f      	b.n	800e21c <_dtoa_r+0x394>
 800e39c:	2602      	movs	r6, #2
 800e39e:	e742      	b.n	800e226 <_dtoa_r+0x39e>
 800e3a0:	9c07      	ldr	r4, [sp, #28]
 800e3a2:	9704      	str	r7, [sp, #16]
 800e3a4:	e761      	b.n	800e26a <_dtoa_r+0x3e2>
 800e3a6:	4b27      	ldr	r3, [pc, #156]	@ (800e444 <_dtoa_r+0x5bc>)
 800e3a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e3aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e3ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e3b2:	4454      	add	r4, sl
 800e3b4:	2900      	cmp	r1, #0
 800e3b6:	d053      	beq.n	800e460 <_dtoa_r+0x5d8>
 800e3b8:	4928      	ldr	r1, [pc, #160]	@ (800e45c <_dtoa_r+0x5d4>)
 800e3ba:	2000      	movs	r0, #0
 800e3bc:	f7f2 fa46 	bl	800084c <__aeabi_ddiv>
 800e3c0:	4633      	mov	r3, r6
 800e3c2:	462a      	mov	r2, r5
 800e3c4:	f7f1 ff60 	bl	8000288 <__aeabi_dsub>
 800e3c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e3cc:	4656      	mov	r6, sl
 800e3ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3d2:	f7f2 fbc1 	bl	8000b58 <__aeabi_d2iz>
 800e3d6:	4605      	mov	r5, r0
 800e3d8:	f7f2 f8a4 	bl	8000524 <__aeabi_i2d>
 800e3dc:	4602      	mov	r2, r0
 800e3de:	460b      	mov	r3, r1
 800e3e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3e4:	f7f1 ff50 	bl	8000288 <__aeabi_dsub>
 800e3e8:	3530      	adds	r5, #48	@ 0x30
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	460b      	mov	r3, r1
 800e3ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e3f2:	f806 5b01 	strb.w	r5, [r6], #1
 800e3f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e3fa:	f7f2 fb6f 	bl	8000adc <__aeabi_dcmplt>
 800e3fe:	2800      	cmp	r0, #0
 800e400:	d171      	bne.n	800e4e6 <_dtoa_r+0x65e>
 800e402:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e406:	4911      	ldr	r1, [pc, #68]	@ (800e44c <_dtoa_r+0x5c4>)
 800e408:	2000      	movs	r0, #0
 800e40a:	f7f1 ff3d 	bl	8000288 <__aeabi_dsub>
 800e40e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e412:	f7f2 fb63 	bl	8000adc <__aeabi_dcmplt>
 800e416:	2800      	cmp	r0, #0
 800e418:	f040 8095 	bne.w	800e546 <_dtoa_r+0x6be>
 800e41c:	42a6      	cmp	r6, r4
 800e41e:	f43f af50 	beq.w	800e2c2 <_dtoa_r+0x43a>
 800e422:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e426:	4b0a      	ldr	r3, [pc, #40]	@ (800e450 <_dtoa_r+0x5c8>)
 800e428:	2200      	movs	r2, #0
 800e42a:	f7f2 f8e5 	bl	80005f8 <__aeabi_dmul>
 800e42e:	4b08      	ldr	r3, [pc, #32]	@ (800e450 <_dtoa_r+0x5c8>)
 800e430:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e434:	2200      	movs	r2, #0
 800e436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e43a:	f7f2 f8dd 	bl	80005f8 <__aeabi_dmul>
 800e43e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e442:	e7c4      	b.n	800e3ce <_dtoa_r+0x546>
 800e444:	080111f0 	.word	0x080111f0
 800e448:	080111c8 	.word	0x080111c8
 800e44c:	3ff00000 	.word	0x3ff00000
 800e450:	40240000 	.word	0x40240000
 800e454:	401c0000 	.word	0x401c0000
 800e458:	40140000 	.word	0x40140000
 800e45c:	3fe00000 	.word	0x3fe00000
 800e460:	4631      	mov	r1, r6
 800e462:	4628      	mov	r0, r5
 800e464:	f7f2 f8c8 	bl	80005f8 <__aeabi_dmul>
 800e468:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e46c:	9415      	str	r4, [sp, #84]	@ 0x54
 800e46e:	4656      	mov	r6, sl
 800e470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e474:	f7f2 fb70 	bl	8000b58 <__aeabi_d2iz>
 800e478:	4605      	mov	r5, r0
 800e47a:	f7f2 f853 	bl	8000524 <__aeabi_i2d>
 800e47e:	4602      	mov	r2, r0
 800e480:	460b      	mov	r3, r1
 800e482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e486:	f7f1 feff 	bl	8000288 <__aeabi_dsub>
 800e48a:	3530      	adds	r5, #48	@ 0x30
 800e48c:	f806 5b01 	strb.w	r5, [r6], #1
 800e490:	4602      	mov	r2, r0
 800e492:	460b      	mov	r3, r1
 800e494:	42a6      	cmp	r6, r4
 800e496:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e49a:	f04f 0200 	mov.w	r2, #0
 800e49e:	d124      	bne.n	800e4ea <_dtoa_r+0x662>
 800e4a0:	4bac      	ldr	r3, [pc, #688]	@ (800e754 <_dtoa_r+0x8cc>)
 800e4a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e4a6:	f7f1 fef1 	bl	800028c <__adddf3>
 800e4aa:	4602      	mov	r2, r0
 800e4ac:	460b      	mov	r3, r1
 800e4ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4b2:	f7f2 fb31 	bl	8000b18 <__aeabi_dcmpgt>
 800e4b6:	2800      	cmp	r0, #0
 800e4b8:	d145      	bne.n	800e546 <_dtoa_r+0x6be>
 800e4ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e4be:	49a5      	ldr	r1, [pc, #660]	@ (800e754 <_dtoa_r+0x8cc>)
 800e4c0:	2000      	movs	r0, #0
 800e4c2:	f7f1 fee1 	bl	8000288 <__aeabi_dsub>
 800e4c6:	4602      	mov	r2, r0
 800e4c8:	460b      	mov	r3, r1
 800e4ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4ce:	f7f2 fb05 	bl	8000adc <__aeabi_dcmplt>
 800e4d2:	2800      	cmp	r0, #0
 800e4d4:	f43f aef5 	beq.w	800e2c2 <_dtoa_r+0x43a>
 800e4d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e4da:	1e73      	subs	r3, r6, #1
 800e4dc:	9315      	str	r3, [sp, #84]	@ 0x54
 800e4de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e4e2:	2b30      	cmp	r3, #48	@ 0x30
 800e4e4:	d0f8      	beq.n	800e4d8 <_dtoa_r+0x650>
 800e4e6:	9f04      	ldr	r7, [sp, #16]
 800e4e8:	e73e      	b.n	800e368 <_dtoa_r+0x4e0>
 800e4ea:	4b9b      	ldr	r3, [pc, #620]	@ (800e758 <_dtoa_r+0x8d0>)
 800e4ec:	f7f2 f884 	bl	80005f8 <__aeabi_dmul>
 800e4f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4f4:	e7bc      	b.n	800e470 <_dtoa_r+0x5e8>
 800e4f6:	d10c      	bne.n	800e512 <_dtoa_r+0x68a>
 800e4f8:	4b98      	ldr	r3, [pc, #608]	@ (800e75c <_dtoa_r+0x8d4>)
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e500:	f7f2 f87a 	bl	80005f8 <__aeabi_dmul>
 800e504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e508:	f7f2 fafc 	bl	8000b04 <__aeabi_dcmpge>
 800e50c:	2800      	cmp	r0, #0
 800e50e:	f000 8157 	beq.w	800e7c0 <_dtoa_r+0x938>
 800e512:	2400      	movs	r4, #0
 800e514:	4625      	mov	r5, r4
 800e516:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e518:	43db      	mvns	r3, r3
 800e51a:	9304      	str	r3, [sp, #16]
 800e51c:	4656      	mov	r6, sl
 800e51e:	2700      	movs	r7, #0
 800e520:	4621      	mov	r1, r4
 800e522:	4658      	mov	r0, fp
 800e524:	f000 fbb4 	bl	800ec90 <_Bfree>
 800e528:	2d00      	cmp	r5, #0
 800e52a:	d0dc      	beq.n	800e4e6 <_dtoa_r+0x65e>
 800e52c:	b12f      	cbz	r7, 800e53a <_dtoa_r+0x6b2>
 800e52e:	42af      	cmp	r7, r5
 800e530:	d003      	beq.n	800e53a <_dtoa_r+0x6b2>
 800e532:	4639      	mov	r1, r7
 800e534:	4658      	mov	r0, fp
 800e536:	f000 fbab 	bl	800ec90 <_Bfree>
 800e53a:	4629      	mov	r1, r5
 800e53c:	4658      	mov	r0, fp
 800e53e:	f000 fba7 	bl	800ec90 <_Bfree>
 800e542:	e7d0      	b.n	800e4e6 <_dtoa_r+0x65e>
 800e544:	9704      	str	r7, [sp, #16]
 800e546:	4633      	mov	r3, r6
 800e548:	461e      	mov	r6, r3
 800e54a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e54e:	2a39      	cmp	r2, #57	@ 0x39
 800e550:	d107      	bne.n	800e562 <_dtoa_r+0x6da>
 800e552:	459a      	cmp	sl, r3
 800e554:	d1f8      	bne.n	800e548 <_dtoa_r+0x6c0>
 800e556:	9a04      	ldr	r2, [sp, #16]
 800e558:	3201      	adds	r2, #1
 800e55a:	9204      	str	r2, [sp, #16]
 800e55c:	2230      	movs	r2, #48	@ 0x30
 800e55e:	f88a 2000 	strb.w	r2, [sl]
 800e562:	781a      	ldrb	r2, [r3, #0]
 800e564:	3201      	adds	r2, #1
 800e566:	701a      	strb	r2, [r3, #0]
 800e568:	e7bd      	b.n	800e4e6 <_dtoa_r+0x65e>
 800e56a:	4b7b      	ldr	r3, [pc, #492]	@ (800e758 <_dtoa_r+0x8d0>)
 800e56c:	2200      	movs	r2, #0
 800e56e:	f7f2 f843 	bl	80005f8 <__aeabi_dmul>
 800e572:	2200      	movs	r2, #0
 800e574:	2300      	movs	r3, #0
 800e576:	4604      	mov	r4, r0
 800e578:	460d      	mov	r5, r1
 800e57a:	f7f2 faa5 	bl	8000ac8 <__aeabi_dcmpeq>
 800e57e:	2800      	cmp	r0, #0
 800e580:	f43f aebb 	beq.w	800e2fa <_dtoa_r+0x472>
 800e584:	e6f0      	b.n	800e368 <_dtoa_r+0x4e0>
 800e586:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e588:	2a00      	cmp	r2, #0
 800e58a:	f000 80db 	beq.w	800e744 <_dtoa_r+0x8bc>
 800e58e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e590:	2a01      	cmp	r2, #1
 800e592:	f300 80bf 	bgt.w	800e714 <_dtoa_r+0x88c>
 800e596:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e598:	2a00      	cmp	r2, #0
 800e59a:	f000 80b7 	beq.w	800e70c <_dtoa_r+0x884>
 800e59e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e5a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e5a4:	4646      	mov	r6, r8
 800e5a6:	9a08      	ldr	r2, [sp, #32]
 800e5a8:	2101      	movs	r1, #1
 800e5aa:	441a      	add	r2, r3
 800e5ac:	4658      	mov	r0, fp
 800e5ae:	4498      	add	r8, r3
 800e5b0:	9208      	str	r2, [sp, #32]
 800e5b2:	f000 fc21 	bl	800edf8 <__i2b>
 800e5b6:	4605      	mov	r5, r0
 800e5b8:	b15e      	cbz	r6, 800e5d2 <_dtoa_r+0x74a>
 800e5ba:	9b08      	ldr	r3, [sp, #32]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	dd08      	ble.n	800e5d2 <_dtoa_r+0x74a>
 800e5c0:	42b3      	cmp	r3, r6
 800e5c2:	9a08      	ldr	r2, [sp, #32]
 800e5c4:	bfa8      	it	ge
 800e5c6:	4633      	movge	r3, r6
 800e5c8:	eba8 0803 	sub.w	r8, r8, r3
 800e5cc:	1af6      	subs	r6, r6, r3
 800e5ce:	1ad3      	subs	r3, r2, r3
 800e5d0:	9308      	str	r3, [sp, #32]
 800e5d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5d4:	b1f3      	cbz	r3, 800e614 <_dtoa_r+0x78c>
 800e5d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	f000 80b7 	beq.w	800e74c <_dtoa_r+0x8c4>
 800e5de:	b18c      	cbz	r4, 800e604 <_dtoa_r+0x77c>
 800e5e0:	4629      	mov	r1, r5
 800e5e2:	4622      	mov	r2, r4
 800e5e4:	4658      	mov	r0, fp
 800e5e6:	f000 fcc7 	bl	800ef78 <__pow5mult>
 800e5ea:	464a      	mov	r2, r9
 800e5ec:	4601      	mov	r1, r0
 800e5ee:	4605      	mov	r5, r0
 800e5f0:	4658      	mov	r0, fp
 800e5f2:	f000 fc17 	bl	800ee24 <__multiply>
 800e5f6:	4649      	mov	r1, r9
 800e5f8:	9004      	str	r0, [sp, #16]
 800e5fa:	4658      	mov	r0, fp
 800e5fc:	f000 fb48 	bl	800ec90 <_Bfree>
 800e600:	9b04      	ldr	r3, [sp, #16]
 800e602:	4699      	mov	r9, r3
 800e604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e606:	1b1a      	subs	r2, r3, r4
 800e608:	d004      	beq.n	800e614 <_dtoa_r+0x78c>
 800e60a:	4649      	mov	r1, r9
 800e60c:	4658      	mov	r0, fp
 800e60e:	f000 fcb3 	bl	800ef78 <__pow5mult>
 800e612:	4681      	mov	r9, r0
 800e614:	2101      	movs	r1, #1
 800e616:	4658      	mov	r0, fp
 800e618:	f000 fbee 	bl	800edf8 <__i2b>
 800e61c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e61e:	4604      	mov	r4, r0
 800e620:	2b00      	cmp	r3, #0
 800e622:	f000 81cf 	beq.w	800e9c4 <_dtoa_r+0xb3c>
 800e626:	461a      	mov	r2, r3
 800e628:	4601      	mov	r1, r0
 800e62a:	4658      	mov	r0, fp
 800e62c:	f000 fca4 	bl	800ef78 <__pow5mult>
 800e630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e632:	2b01      	cmp	r3, #1
 800e634:	4604      	mov	r4, r0
 800e636:	f300 8095 	bgt.w	800e764 <_dtoa_r+0x8dc>
 800e63a:	9b02      	ldr	r3, [sp, #8]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	f040 8087 	bne.w	800e750 <_dtoa_r+0x8c8>
 800e642:	9b03      	ldr	r3, [sp, #12]
 800e644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e648:	2b00      	cmp	r3, #0
 800e64a:	f040 8089 	bne.w	800e760 <_dtoa_r+0x8d8>
 800e64e:	9b03      	ldr	r3, [sp, #12]
 800e650:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e654:	0d1b      	lsrs	r3, r3, #20
 800e656:	051b      	lsls	r3, r3, #20
 800e658:	b12b      	cbz	r3, 800e666 <_dtoa_r+0x7de>
 800e65a:	9b08      	ldr	r3, [sp, #32]
 800e65c:	3301      	adds	r3, #1
 800e65e:	9308      	str	r3, [sp, #32]
 800e660:	f108 0801 	add.w	r8, r8, #1
 800e664:	2301      	movs	r3, #1
 800e666:	930a      	str	r3, [sp, #40]	@ 0x28
 800e668:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	f000 81b0 	beq.w	800e9d0 <_dtoa_r+0xb48>
 800e670:	6923      	ldr	r3, [r4, #16]
 800e672:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e676:	6918      	ldr	r0, [r3, #16]
 800e678:	f000 fb72 	bl	800ed60 <__hi0bits>
 800e67c:	f1c0 0020 	rsb	r0, r0, #32
 800e680:	9b08      	ldr	r3, [sp, #32]
 800e682:	4418      	add	r0, r3
 800e684:	f010 001f 	ands.w	r0, r0, #31
 800e688:	d077      	beq.n	800e77a <_dtoa_r+0x8f2>
 800e68a:	f1c0 0320 	rsb	r3, r0, #32
 800e68e:	2b04      	cmp	r3, #4
 800e690:	dd6b      	ble.n	800e76a <_dtoa_r+0x8e2>
 800e692:	9b08      	ldr	r3, [sp, #32]
 800e694:	f1c0 001c 	rsb	r0, r0, #28
 800e698:	4403      	add	r3, r0
 800e69a:	4480      	add	r8, r0
 800e69c:	4406      	add	r6, r0
 800e69e:	9308      	str	r3, [sp, #32]
 800e6a0:	f1b8 0f00 	cmp.w	r8, #0
 800e6a4:	dd05      	ble.n	800e6b2 <_dtoa_r+0x82a>
 800e6a6:	4649      	mov	r1, r9
 800e6a8:	4642      	mov	r2, r8
 800e6aa:	4658      	mov	r0, fp
 800e6ac:	f000 fcbe 	bl	800f02c <__lshift>
 800e6b0:	4681      	mov	r9, r0
 800e6b2:	9b08      	ldr	r3, [sp, #32]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	dd05      	ble.n	800e6c4 <_dtoa_r+0x83c>
 800e6b8:	4621      	mov	r1, r4
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	4658      	mov	r0, fp
 800e6be:	f000 fcb5 	bl	800f02c <__lshift>
 800e6c2:	4604      	mov	r4, r0
 800e6c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d059      	beq.n	800e77e <_dtoa_r+0x8f6>
 800e6ca:	4621      	mov	r1, r4
 800e6cc:	4648      	mov	r0, r9
 800e6ce:	f000 fd19 	bl	800f104 <__mcmp>
 800e6d2:	2800      	cmp	r0, #0
 800e6d4:	da53      	bge.n	800e77e <_dtoa_r+0x8f6>
 800e6d6:	1e7b      	subs	r3, r7, #1
 800e6d8:	9304      	str	r3, [sp, #16]
 800e6da:	4649      	mov	r1, r9
 800e6dc:	2300      	movs	r3, #0
 800e6de:	220a      	movs	r2, #10
 800e6e0:	4658      	mov	r0, fp
 800e6e2:	f000 faf7 	bl	800ecd4 <__multadd>
 800e6e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6e8:	4681      	mov	r9, r0
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	f000 8172 	beq.w	800e9d4 <_dtoa_r+0xb4c>
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	4629      	mov	r1, r5
 800e6f4:	220a      	movs	r2, #10
 800e6f6:	4658      	mov	r0, fp
 800e6f8:	f000 faec 	bl	800ecd4 <__multadd>
 800e6fc:	9b00      	ldr	r3, [sp, #0]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	4605      	mov	r5, r0
 800e702:	dc67      	bgt.n	800e7d4 <_dtoa_r+0x94c>
 800e704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e706:	2b02      	cmp	r3, #2
 800e708:	dc41      	bgt.n	800e78e <_dtoa_r+0x906>
 800e70a:	e063      	b.n	800e7d4 <_dtoa_r+0x94c>
 800e70c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e70e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e712:	e746      	b.n	800e5a2 <_dtoa_r+0x71a>
 800e714:	9b07      	ldr	r3, [sp, #28]
 800e716:	1e5c      	subs	r4, r3, #1
 800e718:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e71a:	42a3      	cmp	r3, r4
 800e71c:	bfbf      	itttt	lt
 800e71e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e720:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e722:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e724:	1ae3      	sublt	r3, r4, r3
 800e726:	bfb4      	ite	lt
 800e728:	18d2      	addlt	r2, r2, r3
 800e72a:	1b1c      	subge	r4, r3, r4
 800e72c:	9b07      	ldr	r3, [sp, #28]
 800e72e:	bfbc      	itt	lt
 800e730:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e732:	2400      	movlt	r4, #0
 800e734:	2b00      	cmp	r3, #0
 800e736:	bfb5      	itete	lt
 800e738:	eba8 0603 	sublt.w	r6, r8, r3
 800e73c:	9b07      	ldrge	r3, [sp, #28]
 800e73e:	2300      	movlt	r3, #0
 800e740:	4646      	movge	r6, r8
 800e742:	e730      	b.n	800e5a6 <_dtoa_r+0x71e>
 800e744:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e746:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e748:	4646      	mov	r6, r8
 800e74a:	e735      	b.n	800e5b8 <_dtoa_r+0x730>
 800e74c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e74e:	e75c      	b.n	800e60a <_dtoa_r+0x782>
 800e750:	2300      	movs	r3, #0
 800e752:	e788      	b.n	800e666 <_dtoa_r+0x7de>
 800e754:	3fe00000 	.word	0x3fe00000
 800e758:	40240000 	.word	0x40240000
 800e75c:	40140000 	.word	0x40140000
 800e760:	9b02      	ldr	r3, [sp, #8]
 800e762:	e780      	b.n	800e666 <_dtoa_r+0x7de>
 800e764:	2300      	movs	r3, #0
 800e766:	930a      	str	r3, [sp, #40]	@ 0x28
 800e768:	e782      	b.n	800e670 <_dtoa_r+0x7e8>
 800e76a:	d099      	beq.n	800e6a0 <_dtoa_r+0x818>
 800e76c:	9a08      	ldr	r2, [sp, #32]
 800e76e:	331c      	adds	r3, #28
 800e770:	441a      	add	r2, r3
 800e772:	4498      	add	r8, r3
 800e774:	441e      	add	r6, r3
 800e776:	9208      	str	r2, [sp, #32]
 800e778:	e792      	b.n	800e6a0 <_dtoa_r+0x818>
 800e77a:	4603      	mov	r3, r0
 800e77c:	e7f6      	b.n	800e76c <_dtoa_r+0x8e4>
 800e77e:	9b07      	ldr	r3, [sp, #28]
 800e780:	9704      	str	r7, [sp, #16]
 800e782:	2b00      	cmp	r3, #0
 800e784:	dc20      	bgt.n	800e7c8 <_dtoa_r+0x940>
 800e786:	9300      	str	r3, [sp, #0]
 800e788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e78a:	2b02      	cmp	r3, #2
 800e78c:	dd1e      	ble.n	800e7cc <_dtoa_r+0x944>
 800e78e:	9b00      	ldr	r3, [sp, #0]
 800e790:	2b00      	cmp	r3, #0
 800e792:	f47f aec0 	bne.w	800e516 <_dtoa_r+0x68e>
 800e796:	4621      	mov	r1, r4
 800e798:	2205      	movs	r2, #5
 800e79a:	4658      	mov	r0, fp
 800e79c:	f000 fa9a 	bl	800ecd4 <__multadd>
 800e7a0:	4601      	mov	r1, r0
 800e7a2:	4604      	mov	r4, r0
 800e7a4:	4648      	mov	r0, r9
 800e7a6:	f000 fcad 	bl	800f104 <__mcmp>
 800e7aa:	2800      	cmp	r0, #0
 800e7ac:	f77f aeb3 	ble.w	800e516 <_dtoa_r+0x68e>
 800e7b0:	4656      	mov	r6, sl
 800e7b2:	2331      	movs	r3, #49	@ 0x31
 800e7b4:	f806 3b01 	strb.w	r3, [r6], #1
 800e7b8:	9b04      	ldr	r3, [sp, #16]
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	9304      	str	r3, [sp, #16]
 800e7be:	e6ae      	b.n	800e51e <_dtoa_r+0x696>
 800e7c0:	9c07      	ldr	r4, [sp, #28]
 800e7c2:	9704      	str	r7, [sp, #16]
 800e7c4:	4625      	mov	r5, r4
 800e7c6:	e7f3      	b.n	800e7b0 <_dtoa_r+0x928>
 800e7c8:	9b07      	ldr	r3, [sp, #28]
 800e7ca:	9300      	str	r3, [sp, #0]
 800e7cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	f000 8104 	beq.w	800e9dc <_dtoa_r+0xb54>
 800e7d4:	2e00      	cmp	r6, #0
 800e7d6:	dd05      	ble.n	800e7e4 <_dtoa_r+0x95c>
 800e7d8:	4629      	mov	r1, r5
 800e7da:	4632      	mov	r2, r6
 800e7dc:	4658      	mov	r0, fp
 800e7de:	f000 fc25 	bl	800f02c <__lshift>
 800e7e2:	4605      	mov	r5, r0
 800e7e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d05a      	beq.n	800e8a0 <_dtoa_r+0xa18>
 800e7ea:	6869      	ldr	r1, [r5, #4]
 800e7ec:	4658      	mov	r0, fp
 800e7ee:	f000 fa0f 	bl	800ec10 <_Balloc>
 800e7f2:	4606      	mov	r6, r0
 800e7f4:	b928      	cbnz	r0, 800e802 <_dtoa_r+0x97a>
 800e7f6:	4b84      	ldr	r3, [pc, #528]	@ (800ea08 <_dtoa_r+0xb80>)
 800e7f8:	4602      	mov	r2, r0
 800e7fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e7fe:	f7ff bb5a 	b.w	800deb6 <_dtoa_r+0x2e>
 800e802:	692a      	ldr	r2, [r5, #16]
 800e804:	3202      	adds	r2, #2
 800e806:	0092      	lsls	r2, r2, #2
 800e808:	f105 010c 	add.w	r1, r5, #12
 800e80c:	300c      	adds	r0, #12
 800e80e:	f7ff faa2 	bl	800dd56 <memcpy>
 800e812:	2201      	movs	r2, #1
 800e814:	4631      	mov	r1, r6
 800e816:	4658      	mov	r0, fp
 800e818:	f000 fc08 	bl	800f02c <__lshift>
 800e81c:	f10a 0301 	add.w	r3, sl, #1
 800e820:	9307      	str	r3, [sp, #28]
 800e822:	9b00      	ldr	r3, [sp, #0]
 800e824:	4453      	add	r3, sl
 800e826:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e828:	9b02      	ldr	r3, [sp, #8]
 800e82a:	f003 0301 	and.w	r3, r3, #1
 800e82e:	462f      	mov	r7, r5
 800e830:	930a      	str	r3, [sp, #40]	@ 0x28
 800e832:	4605      	mov	r5, r0
 800e834:	9b07      	ldr	r3, [sp, #28]
 800e836:	4621      	mov	r1, r4
 800e838:	3b01      	subs	r3, #1
 800e83a:	4648      	mov	r0, r9
 800e83c:	9300      	str	r3, [sp, #0]
 800e83e:	f7ff fa98 	bl	800dd72 <quorem>
 800e842:	4639      	mov	r1, r7
 800e844:	9002      	str	r0, [sp, #8]
 800e846:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e84a:	4648      	mov	r0, r9
 800e84c:	f000 fc5a 	bl	800f104 <__mcmp>
 800e850:	462a      	mov	r2, r5
 800e852:	9008      	str	r0, [sp, #32]
 800e854:	4621      	mov	r1, r4
 800e856:	4658      	mov	r0, fp
 800e858:	f000 fc70 	bl	800f13c <__mdiff>
 800e85c:	68c2      	ldr	r2, [r0, #12]
 800e85e:	4606      	mov	r6, r0
 800e860:	bb02      	cbnz	r2, 800e8a4 <_dtoa_r+0xa1c>
 800e862:	4601      	mov	r1, r0
 800e864:	4648      	mov	r0, r9
 800e866:	f000 fc4d 	bl	800f104 <__mcmp>
 800e86a:	4602      	mov	r2, r0
 800e86c:	4631      	mov	r1, r6
 800e86e:	4658      	mov	r0, fp
 800e870:	920e      	str	r2, [sp, #56]	@ 0x38
 800e872:	f000 fa0d 	bl	800ec90 <_Bfree>
 800e876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e878:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e87a:	9e07      	ldr	r6, [sp, #28]
 800e87c:	ea43 0102 	orr.w	r1, r3, r2
 800e880:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e882:	4319      	orrs	r1, r3
 800e884:	d110      	bne.n	800e8a8 <_dtoa_r+0xa20>
 800e886:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e88a:	d029      	beq.n	800e8e0 <_dtoa_r+0xa58>
 800e88c:	9b08      	ldr	r3, [sp, #32]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	dd02      	ble.n	800e898 <_dtoa_r+0xa10>
 800e892:	9b02      	ldr	r3, [sp, #8]
 800e894:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e898:	9b00      	ldr	r3, [sp, #0]
 800e89a:	f883 8000 	strb.w	r8, [r3]
 800e89e:	e63f      	b.n	800e520 <_dtoa_r+0x698>
 800e8a0:	4628      	mov	r0, r5
 800e8a2:	e7bb      	b.n	800e81c <_dtoa_r+0x994>
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	e7e1      	b.n	800e86c <_dtoa_r+0x9e4>
 800e8a8:	9b08      	ldr	r3, [sp, #32]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	db04      	blt.n	800e8b8 <_dtoa_r+0xa30>
 800e8ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e8b0:	430b      	orrs	r3, r1
 800e8b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e8b4:	430b      	orrs	r3, r1
 800e8b6:	d120      	bne.n	800e8fa <_dtoa_r+0xa72>
 800e8b8:	2a00      	cmp	r2, #0
 800e8ba:	dded      	ble.n	800e898 <_dtoa_r+0xa10>
 800e8bc:	4649      	mov	r1, r9
 800e8be:	2201      	movs	r2, #1
 800e8c0:	4658      	mov	r0, fp
 800e8c2:	f000 fbb3 	bl	800f02c <__lshift>
 800e8c6:	4621      	mov	r1, r4
 800e8c8:	4681      	mov	r9, r0
 800e8ca:	f000 fc1b 	bl	800f104 <__mcmp>
 800e8ce:	2800      	cmp	r0, #0
 800e8d0:	dc03      	bgt.n	800e8da <_dtoa_r+0xa52>
 800e8d2:	d1e1      	bne.n	800e898 <_dtoa_r+0xa10>
 800e8d4:	f018 0f01 	tst.w	r8, #1
 800e8d8:	d0de      	beq.n	800e898 <_dtoa_r+0xa10>
 800e8da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e8de:	d1d8      	bne.n	800e892 <_dtoa_r+0xa0a>
 800e8e0:	9a00      	ldr	r2, [sp, #0]
 800e8e2:	2339      	movs	r3, #57	@ 0x39
 800e8e4:	7013      	strb	r3, [r2, #0]
 800e8e6:	4633      	mov	r3, r6
 800e8e8:	461e      	mov	r6, r3
 800e8ea:	3b01      	subs	r3, #1
 800e8ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e8f0:	2a39      	cmp	r2, #57	@ 0x39
 800e8f2:	d052      	beq.n	800e99a <_dtoa_r+0xb12>
 800e8f4:	3201      	adds	r2, #1
 800e8f6:	701a      	strb	r2, [r3, #0]
 800e8f8:	e612      	b.n	800e520 <_dtoa_r+0x698>
 800e8fa:	2a00      	cmp	r2, #0
 800e8fc:	dd07      	ble.n	800e90e <_dtoa_r+0xa86>
 800e8fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e902:	d0ed      	beq.n	800e8e0 <_dtoa_r+0xa58>
 800e904:	9a00      	ldr	r2, [sp, #0]
 800e906:	f108 0301 	add.w	r3, r8, #1
 800e90a:	7013      	strb	r3, [r2, #0]
 800e90c:	e608      	b.n	800e520 <_dtoa_r+0x698>
 800e90e:	9b07      	ldr	r3, [sp, #28]
 800e910:	9a07      	ldr	r2, [sp, #28]
 800e912:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e918:	4293      	cmp	r3, r2
 800e91a:	d028      	beq.n	800e96e <_dtoa_r+0xae6>
 800e91c:	4649      	mov	r1, r9
 800e91e:	2300      	movs	r3, #0
 800e920:	220a      	movs	r2, #10
 800e922:	4658      	mov	r0, fp
 800e924:	f000 f9d6 	bl	800ecd4 <__multadd>
 800e928:	42af      	cmp	r7, r5
 800e92a:	4681      	mov	r9, r0
 800e92c:	f04f 0300 	mov.w	r3, #0
 800e930:	f04f 020a 	mov.w	r2, #10
 800e934:	4639      	mov	r1, r7
 800e936:	4658      	mov	r0, fp
 800e938:	d107      	bne.n	800e94a <_dtoa_r+0xac2>
 800e93a:	f000 f9cb 	bl	800ecd4 <__multadd>
 800e93e:	4607      	mov	r7, r0
 800e940:	4605      	mov	r5, r0
 800e942:	9b07      	ldr	r3, [sp, #28]
 800e944:	3301      	adds	r3, #1
 800e946:	9307      	str	r3, [sp, #28]
 800e948:	e774      	b.n	800e834 <_dtoa_r+0x9ac>
 800e94a:	f000 f9c3 	bl	800ecd4 <__multadd>
 800e94e:	4629      	mov	r1, r5
 800e950:	4607      	mov	r7, r0
 800e952:	2300      	movs	r3, #0
 800e954:	220a      	movs	r2, #10
 800e956:	4658      	mov	r0, fp
 800e958:	f000 f9bc 	bl	800ecd4 <__multadd>
 800e95c:	4605      	mov	r5, r0
 800e95e:	e7f0      	b.n	800e942 <_dtoa_r+0xaba>
 800e960:	9b00      	ldr	r3, [sp, #0]
 800e962:	2b00      	cmp	r3, #0
 800e964:	bfcc      	ite	gt
 800e966:	461e      	movgt	r6, r3
 800e968:	2601      	movle	r6, #1
 800e96a:	4456      	add	r6, sl
 800e96c:	2700      	movs	r7, #0
 800e96e:	4649      	mov	r1, r9
 800e970:	2201      	movs	r2, #1
 800e972:	4658      	mov	r0, fp
 800e974:	f000 fb5a 	bl	800f02c <__lshift>
 800e978:	4621      	mov	r1, r4
 800e97a:	4681      	mov	r9, r0
 800e97c:	f000 fbc2 	bl	800f104 <__mcmp>
 800e980:	2800      	cmp	r0, #0
 800e982:	dcb0      	bgt.n	800e8e6 <_dtoa_r+0xa5e>
 800e984:	d102      	bne.n	800e98c <_dtoa_r+0xb04>
 800e986:	f018 0f01 	tst.w	r8, #1
 800e98a:	d1ac      	bne.n	800e8e6 <_dtoa_r+0xa5e>
 800e98c:	4633      	mov	r3, r6
 800e98e:	461e      	mov	r6, r3
 800e990:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e994:	2a30      	cmp	r2, #48	@ 0x30
 800e996:	d0fa      	beq.n	800e98e <_dtoa_r+0xb06>
 800e998:	e5c2      	b.n	800e520 <_dtoa_r+0x698>
 800e99a:	459a      	cmp	sl, r3
 800e99c:	d1a4      	bne.n	800e8e8 <_dtoa_r+0xa60>
 800e99e:	9b04      	ldr	r3, [sp, #16]
 800e9a0:	3301      	adds	r3, #1
 800e9a2:	9304      	str	r3, [sp, #16]
 800e9a4:	2331      	movs	r3, #49	@ 0x31
 800e9a6:	f88a 3000 	strb.w	r3, [sl]
 800e9aa:	e5b9      	b.n	800e520 <_dtoa_r+0x698>
 800e9ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e9ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ea0c <_dtoa_r+0xb84>
 800e9b2:	b11b      	cbz	r3, 800e9bc <_dtoa_r+0xb34>
 800e9b4:	f10a 0308 	add.w	r3, sl, #8
 800e9b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e9ba:	6013      	str	r3, [r2, #0]
 800e9bc:	4650      	mov	r0, sl
 800e9be:	b019      	add	sp, #100	@ 0x64
 800e9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9c6:	2b01      	cmp	r3, #1
 800e9c8:	f77f ae37 	ble.w	800e63a <_dtoa_r+0x7b2>
 800e9cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800e9d0:	2001      	movs	r0, #1
 800e9d2:	e655      	b.n	800e680 <_dtoa_r+0x7f8>
 800e9d4:	9b00      	ldr	r3, [sp, #0]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	f77f aed6 	ble.w	800e788 <_dtoa_r+0x900>
 800e9dc:	4656      	mov	r6, sl
 800e9de:	4621      	mov	r1, r4
 800e9e0:	4648      	mov	r0, r9
 800e9e2:	f7ff f9c6 	bl	800dd72 <quorem>
 800e9e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e9ea:	f806 8b01 	strb.w	r8, [r6], #1
 800e9ee:	9b00      	ldr	r3, [sp, #0]
 800e9f0:	eba6 020a 	sub.w	r2, r6, sl
 800e9f4:	4293      	cmp	r3, r2
 800e9f6:	ddb3      	ble.n	800e960 <_dtoa_r+0xad8>
 800e9f8:	4649      	mov	r1, r9
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	220a      	movs	r2, #10
 800e9fe:	4658      	mov	r0, fp
 800ea00:	f000 f968 	bl	800ecd4 <__multadd>
 800ea04:	4681      	mov	r9, r0
 800ea06:	e7ea      	b.n	800e9de <_dtoa_r+0xb56>
 800ea08:	08011151 	.word	0x08011151
 800ea0c:	080110d5 	.word	0x080110d5

0800ea10 <_free_r>:
 800ea10:	b538      	push	{r3, r4, r5, lr}
 800ea12:	4605      	mov	r5, r0
 800ea14:	2900      	cmp	r1, #0
 800ea16:	d041      	beq.n	800ea9c <_free_r+0x8c>
 800ea18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea1c:	1f0c      	subs	r4, r1, #4
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	bfb8      	it	lt
 800ea22:	18e4      	addlt	r4, r4, r3
 800ea24:	f000 f8e8 	bl	800ebf8 <__malloc_lock>
 800ea28:	4a1d      	ldr	r2, [pc, #116]	@ (800eaa0 <_free_r+0x90>)
 800ea2a:	6813      	ldr	r3, [r2, #0]
 800ea2c:	b933      	cbnz	r3, 800ea3c <_free_r+0x2c>
 800ea2e:	6063      	str	r3, [r4, #4]
 800ea30:	6014      	str	r4, [r2, #0]
 800ea32:	4628      	mov	r0, r5
 800ea34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea38:	f000 b8e4 	b.w	800ec04 <__malloc_unlock>
 800ea3c:	42a3      	cmp	r3, r4
 800ea3e:	d908      	bls.n	800ea52 <_free_r+0x42>
 800ea40:	6820      	ldr	r0, [r4, #0]
 800ea42:	1821      	adds	r1, r4, r0
 800ea44:	428b      	cmp	r3, r1
 800ea46:	bf01      	itttt	eq
 800ea48:	6819      	ldreq	r1, [r3, #0]
 800ea4a:	685b      	ldreq	r3, [r3, #4]
 800ea4c:	1809      	addeq	r1, r1, r0
 800ea4e:	6021      	streq	r1, [r4, #0]
 800ea50:	e7ed      	b.n	800ea2e <_free_r+0x1e>
 800ea52:	461a      	mov	r2, r3
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	b10b      	cbz	r3, 800ea5c <_free_r+0x4c>
 800ea58:	42a3      	cmp	r3, r4
 800ea5a:	d9fa      	bls.n	800ea52 <_free_r+0x42>
 800ea5c:	6811      	ldr	r1, [r2, #0]
 800ea5e:	1850      	adds	r0, r2, r1
 800ea60:	42a0      	cmp	r0, r4
 800ea62:	d10b      	bne.n	800ea7c <_free_r+0x6c>
 800ea64:	6820      	ldr	r0, [r4, #0]
 800ea66:	4401      	add	r1, r0
 800ea68:	1850      	adds	r0, r2, r1
 800ea6a:	4283      	cmp	r3, r0
 800ea6c:	6011      	str	r1, [r2, #0]
 800ea6e:	d1e0      	bne.n	800ea32 <_free_r+0x22>
 800ea70:	6818      	ldr	r0, [r3, #0]
 800ea72:	685b      	ldr	r3, [r3, #4]
 800ea74:	6053      	str	r3, [r2, #4]
 800ea76:	4408      	add	r0, r1
 800ea78:	6010      	str	r0, [r2, #0]
 800ea7a:	e7da      	b.n	800ea32 <_free_r+0x22>
 800ea7c:	d902      	bls.n	800ea84 <_free_r+0x74>
 800ea7e:	230c      	movs	r3, #12
 800ea80:	602b      	str	r3, [r5, #0]
 800ea82:	e7d6      	b.n	800ea32 <_free_r+0x22>
 800ea84:	6820      	ldr	r0, [r4, #0]
 800ea86:	1821      	adds	r1, r4, r0
 800ea88:	428b      	cmp	r3, r1
 800ea8a:	bf04      	itt	eq
 800ea8c:	6819      	ldreq	r1, [r3, #0]
 800ea8e:	685b      	ldreq	r3, [r3, #4]
 800ea90:	6063      	str	r3, [r4, #4]
 800ea92:	bf04      	itt	eq
 800ea94:	1809      	addeq	r1, r1, r0
 800ea96:	6021      	streq	r1, [r4, #0]
 800ea98:	6054      	str	r4, [r2, #4]
 800ea9a:	e7ca      	b.n	800ea32 <_free_r+0x22>
 800ea9c:	bd38      	pop	{r3, r4, r5, pc}
 800ea9e:	bf00      	nop
 800eaa0:	200054a4 	.word	0x200054a4

0800eaa4 <malloc>:
 800eaa4:	4b02      	ldr	r3, [pc, #8]	@ (800eab0 <malloc+0xc>)
 800eaa6:	4601      	mov	r1, r0
 800eaa8:	6818      	ldr	r0, [r3, #0]
 800eaaa:	f000 b825 	b.w	800eaf8 <_malloc_r>
 800eaae:	bf00      	nop
 800eab0:	2000003c 	.word	0x2000003c

0800eab4 <sbrk_aligned>:
 800eab4:	b570      	push	{r4, r5, r6, lr}
 800eab6:	4e0f      	ldr	r6, [pc, #60]	@ (800eaf4 <sbrk_aligned+0x40>)
 800eab8:	460c      	mov	r4, r1
 800eaba:	6831      	ldr	r1, [r6, #0]
 800eabc:	4605      	mov	r5, r0
 800eabe:	b911      	cbnz	r1, 800eac6 <sbrk_aligned+0x12>
 800eac0:	f000 fe46 	bl	800f750 <_sbrk_r>
 800eac4:	6030      	str	r0, [r6, #0]
 800eac6:	4621      	mov	r1, r4
 800eac8:	4628      	mov	r0, r5
 800eaca:	f000 fe41 	bl	800f750 <_sbrk_r>
 800eace:	1c43      	adds	r3, r0, #1
 800ead0:	d103      	bne.n	800eada <sbrk_aligned+0x26>
 800ead2:	f04f 34ff 	mov.w	r4, #4294967295
 800ead6:	4620      	mov	r0, r4
 800ead8:	bd70      	pop	{r4, r5, r6, pc}
 800eada:	1cc4      	adds	r4, r0, #3
 800eadc:	f024 0403 	bic.w	r4, r4, #3
 800eae0:	42a0      	cmp	r0, r4
 800eae2:	d0f8      	beq.n	800ead6 <sbrk_aligned+0x22>
 800eae4:	1a21      	subs	r1, r4, r0
 800eae6:	4628      	mov	r0, r5
 800eae8:	f000 fe32 	bl	800f750 <_sbrk_r>
 800eaec:	3001      	adds	r0, #1
 800eaee:	d1f2      	bne.n	800ead6 <sbrk_aligned+0x22>
 800eaf0:	e7ef      	b.n	800ead2 <sbrk_aligned+0x1e>
 800eaf2:	bf00      	nop
 800eaf4:	200054a0 	.word	0x200054a0

0800eaf8 <_malloc_r>:
 800eaf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eafc:	1ccd      	adds	r5, r1, #3
 800eafe:	f025 0503 	bic.w	r5, r5, #3
 800eb02:	3508      	adds	r5, #8
 800eb04:	2d0c      	cmp	r5, #12
 800eb06:	bf38      	it	cc
 800eb08:	250c      	movcc	r5, #12
 800eb0a:	2d00      	cmp	r5, #0
 800eb0c:	4606      	mov	r6, r0
 800eb0e:	db01      	blt.n	800eb14 <_malloc_r+0x1c>
 800eb10:	42a9      	cmp	r1, r5
 800eb12:	d904      	bls.n	800eb1e <_malloc_r+0x26>
 800eb14:	230c      	movs	r3, #12
 800eb16:	6033      	str	r3, [r6, #0]
 800eb18:	2000      	movs	r0, #0
 800eb1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ebf4 <_malloc_r+0xfc>
 800eb22:	f000 f869 	bl	800ebf8 <__malloc_lock>
 800eb26:	f8d8 3000 	ldr.w	r3, [r8]
 800eb2a:	461c      	mov	r4, r3
 800eb2c:	bb44      	cbnz	r4, 800eb80 <_malloc_r+0x88>
 800eb2e:	4629      	mov	r1, r5
 800eb30:	4630      	mov	r0, r6
 800eb32:	f7ff ffbf 	bl	800eab4 <sbrk_aligned>
 800eb36:	1c43      	adds	r3, r0, #1
 800eb38:	4604      	mov	r4, r0
 800eb3a:	d158      	bne.n	800ebee <_malloc_r+0xf6>
 800eb3c:	f8d8 4000 	ldr.w	r4, [r8]
 800eb40:	4627      	mov	r7, r4
 800eb42:	2f00      	cmp	r7, #0
 800eb44:	d143      	bne.n	800ebce <_malloc_r+0xd6>
 800eb46:	2c00      	cmp	r4, #0
 800eb48:	d04b      	beq.n	800ebe2 <_malloc_r+0xea>
 800eb4a:	6823      	ldr	r3, [r4, #0]
 800eb4c:	4639      	mov	r1, r7
 800eb4e:	4630      	mov	r0, r6
 800eb50:	eb04 0903 	add.w	r9, r4, r3
 800eb54:	f000 fdfc 	bl	800f750 <_sbrk_r>
 800eb58:	4581      	cmp	r9, r0
 800eb5a:	d142      	bne.n	800ebe2 <_malloc_r+0xea>
 800eb5c:	6821      	ldr	r1, [r4, #0]
 800eb5e:	1a6d      	subs	r5, r5, r1
 800eb60:	4629      	mov	r1, r5
 800eb62:	4630      	mov	r0, r6
 800eb64:	f7ff ffa6 	bl	800eab4 <sbrk_aligned>
 800eb68:	3001      	adds	r0, #1
 800eb6a:	d03a      	beq.n	800ebe2 <_malloc_r+0xea>
 800eb6c:	6823      	ldr	r3, [r4, #0]
 800eb6e:	442b      	add	r3, r5
 800eb70:	6023      	str	r3, [r4, #0]
 800eb72:	f8d8 3000 	ldr.w	r3, [r8]
 800eb76:	685a      	ldr	r2, [r3, #4]
 800eb78:	bb62      	cbnz	r2, 800ebd4 <_malloc_r+0xdc>
 800eb7a:	f8c8 7000 	str.w	r7, [r8]
 800eb7e:	e00f      	b.n	800eba0 <_malloc_r+0xa8>
 800eb80:	6822      	ldr	r2, [r4, #0]
 800eb82:	1b52      	subs	r2, r2, r5
 800eb84:	d420      	bmi.n	800ebc8 <_malloc_r+0xd0>
 800eb86:	2a0b      	cmp	r2, #11
 800eb88:	d917      	bls.n	800ebba <_malloc_r+0xc2>
 800eb8a:	1961      	adds	r1, r4, r5
 800eb8c:	42a3      	cmp	r3, r4
 800eb8e:	6025      	str	r5, [r4, #0]
 800eb90:	bf18      	it	ne
 800eb92:	6059      	strne	r1, [r3, #4]
 800eb94:	6863      	ldr	r3, [r4, #4]
 800eb96:	bf08      	it	eq
 800eb98:	f8c8 1000 	streq.w	r1, [r8]
 800eb9c:	5162      	str	r2, [r4, r5]
 800eb9e:	604b      	str	r3, [r1, #4]
 800eba0:	4630      	mov	r0, r6
 800eba2:	f000 f82f 	bl	800ec04 <__malloc_unlock>
 800eba6:	f104 000b 	add.w	r0, r4, #11
 800ebaa:	1d23      	adds	r3, r4, #4
 800ebac:	f020 0007 	bic.w	r0, r0, #7
 800ebb0:	1ac2      	subs	r2, r0, r3
 800ebb2:	bf1c      	itt	ne
 800ebb4:	1a1b      	subne	r3, r3, r0
 800ebb6:	50a3      	strne	r3, [r4, r2]
 800ebb8:	e7af      	b.n	800eb1a <_malloc_r+0x22>
 800ebba:	6862      	ldr	r2, [r4, #4]
 800ebbc:	42a3      	cmp	r3, r4
 800ebbe:	bf0c      	ite	eq
 800ebc0:	f8c8 2000 	streq.w	r2, [r8]
 800ebc4:	605a      	strne	r2, [r3, #4]
 800ebc6:	e7eb      	b.n	800eba0 <_malloc_r+0xa8>
 800ebc8:	4623      	mov	r3, r4
 800ebca:	6864      	ldr	r4, [r4, #4]
 800ebcc:	e7ae      	b.n	800eb2c <_malloc_r+0x34>
 800ebce:	463c      	mov	r4, r7
 800ebd0:	687f      	ldr	r7, [r7, #4]
 800ebd2:	e7b6      	b.n	800eb42 <_malloc_r+0x4a>
 800ebd4:	461a      	mov	r2, r3
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	42a3      	cmp	r3, r4
 800ebda:	d1fb      	bne.n	800ebd4 <_malloc_r+0xdc>
 800ebdc:	2300      	movs	r3, #0
 800ebde:	6053      	str	r3, [r2, #4]
 800ebe0:	e7de      	b.n	800eba0 <_malloc_r+0xa8>
 800ebe2:	230c      	movs	r3, #12
 800ebe4:	6033      	str	r3, [r6, #0]
 800ebe6:	4630      	mov	r0, r6
 800ebe8:	f000 f80c 	bl	800ec04 <__malloc_unlock>
 800ebec:	e794      	b.n	800eb18 <_malloc_r+0x20>
 800ebee:	6005      	str	r5, [r0, #0]
 800ebf0:	e7d6      	b.n	800eba0 <_malloc_r+0xa8>
 800ebf2:	bf00      	nop
 800ebf4:	200054a4 	.word	0x200054a4

0800ebf8 <__malloc_lock>:
 800ebf8:	4801      	ldr	r0, [pc, #4]	@ (800ec00 <__malloc_lock+0x8>)
 800ebfa:	f7ff b8aa 	b.w	800dd52 <__retarget_lock_acquire_recursive>
 800ebfe:	bf00      	nop
 800ec00:	2000549c 	.word	0x2000549c

0800ec04 <__malloc_unlock>:
 800ec04:	4801      	ldr	r0, [pc, #4]	@ (800ec0c <__malloc_unlock+0x8>)
 800ec06:	f7ff b8a5 	b.w	800dd54 <__retarget_lock_release_recursive>
 800ec0a:	bf00      	nop
 800ec0c:	2000549c 	.word	0x2000549c

0800ec10 <_Balloc>:
 800ec10:	b570      	push	{r4, r5, r6, lr}
 800ec12:	69c6      	ldr	r6, [r0, #28]
 800ec14:	4604      	mov	r4, r0
 800ec16:	460d      	mov	r5, r1
 800ec18:	b976      	cbnz	r6, 800ec38 <_Balloc+0x28>
 800ec1a:	2010      	movs	r0, #16
 800ec1c:	f7ff ff42 	bl	800eaa4 <malloc>
 800ec20:	4602      	mov	r2, r0
 800ec22:	61e0      	str	r0, [r4, #28]
 800ec24:	b920      	cbnz	r0, 800ec30 <_Balloc+0x20>
 800ec26:	4b18      	ldr	r3, [pc, #96]	@ (800ec88 <_Balloc+0x78>)
 800ec28:	4818      	ldr	r0, [pc, #96]	@ (800ec8c <_Balloc+0x7c>)
 800ec2a:	216b      	movs	r1, #107	@ 0x6b
 800ec2c:	f000 fda0 	bl	800f770 <__assert_func>
 800ec30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec34:	6006      	str	r6, [r0, #0]
 800ec36:	60c6      	str	r6, [r0, #12]
 800ec38:	69e6      	ldr	r6, [r4, #28]
 800ec3a:	68f3      	ldr	r3, [r6, #12]
 800ec3c:	b183      	cbz	r3, 800ec60 <_Balloc+0x50>
 800ec3e:	69e3      	ldr	r3, [r4, #28]
 800ec40:	68db      	ldr	r3, [r3, #12]
 800ec42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ec46:	b9b8      	cbnz	r0, 800ec78 <_Balloc+0x68>
 800ec48:	2101      	movs	r1, #1
 800ec4a:	fa01 f605 	lsl.w	r6, r1, r5
 800ec4e:	1d72      	adds	r2, r6, #5
 800ec50:	0092      	lsls	r2, r2, #2
 800ec52:	4620      	mov	r0, r4
 800ec54:	f000 fdaa 	bl	800f7ac <_calloc_r>
 800ec58:	b160      	cbz	r0, 800ec74 <_Balloc+0x64>
 800ec5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ec5e:	e00e      	b.n	800ec7e <_Balloc+0x6e>
 800ec60:	2221      	movs	r2, #33	@ 0x21
 800ec62:	2104      	movs	r1, #4
 800ec64:	4620      	mov	r0, r4
 800ec66:	f000 fda1 	bl	800f7ac <_calloc_r>
 800ec6a:	69e3      	ldr	r3, [r4, #28]
 800ec6c:	60f0      	str	r0, [r6, #12]
 800ec6e:	68db      	ldr	r3, [r3, #12]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d1e4      	bne.n	800ec3e <_Balloc+0x2e>
 800ec74:	2000      	movs	r0, #0
 800ec76:	bd70      	pop	{r4, r5, r6, pc}
 800ec78:	6802      	ldr	r2, [r0, #0]
 800ec7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ec7e:	2300      	movs	r3, #0
 800ec80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ec84:	e7f7      	b.n	800ec76 <_Balloc+0x66>
 800ec86:	bf00      	nop
 800ec88:	080110e2 	.word	0x080110e2
 800ec8c:	08011162 	.word	0x08011162

0800ec90 <_Bfree>:
 800ec90:	b570      	push	{r4, r5, r6, lr}
 800ec92:	69c6      	ldr	r6, [r0, #28]
 800ec94:	4605      	mov	r5, r0
 800ec96:	460c      	mov	r4, r1
 800ec98:	b976      	cbnz	r6, 800ecb8 <_Bfree+0x28>
 800ec9a:	2010      	movs	r0, #16
 800ec9c:	f7ff ff02 	bl	800eaa4 <malloc>
 800eca0:	4602      	mov	r2, r0
 800eca2:	61e8      	str	r0, [r5, #28]
 800eca4:	b920      	cbnz	r0, 800ecb0 <_Bfree+0x20>
 800eca6:	4b09      	ldr	r3, [pc, #36]	@ (800eccc <_Bfree+0x3c>)
 800eca8:	4809      	ldr	r0, [pc, #36]	@ (800ecd0 <_Bfree+0x40>)
 800ecaa:	218f      	movs	r1, #143	@ 0x8f
 800ecac:	f000 fd60 	bl	800f770 <__assert_func>
 800ecb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ecb4:	6006      	str	r6, [r0, #0]
 800ecb6:	60c6      	str	r6, [r0, #12]
 800ecb8:	b13c      	cbz	r4, 800ecca <_Bfree+0x3a>
 800ecba:	69eb      	ldr	r3, [r5, #28]
 800ecbc:	6862      	ldr	r2, [r4, #4]
 800ecbe:	68db      	ldr	r3, [r3, #12]
 800ecc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ecc4:	6021      	str	r1, [r4, #0]
 800ecc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ecca:	bd70      	pop	{r4, r5, r6, pc}
 800eccc:	080110e2 	.word	0x080110e2
 800ecd0:	08011162 	.word	0x08011162

0800ecd4 <__multadd>:
 800ecd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecd8:	690d      	ldr	r5, [r1, #16]
 800ecda:	4607      	mov	r7, r0
 800ecdc:	460c      	mov	r4, r1
 800ecde:	461e      	mov	r6, r3
 800ece0:	f101 0c14 	add.w	ip, r1, #20
 800ece4:	2000      	movs	r0, #0
 800ece6:	f8dc 3000 	ldr.w	r3, [ip]
 800ecea:	b299      	uxth	r1, r3
 800ecec:	fb02 6101 	mla	r1, r2, r1, r6
 800ecf0:	0c1e      	lsrs	r6, r3, #16
 800ecf2:	0c0b      	lsrs	r3, r1, #16
 800ecf4:	fb02 3306 	mla	r3, r2, r6, r3
 800ecf8:	b289      	uxth	r1, r1
 800ecfa:	3001      	adds	r0, #1
 800ecfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ed00:	4285      	cmp	r5, r0
 800ed02:	f84c 1b04 	str.w	r1, [ip], #4
 800ed06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ed0a:	dcec      	bgt.n	800ece6 <__multadd+0x12>
 800ed0c:	b30e      	cbz	r6, 800ed52 <__multadd+0x7e>
 800ed0e:	68a3      	ldr	r3, [r4, #8]
 800ed10:	42ab      	cmp	r3, r5
 800ed12:	dc19      	bgt.n	800ed48 <__multadd+0x74>
 800ed14:	6861      	ldr	r1, [r4, #4]
 800ed16:	4638      	mov	r0, r7
 800ed18:	3101      	adds	r1, #1
 800ed1a:	f7ff ff79 	bl	800ec10 <_Balloc>
 800ed1e:	4680      	mov	r8, r0
 800ed20:	b928      	cbnz	r0, 800ed2e <__multadd+0x5a>
 800ed22:	4602      	mov	r2, r0
 800ed24:	4b0c      	ldr	r3, [pc, #48]	@ (800ed58 <__multadd+0x84>)
 800ed26:	480d      	ldr	r0, [pc, #52]	@ (800ed5c <__multadd+0x88>)
 800ed28:	21ba      	movs	r1, #186	@ 0xba
 800ed2a:	f000 fd21 	bl	800f770 <__assert_func>
 800ed2e:	6922      	ldr	r2, [r4, #16]
 800ed30:	3202      	adds	r2, #2
 800ed32:	f104 010c 	add.w	r1, r4, #12
 800ed36:	0092      	lsls	r2, r2, #2
 800ed38:	300c      	adds	r0, #12
 800ed3a:	f7ff f80c 	bl	800dd56 <memcpy>
 800ed3e:	4621      	mov	r1, r4
 800ed40:	4638      	mov	r0, r7
 800ed42:	f7ff ffa5 	bl	800ec90 <_Bfree>
 800ed46:	4644      	mov	r4, r8
 800ed48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ed4c:	3501      	adds	r5, #1
 800ed4e:	615e      	str	r6, [r3, #20]
 800ed50:	6125      	str	r5, [r4, #16]
 800ed52:	4620      	mov	r0, r4
 800ed54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed58:	08011151 	.word	0x08011151
 800ed5c:	08011162 	.word	0x08011162

0800ed60 <__hi0bits>:
 800ed60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ed64:	4603      	mov	r3, r0
 800ed66:	bf36      	itet	cc
 800ed68:	0403      	lslcc	r3, r0, #16
 800ed6a:	2000      	movcs	r0, #0
 800ed6c:	2010      	movcc	r0, #16
 800ed6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ed72:	bf3c      	itt	cc
 800ed74:	021b      	lslcc	r3, r3, #8
 800ed76:	3008      	addcc	r0, #8
 800ed78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ed7c:	bf3c      	itt	cc
 800ed7e:	011b      	lslcc	r3, r3, #4
 800ed80:	3004      	addcc	r0, #4
 800ed82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed86:	bf3c      	itt	cc
 800ed88:	009b      	lslcc	r3, r3, #2
 800ed8a:	3002      	addcc	r0, #2
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	db05      	blt.n	800ed9c <__hi0bits+0x3c>
 800ed90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ed94:	f100 0001 	add.w	r0, r0, #1
 800ed98:	bf08      	it	eq
 800ed9a:	2020      	moveq	r0, #32
 800ed9c:	4770      	bx	lr

0800ed9e <__lo0bits>:
 800ed9e:	6803      	ldr	r3, [r0, #0]
 800eda0:	4602      	mov	r2, r0
 800eda2:	f013 0007 	ands.w	r0, r3, #7
 800eda6:	d00b      	beq.n	800edc0 <__lo0bits+0x22>
 800eda8:	07d9      	lsls	r1, r3, #31
 800edaa:	d421      	bmi.n	800edf0 <__lo0bits+0x52>
 800edac:	0798      	lsls	r0, r3, #30
 800edae:	bf49      	itett	mi
 800edb0:	085b      	lsrmi	r3, r3, #1
 800edb2:	089b      	lsrpl	r3, r3, #2
 800edb4:	2001      	movmi	r0, #1
 800edb6:	6013      	strmi	r3, [r2, #0]
 800edb8:	bf5c      	itt	pl
 800edba:	6013      	strpl	r3, [r2, #0]
 800edbc:	2002      	movpl	r0, #2
 800edbe:	4770      	bx	lr
 800edc0:	b299      	uxth	r1, r3
 800edc2:	b909      	cbnz	r1, 800edc8 <__lo0bits+0x2a>
 800edc4:	0c1b      	lsrs	r3, r3, #16
 800edc6:	2010      	movs	r0, #16
 800edc8:	b2d9      	uxtb	r1, r3
 800edca:	b909      	cbnz	r1, 800edd0 <__lo0bits+0x32>
 800edcc:	3008      	adds	r0, #8
 800edce:	0a1b      	lsrs	r3, r3, #8
 800edd0:	0719      	lsls	r1, r3, #28
 800edd2:	bf04      	itt	eq
 800edd4:	091b      	lsreq	r3, r3, #4
 800edd6:	3004      	addeq	r0, #4
 800edd8:	0799      	lsls	r1, r3, #30
 800edda:	bf04      	itt	eq
 800eddc:	089b      	lsreq	r3, r3, #2
 800edde:	3002      	addeq	r0, #2
 800ede0:	07d9      	lsls	r1, r3, #31
 800ede2:	d403      	bmi.n	800edec <__lo0bits+0x4e>
 800ede4:	085b      	lsrs	r3, r3, #1
 800ede6:	f100 0001 	add.w	r0, r0, #1
 800edea:	d003      	beq.n	800edf4 <__lo0bits+0x56>
 800edec:	6013      	str	r3, [r2, #0]
 800edee:	4770      	bx	lr
 800edf0:	2000      	movs	r0, #0
 800edf2:	4770      	bx	lr
 800edf4:	2020      	movs	r0, #32
 800edf6:	4770      	bx	lr

0800edf8 <__i2b>:
 800edf8:	b510      	push	{r4, lr}
 800edfa:	460c      	mov	r4, r1
 800edfc:	2101      	movs	r1, #1
 800edfe:	f7ff ff07 	bl	800ec10 <_Balloc>
 800ee02:	4602      	mov	r2, r0
 800ee04:	b928      	cbnz	r0, 800ee12 <__i2b+0x1a>
 800ee06:	4b05      	ldr	r3, [pc, #20]	@ (800ee1c <__i2b+0x24>)
 800ee08:	4805      	ldr	r0, [pc, #20]	@ (800ee20 <__i2b+0x28>)
 800ee0a:	f240 1145 	movw	r1, #325	@ 0x145
 800ee0e:	f000 fcaf 	bl	800f770 <__assert_func>
 800ee12:	2301      	movs	r3, #1
 800ee14:	6144      	str	r4, [r0, #20]
 800ee16:	6103      	str	r3, [r0, #16]
 800ee18:	bd10      	pop	{r4, pc}
 800ee1a:	bf00      	nop
 800ee1c:	08011151 	.word	0x08011151
 800ee20:	08011162 	.word	0x08011162

0800ee24 <__multiply>:
 800ee24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee28:	4614      	mov	r4, r2
 800ee2a:	690a      	ldr	r2, [r1, #16]
 800ee2c:	6923      	ldr	r3, [r4, #16]
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	bfa8      	it	ge
 800ee32:	4623      	movge	r3, r4
 800ee34:	460f      	mov	r7, r1
 800ee36:	bfa4      	itt	ge
 800ee38:	460c      	movge	r4, r1
 800ee3a:	461f      	movge	r7, r3
 800ee3c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ee40:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ee44:	68a3      	ldr	r3, [r4, #8]
 800ee46:	6861      	ldr	r1, [r4, #4]
 800ee48:	eb0a 0609 	add.w	r6, sl, r9
 800ee4c:	42b3      	cmp	r3, r6
 800ee4e:	b085      	sub	sp, #20
 800ee50:	bfb8      	it	lt
 800ee52:	3101      	addlt	r1, #1
 800ee54:	f7ff fedc 	bl	800ec10 <_Balloc>
 800ee58:	b930      	cbnz	r0, 800ee68 <__multiply+0x44>
 800ee5a:	4602      	mov	r2, r0
 800ee5c:	4b44      	ldr	r3, [pc, #272]	@ (800ef70 <__multiply+0x14c>)
 800ee5e:	4845      	ldr	r0, [pc, #276]	@ (800ef74 <__multiply+0x150>)
 800ee60:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ee64:	f000 fc84 	bl	800f770 <__assert_func>
 800ee68:	f100 0514 	add.w	r5, r0, #20
 800ee6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ee70:	462b      	mov	r3, r5
 800ee72:	2200      	movs	r2, #0
 800ee74:	4543      	cmp	r3, r8
 800ee76:	d321      	bcc.n	800eebc <__multiply+0x98>
 800ee78:	f107 0114 	add.w	r1, r7, #20
 800ee7c:	f104 0214 	add.w	r2, r4, #20
 800ee80:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ee84:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ee88:	9302      	str	r3, [sp, #8]
 800ee8a:	1b13      	subs	r3, r2, r4
 800ee8c:	3b15      	subs	r3, #21
 800ee8e:	f023 0303 	bic.w	r3, r3, #3
 800ee92:	3304      	adds	r3, #4
 800ee94:	f104 0715 	add.w	r7, r4, #21
 800ee98:	42ba      	cmp	r2, r7
 800ee9a:	bf38      	it	cc
 800ee9c:	2304      	movcc	r3, #4
 800ee9e:	9301      	str	r3, [sp, #4]
 800eea0:	9b02      	ldr	r3, [sp, #8]
 800eea2:	9103      	str	r1, [sp, #12]
 800eea4:	428b      	cmp	r3, r1
 800eea6:	d80c      	bhi.n	800eec2 <__multiply+0x9e>
 800eea8:	2e00      	cmp	r6, #0
 800eeaa:	dd03      	ble.n	800eeb4 <__multiply+0x90>
 800eeac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d05b      	beq.n	800ef6c <__multiply+0x148>
 800eeb4:	6106      	str	r6, [r0, #16]
 800eeb6:	b005      	add	sp, #20
 800eeb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eebc:	f843 2b04 	str.w	r2, [r3], #4
 800eec0:	e7d8      	b.n	800ee74 <__multiply+0x50>
 800eec2:	f8b1 a000 	ldrh.w	sl, [r1]
 800eec6:	f1ba 0f00 	cmp.w	sl, #0
 800eeca:	d024      	beq.n	800ef16 <__multiply+0xf2>
 800eecc:	f104 0e14 	add.w	lr, r4, #20
 800eed0:	46a9      	mov	r9, r5
 800eed2:	f04f 0c00 	mov.w	ip, #0
 800eed6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eeda:	f8d9 3000 	ldr.w	r3, [r9]
 800eede:	fa1f fb87 	uxth.w	fp, r7
 800eee2:	b29b      	uxth	r3, r3
 800eee4:	fb0a 330b 	mla	r3, sl, fp, r3
 800eee8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800eeec:	f8d9 7000 	ldr.w	r7, [r9]
 800eef0:	4463      	add	r3, ip
 800eef2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800eef6:	fb0a c70b 	mla	r7, sl, fp, ip
 800eefa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ef04:	4572      	cmp	r2, lr
 800ef06:	f849 3b04 	str.w	r3, [r9], #4
 800ef0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ef0e:	d8e2      	bhi.n	800eed6 <__multiply+0xb2>
 800ef10:	9b01      	ldr	r3, [sp, #4]
 800ef12:	f845 c003 	str.w	ip, [r5, r3]
 800ef16:	9b03      	ldr	r3, [sp, #12]
 800ef18:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ef1c:	3104      	adds	r1, #4
 800ef1e:	f1b9 0f00 	cmp.w	r9, #0
 800ef22:	d021      	beq.n	800ef68 <__multiply+0x144>
 800ef24:	682b      	ldr	r3, [r5, #0]
 800ef26:	f104 0c14 	add.w	ip, r4, #20
 800ef2a:	46ae      	mov	lr, r5
 800ef2c:	f04f 0a00 	mov.w	sl, #0
 800ef30:	f8bc b000 	ldrh.w	fp, [ip]
 800ef34:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ef38:	fb09 770b 	mla	r7, r9, fp, r7
 800ef3c:	4457      	add	r7, sl
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ef44:	f84e 3b04 	str.w	r3, [lr], #4
 800ef48:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ef4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ef50:	f8be 3000 	ldrh.w	r3, [lr]
 800ef54:	fb09 330a 	mla	r3, r9, sl, r3
 800ef58:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ef5c:	4562      	cmp	r2, ip
 800ef5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ef62:	d8e5      	bhi.n	800ef30 <__multiply+0x10c>
 800ef64:	9f01      	ldr	r7, [sp, #4]
 800ef66:	51eb      	str	r3, [r5, r7]
 800ef68:	3504      	adds	r5, #4
 800ef6a:	e799      	b.n	800eea0 <__multiply+0x7c>
 800ef6c:	3e01      	subs	r6, #1
 800ef6e:	e79b      	b.n	800eea8 <__multiply+0x84>
 800ef70:	08011151 	.word	0x08011151
 800ef74:	08011162 	.word	0x08011162

0800ef78 <__pow5mult>:
 800ef78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef7c:	4615      	mov	r5, r2
 800ef7e:	f012 0203 	ands.w	r2, r2, #3
 800ef82:	4607      	mov	r7, r0
 800ef84:	460e      	mov	r6, r1
 800ef86:	d007      	beq.n	800ef98 <__pow5mult+0x20>
 800ef88:	4c25      	ldr	r4, [pc, #148]	@ (800f020 <__pow5mult+0xa8>)
 800ef8a:	3a01      	subs	r2, #1
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ef92:	f7ff fe9f 	bl	800ecd4 <__multadd>
 800ef96:	4606      	mov	r6, r0
 800ef98:	10ad      	asrs	r5, r5, #2
 800ef9a:	d03d      	beq.n	800f018 <__pow5mult+0xa0>
 800ef9c:	69fc      	ldr	r4, [r7, #28]
 800ef9e:	b97c      	cbnz	r4, 800efc0 <__pow5mult+0x48>
 800efa0:	2010      	movs	r0, #16
 800efa2:	f7ff fd7f 	bl	800eaa4 <malloc>
 800efa6:	4602      	mov	r2, r0
 800efa8:	61f8      	str	r0, [r7, #28]
 800efaa:	b928      	cbnz	r0, 800efb8 <__pow5mult+0x40>
 800efac:	4b1d      	ldr	r3, [pc, #116]	@ (800f024 <__pow5mult+0xac>)
 800efae:	481e      	ldr	r0, [pc, #120]	@ (800f028 <__pow5mult+0xb0>)
 800efb0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800efb4:	f000 fbdc 	bl	800f770 <__assert_func>
 800efb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800efbc:	6004      	str	r4, [r0, #0]
 800efbe:	60c4      	str	r4, [r0, #12]
 800efc0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800efc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800efc8:	b94c      	cbnz	r4, 800efde <__pow5mult+0x66>
 800efca:	f240 2171 	movw	r1, #625	@ 0x271
 800efce:	4638      	mov	r0, r7
 800efd0:	f7ff ff12 	bl	800edf8 <__i2b>
 800efd4:	2300      	movs	r3, #0
 800efd6:	f8c8 0008 	str.w	r0, [r8, #8]
 800efda:	4604      	mov	r4, r0
 800efdc:	6003      	str	r3, [r0, #0]
 800efde:	f04f 0900 	mov.w	r9, #0
 800efe2:	07eb      	lsls	r3, r5, #31
 800efe4:	d50a      	bpl.n	800effc <__pow5mult+0x84>
 800efe6:	4631      	mov	r1, r6
 800efe8:	4622      	mov	r2, r4
 800efea:	4638      	mov	r0, r7
 800efec:	f7ff ff1a 	bl	800ee24 <__multiply>
 800eff0:	4631      	mov	r1, r6
 800eff2:	4680      	mov	r8, r0
 800eff4:	4638      	mov	r0, r7
 800eff6:	f7ff fe4b 	bl	800ec90 <_Bfree>
 800effa:	4646      	mov	r6, r8
 800effc:	106d      	asrs	r5, r5, #1
 800effe:	d00b      	beq.n	800f018 <__pow5mult+0xa0>
 800f000:	6820      	ldr	r0, [r4, #0]
 800f002:	b938      	cbnz	r0, 800f014 <__pow5mult+0x9c>
 800f004:	4622      	mov	r2, r4
 800f006:	4621      	mov	r1, r4
 800f008:	4638      	mov	r0, r7
 800f00a:	f7ff ff0b 	bl	800ee24 <__multiply>
 800f00e:	6020      	str	r0, [r4, #0]
 800f010:	f8c0 9000 	str.w	r9, [r0]
 800f014:	4604      	mov	r4, r0
 800f016:	e7e4      	b.n	800efe2 <__pow5mult+0x6a>
 800f018:	4630      	mov	r0, r6
 800f01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f01e:	bf00      	nop
 800f020:	080111bc 	.word	0x080111bc
 800f024:	080110e2 	.word	0x080110e2
 800f028:	08011162 	.word	0x08011162

0800f02c <__lshift>:
 800f02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f030:	460c      	mov	r4, r1
 800f032:	6849      	ldr	r1, [r1, #4]
 800f034:	6923      	ldr	r3, [r4, #16]
 800f036:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f03a:	68a3      	ldr	r3, [r4, #8]
 800f03c:	4607      	mov	r7, r0
 800f03e:	4691      	mov	r9, r2
 800f040:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f044:	f108 0601 	add.w	r6, r8, #1
 800f048:	42b3      	cmp	r3, r6
 800f04a:	db0b      	blt.n	800f064 <__lshift+0x38>
 800f04c:	4638      	mov	r0, r7
 800f04e:	f7ff fddf 	bl	800ec10 <_Balloc>
 800f052:	4605      	mov	r5, r0
 800f054:	b948      	cbnz	r0, 800f06a <__lshift+0x3e>
 800f056:	4602      	mov	r2, r0
 800f058:	4b28      	ldr	r3, [pc, #160]	@ (800f0fc <__lshift+0xd0>)
 800f05a:	4829      	ldr	r0, [pc, #164]	@ (800f100 <__lshift+0xd4>)
 800f05c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f060:	f000 fb86 	bl	800f770 <__assert_func>
 800f064:	3101      	adds	r1, #1
 800f066:	005b      	lsls	r3, r3, #1
 800f068:	e7ee      	b.n	800f048 <__lshift+0x1c>
 800f06a:	2300      	movs	r3, #0
 800f06c:	f100 0114 	add.w	r1, r0, #20
 800f070:	f100 0210 	add.w	r2, r0, #16
 800f074:	4618      	mov	r0, r3
 800f076:	4553      	cmp	r3, sl
 800f078:	db33      	blt.n	800f0e2 <__lshift+0xb6>
 800f07a:	6920      	ldr	r0, [r4, #16]
 800f07c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f080:	f104 0314 	add.w	r3, r4, #20
 800f084:	f019 091f 	ands.w	r9, r9, #31
 800f088:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f08c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f090:	d02b      	beq.n	800f0ea <__lshift+0xbe>
 800f092:	f1c9 0e20 	rsb	lr, r9, #32
 800f096:	468a      	mov	sl, r1
 800f098:	2200      	movs	r2, #0
 800f09a:	6818      	ldr	r0, [r3, #0]
 800f09c:	fa00 f009 	lsl.w	r0, r0, r9
 800f0a0:	4310      	orrs	r0, r2
 800f0a2:	f84a 0b04 	str.w	r0, [sl], #4
 800f0a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0aa:	459c      	cmp	ip, r3
 800f0ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800f0b0:	d8f3      	bhi.n	800f09a <__lshift+0x6e>
 800f0b2:	ebac 0304 	sub.w	r3, ip, r4
 800f0b6:	3b15      	subs	r3, #21
 800f0b8:	f023 0303 	bic.w	r3, r3, #3
 800f0bc:	3304      	adds	r3, #4
 800f0be:	f104 0015 	add.w	r0, r4, #21
 800f0c2:	4584      	cmp	ip, r0
 800f0c4:	bf38      	it	cc
 800f0c6:	2304      	movcc	r3, #4
 800f0c8:	50ca      	str	r2, [r1, r3]
 800f0ca:	b10a      	cbz	r2, 800f0d0 <__lshift+0xa4>
 800f0cc:	f108 0602 	add.w	r6, r8, #2
 800f0d0:	3e01      	subs	r6, #1
 800f0d2:	4638      	mov	r0, r7
 800f0d4:	612e      	str	r6, [r5, #16]
 800f0d6:	4621      	mov	r1, r4
 800f0d8:	f7ff fdda 	bl	800ec90 <_Bfree>
 800f0dc:	4628      	mov	r0, r5
 800f0de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800f0e6:	3301      	adds	r3, #1
 800f0e8:	e7c5      	b.n	800f076 <__lshift+0x4a>
 800f0ea:	3904      	subs	r1, #4
 800f0ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800f0f4:	459c      	cmp	ip, r3
 800f0f6:	d8f9      	bhi.n	800f0ec <__lshift+0xc0>
 800f0f8:	e7ea      	b.n	800f0d0 <__lshift+0xa4>
 800f0fa:	bf00      	nop
 800f0fc:	08011151 	.word	0x08011151
 800f100:	08011162 	.word	0x08011162

0800f104 <__mcmp>:
 800f104:	690a      	ldr	r2, [r1, #16]
 800f106:	4603      	mov	r3, r0
 800f108:	6900      	ldr	r0, [r0, #16]
 800f10a:	1a80      	subs	r0, r0, r2
 800f10c:	b530      	push	{r4, r5, lr}
 800f10e:	d10e      	bne.n	800f12e <__mcmp+0x2a>
 800f110:	3314      	adds	r3, #20
 800f112:	3114      	adds	r1, #20
 800f114:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f118:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f11c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f120:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f124:	4295      	cmp	r5, r2
 800f126:	d003      	beq.n	800f130 <__mcmp+0x2c>
 800f128:	d205      	bcs.n	800f136 <__mcmp+0x32>
 800f12a:	f04f 30ff 	mov.w	r0, #4294967295
 800f12e:	bd30      	pop	{r4, r5, pc}
 800f130:	42a3      	cmp	r3, r4
 800f132:	d3f3      	bcc.n	800f11c <__mcmp+0x18>
 800f134:	e7fb      	b.n	800f12e <__mcmp+0x2a>
 800f136:	2001      	movs	r0, #1
 800f138:	e7f9      	b.n	800f12e <__mcmp+0x2a>
	...

0800f13c <__mdiff>:
 800f13c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f140:	4689      	mov	r9, r1
 800f142:	4606      	mov	r6, r0
 800f144:	4611      	mov	r1, r2
 800f146:	4648      	mov	r0, r9
 800f148:	4614      	mov	r4, r2
 800f14a:	f7ff ffdb 	bl	800f104 <__mcmp>
 800f14e:	1e05      	subs	r5, r0, #0
 800f150:	d112      	bne.n	800f178 <__mdiff+0x3c>
 800f152:	4629      	mov	r1, r5
 800f154:	4630      	mov	r0, r6
 800f156:	f7ff fd5b 	bl	800ec10 <_Balloc>
 800f15a:	4602      	mov	r2, r0
 800f15c:	b928      	cbnz	r0, 800f16a <__mdiff+0x2e>
 800f15e:	4b3f      	ldr	r3, [pc, #252]	@ (800f25c <__mdiff+0x120>)
 800f160:	f240 2137 	movw	r1, #567	@ 0x237
 800f164:	483e      	ldr	r0, [pc, #248]	@ (800f260 <__mdiff+0x124>)
 800f166:	f000 fb03 	bl	800f770 <__assert_func>
 800f16a:	2301      	movs	r3, #1
 800f16c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f170:	4610      	mov	r0, r2
 800f172:	b003      	add	sp, #12
 800f174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f178:	bfbc      	itt	lt
 800f17a:	464b      	movlt	r3, r9
 800f17c:	46a1      	movlt	r9, r4
 800f17e:	4630      	mov	r0, r6
 800f180:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f184:	bfba      	itte	lt
 800f186:	461c      	movlt	r4, r3
 800f188:	2501      	movlt	r5, #1
 800f18a:	2500      	movge	r5, #0
 800f18c:	f7ff fd40 	bl	800ec10 <_Balloc>
 800f190:	4602      	mov	r2, r0
 800f192:	b918      	cbnz	r0, 800f19c <__mdiff+0x60>
 800f194:	4b31      	ldr	r3, [pc, #196]	@ (800f25c <__mdiff+0x120>)
 800f196:	f240 2145 	movw	r1, #581	@ 0x245
 800f19a:	e7e3      	b.n	800f164 <__mdiff+0x28>
 800f19c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f1a0:	6926      	ldr	r6, [r4, #16]
 800f1a2:	60c5      	str	r5, [r0, #12]
 800f1a4:	f109 0310 	add.w	r3, r9, #16
 800f1a8:	f109 0514 	add.w	r5, r9, #20
 800f1ac:	f104 0e14 	add.w	lr, r4, #20
 800f1b0:	f100 0b14 	add.w	fp, r0, #20
 800f1b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f1b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f1bc:	9301      	str	r3, [sp, #4]
 800f1be:	46d9      	mov	r9, fp
 800f1c0:	f04f 0c00 	mov.w	ip, #0
 800f1c4:	9b01      	ldr	r3, [sp, #4]
 800f1c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f1ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f1ce:	9301      	str	r3, [sp, #4]
 800f1d0:	fa1f f38a 	uxth.w	r3, sl
 800f1d4:	4619      	mov	r1, r3
 800f1d6:	b283      	uxth	r3, r0
 800f1d8:	1acb      	subs	r3, r1, r3
 800f1da:	0c00      	lsrs	r0, r0, #16
 800f1dc:	4463      	add	r3, ip
 800f1de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f1e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f1e6:	b29b      	uxth	r3, r3
 800f1e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f1ec:	4576      	cmp	r6, lr
 800f1ee:	f849 3b04 	str.w	r3, [r9], #4
 800f1f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f1f6:	d8e5      	bhi.n	800f1c4 <__mdiff+0x88>
 800f1f8:	1b33      	subs	r3, r6, r4
 800f1fa:	3b15      	subs	r3, #21
 800f1fc:	f023 0303 	bic.w	r3, r3, #3
 800f200:	3415      	adds	r4, #21
 800f202:	3304      	adds	r3, #4
 800f204:	42a6      	cmp	r6, r4
 800f206:	bf38      	it	cc
 800f208:	2304      	movcc	r3, #4
 800f20a:	441d      	add	r5, r3
 800f20c:	445b      	add	r3, fp
 800f20e:	461e      	mov	r6, r3
 800f210:	462c      	mov	r4, r5
 800f212:	4544      	cmp	r4, r8
 800f214:	d30e      	bcc.n	800f234 <__mdiff+0xf8>
 800f216:	f108 0103 	add.w	r1, r8, #3
 800f21a:	1b49      	subs	r1, r1, r5
 800f21c:	f021 0103 	bic.w	r1, r1, #3
 800f220:	3d03      	subs	r5, #3
 800f222:	45a8      	cmp	r8, r5
 800f224:	bf38      	it	cc
 800f226:	2100      	movcc	r1, #0
 800f228:	440b      	add	r3, r1
 800f22a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f22e:	b191      	cbz	r1, 800f256 <__mdiff+0x11a>
 800f230:	6117      	str	r7, [r2, #16]
 800f232:	e79d      	b.n	800f170 <__mdiff+0x34>
 800f234:	f854 1b04 	ldr.w	r1, [r4], #4
 800f238:	46e6      	mov	lr, ip
 800f23a:	0c08      	lsrs	r0, r1, #16
 800f23c:	fa1c fc81 	uxtah	ip, ip, r1
 800f240:	4471      	add	r1, lr
 800f242:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f246:	b289      	uxth	r1, r1
 800f248:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f24c:	f846 1b04 	str.w	r1, [r6], #4
 800f250:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f254:	e7dd      	b.n	800f212 <__mdiff+0xd6>
 800f256:	3f01      	subs	r7, #1
 800f258:	e7e7      	b.n	800f22a <__mdiff+0xee>
 800f25a:	bf00      	nop
 800f25c:	08011151 	.word	0x08011151
 800f260:	08011162 	.word	0x08011162

0800f264 <__d2b>:
 800f264:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f268:	460f      	mov	r7, r1
 800f26a:	2101      	movs	r1, #1
 800f26c:	ec59 8b10 	vmov	r8, r9, d0
 800f270:	4616      	mov	r6, r2
 800f272:	f7ff fccd 	bl	800ec10 <_Balloc>
 800f276:	4604      	mov	r4, r0
 800f278:	b930      	cbnz	r0, 800f288 <__d2b+0x24>
 800f27a:	4602      	mov	r2, r0
 800f27c:	4b23      	ldr	r3, [pc, #140]	@ (800f30c <__d2b+0xa8>)
 800f27e:	4824      	ldr	r0, [pc, #144]	@ (800f310 <__d2b+0xac>)
 800f280:	f240 310f 	movw	r1, #783	@ 0x30f
 800f284:	f000 fa74 	bl	800f770 <__assert_func>
 800f288:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f28c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f290:	b10d      	cbz	r5, 800f296 <__d2b+0x32>
 800f292:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f296:	9301      	str	r3, [sp, #4]
 800f298:	f1b8 0300 	subs.w	r3, r8, #0
 800f29c:	d023      	beq.n	800f2e6 <__d2b+0x82>
 800f29e:	4668      	mov	r0, sp
 800f2a0:	9300      	str	r3, [sp, #0]
 800f2a2:	f7ff fd7c 	bl	800ed9e <__lo0bits>
 800f2a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f2aa:	b1d0      	cbz	r0, 800f2e2 <__d2b+0x7e>
 800f2ac:	f1c0 0320 	rsb	r3, r0, #32
 800f2b0:	fa02 f303 	lsl.w	r3, r2, r3
 800f2b4:	430b      	orrs	r3, r1
 800f2b6:	40c2      	lsrs	r2, r0
 800f2b8:	6163      	str	r3, [r4, #20]
 800f2ba:	9201      	str	r2, [sp, #4]
 800f2bc:	9b01      	ldr	r3, [sp, #4]
 800f2be:	61a3      	str	r3, [r4, #24]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	bf0c      	ite	eq
 800f2c4:	2201      	moveq	r2, #1
 800f2c6:	2202      	movne	r2, #2
 800f2c8:	6122      	str	r2, [r4, #16]
 800f2ca:	b1a5      	cbz	r5, 800f2f6 <__d2b+0x92>
 800f2cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f2d0:	4405      	add	r5, r0
 800f2d2:	603d      	str	r5, [r7, #0]
 800f2d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f2d8:	6030      	str	r0, [r6, #0]
 800f2da:	4620      	mov	r0, r4
 800f2dc:	b003      	add	sp, #12
 800f2de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2e2:	6161      	str	r1, [r4, #20]
 800f2e4:	e7ea      	b.n	800f2bc <__d2b+0x58>
 800f2e6:	a801      	add	r0, sp, #4
 800f2e8:	f7ff fd59 	bl	800ed9e <__lo0bits>
 800f2ec:	9b01      	ldr	r3, [sp, #4]
 800f2ee:	6163      	str	r3, [r4, #20]
 800f2f0:	3020      	adds	r0, #32
 800f2f2:	2201      	movs	r2, #1
 800f2f4:	e7e8      	b.n	800f2c8 <__d2b+0x64>
 800f2f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f2fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f2fe:	6038      	str	r0, [r7, #0]
 800f300:	6918      	ldr	r0, [r3, #16]
 800f302:	f7ff fd2d 	bl	800ed60 <__hi0bits>
 800f306:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f30a:	e7e5      	b.n	800f2d8 <__d2b+0x74>
 800f30c:	08011151 	.word	0x08011151
 800f310:	08011162 	.word	0x08011162

0800f314 <__ssputs_r>:
 800f314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f318:	688e      	ldr	r6, [r1, #8]
 800f31a:	461f      	mov	r7, r3
 800f31c:	42be      	cmp	r6, r7
 800f31e:	680b      	ldr	r3, [r1, #0]
 800f320:	4682      	mov	sl, r0
 800f322:	460c      	mov	r4, r1
 800f324:	4690      	mov	r8, r2
 800f326:	d82d      	bhi.n	800f384 <__ssputs_r+0x70>
 800f328:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f32c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f330:	d026      	beq.n	800f380 <__ssputs_r+0x6c>
 800f332:	6965      	ldr	r5, [r4, #20]
 800f334:	6909      	ldr	r1, [r1, #16]
 800f336:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f33a:	eba3 0901 	sub.w	r9, r3, r1
 800f33e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f342:	1c7b      	adds	r3, r7, #1
 800f344:	444b      	add	r3, r9
 800f346:	106d      	asrs	r5, r5, #1
 800f348:	429d      	cmp	r5, r3
 800f34a:	bf38      	it	cc
 800f34c:	461d      	movcc	r5, r3
 800f34e:	0553      	lsls	r3, r2, #21
 800f350:	d527      	bpl.n	800f3a2 <__ssputs_r+0x8e>
 800f352:	4629      	mov	r1, r5
 800f354:	f7ff fbd0 	bl	800eaf8 <_malloc_r>
 800f358:	4606      	mov	r6, r0
 800f35a:	b360      	cbz	r0, 800f3b6 <__ssputs_r+0xa2>
 800f35c:	6921      	ldr	r1, [r4, #16]
 800f35e:	464a      	mov	r2, r9
 800f360:	f7fe fcf9 	bl	800dd56 <memcpy>
 800f364:	89a3      	ldrh	r3, [r4, #12]
 800f366:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f36a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f36e:	81a3      	strh	r3, [r4, #12]
 800f370:	6126      	str	r6, [r4, #16]
 800f372:	6165      	str	r5, [r4, #20]
 800f374:	444e      	add	r6, r9
 800f376:	eba5 0509 	sub.w	r5, r5, r9
 800f37a:	6026      	str	r6, [r4, #0]
 800f37c:	60a5      	str	r5, [r4, #8]
 800f37e:	463e      	mov	r6, r7
 800f380:	42be      	cmp	r6, r7
 800f382:	d900      	bls.n	800f386 <__ssputs_r+0x72>
 800f384:	463e      	mov	r6, r7
 800f386:	6820      	ldr	r0, [r4, #0]
 800f388:	4632      	mov	r2, r6
 800f38a:	4641      	mov	r1, r8
 800f38c:	f000 f9c6 	bl	800f71c <memmove>
 800f390:	68a3      	ldr	r3, [r4, #8]
 800f392:	1b9b      	subs	r3, r3, r6
 800f394:	60a3      	str	r3, [r4, #8]
 800f396:	6823      	ldr	r3, [r4, #0]
 800f398:	4433      	add	r3, r6
 800f39a:	6023      	str	r3, [r4, #0]
 800f39c:	2000      	movs	r0, #0
 800f39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3a2:	462a      	mov	r2, r5
 800f3a4:	f000 fa28 	bl	800f7f8 <_realloc_r>
 800f3a8:	4606      	mov	r6, r0
 800f3aa:	2800      	cmp	r0, #0
 800f3ac:	d1e0      	bne.n	800f370 <__ssputs_r+0x5c>
 800f3ae:	6921      	ldr	r1, [r4, #16]
 800f3b0:	4650      	mov	r0, sl
 800f3b2:	f7ff fb2d 	bl	800ea10 <_free_r>
 800f3b6:	230c      	movs	r3, #12
 800f3b8:	f8ca 3000 	str.w	r3, [sl]
 800f3bc:	89a3      	ldrh	r3, [r4, #12]
 800f3be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f3c2:	81a3      	strh	r3, [r4, #12]
 800f3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f3c8:	e7e9      	b.n	800f39e <__ssputs_r+0x8a>
	...

0800f3cc <_svfiprintf_r>:
 800f3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d0:	4698      	mov	r8, r3
 800f3d2:	898b      	ldrh	r3, [r1, #12]
 800f3d4:	061b      	lsls	r3, r3, #24
 800f3d6:	b09d      	sub	sp, #116	@ 0x74
 800f3d8:	4607      	mov	r7, r0
 800f3da:	460d      	mov	r5, r1
 800f3dc:	4614      	mov	r4, r2
 800f3de:	d510      	bpl.n	800f402 <_svfiprintf_r+0x36>
 800f3e0:	690b      	ldr	r3, [r1, #16]
 800f3e2:	b973      	cbnz	r3, 800f402 <_svfiprintf_r+0x36>
 800f3e4:	2140      	movs	r1, #64	@ 0x40
 800f3e6:	f7ff fb87 	bl	800eaf8 <_malloc_r>
 800f3ea:	6028      	str	r0, [r5, #0]
 800f3ec:	6128      	str	r0, [r5, #16]
 800f3ee:	b930      	cbnz	r0, 800f3fe <_svfiprintf_r+0x32>
 800f3f0:	230c      	movs	r3, #12
 800f3f2:	603b      	str	r3, [r7, #0]
 800f3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f3f8:	b01d      	add	sp, #116	@ 0x74
 800f3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3fe:	2340      	movs	r3, #64	@ 0x40
 800f400:	616b      	str	r3, [r5, #20]
 800f402:	2300      	movs	r3, #0
 800f404:	9309      	str	r3, [sp, #36]	@ 0x24
 800f406:	2320      	movs	r3, #32
 800f408:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f40c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f410:	2330      	movs	r3, #48	@ 0x30
 800f412:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f5b0 <_svfiprintf_r+0x1e4>
 800f416:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f41a:	f04f 0901 	mov.w	r9, #1
 800f41e:	4623      	mov	r3, r4
 800f420:	469a      	mov	sl, r3
 800f422:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f426:	b10a      	cbz	r2, 800f42c <_svfiprintf_r+0x60>
 800f428:	2a25      	cmp	r2, #37	@ 0x25
 800f42a:	d1f9      	bne.n	800f420 <_svfiprintf_r+0x54>
 800f42c:	ebba 0b04 	subs.w	fp, sl, r4
 800f430:	d00b      	beq.n	800f44a <_svfiprintf_r+0x7e>
 800f432:	465b      	mov	r3, fp
 800f434:	4622      	mov	r2, r4
 800f436:	4629      	mov	r1, r5
 800f438:	4638      	mov	r0, r7
 800f43a:	f7ff ff6b 	bl	800f314 <__ssputs_r>
 800f43e:	3001      	adds	r0, #1
 800f440:	f000 80a7 	beq.w	800f592 <_svfiprintf_r+0x1c6>
 800f444:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f446:	445a      	add	r2, fp
 800f448:	9209      	str	r2, [sp, #36]	@ 0x24
 800f44a:	f89a 3000 	ldrb.w	r3, [sl]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	f000 809f 	beq.w	800f592 <_svfiprintf_r+0x1c6>
 800f454:	2300      	movs	r3, #0
 800f456:	f04f 32ff 	mov.w	r2, #4294967295
 800f45a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f45e:	f10a 0a01 	add.w	sl, sl, #1
 800f462:	9304      	str	r3, [sp, #16]
 800f464:	9307      	str	r3, [sp, #28]
 800f466:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f46a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f46c:	4654      	mov	r4, sl
 800f46e:	2205      	movs	r2, #5
 800f470:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f474:	484e      	ldr	r0, [pc, #312]	@ (800f5b0 <_svfiprintf_r+0x1e4>)
 800f476:	f7f0 feab 	bl	80001d0 <memchr>
 800f47a:	9a04      	ldr	r2, [sp, #16]
 800f47c:	b9d8      	cbnz	r0, 800f4b6 <_svfiprintf_r+0xea>
 800f47e:	06d0      	lsls	r0, r2, #27
 800f480:	bf44      	itt	mi
 800f482:	2320      	movmi	r3, #32
 800f484:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f488:	0711      	lsls	r1, r2, #28
 800f48a:	bf44      	itt	mi
 800f48c:	232b      	movmi	r3, #43	@ 0x2b
 800f48e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f492:	f89a 3000 	ldrb.w	r3, [sl]
 800f496:	2b2a      	cmp	r3, #42	@ 0x2a
 800f498:	d015      	beq.n	800f4c6 <_svfiprintf_r+0xfa>
 800f49a:	9a07      	ldr	r2, [sp, #28]
 800f49c:	4654      	mov	r4, sl
 800f49e:	2000      	movs	r0, #0
 800f4a0:	f04f 0c0a 	mov.w	ip, #10
 800f4a4:	4621      	mov	r1, r4
 800f4a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4aa:	3b30      	subs	r3, #48	@ 0x30
 800f4ac:	2b09      	cmp	r3, #9
 800f4ae:	d94b      	bls.n	800f548 <_svfiprintf_r+0x17c>
 800f4b0:	b1b0      	cbz	r0, 800f4e0 <_svfiprintf_r+0x114>
 800f4b2:	9207      	str	r2, [sp, #28]
 800f4b4:	e014      	b.n	800f4e0 <_svfiprintf_r+0x114>
 800f4b6:	eba0 0308 	sub.w	r3, r0, r8
 800f4ba:	fa09 f303 	lsl.w	r3, r9, r3
 800f4be:	4313      	orrs	r3, r2
 800f4c0:	9304      	str	r3, [sp, #16]
 800f4c2:	46a2      	mov	sl, r4
 800f4c4:	e7d2      	b.n	800f46c <_svfiprintf_r+0xa0>
 800f4c6:	9b03      	ldr	r3, [sp, #12]
 800f4c8:	1d19      	adds	r1, r3, #4
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	9103      	str	r1, [sp, #12]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	bfbb      	ittet	lt
 800f4d2:	425b      	neglt	r3, r3
 800f4d4:	f042 0202 	orrlt.w	r2, r2, #2
 800f4d8:	9307      	strge	r3, [sp, #28]
 800f4da:	9307      	strlt	r3, [sp, #28]
 800f4dc:	bfb8      	it	lt
 800f4de:	9204      	strlt	r2, [sp, #16]
 800f4e0:	7823      	ldrb	r3, [r4, #0]
 800f4e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f4e4:	d10a      	bne.n	800f4fc <_svfiprintf_r+0x130>
 800f4e6:	7863      	ldrb	r3, [r4, #1]
 800f4e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4ea:	d132      	bne.n	800f552 <_svfiprintf_r+0x186>
 800f4ec:	9b03      	ldr	r3, [sp, #12]
 800f4ee:	1d1a      	adds	r2, r3, #4
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	9203      	str	r2, [sp, #12]
 800f4f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f4f8:	3402      	adds	r4, #2
 800f4fa:	9305      	str	r3, [sp, #20]
 800f4fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f5c0 <_svfiprintf_r+0x1f4>
 800f500:	7821      	ldrb	r1, [r4, #0]
 800f502:	2203      	movs	r2, #3
 800f504:	4650      	mov	r0, sl
 800f506:	f7f0 fe63 	bl	80001d0 <memchr>
 800f50a:	b138      	cbz	r0, 800f51c <_svfiprintf_r+0x150>
 800f50c:	9b04      	ldr	r3, [sp, #16]
 800f50e:	eba0 000a 	sub.w	r0, r0, sl
 800f512:	2240      	movs	r2, #64	@ 0x40
 800f514:	4082      	lsls	r2, r0
 800f516:	4313      	orrs	r3, r2
 800f518:	3401      	adds	r4, #1
 800f51a:	9304      	str	r3, [sp, #16]
 800f51c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f520:	4824      	ldr	r0, [pc, #144]	@ (800f5b4 <_svfiprintf_r+0x1e8>)
 800f522:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f526:	2206      	movs	r2, #6
 800f528:	f7f0 fe52 	bl	80001d0 <memchr>
 800f52c:	2800      	cmp	r0, #0
 800f52e:	d036      	beq.n	800f59e <_svfiprintf_r+0x1d2>
 800f530:	4b21      	ldr	r3, [pc, #132]	@ (800f5b8 <_svfiprintf_r+0x1ec>)
 800f532:	bb1b      	cbnz	r3, 800f57c <_svfiprintf_r+0x1b0>
 800f534:	9b03      	ldr	r3, [sp, #12]
 800f536:	3307      	adds	r3, #7
 800f538:	f023 0307 	bic.w	r3, r3, #7
 800f53c:	3308      	adds	r3, #8
 800f53e:	9303      	str	r3, [sp, #12]
 800f540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f542:	4433      	add	r3, r6
 800f544:	9309      	str	r3, [sp, #36]	@ 0x24
 800f546:	e76a      	b.n	800f41e <_svfiprintf_r+0x52>
 800f548:	fb0c 3202 	mla	r2, ip, r2, r3
 800f54c:	460c      	mov	r4, r1
 800f54e:	2001      	movs	r0, #1
 800f550:	e7a8      	b.n	800f4a4 <_svfiprintf_r+0xd8>
 800f552:	2300      	movs	r3, #0
 800f554:	3401      	adds	r4, #1
 800f556:	9305      	str	r3, [sp, #20]
 800f558:	4619      	mov	r1, r3
 800f55a:	f04f 0c0a 	mov.w	ip, #10
 800f55e:	4620      	mov	r0, r4
 800f560:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f564:	3a30      	subs	r2, #48	@ 0x30
 800f566:	2a09      	cmp	r2, #9
 800f568:	d903      	bls.n	800f572 <_svfiprintf_r+0x1a6>
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d0c6      	beq.n	800f4fc <_svfiprintf_r+0x130>
 800f56e:	9105      	str	r1, [sp, #20]
 800f570:	e7c4      	b.n	800f4fc <_svfiprintf_r+0x130>
 800f572:	fb0c 2101 	mla	r1, ip, r1, r2
 800f576:	4604      	mov	r4, r0
 800f578:	2301      	movs	r3, #1
 800f57a:	e7f0      	b.n	800f55e <_svfiprintf_r+0x192>
 800f57c:	ab03      	add	r3, sp, #12
 800f57e:	9300      	str	r3, [sp, #0]
 800f580:	462a      	mov	r2, r5
 800f582:	4b0e      	ldr	r3, [pc, #56]	@ (800f5bc <_svfiprintf_r+0x1f0>)
 800f584:	a904      	add	r1, sp, #16
 800f586:	4638      	mov	r0, r7
 800f588:	f7fd fe50 	bl	800d22c <_printf_float>
 800f58c:	1c42      	adds	r2, r0, #1
 800f58e:	4606      	mov	r6, r0
 800f590:	d1d6      	bne.n	800f540 <_svfiprintf_r+0x174>
 800f592:	89ab      	ldrh	r3, [r5, #12]
 800f594:	065b      	lsls	r3, r3, #25
 800f596:	f53f af2d 	bmi.w	800f3f4 <_svfiprintf_r+0x28>
 800f59a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f59c:	e72c      	b.n	800f3f8 <_svfiprintf_r+0x2c>
 800f59e:	ab03      	add	r3, sp, #12
 800f5a0:	9300      	str	r3, [sp, #0]
 800f5a2:	462a      	mov	r2, r5
 800f5a4:	4b05      	ldr	r3, [pc, #20]	@ (800f5bc <_svfiprintf_r+0x1f0>)
 800f5a6:	a904      	add	r1, sp, #16
 800f5a8:	4638      	mov	r0, r7
 800f5aa:	f7fe f8d7 	bl	800d75c <_printf_i>
 800f5ae:	e7ed      	b.n	800f58c <_svfiprintf_r+0x1c0>
 800f5b0:	080112b8 	.word	0x080112b8
 800f5b4:	080112c2 	.word	0x080112c2
 800f5b8:	0800d22d 	.word	0x0800d22d
 800f5bc:	0800f315 	.word	0x0800f315
 800f5c0:	080112be 	.word	0x080112be

0800f5c4 <__sflush_r>:
 800f5c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5cc:	0716      	lsls	r6, r2, #28
 800f5ce:	4605      	mov	r5, r0
 800f5d0:	460c      	mov	r4, r1
 800f5d2:	d454      	bmi.n	800f67e <__sflush_r+0xba>
 800f5d4:	684b      	ldr	r3, [r1, #4]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	dc02      	bgt.n	800f5e0 <__sflush_r+0x1c>
 800f5da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	dd48      	ble.n	800f672 <__sflush_r+0xae>
 800f5e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f5e2:	2e00      	cmp	r6, #0
 800f5e4:	d045      	beq.n	800f672 <__sflush_r+0xae>
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f5ec:	682f      	ldr	r7, [r5, #0]
 800f5ee:	6a21      	ldr	r1, [r4, #32]
 800f5f0:	602b      	str	r3, [r5, #0]
 800f5f2:	d030      	beq.n	800f656 <__sflush_r+0x92>
 800f5f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f5f6:	89a3      	ldrh	r3, [r4, #12]
 800f5f8:	0759      	lsls	r1, r3, #29
 800f5fa:	d505      	bpl.n	800f608 <__sflush_r+0x44>
 800f5fc:	6863      	ldr	r3, [r4, #4]
 800f5fe:	1ad2      	subs	r2, r2, r3
 800f600:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f602:	b10b      	cbz	r3, 800f608 <__sflush_r+0x44>
 800f604:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f606:	1ad2      	subs	r2, r2, r3
 800f608:	2300      	movs	r3, #0
 800f60a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f60c:	6a21      	ldr	r1, [r4, #32]
 800f60e:	4628      	mov	r0, r5
 800f610:	47b0      	blx	r6
 800f612:	1c43      	adds	r3, r0, #1
 800f614:	89a3      	ldrh	r3, [r4, #12]
 800f616:	d106      	bne.n	800f626 <__sflush_r+0x62>
 800f618:	6829      	ldr	r1, [r5, #0]
 800f61a:	291d      	cmp	r1, #29
 800f61c:	d82b      	bhi.n	800f676 <__sflush_r+0xb2>
 800f61e:	4a2a      	ldr	r2, [pc, #168]	@ (800f6c8 <__sflush_r+0x104>)
 800f620:	410a      	asrs	r2, r1
 800f622:	07d6      	lsls	r6, r2, #31
 800f624:	d427      	bmi.n	800f676 <__sflush_r+0xb2>
 800f626:	2200      	movs	r2, #0
 800f628:	6062      	str	r2, [r4, #4]
 800f62a:	04d9      	lsls	r1, r3, #19
 800f62c:	6922      	ldr	r2, [r4, #16]
 800f62e:	6022      	str	r2, [r4, #0]
 800f630:	d504      	bpl.n	800f63c <__sflush_r+0x78>
 800f632:	1c42      	adds	r2, r0, #1
 800f634:	d101      	bne.n	800f63a <__sflush_r+0x76>
 800f636:	682b      	ldr	r3, [r5, #0]
 800f638:	b903      	cbnz	r3, 800f63c <__sflush_r+0x78>
 800f63a:	6560      	str	r0, [r4, #84]	@ 0x54
 800f63c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f63e:	602f      	str	r7, [r5, #0]
 800f640:	b1b9      	cbz	r1, 800f672 <__sflush_r+0xae>
 800f642:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f646:	4299      	cmp	r1, r3
 800f648:	d002      	beq.n	800f650 <__sflush_r+0x8c>
 800f64a:	4628      	mov	r0, r5
 800f64c:	f7ff f9e0 	bl	800ea10 <_free_r>
 800f650:	2300      	movs	r3, #0
 800f652:	6363      	str	r3, [r4, #52]	@ 0x34
 800f654:	e00d      	b.n	800f672 <__sflush_r+0xae>
 800f656:	2301      	movs	r3, #1
 800f658:	4628      	mov	r0, r5
 800f65a:	47b0      	blx	r6
 800f65c:	4602      	mov	r2, r0
 800f65e:	1c50      	adds	r0, r2, #1
 800f660:	d1c9      	bne.n	800f5f6 <__sflush_r+0x32>
 800f662:	682b      	ldr	r3, [r5, #0]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d0c6      	beq.n	800f5f6 <__sflush_r+0x32>
 800f668:	2b1d      	cmp	r3, #29
 800f66a:	d001      	beq.n	800f670 <__sflush_r+0xac>
 800f66c:	2b16      	cmp	r3, #22
 800f66e:	d11e      	bne.n	800f6ae <__sflush_r+0xea>
 800f670:	602f      	str	r7, [r5, #0]
 800f672:	2000      	movs	r0, #0
 800f674:	e022      	b.n	800f6bc <__sflush_r+0xf8>
 800f676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f67a:	b21b      	sxth	r3, r3
 800f67c:	e01b      	b.n	800f6b6 <__sflush_r+0xf2>
 800f67e:	690f      	ldr	r7, [r1, #16]
 800f680:	2f00      	cmp	r7, #0
 800f682:	d0f6      	beq.n	800f672 <__sflush_r+0xae>
 800f684:	0793      	lsls	r3, r2, #30
 800f686:	680e      	ldr	r6, [r1, #0]
 800f688:	bf08      	it	eq
 800f68a:	694b      	ldreq	r3, [r1, #20]
 800f68c:	600f      	str	r7, [r1, #0]
 800f68e:	bf18      	it	ne
 800f690:	2300      	movne	r3, #0
 800f692:	eba6 0807 	sub.w	r8, r6, r7
 800f696:	608b      	str	r3, [r1, #8]
 800f698:	f1b8 0f00 	cmp.w	r8, #0
 800f69c:	dde9      	ble.n	800f672 <__sflush_r+0xae>
 800f69e:	6a21      	ldr	r1, [r4, #32]
 800f6a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f6a2:	4643      	mov	r3, r8
 800f6a4:	463a      	mov	r2, r7
 800f6a6:	4628      	mov	r0, r5
 800f6a8:	47b0      	blx	r6
 800f6aa:	2800      	cmp	r0, #0
 800f6ac:	dc08      	bgt.n	800f6c0 <__sflush_r+0xfc>
 800f6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6b6:	81a3      	strh	r3, [r4, #12]
 800f6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6c0:	4407      	add	r7, r0
 800f6c2:	eba8 0800 	sub.w	r8, r8, r0
 800f6c6:	e7e7      	b.n	800f698 <__sflush_r+0xd4>
 800f6c8:	dfbffffe 	.word	0xdfbffffe

0800f6cc <_fflush_r>:
 800f6cc:	b538      	push	{r3, r4, r5, lr}
 800f6ce:	690b      	ldr	r3, [r1, #16]
 800f6d0:	4605      	mov	r5, r0
 800f6d2:	460c      	mov	r4, r1
 800f6d4:	b913      	cbnz	r3, 800f6dc <_fflush_r+0x10>
 800f6d6:	2500      	movs	r5, #0
 800f6d8:	4628      	mov	r0, r5
 800f6da:	bd38      	pop	{r3, r4, r5, pc}
 800f6dc:	b118      	cbz	r0, 800f6e6 <_fflush_r+0x1a>
 800f6de:	6a03      	ldr	r3, [r0, #32]
 800f6e0:	b90b      	cbnz	r3, 800f6e6 <_fflush_r+0x1a>
 800f6e2:	f7fe f9e7 	bl	800dab4 <__sinit>
 800f6e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d0f3      	beq.n	800f6d6 <_fflush_r+0xa>
 800f6ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f6f0:	07d0      	lsls	r0, r2, #31
 800f6f2:	d404      	bmi.n	800f6fe <_fflush_r+0x32>
 800f6f4:	0599      	lsls	r1, r3, #22
 800f6f6:	d402      	bmi.n	800f6fe <_fflush_r+0x32>
 800f6f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6fa:	f7fe fb2a 	bl	800dd52 <__retarget_lock_acquire_recursive>
 800f6fe:	4628      	mov	r0, r5
 800f700:	4621      	mov	r1, r4
 800f702:	f7ff ff5f 	bl	800f5c4 <__sflush_r>
 800f706:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f708:	07da      	lsls	r2, r3, #31
 800f70a:	4605      	mov	r5, r0
 800f70c:	d4e4      	bmi.n	800f6d8 <_fflush_r+0xc>
 800f70e:	89a3      	ldrh	r3, [r4, #12]
 800f710:	059b      	lsls	r3, r3, #22
 800f712:	d4e1      	bmi.n	800f6d8 <_fflush_r+0xc>
 800f714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f716:	f7fe fb1d 	bl	800dd54 <__retarget_lock_release_recursive>
 800f71a:	e7dd      	b.n	800f6d8 <_fflush_r+0xc>

0800f71c <memmove>:
 800f71c:	4288      	cmp	r0, r1
 800f71e:	b510      	push	{r4, lr}
 800f720:	eb01 0402 	add.w	r4, r1, r2
 800f724:	d902      	bls.n	800f72c <memmove+0x10>
 800f726:	4284      	cmp	r4, r0
 800f728:	4623      	mov	r3, r4
 800f72a:	d807      	bhi.n	800f73c <memmove+0x20>
 800f72c:	1e43      	subs	r3, r0, #1
 800f72e:	42a1      	cmp	r1, r4
 800f730:	d008      	beq.n	800f744 <memmove+0x28>
 800f732:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f736:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f73a:	e7f8      	b.n	800f72e <memmove+0x12>
 800f73c:	4402      	add	r2, r0
 800f73e:	4601      	mov	r1, r0
 800f740:	428a      	cmp	r2, r1
 800f742:	d100      	bne.n	800f746 <memmove+0x2a>
 800f744:	bd10      	pop	{r4, pc}
 800f746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f74a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f74e:	e7f7      	b.n	800f740 <memmove+0x24>

0800f750 <_sbrk_r>:
 800f750:	b538      	push	{r3, r4, r5, lr}
 800f752:	4d06      	ldr	r5, [pc, #24]	@ (800f76c <_sbrk_r+0x1c>)
 800f754:	2300      	movs	r3, #0
 800f756:	4604      	mov	r4, r0
 800f758:	4608      	mov	r0, r1
 800f75a:	602b      	str	r3, [r5, #0]
 800f75c:	f7f4 fd10 	bl	8004180 <_sbrk>
 800f760:	1c43      	adds	r3, r0, #1
 800f762:	d102      	bne.n	800f76a <_sbrk_r+0x1a>
 800f764:	682b      	ldr	r3, [r5, #0]
 800f766:	b103      	cbz	r3, 800f76a <_sbrk_r+0x1a>
 800f768:	6023      	str	r3, [r4, #0]
 800f76a:	bd38      	pop	{r3, r4, r5, pc}
 800f76c:	20005498 	.word	0x20005498

0800f770 <__assert_func>:
 800f770:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f772:	4614      	mov	r4, r2
 800f774:	461a      	mov	r2, r3
 800f776:	4b09      	ldr	r3, [pc, #36]	@ (800f79c <__assert_func+0x2c>)
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	4605      	mov	r5, r0
 800f77c:	68d8      	ldr	r0, [r3, #12]
 800f77e:	b954      	cbnz	r4, 800f796 <__assert_func+0x26>
 800f780:	4b07      	ldr	r3, [pc, #28]	@ (800f7a0 <__assert_func+0x30>)
 800f782:	461c      	mov	r4, r3
 800f784:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f788:	9100      	str	r1, [sp, #0]
 800f78a:	462b      	mov	r3, r5
 800f78c:	4905      	ldr	r1, [pc, #20]	@ (800f7a4 <__assert_func+0x34>)
 800f78e:	f000 f86f 	bl	800f870 <fiprintf>
 800f792:	f000 f87f 	bl	800f894 <abort>
 800f796:	4b04      	ldr	r3, [pc, #16]	@ (800f7a8 <__assert_func+0x38>)
 800f798:	e7f4      	b.n	800f784 <__assert_func+0x14>
 800f79a:	bf00      	nop
 800f79c:	2000003c 	.word	0x2000003c
 800f7a0:	0801130e 	.word	0x0801130e
 800f7a4:	080112e0 	.word	0x080112e0
 800f7a8:	080112d3 	.word	0x080112d3

0800f7ac <_calloc_r>:
 800f7ac:	b570      	push	{r4, r5, r6, lr}
 800f7ae:	fba1 5402 	umull	r5, r4, r1, r2
 800f7b2:	b93c      	cbnz	r4, 800f7c4 <_calloc_r+0x18>
 800f7b4:	4629      	mov	r1, r5
 800f7b6:	f7ff f99f 	bl	800eaf8 <_malloc_r>
 800f7ba:	4606      	mov	r6, r0
 800f7bc:	b928      	cbnz	r0, 800f7ca <_calloc_r+0x1e>
 800f7be:	2600      	movs	r6, #0
 800f7c0:	4630      	mov	r0, r6
 800f7c2:	bd70      	pop	{r4, r5, r6, pc}
 800f7c4:	220c      	movs	r2, #12
 800f7c6:	6002      	str	r2, [r0, #0]
 800f7c8:	e7f9      	b.n	800f7be <_calloc_r+0x12>
 800f7ca:	462a      	mov	r2, r5
 800f7cc:	4621      	mov	r1, r4
 800f7ce:	f7fe fa1e 	bl	800dc0e <memset>
 800f7d2:	e7f5      	b.n	800f7c0 <_calloc_r+0x14>

0800f7d4 <__ascii_mbtowc>:
 800f7d4:	b082      	sub	sp, #8
 800f7d6:	b901      	cbnz	r1, 800f7da <__ascii_mbtowc+0x6>
 800f7d8:	a901      	add	r1, sp, #4
 800f7da:	b142      	cbz	r2, 800f7ee <__ascii_mbtowc+0x1a>
 800f7dc:	b14b      	cbz	r3, 800f7f2 <__ascii_mbtowc+0x1e>
 800f7de:	7813      	ldrb	r3, [r2, #0]
 800f7e0:	600b      	str	r3, [r1, #0]
 800f7e2:	7812      	ldrb	r2, [r2, #0]
 800f7e4:	1e10      	subs	r0, r2, #0
 800f7e6:	bf18      	it	ne
 800f7e8:	2001      	movne	r0, #1
 800f7ea:	b002      	add	sp, #8
 800f7ec:	4770      	bx	lr
 800f7ee:	4610      	mov	r0, r2
 800f7f0:	e7fb      	b.n	800f7ea <__ascii_mbtowc+0x16>
 800f7f2:	f06f 0001 	mvn.w	r0, #1
 800f7f6:	e7f8      	b.n	800f7ea <__ascii_mbtowc+0x16>

0800f7f8 <_realloc_r>:
 800f7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7fc:	4680      	mov	r8, r0
 800f7fe:	4615      	mov	r5, r2
 800f800:	460c      	mov	r4, r1
 800f802:	b921      	cbnz	r1, 800f80e <_realloc_r+0x16>
 800f804:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f808:	4611      	mov	r1, r2
 800f80a:	f7ff b975 	b.w	800eaf8 <_malloc_r>
 800f80e:	b92a      	cbnz	r2, 800f81c <_realloc_r+0x24>
 800f810:	f7ff f8fe 	bl	800ea10 <_free_r>
 800f814:	2400      	movs	r4, #0
 800f816:	4620      	mov	r0, r4
 800f818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f81c:	f000 f841 	bl	800f8a2 <_malloc_usable_size_r>
 800f820:	4285      	cmp	r5, r0
 800f822:	4606      	mov	r6, r0
 800f824:	d802      	bhi.n	800f82c <_realloc_r+0x34>
 800f826:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f82a:	d8f4      	bhi.n	800f816 <_realloc_r+0x1e>
 800f82c:	4629      	mov	r1, r5
 800f82e:	4640      	mov	r0, r8
 800f830:	f7ff f962 	bl	800eaf8 <_malloc_r>
 800f834:	4607      	mov	r7, r0
 800f836:	2800      	cmp	r0, #0
 800f838:	d0ec      	beq.n	800f814 <_realloc_r+0x1c>
 800f83a:	42b5      	cmp	r5, r6
 800f83c:	462a      	mov	r2, r5
 800f83e:	4621      	mov	r1, r4
 800f840:	bf28      	it	cs
 800f842:	4632      	movcs	r2, r6
 800f844:	f7fe fa87 	bl	800dd56 <memcpy>
 800f848:	4621      	mov	r1, r4
 800f84a:	4640      	mov	r0, r8
 800f84c:	f7ff f8e0 	bl	800ea10 <_free_r>
 800f850:	463c      	mov	r4, r7
 800f852:	e7e0      	b.n	800f816 <_realloc_r+0x1e>

0800f854 <__ascii_wctomb>:
 800f854:	4603      	mov	r3, r0
 800f856:	4608      	mov	r0, r1
 800f858:	b141      	cbz	r1, 800f86c <__ascii_wctomb+0x18>
 800f85a:	2aff      	cmp	r2, #255	@ 0xff
 800f85c:	d904      	bls.n	800f868 <__ascii_wctomb+0x14>
 800f85e:	228a      	movs	r2, #138	@ 0x8a
 800f860:	601a      	str	r2, [r3, #0]
 800f862:	f04f 30ff 	mov.w	r0, #4294967295
 800f866:	4770      	bx	lr
 800f868:	700a      	strb	r2, [r1, #0]
 800f86a:	2001      	movs	r0, #1
 800f86c:	4770      	bx	lr
	...

0800f870 <fiprintf>:
 800f870:	b40e      	push	{r1, r2, r3}
 800f872:	b503      	push	{r0, r1, lr}
 800f874:	4601      	mov	r1, r0
 800f876:	ab03      	add	r3, sp, #12
 800f878:	4805      	ldr	r0, [pc, #20]	@ (800f890 <fiprintf+0x20>)
 800f87a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f87e:	6800      	ldr	r0, [r0, #0]
 800f880:	9301      	str	r3, [sp, #4]
 800f882:	f000 f83f 	bl	800f904 <_vfiprintf_r>
 800f886:	b002      	add	sp, #8
 800f888:	f85d eb04 	ldr.w	lr, [sp], #4
 800f88c:	b003      	add	sp, #12
 800f88e:	4770      	bx	lr
 800f890:	2000003c 	.word	0x2000003c

0800f894 <abort>:
 800f894:	b508      	push	{r3, lr}
 800f896:	2006      	movs	r0, #6
 800f898:	f000 fa08 	bl	800fcac <raise>
 800f89c:	2001      	movs	r0, #1
 800f89e:	f7f4 fbf7 	bl	8004090 <_exit>

0800f8a2 <_malloc_usable_size_r>:
 800f8a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8a6:	1f18      	subs	r0, r3, #4
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	bfbc      	itt	lt
 800f8ac:	580b      	ldrlt	r3, [r1, r0]
 800f8ae:	18c0      	addlt	r0, r0, r3
 800f8b0:	4770      	bx	lr

0800f8b2 <__sfputc_r>:
 800f8b2:	6893      	ldr	r3, [r2, #8]
 800f8b4:	3b01      	subs	r3, #1
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	b410      	push	{r4}
 800f8ba:	6093      	str	r3, [r2, #8]
 800f8bc:	da08      	bge.n	800f8d0 <__sfputc_r+0x1e>
 800f8be:	6994      	ldr	r4, [r2, #24]
 800f8c0:	42a3      	cmp	r3, r4
 800f8c2:	db01      	blt.n	800f8c8 <__sfputc_r+0x16>
 800f8c4:	290a      	cmp	r1, #10
 800f8c6:	d103      	bne.n	800f8d0 <__sfputc_r+0x1e>
 800f8c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f8cc:	f000 b932 	b.w	800fb34 <__swbuf_r>
 800f8d0:	6813      	ldr	r3, [r2, #0]
 800f8d2:	1c58      	adds	r0, r3, #1
 800f8d4:	6010      	str	r0, [r2, #0]
 800f8d6:	7019      	strb	r1, [r3, #0]
 800f8d8:	4608      	mov	r0, r1
 800f8da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f8de:	4770      	bx	lr

0800f8e0 <__sfputs_r>:
 800f8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8e2:	4606      	mov	r6, r0
 800f8e4:	460f      	mov	r7, r1
 800f8e6:	4614      	mov	r4, r2
 800f8e8:	18d5      	adds	r5, r2, r3
 800f8ea:	42ac      	cmp	r4, r5
 800f8ec:	d101      	bne.n	800f8f2 <__sfputs_r+0x12>
 800f8ee:	2000      	movs	r0, #0
 800f8f0:	e007      	b.n	800f902 <__sfputs_r+0x22>
 800f8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8f6:	463a      	mov	r2, r7
 800f8f8:	4630      	mov	r0, r6
 800f8fa:	f7ff ffda 	bl	800f8b2 <__sfputc_r>
 800f8fe:	1c43      	adds	r3, r0, #1
 800f900:	d1f3      	bne.n	800f8ea <__sfputs_r+0xa>
 800f902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f904 <_vfiprintf_r>:
 800f904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f908:	460d      	mov	r5, r1
 800f90a:	b09d      	sub	sp, #116	@ 0x74
 800f90c:	4614      	mov	r4, r2
 800f90e:	4698      	mov	r8, r3
 800f910:	4606      	mov	r6, r0
 800f912:	b118      	cbz	r0, 800f91c <_vfiprintf_r+0x18>
 800f914:	6a03      	ldr	r3, [r0, #32]
 800f916:	b90b      	cbnz	r3, 800f91c <_vfiprintf_r+0x18>
 800f918:	f7fe f8cc 	bl	800dab4 <__sinit>
 800f91c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f91e:	07d9      	lsls	r1, r3, #31
 800f920:	d405      	bmi.n	800f92e <_vfiprintf_r+0x2a>
 800f922:	89ab      	ldrh	r3, [r5, #12]
 800f924:	059a      	lsls	r2, r3, #22
 800f926:	d402      	bmi.n	800f92e <_vfiprintf_r+0x2a>
 800f928:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f92a:	f7fe fa12 	bl	800dd52 <__retarget_lock_acquire_recursive>
 800f92e:	89ab      	ldrh	r3, [r5, #12]
 800f930:	071b      	lsls	r3, r3, #28
 800f932:	d501      	bpl.n	800f938 <_vfiprintf_r+0x34>
 800f934:	692b      	ldr	r3, [r5, #16]
 800f936:	b99b      	cbnz	r3, 800f960 <_vfiprintf_r+0x5c>
 800f938:	4629      	mov	r1, r5
 800f93a:	4630      	mov	r0, r6
 800f93c:	f000 f938 	bl	800fbb0 <__swsetup_r>
 800f940:	b170      	cbz	r0, 800f960 <_vfiprintf_r+0x5c>
 800f942:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f944:	07dc      	lsls	r4, r3, #31
 800f946:	d504      	bpl.n	800f952 <_vfiprintf_r+0x4e>
 800f948:	f04f 30ff 	mov.w	r0, #4294967295
 800f94c:	b01d      	add	sp, #116	@ 0x74
 800f94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f952:	89ab      	ldrh	r3, [r5, #12]
 800f954:	0598      	lsls	r0, r3, #22
 800f956:	d4f7      	bmi.n	800f948 <_vfiprintf_r+0x44>
 800f958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f95a:	f7fe f9fb 	bl	800dd54 <__retarget_lock_release_recursive>
 800f95e:	e7f3      	b.n	800f948 <_vfiprintf_r+0x44>
 800f960:	2300      	movs	r3, #0
 800f962:	9309      	str	r3, [sp, #36]	@ 0x24
 800f964:	2320      	movs	r3, #32
 800f966:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f96a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f96e:	2330      	movs	r3, #48	@ 0x30
 800f970:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fb20 <_vfiprintf_r+0x21c>
 800f974:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f978:	f04f 0901 	mov.w	r9, #1
 800f97c:	4623      	mov	r3, r4
 800f97e:	469a      	mov	sl, r3
 800f980:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f984:	b10a      	cbz	r2, 800f98a <_vfiprintf_r+0x86>
 800f986:	2a25      	cmp	r2, #37	@ 0x25
 800f988:	d1f9      	bne.n	800f97e <_vfiprintf_r+0x7a>
 800f98a:	ebba 0b04 	subs.w	fp, sl, r4
 800f98e:	d00b      	beq.n	800f9a8 <_vfiprintf_r+0xa4>
 800f990:	465b      	mov	r3, fp
 800f992:	4622      	mov	r2, r4
 800f994:	4629      	mov	r1, r5
 800f996:	4630      	mov	r0, r6
 800f998:	f7ff ffa2 	bl	800f8e0 <__sfputs_r>
 800f99c:	3001      	adds	r0, #1
 800f99e:	f000 80a7 	beq.w	800faf0 <_vfiprintf_r+0x1ec>
 800f9a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f9a4:	445a      	add	r2, fp
 800f9a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800f9a8:	f89a 3000 	ldrb.w	r3, [sl]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	f000 809f 	beq.w	800faf0 <_vfiprintf_r+0x1ec>
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f9b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9bc:	f10a 0a01 	add.w	sl, sl, #1
 800f9c0:	9304      	str	r3, [sp, #16]
 800f9c2:	9307      	str	r3, [sp, #28]
 800f9c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f9c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800f9ca:	4654      	mov	r4, sl
 800f9cc:	2205      	movs	r2, #5
 800f9ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9d2:	4853      	ldr	r0, [pc, #332]	@ (800fb20 <_vfiprintf_r+0x21c>)
 800f9d4:	f7f0 fbfc 	bl	80001d0 <memchr>
 800f9d8:	9a04      	ldr	r2, [sp, #16]
 800f9da:	b9d8      	cbnz	r0, 800fa14 <_vfiprintf_r+0x110>
 800f9dc:	06d1      	lsls	r1, r2, #27
 800f9de:	bf44      	itt	mi
 800f9e0:	2320      	movmi	r3, #32
 800f9e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f9e6:	0713      	lsls	r3, r2, #28
 800f9e8:	bf44      	itt	mi
 800f9ea:	232b      	movmi	r3, #43	@ 0x2b
 800f9ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f9f0:	f89a 3000 	ldrb.w	r3, [sl]
 800f9f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9f6:	d015      	beq.n	800fa24 <_vfiprintf_r+0x120>
 800f9f8:	9a07      	ldr	r2, [sp, #28]
 800f9fa:	4654      	mov	r4, sl
 800f9fc:	2000      	movs	r0, #0
 800f9fe:	f04f 0c0a 	mov.w	ip, #10
 800fa02:	4621      	mov	r1, r4
 800fa04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa08:	3b30      	subs	r3, #48	@ 0x30
 800fa0a:	2b09      	cmp	r3, #9
 800fa0c:	d94b      	bls.n	800faa6 <_vfiprintf_r+0x1a2>
 800fa0e:	b1b0      	cbz	r0, 800fa3e <_vfiprintf_r+0x13a>
 800fa10:	9207      	str	r2, [sp, #28]
 800fa12:	e014      	b.n	800fa3e <_vfiprintf_r+0x13a>
 800fa14:	eba0 0308 	sub.w	r3, r0, r8
 800fa18:	fa09 f303 	lsl.w	r3, r9, r3
 800fa1c:	4313      	orrs	r3, r2
 800fa1e:	9304      	str	r3, [sp, #16]
 800fa20:	46a2      	mov	sl, r4
 800fa22:	e7d2      	b.n	800f9ca <_vfiprintf_r+0xc6>
 800fa24:	9b03      	ldr	r3, [sp, #12]
 800fa26:	1d19      	adds	r1, r3, #4
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	9103      	str	r1, [sp, #12]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	bfbb      	ittet	lt
 800fa30:	425b      	neglt	r3, r3
 800fa32:	f042 0202 	orrlt.w	r2, r2, #2
 800fa36:	9307      	strge	r3, [sp, #28]
 800fa38:	9307      	strlt	r3, [sp, #28]
 800fa3a:	bfb8      	it	lt
 800fa3c:	9204      	strlt	r2, [sp, #16]
 800fa3e:	7823      	ldrb	r3, [r4, #0]
 800fa40:	2b2e      	cmp	r3, #46	@ 0x2e
 800fa42:	d10a      	bne.n	800fa5a <_vfiprintf_r+0x156>
 800fa44:	7863      	ldrb	r3, [r4, #1]
 800fa46:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa48:	d132      	bne.n	800fab0 <_vfiprintf_r+0x1ac>
 800fa4a:	9b03      	ldr	r3, [sp, #12]
 800fa4c:	1d1a      	adds	r2, r3, #4
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	9203      	str	r2, [sp, #12]
 800fa52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fa56:	3402      	adds	r4, #2
 800fa58:	9305      	str	r3, [sp, #20]
 800fa5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fb30 <_vfiprintf_r+0x22c>
 800fa5e:	7821      	ldrb	r1, [r4, #0]
 800fa60:	2203      	movs	r2, #3
 800fa62:	4650      	mov	r0, sl
 800fa64:	f7f0 fbb4 	bl	80001d0 <memchr>
 800fa68:	b138      	cbz	r0, 800fa7a <_vfiprintf_r+0x176>
 800fa6a:	9b04      	ldr	r3, [sp, #16]
 800fa6c:	eba0 000a 	sub.w	r0, r0, sl
 800fa70:	2240      	movs	r2, #64	@ 0x40
 800fa72:	4082      	lsls	r2, r0
 800fa74:	4313      	orrs	r3, r2
 800fa76:	3401      	adds	r4, #1
 800fa78:	9304      	str	r3, [sp, #16]
 800fa7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa7e:	4829      	ldr	r0, [pc, #164]	@ (800fb24 <_vfiprintf_r+0x220>)
 800fa80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fa84:	2206      	movs	r2, #6
 800fa86:	f7f0 fba3 	bl	80001d0 <memchr>
 800fa8a:	2800      	cmp	r0, #0
 800fa8c:	d03f      	beq.n	800fb0e <_vfiprintf_r+0x20a>
 800fa8e:	4b26      	ldr	r3, [pc, #152]	@ (800fb28 <_vfiprintf_r+0x224>)
 800fa90:	bb1b      	cbnz	r3, 800fada <_vfiprintf_r+0x1d6>
 800fa92:	9b03      	ldr	r3, [sp, #12]
 800fa94:	3307      	adds	r3, #7
 800fa96:	f023 0307 	bic.w	r3, r3, #7
 800fa9a:	3308      	adds	r3, #8
 800fa9c:	9303      	str	r3, [sp, #12]
 800fa9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800faa0:	443b      	add	r3, r7
 800faa2:	9309      	str	r3, [sp, #36]	@ 0x24
 800faa4:	e76a      	b.n	800f97c <_vfiprintf_r+0x78>
 800faa6:	fb0c 3202 	mla	r2, ip, r2, r3
 800faaa:	460c      	mov	r4, r1
 800faac:	2001      	movs	r0, #1
 800faae:	e7a8      	b.n	800fa02 <_vfiprintf_r+0xfe>
 800fab0:	2300      	movs	r3, #0
 800fab2:	3401      	adds	r4, #1
 800fab4:	9305      	str	r3, [sp, #20]
 800fab6:	4619      	mov	r1, r3
 800fab8:	f04f 0c0a 	mov.w	ip, #10
 800fabc:	4620      	mov	r0, r4
 800fabe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fac2:	3a30      	subs	r2, #48	@ 0x30
 800fac4:	2a09      	cmp	r2, #9
 800fac6:	d903      	bls.n	800fad0 <_vfiprintf_r+0x1cc>
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d0c6      	beq.n	800fa5a <_vfiprintf_r+0x156>
 800facc:	9105      	str	r1, [sp, #20]
 800face:	e7c4      	b.n	800fa5a <_vfiprintf_r+0x156>
 800fad0:	fb0c 2101 	mla	r1, ip, r1, r2
 800fad4:	4604      	mov	r4, r0
 800fad6:	2301      	movs	r3, #1
 800fad8:	e7f0      	b.n	800fabc <_vfiprintf_r+0x1b8>
 800fada:	ab03      	add	r3, sp, #12
 800fadc:	9300      	str	r3, [sp, #0]
 800fade:	462a      	mov	r2, r5
 800fae0:	4b12      	ldr	r3, [pc, #72]	@ (800fb2c <_vfiprintf_r+0x228>)
 800fae2:	a904      	add	r1, sp, #16
 800fae4:	4630      	mov	r0, r6
 800fae6:	f7fd fba1 	bl	800d22c <_printf_float>
 800faea:	4607      	mov	r7, r0
 800faec:	1c78      	adds	r0, r7, #1
 800faee:	d1d6      	bne.n	800fa9e <_vfiprintf_r+0x19a>
 800faf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800faf2:	07d9      	lsls	r1, r3, #31
 800faf4:	d405      	bmi.n	800fb02 <_vfiprintf_r+0x1fe>
 800faf6:	89ab      	ldrh	r3, [r5, #12]
 800faf8:	059a      	lsls	r2, r3, #22
 800fafa:	d402      	bmi.n	800fb02 <_vfiprintf_r+0x1fe>
 800fafc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fafe:	f7fe f929 	bl	800dd54 <__retarget_lock_release_recursive>
 800fb02:	89ab      	ldrh	r3, [r5, #12]
 800fb04:	065b      	lsls	r3, r3, #25
 800fb06:	f53f af1f 	bmi.w	800f948 <_vfiprintf_r+0x44>
 800fb0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb0c:	e71e      	b.n	800f94c <_vfiprintf_r+0x48>
 800fb0e:	ab03      	add	r3, sp, #12
 800fb10:	9300      	str	r3, [sp, #0]
 800fb12:	462a      	mov	r2, r5
 800fb14:	4b05      	ldr	r3, [pc, #20]	@ (800fb2c <_vfiprintf_r+0x228>)
 800fb16:	a904      	add	r1, sp, #16
 800fb18:	4630      	mov	r0, r6
 800fb1a:	f7fd fe1f 	bl	800d75c <_printf_i>
 800fb1e:	e7e4      	b.n	800faea <_vfiprintf_r+0x1e6>
 800fb20:	080112b8 	.word	0x080112b8
 800fb24:	080112c2 	.word	0x080112c2
 800fb28:	0800d22d 	.word	0x0800d22d
 800fb2c:	0800f8e1 	.word	0x0800f8e1
 800fb30:	080112be 	.word	0x080112be

0800fb34 <__swbuf_r>:
 800fb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb36:	460e      	mov	r6, r1
 800fb38:	4614      	mov	r4, r2
 800fb3a:	4605      	mov	r5, r0
 800fb3c:	b118      	cbz	r0, 800fb46 <__swbuf_r+0x12>
 800fb3e:	6a03      	ldr	r3, [r0, #32]
 800fb40:	b90b      	cbnz	r3, 800fb46 <__swbuf_r+0x12>
 800fb42:	f7fd ffb7 	bl	800dab4 <__sinit>
 800fb46:	69a3      	ldr	r3, [r4, #24]
 800fb48:	60a3      	str	r3, [r4, #8]
 800fb4a:	89a3      	ldrh	r3, [r4, #12]
 800fb4c:	071a      	lsls	r2, r3, #28
 800fb4e:	d501      	bpl.n	800fb54 <__swbuf_r+0x20>
 800fb50:	6923      	ldr	r3, [r4, #16]
 800fb52:	b943      	cbnz	r3, 800fb66 <__swbuf_r+0x32>
 800fb54:	4621      	mov	r1, r4
 800fb56:	4628      	mov	r0, r5
 800fb58:	f000 f82a 	bl	800fbb0 <__swsetup_r>
 800fb5c:	b118      	cbz	r0, 800fb66 <__swbuf_r+0x32>
 800fb5e:	f04f 37ff 	mov.w	r7, #4294967295
 800fb62:	4638      	mov	r0, r7
 800fb64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb66:	6823      	ldr	r3, [r4, #0]
 800fb68:	6922      	ldr	r2, [r4, #16]
 800fb6a:	1a98      	subs	r0, r3, r2
 800fb6c:	6963      	ldr	r3, [r4, #20]
 800fb6e:	b2f6      	uxtb	r6, r6
 800fb70:	4283      	cmp	r3, r0
 800fb72:	4637      	mov	r7, r6
 800fb74:	dc05      	bgt.n	800fb82 <__swbuf_r+0x4e>
 800fb76:	4621      	mov	r1, r4
 800fb78:	4628      	mov	r0, r5
 800fb7a:	f7ff fda7 	bl	800f6cc <_fflush_r>
 800fb7e:	2800      	cmp	r0, #0
 800fb80:	d1ed      	bne.n	800fb5e <__swbuf_r+0x2a>
 800fb82:	68a3      	ldr	r3, [r4, #8]
 800fb84:	3b01      	subs	r3, #1
 800fb86:	60a3      	str	r3, [r4, #8]
 800fb88:	6823      	ldr	r3, [r4, #0]
 800fb8a:	1c5a      	adds	r2, r3, #1
 800fb8c:	6022      	str	r2, [r4, #0]
 800fb8e:	701e      	strb	r6, [r3, #0]
 800fb90:	6962      	ldr	r2, [r4, #20]
 800fb92:	1c43      	adds	r3, r0, #1
 800fb94:	429a      	cmp	r2, r3
 800fb96:	d004      	beq.n	800fba2 <__swbuf_r+0x6e>
 800fb98:	89a3      	ldrh	r3, [r4, #12]
 800fb9a:	07db      	lsls	r3, r3, #31
 800fb9c:	d5e1      	bpl.n	800fb62 <__swbuf_r+0x2e>
 800fb9e:	2e0a      	cmp	r6, #10
 800fba0:	d1df      	bne.n	800fb62 <__swbuf_r+0x2e>
 800fba2:	4621      	mov	r1, r4
 800fba4:	4628      	mov	r0, r5
 800fba6:	f7ff fd91 	bl	800f6cc <_fflush_r>
 800fbaa:	2800      	cmp	r0, #0
 800fbac:	d0d9      	beq.n	800fb62 <__swbuf_r+0x2e>
 800fbae:	e7d6      	b.n	800fb5e <__swbuf_r+0x2a>

0800fbb0 <__swsetup_r>:
 800fbb0:	b538      	push	{r3, r4, r5, lr}
 800fbb2:	4b29      	ldr	r3, [pc, #164]	@ (800fc58 <__swsetup_r+0xa8>)
 800fbb4:	4605      	mov	r5, r0
 800fbb6:	6818      	ldr	r0, [r3, #0]
 800fbb8:	460c      	mov	r4, r1
 800fbba:	b118      	cbz	r0, 800fbc4 <__swsetup_r+0x14>
 800fbbc:	6a03      	ldr	r3, [r0, #32]
 800fbbe:	b90b      	cbnz	r3, 800fbc4 <__swsetup_r+0x14>
 800fbc0:	f7fd ff78 	bl	800dab4 <__sinit>
 800fbc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbc8:	0719      	lsls	r1, r3, #28
 800fbca:	d422      	bmi.n	800fc12 <__swsetup_r+0x62>
 800fbcc:	06da      	lsls	r2, r3, #27
 800fbce:	d407      	bmi.n	800fbe0 <__swsetup_r+0x30>
 800fbd0:	2209      	movs	r2, #9
 800fbd2:	602a      	str	r2, [r5, #0]
 800fbd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fbd8:	81a3      	strh	r3, [r4, #12]
 800fbda:	f04f 30ff 	mov.w	r0, #4294967295
 800fbde:	e033      	b.n	800fc48 <__swsetup_r+0x98>
 800fbe0:	0758      	lsls	r0, r3, #29
 800fbe2:	d512      	bpl.n	800fc0a <__swsetup_r+0x5a>
 800fbe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fbe6:	b141      	cbz	r1, 800fbfa <__swsetup_r+0x4a>
 800fbe8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fbec:	4299      	cmp	r1, r3
 800fbee:	d002      	beq.n	800fbf6 <__swsetup_r+0x46>
 800fbf0:	4628      	mov	r0, r5
 800fbf2:	f7fe ff0d 	bl	800ea10 <_free_r>
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	6363      	str	r3, [r4, #52]	@ 0x34
 800fbfa:	89a3      	ldrh	r3, [r4, #12]
 800fbfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fc00:	81a3      	strh	r3, [r4, #12]
 800fc02:	2300      	movs	r3, #0
 800fc04:	6063      	str	r3, [r4, #4]
 800fc06:	6923      	ldr	r3, [r4, #16]
 800fc08:	6023      	str	r3, [r4, #0]
 800fc0a:	89a3      	ldrh	r3, [r4, #12]
 800fc0c:	f043 0308 	orr.w	r3, r3, #8
 800fc10:	81a3      	strh	r3, [r4, #12]
 800fc12:	6923      	ldr	r3, [r4, #16]
 800fc14:	b94b      	cbnz	r3, 800fc2a <__swsetup_r+0x7a>
 800fc16:	89a3      	ldrh	r3, [r4, #12]
 800fc18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fc1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fc20:	d003      	beq.n	800fc2a <__swsetup_r+0x7a>
 800fc22:	4621      	mov	r1, r4
 800fc24:	4628      	mov	r0, r5
 800fc26:	f000 f883 	bl	800fd30 <__smakebuf_r>
 800fc2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc2e:	f013 0201 	ands.w	r2, r3, #1
 800fc32:	d00a      	beq.n	800fc4a <__swsetup_r+0x9a>
 800fc34:	2200      	movs	r2, #0
 800fc36:	60a2      	str	r2, [r4, #8]
 800fc38:	6962      	ldr	r2, [r4, #20]
 800fc3a:	4252      	negs	r2, r2
 800fc3c:	61a2      	str	r2, [r4, #24]
 800fc3e:	6922      	ldr	r2, [r4, #16]
 800fc40:	b942      	cbnz	r2, 800fc54 <__swsetup_r+0xa4>
 800fc42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fc46:	d1c5      	bne.n	800fbd4 <__swsetup_r+0x24>
 800fc48:	bd38      	pop	{r3, r4, r5, pc}
 800fc4a:	0799      	lsls	r1, r3, #30
 800fc4c:	bf58      	it	pl
 800fc4e:	6962      	ldrpl	r2, [r4, #20]
 800fc50:	60a2      	str	r2, [r4, #8]
 800fc52:	e7f4      	b.n	800fc3e <__swsetup_r+0x8e>
 800fc54:	2000      	movs	r0, #0
 800fc56:	e7f7      	b.n	800fc48 <__swsetup_r+0x98>
 800fc58:	2000003c 	.word	0x2000003c

0800fc5c <_raise_r>:
 800fc5c:	291f      	cmp	r1, #31
 800fc5e:	b538      	push	{r3, r4, r5, lr}
 800fc60:	4605      	mov	r5, r0
 800fc62:	460c      	mov	r4, r1
 800fc64:	d904      	bls.n	800fc70 <_raise_r+0x14>
 800fc66:	2316      	movs	r3, #22
 800fc68:	6003      	str	r3, [r0, #0]
 800fc6a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc6e:	bd38      	pop	{r3, r4, r5, pc}
 800fc70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fc72:	b112      	cbz	r2, 800fc7a <_raise_r+0x1e>
 800fc74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc78:	b94b      	cbnz	r3, 800fc8e <_raise_r+0x32>
 800fc7a:	4628      	mov	r0, r5
 800fc7c:	f000 f830 	bl	800fce0 <_getpid_r>
 800fc80:	4622      	mov	r2, r4
 800fc82:	4601      	mov	r1, r0
 800fc84:	4628      	mov	r0, r5
 800fc86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc8a:	f000 b817 	b.w	800fcbc <_kill_r>
 800fc8e:	2b01      	cmp	r3, #1
 800fc90:	d00a      	beq.n	800fca8 <_raise_r+0x4c>
 800fc92:	1c59      	adds	r1, r3, #1
 800fc94:	d103      	bne.n	800fc9e <_raise_r+0x42>
 800fc96:	2316      	movs	r3, #22
 800fc98:	6003      	str	r3, [r0, #0]
 800fc9a:	2001      	movs	r0, #1
 800fc9c:	e7e7      	b.n	800fc6e <_raise_r+0x12>
 800fc9e:	2100      	movs	r1, #0
 800fca0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fca4:	4620      	mov	r0, r4
 800fca6:	4798      	blx	r3
 800fca8:	2000      	movs	r0, #0
 800fcaa:	e7e0      	b.n	800fc6e <_raise_r+0x12>

0800fcac <raise>:
 800fcac:	4b02      	ldr	r3, [pc, #8]	@ (800fcb8 <raise+0xc>)
 800fcae:	4601      	mov	r1, r0
 800fcb0:	6818      	ldr	r0, [r3, #0]
 800fcb2:	f7ff bfd3 	b.w	800fc5c <_raise_r>
 800fcb6:	bf00      	nop
 800fcb8:	2000003c 	.word	0x2000003c

0800fcbc <_kill_r>:
 800fcbc:	b538      	push	{r3, r4, r5, lr}
 800fcbe:	4d07      	ldr	r5, [pc, #28]	@ (800fcdc <_kill_r+0x20>)
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	4604      	mov	r4, r0
 800fcc4:	4608      	mov	r0, r1
 800fcc6:	4611      	mov	r1, r2
 800fcc8:	602b      	str	r3, [r5, #0]
 800fcca:	f7f4 f9d1 	bl	8004070 <_kill>
 800fcce:	1c43      	adds	r3, r0, #1
 800fcd0:	d102      	bne.n	800fcd8 <_kill_r+0x1c>
 800fcd2:	682b      	ldr	r3, [r5, #0]
 800fcd4:	b103      	cbz	r3, 800fcd8 <_kill_r+0x1c>
 800fcd6:	6023      	str	r3, [r4, #0]
 800fcd8:	bd38      	pop	{r3, r4, r5, pc}
 800fcda:	bf00      	nop
 800fcdc:	20005498 	.word	0x20005498

0800fce0 <_getpid_r>:
 800fce0:	f7f4 b9be 	b.w	8004060 <_getpid>

0800fce4 <__swhatbuf_r>:
 800fce4:	b570      	push	{r4, r5, r6, lr}
 800fce6:	460c      	mov	r4, r1
 800fce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcec:	2900      	cmp	r1, #0
 800fcee:	b096      	sub	sp, #88	@ 0x58
 800fcf0:	4615      	mov	r5, r2
 800fcf2:	461e      	mov	r6, r3
 800fcf4:	da0d      	bge.n	800fd12 <__swhatbuf_r+0x2e>
 800fcf6:	89a3      	ldrh	r3, [r4, #12]
 800fcf8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fcfc:	f04f 0100 	mov.w	r1, #0
 800fd00:	bf14      	ite	ne
 800fd02:	2340      	movne	r3, #64	@ 0x40
 800fd04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fd08:	2000      	movs	r0, #0
 800fd0a:	6031      	str	r1, [r6, #0]
 800fd0c:	602b      	str	r3, [r5, #0]
 800fd0e:	b016      	add	sp, #88	@ 0x58
 800fd10:	bd70      	pop	{r4, r5, r6, pc}
 800fd12:	466a      	mov	r2, sp
 800fd14:	f000 f848 	bl	800fda8 <_fstat_r>
 800fd18:	2800      	cmp	r0, #0
 800fd1a:	dbec      	blt.n	800fcf6 <__swhatbuf_r+0x12>
 800fd1c:	9901      	ldr	r1, [sp, #4]
 800fd1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fd22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fd26:	4259      	negs	r1, r3
 800fd28:	4159      	adcs	r1, r3
 800fd2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd2e:	e7eb      	b.n	800fd08 <__swhatbuf_r+0x24>

0800fd30 <__smakebuf_r>:
 800fd30:	898b      	ldrh	r3, [r1, #12]
 800fd32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd34:	079d      	lsls	r5, r3, #30
 800fd36:	4606      	mov	r6, r0
 800fd38:	460c      	mov	r4, r1
 800fd3a:	d507      	bpl.n	800fd4c <__smakebuf_r+0x1c>
 800fd3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fd40:	6023      	str	r3, [r4, #0]
 800fd42:	6123      	str	r3, [r4, #16]
 800fd44:	2301      	movs	r3, #1
 800fd46:	6163      	str	r3, [r4, #20]
 800fd48:	b003      	add	sp, #12
 800fd4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd4c:	ab01      	add	r3, sp, #4
 800fd4e:	466a      	mov	r2, sp
 800fd50:	f7ff ffc8 	bl	800fce4 <__swhatbuf_r>
 800fd54:	9f00      	ldr	r7, [sp, #0]
 800fd56:	4605      	mov	r5, r0
 800fd58:	4639      	mov	r1, r7
 800fd5a:	4630      	mov	r0, r6
 800fd5c:	f7fe fecc 	bl	800eaf8 <_malloc_r>
 800fd60:	b948      	cbnz	r0, 800fd76 <__smakebuf_r+0x46>
 800fd62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd66:	059a      	lsls	r2, r3, #22
 800fd68:	d4ee      	bmi.n	800fd48 <__smakebuf_r+0x18>
 800fd6a:	f023 0303 	bic.w	r3, r3, #3
 800fd6e:	f043 0302 	orr.w	r3, r3, #2
 800fd72:	81a3      	strh	r3, [r4, #12]
 800fd74:	e7e2      	b.n	800fd3c <__smakebuf_r+0xc>
 800fd76:	89a3      	ldrh	r3, [r4, #12]
 800fd78:	6020      	str	r0, [r4, #0]
 800fd7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd7e:	81a3      	strh	r3, [r4, #12]
 800fd80:	9b01      	ldr	r3, [sp, #4]
 800fd82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fd86:	b15b      	cbz	r3, 800fda0 <__smakebuf_r+0x70>
 800fd88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd8c:	4630      	mov	r0, r6
 800fd8e:	f000 f81d 	bl	800fdcc <_isatty_r>
 800fd92:	b128      	cbz	r0, 800fda0 <__smakebuf_r+0x70>
 800fd94:	89a3      	ldrh	r3, [r4, #12]
 800fd96:	f023 0303 	bic.w	r3, r3, #3
 800fd9a:	f043 0301 	orr.w	r3, r3, #1
 800fd9e:	81a3      	strh	r3, [r4, #12]
 800fda0:	89a3      	ldrh	r3, [r4, #12]
 800fda2:	431d      	orrs	r5, r3
 800fda4:	81a5      	strh	r5, [r4, #12]
 800fda6:	e7cf      	b.n	800fd48 <__smakebuf_r+0x18>

0800fda8 <_fstat_r>:
 800fda8:	b538      	push	{r3, r4, r5, lr}
 800fdaa:	4d07      	ldr	r5, [pc, #28]	@ (800fdc8 <_fstat_r+0x20>)
 800fdac:	2300      	movs	r3, #0
 800fdae:	4604      	mov	r4, r0
 800fdb0:	4608      	mov	r0, r1
 800fdb2:	4611      	mov	r1, r2
 800fdb4:	602b      	str	r3, [r5, #0]
 800fdb6:	f7f4 f9bb 	bl	8004130 <_fstat>
 800fdba:	1c43      	adds	r3, r0, #1
 800fdbc:	d102      	bne.n	800fdc4 <_fstat_r+0x1c>
 800fdbe:	682b      	ldr	r3, [r5, #0]
 800fdc0:	b103      	cbz	r3, 800fdc4 <_fstat_r+0x1c>
 800fdc2:	6023      	str	r3, [r4, #0]
 800fdc4:	bd38      	pop	{r3, r4, r5, pc}
 800fdc6:	bf00      	nop
 800fdc8:	20005498 	.word	0x20005498

0800fdcc <_isatty_r>:
 800fdcc:	b538      	push	{r3, r4, r5, lr}
 800fdce:	4d06      	ldr	r5, [pc, #24]	@ (800fde8 <_isatty_r+0x1c>)
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	4604      	mov	r4, r0
 800fdd4:	4608      	mov	r0, r1
 800fdd6:	602b      	str	r3, [r5, #0]
 800fdd8:	f7f4 f9ba 	bl	8004150 <_isatty>
 800fddc:	1c43      	adds	r3, r0, #1
 800fdde:	d102      	bne.n	800fde6 <_isatty_r+0x1a>
 800fde0:	682b      	ldr	r3, [r5, #0]
 800fde2:	b103      	cbz	r3, 800fde6 <_isatty_r+0x1a>
 800fde4:	6023      	str	r3, [r4, #0]
 800fde6:	bd38      	pop	{r3, r4, r5, pc}
 800fde8:	20005498 	.word	0x20005498

0800fdec <atan2>:
 800fdec:	f000 b800 	b.w	800fdf0 <__ieee754_atan2>

0800fdf0 <__ieee754_atan2>:
 800fdf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdf4:	ec57 6b11 	vmov	r6, r7, d1
 800fdf8:	4273      	negs	r3, r6
 800fdfa:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800ff78 <__ieee754_atan2+0x188>
 800fdfe:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800fe02:	4333      	orrs	r3, r6
 800fe04:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800fe08:	4543      	cmp	r3, r8
 800fe0a:	ec51 0b10 	vmov	r0, r1, d0
 800fe0e:	4635      	mov	r5, r6
 800fe10:	d809      	bhi.n	800fe26 <__ieee754_atan2+0x36>
 800fe12:	4244      	negs	r4, r0
 800fe14:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fe18:	4304      	orrs	r4, r0
 800fe1a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800fe1e:	4544      	cmp	r4, r8
 800fe20:	468e      	mov	lr, r1
 800fe22:	4681      	mov	r9, r0
 800fe24:	d907      	bls.n	800fe36 <__ieee754_atan2+0x46>
 800fe26:	4632      	mov	r2, r6
 800fe28:	463b      	mov	r3, r7
 800fe2a:	f7f0 fa2f 	bl	800028c <__adddf3>
 800fe2e:	ec41 0b10 	vmov	d0, r0, r1
 800fe32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe36:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800fe3a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800fe3e:	4334      	orrs	r4, r6
 800fe40:	d103      	bne.n	800fe4a <__ieee754_atan2+0x5a>
 800fe42:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe46:	f000 b89b 	b.w	800ff80 <atan>
 800fe4a:	17bc      	asrs	r4, r7, #30
 800fe4c:	f004 0402 	and.w	r4, r4, #2
 800fe50:	ea53 0909 	orrs.w	r9, r3, r9
 800fe54:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800fe58:	d107      	bne.n	800fe6a <__ieee754_atan2+0x7a>
 800fe5a:	2c02      	cmp	r4, #2
 800fe5c:	d05f      	beq.n	800ff1e <__ieee754_atan2+0x12e>
 800fe5e:	2c03      	cmp	r4, #3
 800fe60:	d1e5      	bne.n	800fe2e <__ieee754_atan2+0x3e>
 800fe62:	a141      	add	r1, pc, #260	@ (adr r1, 800ff68 <__ieee754_atan2+0x178>)
 800fe64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe68:	e7e1      	b.n	800fe2e <__ieee754_atan2+0x3e>
 800fe6a:	4315      	orrs	r5, r2
 800fe6c:	d106      	bne.n	800fe7c <__ieee754_atan2+0x8c>
 800fe6e:	f1be 0f00 	cmp.w	lr, #0
 800fe72:	da5f      	bge.n	800ff34 <__ieee754_atan2+0x144>
 800fe74:	a13e      	add	r1, pc, #248	@ (adr r1, 800ff70 <__ieee754_atan2+0x180>)
 800fe76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe7a:	e7d8      	b.n	800fe2e <__ieee754_atan2+0x3e>
 800fe7c:	4542      	cmp	r2, r8
 800fe7e:	d10f      	bne.n	800fea0 <__ieee754_atan2+0xb0>
 800fe80:	4293      	cmp	r3, r2
 800fe82:	f104 34ff 	add.w	r4, r4, #4294967295
 800fe86:	d107      	bne.n	800fe98 <__ieee754_atan2+0xa8>
 800fe88:	2c02      	cmp	r4, #2
 800fe8a:	d84c      	bhi.n	800ff26 <__ieee754_atan2+0x136>
 800fe8c:	4b34      	ldr	r3, [pc, #208]	@ (800ff60 <__ieee754_atan2+0x170>)
 800fe8e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fe92:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fe96:	e7ca      	b.n	800fe2e <__ieee754_atan2+0x3e>
 800fe98:	2c02      	cmp	r4, #2
 800fe9a:	d848      	bhi.n	800ff2e <__ieee754_atan2+0x13e>
 800fe9c:	4b31      	ldr	r3, [pc, #196]	@ (800ff64 <__ieee754_atan2+0x174>)
 800fe9e:	e7f6      	b.n	800fe8e <__ieee754_atan2+0x9e>
 800fea0:	4543      	cmp	r3, r8
 800fea2:	d0e4      	beq.n	800fe6e <__ieee754_atan2+0x7e>
 800fea4:	1a9b      	subs	r3, r3, r2
 800fea6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800feaa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800feae:	da1e      	bge.n	800feee <__ieee754_atan2+0xfe>
 800feb0:	2f00      	cmp	r7, #0
 800feb2:	da01      	bge.n	800feb8 <__ieee754_atan2+0xc8>
 800feb4:	323c      	adds	r2, #60	@ 0x3c
 800feb6:	db1e      	blt.n	800fef6 <__ieee754_atan2+0x106>
 800feb8:	4632      	mov	r2, r6
 800feba:	463b      	mov	r3, r7
 800febc:	f7f0 fcc6 	bl	800084c <__aeabi_ddiv>
 800fec0:	ec41 0b10 	vmov	d0, r0, r1
 800fec4:	f000 f9f4 	bl	80102b0 <fabs>
 800fec8:	f000 f85a 	bl	800ff80 <atan>
 800fecc:	ec51 0b10 	vmov	r0, r1, d0
 800fed0:	2c01      	cmp	r4, #1
 800fed2:	d013      	beq.n	800fefc <__ieee754_atan2+0x10c>
 800fed4:	2c02      	cmp	r4, #2
 800fed6:	d015      	beq.n	800ff04 <__ieee754_atan2+0x114>
 800fed8:	2c00      	cmp	r4, #0
 800feda:	d0a8      	beq.n	800fe2e <__ieee754_atan2+0x3e>
 800fedc:	a318      	add	r3, pc, #96	@ (adr r3, 800ff40 <__ieee754_atan2+0x150>)
 800fede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee2:	f7f0 f9d1 	bl	8000288 <__aeabi_dsub>
 800fee6:	a318      	add	r3, pc, #96	@ (adr r3, 800ff48 <__ieee754_atan2+0x158>)
 800fee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feec:	e014      	b.n	800ff18 <__ieee754_atan2+0x128>
 800feee:	a118      	add	r1, pc, #96	@ (adr r1, 800ff50 <__ieee754_atan2+0x160>)
 800fef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fef4:	e7ec      	b.n	800fed0 <__ieee754_atan2+0xe0>
 800fef6:	2000      	movs	r0, #0
 800fef8:	2100      	movs	r1, #0
 800fefa:	e7e9      	b.n	800fed0 <__ieee754_atan2+0xe0>
 800fefc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ff00:	4619      	mov	r1, r3
 800ff02:	e794      	b.n	800fe2e <__ieee754_atan2+0x3e>
 800ff04:	a30e      	add	r3, pc, #56	@ (adr r3, 800ff40 <__ieee754_atan2+0x150>)
 800ff06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0a:	f7f0 f9bd 	bl	8000288 <__aeabi_dsub>
 800ff0e:	4602      	mov	r2, r0
 800ff10:	460b      	mov	r3, r1
 800ff12:	a10d      	add	r1, pc, #52	@ (adr r1, 800ff48 <__ieee754_atan2+0x158>)
 800ff14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff18:	f7f0 f9b6 	bl	8000288 <__aeabi_dsub>
 800ff1c:	e787      	b.n	800fe2e <__ieee754_atan2+0x3e>
 800ff1e:	a10a      	add	r1, pc, #40	@ (adr r1, 800ff48 <__ieee754_atan2+0x158>)
 800ff20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff24:	e783      	b.n	800fe2e <__ieee754_atan2+0x3e>
 800ff26:	a10c      	add	r1, pc, #48	@ (adr r1, 800ff58 <__ieee754_atan2+0x168>)
 800ff28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff2c:	e77f      	b.n	800fe2e <__ieee754_atan2+0x3e>
 800ff2e:	2000      	movs	r0, #0
 800ff30:	2100      	movs	r1, #0
 800ff32:	e77c      	b.n	800fe2e <__ieee754_atan2+0x3e>
 800ff34:	a106      	add	r1, pc, #24	@ (adr r1, 800ff50 <__ieee754_atan2+0x160>)
 800ff36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff3a:	e778      	b.n	800fe2e <__ieee754_atan2+0x3e>
 800ff3c:	f3af 8000 	nop.w
 800ff40:	33145c07 	.word	0x33145c07
 800ff44:	3ca1a626 	.word	0x3ca1a626
 800ff48:	54442d18 	.word	0x54442d18
 800ff4c:	400921fb 	.word	0x400921fb
 800ff50:	54442d18 	.word	0x54442d18
 800ff54:	3ff921fb 	.word	0x3ff921fb
 800ff58:	54442d18 	.word	0x54442d18
 800ff5c:	3fe921fb 	.word	0x3fe921fb
 800ff60:	08011328 	.word	0x08011328
 800ff64:	08011310 	.word	0x08011310
 800ff68:	54442d18 	.word	0x54442d18
 800ff6c:	c00921fb 	.word	0xc00921fb
 800ff70:	54442d18 	.word	0x54442d18
 800ff74:	bff921fb 	.word	0xbff921fb
 800ff78:	7ff00000 	.word	0x7ff00000
 800ff7c:	00000000 	.word	0x00000000

0800ff80 <atan>:
 800ff80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff84:	ec55 4b10 	vmov	r4, r5, d0
 800ff88:	4bbf      	ldr	r3, [pc, #764]	@ (8010288 <atan+0x308>)
 800ff8a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800ff8e:	429e      	cmp	r6, r3
 800ff90:	46ab      	mov	fp, r5
 800ff92:	d918      	bls.n	800ffc6 <atan+0x46>
 800ff94:	4bbd      	ldr	r3, [pc, #756]	@ (801028c <atan+0x30c>)
 800ff96:	429e      	cmp	r6, r3
 800ff98:	d801      	bhi.n	800ff9e <atan+0x1e>
 800ff9a:	d109      	bne.n	800ffb0 <atan+0x30>
 800ff9c:	b144      	cbz	r4, 800ffb0 <atan+0x30>
 800ff9e:	4622      	mov	r2, r4
 800ffa0:	462b      	mov	r3, r5
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	4629      	mov	r1, r5
 800ffa6:	f7f0 f971 	bl	800028c <__adddf3>
 800ffaa:	4604      	mov	r4, r0
 800ffac:	460d      	mov	r5, r1
 800ffae:	e006      	b.n	800ffbe <atan+0x3e>
 800ffb0:	f1bb 0f00 	cmp.w	fp, #0
 800ffb4:	f340 812b 	ble.w	801020e <atan+0x28e>
 800ffb8:	a597      	add	r5, pc, #604	@ (adr r5, 8010218 <atan+0x298>)
 800ffba:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ffbe:	ec45 4b10 	vmov	d0, r4, r5
 800ffc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffc6:	4bb2      	ldr	r3, [pc, #712]	@ (8010290 <atan+0x310>)
 800ffc8:	429e      	cmp	r6, r3
 800ffca:	d813      	bhi.n	800fff4 <atan+0x74>
 800ffcc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800ffd0:	429e      	cmp	r6, r3
 800ffd2:	d80c      	bhi.n	800ffee <atan+0x6e>
 800ffd4:	a392      	add	r3, pc, #584	@ (adr r3, 8010220 <atan+0x2a0>)
 800ffd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffda:	4620      	mov	r0, r4
 800ffdc:	4629      	mov	r1, r5
 800ffde:	f7f0 f955 	bl	800028c <__adddf3>
 800ffe2:	4bac      	ldr	r3, [pc, #688]	@ (8010294 <atan+0x314>)
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	f7f0 fd97 	bl	8000b18 <__aeabi_dcmpgt>
 800ffea:	2800      	cmp	r0, #0
 800ffec:	d1e7      	bne.n	800ffbe <atan+0x3e>
 800ffee:	f04f 3aff 	mov.w	sl, #4294967295
 800fff2:	e029      	b.n	8010048 <atan+0xc8>
 800fff4:	f000 f95c 	bl	80102b0 <fabs>
 800fff8:	4ba7      	ldr	r3, [pc, #668]	@ (8010298 <atan+0x318>)
 800fffa:	429e      	cmp	r6, r3
 800fffc:	ec55 4b10 	vmov	r4, r5, d0
 8010000:	f200 80bc 	bhi.w	801017c <atan+0x1fc>
 8010004:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8010008:	429e      	cmp	r6, r3
 801000a:	f200 809e 	bhi.w	801014a <atan+0x1ca>
 801000e:	4622      	mov	r2, r4
 8010010:	462b      	mov	r3, r5
 8010012:	4620      	mov	r0, r4
 8010014:	4629      	mov	r1, r5
 8010016:	f7f0 f939 	bl	800028c <__adddf3>
 801001a:	4b9e      	ldr	r3, [pc, #632]	@ (8010294 <atan+0x314>)
 801001c:	2200      	movs	r2, #0
 801001e:	f7f0 f933 	bl	8000288 <__aeabi_dsub>
 8010022:	2200      	movs	r2, #0
 8010024:	4606      	mov	r6, r0
 8010026:	460f      	mov	r7, r1
 8010028:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801002c:	4620      	mov	r0, r4
 801002e:	4629      	mov	r1, r5
 8010030:	f7f0 f92c 	bl	800028c <__adddf3>
 8010034:	4602      	mov	r2, r0
 8010036:	460b      	mov	r3, r1
 8010038:	4630      	mov	r0, r6
 801003a:	4639      	mov	r1, r7
 801003c:	f7f0 fc06 	bl	800084c <__aeabi_ddiv>
 8010040:	f04f 0a00 	mov.w	sl, #0
 8010044:	4604      	mov	r4, r0
 8010046:	460d      	mov	r5, r1
 8010048:	4622      	mov	r2, r4
 801004a:	462b      	mov	r3, r5
 801004c:	4620      	mov	r0, r4
 801004e:	4629      	mov	r1, r5
 8010050:	f7f0 fad2 	bl	80005f8 <__aeabi_dmul>
 8010054:	4602      	mov	r2, r0
 8010056:	460b      	mov	r3, r1
 8010058:	4680      	mov	r8, r0
 801005a:	4689      	mov	r9, r1
 801005c:	f7f0 facc 	bl	80005f8 <__aeabi_dmul>
 8010060:	a371      	add	r3, pc, #452	@ (adr r3, 8010228 <atan+0x2a8>)
 8010062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010066:	4606      	mov	r6, r0
 8010068:	460f      	mov	r7, r1
 801006a:	f7f0 fac5 	bl	80005f8 <__aeabi_dmul>
 801006e:	a370      	add	r3, pc, #448	@ (adr r3, 8010230 <atan+0x2b0>)
 8010070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010074:	f7f0 f90a 	bl	800028c <__adddf3>
 8010078:	4632      	mov	r2, r6
 801007a:	463b      	mov	r3, r7
 801007c:	f7f0 fabc 	bl	80005f8 <__aeabi_dmul>
 8010080:	a36d      	add	r3, pc, #436	@ (adr r3, 8010238 <atan+0x2b8>)
 8010082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010086:	f7f0 f901 	bl	800028c <__adddf3>
 801008a:	4632      	mov	r2, r6
 801008c:	463b      	mov	r3, r7
 801008e:	f7f0 fab3 	bl	80005f8 <__aeabi_dmul>
 8010092:	a36b      	add	r3, pc, #428	@ (adr r3, 8010240 <atan+0x2c0>)
 8010094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010098:	f7f0 f8f8 	bl	800028c <__adddf3>
 801009c:	4632      	mov	r2, r6
 801009e:	463b      	mov	r3, r7
 80100a0:	f7f0 faaa 	bl	80005f8 <__aeabi_dmul>
 80100a4:	a368      	add	r3, pc, #416	@ (adr r3, 8010248 <atan+0x2c8>)
 80100a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100aa:	f7f0 f8ef 	bl	800028c <__adddf3>
 80100ae:	4632      	mov	r2, r6
 80100b0:	463b      	mov	r3, r7
 80100b2:	f7f0 faa1 	bl	80005f8 <__aeabi_dmul>
 80100b6:	a366      	add	r3, pc, #408	@ (adr r3, 8010250 <atan+0x2d0>)
 80100b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100bc:	f7f0 f8e6 	bl	800028c <__adddf3>
 80100c0:	4642      	mov	r2, r8
 80100c2:	464b      	mov	r3, r9
 80100c4:	f7f0 fa98 	bl	80005f8 <__aeabi_dmul>
 80100c8:	a363      	add	r3, pc, #396	@ (adr r3, 8010258 <atan+0x2d8>)
 80100ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ce:	4680      	mov	r8, r0
 80100d0:	4689      	mov	r9, r1
 80100d2:	4630      	mov	r0, r6
 80100d4:	4639      	mov	r1, r7
 80100d6:	f7f0 fa8f 	bl	80005f8 <__aeabi_dmul>
 80100da:	a361      	add	r3, pc, #388	@ (adr r3, 8010260 <atan+0x2e0>)
 80100dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e0:	f7f0 f8d2 	bl	8000288 <__aeabi_dsub>
 80100e4:	4632      	mov	r2, r6
 80100e6:	463b      	mov	r3, r7
 80100e8:	f7f0 fa86 	bl	80005f8 <__aeabi_dmul>
 80100ec:	a35e      	add	r3, pc, #376	@ (adr r3, 8010268 <atan+0x2e8>)
 80100ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f2:	f7f0 f8c9 	bl	8000288 <__aeabi_dsub>
 80100f6:	4632      	mov	r2, r6
 80100f8:	463b      	mov	r3, r7
 80100fa:	f7f0 fa7d 	bl	80005f8 <__aeabi_dmul>
 80100fe:	a35c      	add	r3, pc, #368	@ (adr r3, 8010270 <atan+0x2f0>)
 8010100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010104:	f7f0 f8c0 	bl	8000288 <__aeabi_dsub>
 8010108:	4632      	mov	r2, r6
 801010a:	463b      	mov	r3, r7
 801010c:	f7f0 fa74 	bl	80005f8 <__aeabi_dmul>
 8010110:	a359      	add	r3, pc, #356	@ (adr r3, 8010278 <atan+0x2f8>)
 8010112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010116:	f7f0 f8b7 	bl	8000288 <__aeabi_dsub>
 801011a:	4632      	mov	r2, r6
 801011c:	463b      	mov	r3, r7
 801011e:	f7f0 fa6b 	bl	80005f8 <__aeabi_dmul>
 8010122:	4602      	mov	r2, r0
 8010124:	460b      	mov	r3, r1
 8010126:	4640      	mov	r0, r8
 8010128:	4649      	mov	r1, r9
 801012a:	f7f0 f8af 	bl	800028c <__adddf3>
 801012e:	4622      	mov	r2, r4
 8010130:	462b      	mov	r3, r5
 8010132:	f7f0 fa61 	bl	80005f8 <__aeabi_dmul>
 8010136:	f1ba 3fff 	cmp.w	sl, #4294967295
 801013a:	4602      	mov	r2, r0
 801013c:	460b      	mov	r3, r1
 801013e:	d148      	bne.n	80101d2 <atan+0x252>
 8010140:	4620      	mov	r0, r4
 8010142:	4629      	mov	r1, r5
 8010144:	f7f0 f8a0 	bl	8000288 <__aeabi_dsub>
 8010148:	e72f      	b.n	800ffaa <atan+0x2a>
 801014a:	4b52      	ldr	r3, [pc, #328]	@ (8010294 <atan+0x314>)
 801014c:	2200      	movs	r2, #0
 801014e:	4620      	mov	r0, r4
 8010150:	4629      	mov	r1, r5
 8010152:	f7f0 f899 	bl	8000288 <__aeabi_dsub>
 8010156:	4b4f      	ldr	r3, [pc, #316]	@ (8010294 <atan+0x314>)
 8010158:	4606      	mov	r6, r0
 801015a:	460f      	mov	r7, r1
 801015c:	2200      	movs	r2, #0
 801015e:	4620      	mov	r0, r4
 8010160:	4629      	mov	r1, r5
 8010162:	f7f0 f893 	bl	800028c <__adddf3>
 8010166:	4602      	mov	r2, r0
 8010168:	460b      	mov	r3, r1
 801016a:	4630      	mov	r0, r6
 801016c:	4639      	mov	r1, r7
 801016e:	f7f0 fb6d 	bl	800084c <__aeabi_ddiv>
 8010172:	f04f 0a01 	mov.w	sl, #1
 8010176:	4604      	mov	r4, r0
 8010178:	460d      	mov	r5, r1
 801017a:	e765      	b.n	8010048 <atan+0xc8>
 801017c:	4b47      	ldr	r3, [pc, #284]	@ (801029c <atan+0x31c>)
 801017e:	429e      	cmp	r6, r3
 8010180:	d21c      	bcs.n	80101bc <atan+0x23c>
 8010182:	4b47      	ldr	r3, [pc, #284]	@ (80102a0 <atan+0x320>)
 8010184:	2200      	movs	r2, #0
 8010186:	4620      	mov	r0, r4
 8010188:	4629      	mov	r1, r5
 801018a:	f7f0 f87d 	bl	8000288 <__aeabi_dsub>
 801018e:	4b44      	ldr	r3, [pc, #272]	@ (80102a0 <atan+0x320>)
 8010190:	4606      	mov	r6, r0
 8010192:	460f      	mov	r7, r1
 8010194:	2200      	movs	r2, #0
 8010196:	4620      	mov	r0, r4
 8010198:	4629      	mov	r1, r5
 801019a:	f7f0 fa2d 	bl	80005f8 <__aeabi_dmul>
 801019e:	4b3d      	ldr	r3, [pc, #244]	@ (8010294 <atan+0x314>)
 80101a0:	2200      	movs	r2, #0
 80101a2:	f7f0 f873 	bl	800028c <__adddf3>
 80101a6:	4602      	mov	r2, r0
 80101a8:	460b      	mov	r3, r1
 80101aa:	4630      	mov	r0, r6
 80101ac:	4639      	mov	r1, r7
 80101ae:	f7f0 fb4d 	bl	800084c <__aeabi_ddiv>
 80101b2:	f04f 0a02 	mov.w	sl, #2
 80101b6:	4604      	mov	r4, r0
 80101b8:	460d      	mov	r5, r1
 80101ba:	e745      	b.n	8010048 <atan+0xc8>
 80101bc:	4622      	mov	r2, r4
 80101be:	462b      	mov	r3, r5
 80101c0:	4938      	ldr	r1, [pc, #224]	@ (80102a4 <atan+0x324>)
 80101c2:	2000      	movs	r0, #0
 80101c4:	f7f0 fb42 	bl	800084c <__aeabi_ddiv>
 80101c8:	f04f 0a03 	mov.w	sl, #3
 80101cc:	4604      	mov	r4, r0
 80101ce:	460d      	mov	r5, r1
 80101d0:	e73a      	b.n	8010048 <atan+0xc8>
 80101d2:	4b35      	ldr	r3, [pc, #212]	@ (80102a8 <atan+0x328>)
 80101d4:	4e35      	ldr	r6, [pc, #212]	@ (80102ac <atan+0x32c>)
 80101d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80101da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101de:	f7f0 f853 	bl	8000288 <__aeabi_dsub>
 80101e2:	4622      	mov	r2, r4
 80101e4:	462b      	mov	r3, r5
 80101e6:	f7f0 f84f 	bl	8000288 <__aeabi_dsub>
 80101ea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80101ee:	4602      	mov	r2, r0
 80101f0:	460b      	mov	r3, r1
 80101f2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80101f6:	f7f0 f847 	bl	8000288 <__aeabi_dsub>
 80101fa:	f1bb 0f00 	cmp.w	fp, #0
 80101fe:	4604      	mov	r4, r0
 8010200:	460d      	mov	r5, r1
 8010202:	f6bf aedc 	bge.w	800ffbe <atan+0x3e>
 8010206:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801020a:	461d      	mov	r5, r3
 801020c:	e6d7      	b.n	800ffbe <atan+0x3e>
 801020e:	a51c      	add	r5, pc, #112	@ (adr r5, 8010280 <atan+0x300>)
 8010210:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010214:	e6d3      	b.n	800ffbe <atan+0x3e>
 8010216:	bf00      	nop
 8010218:	54442d18 	.word	0x54442d18
 801021c:	3ff921fb 	.word	0x3ff921fb
 8010220:	8800759c 	.word	0x8800759c
 8010224:	7e37e43c 	.word	0x7e37e43c
 8010228:	e322da11 	.word	0xe322da11
 801022c:	3f90ad3a 	.word	0x3f90ad3a
 8010230:	24760deb 	.word	0x24760deb
 8010234:	3fa97b4b 	.word	0x3fa97b4b
 8010238:	a0d03d51 	.word	0xa0d03d51
 801023c:	3fb10d66 	.word	0x3fb10d66
 8010240:	c54c206e 	.word	0xc54c206e
 8010244:	3fb745cd 	.word	0x3fb745cd
 8010248:	920083ff 	.word	0x920083ff
 801024c:	3fc24924 	.word	0x3fc24924
 8010250:	5555550d 	.word	0x5555550d
 8010254:	3fd55555 	.word	0x3fd55555
 8010258:	2c6a6c2f 	.word	0x2c6a6c2f
 801025c:	bfa2b444 	.word	0xbfa2b444
 8010260:	52defd9a 	.word	0x52defd9a
 8010264:	3fadde2d 	.word	0x3fadde2d
 8010268:	af749a6d 	.word	0xaf749a6d
 801026c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010270:	fe231671 	.word	0xfe231671
 8010274:	3fbc71c6 	.word	0x3fbc71c6
 8010278:	9998ebc4 	.word	0x9998ebc4
 801027c:	3fc99999 	.word	0x3fc99999
 8010280:	54442d18 	.word	0x54442d18
 8010284:	bff921fb 	.word	0xbff921fb
 8010288:	440fffff 	.word	0x440fffff
 801028c:	7ff00000 	.word	0x7ff00000
 8010290:	3fdbffff 	.word	0x3fdbffff
 8010294:	3ff00000 	.word	0x3ff00000
 8010298:	3ff2ffff 	.word	0x3ff2ffff
 801029c:	40038000 	.word	0x40038000
 80102a0:	3ff80000 	.word	0x3ff80000
 80102a4:	bff00000 	.word	0xbff00000
 80102a8:	08011340 	.word	0x08011340
 80102ac:	08011360 	.word	0x08011360

080102b0 <fabs>:
 80102b0:	ec51 0b10 	vmov	r0, r1, d0
 80102b4:	4602      	mov	r2, r0
 80102b6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80102ba:	ec43 2b10 	vmov	d0, r2, r3
 80102be:	4770      	bx	lr

080102c0 <_init>:
 80102c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102c2:	bf00      	nop
 80102c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102c6:	bc08      	pop	{r3}
 80102c8:	469e      	mov	lr, r3
 80102ca:	4770      	bx	lr

080102cc <_fini>:
 80102cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ce:	bf00      	nop
 80102d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102d2:	bc08      	pop	{r3}
 80102d4:	469e      	mov	lr, r3
 80102d6:	4770      	bx	lr
