
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010a8  08010338  08010338  00011338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080113e0  080113e0  000131fc  2**0
                  CONTENTS
  4 .ARM          00000008  080113e0  080113e0  000123e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080113e8  080113e8  000131fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080113e8  080113e8  000123e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080113ec  080113ec  000123ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080113f0  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000131fc  2**0
                  CONTENTS
 10 .bss          000052a0  20000200  20000200  00013200  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200054a0  200054a0  00013200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000131fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e6f8  00000000  00000000  0001322c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004078  00000000  00000000  00031924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bc8  00000000  00000000  000359a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015da  00000000  00000000  00037568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006270  00000000  00000000  00038b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000206bd  00000000  00000000  0003edb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9fc6  00000000  00000000  0005f46f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00149435  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008a0c  00000000  00000000  00149478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  00151e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010320 	.word	0x08010320

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	08010320 	.word	0x08010320

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <MadgwickQuaternionUpdate>:
  q[3] = q4 * norm;
}
*/

void MadgwickQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz,float deltat,float q[4])
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b0a2      	sub	sp, #136	@ 0x88
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	ed87 0a07 	vstr	s0, [r7, #28]
 8000f82:	edc7 0a06 	vstr	s1, [r7, #24]
 8000f86:	ed87 1a05 	vstr	s2, [r7, #20]
 8000f8a:	edc7 1a04 	vstr	s3, [r7, #16]
 8000f8e:	ed87 2a03 	vstr	s4, [r7, #12]
 8000f92:	edc7 2a02 	vstr	s5, [r7, #8]
 8000f96:	ed87 3a01 	vstr	s6, [r7, #4]
 8000f9a:	6038      	str	r0, [r7, #0]
	float q0 = q[0], q1 = q[1], q2 = q[2], q3 = q[3];
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	677b      	str	r3, [r7, #116]	@ 0x74
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	673b      	str	r3, [r7, #112]	@ 0x70
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	66bb      	str	r3, [r7, #104]	@ 0x68
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8000fb4:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8000fb8:	eeb1 7a67 	vneg.f32	s14, s15
 8000fbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc4:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8000fc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fd4:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8000fd8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000fe8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fec:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8000ff0:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8000ff4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ff8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ffc:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001000:	edd7 7a02 	vldr	s15, [r7, #8]
 8001004:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001008:	ee37 7a27 	vadd.f32	s14, s14, s15
 800100c:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8001010:	edd7 7a03 	vldr	s15, [r7, #12]
 8001014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800101c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001020:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001024:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001028:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 800102c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001030:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001034:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 8001038:	edd7 7a02 	vldr	s15, [r7, #8]
 800103c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001040:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001044:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8001048:	edd7 7a04 	vldr	s15, [r7, #16]
 800104c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001054:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001058:	ee67 7a87 	vmul.f32	s15, s15, s14
 800105c:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001060:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001064:	edd7 7a02 	vldr	s15, [r7, #8]
 8001068:	ee27 7a27 	vmul.f32	s14, s14, s15
 800106c:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 8001070:	edd7 7a03 	vldr	s15, [r7, #12]
 8001074:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001078:	ee37 7a27 	vadd.f32	s14, s14, s15
 800107c:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001080:	edd7 7a04 	vldr	s15, [r7, #16]
 8001084:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800108c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001090:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001094:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001098:	edd7 7a07 	vldr	s15, [r7, #28]
 800109c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a4:	d10e      	bne.n	80010c4 <MadgwickQuaternionUpdate+0x14c>
 80010a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80010aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	d107      	bne.n	80010c4 <MadgwickQuaternionUpdate+0x14c>
 80010b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80010b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c0:	f000 81be 	beq.w	8001440 <MadgwickQuaternionUpdate+0x4c8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80010c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80010c8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80010cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80010d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80010dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e4:	eeb0 0a67 	vmov.f32	s0, s15
 80010e8:	f000 fa9a 	bl	8001620 <invSqrt>
 80010ec:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
		ax *= recipNorm;
 80010f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80010f4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80010f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fc:	edc7 7a07 	vstr	s15, [r7, #28]
		ay *= recipNorm;
 8001100:	ed97 7a06 	vldr	s14, [r7, #24]
 8001104:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800110c:	edc7 7a06 	vstr	s15, [r7, #24]
		az *= recipNorm;
 8001110:	ed97 7a05 	vldr	s14, [r7, #20]
 8001114:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800111c:	edc7 7a05 	vstr	s15, [r7, #20]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8001120:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001124:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001128:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		_2q1 = 2.0f * q1;
 800112c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001130:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001134:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		_2q2 = 2.0f * q2;
 8001138:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800113c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001140:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		_2q3 = 2.0f * q3;
 8001144:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001148:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800114c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		_4q0 = 4.0f * q0;
 8001150:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001154:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800115c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		_4q1 = 4.0f * q1;
 8001160:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001164:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		_4q2 = 4.0f * q2;
 8001170:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001174:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001178:	ee67 7a87 	vmul.f32	s15, s15, s14
 800117c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		_8q1 = 8.0f * q1;
 8001180:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001184:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001188:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		_8q2 = 8.0f * q2;
 8001190:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001194:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800119c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		q0q0 = q0 * q0;
 80011a0:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80011a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011a8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		q1q1 = q1 * q1;
 80011ac:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80011b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011b4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		q2q2 = q2 * q2;
 80011b8:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80011bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011c0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		q3q3 = q3 * q3;
 80011c4:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80011c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011cc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80011d0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80011d4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80011d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011dc:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 80011e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80011e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011ec:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80011f0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80011f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011fc:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 8001200:	edd7 7a06 	vldr	s15, [r7, #24]
 8001204:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8001210:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001214:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001218:	ee27 7a27 	vmul.f32	s14, s14, s15
 800121c:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001220:	edd7 7a07 	vldr	s15, [r7, #28]
 8001224:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001228:	ee37 7a67 	vsub.f32	s14, s14, s15
 800122c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001230:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001234:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001238:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800123c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001240:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001244:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8001248:	edd7 7a06 	vldr	s15, [r7, #24]
 800124c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001250:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001254:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001258:	ee37 7a67 	vsub.f32	s14, s14, s15
 800125c:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8001260:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001264:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001268:	ee37 7a27 	vadd.f32	s14, s14, s15
 800126c:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8001270:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001274:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001278:	ee37 7a27 	vadd.f32	s14, s14, s15
 800127c:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8001280:	edd7 7a05 	vldr	s15, [r7, #20]
 8001284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800128c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8001290:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001294:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001298:	ee27 7a87 	vmul.f32	s14, s15, s14
 800129c:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80012a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012a4:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 80012a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80012ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012b4:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80012b8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80012bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012c4:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 80012c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80012cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012d4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80012d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012dc:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80012e0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80012e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ec:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80012f0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80012f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012fc:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001300:	edd7 7a05 	vldr	s15, [r7, #20]
 8001304:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8001310:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001314:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001318:	ee27 7a87 	vmul.f32	s14, s15, s14
 800131c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001320:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001324:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 8001328:	edd7 7a07 	vldr	s15, [r7, #28]
 800132c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001330:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001334:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001338:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800133c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001340:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001348:	ee37 7a27 	vadd.f32	s14, s14, s15
 800134c:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001350:	edd7 7a06 	vldr	s15, [r7, #24]
 8001354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800135c:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001360:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001364:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001368:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800136c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001370:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001374:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001378:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800137c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001380:	edd7 7a08 	vldr	s15, [r7, #32]
 8001384:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800138c:	eeb0 0a67 	vmov.f32	s0, s15
 8001390:	f000 f946 	bl	8001620 <invSqrt>
 8001394:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
		s0 *= recipNorm;
 8001398:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800139c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80013a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		s1 *= recipNorm;
 80013a8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80013ac:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80013b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		s2 *= recipNorm;
 80013b8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80013bc:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80013c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s3 *= recipNorm;
 80013c8:	ed97 7a08 	vldr	s14, [r7, #32]
 80013cc:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80013d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d4:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 80013d8:	4b55      	ldr	r3, [pc, #340]	@ (8001530 <MadgwickQuaternionUpdate+0x5b8>)
 80013da:	ed93 7a00 	vldr	s14, [r3]
 80013de:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80013e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e6:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 80013ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ee:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
		qDot2 -= beta * s1;
 80013f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001530 <MadgwickQuaternionUpdate+0x5b8>)
 80013f4:	ed93 7a00 	vldr	s14, [r3]
 80013f8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80013fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001400:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001408:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
		qDot3 -= beta * s2;
 800140c:	4b48      	ldr	r3, [pc, #288]	@ (8001530 <MadgwickQuaternionUpdate+0x5b8>)
 800140e:	ed93 7a00 	vldr	s14, [r3]
 8001412:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141a:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 800141e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001422:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
		qDot4 -= beta * s3;
 8001426:	4b42      	ldr	r3, [pc, #264]	@ (8001530 <MadgwickQuaternionUpdate+0x5b8>)
 8001428:	ed93 7a00 	vldr	s14, [r3]
 800142c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001434:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8001438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143c:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * deltat;
 8001440:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001444:	edd7 7a01 	vldr	s15, [r7, #4]
 8001448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144c:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001454:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	q1 += qDot2 * deltat;
 8001458:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800145c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001464:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146c:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
	q2 += qDot3 * deltat;
 8001470:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001474:	edd7 7a01 	vldr	s15, [r7, #4]
 8001478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147c:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001484:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	q3 += qDot4 * deltat;
 8001488:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 800148c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001494:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800149c:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80014a0:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80014a4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80014a8:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80014ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014b4:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80014b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014c0:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80014c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014cc:	eeb0 0a67 	vmov.f32	s0, s15
 80014d0:	f000 f8a6 	bl	8001620 <invSqrt>
 80014d4:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64

	q[0]=q0 * recipNorm;
 80014d8:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80014dc:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80014e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	edc3 7a00 	vstr	s15, [r3]
	q[1]=q1 * recipNorm;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	3304      	adds	r3, #4
 80014ee:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80014f2:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80014f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014fa:	edc3 7a00 	vstr	s15, [r3]
	q[2]=q2 * recipNorm;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	3308      	adds	r3, #8
 8001502:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001506:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800150a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800150e:	edc3 7a00 	vstr	s15, [r3]
	q[3]=q3 * recipNorm;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	330c      	adds	r3, #12
 8001516:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 800151a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800151e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001522:	edc3 7a00 	vstr	s15, [r3]
	}
 8001526:	bf00      	nop
 8001528:	3788      	adds	r7, #136	@ 0x88
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000000 	.word	0x20000000
 8001534:	00000000 	.word	0x00000000

08001538 <GetYawFromQ>:
	q[1]=q1 * recipNorm;
	q[2]=q2 * recipNorm;
	q[3]=q3 * recipNorm;
	}
float GetYawFromQ(float q[4])
{
 8001538:	b5b0      	push	{r4, r5, r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	return atan2(2.0f * (q[1] * q[2] + q[0] * q[3]),
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3304      	adds	r3, #4
 8001544:	ed93 7a00 	vldr	s14, [r3]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3308      	adds	r3, #8
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	edd3 6a00 	vldr	s13, [r3]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	330c      	adds	r3, #12
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800156e:	ee17 0a90 	vmov	r0, s15
 8001572:	f7fe ffe9 	bl	8000548 <__aeabi_f2d>
 8001576:	4604      	mov	r4, r0
 8001578:	460d      	mov	r5, r1
	       q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3])*(180.0f/3.14159265359);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	ed93 7a00 	vldr	s14, [r3]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	edd3 7a00 	vldr	s15, [r3]
 8001586:	ee27 7a27 	vmul.f32	s14, s14, s15
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3304      	adds	r3, #4
 800158e:	edd3 6a00 	vldr	s13, [r3]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3304      	adds	r3, #4
 8001596:	edd3 7a00 	vldr	s15, [r3]
 800159a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800159e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3308      	adds	r3, #8
 80015a6:	edd3 6a00 	vldr	s13, [r3]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3308      	adds	r3, #8
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	330c      	adds	r3, #12
 80015be:	edd3 6a00 	vldr	s13, [r3]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	330c      	adds	r3, #12
 80015c6:	edd3 7a00 	vldr	s15, [r3]
 80015ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ce:	ee77 7a67 	vsub.f32	s15, s14, s15
	return atan2(2.0f * (q[1] * q[2] + q[0] * q[3]),
 80015d2:	ee17 0a90 	vmov	r0, s15
 80015d6:	f7fe ffb7 	bl	8000548 <__aeabi_f2d>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	ec43 2b11 	vmov	d1, r2, r3
 80015e2:	ec45 4b10 	vmov	d0, r4, r5
 80015e6:	f00e fc31 	bl	800fe4c <atan2>
 80015ea:	ec51 0b10 	vmov	r0, r1, d0
	       q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3])*(180.0f/3.14159265359);
 80015ee:	a30a      	add	r3, pc, #40	@ (adr r3, 8001618 <GetYawFromQ+0xe0>)
 80015f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f4:	f7ff f800 	bl	80005f8 <__aeabi_dmul>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff faf2 	bl	8000be8 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	ee07 3a90 	vmov	s15, r3
	}
 800160a:	eeb0 0a67 	vmov.f32	s0, s15
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bdb0      	pop	{r4, r5, r7, pc}
 8001614:	f3af 8000 	nop.w
 8001618:	1a63bfe5 	.word	0x1a63bfe5
 800161c:	404ca5dc 	.word	0x404ca5dc

08001620 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8001620:	b480      	push	{r7}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800162a:	edd7 7a01 	vldr	s15, [r7, #4]
 800162e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001632:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001636:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	105a      	asrs	r2, r3, #1
 800164a:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <invSqrt+0x74>)
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001658:	ed97 7a04 	vldr	s14, [r7, #16]
 800165c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001660:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001664:	edd7 7a04 	vldr	s15, [r7, #16]
 8001668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001670:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001674:	edd7 7a04 	vldr	s15, [r7, #16]
 8001678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167c:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	ee07 3a90 	vmov	s15, r3
}
 8001686:	eeb0 0a67 	vmov.f32	s0, s15
 800168a:	371c      	adds	r7, #28
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	5f3759df 	.word	0x5f3759df

08001698 <PID_Init>:
    float output_max;   // Maximum output value
    uint32_t prevtick;
} PIDController;

// Initialize PID controller
void PID_Init(PIDController *pid, float Kp, float Ki, float Kd, float setpoint, float output_min, float output_max) {
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	@ 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	61f8      	str	r0, [r7, #28]
 80016a0:	ed87 0a06 	vstr	s0, [r7, #24]
 80016a4:	edc7 0a05 	vstr	s1, [r7, #20]
 80016a8:	ed87 1a04 	vstr	s2, [r7, #16]
 80016ac:	edc7 1a03 	vstr	s3, [r7, #12]
 80016b0:	ed87 2a02 	vstr	s4, [r7, #8]
 80016b4:	edc7 2a01 	vstr	s5, [r7, #4]
    pid->Kp = Kp;
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	609a      	str	r2, [r3, #8]
    pid->setpoint = setpoint;
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
    pid->prev_error = 0.0f;
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
    pid->output_min = output_min;
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	61da      	str	r2, [r3, #28]
    pid->output_max = output_max;
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	621a      	str	r2, [r3, #32]
    pid->prevtick=0;
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2200      	movs	r2, #0
 80016f0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80016f2:	bf00      	nop
 80016f4:	3724      	adds	r7, #36	@ 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <PID_Update>:

// Update PID controller
float PID_Update(PIDController *pid, float measured_value) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	ed87 0a00 	vstr	s0, [r7]
	if(pid->prevtick==0)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001710:	2b00      	cmp	r3, #0
 8001712:	d104      	bne.n	800171e <PID_Update+0x1e>
		pid->prevtick=HAL_GetTick();
 8001714:	f002 fe3e 	bl	8004394 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	625a      	str	r2, [r3, #36]	@ 0x24

	float dt  = (HAL_GetTick() - pid->prevtick) *0.001f;
 800171e:	f002 fe39 	bl	8004394 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	ee07 3a90 	vmov	s15, r3
 800172e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001732:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001868 <PID_Update+0x168>
 8001736:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173a:	edc7 7a06 	vstr	s15, [r7, #24]
    float error = pid->setpoint - measured_value;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	ed93 7a03 	vldr	s14, [r3, #12]
 8001744:	edd7 7a00 	vldr	s15, [r7]
 8001748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800174c:	edc7 7a05 	vstr	s15, [r7, #20]
    float proportional = pid->Kp * error;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	ed97 7a05 	vldr	s14, [r7, #20]
 800175a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800175e:	edc7 7a04 	vstr	s15, [r7, #16]

    // Integral term with anti-windup
    pid->integral += pid->Ki * error * dt;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	ed93 7a04 	vldr	s14, [r3, #16]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	edd3 6a01 	vldr	s13, [r3, #4]
 800176e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001772:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001776:	edd7 7a06 	vldr	s15, [r7, #24]
 800177a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800177e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	edc3 7a04 	vstr	s15, [r3, #16]

    float derivative = pid->Kd * (error - pid->prev_error) / dt;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	ed93 7a02 	vldr	s14, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	edd3 7a06 	vldr	s15, [r3, #24]
 8001794:	edd7 6a05 	vldr	s13, [r7, #20]
 8001798:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800179c:	ee67 6a27 	vmul.f32	s13, s14, s15
 80017a0:	ed97 7a06 	vldr	s14, [r7, #24]
 80017a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017a8:	edc7 7a03 	vstr	s15, [r7, #12]

    float output = proportional + pid->integral + derivative;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	ed93 7a04 	vldr	s14, [r3, #16]
 80017b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80017b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80017be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c2:	edc7 7a07 	vstr	s15, [r7, #28]

    // Apply output limits
    if (output > pid->output_max) {
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	edd3 7a08 	vldr	s15, [r3, #32]
 80017cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80017d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d8:	dd16      	ble.n	8001808 <PID_Update+0x108>
        output = pid->output_max;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	61fb      	str	r3, [r7, #28]
        // Anti-windup: Limit integral term
        pid->integral -= pid->Ki * error * dt;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	ed93 7a04 	vldr	s14, [r3, #16]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	edd3 6a01 	vldr	s13, [r3, #4]
 80017ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80017f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80017f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	edc3 7a04 	vstr	s15, [r3, #16]
 8001806:	e01f      	b.n	8001848 <PID_Update+0x148>
    } else if (output < pid->output_min) {
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	edd3 7a07 	vldr	s15, [r3, #28]
 800180e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001812:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181a:	d515      	bpl.n	8001848 <PID_Update+0x148>
        output = pid->output_min;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	61fb      	str	r3, [r7, #28]
        // Anti-windup: Limit integral term
        pid->integral -= pid->Ki * error * dt;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	ed93 7a04 	vldr	s14, [r3, #16]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	edd3 6a01 	vldr	s13, [r3, #4]
 800182e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001832:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001836:	edd7 7a06 	vldr	s15, [r7, #24]
 800183a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800183e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	edc3 7a04 	vstr	s15, [r3, #16]
    }

    pid->prev_error = error;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	619a      	str	r2, [r3, #24]
    pid->prevtick =HAL_GetTick();
 800184e:	f002 fda1 	bl	8004394 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	625a      	str	r2, [r3, #36]	@ 0x24
    return output;
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	ee07 3a90 	vmov	s15, r3
}
 800185e:	eeb0 0a67 	vmov.f32	s0, s15
 8001862:	3720      	adds	r7, #32
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	3a83126f 	.word	0x3a83126f

0800186c <PID_Reset>:

void PID_Reset(PIDController* pid) {
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	pid->setpoint=0;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
    pid->prev_error = 0.0f;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
    pid->prevtick = 0;//HAL_GetTick();
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <Set_Motor_Direction>:
/* USER CODE BEGIN 0 */
uint8_t aRxBuffer[3]={0};
uint8_t buf[5]={0};

//SET both wheel direction
void Set_Motor_Direction(int foward_flag,int backward_flag) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, //AIn1 is forward AIn2 is backward
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bf14      	ite	ne
 80018b0:	2301      	movne	r3, #1
 80018b2:	2300      	moveq	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	461a      	mov	r2, r3
 80018b8:	2108      	movs	r1, #8
 80018ba:	4814      	ldr	r0, [pc, #80]	@ (800190c <Set_Motor_Direction+0x6c>)
 80018bc:	f003 fcf2 	bl	80052a4 <HAL_GPIO_WritePin>
            ((foward_flag) ? GPIO_PIN_SET : GPIO_PIN_RESET));
    HAL_GPIO_WritePin(GPIOA, AIN2_Pin,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	bf0c      	ite	eq
 80018c6:	2301      	moveq	r3, #1
 80018c8:	2300      	movne	r3, #0
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	461a      	mov	r2, r3
 80018ce:	2104      	movs	r1, #4
 80018d0:	480e      	ldr	r0, [pc, #56]	@ (800190c <Set_Motor_Direction+0x6c>)
 80018d2:	f003 fce7 	bl	80052a4 <HAL_GPIO_WritePin>
            ((foward_flag) ? GPIO_PIN_RESET : GPIO_PIN_SET));
    HAL_GPIO_WritePin(GPIOA, BIN2_Pin, //BIn1 is forward BIn2 is backward
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	bf0c      	ite	eq
 80018dc:	2301      	moveq	r3, #1
 80018de:	2300      	movne	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	461a      	mov	r2, r3
 80018e4:	2120      	movs	r1, #32
 80018e6:	4809      	ldr	r0, [pc, #36]	@ (800190c <Set_Motor_Direction+0x6c>)
 80018e8:	f003 fcdc 	bl	80052a4 <HAL_GPIO_WritePin>
            ((backward_flag) ? GPIO_PIN_RESET : GPIO_PIN_SET));
    HAL_GPIO_WritePin(GPIOA, BIN1_Pin,
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	bf14      	ite	ne
 80018f2:	2301      	movne	r3, #1
 80018f4:	2300      	moveq	r3, #0
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	461a      	mov	r2, r3
 80018fa:	2110      	movs	r1, #16
 80018fc:	4803      	ldr	r0, [pc, #12]	@ (800190c <Set_Motor_Direction+0x6c>)
 80018fe:	f003 fcd1 	bl	80052a4 <HAL_GPIO_WritePin>
            ((backward_flag) ? GPIO_PIN_SET : GPIO_PIN_RESET));
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40020000 	.word	0x40020000

08001910 <delay_us>:
void delay_us(uint16_t us)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6,0);
 800191a:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <delay_us+0x30>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2200      	movs	r2, #0
 8001920:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6)<us);
 8001922:	bf00      	nop
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <delay_us+0x30>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	429a      	cmp	r2, r3
 800192e:	d3f9      	bcc.n	8001924 <delay_us+0x14>

}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20000440 	.word	0x20000440

08001944 <resetYaw>:
void resetYaw()
{	q[0]=1; q[1]=0; q[2]=0; q[3]=0;
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
 8001948:	4b0d      	ldr	r3, [pc, #52]	@ (8001980 <resetYaw+0x3c>)
 800194a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <resetYaw+0x3c>)
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	4b09      	ldr	r3, [pc, #36]	@ (8001980 <resetYaw+0x3c>)
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	4b07      	ldr	r3, [pc, #28]	@ (8001980 <resetYaw+0x3c>)
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	60da      	str	r2, [r3, #12]
	yaw=0;
 8001968:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <resetYaw+0x40>)
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
	PID_Reset(&LMotorPID);
 8001970:	4805      	ldr	r0, [pc, #20]	@ (8001988 <resetYaw+0x44>)
 8001972:	f7ff ff7b 	bl	800186c <PID_Reset>
	PID_Reset(&RMotorPID);
 8001976:	4805      	ldr	r0, [pc, #20]	@ (800198c <resetYaw+0x48>)
 8001978:	f7ff ff78 	bl	800186c <PID_Reset>
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000008 	.word	0x20000008
 8001984:	20000578 	.word	0x20000578
 8001988:	2000057c 	.word	0x2000057c
 800198c:	200005a4 	.word	0x200005a4

08001990 <updateYaw>:
void updateYaw()//update yaw reading using filter
{
 8001990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001992:	ed2d 8b04 	vpush	{d8-d9}
 8001996:	af00      	add	r7, sp, #0
	static uint32_t prevtick=0;

	if(HAL_GetTick()-prevtick>1000L)//RST if never update for more than 1 second
 8001998:	f002 fcfc 	bl	8004394 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	4b4c      	ldr	r3, [pc, #304]	@ (8001ad0 <updateYaw+0x140>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019a8:	d905      	bls.n	80019b6 <updateYaw+0x26>
		{prevtick=HAL_GetTick();return;}
 80019aa:	f002 fcf3 	bl	8004394 <HAL_GetTick>
 80019ae:	4603      	mov	r3, r0
 80019b0:	4a47      	ldr	r2, [pc, #284]	@ (8001ad0 <updateYaw+0x140>)
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	e084      	b.n	8001ac0 <updateYaw+0x130>
	ICM20948_readAccelerometer_all(&hi2c1,0,ACCEL_SENS,&accel);
 80019b6:	4b47      	ldr	r3, [pc, #284]	@ (8001ad4 <updateYaw+0x144>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	2100      	movs	r1, #0
 80019bc:	4846      	ldr	r0, [pc, #280]	@ (8001ad8 <updateYaw+0x148>)
 80019be:	f008 f947 	bl	8009c50 <ICM20948_readAccelerometer_all>
	ICM20948_readGyroscope_all(&hi2c1, 0, GYRO_SENS, &gyro);
 80019c2:	4b46      	ldr	r3, [pc, #280]	@ (8001adc <updateYaw+0x14c>)
 80019c4:	2203      	movs	r2, #3
 80019c6:	2100      	movs	r1, #0
 80019c8:	4843      	ldr	r0, [pc, #268]	@ (8001ad8 <updateYaw+0x148>)
 80019ca:	f008 f829 	bl	8009a20 <ICM20948_readGyroscope_all>
		  	  //ICM20948_readMagnetometer_all(&hi2c1,&mag);
		  	  //magcal_adjust(&mag,&mag_params);

		  	  //Madgwick Mahony
	MadgwickQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 80019ce:	4b41      	ldr	r3, [pc, #260]	@ (8001ad4 <updateYaw+0x144>)
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001ae0 <updateYaw+0x150>
 80019d8:	ee27 8a87 	vmul.f32	s16, s15, s14
 80019dc:	4b3d      	ldr	r3, [pc, #244]	@ (8001ad4 <updateYaw+0x144>)
 80019de:	edd3 7a01 	vldr	s15, [r3, #4]
 80019e2:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001ae0 <updateYaw+0x150>
 80019e6:	ee67 8a87 	vmul.f32	s17, s15, s14
 80019ea:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad4 <updateYaw+0x144>)
 80019ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80019f0:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001ae0 <updateYaw+0x150>
 80019f4:	ee27 9a87 	vmul.f32	s18, s15, s14
		  			  gyro.x*DEG_TO_RAD,-gyro.y*DEG_TO_RAD,gyro.z*DEG_TO_RAD,
 80019f8:	4b38      	ldr	r3, [pc, #224]	@ (8001adc <updateYaw+0x14c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fda3 	bl	8000548 <__aeabi_f2d>
 8001a02:	a331      	add	r3, pc, #196	@ (adr r3, 8001ac8 <updateYaw+0x138>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fdf6 	bl	80005f8 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
	MadgwickQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	f7ff f8e8 	bl	8000be8 <__aeabi_d2f>
 8001a18:	4604      	mov	r4, r0
		  			  gyro.x*DEG_TO_RAD,-gyro.y*DEG_TO_RAD,gyro.z*DEG_TO_RAD,
 8001a1a:	4b30      	ldr	r3, [pc, #192]	@ (8001adc <updateYaw+0x14c>)
 8001a1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a20:	eef1 7a67 	vneg.f32	s15, s15
 8001a24:	ee17 3a90 	vmov	r3, s15
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fd8d 	bl	8000548 <__aeabi_f2d>
 8001a2e:	a326      	add	r3, pc, #152	@ (adr r3, 8001ac8 <updateYaw+0x138>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7fe fde0 	bl	80005f8 <__aeabi_dmul>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
	MadgwickQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7ff f8d2 	bl	8000be8 <__aeabi_d2f>
 8001a44:	4605      	mov	r5, r0
		  			  gyro.x*DEG_TO_RAD,-gyro.y*DEG_TO_RAD,gyro.z*DEG_TO_RAD,
 8001a46:	4b25      	ldr	r3, [pc, #148]	@ (8001adc <updateYaw+0x14c>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fd7c 	bl	8000548 <__aeabi_f2d>
 8001a50:	a31d      	add	r3, pc, #116	@ (adr r3, 8001ac8 <updateYaw+0x138>)
 8001a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a56:	f7fe fdcf 	bl	80005f8 <__aeabi_dmul>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
	MadgwickQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 8001a5e:	4610      	mov	r0, r2
 8001a60:	4619      	mov	r1, r3
 8001a62:	f7ff f8c1 	bl	8000be8 <__aeabi_d2f>
 8001a66:	4606      	mov	r6, r0
					  (HAL_GetTick()-prevtick)*0.001f,q);
 8001a68:	f002 fc94 	bl	8004394 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <updateYaw+0x140>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	1ad3      	subs	r3, r2, r3
	MadgwickQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 8001a74:	ee07 3a90 	vmov	s15, r3
 8001a78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a7c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001ae4 <updateYaw+0x154>
 8001a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a84:	4818      	ldr	r0, [pc, #96]	@ (8001ae8 <updateYaw+0x158>)
 8001a86:	eeb0 3a67 	vmov.f32	s6, s15
 8001a8a:	ee02 6a90 	vmov	s5, r6
 8001a8e:	ee02 5a10 	vmov	s4, r5
 8001a92:	ee01 4a90 	vmov	s3, r4
 8001a96:	eeb0 1a49 	vmov.f32	s2, s18
 8001a9a:	eef0 0a68 	vmov.f32	s1, s17
 8001a9e:	eeb0 0a48 	vmov.f32	s0, s16
 8001aa2:	f7ff fa69 	bl	8000f78 <MadgwickQuaternionUpdate>

		  	  prevtick=HAL_GetTick();
 8001aa6:	f002 fc75 	bl	8004394 <HAL_GetTick>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4a08      	ldr	r2, [pc, #32]	@ (8001ad0 <updateYaw+0x140>)
 8001aae:	6013      	str	r3, [r2, #0]
		  	  yaw = GetYawFromQ(q);
 8001ab0:	480d      	ldr	r0, [pc, #52]	@ (8001ae8 <updateYaw+0x158>)
 8001ab2:	f7ff fd41 	bl	8001538 <GetYawFromQ>
 8001ab6:	eef0 7a40 	vmov.f32	s15, s0
 8001aba:	4b0c      	ldr	r3, [pc, #48]	@ (8001aec <updateYaw+0x15c>)
 8001abc:	edc3 7a00 	vstr	s15, [r3]
	}
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	ecbd 8b04 	vpop	{d8-d9}
 8001ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ac8:	a2529e84 	.word	0xa2529e84
 8001acc:	3f91df46 	.word	0x3f91df46
 8001ad0:	200005ec 	.word	0x200005ec
 8001ad4:	20000560 	.word	0x20000560
 8001ad8:	200002cc 	.word	0x200002cc
 8001adc:	2000056c 	.word	0x2000056c
 8001ae0:	411cf5c3 	.word	0x411cf5c3
 8001ae4:	3a83126f 	.word	0x3a83126f
 8001ae8:	20000008 	.word	0x20000008
 8001aec:	20000578 	.word	0x20000578

08001af0 <Backward>:
void Backward(int target)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

	//Ensure yaw is reseted before turning
	//int target=-85;//90
	//int target=25;//360
	static uint8_t bTurn=1;
	if(bTurn&& target == 0)
 8001af8:	4b49      	ldr	r3, [pc, #292]	@ (8001c20 <Backward+0x130>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00e      	beq.n	8001b1e <Backward+0x2e>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10b      	bne.n	8001b1e <Backward+0x2e>
	{
		set_servo_angle(Center);
 8001b06:	205f      	movs	r0, #95	@ 0x5f
 8001b08:	f000 fd18 	bl	800253c <set_servo_angle>
		osDelay(350);
 8001b0c:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8001b10:	f008 fbbe 	bl	800a290 <osDelay>
		resetYaw();
 8001b14:	f7ff ff16 	bl	8001944 <resetYaw>
		bTurn=0;
 8001b18:	4b41      	ldr	r3, [pc, #260]	@ (8001c20 <Backward+0x130>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
	}
	updateYaw();
 8001b1e:	f7ff ff37 	bl	8001990 <updateYaw>
	//osDelay(10);
	LMotorPID.setpoint=2;
 8001b22:	4b40      	ldr	r3, [pc, #256]	@ (8001c24 <Backward+0x134>)
 8001b24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b28:	60da      	str	r2, [r3, #12]
	RMotorPID.setpoint=2;
 8001b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c28 <Backward+0x138>)
 8001b2c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b30:	60da      	str	r2, [r3, #12]

	if (yaw > target - 0.5f )
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	ee07 3a90 	vmov	s15, r3
 8001b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b3c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b40:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001b44:	4b39      	ldr	r3, [pc, #228]	@ (8001c2c <Backward+0x13c>)
 8001b46:	edd3 7a00 	vldr	s15, [r3]
 8001b4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b52:	d503      	bpl.n	8001b5c <Backward+0x6c>
			  {
				  set_servo_angle(Slight_Left);
 8001b54:	2064      	movs	r0, #100	@ 0x64
 8001b56:	f000 fcf1 	bl	800253c <set_servo_angle>
 8001b5a:	e013      	b.n	8001b84 <Backward+0x94>
			  }
	else if(yaw < target + 0.5f)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	ee07 3a90 	vmov	s15, r3
 8001b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b66:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001b6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c2c <Backward+0x13c>)
 8001b70:	edd3 7a00 	vldr	s15, [r3]
 8001b74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7c:	dd02      	ble.n	8001b84 <Backward+0x94>
	{
		set_servo_angle(Slight_Right);
 8001b7e:	205a      	movs	r0, #90	@ 0x5a
 8001b80:	f000 fcdc 	bl	800253c <set_servo_angle>
	}
	if(Target_Distance- distanceTraveled <20&&Target_Distance >30)
 8001b84:	4b2a      	ldr	r3, [pc, #168]	@ (8001c30 <Backward+0x140>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	ee07 3a90 	vmov	s15, r3
 8001b8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b90:	4b28      	ldr	r3, [pc, #160]	@ (8001c34 <Backward+0x144>)
 8001b92:	edd3 7a00 	vldr	s15, [r3]
 8001b96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b9a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba6:	d50b      	bpl.n	8001bc0 <Backward+0xd0>
 8001ba8:	4b21      	ldr	r3, [pc, #132]	@ (8001c30 <Backward+0x140>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b1e      	cmp	r3, #30
 8001bae:	dd07      	ble.n	8001bc0 <Backward+0xd0>
	{
	  LMotorPID.setpoint=1;
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c24 <Backward+0x134>)
 8001bb2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001bb6:	60da      	str	r2, [r3, #12]
	  RMotorPID.setpoint=1;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c28 <Backward+0x138>)
 8001bba:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001bbe:	60da      	str	r2, [r3, #12]
//	else if (yaw > target - 20.0f && yaw < target + 20.0f)
//	{
//	  LMotorPID.setpoint=0.5;
//	  RMotorPID.setpoint=0.35;
//	}
	int32_t L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8001c38 <Backward+0x148>)
 8001bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f7ff f80d 	bl	8000be8 <__aeabi_d2f>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	ee00 3a10 	vmov	s0, r3
 8001bd4:	4813      	ldr	r0, [pc, #76]	@ (8001c24 <Backward+0x134>)
 8001bd6:	f7ff fd93 	bl	8001700 <PID_Update>
 8001bda:	eef0 7a40 	vmov.f32	s15, s0
 8001bde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001be2:	ee17 3a90 	vmov	r3, s15
 8001be6:	60fb      	str	r3, [r7, #12]
	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8001be8:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <Backward+0x14c>)
 8001bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f7fe fff9 	bl	8000be8 <__aeabi_d2f>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	ee00 3a10 	vmov	s0, r3
 8001bfc:	480a      	ldr	r0, [pc, #40]	@ (8001c28 <Backward+0x138>)
 8001bfe:	f7ff fd7f 	bl	8001700 <PID_Update>
 8001c02:	eef0 7a40 	vmov.f32	s15, s0
 8001c06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c0a:	ee17 3a90 	vmov	r3, s15
 8001c0e:	60bb      	str	r3, [r7, #8]
	set_motor_pwm(L, R);
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 fc4c 	bl	80024b0 <set_motor_pwm>

}
 8001c18:	bf00      	nop
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	2000001c 	.word	0x2000001c
 8001c24:	2000057c 	.word	0x2000057c
 8001c28:	200005a4 	.word	0x200005a4
 8001c2c:	20000578 	.word	0x20000578
 8001c30:	2000021c 	.word	0x2000021c
 8001c34:	20000220 	.word	0x20000220
 8001c38:	20000550 	.word	0x20000550
 8001c3c:	20000558 	.word	0x20000558

08001c40 <Forward>:
void Forward(int target)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

	//Ensure yaw is reseted before turning
	//int target=-85;//90
	//int target=25;//360
	static uint8_t bTurn=1;
	if(bTurn&&target==0)
 8001c48:	4b49      	ldr	r3, [pc, #292]	@ (8001d70 <Forward+0x130>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00e      	beq.n	8001c6e <Forward+0x2e>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10b      	bne.n	8001c6e <Forward+0x2e>
	{
		set_servo_angle(Center);
 8001c56:	205f      	movs	r0, #95	@ 0x5f
 8001c58:	f000 fc70 	bl	800253c <set_servo_angle>
		osDelay(350);
 8001c5c:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8001c60:	f008 fb16 	bl	800a290 <osDelay>
		resetYaw();
 8001c64:	f7ff fe6e 	bl	8001944 <resetYaw>
		bTurn=0;
 8001c68:	4b41      	ldr	r3, [pc, #260]	@ (8001d70 <Forward+0x130>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
	}
	updateYaw();
 8001c6e:	f7ff fe8f 	bl	8001990 <updateYaw>
	//osDelay(10);
	LMotorPID.setpoint=4;
 8001c72:	4b40      	ldr	r3, [pc, #256]	@ (8001d74 <Forward+0x134>)
 8001c74:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8001c78:	60da      	str	r2, [r3, #12]
	RMotorPID.setpoint=4;
 8001c7a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d78 <Forward+0x138>)
 8001c7c:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8001c80:	60da      	str	r2, [r3, #12]

	if (yaw > target - 0.5f )
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	ee07 3a90 	vmov	s15, r3
 8001c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c90:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001c94:	4b39      	ldr	r3, [pc, #228]	@ (8001d7c <Forward+0x13c>)
 8001c96:	edd3 7a00 	vldr	s15, [r3]
 8001c9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca2:	d503      	bpl.n	8001cac <Forward+0x6c>
	  {
		  set_servo_angle(Slight_Right);
 8001ca4:	205a      	movs	r0, #90	@ 0x5a
 8001ca6:	f000 fc49 	bl	800253c <set_servo_angle>
 8001caa:	e013      	b.n	8001cd4 <Forward+0x94>
	  }
	else if(yaw < target + 0.5f)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	ee07 3a90 	vmov	s15, r3
 8001cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001cba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8001d7c <Forward+0x13c>)
 8001cc0:	edd3 7a00 	vldr	s15, [r3]
 8001cc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ccc:	dd02      	ble.n	8001cd4 <Forward+0x94>
	{
		set_servo_angle(Slight_Left);
 8001cce:	2064      	movs	r0, #100	@ 0x64
 8001cd0:	f000 fc34 	bl	800253c <set_servo_angle>
	}
		if(Target_Distance- distanceTraveled <20&&Target_Distance >30)
 8001cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d80 <Forward+0x140>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	ee07 3a90 	vmov	s15, r3
 8001cdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ce0:	4b28      	ldr	r3, [pc, #160]	@ (8001d84 <Forward+0x144>)
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cea:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf6:	d50b      	bpl.n	8001d10 <Forward+0xd0>
 8001cf8:	4b21      	ldr	r3, [pc, #132]	@ (8001d80 <Forward+0x140>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b1e      	cmp	r3, #30
 8001cfe:	dd07      	ble.n	8001d10 <Forward+0xd0>
		{
		  LMotorPID.setpoint=1;
 8001d00:	4b1c      	ldr	r3, [pc, #112]	@ (8001d74 <Forward+0x134>)
 8001d02:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001d06:	60da      	str	r2, [r3, #12]
		  RMotorPID.setpoint=1;
 8001d08:	4b1b      	ldr	r3, [pc, #108]	@ (8001d78 <Forward+0x138>)
 8001d0a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001d0e:	60da      	str	r2, [r3, #12]
//	else if (yaw > target - 20.0f && yaw < target + 20.0f)
//	{
//	  LMotorPID.setpoint=0.5;
//	  RMotorPID.setpoint=0.35;
//	}
	int32_t L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8001d10:	4b1d      	ldr	r3, [pc, #116]	@ (8001d88 <Forward+0x148>)
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	4610      	mov	r0, r2
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f7fe ff65 	bl	8000be8 <__aeabi_d2f>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	ee00 3a10 	vmov	s0, r3
 8001d24:	4813      	ldr	r0, [pc, #76]	@ (8001d74 <Forward+0x134>)
 8001d26:	f7ff fceb 	bl	8001700 <PID_Update>
 8001d2a:	eef0 7a40 	vmov.f32	s15, s0
 8001d2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d32:	ee17 3a90 	vmov	r3, s15
 8001d36:	60fb      	str	r3, [r7, #12]
	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8001d38:	4b14      	ldr	r3, [pc, #80]	@ (8001d8c <Forward+0x14c>)
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	4610      	mov	r0, r2
 8001d40:	4619      	mov	r1, r3
 8001d42:	f7fe ff51 	bl	8000be8 <__aeabi_d2f>
 8001d46:	4603      	mov	r3, r0
 8001d48:	ee00 3a10 	vmov	s0, r3
 8001d4c:	480a      	ldr	r0, [pc, #40]	@ (8001d78 <Forward+0x138>)
 8001d4e:	f7ff fcd7 	bl	8001700 <PID_Update>
 8001d52:	eef0 7a40 	vmov.f32	s15, s0
 8001d56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d5a:	ee17 3a90 	vmov	r3, s15
 8001d5e:	60bb      	str	r3, [r7, #8]
	set_motor_pwm(L, R);
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 fba4 	bl	80024b0 <set_motor_pwm>

}
 8001d68:	bf00      	nop
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	2000001d 	.word	0x2000001d
 8001d74:	2000057c 	.word	0x2000057c
 8001d78:	200005a4 	.word	0x200005a4
 8001d7c:	20000578 	.word	0x20000578
 8001d80:	2000021c 	.word	0x2000021c
 8001d84:	20000220 	.word	0x20000220
 8001d88:	20000550 	.word	0x20000550
 8001d8c:	20000558 	.word	0x20000558

08001d90 <BackRight>:
//	int32_t L=(int32_t)PID_Update(&LMotorPID, RPS_L);
//	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
//	set_motor_pwm(L, R);
//}
void BackRight(int target)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

	//Ensure yaw is reseted before turning
	//int target=-85;//90
	//int target=25;//360
	static uint8_t bTurn=1;
	if(bTurn&& target != 0)
 8001d98:	4b5b      	ldr	r3, [pc, #364]	@ (8001f08 <BackRight+0x178>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00e      	beq.n	8001dbe <BackRight+0x2e>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00b      	beq.n	8001dbe <BackRight+0x2e>
	{
		set_servo_angle(Right);
 8001da6:	2000      	movs	r0, #0
 8001da8:	f000 fbc8 	bl	800253c <set_servo_angle>
		osDelay(750);
 8001dac:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001db0:	f008 fa6e 	bl	800a290 <osDelay>
		resetYaw();
 8001db4:	f7ff fdc6 	bl	8001944 <resetYaw>
		bTurn=0;
 8001db8:	4b53      	ldr	r3, [pc, #332]	@ (8001f08 <BackRight+0x178>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
	}
	updateYaw();
 8001dbe:	f7ff fde7 	bl	8001990 <updateYaw>
	//osDelay(10);
	LMotorPID.setpoint=4;
 8001dc2:	4b52      	ldr	r3, [pc, #328]	@ (8001f0c <BackRight+0x17c>)
 8001dc4:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8001dc8:	60da      	str	r2, [r3, #12]
	RMotorPID.setpoint=1;
 8001dca:	4b51      	ldr	r3, [pc, #324]	@ (8001f10 <BackRight+0x180>)
 8001dcc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001dd0:	60da      	str	r2, [r3, #12]

	if (yaw > target - 1.0f && yaw < target + 1.0f)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	ee07 3a90 	vmov	s15, r3
 8001dd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ddc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001de0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001de4:	4b4b      	ldr	r3, [pc, #300]	@ (8001f14 <BackRight+0x184>)
 8001de6:	edd3 7a00 	vldr	s15, [r3]
 8001dea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df2:	d530      	bpl.n	8001e56 <BackRight+0xc6>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	ee07 3a90 	vmov	s15, r3
 8001dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001e06:	4b43      	ldr	r3, [pc, #268]	@ (8001f14 <BackRight+0x184>)
 8001e08:	edd3 7a00 	vldr	s15, [r3]
 8001e0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e14:	dd1f      	ble.n	8001e56 <BackRight+0xc6>
			  {
				  set_motor_pwm(0, 0);
 8001e16:	2100      	movs	r1, #0
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f000 fb49 	bl	80024b0 <set_motor_pwm>
				  PID_Reset(&LMotorPID);
 8001e1e:	483b      	ldr	r0, [pc, #236]	@ (8001f0c <BackRight+0x17c>)
 8001e20:	f7ff fd24 	bl	800186c <PID_Reset>
				  PID_Reset(&RMotorPID);
 8001e24:	483a      	ldr	r0, [pc, #232]	@ (8001f10 <BackRight+0x180>)
 8001e26:	f7ff fd21 	bl	800186c <PID_Reset>
				  set_servo_angle(Center);
 8001e2a:	205f      	movs	r0, #95	@ 0x5f
 8001e2c:	f000 fb86 	bl	800253c <set_servo_angle>
				  osDelay(750);
 8001e30:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001e34:	f008 fa2c 	bl	800a290 <osDelay>
				  bTurn=1;
 8001e38:	4b33      	ldr	r3, [pc, #204]	@ (8001f08 <BackRight+0x178>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	701a      	strb	r2, [r3, #0]
				  flagDone=1;
 8001e3e:	4b36      	ldr	r3, [pc, #216]	@ (8001f18 <BackRight+0x188>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
				  tempflag=0;
 8001e44:	4b35      	ldr	r3, [pc, #212]	@ (8001f1c <BackRight+0x18c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
				  count++;
 8001e4a:	4b35      	ldr	r3, [pc, #212]	@ (8001f20 <BackRight+0x190>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	4a33      	ldr	r2, [pc, #204]	@ (8001f20 <BackRight+0x190>)
 8001e52:	6013      	str	r3, [r2, #0]
				  return;
 8001e54:	e055      	b.n	8001f02 <BackRight+0x172>
			  }
	else if (yaw > target - 25.0f && yaw < target + 25.0f)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	ee07 3a90 	vmov	s15, r3
 8001e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e60:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001e64:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001e68:	4b2a      	ldr	r3, [pc, #168]	@ (8001f14 <BackRight+0x184>)
 8001e6a:	edd3 7a00 	vldr	s15, [r3]
 8001e6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	d518      	bpl.n	8001eaa <BackRight+0x11a>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	ee07 3a90 	vmov	s15, r3
 8001e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e82:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001e86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001e8a:	4b22      	ldr	r3, [pc, #136]	@ (8001f14 <BackRight+0x184>)
 8001e8c:	edd3 7a00 	vldr	s15, [r3]
 8001e90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e98:	dd07      	ble.n	8001eaa <BackRight+0x11a>
	{
	  LMotorPID.setpoint=0.5;
 8001e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f0c <BackRight+0x17c>)
 8001e9c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001ea0:	60da      	str	r2, [r3, #12]
	  RMotorPID.setpoint=0.5;//0.35
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <BackRight+0x180>)
 8001ea4:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001ea8:	60da      	str	r2, [r3, #12]
	}
	int32_t L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8001f24 <BackRight+0x194>)
 8001eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f7fe fe98 	bl	8000be8 <__aeabi_d2f>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	ee00 3a10 	vmov	s0, r3
 8001ebe:	4813      	ldr	r0, [pc, #76]	@ (8001f0c <BackRight+0x17c>)
 8001ec0:	f7ff fc1e 	bl	8001700 <PID_Update>
 8001ec4:	eef0 7a40 	vmov.f32	s15, s0
 8001ec8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ecc:	ee17 3a90 	vmov	r3, s15
 8001ed0:	60fb      	str	r3, [r7, #12]
	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8001ed2:	4b15      	ldr	r3, [pc, #84]	@ (8001f28 <BackRight+0x198>)
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f7fe fe84 	bl	8000be8 <__aeabi_d2f>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	ee00 3a10 	vmov	s0, r3
 8001ee6:	480a      	ldr	r0, [pc, #40]	@ (8001f10 <BackRight+0x180>)
 8001ee8:	f7ff fc0a 	bl	8001700 <PID_Update>
 8001eec:	eef0 7a40 	vmov.f32	s15, s0
 8001ef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ef4:	ee17 3a90 	vmov	r3, s15
 8001ef8:	60bb      	str	r3, [r7, #8]
	set_motor_pwm(L, R);
 8001efa:	68b9      	ldr	r1, [r7, #8]
 8001efc:	68f8      	ldr	r0, [r7, #12]
 8001efe:	f000 fad7 	bl	80024b0 <set_motor_pwm>
}
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	2000001e 	.word	0x2000001e
 8001f0c:	2000057c 	.word	0x2000057c
 8001f10:	200005a4 	.word	0x200005a4
 8001f14:	20000578 	.word	0x20000578
 8001f18:	20000228 	.word	0x20000228
 8001f1c:	20000004 	.word	0x20000004
 8001f20:	20000230 	.word	0x20000230
 8001f24:	20000550 	.word	0x20000550
 8001f28:	20000558 	.word	0x20000558
 8001f2c:	00000000 	.word	0x00000000

08001f30 <BackLeft>:
void BackLeft(int target)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

	//Ensure yaw is reseted before turning
	//int target=-85;//90
	//int target=25;//360
	static uint8_t bTurn=1;
	if(bTurn&& target != 0)
 8001f38:	4b6b      	ldr	r3, [pc, #428]	@ (80020e8 <BackLeft+0x1b8>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00e      	beq.n	8001f5e <BackLeft+0x2e>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00b      	beq.n	8001f5e <BackLeft+0x2e>
	{
		set_servo_angle(Left);
 8001f46:	208c      	movs	r0, #140	@ 0x8c
 8001f48:	f000 faf8 	bl	800253c <set_servo_angle>
		osDelay(750);
 8001f4c:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001f50:	f008 f99e 	bl	800a290 <osDelay>
		resetYaw();
 8001f54:	f7ff fcf6 	bl	8001944 <resetYaw>
		bTurn=0;
 8001f58:	4b63      	ldr	r3, [pc, #396]	@ (80020e8 <BackLeft+0x1b8>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
	}
	updateYaw();
 8001f5e:	f7ff fd17 	bl	8001990 <updateYaw>
	//osDelay(10);
	LMotorPID.setpoint=1;
 8001f62:	4b62      	ldr	r3, [pc, #392]	@ (80020ec <BackLeft+0x1bc>)
 8001f64:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001f68:	60da      	str	r2, [r3, #12]
	RMotorPID.setpoint=4;
 8001f6a:	4b61      	ldr	r3, [pc, #388]	@ (80020f0 <BackLeft+0x1c0>)
 8001f6c:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8001f70:	60da      	str	r2, [r3, #12]

	if (yaw > target - 1.0f && yaw < target + 1.0f)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	ee07 3a90 	vmov	s15, r3
 8001f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f80:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001f84:	4b5b      	ldr	r3, [pc, #364]	@ (80020f4 <BackLeft+0x1c4>)
 8001f86:	edd3 7a00 	vldr	s15, [r3]
 8001f8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f92:	d54b      	bpl.n	800202c <BackLeft+0xfc>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	ee07 3a90 	vmov	s15, r3
 8001f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001fa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001fa6:	4b53      	ldr	r3, [pc, #332]	@ (80020f4 <BackLeft+0x1c4>)
 8001fa8:	edd3 7a00 	vldr	s15, [r3]
 8001fac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb4:	dd3a      	ble.n	800202c <BackLeft+0xfc>
			  {
				  set_motor_pwm(0, 0);
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f000 fa79 	bl	80024b0 <set_motor_pwm>
				  PID_Reset(&LMotorPID);
 8001fbe:	484b      	ldr	r0, [pc, #300]	@ (80020ec <BackLeft+0x1bc>)
 8001fc0:	f7ff fc54 	bl	800186c <PID_Reset>
				  PID_Reset(&RMotorPID);
 8001fc4:	484a      	ldr	r0, [pc, #296]	@ (80020f0 <BackLeft+0x1c0>)
 8001fc6:	f7ff fc51 	bl	800186c <PID_Reset>
				  set_servo_angle(Center);
 8001fca:	205f      	movs	r0, #95	@ 0x5f
 8001fcc:	f000 fab6 	bl	800253c <set_servo_angle>
				  osDelay(750);
 8001fd0:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001fd4:	f008 f95c 	bl	800a290 <osDelay>
				  bTurn=1;
 8001fd8:	4b43      	ldr	r3, [pc, #268]	@ (80020e8 <BackLeft+0x1b8>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]
				  flagDone=1;
 8001fde:	4b46      	ldr	r3, [pc, #280]	@ (80020f8 <BackLeft+0x1c8>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]
				  tempflag=0;
 8001fe4:	4b45      	ldr	r3, [pc, #276]	@ (80020fc <BackLeft+0x1cc>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
				  distanceTraveled=0;
 8001fea:	4b45      	ldr	r3, [pc, #276]	@ (8002100 <BackLeft+0x1d0>)
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
				  while(distanceTraveled < 0.3)
 8001ff2:	e006      	b.n	8002002 <BackLeft+0xd2>
				  {
					  Set_Motor_Direction(0,0);
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f7ff fc52 	bl	80018a0 <Set_Motor_Direction>
					  Backward(0);
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f7ff fd77 	bl	8001af0 <Backward>
				  while(distanceTraveled < 0.3)
 8002002:	4b3f      	ldr	r3, [pc, #252]	@ (8002100 <BackLeft+0x1d0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe fa9e 	bl	8000548 <__aeabi_f2d>
 800200c:	a334      	add	r3, pc, #208	@ (adr r3, 80020e0 <BackLeft+0x1b0>)
 800200e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002012:	f7fe fd63 	bl	8000adc <__aeabi_dcmplt>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1eb      	bne.n	8001ff4 <BackLeft+0xc4>
				  }
				  Motor_Stop();
 800201c:	f001 f96c 	bl	80032f8 <Motor_Stop>
				  count++;
 8002020:	4b38      	ldr	r3, [pc, #224]	@ (8002104 <BackLeft+0x1d4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	3301      	adds	r3, #1
 8002026:	4a37      	ldr	r2, [pc, #220]	@ (8002104 <BackLeft+0x1d4>)
 8002028:	6013      	str	r3, [r2, #0]
				  return;
 800202a:	e055      	b.n	80020d8 <BackLeft+0x1a8>
			  }
	else if (yaw > target - 25.0f && yaw < target + 25.0f)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	ee07 3a90 	vmov	s15, r3
 8002032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002036:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800203a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800203e:	4b2d      	ldr	r3, [pc, #180]	@ (80020f4 <BackLeft+0x1c4>)
 8002040:	edd3 7a00 	vldr	s15, [r3]
 8002044:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204c:	d518      	bpl.n	8002080 <BackLeft+0x150>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	ee07 3a90 	vmov	s15, r3
 8002054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002058:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800205c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002060:	4b24      	ldr	r3, [pc, #144]	@ (80020f4 <BackLeft+0x1c4>)
 8002062:	edd3 7a00 	vldr	s15, [r3]
 8002066:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800206a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206e:	dd07      	ble.n	8002080 <BackLeft+0x150>
	{
	  LMotorPID.setpoint=0.5;
 8002070:	4b1e      	ldr	r3, [pc, #120]	@ (80020ec <BackLeft+0x1bc>)
 8002072:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002076:	60da      	str	r2, [r3, #12]
	  RMotorPID.setpoint=0.5;//0.35
 8002078:	4b1d      	ldr	r3, [pc, #116]	@ (80020f0 <BackLeft+0x1c0>)
 800207a:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800207e:	60da      	str	r2, [r3, #12]
	}
	int32_t L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8002080:	4b21      	ldr	r3, [pc, #132]	@ (8002108 <BackLeft+0x1d8>)
 8002082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	f7fe fdad 	bl	8000be8 <__aeabi_d2f>
 800208e:	4603      	mov	r3, r0
 8002090:	ee00 3a10 	vmov	s0, r3
 8002094:	4815      	ldr	r0, [pc, #84]	@ (80020ec <BackLeft+0x1bc>)
 8002096:	f7ff fb33 	bl	8001700 <PID_Update>
 800209a:	eef0 7a40 	vmov.f32	s15, s0
 800209e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020a2:	ee17 3a90 	vmov	r3, s15
 80020a6:	60fb      	str	r3, [r7, #12]
	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 80020a8:	4b18      	ldr	r3, [pc, #96]	@ (800210c <BackLeft+0x1dc>)
 80020aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	f7fe fd99 	bl	8000be8 <__aeabi_d2f>
 80020b6:	4603      	mov	r3, r0
 80020b8:	ee00 3a10 	vmov	s0, r3
 80020bc:	480c      	ldr	r0, [pc, #48]	@ (80020f0 <BackLeft+0x1c0>)
 80020be:	f7ff fb1f 	bl	8001700 <PID_Update>
 80020c2:	eef0 7a40 	vmov.f32	s15, s0
 80020c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020ca:	ee17 3a90 	vmov	r3, s15
 80020ce:	60bb      	str	r3, [r7, #8]
	set_motor_pwm(L, R);
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f9ec 	bl	80024b0 <set_motor_pwm>
}
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	33333333 	.word	0x33333333
 80020e4:	3fd33333 	.word	0x3fd33333
 80020e8:	2000001f 	.word	0x2000001f
 80020ec:	2000057c 	.word	0x2000057c
 80020f0:	200005a4 	.word	0x200005a4
 80020f4:	20000578 	.word	0x20000578
 80020f8:	20000228 	.word	0x20000228
 80020fc:	20000004 	.word	0x20000004
 8002100:	20000220 	.word	0x20000220
 8002104:	20000230 	.word	0x20000230
 8002108:	20000550 	.word	0x20000550
 800210c:	20000558 	.word	0x20000558

08002110 <ForwardLeft>:
void ForwardLeft(int target)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

	//Ensure yaw is reseted before turning
	//int target=-85;//90
	//int target=25;//360
	static uint8_t bTurn=1;
	if(bTurn&& target != 0)
 8002118:	4b67      	ldr	r3, [pc, #412]	@ (80022b8 <ForwardLeft+0x1a8>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00e      	beq.n	800213e <ForwardLeft+0x2e>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00b      	beq.n	800213e <ForwardLeft+0x2e>
	{
		set_servo_angle(Left);
 8002126:	208c      	movs	r0, #140	@ 0x8c
 8002128:	f000 fa08 	bl	800253c <set_servo_angle>
		osDelay(750);
 800212c:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8002130:	f008 f8ae 	bl	800a290 <osDelay>
		resetYaw();
 8002134:	f7ff fc06 	bl	8001944 <resetYaw>
		bTurn=0;
 8002138:	4b5f      	ldr	r3, [pc, #380]	@ (80022b8 <ForwardLeft+0x1a8>)
 800213a:	2200      	movs	r2, #0
 800213c:	701a      	strb	r2, [r3, #0]
	}
	updateYaw();
 800213e:	f7ff fc27 	bl	8001990 <updateYaw>
	//osDelay(10);
	LMotorPID.setpoint=1;
 8002142:	4b5e      	ldr	r3, [pc, #376]	@ (80022bc <ForwardLeft+0x1ac>)
 8002144:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002148:	60da      	str	r2, [r3, #12]
	RMotorPID.setpoint=4;
 800214a:	4b5d      	ldr	r3, [pc, #372]	@ (80022c0 <ForwardLeft+0x1b0>)
 800214c:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8002150:	60da      	str	r2, [r3, #12]

	if (yaw > target - 1.0f && yaw < target + 1.0f)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	ee07 3a90 	vmov	s15, r3
 8002158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800215c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002160:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002164:	4b57      	ldr	r3, [pc, #348]	@ (80022c4 <ForwardLeft+0x1b4>)
 8002166:	edd3 7a00 	vldr	s15, [r3]
 800216a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800216e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002172:	d548      	bpl.n	8002206 <ForwardLeft+0xf6>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	ee07 3a90 	vmov	s15, r3
 800217a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800217e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002182:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002186:	4b4f      	ldr	r3, [pc, #316]	@ (80022c4 <ForwardLeft+0x1b4>)
 8002188:	edd3 7a00 	vldr	s15, [r3]
 800218c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002194:	dd37      	ble.n	8002206 <ForwardLeft+0xf6>
			  {
				  set_motor_pwm(0, 0);
 8002196:	2100      	movs	r1, #0
 8002198:	2000      	movs	r0, #0
 800219a:	f000 f989 	bl	80024b0 <set_motor_pwm>
				  PID_Reset(&LMotorPID);
 800219e:	4847      	ldr	r0, [pc, #284]	@ (80022bc <ForwardLeft+0x1ac>)
 80021a0:	f7ff fb64 	bl	800186c <PID_Reset>
				  PID_Reset(&RMotorPID);
 80021a4:	4846      	ldr	r0, [pc, #280]	@ (80022c0 <ForwardLeft+0x1b0>)
 80021a6:	f7ff fb61 	bl	800186c <PID_Reset>
				  set_servo_angle(Center);
 80021aa:	205f      	movs	r0, #95	@ 0x5f
 80021ac:	f000 f9c6 	bl	800253c <set_servo_angle>
				  osDelay(750);
 80021b0:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80021b4:	f008 f86c 	bl	800a290 <osDelay>
				  bTurn=1;
 80021b8:	4b3f      	ldr	r3, [pc, #252]	@ (80022b8 <ForwardLeft+0x1a8>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	701a      	strb	r2, [r3, #0]
				  flagDone=1;
 80021be:	4b42      	ldr	r3, [pc, #264]	@ (80022c8 <ForwardLeft+0x1b8>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
				  tempflag=0;
 80021c4:	4b41      	ldr	r3, [pc, #260]	@ (80022cc <ForwardLeft+0x1bc>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
				  distanceTraveled=0;
 80021ca:	4b41      	ldr	r3, [pc, #260]	@ (80022d0 <ForwardLeft+0x1c0>)
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
				  while(distanceTraveled < 1)
 80021d2:	e006      	b.n	80021e2 <ForwardLeft+0xd2>
				  {
					  Set_Motor_Direction(0,0);
 80021d4:	2100      	movs	r1, #0
 80021d6:	2000      	movs	r0, #0
 80021d8:	f7ff fb62 	bl	80018a0 <Set_Motor_Direction>
					  Backward(0);
 80021dc:	2000      	movs	r0, #0
 80021de:	f7ff fc87 	bl	8001af0 <Backward>
				  while(distanceTraveled < 1)
 80021e2:	4b3b      	ldr	r3, [pc, #236]	@ (80022d0 <ForwardLeft+0x1c0>)
 80021e4:	edd3 7a00 	vldr	s15, [r3]
 80021e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80021ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f4:	d4ee      	bmi.n	80021d4 <ForwardLeft+0xc4>
				  }
				  Motor_Stop();
 80021f6:	f001 f87f 	bl	80032f8 <Motor_Stop>
				  count++;
 80021fa:	4b36      	ldr	r3, [pc, #216]	@ (80022d4 <ForwardLeft+0x1c4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	3301      	adds	r3, #1
 8002200:	4a34      	ldr	r2, [pc, #208]	@ (80022d4 <ForwardLeft+0x1c4>)
 8002202:	6013      	str	r3, [r2, #0]
				  return;
 8002204:	e055      	b.n	80022b2 <ForwardLeft+0x1a2>
			  }
	else if (yaw > target - 25.0f && yaw < target + 25.0f)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	ee07 3a90 	vmov	s15, r3
 800220c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002210:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002214:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002218:	4b2a      	ldr	r3, [pc, #168]	@ (80022c4 <ForwardLeft+0x1b4>)
 800221a:	edd3 7a00 	vldr	s15, [r3]
 800221e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002226:	d518      	bpl.n	800225a <ForwardLeft+0x14a>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002232:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002236:	ee37 7a87 	vadd.f32	s14, s15, s14
 800223a:	4b22      	ldr	r3, [pc, #136]	@ (80022c4 <ForwardLeft+0x1b4>)
 800223c:	edd3 7a00 	vldr	s15, [r3]
 8002240:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002248:	dd07      	ble.n	800225a <ForwardLeft+0x14a>
	{
	  LMotorPID.setpoint=0.5;
 800224a:	4b1c      	ldr	r3, [pc, #112]	@ (80022bc <ForwardLeft+0x1ac>)
 800224c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002250:	60da      	str	r2, [r3, #12]
	  RMotorPID.setpoint=0.5;//0.35
 8002252:	4b1b      	ldr	r3, [pc, #108]	@ (80022c0 <ForwardLeft+0x1b0>)
 8002254:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002258:	60da      	str	r2, [r3, #12]
	}
	int32_t L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 800225a:	4b1f      	ldr	r3, [pc, #124]	@ (80022d8 <ForwardLeft+0x1c8>)
 800225c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002260:	4610      	mov	r0, r2
 8002262:	4619      	mov	r1, r3
 8002264:	f7fe fcc0 	bl	8000be8 <__aeabi_d2f>
 8002268:	4603      	mov	r3, r0
 800226a:	ee00 3a10 	vmov	s0, r3
 800226e:	4813      	ldr	r0, [pc, #76]	@ (80022bc <ForwardLeft+0x1ac>)
 8002270:	f7ff fa46 	bl	8001700 <PID_Update>
 8002274:	eef0 7a40 	vmov.f32	s15, s0
 8002278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800227c:	ee17 3a90 	vmov	r3, s15
 8002280:	60fb      	str	r3, [r7, #12]
	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8002282:	4b16      	ldr	r3, [pc, #88]	@ (80022dc <ForwardLeft+0x1cc>)
 8002284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002288:	4610      	mov	r0, r2
 800228a:	4619      	mov	r1, r3
 800228c:	f7fe fcac 	bl	8000be8 <__aeabi_d2f>
 8002290:	4603      	mov	r3, r0
 8002292:	ee00 3a10 	vmov	s0, r3
 8002296:	480a      	ldr	r0, [pc, #40]	@ (80022c0 <ForwardLeft+0x1b0>)
 8002298:	f7ff fa32 	bl	8001700 <PID_Update>
 800229c:	eef0 7a40 	vmov.f32	s15, s0
 80022a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022a4:	ee17 3a90 	vmov	r3, s15
 80022a8:	60bb      	str	r3, [r7, #8]
	set_motor_pwm(L, R);
 80022aa:	68b9      	ldr	r1, [r7, #8]
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 f8ff 	bl	80024b0 <set_motor_pwm>
}
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20000020 	.word	0x20000020
 80022bc:	2000057c 	.word	0x2000057c
 80022c0:	200005a4 	.word	0x200005a4
 80022c4:	20000578 	.word	0x20000578
 80022c8:	20000228 	.word	0x20000228
 80022cc:	20000004 	.word	0x20000004
 80022d0:	20000220 	.word	0x20000220
 80022d4:	20000230 	.word	0x20000230
 80022d8:	20000550 	.word	0x20000550
 80022dc:	20000558 	.word	0x20000558

080022e0 <ForwardRight>:
void ForwardRight(int target)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

	//Ensure yaw is reseted before turning
	//int target=-85;//90
	//int target=25;//360
	static uint8_t bTurn=1;
	if(bTurn&& target != 0)
 80022e8:	4b67      	ldr	r3, [pc, #412]	@ (8002488 <ForwardRight+0x1a8>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00e      	beq.n	800230e <ForwardRight+0x2e>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00b      	beq.n	800230e <ForwardRight+0x2e>
	{
		set_servo_angle(Right);
 80022f6:	2000      	movs	r0, #0
 80022f8:	f000 f920 	bl	800253c <set_servo_angle>
		osDelay(750);
 80022fc:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8002300:	f007 ffc6 	bl	800a290 <osDelay>
		resetYaw();
 8002304:	f7ff fb1e 	bl	8001944 <resetYaw>
		bTurn=0;
 8002308:	4b5f      	ldr	r3, [pc, #380]	@ (8002488 <ForwardRight+0x1a8>)
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
	}
	updateYaw();
 800230e:	f7ff fb3f 	bl	8001990 <updateYaw>
	//osDelay(10);
	LMotorPID.setpoint=4;
 8002312:	4b5e      	ldr	r3, [pc, #376]	@ (800248c <ForwardRight+0x1ac>)
 8002314:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8002318:	60da      	str	r2, [r3, #12]
	RMotorPID.setpoint=1;
 800231a:	4b5d      	ldr	r3, [pc, #372]	@ (8002490 <ForwardRight+0x1b0>)
 800231c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002320:	60da      	str	r2, [r3, #12]

	if (yaw > target - 1.0f && yaw < target + 1.0f)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	ee07 3a90 	vmov	s15, r3
 8002328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800232c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002330:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002334:	4b57      	ldr	r3, [pc, #348]	@ (8002494 <ForwardRight+0x1b4>)
 8002336:	edd3 7a00 	vldr	s15, [r3]
 800233a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800233e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002342:	d548      	bpl.n	80023d6 <ForwardRight+0xf6>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	ee07 3a90 	vmov	s15, r3
 800234a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800234e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002352:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002356:	4b4f      	ldr	r3, [pc, #316]	@ (8002494 <ForwardRight+0x1b4>)
 8002358:	edd3 7a00 	vldr	s15, [r3]
 800235c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002364:	dd37      	ble.n	80023d6 <ForwardRight+0xf6>
			  {
				  set_motor_pwm(0, 0);
 8002366:	2100      	movs	r1, #0
 8002368:	2000      	movs	r0, #0
 800236a:	f000 f8a1 	bl	80024b0 <set_motor_pwm>
				  PID_Reset(&LMotorPID);
 800236e:	4847      	ldr	r0, [pc, #284]	@ (800248c <ForwardRight+0x1ac>)
 8002370:	f7ff fa7c 	bl	800186c <PID_Reset>
				  PID_Reset(&RMotorPID);
 8002374:	4846      	ldr	r0, [pc, #280]	@ (8002490 <ForwardRight+0x1b0>)
 8002376:	f7ff fa79 	bl	800186c <PID_Reset>
				  set_servo_angle(Center);
 800237a:	205f      	movs	r0, #95	@ 0x5f
 800237c:	f000 f8de 	bl	800253c <set_servo_angle>
				  osDelay(750);
 8002380:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8002384:	f007 ff84 	bl	800a290 <osDelay>
				  bTurn=1;
 8002388:	4b3f      	ldr	r3, [pc, #252]	@ (8002488 <ForwardRight+0x1a8>)
 800238a:	2201      	movs	r2, #1
 800238c:	701a      	strb	r2, [r3, #0]
				  flagDone=1;
 800238e:	4b42      	ldr	r3, [pc, #264]	@ (8002498 <ForwardRight+0x1b8>)
 8002390:	2201      	movs	r2, #1
 8002392:	601a      	str	r2, [r3, #0]
				  tempflag=0;
 8002394:	4b41      	ldr	r3, [pc, #260]	@ (800249c <ForwardRight+0x1bc>)
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
				  distanceTraveled=0;
 800239a:	4b41      	ldr	r3, [pc, #260]	@ (80024a0 <ForwardRight+0x1c0>)
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
				  while(distanceTraveled < 1)
 80023a2:	e006      	b.n	80023b2 <ForwardRight+0xd2>
				  {
					  Set_Motor_Direction(0,0);
 80023a4:	2100      	movs	r1, #0
 80023a6:	2000      	movs	r0, #0
 80023a8:	f7ff fa7a 	bl	80018a0 <Set_Motor_Direction>
					  Backward(0);
 80023ac:	2000      	movs	r0, #0
 80023ae:	f7ff fb9f 	bl	8001af0 <Backward>
				  while(distanceTraveled < 1)
 80023b2:	4b3b      	ldr	r3, [pc, #236]	@ (80024a0 <ForwardRight+0x1c0>)
 80023b4:	edd3 7a00 	vldr	s15, [r3]
 80023b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80023bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c4:	d4ee      	bmi.n	80023a4 <ForwardRight+0xc4>
				  }
				  Motor_Stop();
 80023c6:	f000 ff97 	bl	80032f8 <Motor_Stop>
				  count++;
 80023ca:	4b36      	ldr	r3, [pc, #216]	@ (80024a4 <ForwardRight+0x1c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	3301      	adds	r3, #1
 80023d0:	4a34      	ldr	r2, [pc, #208]	@ (80024a4 <ForwardRight+0x1c4>)
 80023d2:	6013      	str	r3, [r2, #0]
				  return;
 80023d4:	e055      	b.n	8002482 <ForwardRight+0x1a2>
			  }
	else if (yaw > target - 25.0f && yaw < target + 25.0f)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	ee07 3a90 	vmov	s15, r3
 80023dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e0:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80023e4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80023e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002494 <ForwardRight+0x1b4>)
 80023ea:	edd3 7a00 	vldr	s15, [r3]
 80023ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f6:	d518      	bpl.n	800242a <ForwardRight+0x14a>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	ee07 3a90 	vmov	s15, r3
 80023fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002402:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002406:	ee37 7a87 	vadd.f32	s14, s15, s14
 800240a:	4b22      	ldr	r3, [pc, #136]	@ (8002494 <ForwardRight+0x1b4>)
 800240c:	edd3 7a00 	vldr	s15, [r3]
 8002410:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002418:	dd07      	ble.n	800242a <ForwardRight+0x14a>
	{
	  LMotorPID.setpoint=0.5;
 800241a:	4b1c      	ldr	r3, [pc, #112]	@ (800248c <ForwardRight+0x1ac>)
 800241c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002420:	60da      	str	r2, [r3, #12]
	  RMotorPID.setpoint=0.5;//0.35
 8002422:	4b1b      	ldr	r3, [pc, #108]	@ (8002490 <ForwardRight+0x1b0>)
 8002424:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002428:	60da      	str	r2, [r3, #12]
	}
	int32_t L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 800242a:	4b1f      	ldr	r3, [pc, #124]	@ (80024a8 <ForwardRight+0x1c8>)
 800242c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	f7fe fbd8 	bl	8000be8 <__aeabi_d2f>
 8002438:	4603      	mov	r3, r0
 800243a:	ee00 3a10 	vmov	s0, r3
 800243e:	4813      	ldr	r0, [pc, #76]	@ (800248c <ForwardRight+0x1ac>)
 8002440:	f7ff f95e 	bl	8001700 <PID_Update>
 8002444:	eef0 7a40 	vmov.f32	s15, s0
 8002448:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800244c:	ee17 3a90 	vmov	r3, s15
 8002450:	60fb      	str	r3, [r7, #12]
	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8002452:	4b16      	ldr	r3, [pc, #88]	@ (80024ac <ForwardRight+0x1cc>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	4610      	mov	r0, r2
 800245a:	4619      	mov	r1, r3
 800245c:	f7fe fbc4 	bl	8000be8 <__aeabi_d2f>
 8002460:	4603      	mov	r3, r0
 8002462:	ee00 3a10 	vmov	s0, r3
 8002466:	480a      	ldr	r0, [pc, #40]	@ (8002490 <ForwardRight+0x1b0>)
 8002468:	f7ff f94a 	bl	8001700 <PID_Update>
 800246c:	eef0 7a40 	vmov.f32	s15, s0
 8002470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002474:	ee17 3a90 	vmov	r3, s15
 8002478:	60bb      	str	r3, [r7, #8]
	set_motor_pwm(L, R);
 800247a:	68b9      	ldr	r1, [r7, #8]
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f817 	bl	80024b0 <set_motor_pwm>
}
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000021 	.word	0x20000021
 800248c:	2000057c 	.word	0x2000057c
 8002490:	200005a4 	.word	0x200005a4
 8002494:	20000578 	.word	0x20000578
 8002498:	20000228 	.word	0x20000228
 800249c:	20000004 	.word	0x20000004
 80024a0:	20000220 	.word	0x20000220
 80024a4:	20000230 	.word	0x20000230
 80024a8:	20000550 	.word	0x20000550
 80024ac:	20000558 	.word	0x20000558

080024b0 <set_motor_pwm>:
//	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
//	set_motor_pwm(L, R);
//
//}
void set_motor_pwm(int32_t L,int32_t R)
{	//4k max pwm
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]

	pwmValL=L;
 80024ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002530 <set_motor_pwm+0x80>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6013      	str	r3, [r2, #0]
	pwmValR=R;
 80024c0:	4a1c      	ldr	r2, [pc, #112]	@ (8002534 <set_motor_pwm+0x84>)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6013      	str	r3, [r2, #0]
	 if(pwmValL<0)
 80024c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002530 <set_motor_pwm+0x80>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	da04      	bge.n	80024d8 <set_motor_pwm+0x28>
		 pwmValL=500;
 80024ce:	4b18      	ldr	r3, [pc, #96]	@ (8002530 <set_motor_pwm+0x80>)
 80024d0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	e008      	b.n	80024ea <set_motor_pwm+0x3a>
	 else if(pwmValL>4000)
 80024d8:	4b15      	ldr	r3, [pc, #84]	@ (8002530 <set_motor_pwm+0x80>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80024e0:	dd03      	ble.n	80024ea <set_motor_pwm+0x3a>
		 pwmValL=4000;
 80024e2:	4b13      	ldr	r3, [pc, #76]	@ (8002530 <set_motor_pwm+0x80>)
 80024e4:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80024e8:	601a      	str	r2, [r3, #0]

	 if(pwmValR<0)
 80024ea:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <set_motor_pwm+0x84>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	da04      	bge.n	80024fc <set_motor_pwm+0x4c>
		  pwmValR=500;
 80024f2:	4b10      	ldr	r3, [pc, #64]	@ (8002534 <set_motor_pwm+0x84>)
 80024f4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	e008      	b.n	800250e <set_motor_pwm+0x5e>
	 else if(pwmValL>4000)
 80024fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002530 <set_motor_pwm+0x80>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002504:	dd03      	ble.n	800250e <set_motor_pwm+0x5e>
		  pwmValR=4000;
 8002506:	4b0b      	ldr	r3, [pc, #44]	@ (8002534 <set_motor_pwm+0x84>)
 8002508:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800250c:	601a      	str	r2, [r3, #0]

	 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValL);
 800250e:	4b08      	ldr	r3, [pc, #32]	@ (8002530 <set_motor_pwm+0x80>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b09      	ldr	r3, [pc, #36]	@ (8002538 <set_motor_pwm+0x88>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	635a      	str	r2, [r3, #52]	@ 0x34
	 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmValR);
 8002518:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <set_motor_pwm+0x84>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <set_motor_pwm+0x88>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	639a      	str	r2, [r3, #56]	@ 0x38

	}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	200005cc 	.word	0x200005cc
 8002534:	200005d0 	.word	0x200005d0
 8002538:	20000488 	.word	0x20000488

0800253c <set_servo_angle>:
    	servo_pwm = MAX_SERVO;
    }
    htim1.Instance->CCR4 = servo_pwm;
}
void set_servo_angle(uint8_t value)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
    if (value > 180) value = 180;
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	2bb4      	cmp	r3, #180	@ 0xb4
 800254a:	d901      	bls.n	8002550 <set_servo_angle+0x14>
 800254c:	23b4      	movs	r3, #180	@ 0xb4
 800254e:	71fb      	strb	r3, [r7, #7]
    if (value < 0) value = 0;

	 servo_pwm = 240 - ((value * (240 - 60)) / 180);
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8002556:	4a08      	ldr	r2, [pc, #32]	@ (8002578 <set_servo_angle+0x3c>)
 8002558:	6013      	str	r3, [r2, #0]
    if(servo_pwm > MAX_SERVO)
    {
    	servo_pwm = MAX_SERVO;

    }*/
	 angle=value;
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	4a07      	ldr	r2, [pc, #28]	@ (800257c <set_servo_angle+0x40>)
 800255e:	6013      	str	r3, [r2, #0]
    htim1.Instance->CCR4 = servo_pwm;
 8002560:	4b05      	ldr	r3, [pc, #20]	@ (8002578 <set_servo_angle+0x3c>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <set_servo_angle+0x44>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	20000018 	.word	0x20000018
 800257c:	200005d8 	.word	0x200005d8
 8002580:	20000320 	.word	0x20000320

08002584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002588:	f001 fe9e 	bl	80042c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800258c:	f000 f8d2 	bl	8002734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002590:	f000 fcc0 	bl	8002f14 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002594:	f000 fc94 	bl	8002ec0 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002598:	f000 faee 	bl	8002b78 <MX_TIM3_Init>
  MX_TIM6_Init();
 800259c:	f000 fbb0 	bl	8002d00 <MX_TIM6_Init>
  MX_TIM1_Init();
 80025a0:	f000 f9f8 	bl	8002994 <MX_TIM1_Init>
  MX_TIM8_Init();
 80025a4:	f000 fbe2 	bl	8002d6c <MX_TIM8_Init>
  MX_I2C1_Init();
 80025a8:	f000 f9c6 	bl	8002938 <MX_I2C1_Init>
  MX_TIM2_Init();
 80025ac:	f000 fa90 	bl	8002ad0 <MX_TIM2_Init>
  MX_TIM4_Init();
 80025b0:	f000 fb36 	bl	8002c20 <MX_TIM4_Init>
  MX_ADC1_Init();
 80025b4:	f000 f91c 	bl	80027f0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80025b8:	f000 f96c 	bl	8002894 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 80025bc:	f00a fcb2 	bl	800cf24 <OLED_Init>
  ICM20948_init(&hi2c1,0,GYRO_SENS,ACCEL_SENS);
 80025c0:	2300      	movs	r3, #0
 80025c2:	2203      	movs	r2, #3
 80025c4:	2100      	movs	r1, #0
 80025c6:	483e      	ldr	r0, [pc, #248]	@ (80026c0 <main+0x13c>)
 80025c8:	f007 f9a5 	bl	8009916 <ICM20948_init>

  HAL_Delay(200);
 80025cc:	20c8      	movs	r0, #200	@ 0xc8
 80025ce:	f001 feed 	bl	80043ac <HAL_Delay>
  OLED_ShowString(10, 10, "Press to Start\0");
 80025d2:	4a3c      	ldr	r2, [pc, #240]	@ (80026c4 <main+0x140>)
 80025d4:	210a      	movs	r1, #10
 80025d6:	200a      	movs	r0, #10
 80025d8:	f00a fc72 	bl	800cec0 <OLED_ShowString>
  OLED_Refresh_Gram();
 80025dc:	f00a fafc 	bl	800cbd8 <OLED_Refresh_Gram>
  while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8)!=0);
 80025e0:	bf00      	nop
 80025e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80025e6:	4838      	ldr	r0, [pc, #224]	@ (80026c8 <main+0x144>)
 80025e8:	f002 fe44 	bl	8005274 <HAL_GPIO_ReadPin>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f7      	bne.n	80025e2 <main+0x5e>
  ICM20948_CalibrateAccel(&hi2c1, ACCEL_SENS, 250);
 80025f2:	22fa      	movs	r2, #250	@ 0xfa
 80025f4:	2100      	movs	r1, #0
 80025f6:	4832      	ldr	r0, [pc, #200]	@ (80026c0 <main+0x13c>)
 80025f8:	f007 fcd6 	bl	8009fa8 <ICM20948_CalibrateAccel>
  ICM20948_CalibrateGyro(&hi2c1,GYRO_SENS, 250);
 80025fc:	22fa      	movs	r2, #250	@ 0xfa
 80025fe:	2103      	movs	r1, #3
 8002600:	482f      	ldr	r0, [pc, #188]	@ (80026c0 <main+0x13c>)
 8002602:	f007 fc29 	bl	8009e58 <ICM20948_CalibrateGyro>

  HAL_TIM_Base_Start(&htim6);// for microseond delay
 8002606:	4831      	ldr	r0, [pc, #196]	@ (80026cc <main+0x148>)
 8002608:	f004 fb74 	bl	8006cf4 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);//Timer for ultra sonic
 800260c:	2100      	movs	r1, #0
 800260e:	4830      	ldr	r0, [pc, #192]	@ (80026d0 <main+0x14c>)
 8002610:	f004 fd54 	bl	80070bc <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart3,(uint8_t *)aRxBuffer,RECEIVE_BUFFER_SIZE);//Receive data from uart
 8002614:	2204      	movs	r2, #4
 8002616:	492f      	ldr	r1, [pc, #188]	@ (80026d4 <main+0x150>)
 8002618:	482f      	ldr	r0, [pc, #188]	@ (80026d8 <main+0x154>)
 800261a:	f006 f930 	bl	800887e <HAL_UART_Receive_IT>


  PID_Init(&LMotorPID, 5*100.0f, 15 *100.0f,0 , 0, -1000, 4000);
 800261e:	eddf 2a2f 	vldr	s5, [pc, #188]	@ 80026dc <main+0x158>
 8002622:	ed9f 2a2f 	vldr	s4, [pc, #188]	@ 80026e0 <main+0x15c>
 8002626:	eddf 1a2f 	vldr	s3, [pc, #188]	@ 80026e4 <main+0x160>
 800262a:	ed9f 1a2e 	vldr	s2, [pc, #184]	@ 80026e4 <main+0x160>
 800262e:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 80026e8 <main+0x164>
 8002632:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 80026ec <main+0x168>
 8002636:	482e      	ldr	r0, [pc, #184]	@ (80026f0 <main+0x16c>)
 8002638:	f7ff f82e 	bl	8001698 <PID_Init>
  PID_Init(&RMotorPID, 5*100.0f, 15 *100.0f,0 , 0, -1000, 4000);
 800263c:	eddf 2a27 	vldr	s5, [pc, #156]	@ 80026dc <main+0x158>
 8002640:	ed9f 2a27 	vldr	s4, [pc, #156]	@ 80026e0 <main+0x15c>
 8002644:	eddf 1a27 	vldr	s3, [pc, #156]	@ 80026e4 <main+0x160>
 8002648:	ed9f 1a26 	vldr	s2, [pc, #152]	@ 80026e4 <main+0x160>
 800264c:	eddf 0a26 	vldr	s1, [pc, #152]	@ 80026e8 <main+0x164>
 8002650:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 80026ec <main+0x168>
 8002654:	4827      	ldr	r0, [pc, #156]	@ (80026f4 <main+0x170>)
 8002656:	f7ff f81f 	bl	8001698 <PID_Init>
  Set_Motor_Direction(1,1);//Keep forget put lmao
 800265a:	2101      	movs	r1, #1
 800265c:	2001      	movs	r0, #1
 800265e:	f7ff f91f 	bl	80018a0 <Set_Motor_Direction>
  functionCheck();
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002662:	f007 fd39 	bl	800a0d8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002666:	4a24      	ldr	r2, [pc, #144]	@ (80026f8 <main+0x174>)
 8002668:	2100      	movs	r1, #0
 800266a:	4824      	ldr	r0, [pc, #144]	@ (80026fc <main+0x178>)
 800266c:	f007 fd7e 	bl	800a16c <osThreadNew>
 8002670:	4603      	mov	r3, r0
 8002672:	4a23      	ldr	r2, [pc, #140]	@ (8002700 <main+0x17c>)
 8002674:	6013      	str	r3, [r2, #0]

  /* creation of oledTask */
  oledTaskHandle = osThreadNew(StartOledTask, NULL, &oledTask_attributes);
 8002676:	4a23      	ldr	r2, [pc, #140]	@ (8002704 <main+0x180>)
 8002678:	2100      	movs	r1, #0
 800267a:	4823      	ldr	r0, [pc, #140]	@ (8002708 <main+0x184>)
 800267c:	f007 fd76 	bl	800a16c <osThreadNew>
 8002680:	4603      	mov	r3, r0
 8002682:	4a22      	ldr	r2, [pc, #136]	@ (800270c <main+0x188>)
 8002684:	6013      	str	r3, [r2, #0]

  /* creation of sensorTask */
  sensorTaskHandle = osThreadNew(Startsensor, NULL, &sensorTask_attributes);
 8002686:	4a22      	ldr	r2, [pc, #136]	@ (8002710 <main+0x18c>)
 8002688:	2100      	movs	r1, #0
 800268a:	4822      	ldr	r0, [pc, #136]	@ (8002714 <main+0x190>)
 800268c:	f007 fd6e 	bl	800a16c <osThreadNew>
 8002690:	4603      	mov	r3, r0
 8002692:	4a21      	ldr	r2, [pc, #132]	@ (8002718 <main+0x194>)
 8002694:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 8002696:	4a21      	ldr	r2, [pc, #132]	@ (800271c <main+0x198>)
 8002698:	2100      	movs	r1, #0
 800269a:	4821      	ldr	r0, [pc, #132]	@ (8002720 <main+0x19c>)
 800269c:	f007 fd66 	bl	800a16c <osThreadNew>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4a20      	ldr	r2, [pc, #128]	@ (8002724 <main+0x1a0>)
 80026a4:	6013      	str	r3, [r2, #0]

  /* creation of robotTask */
  robotTaskHandle = osThreadNew(startrobotTask, NULL, &robotTask_attributes);
 80026a6:	4a20      	ldr	r2, [pc, #128]	@ (8002728 <main+0x1a4>)
 80026a8:	2100      	movs	r1, #0
 80026aa:	4820      	ldr	r0, [pc, #128]	@ (800272c <main+0x1a8>)
 80026ac:	f007 fd5e 	bl	800a16c <osThreadNew>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002730 <main+0x1ac>)
 80026b4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80026b6:	f007 fd33 	bl	800a120 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80026ba:	bf00      	nop
 80026bc:	e7fd      	b.n	80026ba <main+0x136>
 80026be:	bf00      	nop
 80026c0:	200002cc 	.word	0x200002cc
 80026c4:	08010430 	.word	0x08010430
 80026c8:	40020c00 	.word	0x40020c00
 80026cc:	20000440 	.word	0x20000440
 80026d0:	200003f8 	.word	0x200003f8
 80026d4:	200005dc 	.word	0x200005dc
 80026d8:	200004d0 	.word	0x200004d0
 80026dc:	457a0000 	.word	0x457a0000
 80026e0:	c47a0000 	.word	0xc47a0000
 80026e4:	00000000 	.word	0x00000000
 80026e8:	44bb8000 	.word	0x44bb8000
 80026ec:	43fa0000 	.word	0x43fa0000
 80026f0:	2000057c 	.word	0x2000057c
 80026f4:	200005a4 	.word	0x200005a4
 80026f8:	080104d0 	.word	0x080104d0
 80026fc:	0800336d 	.word	0x0800336d
 8002700:	20000518 	.word	0x20000518
 8002704:	080104f4 	.word	0x080104f4
 8002708:	0800338d 	.word	0x0800338d
 800270c:	2000051c 	.word	0x2000051c
 8002710:	08010518 	.word	0x08010518
 8002714:	080034c1 	.word	0x080034c1
 8002718:	20000520 	.word	0x20000520
 800271c:	0801053c 	.word	0x0801053c
 8002720:	08003511 	.word	0x08003511
 8002724:	20000524 	.word	0x20000524
 8002728:	08010560 	.word	0x08010560
 800272c:	080037c9 	.word	0x080037c9
 8002730:	20000528 	.word	0x20000528

08002734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b094      	sub	sp, #80	@ 0x50
 8002738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800273a:	f107 0320 	add.w	r3, r7, #32
 800273e:	2230      	movs	r2, #48	@ 0x30
 8002740:	2100      	movs	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f00b fa93 	bl	800dc6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002748:	f107 030c 	add.w	r3, r7, #12
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002758:	2300      	movs	r3, #0
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	4b22      	ldr	r3, [pc, #136]	@ (80027e8 <SystemClock_Config+0xb4>)
 800275e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002760:	4a21      	ldr	r2, [pc, #132]	@ (80027e8 <SystemClock_Config+0xb4>)
 8002762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002766:	6413      	str	r3, [r2, #64]	@ 0x40
 8002768:	4b1f      	ldr	r3, [pc, #124]	@ (80027e8 <SystemClock_Config+0xb4>)
 800276a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002774:	2300      	movs	r3, #0
 8002776:	607b      	str	r3, [r7, #4]
 8002778:	4b1c      	ldr	r3, [pc, #112]	@ (80027ec <SystemClock_Config+0xb8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a1b      	ldr	r2, [pc, #108]	@ (80027ec <SystemClock_Config+0xb8>)
 800277e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	4b19      	ldr	r3, [pc, #100]	@ (80027ec <SystemClock_Config+0xb8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800278c:	607b      	str	r3, [r7, #4]
 800278e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002790:	2302      	movs	r3, #2
 8002792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002794:	2301      	movs	r3, #1
 8002796:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002798:	2310      	movs	r3, #16
 800279a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800279c:	2300      	movs	r3, #0
 800279e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027a0:	f107 0320 	add.w	r3, r7, #32
 80027a4:	4618      	mov	r0, r3
 80027a6:	f003 fdfd 	bl	80063a4 <HAL_RCC_OscConfig>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80027b0:	f001 f988 	bl	8003ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027b4:	230f      	movs	r3, #15
 80027b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80027c8:	f107 030c 	add.w	r3, r7, #12
 80027cc:	2100      	movs	r1, #0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f004 f860 	bl	8006894 <HAL_RCC_ClockConfig>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80027da:	f001 f973 	bl	8003ac4 <Error_Handler>
  }
}
 80027de:	bf00      	nop
 80027e0:	3750      	adds	r7, #80	@ 0x50
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40007000 	.word	0x40007000

080027f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80027f6:	463b      	mov	r3, r7
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002802:	4b21      	ldr	r3, [pc, #132]	@ (8002888 <MX_ADC1_Init+0x98>)
 8002804:	4a21      	ldr	r2, [pc, #132]	@ (800288c <MX_ADC1_Init+0x9c>)
 8002806:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002808:	4b1f      	ldr	r3, [pc, #124]	@ (8002888 <MX_ADC1_Init+0x98>)
 800280a:	2200      	movs	r2, #0
 800280c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800280e:	4b1e      	ldr	r3, [pc, #120]	@ (8002888 <MX_ADC1_Init+0x98>)
 8002810:	2200      	movs	r2, #0
 8002812:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002814:	4b1c      	ldr	r3, [pc, #112]	@ (8002888 <MX_ADC1_Init+0x98>)
 8002816:	2200      	movs	r2, #0
 8002818:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800281a:	4b1b      	ldr	r3, [pc, #108]	@ (8002888 <MX_ADC1_Init+0x98>)
 800281c:	2200      	movs	r2, #0
 800281e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002820:	4b19      	ldr	r3, [pc, #100]	@ (8002888 <MX_ADC1_Init+0x98>)
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002828:	4b17      	ldr	r3, [pc, #92]	@ (8002888 <MX_ADC1_Init+0x98>)
 800282a:	2200      	movs	r2, #0
 800282c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800282e:	4b16      	ldr	r3, [pc, #88]	@ (8002888 <MX_ADC1_Init+0x98>)
 8002830:	4a17      	ldr	r2, [pc, #92]	@ (8002890 <MX_ADC1_Init+0xa0>)
 8002832:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002834:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <MX_ADC1_Init+0x98>)
 8002836:	2200      	movs	r2, #0
 8002838:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800283a:	4b13      	ldr	r3, [pc, #76]	@ (8002888 <MX_ADC1_Init+0x98>)
 800283c:	2201      	movs	r2, #1
 800283e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002840:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <MX_ADC1_Init+0x98>)
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002848:	4b0f      	ldr	r3, [pc, #60]	@ (8002888 <MX_ADC1_Init+0x98>)
 800284a:	2201      	movs	r2, #1
 800284c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800284e:	480e      	ldr	r0, [pc, #56]	@ (8002888 <MX_ADC1_Init+0x98>)
 8002850:	f001 fdd0 	bl	80043f4 <HAL_ADC_Init>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800285a:	f001 f933 	bl	8003ac4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800285e:	2300      	movs	r3, #0
 8002860:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002862:	2301      	movs	r3, #1
 8002864:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800286a:	463b      	mov	r3, r7
 800286c:	4619      	mov	r1, r3
 800286e:	4806      	ldr	r0, [pc, #24]	@ (8002888 <MX_ADC1_Init+0x98>)
 8002870:	f001 ffa2 	bl	80047b8 <HAL_ADC_ConfigChannel>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800287a:	f001 f923 	bl	8003ac4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	2000023c 	.word	0x2000023c
 800288c:	40012000 	.word	0x40012000
 8002890:	0f000001 	.word	0x0f000001

08002894 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800289a:	463b      	mov	r3, r7
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80028a6:	4b21      	ldr	r3, [pc, #132]	@ (800292c <MX_ADC2_Init+0x98>)
 80028a8:	4a21      	ldr	r2, [pc, #132]	@ (8002930 <MX_ADC2_Init+0x9c>)
 80028aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80028ac:	4b1f      	ldr	r3, [pc, #124]	@ (800292c <MX_ADC2_Init+0x98>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80028b2:	4b1e      	ldr	r3, [pc, #120]	@ (800292c <MX_ADC2_Init+0x98>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80028b8:	4b1c      	ldr	r3, [pc, #112]	@ (800292c <MX_ADC2_Init+0x98>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80028be:	4b1b      	ldr	r3, [pc, #108]	@ (800292c <MX_ADC2_Init+0x98>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80028c4:	4b19      	ldr	r3, [pc, #100]	@ (800292c <MX_ADC2_Init+0x98>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028cc:	4b17      	ldr	r3, [pc, #92]	@ (800292c <MX_ADC2_Init+0x98>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028d2:	4b16      	ldr	r3, [pc, #88]	@ (800292c <MX_ADC2_Init+0x98>)
 80028d4:	4a17      	ldr	r2, [pc, #92]	@ (8002934 <MX_ADC2_Init+0xa0>)
 80028d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028d8:	4b14      	ldr	r3, [pc, #80]	@ (800292c <MX_ADC2_Init+0x98>)
 80028da:	2200      	movs	r2, #0
 80028dc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80028de:	4b13      	ldr	r3, [pc, #76]	@ (800292c <MX_ADC2_Init+0x98>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80028e4:	4b11      	ldr	r3, [pc, #68]	@ (800292c <MX_ADC2_Init+0x98>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028ec:	4b0f      	ldr	r3, [pc, #60]	@ (800292c <MX_ADC2_Init+0x98>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80028f2:	480e      	ldr	r0, [pc, #56]	@ (800292c <MX_ADC2_Init+0x98>)
 80028f4:	f001 fd7e 	bl	80043f4 <HAL_ADC_Init>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80028fe:	f001 f8e1 	bl	8003ac4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002902:	2301      	movs	r3, #1
 8002904:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002906:	2301      	movs	r3, #1
 8002908:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800290e:	463b      	mov	r3, r7
 8002910:	4619      	mov	r1, r3
 8002912:	4806      	ldr	r0, [pc, #24]	@ (800292c <MX_ADC2_Init+0x98>)
 8002914:	f001 ff50 	bl	80047b8 <HAL_ADC_ConfigChannel>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800291e:	f001 f8d1 	bl	8003ac4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000284 	.word	0x20000284
 8002930:	40012100 	.word	0x40012100
 8002934:	0f000001 	.word	0x0f000001

08002938 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800293c:	4b12      	ldr	r3, [pc, #72]	@ (8002988 <MX_I2C1_Init+0x50>)
 800293e:	4a13      	ldr	r2, [pc, #76]	@ (800298c <MX_I2C1_Init+0x54>)
 8002940:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002942:	4b11      	ldr	r3, [pc, #68]	@ (8002988 <MX_I2C1_Init+0x50>)
 8002944:	4a12      	ldr	r2, [pc, #72]	@ (8002990 <MX_I2C1_Init+0x58>)
 8002946:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002948:	4b0f      	ldr	r3, [pc, #60]	@ (8002988 <MX_I2C1_Init+0x50>)
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800294e:	4b0e      	ldr	r3, [pc, #56]	@ (8002988 <MX_I2C1_Init+0x50>)
 8002950:	2200      	movs	r2, #0
 8002952:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002954:	4b0c      	ldr	r3, [pc, #48]	@ (8002988 <MX_I2C1_Init+0x50>)
 8002956:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800295a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800295c:	4b0a      	ldr	r3, [pc, #40]	@ (8002988 <MX_I2C1_Init+0x50>)
 800295e:	2200      	movs	r2, #0
 8002960:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002962:	4b09      	ldr	r3, [pc, #36]	@ (8002988 <MX_I2C1_Init+0x50>)
 8002964:	2200      	movs	r2, #0
 8002966:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002968:	4b07      	ldr	r3, [pc, #28]	@ (8002988 <MX_I2C1_Init+0x50>)
 800296a:	2200      	movs	r2, #0
 800296c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800296e:	4b06      	ldr	r3, [pc, #24]	@ (8002988 <MX_I2C1_Init+0x50>)
 8002970:	2200      	movs	r2, #0
 8002972:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002974:	4804      	ldr	r0, [pc, #16]	@ (8002988 <MX_I2C1_Init+0x50>)
 8002976:	f002 fcc9 	bl	800530c <HAL_I2C_Init>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002980:	f001 f8a0 	bl	8003ac4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002984:	bf00      	nop
 8002986:	bd80      	pop	{r7, pc}
 8002988:	200002cc 	.word	0x200002cc
 800298c:	40005400 	.word	0x40005400
 8002990:	000186a0 	.word	0x000186a0

08002994 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b096      	sub	sp, #88	@ 0x58
 8002998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800299a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029a8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	605a      	str	r2, [r3, #4]
 80029bc:	609a      	str	r2, [r3, #8]
 80029be:	60da      	str	r2, [r3, #12]
 80029c0:	611a      	str	r2, [r3, #16]
 80029c2:	615a      	str	r2, [r3, #20]
 80029c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029c6:	1d3b      	adds	r3, r7, #4
 80029c8:	2220      	movs	r2, #32
 80029ca:	2100      	movs	r1, #0
 80029cc:	4618      	mov	r0, r3
 80029ce:	f00b f94e 	bl	800dc6e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029d2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ac8 <MX_TIM1_Init+0x134>)
 80029d4:	4a3d      	ldr	r2, [pc, #244]	@ (8002acc <MX_TIM1_Init+0x138>)
 80029d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80029d8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac8 <MX_TIM1_Init+0x134>)
 80029da:	22a0      	movs	r2, #160	@ 0xa0
 80029dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029de:	4b3a      	ldr	r3, [pc, #232]	@ (8002ac8 <MX_TIM1_Init+0x134>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80029e4:	4b38      	ldr	r3, [pc, #224]	@ (8002ac8 <MX_TIM1_Init+0x134>)
 80029e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ec:	4b36      	ldr	r3, [pc, #216]	@ (8002ac8 <MX_TIM1_Init+0x134>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029f2:	4b35      	ldr	r3, [pc, #212]	@ (8002ac8 <MX_TIM1_Init+0x134>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f8:	4b33      	ldr	r3, [pc, #204]	@ (8002ac8 <MX_TIM1_Init+0x134>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80029fe:	4832      	ldr	r0, [pc, #200]	@ (8002ac8 <MX_TIM1_Init+0x134>)
 8002a00:	f004 f928 	bl	8006c54 <HAL_TIM_Base_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002a0a:	f001 f85b 	bl	8003ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a12:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a14:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002a18:	4619      	mov	r1, r3
 8002a1a:	482b      	ldr	r0, [pc, #172]	@ (8002ac8 <MX_TIM1_Init+0x134>)
 8002a1c:	f004 fff8 	bl	8007a10 <HAL_TIM_ConfigClockSource>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002a26:	f001 f84d 	bl	8003ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a2a:	4827      	ldr	r0, [pc, #156]	@ (8002ac8 <MX_TIM1_Init+0x134>)
 8002a2c:	f004 f9ca 	bl	8006dc4 <HAL_TIM_PWM_Init>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002a36:	f001 f845 	bl	8003ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a42:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002a46:	4619      	mov	r1, r3
 8002a48:	481f      	ldr	r0, [pc, #124]	@ (8002ac8 <MX_TIM1_Init+0x134>)
 8002a4a:	f005 fd5b 	bl	8008504 <HAL_TIMEx_MasterConfigSynchronization>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002a54:	f001 f836 	bl	8003ac4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a58:	2360      	movs	r3, #96	@ 0x60
 8002a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a60:	2300      	movs	r3, #0
 8002a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a64:	2300      	movs	r3, #0
 8002a66:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a74:	220c      	movs	r2, #12
 8002a76:	4619      	mov	r1, r3
 8002a78:	4813      	ldr	r0, [pc, #76]	@ (8002ac8 <MX_TIM1_Init+0x134>)
 8002a7a:	f004 ff07 	bl	800788c <HAL_TIM_PWM_ConfigChannel>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002a84:	f001 f81e 	bl	8003ac4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002aa0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4807      	ldr	r0, [pc, #28]	@ (8002ac8 <MX_TIM1_Init+0x134>)
 8002aac:	f005 fda6 	bl	80085fc <HAL_TIMEx_ConfigBreakDeadTime>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8002ab6:	f001 f805 	bl	8003ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002aba:	4803      	ldr	r0, [pc, #12]	@ (8002ac8 <MX_TIM1_Init+0x134>)
 8002abc:	f001 fa3c 	bl	8003f38 <HAL_TIM_MspPostInit>

}
 8002ac0:	bf00      	nop
 8002ac2:	3758      	adds	r7, #88	@ 0x58
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20000320 	.word	0x20000320
 8002acc:	40010000 	.word	0x40010000

08002ad0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08c      	sub	sp, #48	@ 0x30
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ad6:	f107 030c 	add.w	r3, r7, #12
 8002ada:	2224      	movs	r2, #36	@ 0x24
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f00b f8c5 	bl	800dc6e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ae4:	1d3b      	adds	r3, r7, #4
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002aec:	4b21      	ldr	r3, [pc, #132]	@ (8002b74 <MX_TIM2_Init+0xa4>)
 8002aee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002af2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002af4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b74 <MX_TIM2_Init+0xa4>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002afa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b74 <MX_TIM2_Init+0xa4>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002b00:	4b1c      	ldr	r3, [pc, #112]	@ (8002b74 <MX_TIM2_Init+0xa4>)
 8002b02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b08:	4b1a      	ldr	r3, [pc, #104]	@ (8002b74 <MX_TIM2_Init+0xa4>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b0e:	4b19      	ldr	r3, [pc, #100]	@ (8002b74 <MX_TIM2_Init+0xa4>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b14:	2303      	movs	r3, #3
 8002b16:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002b24:	230a      	movs	r3, #10
 8002b26:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b30:	2300      	movs	r3, #0
 8002b32:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8002b34:	230a      	movs	r3, #10
 8002b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002b38:	f107 030c 	add.w	r3, r7, #12
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	480d      	ldr	r0, [pc, #52]	@ (8002b74 <MX_TIM2_Init+0xa4>)
 8002b40:	f004 fbe4 	bl	800730c <HAL_TIM_Encoder_Init>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002b4a:	f000 ffbb 	bl	8003ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b56:	1d3b      	adds	r3, r7, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4806      	ldr	r0, [pc, #24]	@ (8002b74 <MX_TIM2_Init+0xa4>)
 8002b5c:	f005 fcd2 	bl	8008504 <HAL_TIMEx_MasterConfigSynchronization>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002b66:	f000 ffad 	bl	8003ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b6a:	bf00      	nop
 8002b6c:	3730      	adds	r7, #48	@ 0x30
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000368 	.word	0x20000368

08002b78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08c      	sub	sp, #48	@ 0x30
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b7e:	f107 030c 	add.w	r3, r7, #12
 8002b82:	2224      	movs	r2, #36	@ 0x24
 8002b84:	2100      	movs	r1, #0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f00b f871 	bl	800dc6e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b8c:	1d3b      	adds	r3, r7, #4
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b94:	4b20      	ldr	r3, [pc, #128]	@ (8002c18 <MX_TIM3_Init+0xa0>)
 8002b96:	4a21      	ldr	r2, [pc, #132]	@ (8002c1c <MX_TIM3_Init+0xa4>)
 8002b98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8002c18 <MX_TIM3_Init+0xa0>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c18 <MX_TIM3_Init+0xa0>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c18 <MX_TIM3_Init+0xa0>)
 8002ba8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bae:	4b1a      	ldr	r3, [pc, #104]	@ (8002c18 <MX_TIM3_Init+0xa0>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bb4:	4b18      	ldr	r3, [pc, #96]	@ (8002c18 <MX_TIM3_Init+0xa0>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002bca:	230a      	movs	r3, #10
 8002bcc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8002bda:	230a      	movs	r3, #10
 8002bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002bde:	f107 030c 	add.w	r3, r7, #12
 8002be2:	4619      	mov	r1, r3
 8002be4:	480c      	ldr	r0, [pc, #48]	@ (8002c18 <MX_TIM3_Init+0xa0>)
 8002be6:	f004 fb91 	bl	800730c <HAL_TIM_Encoder_Init>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002bf0:	f000 ff68 	bl	8003ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bfc:	1d3b      	adds	r3, r7, #4
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4805      	ldr	r0, [pc, #20]	@ (8002c18 <MX_TIM3_Init+0xa0>)
 8002c02:	f005 fc7f 	bl	8008504 <HAL_TIMEx_MasterConfigSynchronization>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002c0c:	f000 ff5a 	bl	8003ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c10:	bf00      	nop
 8002c12:	3730      	adds	r7, #48	@ 0x30
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	200003b0 	.word	0x200003b0
 8002c1c:	40000400 	.word	0x40000400

08002c20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b08a      	sub	sp, #40	@ 0x28
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c26:	f107 0318 	add.w	r3, r7, #24
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	605a      	str	r2, [r3, #4]
 8002c30:	609a      	str	r2, [r3, #8]
 8002c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c34:	f107 0310 	add.w	r3, r7, #16
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c3e:	463b      	mov	r3, r7
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002cf8 <MX_TIM4_Init+0xd8>)
 8002c4c:	4a2b      	ldr	r2, [pc, #172]	@ (8002cfc <MX_TIM4_Init+0xdc>)
 8002c4e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8002c50:	4b29      	ldr	r3, [pc, #164]	@ (8002cf8 <MX_TIM4_Init+0xd8>)
 8002c52:	220f      	movs	r2, #15
 8002c54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c56:	4b28      	ldr	r3, [pc, #160]	@ (8002cf8 <MX_TIM4_Init+0xd8>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002c5c:	4b26      	ldr	r3, [pc, #152]	@ (8002cf8 <MX_TIM4_Init+0xd8>)
 8002c5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c62:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c64:	4b24      	ldr	r3, [pc, #144]	@ (8002cf8 <MX_TIM4_Init+0xd8>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c6a:	4b23      	ldr	r3, [pc, #140]	@ (8002cf8 <MX_TIM4_Init+0xd8>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002c70:	4821      	ldr	r0, [pc, #132]	@ (8002cf8 <MX_TIM4_Init+0xd8>)
 8002c72:	f003 ffef 	bl	8006c54 <HAL_TIM_Base_Init>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8002c7c:	f000 ff22 	bl	8003ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c84:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002c86:	f107 0318 	add.w	r3, r7, #24
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	481a      	ldr	r0, [pc, #104]	@ (8002cf8 <MX_TIM4_Init+0xd8>)
 8002c8e:	f004 febf 	bl	8007a10 <HAL_TIM_ConfigClockSource>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002c98:	f000 ff14 	bl	8003ac4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002c9c:	4816      	ldr	r0, [pc, #88]	@ (8002cf8 <MX_TIM4_Init+0xd8>)
 8002c9e:	f004 f9b3 	bl	8007008 <HAL_TIM_IC_Init>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002ca8:	f000 ff0c 	bl	8003ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cac:	2300      	movs	r3, #0
 8002cae:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cb4:	f107 0310 	add.w	r3, r7, #16
 8002cb8:	4619      	mov	r1, r3
 8002cba:	480f      	ldr	r0, [pc, #60]	@ (8002cf8 <MX_TIM4_Init+0xd8>)
 8002cbc:	f005 fc22 	bl	8008504 <HAL_TIMEx_MasterConfigSynchronization>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8002cc6:	f000 fefd 	bl	8003ac4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002cca:	230a      	movs	r3, #10
 8002ccc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002cda:	463b      	mov	r3, r7
 8002cdc:	2200      	movs	r2, #0
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4805      	ldr	r0, [pc, #20]	@ (8002cf8 <MX_TIM4_Init+0xd8>)
 8002ce2:	f004 fd37 	bl	8007754 <HAL_TIM_IC_ConfigChannel>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8002cec:	f000 feea 	bl	8003ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002cf0:	bf00      	nop
 8002cf2:	3728      	adds	r7, #40	@ 0x28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	200003f8 	.word	0x200003f8
 8002cfc:	40000800 	.word	0x40000800

08002d00 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d06:	463b      	mov	r3, r7
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002d0e:	4b15      	ldr	r3, [pc, #84]	@ (8002d64 <MX_TIM6_Init+0x64>)
 8002d10:	4a15      	ldr	r2, [pc, #84]	@ (8002d68 <MX_TIM6_Init+0x68>)
 8002d12:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 8002d14:	4b13      	ldr	r3, [pc, #76]	@ (8002d64 <MX_TIM6_Init+0x64>)
 8002d16:	220f      	movs	r2, #15
 8002d18:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d1a:	4b12      	ldr	r3, [pc, #72]	@ (8002d64 <MX_TIM6_Init+0x64>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002d20:	4b10      	ldr	r3, [pc, #64]	@ (8002d64 <MX_TIM6_Init+0x64>)
 8002d22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d26:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d28:	4b0e      	ldr	r3, [pc, #56]	@ (8002d64 <MX_TIM6_Init+0x64>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002d2e:	480d      	ldr	r0, [pc, #52]	@ (8002d64 <MX_TIM6_Init+0x64>)
 8002d30:	f003 ff90 	bl	8006c54 <HAL_TIM_Base_Init>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002d3a:	f000 fec3 	bl	8003ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d42:	2300      	movs	r3, #0
 8002d44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d46:	463b      	mov	r3, r7
 8002d48:	4619      	mov	r1, r3
 8002d4a:	4806      	ldr	r0, [pc, #24]	@ (8002d64 <MX_TIM6_Init+0x64>)
 8002d4c:	f005 fbda 	bl	8008504 <HAL_TIMEx_MasterConfigSynchronization>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002d56:	f000 feb5 	bl	8003ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000440 	.word	0x20000440
 8002d68:	40001000 	.word	0x40001000

08002d6c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b096      	sub	sp, #88	@ 0x58
 8002d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d72:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	605a      	str	r2, [r3, #4]
 8002d7c:	609a      	str	r2, [r3, #8]
 8002d7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d80:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	609a      	str	r2, [r3, #8]
 8002d96:	60da      	str	r2, [r3, #12]
 8002d98:	611a      	str	r2, [r3, #16]
 8002d9a:	615a      	str	r2, [r3, #20]
 8002d9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d9e:	1d3b      	adds	r3, r7, #4
 8002da0:	2220      	movs	r2, #32
 8002da2:	2100      	movs	r1, #0
 8002da4:	4618      	mov	r0, r3
 8002da6:	f00a ff62 	bl	800dc6e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002daa:	4b43      	ldr	r3, [pc, #268]	@ (8002eb8 <MX_TIM8_Init+0x14c>)
 8002dac:	4a43      	ldr	r2, [pc, #268]	@ (8002ebc <MX_TIM8_Init+0x150>)
 8002dae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002db0:	4b41      	ldr	r3, [pc, #260]	@ (8002eb8 <MX_TIM8_Init+0x14c>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db6:	4b40      	ldr	r3, [pc, #256]	@ (8002eb8 <MX_TIM8_Init+0x14c>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8002dbc:	4b3e      	ldr	r3, [pc, #248]	@ (8002eb8 <MX_TIM8_Init+0x14c>)
 8002dbe:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002dc2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dc4:	4b3c      	ldr	r3, [pc, #240]	@ (8002eb8 <MX_TIM8_Init+0x14c>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002dca:	4b3b      	ldr	r3, [pc, #236]	@ (8002eb8 <MX_TIM8_Init+0x14c>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dd0:	4b39      	ldr	r3, [pc, #228]	@ (8002eb8 <MX_TIM8_Init+0x14c>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002dd6:	4838      	ldr	r0, [pc, #224]	@ (8002eb8 <MX_TIM8_Init+0x14c>)
 8002dd8:	f003 ff3c 	bl	8006c54 <HAL_TIM_Base_Init>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002de2:	f000 fe6f 	bl	8003ac4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002de6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002dec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002df0:	4619      	mov	r1, r3
 8002df2:	4831      	ldr	r0, [pc, #196]	@ (8002eb8 <MX_TIM8_Init+0x14c>)
 8002df4:	f004 fe0c 	bl	8007a10 <HAL_TIM_ConfigClockSource>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002dfe:	f000 fe61 	bl	8003ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002e02:	482d      	ldr	r0, [pc, #180]	@ (8002eb8 <MX_TIM8_Init+0x14c>)
 8002e04:	f003 ffde 	bl	8006dc4 <HAL_TIM_PWM_Init>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002e0e:	f000 fe59 	bl	8003ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e12:	2300      	movs	r3, #0
 8002e14:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e16:	2300      	movs	r3, #0
 8002e18:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002e1a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4825      	ldr	r0, [pc, #148]	@ (8002eb8 <MX_TIM8_Init+0x14c>)
 8002e22:	f005 fb6f 	bl	8008504 <HAL_TIMEx_MasterConfigSynchronization>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002e2c:	f000 fe4a 	bl	8003ac4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e30:	2360      	movs	r3, #96	@ 0x60
 8002e32:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e40:	2300      	movs	r3, #0
 8002e42:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e44:	2300      	movs	r3, #0
 8002e46:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e50:	2200      	movs	r2, #0
 8002e52:	4619      	mov	r1, r3
 8002e54:	4818      	ldr	r0, [pc, #96]	@ (8002eb8 <MX_TIM8_Init+0x14c>)
 8002e56:	f004 fd19 	bl	800788c <HAL_TIM_PWM_ConfigChannel>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002e60:	f000 fe30 	bl	8003ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e68:	2204      	movs	r2, #4
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4812      	ldr	r0, [pc, #72]	@ (8002eb8 <MX_TIM8_Init+0x14c>)
 8002e6e:	f004 fd0d 	bl	800788c <HAL_TIM_PWM_ConfigChannel>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002e78:	f000 fe24 	bl	8003ac4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e84:	2300      	movs	r3, #0
 8002e86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e96:	2300      	movs	r3, #0
 8002e98:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4806      	ldr	r0, [pc, #24]	@ (8002eb8 <MX_TIM8_Init+0x14c>)
 8002ea0:	f005 fbac 	bl	80085fc <HAL_TIMEx_ConfigBreakDeadTime>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8002eaa:	f000 fe0b 	bl	8003ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002eae:	bf00      	nop
 8002eb0:	3758      	adds	r7, #88	@ 0x58
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000488 	.word	0x20000488
 8002ebc:	40010400 	.word	0x40010400

08002ec0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ec4:	4b11      	ldr	r3, [pc, #68]	@ (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002ec6:	4a12      	ldr	r2, [pc, #72]	@ (8002f10 <MX_USART3_UART_Init+0x50>)
 8002ec8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002eca:	4b10      	ldr	r3, [pc, #64]	@ (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002ecc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ed0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ede:	4b0b      	ldr	r3, [pc, #44]	@ (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ee4:	4b09      	ldr	r3, [pc, #36]	@ (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002ee6:	220c      	movs	r2, #12
 8002ee8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eea:	4b08      	ldr	r3, [pc, #32]	@ (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef0:	4b06      	ldr	r3, [pc, #24]	@ (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ef6:	4805      	ldr	r0, [pc, #20]	@ (8002f0c <MX_USART3_UART_Init+0x4c>)
 8002ef8:	f005 fbe6 	bl	80086c8 <HAL_UART_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f02:	f000 fddf 	bl	8003ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	200004d0 	.word	0x200004d0
 8002f10:	40004800 	.word	0x40004800

08002f14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08a      	sub	sp, #40	@ 0x28
 8002f18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1a:	f107 0314 	add.w	r3, r7, #20
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	609a      	str	r2, [r3, #8]
 8002f26:	60da      	str	r2, [r3, #12]
 8002f28:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	4b3e      	ldr	r3, [pc, #248]	@ (8003028 <MX_GPIO_Init+0x114>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	4a3d      	ldr	r2, [pc, #244]	@ (8003028 <MX_GPIO_Init+0x114>)
 8002f34:	f043 0310 	orr.w	r3, r3, #16
 8002f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f3a:	4b3b      	ldr	r3, [pc, #236]	@ (8003028 <MX_GPIO_Init+0x114>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	4b37      	ldr	r3, [pc, #220]	@ (8003028 <MX_GPIO_Init+0x114>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4e:	4a36      	ldr	r2, [pc, #216]	@ (8003028 <MX_GPIO_Init+0x114>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f56:	4b34      	ldr	r3, [pc, #208]	@ (8003028 <MX_GPIO_Init+0x114>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	4b30      	ldr	r3, [pc, #192]	@ (8003028 <MX_GPIO_Init+0x114>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f6a:	4a2f      	ldr	r2, [pc, #188]	@ (8003028 <MX_GPIO_Init+0x114>)
 8002f6c:	f043 0308 	orr.w	r3, r3, #8
 8002f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f72:	4b2d      	ldr	r3, [pc, #180]	@ (8003028 <MX_GPIO_Init+0x114>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	4b29      	ldr	r3, [pc, #164]	@ (8003028 <MX_GPIO_Init+0x114>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f86:	4a28      	ldr	r2, [pc, #160]	@ (8003028 <MX_GPIO_Init+0x114>)
 8002f88:	f043 0304 	orr.w	r3, r3, #4
 8002f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f8e:	4b26      	ldr	r3, [pc, #152]	@ (8003028 <MX_GPIO_Init+0x114>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	607b      	str	r3, [r7, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	603b      	str	r3, [r7, #0]
 8002f9e:	4b22      	ldr	r3, [pc, #136]	@ (8003028 <MX_GPIO_Init+0x114>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa2:	4a21      	ldr	r2, [pc, #132]	@ (8003028 <MX_GPIO_Init+0x114>)
 8002fa4:	f043 0302 	orr.w	r3, r3, #2
 8002fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002faa:	4b1f      	ldr	r3, [pc, #124]	@ (8003028 <MX_GPIO_Init+0x114>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8002fbc:	481b      	ldr	r0, [pc, #108]	@ (800302c <MX_GPIO_Init+0x118>)
 8002fbe:	f002 f971 	bl	80052a4 <HAL_GPIO_WritePin>
                          |TRIG_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	213c      	movs	r1, #60	@ 0x3c
 8002fc6:	481a      	ldr	r0, [pc, #104]	@ (8003030 <MX_GPIO_Init+0x11c>)
 8002fc8:	f002 f96c 	bl	80052a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           TRIG_Pin LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8002fcc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002fd0:	617b      	str	r3, [r7, #20]
                          |TRIG_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fde:	f107 0314 	add.w	r3, r7, #20
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4811      	ldr	r0, [pc, #68]	@ (800302c <MX_GPIO_Init+0x118>)
 8002fe6:	f001 ffa9 	bl	8004f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8002fea:	233c      	movs	r3, #60	@ 0x3c
 8002fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffa:	f107 0314 	add.w	r3, r7, #20
 8002ffe:	4619      	mov	r1, r3
 8003000:	480b      	ldr	r0, [pc, #44]	@ (8003030 <MX_GPIO_Init+0x11c>)
 8003002:	f001 ff9b 	bl	8004f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003006:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800300a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800300c:	2300      	movs	r3, #0
 800300e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	2300      	movs	r3, #0
 8003012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003014:	f107 0314 	add.w	r3, r7, #20
 8003018:	4619      	mov	r1, r3
 800301a:	4806      	ldr	r0, [pc, #24]	@ (8003034 <MX_GPIO_Init+0x120>)
 800301c:	f001 ff8e 	bl	8004f3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003020:	bf00      	nop
 8003022:	3728      	adds	r7, #40	@ 0x28
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40023800 	.word	0x40023800
 800302c:	40021000 	.word	0x40021000
 8003030:	40020000 	.word	0x40020000
 8003034:	40020c00 	.word	0x40020c00

08003038 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//Interrupt Serial callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af02      	add	r7, sp, #8
 800303e:	6078      	str	r0, [r7, #4]
	//prevent unused argument
	UNUSED(huart);
	 snprintf(buf,sizeof(buf),"%5.2f",g_distanceUS);
 8003040:	4b16      	ldr	r3, [pc, #88]	@ (800309c <HAL_UART_RxCpltCallback+0x64>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7fd fa7f 	bl	8000548 <__aeabi_f2d>
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	e9cd 2300 	strd	r2, r3, [sp]
 8003052:	4a13      	ldr	r2, [pc, #76]	@ (80030a0 <HAL_UART_RxCpltCallback+0x68>)
 8003054:	2105      	movs	r1, #5
 8003056:	4813      	ldr	r0, [pc, #76]	@ (80030a4 <HAL_UART_RxCpltCallback+0x6c>)
 8003058:	f00a fd92 	bl	800db80 <sniprintf>
	 if (strncmp(aRxBuffer, "RUSD",4) == 0)
 800305c:	2204      	movs	r2, #4
 800305e:	4912      	ldr	r1, [pc, #72]	@ (80030a8 <HAL_UART_RxCpltCallback+0x70>)
 8003060:	4812      	ldr	r0, [pc, #72]	@ (80030ac <HAL_UART_RxCpltCallback+0x74>)
 8003062:	f00a fe0c 	bl	800dc7e <strncmp>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d106      	bne.n	800307a <HAL_UART_RxCpltCallback+0x42>
	   {
		HAL_UART_Transmit(&huart3, (uint8_t*)buf,5,0XFFFF);
 800306c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003070:	2205      	movs	r2, #5
 8003072:	490c      	ldr	r1, [pc, #48]	@ (80030a4 <HAL_UART_RxCpltCallback+0x6c>)
 8003074:	480e      	ldr	r0, [pc, #56]	@ (80030b0 <HAL_UART_RxCpltCallback+0x78>)
 8003076:	f005 fb77 	bl	8008768 <HAL_UART_Transmit>
	    }
	//HAL_UART_Transmit(&huart3,(uint8_t *)aRxBuffer,4,0xFFFF);
	 if(flagReceived !=1){
 800307a:	4b0e      	ldr	r3, [pc, #56]	@ (80030b4 <HAL_UART_RxCpltCallback+0x7c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d007      	beq.n	8003092 <HAL_UART_RxCpltCallback+0x5a>
			flagReceived=1;
 8003082:	4b0c      	ldr	r3, [pc, #48]	@ (80030b4 <HAL_UART_RxCpltCallback+0x7c>)
 8003084:	2201      	movs	r2, #1
 8003086:	601a      	str	r2, [r3, #0]
			 HAL_UART_Receive_IT(&huart3,(uint8_t *)aRxBuffer,RECEIVE_BUFFER_SIZE);
 8003088:	2204      	movs	r2, #4
 800308a:	4908      	ldr	r1, [pc, #32]	@ (80030ac <HAL_UART_RxCpltCallback+0x74>)
 800308c:	4808      	ldr	r0, [pc, #32]	@ (80030b0 <HAL_UART_RxCpltCallback+0x78>)
 800308e:	f005 fbf6 	bl	800887e <HAL_UART_Receive_IT>

	 }
	// servo_pwm  = atoi(aRxBuffer);
	//memset(aRxBuffer,0,sizeof(aRxBuffer));

}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000538 	.word	0x20000538
 80030a0:	08010440 	.word	0x08010440
 80030a4:	200005e0 	.word	0x200005e0
 80030a8:	08010448 	.word	0x08010448
 80030ac:	200005dc 	.word	0x200005dc
 80030b0:	200004d0 	.word	0x200004d0
 80030b4:	2000022c 	.word	0x2000022c

080030b8 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
	//timer 3 for the ultrasonic echo
if(htim==&htim4)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a41      	ldr	r2, [pc, #260]	@ (80031c8 <HAL_TIM_IC_CaptureCallback+0x110>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d174      	bne.n	80031b2 <HAL_TIM_IC_CaptureCallback+0xfa>
{
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12)==1)//rising edge
 80030c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030cc:	483f      	ldr	r0, [pc, #252]	@ (80031cc <HAL_TIM_IC_CaptureCallback+0x114>)
 80030ce:	f002 f8d1 	bl	8005274 <HAL_GPIO_ReadPin>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d108      	bne.n	80030ea <HAL_TIM_IC_CaptureCallback+0x32>
	{
		tc1=HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80030d8:	2100      	movs	r1, #0
 80030da:	483b      	ldr	r0, [pc, #236]	@ (80031c8 <HAL_TIM_IC_CaptureCallback+0x110>)
 80030dc:	f004 fd60 	bl	8007ba0 <HAL_TIM_ReadCapturedValue>
 80030e0:	4603      	mov	r3, r0
 80030e2:	461a      	mov	r2, r3
 80030e4:	4b3a      	ldr	r3, [pc, #232]	@ (80031d0 <HAL_TIM_IC_CaptureCallback+0x118>)
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	e01e      	b.n	8003128 <HAL_TIM_IC_CaptureCallback+0x70>

	}
	else
	{
		tc2=HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80030ea:	2100      	movs	r1, #0
 80030ec:	4836      	ldr	r0, [pc, #216]	@ (80031c8 <HAL_TIM_IC_CaptureCallback+0x110>)
 80030ee:	f004 fd57 	bl	8007ba0 <HAL_TIM_ReadCapturedValue>
 80030f2:	4603      	mov	r3, r0
 80030f4:	461a      	mov	r2, r3
 80030f6:	4b37      	ldr	r3, [pc, #220]	@ (80031d4 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80030f8:	601a      	str	r2, [r3, #0]
		if(tc2>tc1)
 80030fa:	4b36      	ldr	r3, [pc, #216]	@ (80031d4 <HAL_TIM_IC_CaptureCallback+0x11c>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	4b34      	ldr	r3, [pc, #208]	@ (80031d0 <HAL_TIM_IC_CaptureCallback+0x118>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	dd07      	ble.n	8003116 <HAL_TIM_IC_CaptureCallback+0x5e>
			echo = (tc2-tc1);
 8003106:	4b33      	ldr	r3, [pc, #204]	@ (80031d4 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	4b31      	ldr	r3, [pc, #196]	@ (80031d0 <HAL_TIM_IC_CaptureCallback+0x118>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	4a31      	ldr	r2, [pc, #196]	@ (80031d8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	e008      	b.n	8003128 <HAL_TIM_IC_CaptureCallback+0x70>
		else //tc2 overflow
			echo=((65536-tc1)+tc2);
 8003116:	4b2e      	ldr	r3, [pc, #184]	@ (80031d0 <HAL_TIM_IC_CaptureCallback+0x118>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 800311e:	4b2d      	ldr	r3, [pc, #180]	@ (80031d4 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4413      	add	r3, r2
 8003124:	4a2c      	ldr	r2, [pc, #176]	@ (80031d8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8003126:	6013      	str	r3, [r2, #0]
	}g_distanceUS = (tc2 > tc1 ? (tc2 - tc1) : (65535 - tc1 + tc2)) * 0.034 / 2;
 8003128:	4b2a      	ldr	r3, [pc, #168]	@ (80031d4 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4b28      	ldr	r3, [pc, #160]	@ (80031d0 <HAL_TIM_IC_CaptureCallback+0x118>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	429a      	cmp	r2, r3
 8003132:	dd08      	ble.n	8003146 <HAL_TIM_IC_CaptureCallback+0x8e>
 8003134:	4b27      	ldr	r3, [pc, #156]	@ (80031d4 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b25      	ldr	r3, [pc, #148]	@ (80031d0 <HAL_TIM_IC_CaptureCallback+0x118>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	4618      	mov	r0, r3
 8003140:	f7fd f9f0 	bl	8000524 <__aeabi_i2d>
 8003144:	e00a      	b.n	800315c <HAL_TIM_IC_CaptureCallback+0xa4>
 8003146:	4b22      	ldr	r3, [pc, #136]	@ (80031d0 <HAL_TIM_IC_CaptureCallback+0x118>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 800314e:	33ff      	adds	r3, #255	@ 0xff
 8003150:	4a20      	ldr	r2, [pc, #128]	@ (80031d4 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	4413      	add	r3, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f7fd f9e4 	bl	8000524 <__aeabi_i2d>
 800315c:	a318      	add	r3, pc, #96	@ (adr r3, 80031c0 <HAL_TIM_IC_CaptureCallback+0x108>)
 800315e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003162:	f7fd fa49 	bl	80005f8 <__aeabi_dmul>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4610      	mov	r0, r2
 800316c:	4619      	mov	r1, r3
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003176:	f7fd fb69 	bl	800084c <__aeabi_ddiv>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4610      	mov	r0, r2
 8003180:	4619      	mov	r1, r3
 8003182:	f7fd fd31 	bl	8000be8 <__aeabi_d2f>
 8003186:	4603      	mov	r3, r0
 8003188:	4a14      	ldr	r2, [pc, #80]	@ (80031dc <HAL_TIM_IC_CaptureCallback+0x124>)
 800318a:	6013      	str	r3, [r2, #0]
	if(g_distanceUS>400)
 800318c:	4b13      	ldr	r3, [pc, #76]	@ (80031dc <HAL_TIM_IC_CaptureCallback+0x124>)
 800318e:	edd3 7a00 	vldr	s15, [r3]
 8003192:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80031e0 <HAL_TIM_IC_CaptureCallback+0x128>
 8003196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800319a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319e:	dd04      	ble.n	80031aa <HAL_TIM_IC_CaptureCallback+0xf2>
	{
		g_distanceUS=last_valid;
 80031a0:	4b10      	ldr	r3, [pc, #64]	@ (80031e4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0d      	ldr	r2, [pc, #52]	@ (80031dc <HAL_TIM_IC_CaptureCallback+0x124>)
 80031a6:	6013      	str	r3, [r2, #0]
	else{
		last_valid=g_distanceUS;
	}
}

}
 80031a8:	e003      	b.n	80031b2 <HAL_TIM_IC_CaptureCallback+0xfa>
		last_valid=g_distanceUS;
 80031aa:	4b0c      	ldr	r3, [pc, #48]	@ (80031dc <HAL_TIM_IC_CaptureCallback+0x124>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a0d      	ldr	r2, [pc, #52]	@ (80031e4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80031b0:	6013      	str	r3, [r2, #0]
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	f3af 8000 	nop.w
 80031c0:	b020c49c 	.word	0xb020c49c
 80031c4:	3fa16872 	.word	0x3fa16872
 80031c8:	200003f8 	.word	0x200003f8
 80031cc:	40020c00 	.word	0x40020c00
 80031d0:	2000052c 	.word	0x2000052c
 80031d4:	20000530 	.word	0x20000530
 80031d8:	20000534 	.word	0x20000534
 80031dc:	20000538 	.word	0x20000538
 80031e0:	43c80000 	.word	0x43c80000
 80031e4:	2000053c 	.word	0x2000053c

080031e8 <IR_Left_Read>:
void IR_Left_Read() {
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 80031ec:	481e      	ldr	r0, [pc, #120]	@ (8003268 <IR_Left_Read+0x80>)
 80031ee:	f001 f945 	bl	800447c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 10);
 80031f2:	210a      	movs	r1, #10
 80031f4:	481c      	ldr	r0, [pc, #112]	@ (8003268 <IR_Left_Read+0x80>)
 80031f6:	f001 fa46 	bl	8004686 <HAL_ADC_PollForConversion>
	iDistanceL = HAL_ADC_GetValue(&hadc2);
 80031fa:	481b      	ldr	r0, [pc, #108]	@ (8003268 <IR_Left_Read+0x80>)
 80031fc:	f001 face 	bl	800479c <HAL_ADC_GetValue>
 8003200:	4603      	mov	r3, r0
 8003202:	b29a      	uxth	r2, r3
 8003204:	4b19      	ldr	r3, [pc, #100]	@ (800326c <IR_Left_Read+0x84>)
 8003206:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 8003208:	4817      	ldr	r0, [pc, #92]	@ (8003268 <IR_Left_Read+0x80>)
 800320a:	f001 fa09 	bl	8004620 <HAL_ADC_Stop>

//	filtered_irreading = (FILTER_ALPHA2 * iDistanceL) + ((1 - FILTER_ALPHA2) * filtered_irreading);
//	filtered_irreading_int = (int) filtered_irreading;
	//iDistanceL=(int)pow(10, -1.754*(log10((float) iDistanceL))+7.064);
	iDistanceL=(int)(iDistanceL*-4.286e-03)+2.189e+01;
 800320e:	4b17      	ldr	r3, [pc, #92]	@ (800326c <IR_Left_Read+0x84>)
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7fd f986 	bl	8000524 <__aeabi_i2d>
 8003218:	a30f      	add	r3, pc, #60	@ (adr r3, 8003258 <IR_Left_Read+0x70>)
 800321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321e:	f7fd f9eb 	bl	80005f8 <__aeabi_dmul>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4610      	mov	r0, r2
 8003228:	4619      	mov	r1, r3
 800322a:	f7fd fc95 	bl	8000b58 <__aeabi_d2iz>
 800322e:	4603      	mov	r3, r0
 8003230:	4618      	mov	r0, r3
 8003232:	f7fd f977 	bl	8000524 <__aeabi_i2d>
 8003236:	a30a      	add	r3, pc, #40	@ (adr r3, 8003260 <IR_Left_Read+0x78>)
 8003238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323c:	f7fd f826 	bl	800028c <__adddf3>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4610      	mov	r0, r2
 8003246:	4619      	mov	r1, r3
 8003248:	f7fd fcae 	bl	8000ba8 <__aeabi_d2uiz>
 800324c:	4603      	mov	r3, r0
 800324e:	b29a      	uxth	r2, r3
 8003250:	4b06      	ldr	r3, [pc, #24]	@ (800326c <IR_Left_Read+0x84>)
 8003252:	801a      	strh	r2, [r3, #0]
}
 8003254:	bf00      	nop
 8003256:	bd80      	pop	{r7, pc}
 8003258:	5d4a5df2 	.word	0x5d4a5df2
 800325c:	bf718e32 	.word	0xbf718e32
 8003260:	0a3d70a4 	.word	0x0a3d70a4
 8003264:	4035e3d7 	.word	0x4035e3d7
 8003268:	20000284 	.word	0x20000284
 800326c:	200005e6 	.word	0x200005e6

08003270 <IR_Right_Read>:

void IR_Right_Read() {
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8003274:	481e      	ldr	r0, [pc, #120]	@ (80032f0 <IR_Right_Read+0x80>)
 8003276:	f001 f901 	bl	800447c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 800327a:	210a      	movs	r1, #10
 800327c:	481c      	ldr	r0, [pc, #112]	@ (80032f0 <IR_Right_Read+0x80>)
 800327e:	f001 fa02 	bl	8004686 <HAL_ADC_PollForConversion>
	iDistanceR = HAL_ADC_GetValue(&hadc1);
 8003282:	481b      	ldr	r0, [pc, #108]	@ (80032f0 <IR_Right_Read+0x80>)
 8003284:	f001 fa8a 	bl	800479c <HAL_ADC_GetValue>
 8003288:	4603      	mov	r3, r0
 800328a:	b29a      	uxth	r2, r3
 800328c:	4b19      	ldr	r3, [pc, #100]	@ (80032f4 <IR_Right_Read+0x84>)
 800328e:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8003290:	4817      	ldr	r0, [pc, #92]	@ (80032f0 <IR_Right_Read+0x80>)
 8003292:	f001 f9c5 	bl	8004620 <HAL_ADC_Stop>
	iDistanceR=(int)(iDistanceR*-4.286e-03)+2.189e+01;
 8003296:	4b17      	ldr	r3, [pc, #92]	@ (80032f4 <IR_Right_Read+0x84>)
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7fd f942 	bl	8000524 <__aeabi_i2d>
 80032a0:	a30f      	add	r3, pc, #60	@ (adr r3, 80032e0 <IR_Right_Read+0x70>)
 80032a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a6:	f7fd f9a7 	bl	80005f8 <__aeabi_dmul>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4610      	mov	r0, r2
 80032b0:	4619      	mov	r1, r3
 80032b2:	f7fd fc51 	bl	8000b58 <__aeabi_d2iz>
 80032b6:	4603      	mov	r3, r0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7fd f933 	bl	8000524 <__aeabi_i2d>
 80032be:	a30a      	add	r3, pc, #40	@ (adr r3, 80032e8 <IR_Right_Read+0x78>)
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f7fc ffe2 	bl	800028c <__adddf3>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4610      	mov	r0, r2
 80032ce:	4619      	mov	r1, r3
 80032d0:	f7fd fc6a 	bl	8000ba8 <__aeabi_d2uiz>
 80032d4:	4603      	mov	r3, r0
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	4b06      	ldr	r3, [pc, #24]	@ (80032f4 <IR_Right_Read+0x84>)
 80032da:	801a      	strh	r2, [r3, #0]
}
 80032dc:	bf00      	nop
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	5d4a5df2 	.word	0x5d4a5df2
 80032e4:	bf718e32 	.word	0xbf718e32
 80032e8:	0a3d70a4 	.word	0x0a3d70a4
 80032ec:	4035e3d7 	.word	0x4035e3d7
 80032f0:	2000023c 	.word	0x2000023c
 80032f4:	200005e8 	.word	0x200005e8

080032f8 <Motor_Stop>:

void Motor_Stop()
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
	resetYaw();
 80032fc:	f7fe fb22 	bl	8001944 <resetYaw>
	  PID_Reset(&LMotorPID);
 8003300:	4813      	ldr	r0, [pc, #76]	@ (8003350 <Motor_Stop+0x58>)
 8003302:	f7fe fab3 	bl	800186c <PID_Reset>
	  PID_Reset(&RMotorPID);
 8003306:	4813      	ldr	r0, [pc, #76]	@ (8003354 <Motor_Stop+0x5c>)
 8003308:	f7fe fab0 	bl	800186c <PID_Reset>
	degree=0;
 800330c:	4b12      	ldr	r3, [pc, #72]	@ (8003358 <Motor_Stop+0x60>)
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
	distanceTraveled=0;
 8003314:	4b11      	ldr	r3, [pc, #68]	@ (800335c <Motor_Stop+0x64>)
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
    pwmValL = 0;
 800331c:	4b10      	ldr	r3, [pc, #64]	@ (8003360 <Motor_Stop+0x68>)
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
    pwmValR = 0;
 8003322:	4b10      	ldr	r3, [pc, #64]	@ (8003364 <Motor_Stop+0x6c>)
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValL); // Stop left motor
 8003328:	4b0d      	ldr	r3, [pc, #52]	@ (8003360 <Motor_Stop+0x68>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	4b0e      	ldr	r3, [pc, #56]	@ (8003368 <Motor_Stop+0x70>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmValR); // Stop right motor
 8003332:	4b0c      	ldr	r3, [pc, #48]	@ (8003364 <Motor_Stop+0x6c>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	4b0c      	ldr	r3, [pc, #48]	@ (8003368 <Motor_Stop+0x70>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	639a      	str	r2, [r3, #56]	@ 0x38
	set_servo_angle(Center);
 800333c:	205f      	movs	r0, #95	@ 0x5f
 800333e:	f7ff f8fd 	bl	800253c <set_servo_angle>
	osDelay(1000);
 8003342:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003346:	f006 ffa3 	bl	800a290 <osDelay>
	//reset_gyro_at_rest();
  //  count++;
}
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	2000057c 	.word	0x2000057c
 8003354:	200005a4 	.word	0x200005a4
 8003358:	200005d4 	.word	0x200005d4
 800335c:	20000220 	.word	0x20000220
 8003360:	200005cc 	.word	0x200005cc
 8003364:	200005d0 	.word	0x200005d0
 8003368:	20000488 	.word	0x20000488

0800336c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  	  HAL_GPIO_TogglePin(GPIOE,LED3_Pin);
 8003374:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003378:	4803      	ldr	r0, [pc, #12]	@ (8003388 <StartDefaultTask+0x1c>)
 800337a:	f001 ffac 	bl	80052d6 <HAL_GPIO_TogglePin>
    osDelay(150);
 800337e:	2096      	movs	r0, #150	@ 0x96
 8003380:	f006 ff86 	bl	800a290 <osDelay>
	  	  HAL_GPIO_TogglePin(GPIOE,LED3_Pin);
 8003384:	bf00      	nop
 8003386:	e7f5      	b.n	8003374 <StartDefaultTask+0x8>
 8003388:	40021000 	.word	0x40021000

0800338c <StartOledTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOledTask */
void StartOledTask(void *argument)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b096      	sub	sp, #88	@ 0x58
 8003390:	af02      	add	r7, sp, #8
 8003392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledTask */
	char text[16]={};
 8003394:	2300      	movs	r3, #0
 8003396:	643b      	str	r3, [r7, #64]	@ 0x40
 8003398:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	609a      	str	r2, [r3, #8]
	char temp[50]={};
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	f107 0310 	add.w	r3, r7, #16
 80033ac:	222e      	movs	r2, #46	@ 0x2e
 80033ae:	2100      	movs	r1, #0
 80033b0:	4618      	mov	r0, r3
 80033b2:	f00a fc5c 	bl	800dc6e <memset>
//	RMotorPID.setpoint = 1;

  /* Infinite loop */
  for(;;)
  {
		snprintf(text, sizeof(text), "DistanceIRR:%d m", iDistanceR);
 80033b6:	4b37      	ldr	r3, [pc, #220]	@ (8003494 <StartOledTask+0x108>)
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80033be:	4a36      	ldr	r2, [pc, #216]	@ (8003498 <StartOledTask+0x10c>)
 80033c0:	2110      	movs	r1, #16
 80033c2:	f00a fbdd 	bl	800db80 <sniprintf>
		OLED_ShowString(10, 40, text);
 80033c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80033ca:	461a      	mov	r2, r3
 80033cc:	2128      	movs	r1, #40	@ 0x28
 80033ce:	200a      	movs	r0, #10
 80033d0:	f009 fd76 	bl	800cec0 <OLED_ShowString>
		snprintf(text, sizeof(text), "Distance:%.2f", g_distanceUS);
 80033d4:	4b31      	ldr	r3, [pc, #196]	@ (800349c <StartOledTask+0x110>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fd f8b5 	bl	8000548 <__aeabi_f2d>
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80033e6:	e9cd 2300 	strd	r2, r3, [sp]
 80033ea:	4a2d      	ldr	r2, [pc, #180]	@ (80034a0 <StartOledTask+0x114>)
 80033ec:	2110      	movs	r1, #16
 80033ee:	f00a fbc7 	bl	800db80 <sniprintf>
		  OLED_ShowString(10, 20, text);
 80033f2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80033f6:	461a      	mov	r2, r3
 80033f8:	2114      	movs	r1, #20
 80033fa:	200a      	movs	r0, #10
 80033fc:	f009 fd60 	bl	800cec0 <OLED_ShowString>
		  snprintf(text, sizeof(text), "degree :%5.2f", yaw);//BEFORE DEGREE
 8003400:	4b28      	ldr	r3, [pc, #160]	@ (80034a4 <StartOledTask+0x118>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7fd f89f 	bl	8000548 <__aeabi_f2d>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8003412:	e9cd 2300 	strd	r2, r3, [sp]
 8003416:	4a24      	ldr	r2, [pc, #144]	@ (80034a8 <StartOledTask+0x11c>)
 8003418:	2110      	movs	r1, #16
 800341a:	f00a fbb1 	bl	800db80 <sniprintf>
		  OLED_ShowString(10, 30, text);
 800341e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003422:	461a      	mov	r2, r3
 8003424:	211e      	movs	r1, #30
 8003426:	200a      	movs	r0, #10
 8003428:	f009 fd4a 	bl	800cec0 <OLED_ShowString>
		  OLED_Refresh_Gram();
 800342c:	f009 fbd4 	bl	800cbd8 <OLED_Refresh_Gram>
		  snprintf(text, sizeof(text), "Distance: %d m", Target_Distance);
 8003430:	4b1e      	ldr	r3, [pc, #120]	@ (80034ac <StartOledTask+0x120>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8003438:	4a1d      	ldr	r2, [pc, #116]	@ (80034b0 <StartOledTask+0x124>)
 800343a:	2110      	movs	r1, #16
 800343c:	f00a fba0 	bl	800db80 <sniprintf>
		  OLED_ShowString(10, 10, text);
 8003440:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003444:	461a      	mov	r2, r3
 8003446:	210a      	movs	r1, #10
 8003448:	200a      	movs	r0, #10
 800344a:	f009 fd39 	bl	800cec0 <OLED_ShowString>
		  snprintf(text, sizeof(text), "DistanceIRL: %d m", iDistanceL);
 800344e:	4b19      	ldr	r3, [pc, #100]	@ (80034b4 <StartOledTask+0x128>)
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8003456:	4a18      	ldr	r2, [pc, #96]	@ (80034b8 <StartOledTask+0x12c>)
 8003458:	2110      	movs	r1, #16
 800345a:	f00a fb91 	bl	800db80 <sniprintf>
		  OLED_ShowString(10, 50, text);
 800345e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003462:	461a      	mov	r2, r3
 8003464:	2132      	movs	r1, #50	@ 0x32
 8003466:	200a      	movs	r0, #10
 8003468:	f009 fd2a 	bl	800cec0 <OLED_ShowString>
		  snprintf(temp,sizeof(temp),"%.5f\r\n",yaw);
 800346c:	4b0d      	ldr	r3, [pc, #52]	@ (80034a4 <StartOledTask+0x118>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7fd f869 	bl	8000548 <__aeabi_f2d>
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	f107 000c 	add.w	r0, r7, #12
 800347e:	e9cd 2300 	strd	r2, r3, [sp]
 8003482:	4a0e      	ldr	r2, [pc, #56]	@ (80034bc <StartOledTask+0x130>)
 8003484:	2132      	movs	r1, #50	@ 0x32
 8003486:	f00a fb7b 	bl	800db80 <sniprintf>

    osDelay(200);
 800348a:	20c8      	movs	r0, #200	@ 0xc8
 800348c:	f006 ff00 	bl	800a290 <osDelay>
		snprintf(text, sizeof(text), "DistanceIRR:%d m", iDistanceR);
 8003490:	bf00      	nop
 8003492:	e790      	b.n	80033b6 <StartOledTask+0x2a>
 8003494:	200005e8 	.word	0x200005e8
 8003498:	08010450 	.word	0x08010450
 800349c:	20000538 	.word	0x20000538
 80034a0:	08010464 	.word	0x08010464
 80034a4:	20000578 	.word	0x20000578
 80034a8:	08010474 	.word	0x08010474
 80034ac:	2000021c 	.word	0x2000021c
 80034b0:	08010484 	.word	0x08010484
 80034b4:	200005e6 	.word	0x200005e6
 80034b8:	08010494 	.word	0x08010494
 80034bc:	080104a8 	.word	0x080104a8

080034c0 <Startsensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startsensor */
void Startsensor(void *argument)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startsensor */
  /* Infinite loop */
	HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_RESET);
 80034c8:	2200      	movs	r2, #0
 80034ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80034ce:	480f      	ldr	r0, [pc, #60]	@ (800350c <Startsensor+0x4c>)
 80034d0:	f001 fee8 	bl	80052a4 <HAL_GPIO_WritePin>
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_SET);
 80034d4:	2201      	movs	r2, #1
 80034d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80034da:	480c      	ldr	r0, [pc, #48]	@ (800350c <Startsensor+0x4c>)
 80034dc:	f001 fee2 	bl	80052a4 <HAL_GPIO_WritePin>
	delay_us(10);
 80034e0:	200a      	movs	r0, #10
 80034e2:	f7fe fa15 	bl	8001910 <delay_us>
	HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_RESET);
 80034e6:	2200      	movs	r2, #0
 80034e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80034ec:	4807      	ldr	r0, [pc, #28]	@ (800350c <Startsensor+0x4c>)
 80034ee:	f001 fed9 	bl	80052a4 <HAL_GPIO_WritePin>
	    //g_distanceUS = (tc2 > tc1 ? (tc2 - tc1) : (65535 - tc1 + tc2)) * 0.034 / 2; //echo/1000000.0f *343.0f/2.0f *100.0f equivalent
	osDelay(10);
 80034f2:	200a      	movs	r0, #10
 80034f4:	f006 fecc 	bl	800a290 <osDelay>
	IR_Left_Read();
 80034f8:	f7ff fe76 	bl	80031e8 <IR_Left_Read>
	IR_Right_Read();
 80034fc:	f7ff feb8 	bl	8003270 <IR_Right_Read>
	osDelay(100);
 8003500:	2064      	movs	r0, #100	@ 0x64
 8003502:	f006 fec5 	bl	800a290 <osDelay>
	HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_SET);
 8003506:	bf00      	nop
 8003508:	e7e4      	b.n	80034d4 <Startsensor+0x14>
 800350a:	bf00      	nop
 800350c:	40021000 	.word	0x40021000

08003510 <StartEncoderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	@ 0x28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8003518:	213c      	movs	r1, #60	@ 0x3c
 800351a:	48a1      	ldr	r0, [pc, #644]	@ (80037a0 <StartEncoderTask+0x290>)
 800351c:	f003 ff9c 	bl	8007458 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003520:	213c      	movs	r1, #60	@ 0x3c
 8003522:	48a0      	ldr	r0, [pc, #640]	@ (80037a4 <StartEncoderTask+0x294>)
 8003524:	f003 ff98 	bl	8007458 <HAL_TIM_Encoder_Start>

	int16_t cnt1L,cnt2L,diffL;
	int16_t cnt1R,cnt2R,diffR;
	uint32_t tick;
	cnt1L = __HAL_TIM_GET_COUNTER(&htim2);
 8003528:	4b9d      	ldr	r3, [pc, #628]	@ (80037a0 <StartEncoderTask+0x290>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	cnt1R = __HAL_TIM_GET_COUNTER(&htim3);
 8003530:	4b9c      	ldr	r3, [pc, #624]	@ (80037a4 <StartEncoderTask+0x294>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003536:	847b      	strh	r3, [r7, #34]	@ 0x22
    tick = HAL_GetTick(); // in milliseconds
 8003538:	f000 ff2c 	bl	8004394 <HAL_GetTick>
 800353c:	61f8      	str	r0, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
	  if (HAL_GetTick() - tick > 10L) { // Checking per second
 800353e:	f000 ff29 	bl	8004394 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b0a      	cmp	r3, #10
 800354a:	f240 811e 	bls.w	800378a <StartEncoderTask+0x27a>
	              cnt2L = __HAL_TIM_GET_COUNTER(&htim2);
 800354e:	4b94      	ldr	r3, [pc, #592]	@ (80037a0 <StartEncoderTask+0x290>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003554:	837b      	strh	r3, [r7, #26]
	              cnt2R = __HAL_TIM_GET_COUNTER(&htim3);
 8003556:	4b93      	ldr	r3, [pc, #588]	@ (80037a4 <StartEncoderTask+0x294>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355c:	833b      	strh	r3, [r7, #24]

	              //Left
	              if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 800355e:	4b90      	ldr	r3, [pc, #576]	@ (80037a0 <StartEncoderTask+0x290>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0310 	and.w	r3, r3, #16
 8003568:	2b10      	cmp	r3, #16
 800356a:	d114      	bne.n	8003596 <StartEncoderTask+0x86>
	            	  diffL = (cnt2L < cnt1L) ? (cnt1L - cnt2L) : ((65535 - cnt2L) + cnt1L);
 800356c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8003570:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003574:	429a      	cmp	r2, r3
 8003576:	da05      	bge.n	8003584 <StartEncoderTask+0x74>
 8003578:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800357a:	8b7b      	ldrh	r3, [r7, #26]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	b29b      	uxth	r3, r3
 8003580:	b21b      	sxth	r3, r3
 8003582:	e006      	b.n	8003592 <StartEncoderTask+0x82>
 8003584:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003586:	8b7b      	ldrh	r3, [r7, #26]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29b      	uxth	r3, r3
 8003590:	b21b      	sxth	r3, r3
 8003592:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003594:	e013      	b.n	80035be <StartEncoderTask+0xae>
	              } else {
	            	  diffL = (cnt2L > cnt1L) ? (cnt2L - cnt1L) : ((65535 - cnt1L) + cnt2L);
 8003596:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800359a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800359e:	429a      	cmp	r2, r3
 80035a0:	dd05      	ble.n	80035ae <StartEncoderTask+0x9e>
 80035a2:	8b7a      	ldrh	r2, [r7, #26]
 80035a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	b21b      	sxth	r3, r3
 80035ac:	e006      	b.n	80035bc <StartEncoderTask+0xac>
 80035ae:	8b7a      	ldrh	r2, [r7, #26]
 80035b0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	b21b      	sxth	r3, r3
 80035bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
	              }

	              //Right
	              if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) {
 80035be:	4b79      	ldr	r3, [pc, #484]	@ (80037a4 <StartEncoderTask+0x294>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	2b10      	cmp	r3, #16
 80035ca:	d114      	bne.n	80035f6 <StartEncoderTask+0xe6>
	              	            	  diffR = (cnt2R < cnt1R) ? (cnt1R - cnt2R) : ((65535 - cnt2R) + cnt1R);
 80035cc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80035d0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80035d4:	429a      	cmp	r2, r3
 80035d6:	da05      	bge.n	80035e4 <StartEncoderTask+0xd4>
 80035d8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80035da:	8b3b      	ldrh	r3, [r7, #24]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	b29b      	uxth	r3, r3
 80035e0:	b21b      	sxth	r3, r3
 80035e2:	e006      	b.n	80035f2 <StartEncoderTask+0xe2>
 80035e4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80035e6:	8b3b      	ldrh	r3, [r7, #24]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	b21b      	sxth	r3, r3
 80035f2:	843b      	strh	r3, [r7, #32]
 80035f4:	e013      	b.n	800361e <StartEncoderTask+0x10e>
	              	              } else {
	              	            	  diffR = (cnt2R > cnt1R) ? (cnt2R - cnt1R) : ((65535 - cnt1R) + cnt2R);
 80035f6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80035fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80035fe:	429a      	cmp	r2, r3
 8003600:	dd05      	ble.n	800360e <StartEncoderTask+0xfe>
 8003602:	8b3a      	ldrh	r2, [r7, #24]
 8003604:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	b29b      	uxth	r3, r3
 800360a:	b21b      	sxth	r3, r3
 800360c:	e006      	b.n	800361c <StartEncoderTask+0x10c>
 800360e:	8b3a      	ldrh	r2, [r7, #24]
 8003610:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	b29b      	uxth	r3, r3
 8003616:	3b01      	subs	r3, #1
 8003618:	b29b      	uxth	r3, r3
 800361a:	b21b      	sxth	r3, r3
 800361c:	843b      	strh	r3, [r7, #32]
	              	              }
	  // RPM Calculation
	  RPM_L = ((float) diffL / (ENCODER_PULSES_PER_REVOLUTION * 4));// * 60.0;
 800361e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003622:	ee07 3a90 	vmov	s15, r3
 8003626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800362a:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 80037a8 <StartEncoderTask+0x298>
 800362e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003632:	ee16 0a90 	vmov	r0, s13
 8003636:	f7fc ff87 	bl	8000548 <__aeabi_f2d>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	495b      	ldr	r1, [pc, #364]	@ (80037ac <StartEncoderTask+0x29c>)
 8003640:	e9c1 2300 	strd	r2, r3, [r1]
	  RPM_R = ((float) diffR / (ENCODER_PULSES_PER_REVOLUTION * 4));
 8003644:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003648:	ee07 3a90 	vmov	s15, r3
 800364c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003650:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80037a8 <StartEncoderTask+0x298>
 8003654:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003658:	ee16 0a90 	vmov	r0, s13
 800365c:	f7fc ff74 	bl	8000548 <__aeabi_f2d>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4952      	ldr	r1, [pc, #328]	@ (80037b0 <StartEncoderTask+0x2a0>)
 8003666:	e9c1 2300 	strd	r2, r3, [r1]

	  float dt = (HAL_GetTick() - tick) * 0.001f;
 800366a:	f000 fe93 	bl	8004394 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	ee07 3a90 	vmov	s15, r3
 8003678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800367c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80037b4 <StartEncoderTask+0x2a4>
 8003680:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003684:	edc7 7a05 	vstr	s15, [r7, #20]
	  RPS_L=((float) diffL / (ENCODER_PULSES_PER_REVOLUTION * 4* dt));
 8003688:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800368c:	ee07 3a90 	vmov	s15, r3
 8003690:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003694:	edd7 7a05 	vldr	s15, [r7, #20]
 8003698:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80037a8 <StartEncoderTask+0x298>
 800369c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80036a0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80036a4:	ee16 0a90 	vmov	r0, s13
 80036a8:	f7fc ff4e 	bl	8000548 <__aeabi_f2d>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4941      	ldr	r1, [pc, #260]	@ (80037b8 <StartEncoderTask+0x2a8>)
 80036b2:	e9c1 2300 	strd	r2, r3, [r1]
	  RPS_R=((float) diffR / (ENCODER_PULSES_PER_REVOLUTION * 4 *dt));
 80036b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80036ba:	ee07 3a90 	vmov	s15, r3
 80036be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80036c6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80037a8 <StartEncoderTask+0x298>
 80036ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80036ce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80036d2:	ee16 0a90 	vmov	r0, s13
 80036d6:	f7fc ff37 	bl	8000548 <__aeabi_f2d>
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	4937      	ldr	r1, [pc, #220]	@ (80037bc <StartEncoderTask+0x2ac>)
 80036e0:	e9c1 2300 	strd	r2, r3, [r1]

      // Calculate the distance traveled by each wheel (in meters)
      float distanceLeftThisSecond = RPM_L * PI * WHEEL_DIAMETER;
 80036e4:	4b31      	ldr	r3, [pc, #196]	@ (80037ac <StartEncoderTask+0x29c>)
 80036e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036ea:	a32b      	add	r3, pc, #172	@ (adr r3, 8003798 <StartEncoderTask+0x288>)
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	f7fc ff82 	bl	80005f8 <__aeabi_dmul>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4610      	mov	r0, r2
 80036fa:	4619      	mov	r1, r3
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	4b2f      	ldr	r3, [pc, #188]	@ (80037c0 <StartEncoderTask+0x2b0>)
 8003702:	f7fc ff79 	bl	80005f8 <__aeabi_dmul>
 8003706:	4602      	mov	r2, r0
 8003708:	460b      	mov	r3, r1
 800370a:	4610      	mov	r0, r2
 800370c:	4619      	mov	r1, r3
 800370e:	f7fd fa6b 	bl	8000be8 <__aeabi_d2f>
 8003712:	4603      	mov	r3, r0
 8003714:	613b      	str	r3, [r7, #16]
      float distanceRightThisSecond = RPM_R * PI * WHEEL_DIAMETER;
 8003716:	4b26      	ldr	r3, [pc, #152]	@ (80037b0 <StartEncoderTask+0x2a0>)
 8003718:	e9d3 0100 	ldrd	r0, r1, [r3]
 800371c:	a31e      	add	r3, pc, #120	@ (adr r3, 8003798 <StartEncoderTask+0x288>)
 800371e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003722:	f7fc ff69 	bl	80005f8 <__aeabi_dmul>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4610      	mov	r0, r2
 800372c:	4619      	mov	r1, r3
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	4b23      	ldr	r3, [pc, #140]	@ (80037c0 <StartEncoderTask+0x2b0>)
 8003734:	f7fc ff60 	bl	80005f8 <__aeabi_dmul>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4610      	mov	r0, r2
 800373e:	4619      	mov	r1, r3
 8003740:	f7fd fa52 	bl	8000be8 <__aeabi_d2f>
 8003744:	4603      	mov	r3, r0
 8003746:	60fb      	str	r3, [r7, #12]

	    // Average the distances to account for potential minor differences in wheel speed
	    float distanceThisSecond = (distanceLeftThisSecond + distanceRightThisSecond) / 2.0;
 8003748:	ed97 7a04 	vldr	s14, [r7, #16]
 800374c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003750:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003754:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003758:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800375c:	edc7 7a02 	vstr	s15, [r7, #8]
	    distanceTraveled += distanceThisSecond;
 8003760:	4b18      	ldr	r3, [pc, #96]	@ (80037c4 <StartEncoderTask+0x2b4>)
 8003762:	ed93 7a00 	vldr	s14, [r3]
 8003766:	edd7 7a02 	vldr	s15, [r7, #8]
 800376a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800376e:	4b15      	ldr	r3, [pc, #84]	@ (80037c4 <StartEncoderTask+0x2b4>)
 8003770:	edc3 7a00 	vstr	s15, [r3]
	    // Accumulate the total distance traveled
	  cnt1L = __HAL_TIM_GET_COUNTER(&htim2);
 8003774:	4b0a      	ldr	r3, [pc, #40]	@ (80037a0 <StartEncoderTask+0x290>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	  cnt1R = __HAL_TIM_GET_COUNTER(&htim3);
 800377c:	4b09      	ldr	r3, [pc, #36]	@ (80037a4 <StartEncoderTask+0x294>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003782:	847b      	strh	r3, [r7, #34]	@ 0x22
	 tick = HAL_GetTick();
 8003784:	f000 fe06 	bl	8004394 <HAL_GetTick>
 8003788:	61f8      	str	r0, [r7, #28]
  }
	  osDelay(150);
 800378a:	2096      	movs	r0, #150	@ 0x96
 800378c:	f006 fd80 	bl	800a290 <osDelay>
	  if (HAL_GetTick() - tick > 10L) { // Checking per second
 8003790:	e6d5      	b.n	800353e <StartEncoderTask+0x2e>
 8003792:	bf00      	nop
 8003794:	f3af 8000 	nop.w
 8003798:	54442eea 	.word	0x54442eea
 800379c:	400921fb 	.word	0x400921fb
 80037a0:	20000368 	.word	0x20000368
 80037a4:	200003b0 	.word	0x200003b0
 80037a8:	44a50000 	.word	0x44a50000
 80037ac:	20000540 	.word	0x20000540
 80037b0:	20000548 	.word	0x20000548
 80037b4:	3a83126f 	.word	0x3a83126f
 80037b8:	20000550 	.word	0x20000550
 80037bc:	20000558 	.word	0x20000558
 80037c0:	401a0000 	.word	0x401a0000
 80037c4:	20000220 	.word	0x20000220

080037c8 <startrobotTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startrobotTask */
void startrobotTask(void *argument)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startrobotTask */
  /* Infinite loop */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);//Start servo pwm timer
 80037d0:	210c      	movs	r1, #12
 80037d2:	48a8      	ldr	r0, [pc, #672]	@ (8003a74 <startrobotTask+0x2ac>)
 80037d4:	f003 fb50 	bl	8006e78 <HAL_TIM_PWM_Start>
	degree=0;
 80037d8:	4ba7      	ldr	r3, [pc, #668]	@ (8003a78 <startrobotTask+0x2b0>)
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80037e0:	2100      	movs	r1, #0
 80037e2:	48a6      	ldr	r0, [pc, #664]	@ (8003a7c <startrobotTask+0x2b4>)
 80037e4:	f003 fb48 	bl	8006e78 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80037e8:	2104      	movs	r1, #4
 80037ea:	48a4      	ldr	r0, [pc, #656]	@ (8003a7c <startrobotTask+0x2b4>)
 80037ec:	f003 fb44 	bl	8006e78 <HAL_TIM_PWM_Start>

	while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8)==1);
 80037f0:	bf00      	nop
 80037f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80037f6:	48a2      	ldr	r0, [pc, #648]	@ (8003a80 <startrobotTask+0x2b8>)
 80037f8:	f001 fd3c 	bl	8005274 <HAL_GPIO_ReadPin>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d0f7      	beq.n	80037f2 <startrobotTask+0x2a>
	int labTarget=83;
 8003802:	2353      	movs	r3, #83	@ 0x53
 8003804:	60fb      	str	r3, [r7, #12]

		//{osDelay(200);osThreadYield();}
	//while(calibrate==0);

	set_servo_angle(Center);
 8003806:	205f      	movs	r0, #95	@ 0x5f
 8003808:	f7fe fe98 	bl	800253c <set_servo_angle>
	osDelay(200);
 800380c:	20c8      	movs	r0, #200	@ 0xc8
 800380e:	f006 fd3f 	bl	800a290 <osDelay>
	//Calibrate();
	start_time = HAL_GetTick();
 8003812:	f000 fdbf 	bl	8004394 <HAL_GetTick>
 8003816:	4603      	mov	r3, r0
 8003818:	4a9a      	ldr	r2, [pc, #616]	@ (8003a84 <startrobotTask+0x2bc>)
 800381a:	6013      	str	r3, [r2, #0]
	end_time = HAL_GetTick();  // Record end time
 800381c:	f000 fdba 	bl	8004394 <HAL_GetTick>
 8003820:	4603      	mov	r3, r0
 8003822:	4a99      	ldr	r2, [pc, #612]	@ (8003a88 <startrobotTask+0x2c0>)
 8003824:	6013      	str	r3, [r2, #0]
	delta_time_sec= (end_time - start_time) * 0.001f; // Time difference in ms
 8003826:	4b98      	ldr	r3, [pc, #608]	@ (8003a88 <startrobotTask+0x2c0>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4b96      	ldr	r3, [pc, #600]	@ (8003a84 <startrobotTask+0x2bc>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	ee07 3a90 	vmov	s15, r3
 8003834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003838:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8003a8c <startrobotTask+0x2c4>
 800383c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003840:	4b93      	ldr	r3, [pc, #588]	@ (8003a90 <startrobotTask+0x2c8>)
 8003842:	edc3 7a00 	vstr	s15, [r3]
  {

	  //TEST TURN SEGMENT
	  {

		  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8)==0)
 8003846:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800384a:	488d      	ldr	r0, [pc, #564]	@ (8003a80 <startrobotTask+0x2b8>)
 800384c:	f001 fd12 	bl	8005274 <HAL_GPIO_ReadPin>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d102      	bne.n	800385c <startrobotTask+0x94>
		  {
			  //resetYaw();
			  //yaw=0;
			  tempflag=1;
 8003856:	4b8f      	ldr	r3, [pc, #572]	@ (8003a94 <startrobotTask+0x2cc>)
 8003858:	2201      	movs	r2, #1
 800385a:	601a      	str	r2, [r3, #0]
			  //set_servo_angle(Right);
			  //Target_Distance=50;
			 // osDelay(550);
		  }

		  if(tempflag==1)
 800385c:	4b8d      	ldr	r3, [pc, #564]	@ (8003a94 <startrobotTask+0x2cc>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d135      	bne.n	80038d0 <startrobotTask+0x108>
//				  }
//			  while(1)
//			  {
			  while(1)
			  {
			  	if(count==0)
 8003864:	4b8c      	ldr	r3, [pc, #560]	@ (8003a98 <startrobotTask+0x2d0>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d107      	bne.n	800387c <startrobotTask+0xb4>
			  	{
					Set_Motor_Direction(1,1);
 800386c:	2101      	movs	r1, #1
 800386e:	2001      	movs	r0, #1
 8003870:	f7fe f816 	bl	80018a0 <Set_Motor_Direction>
	//				BackRightTest(83);
					ForwardLeft(83);
 8003874:	2053      	movs	r0, #83	@ 0x53
 8003876:	f7fe fc4b 	bl	8002110 <ForwardLeft>
 800387a:	e7f3      	b.n	8003864 <startrobotTask+0x9c>
			  	}
			  	else if(count== 1){
 800387c:	4b86      	ldr	r3, [pc, #536]	@ (8003a98 <startrobotTask+0x2d0>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d108      	bne.n	8003896 <startrobotTask+0xce>
			  		Set_Motor_Direction(0,0);
 8003884:	2100      	movs	r1, #0
 8003886:	2000      	movs	r0, #0
 8003888:	f7fe f80a 	bl	80018a0 <Set_Motor_Direction>
			  		BackLeft(-83);
 800388c:	f06f 0052 	mvn.w	r0, #82	@ 0x52
 8003890:	f7fe fb4e 	bl	8001f30 <BackLeft>
 8003894:	e7e6      	b.n	8003864 <startrobotTask+0x9c>
			  	}
			  	else if(count==2){
 8003896:	4b80      	ldr	r3, [pc, #512]	@ (8003a98 <startrobotTask+0x2d0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d108      	bne.n	80038b0 <startrobotTask+0xe8>
			  		Set_Motor_Direction(1,1);
 800389e:	2101      	movs	r1, #1
 80038a0:	2001      	movs	r0, #1
 80038a2:	f7fd fffd 	bl	80018a0 <Set_Motor_Direction>
			  		ForwardRight(-83);
 80038a6:	f06f 0052 	mvn.w	r0, #82	@ 0x52
 80038aa:	f7fe fd19 	bl	80022e0 <ForwardRight>
 80038ae:	e7d9      	b.n	8003864 <startrobotTask+0x9c>
			  	}
			  	else if(count==3){
 80038b0:	4b79      	ldr	r3, [pc, #484]	@ (8003a98 <startrobotTask+0x2d0>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b03      	cmp	r3, #3
 80038b6:	d107      	bne.n	80038c8 <startrobotTask+0x100>
			  		Set_Motor_Direction(0,0);
 80038b8:	2100      	movs	r1, #0
 80038ba:	2000      	movs	r0, #0
 80038bc:	f7fd fff0 	bl	80018a0 <Set_Motor_Direction>
			  		BackRight(83);
 80038c0:	2053      	movs	r0, #83	@ 0x53
 80038c2:	f7fe fa65 	bl	8001d90 <BackRight>
 80038c6:	e7cd      	b.n	8003864 <startrobotTask+0x9c>
			  	}
			  	else{
			  		count=0;
 80038c8:	4b73      	ldr	r3, [pc, #460]	@ (8003a98 <startrobotTask+0x2d0>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
			  	if(count==0)
 80038ce:	e7c9      	b.n	8003864 <startrobotTask+0x9c>
			  		  osDelay(200);
				  }*/

	  }
	  //END OF TEST SEGMENT
	  	  	ICM20948_readGyroscope_all(&hi2c1, 0, GYRO_SENS, &accel);
 80038d0:	4b72      	ldr	r3, [pc, #456]	@ (8003a9c <startrobotTask+0x2d4>)
 80038d2:	2203      	movs	r2, #3
 80038d4:	2100      	movs	r1, #0
 80038d6:	4872      	ldr	r0, [pc, #456]	@ (8003aa0 <startrobotTask+0x2d8>)
 80038d8:	f006 f8a2 	bl	8009a20 <ICM20948_readGyroscope_all>
	  		end_time = HAL_GetTick();
 80038dc:	f000 fd5a 	bl	8004394 <HAL_GetTick>
 80038e0:	4603      	mov	r3, r0
 80038e2:	4a69      	ldr	r2, [pc, #420]	@ (8003a88 <startrobotTask+0x2c0>)
 80038e4:	6013      	str	r3, [r2, #0]
	  		delta_time_sec= (end_time - start_time) * 0.001f;
 80038e6:	4b68      	ldr	r3, [pc, #416]	@ (8003a88 <startrobotTask+0x2c0>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	4b66      	ldr	r3, [pc, #408]	@ (8003a84 <startrobotTask+0x2bc>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	ee07 3a90 	vmov	s15, r3
 80038f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f8:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8003a8c <startrobotTask+0x2c4>
 80038fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003900:	4b63      	ldr	r3, [pc, #396]	@ (8003a90 <startrobotTask+0x2c8>)
 8003902:	edc3 7a00 	vstr	s15, [r3]
	  		  start_time = HAL_GetTick();
 8003906:	f000 fd45 	bl	8004394 <HAL_GetTick>
 800390a:	4603      	mov	r3, r0
 800390c:	4a5d      	ldr	r2, [pc, #372]	@ (8003a84 <startrobotTask+0x2bc>)
 800390e:	6013      	str	r3, [r2, #0]
	  		  if(flagReceived==1&&flagDone!=1){
 8003910:	4b64      	ldr	r3, [pc, #400]	@ (8003aa4 <startrobotTask+0x2dc>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b01      	cmp	r3, #1
 8003916:	f040 8096 	bne.w	8003a46 <startrobotTask+0x27e>
 800391a:	4b63      	ldr	r3, [pc, #396]	@ (8003aa8 <startrobotTask+0x2e0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b01      	cmp	r3, #1
 8003920:	f000 8091 	beq.w	8003a46 <startrobotTask+0x27e>
	  			  char temp[4] = {0};  // Temporary buffer to hold up to 4 characters + null terminator
 8003924:	2300      	movs	r3, #0
 8003926:	60bb      	str	r3, [r7, #8]
	  			  strncpy(temp, aRxBuffer+1, 3);
 8003928:	4960      	ldr	r1, [pc, #384]	@ (8003aac <startrobotTask+0x2e4>)
 800392a:	f107 0308 	add.w	r3, r7, #8
 800392e:	2203      	movs	r2, #3
 8003930:	4618      	mov	r0, r3
 8003932:	f00a f9b6 	bl	800dca2 <strncpy>
	  			  Target_Distance=atoi(temp);
 8003936:	f107 0308 	add.w	r3, r7, #8
 800393a:	4618      	mov	r0, r3
 800393c:	f009 fb7e 	bl	800d03c <atoi>
 8003940:	4603      	mov	r3, r0
 8003942:	4a5b      	ldr	r2, [pc, #364]	@ (8003ab0 <startrobotTask+0x2e8>)
 8003944:	6013      	str	r3, [r2, #0]
	  				if(aRxBuffer[0]=='W' && distanceTraveled < Target_Distance){
 8003946:	4b5b      	ldr	r3, [pc, #364]	@ (8003ab4 <startrobotTask+0x2ec>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b57      	cmp	r3, #87	@ 0x57
 800394c:	d115      	bne.n	800397a <startrobotTask+0x1b2>
 800394e:	4b58      	ldr	r3, [pc, #352]	@ (8003ab0 <startrobotTask+0x2e8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	ee07 3a90 	vmov	s15, r3
 8003956:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800395a:	4b57      	ldr	r3, [pc, #348]	@ (8003ab8 <startrobotTask+0x2f0>)
 800395c:	edd3 7a00 	vldr	s15, [r3]
 8003960:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003968:	dd07      	ble.n	800397a <startrobotTask+0x1b2>
	  					Set_Motor_Direction(1,1);
 800396a:	2101      	movs	r1, #1
 800396c:	2001      	movs	r0, #1
 800396e:	f7fd ff97 	bl	80018a0 <Set_Motor_Direction>
	  					Forward(0);
 8003972:	2000      	movs	r0, #0
 8003974:	f7fe f964 	bl	8001c40 <Forward>
 8003978:	e064      	b.n	8003a44 <startrobotTask+0x27c>
	  				}
	  				else if(aRxBuffer[0]=='D'&&aRxBuffer[1]=='1'){
 800397a:	4b4e      	ldr	r3, [pc, #312]	@ (8003ab4 <startrobotTask+0x2ec>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b44      	cmp	r3, #68	@ 0x44
 8003980:	d10d      	bne.n	800399e <startrobotTask+0x1d6>
 8003982:	4b4c      	ldr	r3, [pc, #304]	@ (8003ab4 <startrobotTask+0x2ec>)
 8003984:	785b      	ldrb	r3, [r3, #1]
 8003986:	2b31      	cmp	r3, #49	@ 0x31
 8003988:	d109      	bne.n	800399e <startrobotTask+0x1d6>
	  							Set_Motor_Direction(1,0);
 800398a:	2100      	movs	r1, #0
 800398c:	2001      	movs	r0, #1
 800398e:	f7fd ff87 	bl	80018a0 <Set_Motor_Direction>
	  							ForwardRight(-labTarget);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	425b      	negs	r3, r3
 8003996:	4618      	mov	r0, r3
 8003998:	f7fe fca2 	bl	80022e0 <ForwardRight>
 800399c:	e052      	b.n	8003a44 <startrobotTask+0x27c>
	  				}
	  				else if(aRxBuffer[0]=='D'&&aRxBuffer[1]=='0'){
 800399e:	4b45      	ldr	r3, [pc, #276]	@ (8003ab4 <startrobotTask+0x2ec>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b44      	cmp	r3, #68	@ 0x44
 80039a4:	d10b      	bne.n	80039be <startrobotTask+0x1f6>
 80039a6:	4b43      	ldr	r3, [pc, #268]	@ (8003ab4 <startrobotTask+0x2ec>)
 80039a8:	785b      	ldrb	r3, [r3, #1]
 80039aa:	2b30      	cmp	r3, #48	@ 0x30
 80039ac:	d107      	bne.n	80039be <startrobotTask+0x1f6>
	  							Set_Motor_Direction(0,0);
 80039ae:	2100      	movs	r1, #0
 80039b0:	2000      	movs	r0, #0
 80039b2:	f7fd ff75 	bl	80018a0 <Set_Motor_Direction>
	  							BackRight(labTarget);
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f7fe f9ea 	bl	8001d90 <BackRight>
 80039bc:	e042      	b.n	8003a44 <startrobotTask+0x27c>
	  				}
	  				else if(aRxBuffer[0]=='A' &&aRxBuffer[1]=='1'){
 80039be:	4b3d      	ldr	r3, [pc, #244]	@ (8003ab4 <startrobotTask+0x2ec>)
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b41      	cmp	r3, #65	@ 0x41
 80039c4:	d10b      	bne.n	80039de <startrobotTask+0x216>
 80039c6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab4 <startrobotTask+0x2ec>)
 80039c8:	785b      	ldrb	r3, [r3, #1]
 80039ca:	2b31      	cmp	r3, #49	@ 0x31
 80039cc:	d107      	bne.n	80039de <startrobotTask+0x216>
	  							Set_Motor_Direction(0,1);
 80039ce:	2101      	movs	r1, #1
 80039d0:	2000      	movs	r0, #0
 80039d2:	f7fd ff65 	bl	80018a0 <Set_Motor_Direction>
	  							ForwardLeft(labTarget);
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f7fe fb9a 	bl	8002110 <ForwardLeft>
 80039dc:	e032      	b.n	8003a44 <startrobotTask+0x27c>
	  						}
	  				else if(aRxBuffer[0]=='A'&&aRxBuffer[1]=='0'){
 80039de:	4b35      	ldr	r3, [pc, #212]	@ (8003ab4 <startrobotTask+0x2ec>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b41      	cmp	r3, #65	@ 0x41
 80039e4:	d10d      	bne.n	8003a02 <startrobotTask+0x23a>
 80039e6:	4b33      	ldr	r3, [pc, #204]	@ (8003ab4 <startrobotTask+0x2ec>)
 80039e8:	785b      	ldrb	r3, [r3, #1]
 80039ea:	2b30      	cmp	r3, #48	@ 0x30
 80039ec:	d109      	bne.n	8003a02 <startrobotTask+0x23a>
	  							Set_Motor_Direction(0,0);
 80039ee:	2100      	movs	r1, #0
 80039f0:	2000      	movs	r0, #0
 80039f2:	f7fd ff55 	bl	80018a0 <Set_Motor_Direction>
	  							BackLeft(-labTarget);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	425b      	negs	r3, r3
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fe fa98 	bl	8001f30 <BackLeft>
 8003a00:	e020      	b.n	8003a44 <startrobotTask+0x27c>
	  				}
	  				else if(aRxBuffer[0]=='S' && distanceTraveled < Target_Distance)
 8003a02:	4b2c      	ldr	r3, [pc, #176]	@ (8003ab4 <startrobotTask+0x2ec>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2b53      	cmp	r3, #83	@ 0x53
 8003a08:	d115      	bne.n	8003a36 <startrobotTask+0x26e>
 8003a0a:	4b29      	ldr	r3, [pc, #164]	@ (8003ab0 <startrobotTask+0x2e8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	ee07 3a90 	vmov	s15, r3
 8003a12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a16:	4b28      	ldr	r3, [pc, #160]	@ (8003ab8 <startrobotTask+0x2f0>)
 8003a18:	edd3 7a00 	vldr	s15, [r3]
 8003a1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a24:	dd07      	ble.n	8003a36 <startrobotTask+0x26e>
	  				{
	  					Set_Motor_Direction(0,0);
 8003a26:	2100      	movs	r1, #0
 8003a28:	2000      	movs	r0, #0
 8003a2a:	f7fd ff39 	bl	80018a0 <Set_Motor_Direction>
	  					Backward(0);
 8003a2e:	2000      	movs	r0, #0
 8003a30:	f7fe f85e 	bl	8001af0 <Backward>
 8003a34:	e006      	b.n	8003a44 <startrobotTask+0x27c>
	  				}
	  				else{
	  					flagDone=1;
 8003a36:	4b1c      	ldr	r3, [pc, #112]	@ (8003aa8 <startrobotTask+0x2e0>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]
	  					flagReceived=0;
 8003a3c:	4b19      	ldr	r3, [pc, #100]	@ (8003aa4 <startrobotTask+0x2dc>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
	  		  if(flagReceived==1&&flagDone!=1){
 8003a42:	e013      	b.n	8003a6c <startrobotTask+0x2a4>
 8003a44:	e012      	b.n	8003a6c <startrobotTask+0x2a4>
	  				}
	  			}
	  			else if(flagDone==1)
 8003a46:	4b18      	ldr	r3, [pc, #96]	@ (8003aa8 <startrobotTask+0x2e0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d10e      	bne.n	8003a6c <startrobotTask+0x2a4>
	  			{
	  				Motor_Stop();
 8003a4e:	f7ff fc53 	bl	80032f8 <Motor_Stop>
	  				HAL_UART_Transmit(&huart3,(uint8_t *)"ACK\r\n",5,0xFFFF);
 8003a52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a56:	2205      	movs	r2, #5
 8003a58:	4918      	ldr	r1, [pc, #96]	@ (8003abc <startrobotTask+0x2f4>)
 8003a5a:	4819      	ldr	r0, [pc, #100]	@ (8003ac0 <startrobotTask+0x2f8>)
 8003a5c:	f004 fe84 	bl	8008768 <HAL_UART_Transmit>
	  				flagReceived=0;
 8003a60:	4b10      	ldr	r3, [pc, #64]	@ (8003aa4 <startrobotTask+0x2dc>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	601a      	str	r2, [r3, #0]
	  				flagDone = 0;
 8003a66:	4b10      	ldr	r3, [pc, #64]	@ (8003aa8 <startrobotTask+0x2e0>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
	  			}

    osDelay(10);
 8003a6c:	200a      	movs	r0, #10
 8003a6e:	f006 fc0f 	bl	800a290 <osDelay>
  {
 8003a72:	e6e8      	b.n	8003846 <startrobotTask+0x7e>
 8003a74:	20000320 	.word	0x20000320
 8003a78:	200005d4 	.word	0x200005d4
 8003a7c:	20000488 	.word	0x20000488
 8003a80:	40020c00 	.word	0x40020c00
 8003a84:	20000234 	.word	0x20000234
 8003a88:	20000238 	.word	0x20000238
 8003a8c:	3a83126f 	.word	0x3a83126f
 8003a90:	20000224 	.word	0x20000224
 8003a94:	20000004 	.word	0x20000004
 8003a98:	20000230 	.word	0x20000230
 8003a9c:	20000560 	.word	0x20000560
 8003aa0:	200002cc 	.word	0x200002cc
 8003aa4:	2000022c 	.word	0x2000022c
 8003aa8:	20000228 	.word	0x20000228
 8003aac:	200005dd 	.word	0x200005dd
 8003ab0:	2000021c 	.word	0x2000021c
 8003ab4:	200005dc 	.word	0x200005dc
 8003ab8:	20000220 	.word	0x20000220
 8003abc:	080104b0 	.word	0x080104b0
 8003ac0:	200004d0 	.word	0x200004d0

08003ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ac8:	b672      	cpsid	i
}
 8003aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003acc:	bf00      	nop
 8003ace:	e7fd      	b.n	8003acc <Error_Handler+0x8>

08003ad0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	607b      	str	r3, [r7, #4]
 8003ada:	4b12      	ldr	r3, [pc, #72]	@ (8003b24 <HAL_MspInit+0x54>)
 8003adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ade:	4a11      	ldr	r2, [pc, #68]	@ (8003b24 <HAL_MspInit+0x54>)
 8003ae0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b24 <HAL_MspInit+0x54>)
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aee:	607b      	str	r3, [r7, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003af2:	2300      	movs	r3, #0
 8003af4:	603b      	str	r3, [r7, #0]
 8003af6:	4b0b      	ldr	r3, [pc, #44]	@ (8003b24 <HAL_MspInit+0x54>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	4a0a      	ldr	r2, [pc, #40]	@ (8003b24 <HAL_MspInit+0x54>)
 8003afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b02:	4b08      	ldr	r3, [pc, #32]	@ (8003b24 <HAL_MspInit+0x54>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003b0e:	2200      	movs	r2, #0
 8003b10:	210f      	movs	r1, #15
 8003b12:	f06f 0001 	mvn.w	r0, #1
 8003b16:	f001 f948 	bl	8004daa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b1a:	bf00      	nop
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40023800 	.word	0x40023800

08003b28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08c      	sub	sp, #48	@ 0x30
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b30:	f107 031c 	add.w	r3, r7, #28
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	605a      	str	r2, [r3, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	60da      	str	r2, [r3, #12]
 8003b3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a2e      	ldr	r2, [pc, #184]	@ (8003c00 <HAL_ADC_MspInit+0xd8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d128      	bne.n	8003b9c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8003c04 <HAL_ADC_MspInit+0xdc>)
 8003b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b52:	4a2c      	ldr	r2, [pc, #176]	@ (8003c04 <HAL_ADC_MspInit+0xdc>)
 8003b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003c04 <HAL_ADC_MspInit+0xdc>)
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b62:	61bb      	str	r3, [r7, #24]
 8003b64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	4b26      	ldr	r3, [pc, #152]	@ (8003c04 <HAL_ADC_MspInit+0xdc>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6e:	4a25      	ldr	r2, [pc, #148]	@ (8003c04 <HAL_ADC_MspInit+0xdc>)
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b76:	4b23      	ldr	r3, [pc, #140]	@ (8003c04 <HAL_ADC_MspInit+0xdc>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003b82:	2301      	movs	r3, #1
 8003b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b86:	2303      	movs	r3, #3
 8003b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b8e:	f107 031c 	add.w	r3, r7, #28
 8003b92:	4619      	mov	r1, r3
 8003b94:	481c      	ldr	r0, [pc, #112]	@ (8003c08 <HAL_ADC_MspInit+0xe0>)
 8003b96:	f001 f9d1 	bl	8004f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003b9a:	e02c      	b.n	8003bf6 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a1a      	ldr	r2, [pc, #104]	@ (8003c0c <HAL_ADC_MspInit+0xe4>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d127      	bne.n	8003bf6 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	4b16      	ldr	r3, [pc, #88]	@ (8003c04 <HAL_ADC_MspInit+0xdc>)
 8003bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bae:	4a15      	ldr	r2, [pc, #84]	@ (8003c04 <HAL_ADC_MspInit+0xdc>)
 8003bb0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bb6:	4b13      	ldr	r3, [pc, #76]	@ (8003c04 <HAL_ADC_MspInit+0xdc>)
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bbe:	613b      	str	r3, [r7, #16]
 8003bc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8003c04 <HAL_ADC_MspInit+0xdc>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bca:	4a0e      	ldr	r2, [pc, #56]	@ (8003c04 <HAL_ADC_MspInit+0xdc>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003c04 <HAL_ADC_MspInit+0xdc>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003bde:	2302      	movs	r3, #2
 8003be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003be2:	2303      	movs	r3, #3
 8003be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bea:	f107 031c 	add.w	r3, r7, #28
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4805      	ldr	r0, [pc, #20]	@ (8003c08 <HAL_ADC_MspInit+0xe0>)
 8003bf2:	f001 f9a3 	bl	8004f3c <HAL_GPIO_Init>
}
 8003bf6:	bf00      	nop
 8003bf8:	3730      	adds	r7, #48	@ 0x30
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40012000 	.word	0x40012000
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40020000 	.word	0x40020000
 8003c0c:	40012100 	.word	0x40012100

08003c10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08a      	sub	sp, #40	@ 0x28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c18:	f107 0314 	add.w	r3, r7, #20
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	605a      	str	r2, [r3, #4]
 8003c22:	609a      	str	r2, [r3, #8]
 8003c24:	60da      	str	r2, [r3, #12]
 8003c26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a19      	ldr	r2, [pc, #100]	@ (8003c94 <HAL_I2C_MspInit+0x84>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d12c      	bne.n	8003c8c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c32:	2300      	movs	r3, #0
 8003c34:	613b      	str	r3, [r7, #16]
 8003c36:	4b18      	ldr	r3, [pc, #96]	@ (8003c98 <HAL_I2C_MspInit+0x88>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3a:	4a17      	ldr	r2, [pc, #92]	@ (8003c98 <HAL_I2C_MspInit+0x88>)
 8003c3c:	f043 0302 	orr.w	r3, r3, #2
 8003c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c42:	4b15      	ldr	r3, [pc, #84]	@ (8003c98 <HAL_I2C_MspInit+0x88>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c4e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c54:	2312      	movs	r3, #18
 8003c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c60:	2304      	movs	r3, #4
 8003c62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c64:	f107 0314 	add.w	r3, r7, #20
 8003c68:	4619      	mov	r1, r3
 8003c6a:	480c      	ldr	r0, [pc, #48]	@ (8003c9c <HAL_I2C_MspInit+0x8c>)
 8003c6c:	f001 f966 	bl	8004f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	4b08      	ldr	r3, [pc, #32]	@ (8003c98 <HAL_I2C_MspInit+0x88>)
 8003c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c78:	4a07      	ldr	r2, [pc, #28]	@ (8003c98 <HAL_I2C_MspInit+0x88>)
 8003c7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003c7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c80:	4b05      	ldr	r3, [pc, #20]	@ (8003c98 <HAL_I2C_MspInit+0x88>)
 8003c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003c8c:	bf00      	nop
 8003c8e:	3728      	adds	r7, #40	@ 0x28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40005400 	.word	0x40005400
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	40020400 	.word	0x40020400

08003ca0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08e      	sub	sp, #56	@ 0x38
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	605a      	str	r2, [r3, #4]
 8003cb2:	609a      	str	r2, [r3, #8]
 8003cb4:	60da      	str	r2, [r3, #12]
 8003cb6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a4a      	ldr	r2, [pc, #296]	@ (8003de8 <HAL_TIM_Base_MspInit+0x148>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d10e      	bne.n	8003ce0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	623b      	str	r3, [r7, #32]
 8003cc6:	4b49      	ldr	r3, [pc, #292]	@ (8003dec <HAL_TIM_Base_MspInit+0x14c>)
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cca:	4a48      	ldr	r2, [pc, #288]	@ (8003dec <HAL_TIM_Base_MspInit+0x14c>)
 8003ccc:	f043 0301 	orr.w	r3, r3, #1
 8003cd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cd2:	4b46      	ldr	r3, [pc, #280]	@ (8003dec <HAL_TIM_Base_MspInit+0x14c>)
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	623b      	str	r3, [r7, #32]
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003cde:	e07f      	b.n	8003de0 <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM4)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a42      	ldr	r2, [pc, #264]	@ (8003df0 <HAL_TIM_Base_MspInit+0x150>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d135      	bne.n	8003d56 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	4b3f      	ldr	r3, [pc, #252]	@ (8003dec <HAL_TIM_Base_MspInit+0x14c>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf2:	4a3e      	ldr	r2, [pc, #248]	@ (8003dec <HAL_TIM_Base_MspInit+0x14c>)
 8003cf4:	f043 0304 	orr.w	r3, r3, #4
 8003cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cfa:	4b3c      	ldr	r3, [pc, #240]	@ (8003dec <HAL_TIM_Base_MspInit+0x14c>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	61fb      	str	r3, [r7, #28]
 8003d04:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d06:	2300      	movs	r3, #0
 8003d08:	61bb      	str	r3, [r7, #24]
 8003d0a:	4b38      	ldr	r3, [pc, #224]	@ (8003dec <HAL_TIM_Base_MspInit+0x14c>)
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0e:	4a37      	ldr	r2, [pc, #220]	@ (8003dec <HAL_TIM_Base_MspInit+0x14c>)
 8003d10:	f043 0308 	orr.w	r3, r3, #8
 8003d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d16:	4b35      	ldr	r3, [pc, #212]	@ (8003dec <HAL_TIM_Base_MspInit+0x14c>)
 8003d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	61bb      	str	r3, [r7, #24]
 8003d20:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003d22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d28:	2302      	movs	r3, #2
 8003d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d30:	2300      	movs	r3, #0
 8003d32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d34:	2302      	movs	r3, #2
 8003d36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	482d      	ldr	r0, [pc, #180]	@ (8003df4 <HAL_TIM_Base_MspInit+0x154>)
 8003d40:	f001 f8fc 	bl	8004f3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003d44:	2200      	movs	r2, #0
 8003d46:	2105      	movs	r1, #5
 8003d48:	201e      	movs	r0, #30
 8003d4a:	f001 f82e 	bl	8004daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003d4e:	201e      	movs	r0, #30
 8003d50:	f001 f847 	bl	8004de2 <HAL_NVIC_EnableIRQ>
}
 8003d54:	e044      	b.n	8003de0 <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM6)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a27      	ldr	r2, [pc, #156]	@ (8003df8 <HAL_TIM_Base_MspInit+0x158>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d10e      	bne.n	8003d7e <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	4b21      	ldr	r3, [pc, #132]	@ (8003dec <HAL_TIM_Base_MspInit+0x14c>)
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	4a20      	ldr	r2, [pc, #128]	@ (8003dec <HAL_TIM_Base_MspInit+0x14c>)
 8003d6a:	f043 0310 	orr.w	r3, r3, #16
 8003d6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d70:	4b1e      	ldr	r3, [pc, #120]	@ (8003dec <HAL_TIM_Base_MspInit+0x14c>)
 8003d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	697b      	ldr	r3, [r7, #20]
}
 8003d7c:	e030      	b.n	8003de0 <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM8)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a1e      	ldr	r2, [pc, #120]	@ (8003dfc <HAL_TIM_Base_MspInit+0x15c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d12b      	bne.n	8003de0 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003d88:	2300      	movs	r3, #0
 8003d8a:	613b      	str	r3, [r7, #16]
 8003d8c:	4b17      	ldr	r3, [pc, #92]	@ (8003dec <HAL_TIM_Base_MspInit+0x14c>)
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d90:	4a16      	ldr	r2, [pc, #88]	@ (8003dec <HAL_TIM_Base_MspInit+0x14c>)
 8003d92:	f043 0302 	orr.w	r3, r3, #2
 8003d96:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d98:	4b14      	ldr	r3, [pc, #80]	@ (8003dec <HAL_TIM_Base_MspInit+0x14c>)
 8003d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003da4:	2300      	movs	r3, #0
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	4b10      	ldr	r3, [pc, #64]	@ (8003dec <HAL_TIM_Base_MspInit+0x14c>)
 8003daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dac:	4a0f      	ldr	r2, [pc, #60]	@ (8003dec <HAL_TIM_Base_MspInit+0x14c>)
 8003dae:	f043 0304 	orr.w	r3, r3, #4
 8003db2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003db4:	4b0d      	ldr	r3, [pc, #52]	@ (8003dec <HAL_TIM_Base_MspInit+0x14c>)
 8003db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003dc0:	23c0      	movs	r3, #192	@ 0xc0
 8003dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4809      	ldr	r0, [pc, #36]	@ (8003e00 <HAL_TIM_Base_MspInit+0x160>)
 8003ddc:	f001 f8ae 	bl	8004f3c <HAL_GPIO_Init>
}
 8003de0:	bf00      	nop
 8003de2:	3738      	adds	r7, #56	@ 0x38
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40010000 	.word	0x40010000
 8003dec:	40023800 	.word	0x40023800
 8003df0:	40000800 	.word	0x40000800
 8003df4:	40020c00 	.word	0x40020c00
 8003df8:	40001000 	.word	0x40001000
 8003dfc:	40010400 	.word	0x40010400
 8003e00:	40020800 	.word	0x40020800

08003e04 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08c      	sub	sp, #48	@ 0x30
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e0c:	f107 031c 	add.w	r3, r7, #28
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	60da      	str	r2, [r3, #12]
 8003e1a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e24:	d14b      	bne.n	8003ebe <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	4b3f      	ldr	r3, [pc, #252]	@ (8003f28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2e:	4a3e      	ldr	r2, [pc, #248]	@ (8003f28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e36:	4b3c      	ldr	r3, [pc, #240]	@ (8003f28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	61bb      	str	r3, [r7, #24]
 8003e40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	4b38      	ldr	r3, [pc, #224]	@ (8003f28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4a:	4a37      	ldr	r2, [pc, #220]	@ (8003f28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e52:	4b35      	ldr	r3, [pc, #212]	@ (8003f28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	4b31      	ldr	r3, [pc, #196]	@ (8003f28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e66:	4a30      	ldr	r2, [pc, #192]	@ (8003f28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e68:	f043 0302 	orr.w	r3, r3, #2
 8003e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e6e:	4b2e      	ldr	r3, [pc, #184]	@ (8003f28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e80:	2302      	movs	r3, #2
 8003e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e90:	f107 031c 	add.w	r3, r7, #28
 8003e94:	4619      	mov	r1, r3
 8003e96:	4825      	ldr	r0, [pc, #148]	@ (8003f2c <HAL_TIM_Encoder_MspInit+0x128>)
 8003e98:	f001 f850 	bl	8004f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003e9c:	2308      	movs	r3, #8
 8003e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003eac:	2301      	movs	r3, #1
 8003eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eb0:	f107 031c 	add.w	r3, r7, #28
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	481e      	ldr	r0, [pc, #120]	@ (8003f30 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003eb8:	f001 f840 	bl	8004f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003ebc:	e030      	b.n	8003f20 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f34 <HAL_TIM_Encoder_MspInit+0x130>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d12b      	bne.n	8003f20 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	4b16      	ldr	r3, [pc, #88]	@ (8003f28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed0:	4a15      	ldr	r2, [pc, #84]	@ (8003f28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ed2:	f043 0302 	orr.w	r3, r3, #2
 8003ed6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ed8:	4b13      	ldr	r3, [pc, #76]	@ (8003f28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8003f28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eec:	4a0e      	ldr	r2, [pc, #56]	@ (8003f28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f00:	23c0      	movs	r3, #192	@ 0xc0
 8003f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f04:	2302      	movs	r3, #2
 8003f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f10:	2302      	movs	r3, #2
 8003f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f14:	f107 031c 	add.w	r3, r7, #28
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4804      	ldr	r0, [pc, #16]	@ (8003f2c <HAL_TIM_Encoder_MspInit+0x128>)
 8003f1c:	f001 f80e 	bl	8004f3c <HAL_GPIO_Init>
}
 8003f20:	bf00      	nop
 8003f22:	3730      	adds	r7, #48	@ 0x30
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	40020000 	.word	0x40020000
 8003f30:	40020400 	.word	0x40020400
 8003f34:	40000400 	.word	0x40000400

08003f38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f40:	f107 030c 	add.w	r3, r7, #12
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	605a      	str	r2, [r3, #4]
 8003f4a:	609a      	str	r2, [r3, #8]
 8003f4c:	60da      	str	r2, [r3, #12]
 8003f4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a12      	ldr	r2, [pc, #72]	@ (8003fa0 <HAL_TIM_MspPostInit+0x68>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d11e      	bne.n	8003f98 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	4b11      	ldr	r3, [pc, #68]	@ (8003fa4 <HAL_TIM_MspPostInit+0x6c>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	4a10      	ldr	r2, [pc, #64]	@ (8003fa4 <HAL_TIM_MspPostInit+0x6c>)
 8003f64:	f043 0310 	orr.w	r3, r3, #16
 8003f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa4 <HAL_TIM_MspPostInit+0x6c>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6e:	f003 0310 	and.w	r3, r3, #16
 8003f72:	60bb      	str	r3, [r7, #8]
 8003f74:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003f76:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003f7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f8c:	f107 030c 	add.w	r3, r7, #12
 8003f90:	4619      	mov	r1, r3
 8003f92:	4805      	ldr	r0, [pc, #20]	@ (8003fa8 <HAL_TIM_MspPostInit+0x70>)
 8003f94:	f000 ffd2 	bl	8004f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003f98:	bf00      	nop
 8003f9a:	3720      	adds	r7, #32
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40010000 	.word	0x40010000
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	40021000 	.word	0x40021000

08003fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	@ 0x28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb4:	f107 0314 	add.w	r3, r7, #20
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	605a      	str	r2, [r3, #4]
 8003fbe:	609a      	str	r2, [r3, #8]
 8003fc0:	60da      	str	r2, [r3, #12]
 8003fc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8004040 <HAL_UART_MspInit+0x94>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d134      	bne.n	8004038 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003fce:	2300      	movs	r3, #0
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8004044 <HAL_UART_MspInit+0x98>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8004044 <HAL_UART_MspInit+0x98>)
 8003fd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fde:	4b19      	ldr	r3, [pc, #100]	@ (8004044 <HAL_UART_MspInit+0x98>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	4b15      	ldr	r3, [pc, #84]	@ (8004044 <HAL_UART_MspInit+0x98>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff2:	4a14      	ldr	r2, [pc, #80]	@ (8004044 <HAL_UART_MspInit+0x98>)
 8003ff4:	f043 0304 	orr.w	r3, r3, #4
 8003ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ffa:	4b12      	ldr	r3, [pc, #72]	@ (8004044 <HAL_UART_MspInit+0x98>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004006:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800400a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800400c:	2302      	movs	r3, #2
 800400e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004010:	2300      	movs	r3, #0
 8004012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004014:	2303      	movs	r3, #3
 8004016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004018:	2307      	movs	r3, #7
 800401a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800401c:	f107 0314 	add.w	r3, r7, #20
 8004020:	4619      	mov	r1, r3
 8004022:	4809      	ldr	r0, [pc, #36]	@ (8004048 <HAL_UART_MspInit+0x9c>)
 8004024:	f000 ff8a 	bl	8004f3c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004028:	2200      	movs	r2, #0
 800402a:	2105      	movs	r1, #5
 800402c:	2027      	movs	r0, #39	@ 0x27
 800402e:	f000 febc 	bl	8004daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004032:	2027      	movs	r0, #39	@ 0x27
 8004034:	f000 fed5 	bl	8004de2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8004038:	bf00      	nop
 800403a:	3728      	adds	r7, #40	@ 0x28
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40004800 	.word	0x40004800
 8004044:	40023800 	.word	0x40023800
 8004048:	40020800 	.word	0x40020800

0800404c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004050:	bf00      	nop
 8004052:	e7fd      	b.n	8004050 <NMI_Handler+0x4>

08004054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004058:	bf00      	nop
 800405a:	e7fd      	b.n	8004058 <HardFault_Handler+0x4>

0800405c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004060:	bf00      	nop
 8004062:	e7fd      	b.n	8004060 <MemManage_Handler+0x4>

08004064 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004068:	bf00      	nop
 800406a:	e7fd      	b.n	8004068 <BusFault_Handler+0x4>

0800406c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004070:	bf00      	nop
 8004072:	e7fd      	b.n	8004070 <UsageFault_Handler+0x4>

08004074 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004078:	bf00      	nop
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004086:	f000 f971 	bl	800436c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800408a:	f007 fd29 	bl	800bae0 <xTaskGetSchedulerState>
 800408e:	4603      	mov	r3, r0
 8004090:	2b01      	cmp	r3, #1
 8004092:	d001      	beq.n	8004098 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004094:	f008 fb20 	bl	800c6d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004098:	bf00      	nop
 800409a:	bd80      	pop	{r7, pc}

0800409c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80040a0:	4802      	ldr	r0, [pc, #8]	@ (80040ac <TIM4_IRQHandler+0x10>)
 80040a2:	f003 fa67 	bl	8007574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80040a6:	bf00      	nop
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	200003f8 	.word	0x200003f8

080040b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80040b4:	4802      	ldr	r0, [pc, #8]	@ (80040c0 <USART3_IRQHandler+0x10>)
 80040b6:	f004 fc07 	bl	80088c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80040ba:	bf00      	nop
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	200004d0 	.word	0x200004d0

080040c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
	return 1;
 80040c8:	2301      	movs	r3, #1
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <_kill>:

int _kill(int pid, int sig)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80040de:	f009 fe3d 	bl	800dd5c <__errno>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2216      	movs	r2, #22
 80040e6:	601a      	str	r2, [r3, #0]
	return -1;
 80040e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <_exit>:

void _exit (int status)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80040fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff ffe7 	bl	80040d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004106:	bf00      	nop
 8004108:	e7fd      	b.n	8004106 <_exit+0x12>

0800410a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b086      	sub	sp, #24
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004116:	2300      	movs	r3, #0
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	e00a      	b.n	8004132 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800411c:	f3af 8000 	nop.w
 8004120:	4601      	mov	r1, r0
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	1c5a      	adds	r2, r3, #1
 8004126:	60ba      	str	r2, [r7, #8]
 8004128:	b2ca      	uxtb	r2, r1
 800412a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	3301      	adds	r3, #1
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	429a      	cmp	r2, r3
 8004138:	dbf0      	blt.n	800411c <_read+0x12>
	}

return len;
 800413a:	687b      	ldr	r3, [r7, #4]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	e009      	b.n	800416a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	60ba      	str	r2, [r7, #8]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	3301      	adds	r3, #1
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	429a      	cmp	r2, r3
 8004170:	dbf1      	blt.n	8004156 <_write+0x12>
	}
	return len;
 8004172:	687b      	ldr	r3, [r7, #4]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3718      	adds	r7, #24
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <_close>:

int _close(int file)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
	return -1;
 8004184:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004188:	4618      	mov	r0, r3
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80041a4:	605a      	str	r2, [r3, #4]
	return 0;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <_isatty>:

int _isatty(int file)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
	return 1;
 80041bc:	2301      	movs	r3, #1
}
 80041be:	4618      	mov	r0, r3
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b085      	sub	sp, #20
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	60f8      	str	r0, [r7, #12]
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	607a      	str	r2, [r7, #4]
	return 0;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041ec:	4a14      	ldr	r2, [pc, #80]	@ (8004240 <_sbrk+0x5c>)
 80041ee:	4b15      	ldr	r3, [pc, #84]	@ (8004244 <_sbrk+0x60>)
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041f8:	4b13      	ldr	r3, [pc, #76]	@ (8004248 <_sbrk+0x64>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d102      	bne.n	8004206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004200:	4b11      	ldr	r3, [pc, #68]	@ (8004248 <_sbrk+0x64>)
 8004202:	4a12      	ldr	r2, [pc, #72]	@ (800424c <_sbrk+0x68>)
 8004204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004206:	4b10      	ldr	r3, [pc, #64]	@ (8004248 <_sbrk+0x64>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4413      	add	r3, r2
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	429a      	cmp	r2, r3
 8004212:	d207      	bcs.n	8004224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004214:	f009 fda2 	bl	800dd5c <__errno>
 8004218:	4603      	mov	r3, r0
 800421a:	220c      	movs	r2, #12
 800421c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800421e:	f04f 33ff 	mov.w	r3, #4294967295
 8004222:	e009      	b.n	8004238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004224:	4b08      	ldr	r3, [pc, #32]	@ (8004248 <_sbrk+0x64>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800422a:	4b07      	ldr	r3, [pc, #28]	@ (8004248 <_sbrk+0x64>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4413      	add	r3, r2
 8004232:	4a05      	ldr	r2, [pc, #20]	@ (8004248 <_sbrk+0x64>)
 8004234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004236:	68fb      	ldr	r3, [r7, #12]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	20020000 	.word	0x20020000
 8004244:	00000400 	.word	0x00000400
 8004248:	200005f0 	.word	0x200005f0
 800424c:	200054a0 	.word	0x200054a0

08004250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004254:	4b06      	ldr	r3, [pc, #24]	@ (8004270 <SystemInit+0x20>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425a:	4a05      	ldr	r2, [pc, #20]	@ (8004270 <SystemInit+0x20>)
 800425c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004260:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004264:	bf00      	nop
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	e000ed00 	.word	0xe000ed00

08004274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004274:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80042ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004278:	480d      	ldr	r0, [pc, #52]	@ (80042b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800427a:	490e      	ldr	r1, [pc, #56]	@ (80042b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800427c:	4a0e      	ldr	r2, [pc, #56]	@ (80042b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800427e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004280:	e002      	b.n	8004288 <LoopCopyDataInit>

08004282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004282:	58d4      	ldr	r4, [r2, r3]
   str r4, [r0, r3]
 8004284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004286:	3304      	adds	r3, #4

08004288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800428a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800428c:	d3f9      	bcc.n	8004282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800428e:	4a0b      	ldr	r2, [pc, #44]	@ (80042bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004290:	4c0b      	ldr	r4, [pc, #44]	@ (80042c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004294:	e001      	b.n	800429a <LoopFillZerobss>

08004296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004298:	3204      	adds	r2, #4

0800429a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800429a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800429c:	d3fb      	bcc.n	8004296 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800429e:	f7ff ffd7 	bl	8004250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042a2:	f009 fd61 	bl	800dd68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042a6:	f7fe f96d 	bl	8002584 <main>
  bx  lr    
 80042aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80042ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042b4:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80042b8:	080113f0 	.word	0x080113f0
  ldr r2, =_sbss
 80042bc:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80042c0:	200054a0 	.word	0x200054a0

080042c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042c4:	e7fe      	b.n	80042c4 <ADC_IRQHandler>
	...

080042c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80042cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004308 <HAL_Init+0x40>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004308 <HAL_Init+0x40>)
 80042d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80042d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004308 <HAL_Init+0x40>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a0a      	ldr	r2, [pc, #40]	@ (8004308 <HAL_Init+0x40>)
 80042de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80042e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042e4:	4b08      	ldr	r3, [pc, #32]	@ (8004308 <HAL_Init+0x40>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a07      	ldr	r2, [pc, #28]	@ (8004308 <HAL_Init+0x40>)
 80042ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042f0:	2003      	movs	r0, #3
 80042f2:	f000 fd4f 	bl	8004d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042f6:	200f      	movs	r0, #15
 80042f8:	f000 f808 	bl	800430c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042fc:	f7ff fbe8 	bl	8003ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40023c00 	.word	0x40023c00

0800430c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004314:	4b12      	ldr	r3, [pc, #72]	@ (8004360 <HAL_InitTick+0x54>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	4b12      	ldr	r3, [pc, #72]	@ (8004364 <HAL_InitTick+0x58>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	4619      	mov	r1, r3
 800431e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004322:	fbb3 f3f1 	udiv	r3, r3, r1
 8004326:	fbb2 f3f3 	udiv	r3, r2, r3
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fd67 	bl	8004dfe <HAL_SYSTICK_Config>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e00e      	b.n	8004358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b0f      	cmp	r3, #15
 800433e:	d80a      	bhi.n	8004356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004340:	2200      	movs	r2, #0
 8004342:	6879      	ldr	r1, [r7, #4]
 8004344:	f04f 30ff 	mov.w	r0, #4294967295
 8004348:	f000 fd2f 	bl	8004daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800434c:	4a06      	ldr	r2, [pc, #24]	@ (8004368 <HAL_InitTick+0x5c>)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	e000      	b.n	8004358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
}
 8004358:	4618      	mov	r0, r3
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	20000024 	.word	0x20000024
 8004364:	2000002c 	.word	0x2000002c
 8004368:	20000028 	.word	0x20000028

0800436c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004370:	4b06      	ldr	r3, [pc, #24]	@ (800438c <HAL_IncTick+0x20>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	4b06      	ldr	r3, [pc, #24]	@ (8004390 <HAL_IncTick+0x24>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4413      	add	r3, r2
 800437c:	4a04      	ldr	r2, [pc, #16]	@ (8004390 <HAL_IncTick+0x24>)
 800437e:	6013      	str	r3, [r2, #0]
}
 8004380:	bf00      	nop
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	2000002c 	.word	0x2000002c
 8004390:	200005f4 	.word	0x200005f4

08004394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  return uwTick;
 8004398:	4b03      	ldr	r3, [pc, #12]	@ (80043a8 <HAL_GetTick+0x14>)
 800439a:	681b      	ldr	r3, [r3, #0]
}
 800439c:	4618      	mov	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	200005f4 	.word	0x200005f4

080043ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043b4:	f7ff ffee 	bl	8004394 <HAL_GetTick>
 80043b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c4:	d005      	beq.n	80043d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043c6:	4b0a      	ldr	r3, [pc, #40]	@ (80043f0 <HAL_Delay+0x44>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4413      	add	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80043d2:	bf00      	nop
 80043d4:	f7ff ffde 	bl	8004394 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d8f7      	bhi.n	80043d4 <HAL_Delay+0x28>
  {
  }
}
 80043e4:	bf00      	nop
 80043e6:	bf00      	nop
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	2000002c 	.word	0x2000002c

080043f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043fc:	2300      	movs	r3, #0
 80043fe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e033      	b.n	8004472 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	d109      	bne.n	8004426 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7ff fb88 	bl	8003b28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	f003 0310 	and.w	r3, r3, #16
 800442e:	2b00      	cmp	r3, #0
 8004430:	d118      	bne.n	8004464 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004436:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800443a:	f023 0302 	bic.w	r3, r3, #2
 800443e:	f043 0202 	orr.w	r2, r3, #2
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fad8 	bl	80049fc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	f023 0303 	bic.w	r3, r3, #3
 800445a:	f043 0201 	orr.w	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	641a      	str	r2, [r3, #64]	@ 0x40
 8004462:	e001      	b.n	8004468 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004470:	7bfb      	ldrb	r3, [r7, #15]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_ADC_Start+0x1a>
 8004492:	2302      	movs	r3, #2
 8004494:	e0b2      	b.n	80045fc <HAL_ADC_Start+0x180>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d018      	beq.n	80044de <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689a      	ldr	r2, [r3, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80044bc:	4b52      	ldr	r3, [pc, #328]	@ (8004608 <HAL_ADC_Start+0x18c>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a52      	ldr	r2, [pc, #328]	@ (800460c <HAL_ADC_Start+0x190>)
 80044c2:	fba2 2303 	umull	r2, r3, r2, r3
 80044c6:	0c9a      	lsrs	r2, r3, #18
 80044c8:	4613      	mov	r3, r2
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	4413      	add	r3, r2
 80044ce:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80044d0:	e002      	b.n	80044d8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f9      	bne.n	80044d2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d17a      	bne.n	80045e2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80044f4:	f023 0301 	bic.w	r3, r3, #1
 80044f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004512:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004516:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004522:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800452a:	d106      	bne.n	800453a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004530:	f023 0206 	bic.w	r2, r3, #6
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	645a      	str	r2, [r3, #68]	@ 0x44
 8004538:	e002      	b.n	8004540 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004548:	4b31      	ldr	r3, [pc, #196]	@ (8004610 <HAL_ADC_Start+0x194>)
 800454a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004554:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 031f 	and.w	r3, r3, #31
 800455e:	2b00      	cmp	r3, #0
 8004560:	d12a      	bne.n	80045b8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a2b      	ldr	r2, [pc, #172]	@ (8004614 <HAL_ADC_Start+0x198>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d015      	beq.n	8004598 <HAL_ADC_Start+0x11c>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a29      	ldr	r2, [pc, #164]	@ (8004618 <HAL_ADC_Start+0x19c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d105      	bne.n	8004582 <HAL_ADC_Start+0x106>
 8004576:	4b26      	ldr	r3, [pc, #152]	@ (8004610 <HAL_ADC_Start+0x194>)
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f003 031f 	and.w	r3, r3, #31
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a25      	ldr	r2, [pc, #148]	@ (800461c <HAL_ADC_Start+0x1a0>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d136      	bne.n	80045fa <HAL_ADC_Start+0x17e>
 800458c:	4b20      	ldr	r3, [pc, #128]	@ (8004610 <HAL_ADC_Start+0x194>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	2b00      	cmp	r3, #0
 8004596:	d130      	bne.n	80045fa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d129      	bne.n	80045fa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80045b4:	609a      	str	r2, [r3, #8]
 80045b6:	e020      	b.n	80045fa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a15      	ldr	r2, [pc, #84]	@ (8004614 <HAL_ADC_Start+0x198>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d11b      	bne.n	80045fa <HAL_ADC_Start+0x17e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d114      	bne.n	80045fa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80045de:	609a      	str	r2, [r3, #8]
 80045e0:	e00b      	b.n	80045fa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e6:	f043 0210 	orr.w	r2, r3, #16
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f2:	f043 0201 	orr.w	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	20000024 	.word	0x20000024
 800460c:	431bde83 	.word	0x431bde83
 8004610:	40012300 	.word	0x40012300
 8004614:	40012000 	.word	0x40012000
 8004618:	40012100 	.word	0x40012100
 800461c:	40012200 	.word	0x40012200

08004620 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <HAL_ADC_Stop+0x16>
 8004632:	2302      	movs	r3, #2
 8004634:	e021      	b.n	800467a <HAL_ADC_Stop+0x5a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0201 	bic.w	r2, r2, #1
 800464c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	d109      	bne.n	8004670 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004660:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	f043 0201 	orr.w	r2, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	370c      	adds	r7, #12
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800469e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046a2:	d113      	bne.n	80046cc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80046ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046b2:	d10b      	bne.n	80046cc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b8:	f043 0220 	orr.w	r2, r3, #32
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e063      	b.n	8004794 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80046cc:	f7ff fe62 	bl	8004394 <HAL_GetTick>
 80046d0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80046d2:	e021      	b.n	8004718 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046da:	d01d      	beq.n	8004718 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d007      	beq.n	80046f2 <HAL_ADC_PollForConversion+0x6c>
 80046e2:	f7ff fe57 	bl	8004394 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d212      	bcs.n	8004718 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d00b      	beq.n	8004718 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004704:	f043 0204 	orr.w	r2, r3, #4
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e03d      	b.n	8004794 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b02      	cmp	r3, #2
 8004724:	d1d6      	bne.n	80046d4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f06f 0212 	mvn.w	r2, #18
 800472e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004734:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d123      	bne.n	8004792 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800474e:	2b00      	cmp	r3, #0
 8004750:	d11f      	bne.n	8004792 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004758:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800475c:	2b00      	cmp	r3, #0
 800475e:	d006      	beq.n	800476e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800476a:	2b00      	cmp	r3, #0
 800476c:	d111      	bne.n	8004792 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004772:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d105      	bne.n	8004792 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478a:	f043 0201 	orr.w	r2, r3, #1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
	...

080047b8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_ADC_ConfigChannel+0x1c>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e105      	b.n	80049e0 <HAL_ADC_ConfigChannel+0x228>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b09      	cmp	r3, #9
 80047e2:	d925      	bls.n	8004830 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68d9      	ldr	r1, [r3, #12]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	461a      	mov	r2, r3
 80047f2:	4613      	mov	r3, r2
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	4413      	add	r3, r2
 80047f8:	3b1e      	subs	r3, #30
 80047fa:	2207      	movs	r2, #7
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	43da      	mvns	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	400a      	ands	r2, r1
 8004808:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68d9      	ldr	r1, [r3, #12]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	b29b      	uxth	r3, r3
 800481a:	4618      	mov	r0, r3
 800481c:	4603      	mov	r3, r0
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	4403      	add	r3, r0
 8004822:	3b1e      	subs	r3, #30
 8004824:	409a      	lsls	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	60da      	str	r2, [r3, #12]
 800482e:	e022      	b.n	8004876 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6919      	ldr	r1, [r3, #16]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	b29b      	uxth	r3, r3
 800483c:	461a      	mov	r2, r3
 800483e:	4613      	mov	r3, r2
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	4413      	add	r3, r2
 8004844:	2207      	movs	r2, #7
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43da      	mvns	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	400a      	ands	r2, r1
 8004852:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6919      	ldr	r1, [r3, #16]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	b29b      	uxth	r3, r3
 8004864:	4618      	mov	r0, r3
 8004866:	4603      	mov	r3, r0
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	4403      	add	r3, r0
 800486c:	409a      	lsls	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b06      	cmp	r3, #6
 800487c:	d824      	bhi.n	80048c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	3b05      	subs	r3, #5
 8004890:	221f      	movs	r2, #31
 8004892:	fa02 f303 	lsl.w	r3, r2, r3
 8004896:	43da      	mvns	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	400a      	ands	r2, r1
 800489e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	4618      	mov	r0, r3
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	3b05      	subs	r3, #5
 80048ba:	fa00 f203 	lsl.w	r2, r0, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80048c6:	e04c      	b.n	8004962 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b0c      	cmp	r3, #12
 80048ce:	d824      	bhi.n	800491a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	3b23      	subs	r3, #35	@ 0x23
 80048e2:	221f      	movs	r2, #31
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	43da      	mvns	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	400a      	ands	r2, r1
 80048f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	4618      	mov	r0, r3
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	3b23      	subs	r3, #35	@ 0x23
 800490c:	fa00 f203 	lsl.w	r2, r0, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	631a      	str	r2, [r3, #48]	@ 0x30
 8004918:	e023      	b.n	8004962 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	3b41      	subs	r3, #65	@ 0x41
 800492c:	221f      	movs	r2, #31
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	43da      	mvns	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	400a      	ands	r2, r1
 800493a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	b29b      	uxth	r3, r3
 8004948:	4618      	mov	r0, r3
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	3b41      	subs	r3, #65	@ 0x41
 8004956:	fa00 f203 	lsl.w	r2, r0, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004962:	4b22      	ldr	r3, [pc, #136]	@ (80049ec <HAL_ADC_ConfigChannel+0x234>)
 8004964:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a21      	ldr	r2, [pc, #132]	@ (80049f0 <HAL_ADC_ConfigChannel+0x238>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d109      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x1cc>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b12      	cmp	r3, #18
 8004976:	d105      	bne.n	8004984 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a19      	ldr	r2, [pc, #100]	@ (80049f0 <HAL_ADC_ConfigChannel+0x238>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d123      	bne.n	80049d6 <HAL_ADC_ConfigChannel+0x21e>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b10      	cmp	r3, #16
 8004994:	d003      	beq.n	800499e <HAL_ADC_ConfigChannel+0x1e6>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b11      	cmp	r3, #17
 800499c:	d11b      	bne.n	80049d6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b10      	cmp	r3, #16
 80049b0:	d111      	bne.n	80049d6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80049b2:	4b10      	ldr	r3, [pc, #64]	@ (80049f4 <HAL_ADC_ConfigChannel+0x23c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a10      	ldr	r2, [pc, #64]	@ (80049f8 <HAL_ADC_ConfigChannel+0x240>)
 80049b8:	fba2 2303 	umull	r2, r3, r2, r3
 80049bc:	0c9a      	lsrs	r2, r3, #18
 80049be:	4613      	mov	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80049c8:	e002      	b.n	80049d0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f9      	bne.n	80049ca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	40012300 	.word	0x40012300
 80049f0:	40012000 	.word	0x40012000
 80049f4:	20000024 	.word	0x20000024
 80049f8:	431bde83 	.word	0x431bde83

080049fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a04:	4b79      	ldr	r3, [pc, #484]	@ (8004bec <ADC_Init+0x1f0>)
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6859      	ldr	r1, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	021a      	lsls	r2, r3, #8
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004a54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6859      	ldr	r1, [r3, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6899      	ldr	r1, [r3, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8e:	4a58      	ldr	r2, [pc, #352]	@ (8004bf0 <ADC_Init+0x1f4>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d022      	beq.n	8004ada <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004aa2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6899      	ldr	r1, [r3, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004ac4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6899      	ldr	r1, [r3, #8]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	609a      	str	r2, [r3, #8]
 8004ad8:	e00f      	b.n	8004afa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004ae8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004af8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0202 	bic.w	r2, r2, #2
 8004b08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6899      	ldr	r1, [r3, #8]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	7e1b      	ldrb	r3, [r3, #24]
 8004b14:	005a      	lsls	r2, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d01b      	beq.n	8004b60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b36:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004b46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6859      	ldr	r1, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b52:	3b01      	subs	r3, #1
 8004b54:	035a      	lsls	r2, r3, #13
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]
 8004b5e:	e007      	b.n	8004b70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b6e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69db      	ldr	r3, [r3, #28]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	051a      	lsls	r2, r3, #20
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004ba4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6899      	ldr	r1, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004bb2:	025a      	lsls	r2, r3, #9
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6899      	ldr	r1, [r3, #8]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	029a      	lsls	r2, r3, #10
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	609a      	str	r2, [r3, #8]
}
 8004be0:	bf00      	nop
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	40012300 	.word	0x40012300
 8004bf0:	0f000001 	.word	0x0f000001

08004bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c04:	4b0c      	ldr	r3, [pc, #48]	@ (8004c38 <__NVIC_SetPriorityGrouping+0x44>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c10:	4013      	ands	r3, r2
 8004c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c26:	4a04      	ldr	r2, [pc, #16]	@ (8004c38 <__NVIC_SetPriorityGrouping+0x44>)
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	60d3      	str	r3, [r2, #12]
}
 8004c2c:	bf00      	nop
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	e000ed00 	.word	0xe000ed00

08004c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c40:	4b04      	ldr	r3, [pc, #16]	@ (8004c54 <__NVIC_GetPriorityGrouping+0x18>)
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	0a1b      	lsrs	r3, r3, #8
 8004c46:	f003 0307 	and.w	r3, r3, #7
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	e000ed00 	.word	0xe000ed00

08004c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	db0b      	blt.n	8004c82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c6a:	79fb      	ldrb	r3, [r7, #7]
 8004c6c:	f003 021f 	and.w	r2, r3, #31
 8004c70:	4907      	ldr	r1, [pc, #28]	@ (8004c90 <__NVIC_EnableIRQ+0x38>)
 8004c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c76:	095b      	lsrs	r3, r3, #5
 8004c78:	2001      	movs	r0, #1
 8004c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	e000e100 	.word	0xe000e100

08004c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	6039      	str	r1, [r7, #0]
 8004c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	db0a      	blt.n	8004cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	490c      	ldr	r1, [pc, #48]	@ (8004ce0 <__NVIC_SetPriority+0x4c>)
 8004cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cb2:	0112      	lsls	r2, r2, #4
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	440b      	add	r3, r1
 8004cb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004cbc:	e00a      	b.n	8004cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	4908      	ldr	r1, [pc, #32]	@ (8004ce4 <__NVIC_SetPriority+0x50>)
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	3b04      	subs	r3, #4
 8004ccc:	0112      	lsls	r2, r2, #4
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	761a      	strb	r2, [r3, #24]
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	e000e100 	.word	0xe000e100
 8004ce4:	e000ed00 	.word	0xe000ed00

08004ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b089      	sub	sp, #36	@ 0x24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	f1c3 0307 	rsb	r3, r3, #7
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	bf28      	it	cs
 8004d06:	2304      	movcs	r3, #4
 8004d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	2b06      	cmp	r3, #6
 8004d10:	d902      	bls.n	8004d18 <NVIC_EncodePriority+0x30>
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	3b03      	subs	r3, #3
 8004d16:	e000      	b.n	8004d1a <NVIC_EncodePriority+0x32>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	43da      	mvns	r2, r3
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	401a      	ands	r2, r3
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d30:	f04f 31ff 	mov.w	r1, #4294967295
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3a:	43d9      	mvns	r1, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d40:	4313      	orrs	r3, r2
         );
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3724      	adds	r7, #36	@ 0x24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
	...

08004d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d60:	d301      	bcc.n	8004d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d62:	2301      	movs	r3, #1
 8004d64:	e00f      	b.n	8004d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d66:	4a0a      	ldr	r2, [pc, #40]	@ (8004d90 <SysTick_Config+0x40>)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d6e:	210f      	movs	r1, #15
 8004d70:	f04f 30ff 	mov.w	r0, #4294967295
 8004d74:	f7ff ff8e 	bl	8004c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d78:	4b05      	ldr	r3, [pc, #20]	@ (8004d90 <SysTick_Config+0x40>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d7e:	4b04      	ldr	r3, [pc, #16]	@ (8004d90 <SysTick_Config+0x40>)
 8004d80:	2207      	movs	r2, #7
 8004d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	e000e010 	.word	0xe000e010

08004d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7ff ff29 	bl	8004bf4 <__NVIC_SetPriorityGrouping>
}
 8004da2:	bf00      	nop
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b086      	sub	sp, #24
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	4603      	mov	r3, r0
 8004db2:	60b9      	str	r1, [r7, #8]
 8004db4:	607a      	str	r2, [r7, #4]
 8004db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004dbc:	f7ff ff3e 	bl	8004c3c <__NVIC_GetPriorityGrouping>
 8004dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	68b9      	ldr	r1, [r7, #8]
 8004dc6:	6978      	ldr	r0, [r7, #20]
 8004dc8:	f7ff ff8e 	bl	8004ce8 <NVIC_EncodePriority>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff ff5d 	bl	8004c94 <__NVIC_SetPriority>
}
 8004dda:	bf00      	nop
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b082      	sub	sp, #8
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	4603      	mov	r3, r0
 8004dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df0:	4618      	mov	r0, r3
 8004df2:	f7ff ff31 	bl	8004c58 <__NVIC_EnableIRQ>
}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b082      	sub	sp, #8
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7ff ffa2 	bl	8004d50 <SysTick_Config>
 8004e0c:	4603      	mov	r3, r0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e22:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004e24:	f7ff fab6 	bl	8004394 <HAL_GetTick>
 8004e28:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d008      	beq.n	8004e48 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2280      	movs	r2, #128	@ 0x80
 8004e3a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e052      	b.n	8004eee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0216 	bic.w	r2, r2, #22
 8004e56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	695a      	ldr	r2, [r3, #20]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e66:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d103      	bne.n	8004e78 <HAL_DMA_Abort+0x62>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d007      	beq.n	8004e88 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0208 	bic.w	r2, r2, #8
 8004e86:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0201 	bic.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e98:	e013      	b.n	8004ec2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e9a:	f7ff fa7b 	bl	8004394 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b05      	cmp	r3, #5
 8004ea6:	d90c      	bls.n	8004ec2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2203      	movs	r2, #3
 8004eb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e015      	b.n	8004eee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1e4      	bne.n	8004e9a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ed4:	223f      	movs	r2, #63	@ 0x3f
 8004ed6:	409a      	lsls	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d004      	beq.n	8004f14 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2280      	movs	r2, #128	@ 0x80
 8004f0e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e00c      	b.n	8004f2e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2205      	movs	r2, #5
 8004f18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0201 	bic.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
	...

08004f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b089      	sub	sp, #36	@ 0x24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f52:	2300      	movs	r3, #0
 8004f54:	61fb      	str	r3, [r7, #28]
 8004f56:	e16b      	b.n	8005230 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004f58:	2201      	movs	r2, #1
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	f040 815a 	bne.w	800522a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f003 0303 	and.w	r3, r3, #3
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d005      	beq.n	8004f8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d130      	bne.n	8004ff0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	2203      	movs	r2, #3
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	091b      	lsrs	r3, r3, #4
 8004fda:	f003 0201 	and.w	r2, r3, #1
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f003 0303 	and.w	r3, r3, #3
 8004ff8:	2b03      	cmp	r3, #3
 8004ffa:	d017      	beq.n	800502c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	2203      	movs	r2, #3
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	43db      	mvns	r3, r3
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	4013      	ands	r3, r2
 8005012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	4313      	orrs	r3, r2
 8005024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f003 0303 	and.w	r3, r3, #3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d123      	bne.n	8005080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	08da      	lsrs	r2, r3, #3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3208      	adds	r2, #8
 8005040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	220f      	movs	r2, #15
 8005050:	fa02 f303 	lsl.w	r3, r2, r3
 8005054:	43db      	mvns	r3, r3
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	4013      	ands	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	fa02 f303 	lsl.w	r3, r2, r3
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	4313      	orrs	r3, r2
 8005070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	08da      	lsrs	r2, r3, #3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	3208      	adds	r2, #8
 800507a:	69b9      	ldr	r1, [r7, #24]
 800507c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	2203      	movs	r2, #3
 800508c:	fa02 f303 	lsl.w	r3, r2, r3
 8005090:	43db      	mvns	r3, r3
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	4013      	ands	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f003 0203 	and.w	r2, r3, #3
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69ba      	ldr	r2, [r7, #24]
 80050b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 80b4 	beq.w	800522a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]
 80050c6:	4b60      	ldr	r3, [pc, #384]	@ (8005248 <HAL_GPIO_Init+0x30c>)
 80050c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ca:	4a5f      	ldr	r2, [pc, #380]	@ (8005248 <HAL_GPIO_Init+0x30c>)
 80050cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80050d2:	4b5d      	ldr	r3, [pc, #372]	@ (8005248 <HAL_GPIO_Init+0x30c>)
 80050d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050de:	4a5b      	ldr	r2, [pc, #364]	@ (800524c <HAL_GPIO_Init+0x310>)
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	089b      	lsrs	r3, r3, #2
 80050e4:	3302      	adds	r3, #2
 80050e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	220f      	movs	r2, #15
 80050f6:	fa02 f303 	lsl.w	r3, r2, r3
 80050fa:	43db      	mvns	r3, r3
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	4013      	ands	r3, r2
 8005100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a52      	ldr	r2, [pc, #328]	@ (8005250 <HAL_GPIO_Init+0x314>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d02b      	beq.n	8005162 <HAL_GPIO_Init+0x226>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a51      	ldr	r2, [pc, #324]	@ (8005254 <HAL_GPIO_Init+0x318>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d025      	beq.n	800515e <HAL_GPIO_Init+0x222>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a50      	ldr	r2, [pc, #320]	@ (8005258 <HAL_GPIO_Init+0x31c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d01f      	beq.n	800515a <HAL_GPIO_Init+0x21e>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a4f      	ldr	r2, [pc, #316]	@ (800525c <HAL_GPIO_Init+0x320>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d019      	beq.n	8005156 <HAL_GPIO_Init+0x21a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a4e      	ldr	r2, [pc, #312]	@ (8005260 <HAL_GPIO_Init+0x324>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d013      	beq.n	8005152 <HAL_GPIO_Init+0x216>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a4d      	ldr	r2, [pc, #308]	@ (8005264 <HAL_GPIO_Init+0x328>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d00d      	beq.n	800514e <HAL_GPIO_Init+0x212>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a4c      	ldr	r2, [pc, #304]	@ (8005268 <HAL_GPIO_Init+0x32c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d007      	beq.n	800514a <HAL_GPIO_Init+0x20e>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a4b      	ldr	r2, [pc, #300]	@ (800526c <HAL_GPIO_Init+0x330>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d101      	bne.n	8005146 <HAL_GPIO_Init+0x20a>
 8005142:	2307      	movs	r3, #7
 8005144:	e00e      	b.n	8005164 <HAL_GPIO_Init+0x228>
 8005146:	2308      	movs	r3, #8
 8005148:	e00c      	b.n	8005164 <HAL_GPIO_Init+0x228>
 800514a:	2306      	movs	r3, #6
 800514c:	e00a      	b.n	8005164 <HAL_GPIO_Init+0x228>
 800514e:	2305      	movs	r3, #5
 8005150:	e008      	b.n	8005164 <HAL_GPIO_Init+0x228>
 8005152:	2304      	movs	r3, #4
 8005154:	e006      	b.n	8005164 <HAL_GPIO_Init+0x228>
 8005156:	2303      	movs	r3, #3
 8005158:	e004      	b.n	8005164 <HAL_GPIO_Init+0x228>
 800515a:	2302      	movs	r3, #2
 800515c:	e002      	b.n	8005164 <HAL_GPIO_Init+0x228>
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <HAL_GPIO_Init+0x228>
 8005162:	2300      	movs	r3, #0
 8005164:	69fa      	ldr	r2, [r7, #28]
 8005166:	f002 0203 	and.w	r2, r2, #3
 800516a:	0092      	lsls	r2, r2, #2
 800516c:	4093      	lsls	r3, r2
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	4313      	orrs	r3, r2
 8005172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005174:	4935      	ldr	r1, [pc, #212]	@ (800524c <HAL_GPIO_Init+0x310>)
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	089b      	lsrs	r3, r3, #2
 800517a:	3302      	adds	r3, #2
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005182:	4b3b      	ldr	r3, [pc, #236]	@ (8005270 <HAL_GPIO_Init+0x334>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	43db      	mvns	r3, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4013      	ands	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051a6:	4a32      	ldr	r2, [pc, #200]	@ (8005270 <HAL_GPIO_Init+0x334>)
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051ac:	4b30      	ldr	r3, [pc, #192]	@ (8005270 <HAL_GPIO_Init+0x334>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	43db      	mvns	r3, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4013      	ands	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d003      	beq.n	80051d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051d0:	4a27      	ldr	r2, [pc, #156]	@ (8005270 <HAL_GPIO_Init+0x334>)
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80051d6:	4b26      	ldr	r3, [pc, #152]	@ (8005270 <HAL_GPIO_Init+0x334>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	43db      	mvns	r3, r3
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	4013      	ands	r3, r2
 80051e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80051fa:	4a1d      	ldr	r2, [pc, #116]	@ (8005270 <HAL_GPIO_Init+0x334>)
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005200:	4b1b      	ldr	r3, [pc, #108]	@ (8005270 <HAL_GPIO_Init+0x334>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	43db      	mvns	r3, r3
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	4013      	ands	r3, r2
 800520e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005224:	4a12      	ldr	r2, [pc, #72]	@ (8005270 <HAL_GPIO_Init+0x334>)
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	3301      	adds	r3, #1
 800522e:	61fb      	str	r3, [r7, #28]
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	2b0f      	cmp	r3, #15
 8005234:	f67f ae90 	bls.w	8004f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005238:	bf00      	nop
 800523a:	bf00      	nop
 800523c:	3724      	adds	r7, #36	@ 0x24
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40023800 	.word	0x40023800
 800524c:	40013800 	.word	0x40013800
 8005250:	40020000 	.word	0x40020000
 8005254:	40020400 	.word	0x40020400
 8005258:	40020800 	.word	0x40020800
 800525c:	40020c00 	.word	0x40020c00
 8005260:	40021000 	.word	0x40021000
 8005264:	40021400 	.word	0x40021400
 8005268:	40021800 	.word	0x40021800
 800526c:	40021c00 	.word	0x40021c00
 8005270:	40013c00 	.word	0x40013c00

08005274 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	887b      	ldrh	r3, [r7, #2]
 8005286:	4013      	ands	r3, r2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800528c:	2301      	movs	r3, #1
 800528e:	73fb      	strb	r3, [r7, #15]
 8005290:	e001      	b.n	8005296 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005292:	2300      	movs	r3, #0
 8005294:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005296:	7bfb      	ldrb	r3, [r7, #15]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3714      	adds	r7, #20
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	460b      	mov	r3, r1
 80052ae:	807b      	strh	r3, [r7, #2]
 80052b0:	4613      	mov	r3, r2
 80052b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052b4:	787b      	ldrb	r3, [r7, #1]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052ba:	887a      	ldrh	r2, [r7, #2]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80052c0:	e003      	b.n	80052ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80052c2:	887b      	ldrh	r3, [r7, #2]
 80052c4:	041a      	lsls	r2, r3, #16
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	619a      	str	r2, [r3, #24]
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b085      	sub	sp, #20
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	460b      	mov	r3, r1
 80052e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80052e8:	887a      	ldrh	r2, [r7, #2]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4013      	ands	r3, r2
 80052ee:	041a      	lsls	r2, r3, #16
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	43d9      	mvns	r1, r3
 80052f4:	887b      	ldrh	r3, [r7, #2]
 80052f6:	400b      	ands	r3, r1
 80052f8:	431a      	orrs	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	619a      	str	r2, [r3, #24]
}
 80052fe:	bf00      	nop
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
	...

0800530c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e12b      	b.n	8005576 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005324:	b2db      	uxtb	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d106      	bne.n	8005338 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7fe fc6c 	bl	8003c10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2224      	movs	r2, #36	@ 0x24
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0201 	bic.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800535e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800536e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005370:	f001 fc48 	bl	8006c04 <HAL_RCC_GetPCLK1Freq>
 8005374:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	4a81      	ldr	r2, [pc, #516]	@ (8005580 <HAL_I2C_Init+0x274>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d807      	bhi.n	8005390 <HAL_I2C_Init+0x84>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4a80      	ldr	r2, [pc, #512]	@ (8005584 <HAL_I2C_Init+0x278>)
 8005384:	4293      	cmp	r3, r2
 8005386:	bf94      	ite	ls
 8005388:	2301      	movls	r3, #1
 800538a:	2300      	movhi	r3, #0
 800538c:	b2db      	uxtb	r3, r3
 800538e:	e006      	b.n	800539e <HAL_I2C_Init+0x92>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4a7d      	ldr	r2, [pc, #500]	@ (8005588 <HAL_I2C_Init+0x27c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	bf94      	ite	ls
 8005398:	2301      	movls	r3, #1
 800539a:	2300      	movhi	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e0e7      	b.n	8005576 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4a78      	ldr	r2, [pc, #480]	@ (800558c <HAL_I2C_Init+0x280>)
 80053aa:	fba2 2303 	umull	r2, r3, r2, r3
 80053ae:	0c9b      	lsrs	r3, r3, #18
 80053b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	4a6a      	ldr	r2, [pc, #424]	@ (8005580 <HAL_I2C_Init+0x274>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d802      	bhi.n	80053e0 <HAL_I2C_Init+0xd4>
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	3301      	adds	r3, #1
 80053de:	e009      	b.n	80053f4 <HAL_I2C_Init+0xe8>
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80053e6:	fb02 f303 	mul.w	r3, r2, r3
 80053ea:	4a69      	ldr	r2, [pc, #420]	@ (8005590 <HAL_I2C_Init+0x284>)
 80053ec:	fba2 2303 	umull	r2, r3, r2, r3
 80053f0:	099b      	lsrs	r3, r3, #6
 80053f2:	3301      	adds	r3, #1
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6812      	ldr	r2, [r2, #0]
 80053f8:	430b      	orrs	r3, r1
 80053fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005406:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	495c      	ldr	r1, [pc, #368]	@ (8005580 <HAL_I2C_Init+0x274>)
 8005410:	428b      	cmp	r3, r1
 8005412:	d819      	bhi.n	8005448 <HAL_I2C_Init+0x13c>
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	1e59      	subs	r1, r3, #1
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005422:	1c59      	adds	r1, r3, #1
 8005424:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005428:	400b      	ands	r3, r1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00a      	beq.n	8005444 <HAL_I2C_Init+0x138>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1e59      	subs	r1, r3, #1
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	fbb1 f3f3 	udiv	r3, r1, r3
 800543c:	3301      	adds	r3, #1
 800543e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005442:	e051      	b.n	80054e8 <HAL_I2C_Init+0x1dc>
 8005444:	2304      	movs	r3, #4
 8005446:	e04f      	b.n	80054e8 <HAL_I2C_Init+0x1dc>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d111      	bne.n	8005474 <HAL_I2C_Init+0x168>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	1e58      	subs	r0, r3, #1
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6859      	ldr	r1, [r3, #4]
 8005458:	460b      	mov	r3, r1
 800545a:	005b      	lsls	r3, r3, #1
 800545c:	440b      	add	r3, r1
 800545e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005462:	3301      	adds	r3, #1
 8005464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005468:	2b00      	cmp	r3, #0
 800546a:	bf0c      	ite	eq
 800546c:	2301      	moveq	r3, #1
 800546e:	2300      	movne	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	e012      	b.n	800549a <HAL_I2C_Init+0x18e>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	1e58      	subs	r0, r3, #1
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6859      	ldr	r1, [r3, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	440b      	add	r3, r1
 8005482:	0099      	lsls	r1, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	fbb0 f3f3 	udiv	r3, r0, r3
 800548a:	3301      	adds	r3, #1
 800548c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005490:	2b00      	cmp	r3, #0
 8005492:	bf0c      	ite	eq
 8005494:	2301      	moveq	r3, #1
 8005496:	2300      	movne	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <HAL_I2C_Init+0x196>
 800549e:	2301      	movs	r3, #1
 80054a0:	e022      	b.n	80054e8 <HAL_I2C_Init+0x1dc>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10e      	bne.n	80054c8 <HAL_I2C_Init+0x1bc>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	1e58      	subs	r0, r3, #1
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6859      	ldr	r1, [r3, #4]
 80054b2:	460b      	mov	r3, r1
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	440b      	add	r3, r1
 80054b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80054bc:	3301      	adds	r3, #1
 80054be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054c6:	e00f      	b.n	80054e8 <HAL_I2C_Init+0x1dc>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	1e58      	subs	r0, r3, #1
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6859      	ldr	r1, [r3, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	440b      	add	r3, r1
 80054d6:	0099      	lsls	r1, r3, #2
 80054d8:	440b      	add	r3, r1
 80054da:	fbb0 f3f3 	udiv	r3, r0, r3
 80054de:	3301      	adds	r3, #1
 80054e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	6809      	ldr	r1, [r1, #0]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69da      	ldr	r2, [r3, #28]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005516:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6911      	ldr	r1, [r2, #16]
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	68d2      	ldr	r2, [r2, #12]
 8005522:	4311      	orrs	r1, r2
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6812      	ldr	r2, [r2, #0]
 8005528:	430b      	orrs	r3, r1
 800552a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695a      	ldr	r2, [r3, #20]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	431a      	orrs	r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	430a      	orrs	r2, r1
 8005546:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0201 	orr.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2220      	movs	r2, #32
 8005562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	000186a0 	.word	0x000186a0
 8005584:	001e847f 	.word	0x001e847f
 8005588:	003d08ff 	.word	0x003d08ff
 800558c:	431bde83 	.word	0x431bde83
 8005590:	10624dd3 	.word	0x10624dd3

08005594 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af02      	add	r7, sp, #8
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	4608      	mov	r0, r1
 800559e:	4611      	mov	r1, r2
 80055a0:	461a      	mov	r2, r3
 80055a2:	4603      	mov	r3, r0
 80055a4:	817b      	strh	r3, [r7, #10]
 80055a6:	460b      	mov	r3, r1
 80055a8:	813b      	strh	r3, [r7, #8]
 80055aa:	4613      	mov	r3, r2
 80055ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055ae:	f7fe fef1 	bl	8004394 <HAL_GetTick>
 80055b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b20      	cmp	r3, #32
 80055be:	f040 80d9 	bne.w	8005774 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	2319      	movs	r3, #25
 80055c8:	2201      	movs	r2, #1
 80055ca:	496d      	ldr	r1, [pc, #436]	@ (8005780 <HAL_I2C_Mem_Write+0x1ec>)
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 fc8b 	bl	8005ee8 <I2C_WaitOnFlagUntilTimeout>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80055d8:	2302      	movs	r3, #2
 80055da:	e0cc      	b.n	8005776 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d101      	bne.n	80055ea <HAL_I2C_Mem_Write+0x56>
 80055e6:	2302      	movs	r3, #2
 80055e8:	e0c5      	b.n	8005776 <HAL_I2C_Mem_Write+0x1e2>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d007      	beq.n	8005610 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800561e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2221      	movs	r2, #33	@ 0x21
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2240      	movs	r2, #64	@ 0x40
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a3a      	ldr	r2, [r7, #32]
 800563a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005640:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005646:	b29a      	uxth	r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4a4d      	ldr	r2, [pc, #308]	@ (8005784 <HAL_I2C_Mem_Write+0x1f0>)
 8005650:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005652:	88f8      	ldrh	r0, [r7, #6]
 8005654:	893a      	ldrh	r2, [r7, #8]
 8005656:	8979      	ldrh	r1, [r7, #10]
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	9301      	str	r3, [sp, #4]
 800565c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	4603      	mov	r3, r0
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f000 fac2 	bl	8005bec <I2C_RequestMemoryWrite>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d052      	beq.n	8005714 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e081      	b.n	8005776 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 fd50 	bl	800611c <I2C_WaitOnTXEFlagUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00d      	beq.n	800569e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005686:	2b04      	cmp	r3, #4
 8005688:	d107      	bne.n	800569a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005698:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e06b      	b.n	8005776 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a2:	781a      	ldrb	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b04      	cmp	r3, #4
 80056da:	d11b      	bne.n	8005714 <HAL_I2C_Mem_Write+0x180>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d017      	beq.n	8005714 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e8:	781a      	ldrb	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f4:	1c5a      	adds	r2, r3, #1
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056fe:	3b01      	subs	r3, #1
 8005700:	b29a      	uxth	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800570a:	b29b      	uxth	r3, r3
 800570c:	3b01      	subs	r3, #1
 800570e:	b29a      	uxth	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1aa      	bne.n	8005672 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f000 fd43 	bl	80061ac <I2C_WaitOnBTFFlagUntilTimeout>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00d      	beq.n	8005748 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005730:	2b04      	cmp	r3, #4
 8005732:	d107      	bne.n	8005744 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005742:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e016      	b.n	8005776 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005756:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	e000      	b.n	8005776 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005774:	2302      	movs	r3, #2
  }
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	00100002 	.word	0x00100002
 8005784:	ffff0000 	.word	0xffff0000

08005788 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b08c      	sub	sp, #48	@ 0x30
 800578c:	af02      	add	r7, sp, #8
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	4608      	mov	r0, r1
 8005792:	4611      	mov	r1, r2
 8005794:	461a      	mov	r2, r3
 8005796:	4603      	mov	r3, r0
 8005798:	817b      	strh	r3, [r7, #10]
 800579a:	460b      	mov	r3, r1
 800579c:	813b      	strh	r3, [r7, #8]
 800579e:	4613      	mov	r3, r2
 80057a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057a2:	f7fe fdf7 	bl	8004394 <HAL_GetTick>
 80057a6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	f040 8214 	bne.w	8005bde <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	2319      	movs	r3, #25
 80057bc:	2201      	movs	r2, #1
 80057be:	497b      	ldr	r1, [pc, #492]	@ (80059ac <HAL_I2C_Mem_Read+0x224>)
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 fb91 	bl	8005ee8 <I2C_WaitOnFlagUntilTimeout>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d001      	beq.n	80057d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80057cc:	2302      	movs	r3, #2
 80057ce:	e207      	b.n	8005be0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d101      	bne.n	80057de <HAL_I2C_Mem_Read+0x56>
 80057da:	2302      	movs	r3, #2
 80057dc:	e200      	b.n	8005be0 <HAL_I2C_Mem_Read+0x458>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d007      	beq.n	8005804 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0201 	orr.w	r2, r2, #1
 8005802:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005812:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2222      	movs	r2, #34	@ 0x22
 8005818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2240      	movs	r2, #64	@ 0x40
 8005820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800582e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005834:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4a5b      	ldr	r2, [pc, #364]	@ (80059b0 <HAL_I2C_Mem_Read+0x228>)
 8005844:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005846:	88f8      	ldrh	r0, [r7, #6]
 8005848:	893a      	ldrh	r2, [r7, #8]
 800584a:	8979      	ldrh	r1, [r7, #10]
 800584c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584e:	9301      	str	r3, [sp, #4]
 8005850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	4603      	mov	r3, r0
 8005856:	68f8      	ldr	r0, [r7, #12]
 8005858:	f000 fa5e 	bl	8005d18 <I2C_RequestMemoryRead>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e1bc      	b.n	8005be0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800586a:	2b00      	cmp	r3, #0
 800586c:	d113      	bne.n	8005896 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800586e:	2300      	movs	r3, #0
 8005870:	623b      	str	r3, [r7, #32]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	623b      	str	r3, [r7, #32]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	623b      	str	r3, [r7, #32]
 8005882:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	e190      	b.n	8005bb8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800589a:	2b01      	cmp	r3, #1
 800589c:	d11b      	bne.n	80058d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ae:	2300      	movs	r3, #0
 80058b0:	61fb      	str	r3, [r7, #28]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	61fb      	str	r3, [r7, #28]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	61fb      	str	r3, [r7, #28]
 80058c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	e170      	b.n	8005bb8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d11b      	bne.n	8005916 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058fe:	2300      	movs	r3, #0
 8005900:	61bb      	str	r3, [r7, #24]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	61bb      	str	r3, [r7, #24]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	61bb      	str	r3, [r7, #24]
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	e150      	b.n	8005bb8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005916:	2300      	movs	r3, #0
 8005918:	617b      	str	r3, [r7, #20]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	617b      	str	r3, [r7, #20]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	617b      	str	r3, [r7, #20]
 800592a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800592c:	e144      	b.n	8005bb8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005932:	2b03      	cmp	r3, #3
 8005934:	f200 80f1 	bhi.w	8005b1a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800593c:	2b01      	cmp	r3, #1
 800593e:	d123      	bne.n	8005988 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005942:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 fc79 	bl	800623c <I2C_WaitOnRXNEFlagUntilTimeout>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e145      	b.n	8005be0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691a      	ldr	r2, [r3, #16]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595e:	b2d2      	uxtb	r2, r2
 8005960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005970:	3b01      	subs	r3, #1
 8005972:	b29a      	uxth	r2, r3
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800597c:	b29b      	uxth	r3, r3
 800597e:	3b01      	subs	r3, #1
 8005980:	b29a      	uxth	r2, r3
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005986:	e117      	b.n	8005bb8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800598c:	2b02      	cmp	r3, #2
 800598e:	d14e      	bne.n	8005a2e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005996:	2200      	movs	r2, #0
 8005998:	4906      	ldr	r1, [pc, #24]	@ (80059b4 <HAL_I2C_Mem_Read+0x22c>)
 800599a:	68f8      	ldr	r0, [r7, #12]
 800599c:	f000 faa4 	bl	8005ee8 <I2C_WaitOnFlagUntilTimeout>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d008      	beq.n	80059b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e11a      	b.n	8005be0 <HAL_I2C_Mem_Read+0x458>
 80059aa:	bf00      	nop
 80059ac:	00100002 	.word	0x00100002
 80059b0:	ffff0000 	.word	0xffff0000
 80059b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691a      	ldr	r2, [r3, #16]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d2:	b2d2      	uxtb	r2, r2
 80059d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	3b01      	subs	r3, #1
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	691a      	ldr	r2, [r3, #16]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a16:	3b01      	subs	r3, #1
 8005a18:	b29a      	uxth	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	3b01      	subs	r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005a2c:	e0c4      	b.n	8005bb8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a34:	2200      	movs	r2, #0
 8005a36:	496c      	ldr	r1, [pc, #432]	@ (8005be8 <HAL_I2C_Mem_Read+0x460>)
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 fa55 	bl	8005ee8 <I2C_WaitOnFlagUntilTimeout>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e0cb      	b.n	8005be0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	691a      	ldr	r2, [r3, #16]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a62:	b2d2      	uxtb	r2, r2
 8005a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a74:	3b01      	subs	r3, #1
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	3b01      	subs	r3, #1
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a90:	2200      	movs	r2, #0
 8005a92:	4955      	ldr	r1, [pc, #340]	@ (8005be8 <HAL_I2C_Mem_Read+0x460>)
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 fa27 	bl	8005ee8 <I2C_WaitOnFlagUntilTimeout>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e09d      	b.n	8005be0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ab2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005abe:	b2d2      	uxtb	r2, r2
 8005ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b02:	3b01      	subs	r3, #1
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005b18:	e04e      	b.n	8005bb8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b1c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 fb8c 	bl	800623c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e058      	b.n	8005be0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	691a      	ldr	r2, [r3, #16]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b38:	b2d2      	uxtb	r2, r2
 8005b3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b40:	1c5a      	adds	r2, r3, #1
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d124      	bne.n	8005bb8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b72:	2b03      	cmp	r3, #3
 8005b74:	d107      	bne.n	8005b86 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b84:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691a      	ldr	r2, [r3, #16]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b90:	b2d2      	uxtb	r2, r2
 8005b92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f47f aeb6 	bne.w	800592e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	e000      	b.n	8005be0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005bde:	2302      	movs	r3, #2
  }
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3728      	adds	r7, #40	@ 0x28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	00010004 	.word	0x00010004

08005bec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b088      	sub	sp, #32
 8005bf0:	af02      	add	r7, sp, #8
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	4608      	mov	r0, r1
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	817b      	strh	r3, [r7, #10]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	813b      	strh	r3, [r7, #8]
 8005c02:	4613      	mov	r3, r2
 8005c04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 f960 	bl	8005ee8 <I2C_WaitOnFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00d      	beq.n	8005c4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c3c:	d103      	bne.n	8005c46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e05f      	b.n	8005d0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c4a:	897b      	ldrh	r3, [r7, #10]
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	461a      	mov	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005c58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5c:	6a3a      	ldr	r2, [r7, #32]
 8005c5e:	492d      	ldr	r1, [pc, #180]	@ (8005d14 <I2C_RequestMemoryWrite+0x128>)
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 f9bb 	bl	8005fdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e04c      	b.n	8005d0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c70:	2300      	movs	r3, #0
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c88:	6a39      	ldr	r1, [r7, #32]
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 fa46 	bl	800611c <I2C_WaitOnTXEFlagUntilTimeout>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00d      	beq.n	8005cb2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d107      	bne.n	8005cae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e02b      	b.n	8005d0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005cb2:	88fb      	ldrh	r3, [r7, #6]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d105      	bne.n	8005cc4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cb8:	893b      	ldrh	r3, [r7, #8]
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	611a      	str	r2, [r3, #16]
 8005cc2:	e021      	b.n	8005d08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005cc4:	893b      	ldrh	r3, [r7, #8]
 8005cc6:	0a1b      	lsrs	r3, r3, #8
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cd4:	6a39      	ldr	r1, [r7, #32]
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 fa20 	bl	800611c <I2C_WaitOnTXEFlagUntilTimeout>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00d      	beq.n	8005cfe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d107      	bne.n	8005cfa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cf8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e005      	b.n	8005d0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cfe:	893b      	ldrh	r3, [r7, #8]
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3718      	adds	r7, #24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	00010002 	.word	0x00010002

08005d18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b088      	sub	sp, #32
 8005d1c:	af02      	add	r7, sp, #8
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	4608      	mov	r0, r1
 8005d22:	4611      	mov	r1, r2
 8005d24:	461a      	mov	r2, r3
 8005d26:	4603      	mov	r3, r0
 8005d28:	817b      	strh	r3, [r7, #10]
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	813b      	strh	r3, [r7, #8]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 f8c2 	bl	8005ee8 <I2C_WaitOnFlagUntilTimeout>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00d      	beq.n	8005d86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d78:	d103      	bne.n	8005d82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e0aa      	b.n	8005edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d86:	897b      	ldrh	r3, [r7, #10]
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	6a3a      	ldr	r2, [r7, #32]
 8005d9a:	4952      	ldr	r1, [pc, #328]	@ (8005ee4 <I2C_RequestMemoryRead+0x1cc>)
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f000 f91d 	bl	8005fdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e097      	b.n	8005edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dac:	2300      	movs	r3, #0
 8005dae:	617b      	str	r3, [r7, #20]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	617b      	str	r3, [r7, #20]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dc4:	6a39      	ldr	r1, [r7, #32]
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 f9a8 	bl	800611c <I2C_WaitOnTXEFlagUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00d      	beq.n	8005dee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	d107      	bne.n	8005dea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005de8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e076      	b.n	8005edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005dee:	88fb      	ldrh	r3, [r7, #6]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d105      	bne.n	8005e00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005df4:	893b      	ldrh	r3, [r7, #8]
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	611a      	str	r2, [r3, #16]
 8005dfe:	e021      	b.n	8005e44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e00:	893b      	ldrh	r3, [r7, #8]
 8005e02:	0a1b      	lsrs	r3, r3, #8
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e10:	6a39      	ldr	r1, [r7, #32]
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 f982 	bl	800611c <I2C_WaitOnTXEFlagUntilTimeout>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00d      	beq.n	8005e3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e22:	2b04      	cmp	r3, #4
 8005e24:	d107      	bne.n	8005e36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e050      	b.n	8005edc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e3a:	893b      	ldrh	r3, [r7, #8]
 8005e3c:	b2da      	uxtb	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e46:	6a39      	ldr	r1, [r7, #32]
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 f967 	bl	800611c <I2C_WaitOnTXEFlagUntilTimeout>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00d      	beq.n	8005e70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d107      	bne.n	8005e6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e035      	b.n	8005edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e82:	9300      	str	r3, [sp, #0]
 8005e84:	6a3b      	ldr	r3, [r7, #32]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f000 f82b 	bl	8005ee8 <I2C_WaitOnFlagUntilTimeout>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00d      	beq.n	8005eb4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ea6:	d103      	bne.n	8005eb0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e013      	b.n	8005edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005eb4:	897b      	ldrh	r3, [r7, #10]
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	f043 0301 	orr.w	r3, r3, #1
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec6:	6a3a      	ldr	r2, [r7, #32]
 8005ec8:	4906      	ldr	r1, [pc, #24]	@ (8005ee4 <I2C_RequestMemoryRead+0x1cc>)
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f000 f886 	bl	8005fdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e000      	b.n	8005edc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	00010002 	.word	0x00010002

08005ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	603b      	str	r3, [r7, #0]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ef8:	e048      	b.n	8005f8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f00:	d044      	beq.n	8005f8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f02:	f7fe fa47 	bl	8004394 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d302      	bcc.n	8005f18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d139      	bne.n	8005f8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	0c1b      	lsrs	r3, r3, #16
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d10d      	bne.n	8005f3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	43da      	mvns	r2, r3
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	bf0c      	ite	eq
 8005f34:	2301      	moveq	r3, #1
 8005f36:	2300      	movne	r3, #0
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	e00c      	b.n	8005f58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	43da      	mvns	r2, r3
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	4013      	ands	r3, r2
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	bf0c      	ite	eq
 8005f50:	2301      	moveq	r3, #1
 8005f52:	2300      	movne	r3, #0
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	461a      	mov	r2, r3
 8005f58:	79fb      	ldrb	r3, [r7, #7]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d116      	bne.n	8005f8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f78:	f043 0220 	orr.w	r2, r3, #32
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e023      	b.n	8005fd4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	0c1b      	lsrs	r3, r3, #16
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d10d      	bne.n	8005fb2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	43da      	mvns	r2, r3
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	bf0c      	ite	eq
 8005fa8:	2301      	moveq	r3, #1
 8005faa:	2300      	movne	r3, #0
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	461a      	mov	r2, r3
 8005fb0:	e00c      	b.n	8005fcc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	43da      	mvns	r2, r3
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	bf0c      	ite	eq
 8005fc4:	2301      	moveq	r3, #1
 8005fc6:	2300      	movne	r3, #0
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	461a      	mov	r2, r3
 8005fcc:	79fb      	ldrb	r3, [r7, #7]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d093      	beq.n	8005efa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fea:	e071      	b.n	80060d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ffa:	d123      	bne.n	8006044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800600a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006014:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2220      	movs	r2, #32
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006030:	f043 0204 	orr.w	r2, r3, #4
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e067      	b.n	8006114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604a:	d041      	beq.n	80060d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800604c:	f7fe f9a2 	bl	8004394 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	429a      	cmp	r2, r3
 800605a:	d302      	bcc.n	8006062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d136      	bne.n	80060d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	0c1b      	lsrs	r3, r3, #16
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b01      	cmp	r3, #1
 800606a:	d10c      	bne.n	8006086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	43da      	mvns	r2, r3
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4013      	ands	r3, r2
 8006078:	b29b      	uxth	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	bf14      	ite	ne
 800607e:	2301      	movne	r3, #1
 8006080:	2300      	moveq	r3, #0
 8006082:	b2db      	uxtb	r3, r3
 8006084:	e00b      	b.n	800609e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	43da      	mvns	r2, r3
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	4013      	ands	r3, r2
 8006092:	b29b      	uxth	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	bf14      	ite	ne
 8006098:	2301      	movne	r3, #1
 800609a:	2300      	moveq	r3, #0
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d016      	beq.n	80060d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060bc:	f043 0220 	orr.w	r2, r3, #32
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e021      	b.n	8006114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	0c1b      	lsrs	r3, r3, #16
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d10c      	bne.n	80060f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	43da      	mvns	r2, r3
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	4013      	ands	r3, r2
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	bf14      	ite	ne
 80060ec:	2301      	movne	r3, #1
 80060ee:	2300      	moveq	r3, #0
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	e00b      	b.n	800610c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	43da      	mvns	r2, r3
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	4013      	ands	r3, r2
 8006100:	b29b      	uxth	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	bf14      	ite	ne
 8006106:	2301      	movne	r3, #1
 8006108:	2300      	moveq	r3, #0
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	f47f af6d 	bne.w	8005fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006128:	e034      	b.n	8006194 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 f8e3 	bl	80062f6 <I2C_IsAcknowledgeFailed>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e034      	b.n	80061a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006140:	d028      	beq.n	8006194 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006142:	f7fe f927 	bl	8004394 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	429a      	cmp	r2, r3
 8006150:	d302      	bcc.n	8006158 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d11d      	bne.n	8006194 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006162:	2b80      	cmp	r3, #128	@ 0x80
 8006164:	d016      	beq.n	8006194 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2220      	movs	r2, #32
 8006170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006180:	f043 0220 	orr.w	r2, r3, #32
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e007      	b.n	80061a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800619e:	2b80      	cmp	r3, #128	@ 0x80
 80061a0:	d1c3      	bne.n	800612a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061b8:	e034      	b.n	8006224 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 f89b 	bl	80062f6 <I2C_IsAcknowledgeFailed>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e034      	b.n	8006234 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d0:	d028      	beq.n	8006224 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d2:	f7fe f8df 	bl	8004394 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d302      	bcc.n	80061e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d11d      	bne.n	8006224 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	f003 0304 	and.w	r3, r3, #4
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d016      	beq.n	8006224 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2220      	movs	r2, #32
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006210:	f043 0220 	orr.w	r2, r3, #32
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e007      	b.n	8006234 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	f003 0304 	and.w	r3, r3, #4
 800622e:	2b04      	cmp	r3, #4
 8006230:	d1c3      	bne.n	80061ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006248:	e049      	b.n	80062de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	f003 0310 	and.w	r3, r3, #16
 8006254:	2b10      	cmp	r3, #16
 8006256:	d119      	bne.n	800628c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f06f 0210 	mvn.w	r2, #16
 8006260:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2220      	movs	r2, #32
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e030      	b.n	80062ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800628c:	f7fe f882 	bl	8004394 <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	429a      	cmp	r2, r3
 800629a:	d302      	bcc.n	80062a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d11d      	bne.n	80062de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	695b      	ldr	r3, [r3, #20]
 80062a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ac:	2b40      	cmp	r3, #64	@ 0x40
 80062ae:	d016      	beq.n	80062de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2220      	movs	r2, #32
 80062ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ca:	f043 0220 	orr.w	r2, r3, #32
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e007      	b.n	80062ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e8:	2b40      	cmp	r3, #64	@ 0x40
 80062ea:	d1ae      	bne.n	800624a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006308:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800630c:	d11b      	bne.n	8006346 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006316:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2220      	movs	r2, #32
 8006322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006332:	f043 0204 	orr.w	r2, r3, #4
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e000      	b.n	8006348 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800635a:	4b06      	ldr	r3, [pc, #24]	@ (8006374 <HAL_PWR_EnableBkUpAccess+0x20>)
 800635c:	2201      	movs	r2, #1
 800635e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006360:	4b05      	ldr	r3, [pc, #20]	@ (8006378 <HAL_PWR_EnableBkUpAccess+0x24>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006366:	687b      	ldr	r3, [r7, #4]
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	420e0020 	.word	0x420e0020
 8006378:	40007000 	.word	0x40007000

0800637c <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8006382:	4b06      	ldr	r3, [pc, #24]	@ (800639c <HAL_PWR_DisableBkUpAccess+0x20>)
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006388:	4b05      	ldr	r3, [pc, #20]	@ (80063a0 <HAL_PWR_DisableBkUpAccess+0x24>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800638e:	687b      	ldr	r3, [r7, #4]
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	420e0020 	.word	0x420e0020
 80063a0:	40007000 	.word	0x40007000

080063a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e267      	b.n	8006886 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0301 	and.w	r3, r3, #1
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d075      	beq.n	80064ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80063c2:	4b88      	ldr	r3, [pc, #544]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f003 030c 	and.w	r3, r3, #12
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d00c      	beq.n	80063e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063ce:	4b85      	ldr	r3, [pc, #532]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80063d6:	2b08      	cmp	r3, #8
 80063d8:	d112      	bne.n	8006400 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063da:	4b82      	ldr	r3, [pc, #520]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80063e6:	d10b      	bne.n	8006400 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063e8:	4b7e      	ldr	r3, [pc, #504]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d05b      	beq.n	80064ac <HAL_RCC_OscConfig+0x108>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d157      	bne.n	80064ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e242      	b.n	8006886 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006408:	d106      	bne.n	8006418 <HAL_RCC_OscConfig+0x74>
 800640a:	4b76      	ldr	r3, [pc, #472]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a75      	ldr	r2, [pc, #468]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 8006410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	e01d      	b.n	8006454 <HAL_RCC_OscConfig+0xb0>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006420:	d10c      	bne.n	800643c <HAL_RCC_OscConfig+0x98>
 8006422:	4b70      	ldr	r3, [pc, #448]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a6f      	ldr	r2, [pc, #444]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 8006428:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	4b6d      	ldr	r3, [pc, #436]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a6c      	ldr	r2, [pc, #432]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 8006434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	e00b      	b.n	8006454 <HAL_RCC_OscConfig+0xb0>
 800643c:	4b69      	ldr	r3, [pc, #420]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a68      	ldr	r2, [pc, #416]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 8006442:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006446:	6013      	str	r3, [r2, #0]
 8006448:	4b66      	ldr	r3, [pc, #408]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a65      	ldr	r2, [pc, #404]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 800644e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d013      	beq.n	8006484 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800645c:	f7fd ff9a 	bl	8004394 <HAL_GetTick>
 8006460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006462:	e008      	b.n	8006476 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006464:	f7fd ff96 	bl	8004394 <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	2b64      	cmp	r3, #100	@ 0x64
 8006470:	d901      	bls.n	8006476 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e207      	b.n	8006886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006476:	4b5b      	ldr	r3, [pc, #364]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d0f0      	beq.n	8006464 <HAL_RCC_OscConfig+0xc0>
 8006482:	e014      	b.n	80064ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006484:	f7fd ff86 	bl	8004394 <HAL_GetTick>
 8006488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800648a:	e008      	b.n	800649e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800648c:	f7fd ff82 	bl	8004394 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b64      	cmp	r3, #100	@ 0x64
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e1f3      	b.n	8006886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800649e:	4b51      	ldr	r3, [pc, #324]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1f0      	bne.n	800648c <HAL_RCC_OscConfig+0xe8>
 80064aa:	e000      	b.n	80064ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0302 	and.w	r3, r3, #2
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d063      	beq.n	8006582 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80064ba:	4b4a      	ldr	r3, [pc, #296]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f003 030c 	and.w	r3, r3, #12
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00b      	beq.n	80064de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064c6:	4b47      	ldr	r3, [pc, #284]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80064ce:	2b08      	cmp	r3, #8
 80064d0:	d11c      	bne.n	800650c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064d2:	4b44      	ldr	r3, [pc, #272]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d116      	bne.n	800650c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064de:	4b41      	ldr	r3, [pc, #260]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d005      	beq.n	80064f6 <HAL_RCC_OscConfig+0x152>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d001      	beq.n	80064f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e1c7      	b.n	8006886 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f6:	4b3b      	ldr	r3, [pc, #236]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	4937      	ldr	r1, [pc, #220]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 8006506:	4313      	orrs	r3, r2
 8006508:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800650a:	e03a      	b.n	8006582 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d020      	beq.n	8006556 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006514:	4b34      	ldr	r3, [pc, #208]	@ (80065e8 <HAL_RCC_OscConfig+0x244>)
 8006516:	2201      	movs	r2, #1
 8006518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800651a:	f7fd ff3b 	bl	8004394 <HAL_GetTick>
 800651e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006520:	e008      	b.n	8006534 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006522:	f7fd ff37 	bl	8004394 <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d901      	bls.n	8006534 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e1a8      	b.n	8006886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006534:	4b2b      	ldr	r3, [pc, #172]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0302 	and.w	r3, r3, #2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d0f0      	beq.n	8006522 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006540:	4b28      	ldr	r3, [pc, #160]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	4925      	ldr	r1, [pc, #148]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 8006550:	4313      	orrs	r3, r2
 8006552:	600b      	str	r3, [r1, #0]
 8006554:	e015      	b.n	8006582 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006556:	4b24      	ldr	r3, [pc, #144]	@ (80065e8 <HAL_RCC_OscConfig+0x244>)
 8006558:	2200      	movs	r2, #0
 800655a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800655c:	f7fd ff1a 	bl	8004394 <HAL_GetTick>
 8006560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006562:	e008      	b.n	8006576 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006564:	f7fd ff16 	bl	8004394 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	2b02      	cmp	r3, #2
 8006570:	d901      	bls.n	8006576 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e187      	b.n	8006886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006576:	4b1b      	ldr	r3, [pc, #108]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1f0      	bne.n	8006564 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	2b00      	cmp	r3, #0
 800658c:	d036      	beq.n	80065fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d016      	beq.n	80065c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006596:	4b15      	ldr	r3, [pc, #84]	@ (80065ec <HAL_RCC_OscConfig+0x248>)
 8006598:	2201      	movs	r2, #1
 800659a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800659c:	f7fd fefa 	bl	8004394 <HAL_GetTick>
 80065a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065a2:	e008      	b.n	80065b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065a4:	f7fd fef6 	bl	8004394 <HAL_GetTick>
 80065a8:	4602      	mov	r2, r0
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e167      	b.n	8006886 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065b6:	4b0b      	ldr	r3, [pc, #44]	@ (80065e4 <HAL_RCC_OscConfig+0x240>)
 80065b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d0f0      	beq.n	80065a4 <HAL_RCC_OscConfig+0x200>
 80065c2:	e01b      	b.n	80065fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065c4:	4b09      	ldr	r3, [pc, #36]	@ (80065ec <HAL_RCC_OscConfig+0x248>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ca:	f7fd fee3 	bl	8004394 <HAL_GetTick>
 80065ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065d0:	e00e      	b.n	80065f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065d2:	f7fd fedf 	bl	8004394 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d907      	bls.n	80065f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e150      	b.n	8006886 <HAL_RCC_OscConfig+0x4e2>
 80065e4:	40023800 	.word	0x40023800
 80065e8:	42470000 	.word	0x42470000
 80065ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065f0:	4b88      	ldr	r3, [pc, #544]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 80065f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1ea      	bne.n	80065d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 8097 	beq.w	8006738 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800660a:	2300      	movs	r3, #0
 800660c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800660e:	4b81      	ldr	r3, [pc, #516]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 8006610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10f      	bne.n	800663a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800661a:	2300      	movs	r3, #0
 800661c:	60bb      	str	r3, [r7, #8]
 800661e:	4b7d      	ldr	r3, [pc, #500]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 8006620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006622:	4a7c      	ldr	r2, [pc, #496]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 8006624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006628:	6413      	str	r3, [r2, #64]	@ 0x40
 800662a:	4b7a      	ldr	r3, [pc, #488]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 800662c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800662e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006632:	60bb      	str	r3, [r7, #8]
 8006634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006636:	2301      	movs	r3, #1
 8006638:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800663a:	4b77      	ldr	r3, [pc, #476]	@ (8006818 <HAL_RCC_OscConfig+0x474>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006642:	2b00      	cmp	r3, #0
 8006644:	d118      	bne.n	8006678 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006646:	4b74      	ldr	r3, [pc, #464]	@ (8006818 <HAL_RCC_OscConfig+0x474>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a73      	ldr	r2, [pc, #460]	@ (8006818 <HAL_RCC_OscConfig+0x474>)
 800664c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006652:	f7fd fe9f 	bl	8004394 <HAL_GetTick>
 8006656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006658:	e008      	b.n	800666c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800665a:	f7fd fe9b 	bl	8004394 <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b02      	cmp	r3, #2
 8006666:	d901      	bls.n	800666c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e10c      	b.n	8006886 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800666c:	4b6a      	ldr	r3, [pc, #424]	@ (8006818 <HAL_RCC_OscConfig+0x474>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0f0      	beq.n	800665a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d106      	bne.n	800668e <HAL_RCC_OscConfig+0x2ea>
 8006680:	4b64      	ldr	r3, [pc, #400]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 8006682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006684:	4a63      	ldr	r2, [pc, #396]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 8006686:	f043 0301 	orr.w	r3, r3, #1
 800668a:	6713      	str	r3, [r2, #112]	@ 0x70
 800668c:	e01c      	b.n	80066c8 <HAL_RCC_OscConfig+0x324>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	2b05      	cmp	r3, #5
 8006694:	d10c      	bne.n	80066b0 <HAL_RCC_OscConfig+0x30c>
 8006696:	4b5f      	ldr	r3, [pc, #380]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 8006698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800669a:	4a5e      	ldr	r2, [pc, #376]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 800669c:	f043 0304 	orr.w	r3, r3, #4
 80066a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80066a2:	4b5c      	ldr	r3, [pc, #368]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 80066a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066a6:	4a5b      	ldr	r2, [pc, #364]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 80066a8:	f043 0301 	orr.w	r3, r3, #1
 80066ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80066ae:	e00b      	b.n	80066c8 <HAL_RCC_OscConfig+0x324>
 80066b0:	4b58      	ldr	r3, [pc, #352]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 80066b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b4:	4a57      	ldr	r2, [pc, #348]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 80066b6:	f023 0301 	bic.w	r3, r3, #1
 80066ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80066bc:	4b55      	ldr	r3, [pc, #340]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 80066be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066c0:	4a54      	ldr	r2, [pc, #336]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 80066c2:	f023 0304 	bic.w	r3, r3, #4
 80066c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d015      	beq.n	80066fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066d0:	f7fd fe60 	bl	8004394 <HAL_GetTick>
 80066d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066d6:	e00a      	b.n	80066ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066d8:	f7fd fe5c 	bl	8004394 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d901      	bls.n	80066ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e0cb      	b.n	8006886 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066ee:	4b49      	ldr	r3, [pc, #292]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 80066f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d0ee      	beq.n	80066d8 <HAL_RCC_OscConfig+0x334>
 80066fa:	e014      	b.n	8006726 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066fc:	f7fd fe4a 	bl	8004394 <HAL_GetTick>
 8006700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006702:	e00a      	b.n	800671a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006704:	f7fd fe46 	bl	8004394 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006712:	4293      	cmp	r3, r2
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e0b5      	b.n	8006886 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800671a:	4b3e      	ldr	r3, [pc, #248]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 800671c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1ee      	bne.n	8006704 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006726:	7dfb      	ldrb	r3, [r7, #23]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d105      	bne.n	8006738 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800672c:	4b39      	ldr	r3, [pc, #228]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 800672e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006730:	4a38      	ldr	r2, [pc, #224]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 8006732:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006736:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	2b00      	cmp	r3, #0
 800673e:	f000 80a1 	beq.w	8006884 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006742:	4b34      	ldr	r3, [pc, #208]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 030c 	and.w	r3, r3, #12
 800674a:	2b08      	cmp	r3, #8
 800674c:	d05c      	beq.n	8006808 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	2b02      	cmp	r3, #2
 8006754:	d141      	bne.n	80067da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006756:	4b31      	ldr	r3, [pc, #196]	@ (800681c <HAL_RCC_OscConfig+0x478>)
 8006758:	2200      	movs	r2, #0
 800675a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800675c:	f7fd fe1a 	bl	8004394 <HAL_GetTick>
 8006760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006762:	e008      	b.n	8006776 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006764:	f7fd fe16 	bl	8004394 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	2b02      	cmp	r3, #2
 8006770:	d901      	bls.n	8006776 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006772:	2303      	movs	r3, #3
 8006774:	e087      	b.n	8006886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006776:	4b27      	ldr	r3, [pc, #156]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1f0      	bne.n	8006764 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	69da      	ldr	r2, [r3, #28]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006790:	019b      	lsls	r3, r3, #6
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006798:	085b      	lsrs	r3, r3, #1
 800679a:	3b01      	subs	r3, #1
 800679c:	041b      	lsls	r3, r3, #16
 800679e:	431a      	orrs	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a4:	061b      	lsls	r3, r3, #24
 80067a6:	491b      	ldr	r1, [pc, #108]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067ac:	4b1b      	ldr	r3, [pc, #108]	@ (800681c <HAL_RCC_OscConfig+0x478>)
 80067ae:	2201      	movs	r2, #1
 80067b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b2:	f7fd fdef 	bl	8004394 <HAL_GetTick>
 80067b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067b8:	e008      	b.n	80067cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067ba:	f7fd fdeb 	bl	8004394 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d901      	bls.n	80067cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e05c      	b.n	8006886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067cc:	4b11      	ldr	r3, [pc, #68]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d0f0      	beq.n	80067ba <HAL_RCC_OscConfig+0x416>
 80067d8:	e054      	b.n	8006884 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067da:	4b10      	ldr	r3, [pc, #64]	@ (800681c <HAL_RCC_OscConfig+0x478>)
 80067dc:	2200      	movs	r2, #0
 80067de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e0:	f7fd fdd8 	bl	8004394 <HAL_GetTick>
 80067e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067e6:	e008      	b.n	80067fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067e8:	f7fd fdd4 	bl	8004394 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e045      	b.n	8006886 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067fa:	4b06      	ldr	r3, [pc, #24]	@ (8006814 <HAL_RCC_OscConfig+0x470>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1f0      	bne.n	80067e8 <HAL_RCC_OscConfig+0x444>
 8006806:	e03d      	b.n	8006884 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d107      	bne.n	8006820 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e038      	b.n	8006886 <HAL_RCC_OscConfig+0x4e2>
 8006814:	40023800 	.word	0x40023800
 8006818:	40007000 	.word	0x40007000
 800681c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006820:	4b1b      	ldr	r3, [pc, #108]	@ (8006890 <HAL_RCC_OscConfig+0x4ec>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d028      	beq.n	8006880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006838:	429a      	cmp	r2, r3
 800683a:	d121      	bne.n	8006880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006846:	429a      	cmp	r2, r3
 8006848:	d11a      	bne.n	8006880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006850:	4013      	ands	r3, r2
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006856:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006858:	4293      	cmp	r3, r2
 800685a:	d111      	bne.n	8006880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006866:	085b      	lsrs	r3, r3, #1
 8006868:	3b01      	subs	r3, #1
 800686a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800686c:	429a      	cmp	r2, r3
 800686e:	d107      	bne.n	8006880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800687c:	429a      	cmp	r2, r3
 800687e:	d001      	beq.n	8006884 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	e000      	b.n	8006886 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	40023800 	.word	0x40023800

08006894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e0cc      	b.n	8006a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068a8:	4b68      	ldr	r3, [pc, #416]	@ (8006a4c <HAL_RCC_ClockConfig+0x1b8>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0307 	and.w	r3, r3, #7
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d90c      	bls.n	80068d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068b6:	4b65      	ldr	r3, [pc, #404]	@ (8006a4c <HAL_RCC_ClockConfig+0x1b8>)
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068be:	4b63      	ldr	r3, [pc, #396]	@ (8006a4c <HAL_RCC_ClockConfig+0x1b8>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0307 	and.w	r3, r3, #7
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d001      	beq.n	80068d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e0b8      	b.n	8006a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d020      	beq.n	800691e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0304 	and.w	r3, r3, #4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d005      	beq.n	80068f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068e8:	4b59      	ldr	r3, [pc, #356]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	4a58      	ldr	r2, [pc, #352]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 80068ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80068f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0308 	and.w	r3, r3, #8
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d005      	beq.n	800690c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006900:	4b53      	ldr	r3, [pc, #332]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	4a52      	ldr	r2, [pc, #328]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 8006906:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800690a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800690c:	4b50      	ldr	r3, [pc, #320]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	494d      	ldr	r1, [pc, #308]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 800691a:	4313      	orrs	r3, r2
 800691c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d044      	beq.n	80069b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d107      	bne.n	8006942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006932:	4b47      	ldr	r3, [pc, #284]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d119      	bne.n	8006972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e07f      	b.n	8006a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	2b02      	cmp	r3, #2
 8006948:	d003      	beq.n	8006952 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800694e:	2b03      	cmp	r3, #3
 8006950:	d107      	bne.n	8006962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006952:	4b3f      	ldr	r3, [pc, #252]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d109      	bne.n	8006972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e06f      	b.n	8006a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006962:	4b3b      	ldr	r3, [pc, #236]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e067      	b.n	8006a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006972:	4b37      	ldr	r3, [pc, #220]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f023 0203 	bic.w	r2, r3, #3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	4934      	ldr	r1, [pc, #208]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 8006980:	4313      	orrs	r3, r2
 8006982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006984:	f7fd fd06 	bl	8004394 <HAL_GetTick>
 8006988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800698a:	e00a      	b.n	80069a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800698c:	f7fd fd02 	bl	8004394 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800699a:	4293      	cmp	r3, r2
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e04f      	b.n	8006a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069a2:	4b2b      	ldr	r3, [pc, #172]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f003 020c 	and.w	r2, r3, #12
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d1eb      	bne.n	800698c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069b4:	4b25      	ldr	r3, [pc, #148]	@ (8006a4c <HAL_RCC_ClockConfig+0x1b8>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d20c      	bcs.n	80069dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069c2:	4b22      	ldr	r3, [pc, #136]	@ (8006a4c <HAL_RCC_ClockConfig+0x1b8>)
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ca:	4b20      	ldr	r3, [pc, #128]	@ (8006a4c <HAL_RCC_ClockConfig+0x1b8>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0307 	and.w	r3, r3, #7
 80069d2:	683a      	ldr	r2, [r7, #0]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d001      	beq.n	80069dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e032      	b.n	8006a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0304 	and.w	r3, r3, #4
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d008      	beq.n	80069fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069e8:	4b19      	ldr	r3, [pc, #100]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	4916      	ldr	r1, [pc, #88]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0308 	and.w	r3, r3, #8
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d009      	beq.n	8006a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a06:	4b12      	ldr	r3, [pc, #72]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	00db      	lsls	r3, r3, #3
 8006a14:	490e      	ldr	r1, [pc, #56]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a1a:	f000 f821 	bl	8006a60 <HAL_RCC_GetSysClockFreq>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	4b0b      	ldr	r3, [pc, #44]	@ (8006a50 <HAL_RCC_ClockConfig+0x1bc>)
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	091b      	lsrs	r3, r3, #4
 8006a26:	f003 030f 	and.w	r3, r3, #15
 8006a2a:	490a      	ldr	r1, [pc, #40]	@ (8006a54 <HAL_RCC_ClockConfig+0x1c0>)
 8006a2c:	5ccb      	ldrb	r3, [r1, r3]
 8006a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a32:	4a09      	ldr	r2, [pc, #36]	@ (8006a58 <HAL_RCC_ClockConfig+0x1c4>)
 8006a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006a36:	4b09      	ldr	r3, [pc, #36]	@ (8006a5c <HAL_RCC_ClockConfig+0x1c8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fd fc66 	bl	800430c <HAL_InitTick>

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	40023c00 	.word	0x40023c00
 8006a50:	40023800 	.word	0x40023800
 8006a54:	08010584 	.word	0x08010584
 8006a58:	20000024 	.word	0x20000024
 8006a5c:	20000028 	.word	0x20000028

08006a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a64:	b090      	sub	sp, #64	@ 0x40
 8006a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006a70:	2300      	movs	r3, #0
 8006a72:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a78:	4b59      	ldr	r3, [pc, #356]	@ (8006be0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f003 030c 	and.w	r3, r3, #12
 8006a80:	2b08      	cmp	r3, #8
 8006a82:	d00d      	beq.n	8006aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8006a84:	2b08      	cmp	r3, #8
 8006a86:	f200 80a1 	bhi.w	8006bcc <HAL_RCC_GetSysClockFreq+0x16c>
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <HAL_RCC_GetSysClockFreq+0x34>
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d003      	beq.n	8006a9a <HAL_RCC_GetSysClockFreq+0x3a>
 8006a92:	e09b      	b.n	8006bcc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a94:	4b53      	ldr	r3, [pc, #332]	@ (8006be4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006a96:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006a98:	e09b      	b.n	8006bd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a9a:	4b53      	ldr	r3, [pc, #332]	@ (8006be8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006a9e:	e098      	b.n	8006bd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006aa0:	4b4f      	ldr	r3, [pc, #316]	@ (8006be0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006aa8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006aaa:	4b4d      	ldr	r3, [pc, #308]	@ (8006be0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d028      	beq.n	8006b08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8006be0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	099b      	lsrs	r3, r3, #6
 8006abc:	2200      	movs	r2, #0
 8006abe:	623b      	str	r3, [r7, #32]
 8006ac0:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006ac8:	2100      	movs	r1, #0
 8006aca:	4b47      	ldr	r3, [pc, #284]	@ (8006be8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006acc:	fb03 f201 	mul.w	r2, r3, r1
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	fb00 f303 	mul.w	r3, r0, r3
 8006ad6:	4413      	add	r3, r2
 8006ad8:	4a43      	ldr	r2, [pc, #268]	@ (8006be8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ada:	fba0 1202 	umull	r1, r2, r0, r2
 8006ade:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ae0:	460a      	mov	r2, r1
 8006ae2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006ae4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ae6:	4413      	add	r3, r2
 8006ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aec:	2200      	movs	r2, #0
 8006aee:	61bb      	str	r3, [r7, #24]
 8006af0:	61fa      	str	r2, [r7, #28]
 8006af2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006af6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006afa:	f7fa f8c5 	bl	8000c88 <__aeabi_uldivmod>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	4613      	mov	r3, r2
 8006b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b06:	e053      	b.n	8006bb0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b08:	4b35      	ldr	r3, [pc, #212]	@ (8006be0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	099b      	lsrs	r3, r3, #6
 8006b0e:	2200      	movs	r2, #0
 8006b10:	613b      	str	r3, [r7, #16]
 8006b12:	617a      	str	r2, [r7, #20]
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006b1a:	f04f 0b00 	mov.w	fp, #0
 8006b1e:	4652      	mov	r2, sl
 8006b20:	465b      	mov	r3, fp
 8006b22:	f04f 0000 	mov.w	r0, #0
 8006b26:	f04f 0100 	mov.w	r1, #0
 8006b2a:	0159      	lsls	r1, r3, #5
 8006b2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b30:	0150      	lsls	r0, r2, #5
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	ebb2 080a 	subs.w	r8, r2, sl
 8006b3a:	eb63 090b 	sbc.w	r9, r3, fp
 8006b3e:	f04f 0200 	mov.w	r2, #0
 8006b42:	f04f 0300 	mov.w	r3, #0
 8006b46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006b4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006b4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006b52:	ebb2 0408 	subs.w	r4, r2, r8
 8006b56:	eb63 0509 	sbc.w	r5, r3, r9
 8006b5a:	f04f 0200 	mov.w	r2, #0
 8006b5e:	f04f 0300 	mov.w	r3, #0
 8006b62:	00eb      	lsls	r3, r5, #3
 8006b64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b68:	00e2      	lsls	r2, r4, #3
 8006b6a:	4614      	mov	r4, r2
 8006b6c:	461d      	mov	r5, r3
 8006b6e:	eb14 030a 	adds.w	r3, r4, sl
 8006b72:	603b      	str	r3, [r7, #0]
 8006b74:	eb45 030b 	adc.w	r3, r5, fp
 8006b78:	607b      	str	r3, [r7, #4]
 8006b7a:	f04f 0200 	mov.w	r2, #0
 8006b7e:	f04f 0300 	mov.w	r3, #0
 8006b82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b86:	4629      	mov	r1, r5
 8006b88:	028b      	lsls	r3, r1, #10
 8006b8a:	4621      	mov	r1, r4
 8006b8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b90:	4621      	mov	r1, r4
 8006b92:	028a      	lsls	r2, r1, #10
 8006b94:	4610      	mov	r0, r2
 8006b96:	4619      	mov	r1, r3
 8006b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	60bb      	str	r3, [r7, #8]
 8006b9e:	60fa      	str	r2, [r7, #12]
 8006ba0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ba4:	f7fa f870 	bl	8000c88 <__aeabi_uldivmod>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	4613      	mov	r3, r2
 8006bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8006be0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	0c1b      	lsrs	r3, r3, #16
 8006bb6:	f003 0303 	and.w	r3, r3, #3
 8006bba:	3301      	adds	r3, #1
 8006bbc:	005b      	lsls	r3, r3, #1
 8006bbe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006bc0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006bca:	e002      	b.n	8006bd2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006bcc:	4b05      	ldr	r3, [pc, #20]	@ (8006be4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006bce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3740      	adds	r7, #64	@ 0x40
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bde:	bf00      	nop
 8006be0:	40023800 	.word	0x40023800
 8006be4:	00f42400 	.word	0x00f42400
 8006be8:	017d7840 	.word	0x017d7840

08006bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bec:	b480      	push	{r7}
 8006bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bf0:	4b03      	ldr	r3, [pc, #12]	@ (8006c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	20000024 	.word	0x20000024

08006c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c08:	f7ff fff0 	bl	8006bec <HAL_RCC_GetHCLKFreq>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	4b05      	ldr	r3, [pc, #20]	@ (8006c24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	0a9b      	lsrs	r3, r3, #10
 8006c14:	f003 0307 	and.w	r3, r3, #7
 8006c18:	4903      	ldr	r1, [pc, #12]	@ (8006c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c1a:	5ccb      	ldrb	r3, [r1, r3]
 8006c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	40023800 	.word	0x40023800
 8006c28:	08010594 	.word	0x08010594

08006c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c30:	f7ff ffdc 	bl	8006bec <HAL_RCC_GetHCLKFreq>
 8006c34:	4602      	mov	r2, r0
 8006c36:	4b05      	ldr	r3, [pc, #20]	@ (8006c4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	0b5b      	lsrs	r3, r3, #13
 8006c3c:	f003 0307 	and.w	r3, r3, #7
 8006c40:	4903      	ldr	r1, [pc, #12]	@ (8006c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c42:	5ccb      	ldrb	r3, [r1, r3]
 8006c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	40023800 	.word	0x40023800
 8006c50:	08010594 	.word	0x08010594

08006c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d101      	bne.n	8006c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e041      	b.n	8006cea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d106      	bne.n	8006c80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7fd f810 	bl	8003ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2202      	movs	r2, #2
 8006c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	3304      	adds	r3, #4
 8006c90:	4619      	mov	r1, r3
 8006c92:	4610      	mov	r0, r2
 8006c94:	f000 fff0 	bl	8007c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ce8:	2300      	movs	r3, #0
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
	...

08006cf4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d001      	beq.n	8006d0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e046      	b.n	8006d9a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a23      	ldr	r2, [pc, #140]	@ (8006da8 <HAL_TIM_Base_Start+0xb4>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d022      	beq.n	8006d64 <HAL_TIM_Base_Start+0x70>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d26:	d01d      	beq.n	8006d64 <HAL_TIM_Base_Start+0x70>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a1f      	ldr	r2, [pc, #124]	@ (8006dac <HAL_TIM_Base_Start+0xb8>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d018      	beq.n	8006d64 <HAL_TIM_Base_Start+0x70>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a1e      	ldr	r2, [pc, #120]	@ (8006db0 <HAL_TIM_Base_Start+0xbc>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d013      	beq.n	8006d64 <HAL_TIM_Base_Start+0x70>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a1c      	ldr	r2, [pc, #112]	@ (8006db4 <HAL_TIM_Base_Start+0xc0>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d00e      	beq.n	8006d64 <HAL_TIM_Base_Start+0x70>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8006db8 <HAL_TIM_Base_Start+0xc4>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d009      	beq.n	8006d64 <HAL_TIM_Base_Start+0x70>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a19      	ldr	r2, [pc, #100]	@ (8006dbc <HAL_TIM_Base_Start+0xc8>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d004      	beq.n	8006d64 <HAL_TIM_Base_Start+0x70>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a18      	ldr	r2, [pc, #96]	@ (8006dc0 <HAL_TIM_Base_Start+0xcc>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d111      	bne.n	8006d88 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 0307 	and.w	r3, r3, #7
 8006d6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2b06      	cmp	r3, #6
 8006d74:	d010      	beq.n	8006d98 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f042 0201 	orr.w	r2, r2, #1
 8006d84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d86:	e007      	b.n	8006d98 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0201 	orr.w	r2, r2, #1
 8006d96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	40010000 	.word	0x40010000
 8006dac:	40000400 	.word	0x40000400
 8006db0:	40000800 	.word	0x40000800
 8006db4:	40000c00 	.word	0x40000c00
 8006db8:	40010400 	.word	0x40010400
 8006dbc:	40014000 	.word	0x40014000
 8006dc0:	40001800 	.word	0x40001800

08006dc4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e041      	b.n	8006e5a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d106      	bne.n	8006df0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f839 	bl	8006e62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	3304      	adds	r3, #4
 8006e00:	4619      	mov	r1, r3
 8006e02:	4610      	mov	r0, r2
 8006e04:	f000 ff38 	bl	8007c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3708      	adds	r7, #8
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}

08006e62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b083      	sub	sp, #12
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e6a:	bf00      	nop
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
	...

08006e78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d109      	bne.n	8006e9c <HAL_TIM_PWM_Start+0x24>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	bf14      	ite	ne
 8006e94:	2301      	movne	r3, #1
 8006e96:	2300      	moveq	r3, #0
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	e022      	b.n	8006ee2 <HAL_TIM_PWM_Start+0x6a>
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	2b04      	cmp	r3, #4
 8006ea0:	d109      	bne.n	8006eb6 <HAL_TIM_PWM_Start+0x3e>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	bf14      	ite	ne
 8006eae:	2301      	movne	r3, #1
 8006eb0:	2300      	moveq	r3, #0
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	e015      	b.n	8006ee2 <HAL_TIM_PWM_Start+0x6a>
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	2b08      	cmp	r3, #8
 8006eba:	d109      	bne.n	8006ed0 <HAL_TIM_PWM_Start+0x58>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	bf14      	ite	ne
 8006ec8:	2301      	movne	r3, #1
 8006eca:	2300      	moveq	r3, #0
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	e008      	b.n	8006ee2 <HAL_TIM_PWM_Start+0x6a>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	bf14      	ite	ne
 8006edc:	2301      	movne	r3, #1
 8006ede:	2300      	moveq	r3, #0
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e07c      	b.n	8006fe4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d104      	bne.n	8006efa <HAL_TIM_PWM_Start+0x82>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ef8:	e013      	b.n	8006f22 <HAL_TIM_PWM_Start+0xaa>
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b04      	cmp	r3, #4
 8006efe:	d104      	bne.n	8006f0a <HAL_TIM_PWM_Start+0x92>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f08:	e00b      	b.n	8006f22 <HAL_TIM_PWM_Start+0xaa>
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	2b08      	cmp	r3, #8
 8006f0e:	d104      	bne.n	8006f1a <HAL_TIM_PWM_Start+0xa2>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2202      	movs	r2, #2
 8006f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f18:	e003      	b.n	8006f22 <HAL_TIM_PWM_Start+0xaa>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2201      	movs	r2, #1
 8006f28:	6839      	ldr	r1, [r7, #0]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f001 fac4 	bl	80084b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a2d      	ldr	r2, [pc, #180]	@ (8006fec <HAL_TIM_PWM_Start+0x174>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d004      	beq.n	8006f44 <HAL_TIM_PWM_Start+0xcc>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a2c      	ldr	r2, [pc, #176]	@ (8006ff0 <HAL_TIM_PWM_Start+0x178>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d101      	bne.n	8006f48 <HAL_TIM_PWM_Start+0xd0>
 8006f44:	2301      	movs	r3, #1
 8006f46:	e000      	b.n	8006f4a <HAL_TIM_PWM_Start+0xd2>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d007      	beq.n	8006f5e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a22      	ldr	r2, [pc, #136]	@ (8006fec <HAL_TIM_PWM_Start+0x174>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d022      	beq.n	8006fae <HAL_TIM_PWM_Start+0x136>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f70:	d01d      	beq.n	8006fae <HAL_TIM_PWM_Start+0x136>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a1f      	ldr	r2, [pc, #124]	@ (8006ff4 <HAL_TIM_PWM_Start+0x17c>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d018      	beq.n	8006fae <HAL_TIM_PWM_Start+0x136>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a1d      	ldr	r2, [pc, #116]	@ (8006ff8 <HAL_TIM_PWM_Start+0x180>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d013      	beq.n	8006fae <HAL_TIM_PWM_Start+0x136>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8006ffc <HAL_TIM_PWM_Start+0x184>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d00e      	beq.n	8006fae <HAL_TIM_PWM_Start+0x136>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a16      	ldr	r2, [pc, #88]	@ (8006ff0 <HAL_TIM_PWM_Start+0x178>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d009      	beq.n	8006fae <HAL_TIM_PWM_Start+0x136>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a18      	ldr	r2, [pc, #96]	@ (8007000 <HAL_TIM_PWM_Start+0x188>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d004      	beq.n	8006fae <HAL_TIM_PWM_Start+0x136>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a16      	ldr	r2, [pc, #88]	@ (8007004 <HAL_TIM_PWM_Start+0x18c>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d111      	bne.n	8006fd2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f003 0307 	and.w	r3, r3, #7
 8006fb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2b06      	cmp	r3, #6
 8006fbe:	d010      	beq.n	8006fe2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f042 0201 	orr.w	r2, r2, #1
 8006fce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fd0:	e007      	b.n	8006fe2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f042 0201 	orr.w	r2, r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	40010000 	.word	0x40010000
 8006ff0:	40010400 	.word	0x40010400
 8006ff4:	40000400 	.word	0x40000400
 8006ff8:	40000800 	.word	0x40000800
 8006ffc:	40000c00 	.word	0x40000c00
 8007000:	40014000 	.word	0x40014000
 8007004:	40001800 	.word	0x40001800

08007008 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e041      	b.n	800709e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d106      	bne.n	8007034 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f839 	bl	80070a6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	3304      	adds	r3, #4
 8007044:	4619      	mov	r1, r3
 8007046:	4610      	mov	r0, r2
 8007048:	f000 fe16 	bl	8007c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80070a6:	b480      	push	{r7}
 80070a8:	b083      	sub	sp, #12
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80070ae:	bf00      	nop
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
	...

080070bc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d104      	bne.n	80070da <HAL_TIM_IC_Start_IT+0x1e>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	e013      	b.n	8007102 <HAL_TIM_IC_Start_IT+0x46>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d104      	bne.n	80070ea <HAL_TIM_IC_Start_IT+0x2e>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	e00b      	b.n	8007102 <HAL_TIM_IC_Start_IT+0x46>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b08      	cmp	r3, #8
 80070ee:	d104      	bne.n	80070fa <HAL_TIM_IC_Start_IT+0x3e>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	e003      	b.n	8007102 <HAL_TIM_IC_Start_IT+0x46>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007100:	b2db      	uxtb	r3, r3
 8007102:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d104      	bne.n	8007114 <HAL_TIM_IC_Start_IT+0x58>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007110:	b2db      	uxtb	r3, r3
 8007112:	e013      	b.n	800713c <HAL_TIM_IC_Start_IT+0x80>
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	2b04      	cmp	r3, #4
 8007118:	d104      	bne.n	8007124 <HAL_TIM_IC_Start_IT+0x68>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007120:	b2db      	uxtb	r3, r3
 8007122:	e00b      	b.n	800713c <HAL_TIM_IC_Start_IT+0x80>
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	2b08      	cmp	r3, #8
 8007128:	d104      	bne.n	8007134 <HAL_TIM_IC_Start_IT+0x78>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007130:	b2db      	uxtb	r3, r3
 8007132:	e003      	b.n	800713c <HAL_TIM_IC_Start_IT+0x80>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800713a:	b2db      	uxtb	r3, r3
 800713c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800713e:	7bbb      	ldrb	r3, [r7, #14]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d102      	bne.n	800714a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007144:	7b7b      	ldrb	r3, [r7, #13]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d001      	beq.n	800714e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e0cc      	b.n	80072e8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d104      	bne.n	800715e <HAL_TIM_IC_Start_IT+0xa2>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2202      	movs	r2, #2
 8007158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800715c:	e013      	b.n	8007186 <HAL_TIM_IC_Start_IT+0xca>
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b04      	cmp	r3, #4
 8007162:	d104      	bne.n	800716e <HAL_TIM_IC_Start_IT+0xb2>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2202      	movs	r2, #2
 8007168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800716c:	e00b      	b.n	8007186 <HAL_TIM_IC_Start_IT+0xca>
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	2b08      	cmp	r3, #8
 8007172:	d104      	bne.n	800717e <HAL_TIM_IC_Start_IT+0xc2>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800717c:	e003      	b.n	8007186 <HAL_TIM_IC_Start_IT+0xca>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2202      	movs	r2, #2
 8007182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d104      	bne.n	8007196 <HAL_TIM_IC_Start_IT+0xda>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2202      	movs	r2, #2
 8007190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007194:	e013      	b.n	80071be <HAL_TIM_IC_Start_IT+0x102>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	2b04      	cmp	r3, #4
 800719a:	d104      	bne.n	80071a6 <HAL_TIM_IC_Start_IT+0xea>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071a4:	e00b      	b.n	80071be <HAL_TIM_IC_Start_IT+0x102>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	d104      	bne.n	80071b6 <HAL_TIM_IC_Start_IT+0xfa>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2202      	movs	r2, #2
 80071b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071b4:	e003      	b.n	80071be <HAL_TIM_IC_Start_IT+0x102>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2202      	movs	r2, #2
 80071ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	2b0c      	cmp	r3, #12
 80071c2:	d841      	bhi.n	8007248 <HAL_TIM_IC_Start_IT+0x18c>
 80071c4:	a201      	add	r2, pc, #4	@ (adr r2, 80071cc <HAL_TIM_IC_Start_IT+0x110>)
 80071c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ca:	bf00      	nop
 80071cc:	08007201 	.word	0x08007201
 80071d0:	08007249 	.word	0x08007249
 80071d4:	08007249 	.word	0x08007249
 80071d8:	08007249 	.word	0x08007249
 80071dc:	08007213 	.word	0x08007213
 80071e0:	08007249 	.word	0x08007249
 80071e4:	08007249 	.word	0x08007249
 80071e8:	08007249 	.word	0x08007249
 80071ec:	08007225 	.word	0x08007225
 80071f0:	08007249 	.word	0x08007249
 80071f4:	08007249 	.word	0x08007249
 80071f8:	08007249 	.word	0x08007249
 80071fc:	08007237 	.word	0x08007237
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68da      	ldr	r2, [r3, #12]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f042 0202 	orr.w	r2, r2, #2
 800720e:	60da      	str	r2, [r3, #12]
      break;
 8007210:	e01d      	b.n	800724e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68da      	ldr	r2, [r3, #12]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f042 0204 	orr.w	r2, r2, #4
 8007220:	60da      	str	r2, [r3, #12]
      break;
 8007222:	e014      	b.n	800724e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68da      	ldr	r2, [r3, #12]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f042 0208 	orr.w	r2, r2, #8
 8007232:	60da      	str	r2, [r3, #12]
      break;
 8007234:	e00b      	b.n	800724e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68da      	ldr	r2, [r3, #12]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f042 0210 	orr.w	r2, r2, #16
 8007244:	60da      	str	r2, [r3, #12]
      break;
 8007246:	e002      	b.n	800724e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	73fb      	strb	r3, [r7, #15]
      break;
 800724c:	bf00      	nop
  }

  if (status == HAL_OK)
 800724e:	7bfb      	ldrb	r3, [r7, #15]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d148      	bne.n	80072e6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2201      	movs	r2, #1
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	4618      	mov	r0, r3
 800725e:	f001 f92b 	bl	80084b8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a22      	ldr	r2, [pc, #136]	@ (80072f0 <HAL_TIM_IC_Start_IT+0x234>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d022      	beq.n	80072b2 <HAL_TIM_IC_Start_IT+0x1f6>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007274:	d01d      	beq.n	80072b2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a1e      	ldr	r2, [pc, #120]	@ (80072f4 <HAL_TIM_IC_Start_IT+0x238>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d018      	beq.n	80072b2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a1c      	ldr	r2, [pc, #112]	@ (80072f8 <HAL_TIM_IC_Start_IT+0x23c>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d013      	beq.n	80072b2 <HAL_TIM_IC_Start_IT+0x1f6>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a1b      	ldr	r2, [pc, #108]	@ (80072fc <HAL_TIM_IC_Start_IT+0x240>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d00e      	beq.n	80072b2 <HAL_TIM_IC_Start_IT+0x1f6>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a19      	ldr	r2, [pc, #100]	@ (8007300 <HAL_TIM_IC_Start_IT+0x244>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d009      	beq.n	80072b2 <HAL_TIM_IC_Start_IT+0x1f6>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a18      	ldr	r2, [pc, #96]	@ (8007304 <HAL_TIM_IC_Start_IT+0x248>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d004      	beq.n	80072b2 <HAL_TIM_IC_Start_IT+0x1f6>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a16      	ldr	r2, [pc, #88]	@ (8007308 <HAL_TIM_IC_Start_IT+0x24c>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d111      	bne.n	80072d6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f003 0307 	and.w	r3, r3, #7
 80072bc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2b06      	cmp	r3, #6
 80072c2:	d010      	beq.n	80072e6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f042 0201 	orr.w	r2, r2, #1
 80072d2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072d4:	e007      	b.n	80072e6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f042 0201 	orr.w	r2, r2, #1
 80072e4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	40010000 	.word	0x40010000
 80072f4:	40000400 	.word	0x40000400
 80072f8:	40000800 	.word	0x40000800
 80072fc:	40000c00 	.word	0x40000c00
 8007300:	40010400 	.word	0x40010400
 8007304:	40014000 	.word	0x40014000
 8007308:	40001800 	.word	0x40001800

0800730c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	e097      	b.n	8007450 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007326:	b2db      	uxtb	r3, r3
 8007328:	2b00      	cmp	r3, #0
 800732a:	d106      	bne.n	800733a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7fc fd65 	bl	8003e04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2202      	movs	r2, #2
 800733e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	6812      	ldr	r2, [r2, #0]
 800734c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007350:	f023 0307 	bic.w	r3, r3, #7
 8007354:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3304      	adds	r3, #4
 800735e:	4619      	mov	r1, r3
 8007360:	4610      	mov	r0, r2
 8007362:	f000 fc89 	bl	8007c78 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6a1b      	ldr	r3, [r3, #32]
 800737c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	4313      	orrs	r3, r2
 8007386:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800738e:	f023 0303 	bic.w	r3, r3, #3
 8007392:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	021b      	lsls	r3, r3, #8
 800739e:	4313      	orrs	r3, r2
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80073ac:	f023 030c 	bic.w	r3, r3, #12
 80073b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80073b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	68da      	ldr	r2, [r3, #12]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	021b      	lsls	r3, r3, #8
 80073c8:	4313      	orrs	r3, r2
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	011a      	lsls	r2, r3, #4
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	031b      	lsls	r3, r3, #12
 80073dc:	4313      	orrs	r3, r2
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80073ea:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80073f2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	695b      	ldr	r3, [r3, #20]
 80073fc:	011b      	lsls	r3, r3, #4
 80073fe:	4313      	orrs	r3, r2
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	4313      	orrs	r3, r2
 8007404:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3718      	adds	r7, #24
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007468:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007470:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007478:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007480:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d110      	bne.n	80074aa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007488:	7bfb      	ldrb	r3, [r7, #15]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d102      	bne.n	8007494 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800748e:	7b7b      	ldrb	r3, [r7, #13]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d001      	beq.n	8007498 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e069      	b.n	800756c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2202      	movs	r2, #2
 800749c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2202      	movs	r2, #2
 80074a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074a8:	e031      	b.n	800750e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b04      	cmp	r3, #4
 80074ae:	d110      	bne.n	80074d2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80074b0:	7bbb      	ldrb	r3, [r7, #14]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d102      	bne.n	80074bc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80074b6:	7b3b      	ldrb	r3, [r7, #12]
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d001      	beq.n	80074c0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e055      	b.n	800756c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2202      	movs	r2, #2
 80074c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80074d0:	e01d      	b.n	800750e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074d2:	7bfb      	ldrb	r3, [r7, #15]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d108      	bne.n	80074ea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80074d8:	7bbb      	ldrb	r3, [r7, #14]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d105      	bne.n	80074ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074de:	7b7b      	ldrb	r3, [r7, #13]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d102      	bne.n	80074ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80074e4:	7b3b      	ldrb	r3, [r7, #12]
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d001      	beq.n	80074ee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e03e      	b.n	800756c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2202      	movs	r2, #2
 80074f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2202      	movs	r2, #2
 80074fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2202      	movs	r2, #2
 8007502:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2202      	movs	r2, #2
 800750a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d003      	beq.n	800751c <HAL_TIM_Encoder_Start+0xc4>
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	2b04      	cmp	r3, #4
 8007518:	d008      	beq.n	800752c <HAL_TIM_Encoder_Start+0xd4>
 800751a:	e00f      	b.n	800753c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2201      	movs	r2, #1
 8007522:	2100      	movs	r1, #0
 8007524:	4618      	mov	r0, r3
 8007526:	f000 ffc7 	bl	80084b8 <TIM_CCxChannelCmd>
      break;
 800752a:	e016      	b.n	800755a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2201      	movs	r2, #1
 8007532:	2104      	movs	r1, #4
 8007534:	4618      	mov	r0, r3
 8007536:	f000 ffbf 	bl	80084b8 <TIM_CCxChannelCmd>
      break;
 800753a:	e00e      	b.n	800755a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2201      	movs	r2, #1
 8007542:	2100      	movs	r1, #0
 8007544:	4618      	mov	r0, r3
 8007546:	f000 ffb7 	bl	80084b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2201      	movs	r2, #1
 8007550:	2104      	movs	r1, #4
 8007552:	4618      	mov	r0, r3
 8007554:	f000 ffb0 	bl	80084b8 <TIM_CCxChannelCmd>
      break;
 8007558:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f042 0201 	orr.w	r2, r2, #1
 8007568:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	f003 0302 	and.w	r3, r3, #2
 8007592:	2b00      	cmp	r3, #0
 8007594:	d020      	beq.n	80075d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d01b      	beq.n	80075d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f06f 0202 	mvn.w	r2, #2
 80075a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	699b      	ldr	r3, [r3, #24]
 80075b6:	f003 0303 	and.w	r3, r3, #3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7fb fd7a 	bl	80030b8 <HAL_TIM_IC_CaptureCallback>
 80075c4:	e005      	b.n	80075d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fb38 	bl	8007c3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fb3f 	bl	8007c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	f003 0304 	and.w	r3, r3, #4
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d020      	beq.n	8007624 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f003 0304 	and.w	r3, r3, #4
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d01b      	beq.n	8007624 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f06f 0204 	mvn.w	r2, #4
 80075f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2202      	movs	r2, #2
 80075fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007606:	2b00      	cmp	r3, #0
 8007608:	d003      	beq.n	8007612 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7fb fd54 	bl	80030b8 <HAL_TIM_IC_CaptureCallback>
 8007610:	e005      	b.n	800761e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fb12 	bl	8007c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fb19 	bl	8007c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	f003 0308 	and.w	r3, r3, #8
 800762a:	2b00      	cmp	r3, #0
 800762c:	d020      	beq.n	8007670 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f003 0308 	and.w	r3, r3, #8
 8007634:	2b00      	cmp	r3, #0
 8007636:	d01b      	beq.n	8007670 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f06f 0208 	mvn.w	r2, #8
 8007640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2204      	movs	r2, #4
 8007646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	69db      	ldr	r3, [r3, #28]
 800764e:	f003 0303 	and.w	r3, r3, #3
 8007652:	2b00      	cmp	r3, #0
 8007654:	d003      	beq.n	800765e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f7fb fd2e 	bl	80030b8 <HAL_TIM_IC_CaptureCallback>
 800765c:	e005      	b.n	800766a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 faec 	bl	8007c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 faf3 	bl	8007c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	f003 0310 	and.w	r3, r3, #16
 8007676:	2b00      	cmp	r3, #0
 8007678:	d020      	beq.n	80076bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f003 0310 	and.w	r3, r3, #16
 8007680:	2b00      	cmp	r3, #0
 8007682:	d01b      	beq.n	80076bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f06f 0210 	mvn.w	r2, #16
 800768c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2208      	movs	r2, #8
 8007692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d003      	beq.n	80076aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7fb fd08 	bl	80030b8 <HAL_TIM_IC_CaptureCallback>
 80076a8:	e005      	b.n	80076b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fac6 	bl	8007c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 facd 	bl	8007c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00c      	beq.n	80076e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d007      	beq.n	80076e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f06f 0201 	mvn.w	r2, #1
 80076d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 faa4 	bl	8007c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00c      	beq.n	8007704 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d007      	beq.n	8007704 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80076fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 ffd8 	bl	80086b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00c      	beq.n	8007728 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007714:	2b00      	cmp	r3, #0
 8007716:	d007      	beq.n	8007728 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fa9e 	bl	8007c64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	f003 0320 	and.w	r3, r3, #32
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00c      	beq.n	800774c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f003 0320 	and.w	r3, r3, #32
 8007738:	2b00      	cmp	r3, #0
 800773a:	d007      	beq.n	800774c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f06f 0220 	mvn.w	r2, #32
 8007744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 ffaa 	bl	80086a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800774c:	bf00      	nop
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007760:	2300      	movs	r3, #0
 8007762:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800776a:	2b01      	cmp	r3, #1
 800776c:	d101      	bne.n	8007772 <HAL_TIM_IC_ConfigChannel+0x1e>
 800776e:	2302      	movs	r3, #2
 8007770:	e088      	b.n	8007884 <HAL_TIM_IC_ConfigChannel+0x130>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d11b      	bne.n	80077b8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007790:	f000 fcce 	bl	8008130 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	699a      	ldr	r2, [r3, #24]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f022 020c 	bic.w	r2, r2, #12
 80077a2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	6999      	ldr	r1, [r3, #24]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	689a      	ldr	r2, [r3, #8]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	430a      	orrs	r2, r1
 80077b4:	619a      	str	r2, [r3, #24]
 80077b6:	e060      	b.n	800787a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b04      	cmp	r3, #4
 80077bc:	d11c      	bne.n	80077f8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80077ce:	f000 fd52 	bl	8008276 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	699a      	ldr	r2, [r3, #24]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80077e0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	6999      	ldr	r1, [r3, #24]
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	021a      	lsls	r2, r3, #8
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	619a      	str	r2, [r3, #24]
 80077f6:	e040      	b.n	800787a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b08      	cmp	r3, #8
 80077fc:	d11b      	bne.n	8007836 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800780e:	f000 fd9f 	bl	8008350 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69da      	ldr	r2, [r3, #28]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 020c 	bic.w	r2, r2, #12
 8007820:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	69d9      	ldr	r1, [r3, #28]
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	689a      	ldr	r2, [r3, #8]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	61da      	str	r2, [r3, #28]
 8007834:	e021      	b.n	800787a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2b0c      	cmp	r3, #12
 800783a:	d11c      	bne.n	8007876 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800784c:	f000 fdbc 	bl	80083c8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	69da      	ldr	r2, [r3, #28]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800785e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	69d9      	ldr	r1, [r3, #28]
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	021a      	lsls	r2, r3, #8
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	430a      	orrs	r2, r1
 8007872:	61da      	str	r2, [r3, #28]
 8007874:	e001      	b.n	800787a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007882:	7dfb      	ldrb	r3, [r7, #23]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3718      	adds	r7, #24
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007898:	2300      	movs	r3, #0
 800789a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d101      	bne.n	80078aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078a6:	2302      	movs	r3, #2
 80078a8:	e0ae      	b.n	8007a08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2b0c      	cmp	r3, #12
 80078b6:	f200 809f 	bhi.w	80079f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80078ba:	a201      	add	r2, pc, #4	@ (adr r2, 80078c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c0:	080078f5 	.word	0x080078f5
 80078c4:	080079f9 	.word	0x080079f9
 80078c8:	080079f9 	.word	0x080079f9
 80078cc:	080079f9 	.word	0x080079f9
 80078d0:	08007935 	.word	0x08007935
 80078d4:	080079f9 	.word	0x080079f9
 80078d8:	080079f9 	.word	0x080079f9
 80078dc:	080079f9 	.word	0x080079f9
 80078e0:	08007977 	.word	0x08007977
 80078e4:	080079f9 	.word	0x080079f9
 80078e8:	080079f9 	.word	0x080079f9
 80078ec:	080079f9 	.word	0x080079f9
 80078f0:	080079b7 	.word	0x080079b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68b9      	ldr	r1, [r7, #8]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f000 fa68 	bl	8007dd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	699a      	ldr	r2, [r3, #24]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f042 0208 	orr.w	r2, r2, #8
 800790e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	699a      	ldr	r2, [r3, #24]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f022 0204 	bic.w	r2, r2, #4
 800791e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	6999      	ldr	r1, [r3, #24]
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	691a      	ldr	r2, [r3, #16]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	619a      	str	r2, [r3, #24]
      break;
 8007932:	e064      	b.n	80079fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68b9      	ldr	r1, [r7, #8]
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fab8 	bl	8007eb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	699a      	ldr	r2, [r3, #24]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800794e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	699a      	ldr	r2, [r3, #24]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800795e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6999      	ldr	r1, [r3, #24]
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	021a      	lsls	r2, r3, #8
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	619a      	str	r2, [r3, #24]
      break;
 8007974:	e043      	b.n	80079fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68b9      	ldr	r1, [r7, #8]
 800797c:	4618      	mov	r0, r3
 800797e:	f000 fb0d 	bl	8007f9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	69da      	ldr	r2, [r3, #28]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f042 0208 	orr.w	r2, r2, #8
 8007990:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	69da      	ldr	r2, [r3, #28]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f022 0204 	bic.w	r2, r2, #4
 80079a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	69d9      	ldr	r1, [r3, #28]
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	691a      	ldr	r2, [r3, #16]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	430a      	orrs	r2, r1
 80079b2:	61da      	str	r2, [r3, #28]
      break;
 80079b4:	e023      	b.n	80079fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68b9      	ldr	r1, [r7, #8]
 80079bc:	4618      	mov	r0, r3
 80079be:	f000 fb61 	bl	8008084 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	69da      	ldr	r2, [r3, #28]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	69da      	ldr	r2, [r3, #28]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	69d9      	ldr	r1, [r3, #28]
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	021a      	lsls	r2, r3, #8
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	61da      	str	r2, [r3, #28]
      break;
 80079f6:	e002      	b.n	80079fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	75fb      	strb	r3, [r7, #23]
      break;
 80079fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3718      	adds	r7, #24
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d101      	bne.n	8007a2c <HAL_TIM_ConfigClockSource+0x1c>
 8007a28:	2302      	movs	r3, #2
 8007a2a:	e0b4      	b.n	8007b96 <HAL_TIM_ConfigClockSource+0x186>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2202      	movs	r2, #2
 8007a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007a4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a64:	d03e      	beq.n	8007ae4 <HAL_TIM_ConfigClockSource+0xd4>
 8007a66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a6a:	f200 8087 	bhi.w	8007b7c <HAL_TIM_ConfigClockSource+0x16c>
 8007a6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a72:	f000 8086 	beq.w	8007b82 <HAL_TIM_ConfigClockSource+0x172>
 8007a76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a7a:	d87f      	bhi.n	8007b7c <HAL_TIM_ConfigClockSource+0x16c>
 8007a7c:	2b70      	cmp	r3, #112	@ 0x70
 8007a7e:	d01a      	beq.n	8007ab6 <HAL_TIM_ConfigClockSource+0xa6>
 8007a80:	2b70      	cmp	r3, #112	@ 0x70
 8007a82:	d87b      	bhi.n	8007b7c <HAL_TIM_ConfigClockSource+0x16c>
 8007a84:	2b60      	cmp	r3, #96	@ 0x60
 8007a86:	d050      	beq.n	8007b2a <HAL_TIM_ConfigClockSource+0x11a>
 8007a88:	2b60      	cmp	r3, #96	@ 0x60
 8007a8a:	d877      	bhi.n	8007b7c <HAL_TIM_ConfigClockSource+0x16c>
 8007a8c:	2b50      	cmp	r3, #80	@ 0x50
 8007a8e:	d03c      	beq.n	8007b0a <HAL_TIM_ConfigClockSource+0xfa>
 8007a90:	2b50      	cmp	r3, #80	@ 0x50
 8007a92:	d873      	bhi.n	8007b7c <HAL_TIM_ConfigClockSource+0x16c>
 8007a94:	2b40      	cmp	r3, #64	@ 0x40
 8007a96:	d058      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x13a>
 8007a98:	2b40      	cmp	r3, #64	@ 0x40
 8007a9a:	d86f      	bhi.n	8007b7c <HAL_TIM_ConfigClockSource+0x16c>
 8007a9c:	2b30      	cmp	r3, #48	@ 0x30
 8007a9e:	d064      	beq.n	8007b6a <HAL_TIM_ConfigClockSource+0x15a>
 8007aa0:	2b30      	cmp	r3, #48	@ 0x30
 8007aa2:	d86b      	bhi.n	8007b7c <HAL_TIM_ConfigClockSource+0x16c>
 8007aa4:	2b20      	cmp	r3, #32
 8007aa6:	d060      	beq.n	8007b6a <HAL_TIM_ConfigClockSource+0x15a>
 8007aa8:	2b20      	cmp	r3, #32
 8007aaa:	d867      	bhi.n	8007b7c <HAL_TIM_ConfigClockSource+0x16c>
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d05c      	beq.n	8007b6a <HAL_TIM_ConfigClockSource+0x15a>
 8007ab0:	2b10      	cmp	r3, #16
 8007ab2:	d05a      	beq.n	8007b6a <HAL_TIM_ConfigClockSource+0x15a>
 8007ab4:	e062      	b.n	8007b7c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ac6:	f000 fcd7 	bl	8008478 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007ad8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	609a      	str	r2, [r3, #8]
      break;
 8007ae2:	e04f      	b.n	8007b84 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007af4:	f000 fcc0 	bl	8008478 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689a      	ldr	r2, [r3, #8]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b06:	609a      	str	r2, [r3, #8]
      break;
 8007b08:	e03c      	b.n	8007b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b16:	461a      	mov	r2, r3
 8007b18:	f000 fb7e 	bl	8008218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2150      	movs	r1, #80	@ 0x50
 8007b22:	4618      	mov	r0, r3
 8007b24:	f000 fc8d 	bl	8008442 <TIM_ITRx_SetConfig>
      break;
 8007b28:	e02c      	b.n	8007b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b36:	461a      	mov	r2, r3
 8007b38:	f000 fbda 	bl	80082f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2160      	movs	r1, #96	@ 0x60
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 fc7d 	bl	8008442 <TIM_ITRx_SetConfig>
      break;
 8007b48:	e01c      	b.n	8007b84 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b56:	461a      	mov	r2, r3
 8007b58:	f000 fb5e 	bl	8008218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2140      	movs	r1, #64	@ 0x40
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 fc6d 	bl	8008442 <TIM_ITRx_SetConfig>
      break;
 8007b68:	e00c      	b.n	8007b84 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4619      	mov	r1, r3
 8007b74:	4610      	mov	r0, r2
 8007b76:	f000 fc64 	bl	8008442 <TIM_ITRx_SetConfig>
      break;
 8007b7a:	e003      	b.n	8007b84 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b80:	e000      	b.n	8007b84 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
	...

08007ba0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007baa:	2300      	movs	r3, #0
 8007bac:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b0c      	cmp	r3, #12
 8007bb2:	d831      	bhi.n	8007c18 <HAL_TIM_ReadCapturedValue+0x78>
 8007bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8007bbc <HAL_TIM_ReadCapturedValue+0x1c>)
 8007bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bba:	bf00      	nop
 8007bbc:	08007bf1 	.word	0x08007bf1
 8007bc0:	08007c19 	.word	0x08007c19
 8007bc4:	08007c19 	.word	0x08007c19
 8007bc8:	08007c19 	.word	0x08007c19
 8007bcc:	08007bfb 	.word	0x08007bfb
 8007bd0:	08007c19 	.word	0x08007c19
 8007bd4:	08007c19 	.word	0x08007c19
 8007bd8:	08007c19 	.word	0x08007c19
 8007bdc:	08007c05 	.word	0x08007c05
 8007be0:	08007c19 	.word	0x08007c19
 8007be4:	08007c19 	.word	0x08007c19
 8007be8:	08007c19 	.word	0x08007c19
 8007bec:	08007c0f 	.word	0x08007c0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bf6:	60fb      	str	r3, [r7, #12]

      break;
 8007bf8:	e00f      	b.n	8007c1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c00:	60fb      	str	r3, [r7, #12]

      break;
 8007c02:	e00a      	b.n	8007c1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c0a:	60fb      	str	r3, [r7, #12]

      break;
 8007c0c:	e005      	b.n	8007c1a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c14:	60fb      	str	r3, [r7, #12]

      break;
 8007c16:	e000      	b.n	8007c1a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007c18:	bf00      	nop
  }

  return tmpreg;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c58:	bf00      	nop
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a46      	ldr	r2, [pc, #280]	@ (8007da4 <TIM_Base_SetConfig+0x12c>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d013      	beq.n	8007cb8 <TIM_Base_SetConfig+0x40>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c96:	d00f      	beq.n	8007cb8 <TIM_Base_SetConfig+0x40>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a43      	ldr	r2, [pc, #268]	@ (8007da8 <TIM_Base_SetConfig+0x130>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d00b      	beq.n	8007cb8 <TIM_Base_SetConfig+0x40>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a42      	ldr	r2, [pc, #264]	@ (8007dac <TIM_Base_SetConfig+0x134>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d007      	beq.n	8007cb8 <TIM_Base_SetConfig+0x40>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a41      	ldr	r2, [pc, #260]	@ (8007db0 <TIM_Base_SetConfig+0x138>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d003      	beq.n	8007cb8 <TIM_Base_SetConfig+0x40>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a40      	ldr	r2, [pc, #256]	@ (8007db4 <TIM_Base_SetConfig+0x13c>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d108      	bne.n	8007cca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	4a35      	ldr	r2, [pc, #212]	@ (8007da4 <TIM_Base_SetConfig+0x12c>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d02b      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cd8:	d027      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	4a32      	ldr	r2, [pc, #200]	@ (8007da8 <TIM_Base_SetConfig+0x130>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d023      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a31      	ldr	r2, [pc, #196]	@ (8007dac <TIM_Base_SetConfig+0x134>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d01f      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a30      	ldr	r2, [pc, #192]	@ (8007db0 <TIM_Base_SetConfig+0x138>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d01b      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a2f      	ldr	r2, [pc, #188]	@ (8007db4 <TIM_Base_SetConfig+0x13c>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d017      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a2e      	ldr	r2, [pc, #184]	@ (8007db8 <TIM_Base_SetConfig+0x140>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d013      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a2d      	ldr	r2, [pc, #180]	@ (8007dbc <TIM_Base_SetConfig+0x144>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d00f      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a2c      	ldr	r2, [pc, #176]	@ (8007dc0 <TIM_Base_SetConfig+0x148>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d00b      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a2b      	ldr	r2, [pc, #172]	@ (8007dc4 <TIM_Base_SetConfig+0x14c>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d007      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a2a      	ldr	r2, [pc, #168]	@ (8007dc8 <TIM_Base_SetConfig+0x150>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d003      	beq.n	8007d2a <TIM_Base_SetConfig+0xb2>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a29      	ldr	r2, [pc, #164]	@ (8007dcc <TIM_Base_SetConfig+0x154>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d108      	bne.n	8007d3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4a10      	ldr	r2, [pc, #64]	@ (8007da4 <TIM_Base_SetConfig+0x12c>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d003      	beq.n	8007d70 <TIM_Base_SetConfig+0xf8>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a12      	ldr	r2, [pc, #72]	@ (8007db4 <TIM_Base_SetConfig+0x13c>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d103      	bne.n	8007d78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	691a      	ldr	r2, [r3, #16]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d105      	bne.n	8007d96 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	f023 0201 	bic.w	r2, r3, #1
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	611a      	str	r2, [r3, #16]
  }
}
 8007d96:	bf00      	nop
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	40010000 	.word	0x40010000
 8007da8:	40000400 	.word	0x40000400
 8007dac:	40000800 	.word	0x40000800
 8007db0:	40000c00 	.word	0x40000c00
 8007db4:	40010400 	.word	0x40010400
 8007db8:	40014000 	.word	0x40014000
 8007dbc:	40014400 	.word	0x40014400
 8007dc0:	40014800 	.word	0x40014800
 8007dc4:	40001800 	.word	0x40001800
 8007dc8:	40001c00 	.word	0x40001c00
 8007dcc:	40002000 	.word	0x40002000

08007dd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b087      	sub	sp, #28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a1b      	ldr	r3, [r3, #32]
 8007de4:	f023 0201 	bic.w	r2, r3, #1
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f023 0303 	bic.w	r3, r3, #3
 8007e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f023 0302 	bic.w	r3, r3, #2
 8007e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	697a      	ldr	r2, [r7, #20]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a20      	ldr	r2, [pc, #128]	@ (8007ea8 <TIM_OC1_SetConfig+0xd8>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d003      	beq.n	8007e34 <TIM_OC1_SetConfig+0x64>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8007eac <TIM_OC1_SetConfig+0xdc>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d10c      	bne.n	8007e4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	f023 0308 	bic.w	r3, r3, #8
 8007e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	697a      	ldr	r2, [r7, #20]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f023 0304 	bic.w	r3, r3, #4
 8007e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a15      	ldr	r2, [pc, #84]	@ (8007ea8 <TIM_OC1_SetConfig+0xd8>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d003      	beq.n	8007e5e <TIM_OC1_SetConfig+0x8e>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a14      	ldr	r2, [pc, #80]	@ (8007eac <TIM_OC1_SetConfig+0xdc>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d111      	bne.n	8007e82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	685a      	ldr	r2, [r3, #4]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	621a      	str	r2, [r3, #32]
}
 8007e9c:	bf00      	nop
 8007e9e:	371c      	adds	r7, #28
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr
 8007ea8:	40010000 	.word	0x40010000
 8007eac:	40010400 	.word	0x40010400

08007eb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b087      	sub	sp, #28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6a1b      	ldr	r3, [r3, #32]
 8007ec4:	f023 0210 	bic.w	r2, r3, #16
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	021b      	lsls	r3, r3, #8
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	f023 0320 	bic.w	r3, r3, #32
 8007efa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	011b      	lsls	r3, r3, #4
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a22      	ldr	r2, [pc, #136]	@ (8007f94 <TIM_OC2_SetConfig+0xe4>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d003      	beq.n	8007f18 <TIM_OC2_SetConfig+0x68>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a21      	ldr	r2, [pc, #132]	@ (8007f98 <TIM_OC2_SetConfig+0xe8>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d10d      	bne.n	8007f34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	011b      	lsls	r3, r3, #4
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a17      	ldr	r2, [pc, #92]	@ (8007f94 <TIM_OC2_SetConfig+0xe4>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d003      	beq.n	8007f44 <TIM_OC2_SetConfig+0x94>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a16      	ldr	r2, [pc, #88]	@ (8007f98 <TIM_OC2_SetConfig+0xe8>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d113      	bne.n	8007f6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	693a      	ldr	r2, [r7, #16]
 8007f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	621a      	str	r2, [r3, #32]
}
 8007f86:	bf00      	nop
 8007f88:	371c      	adds	r7, #28
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	40010000 	.word	0x40010000
 8007f98:	40010400 	.word	0x40010400

08007f9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6a1b      	ldr	r3, [r3, #32]
 8007fb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	69db      	ldr	r3, [r3, #28]
 8007fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f023 0303 	bic.w	r3, r3, #3
 8007fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	021b      	lsls	r3, r3, #8
 8007fec:	697a      	ldr	r2, [r7, #20]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a21      	ldr	r2, [pc, #132]	@ (800807c <TIM_OC3_SetConfig+0xe0>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d003      	beq.n	8008002 <TIM_OC3_SetConfig+0x66>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a20      	ldr	r2, [pc, #128]	@ (8008080 <TIM_OC3_SetConfig+0xe4>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d10d      	bne.n	800801e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008008:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	021b      	lsls	r3, r3, #8
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	4313      	orrs	r3, r2
 8008014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800801c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a16      	ldr	r2, [pc, #88]	@ (800807c <TIM_OC3_SetConfig+0xe0>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d003      	beq.n	800802e <TIM_OC3_SetConfig+0x92>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a15      	ldr	r2, [pc, #84]	@ (8008080 <TIM_OC3_SetConfig+0xe4>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d113      	bne.n	8008056 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800803c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	011b      	lsls	r3, r3, #4
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	4313      	orrs	r3, r2
 8008048:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	011b      	lsls	r3, r3, #4
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	4313      	orrs	r3, r2
 8008054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	693a      	ldr	r2, [r7, #16]
 800805a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	685a      	ldr	r2, [r3, #4]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	697a      	ldr	r2, [r7, #20]
 800806e:	621a      	str	r2, [r3, #32]
}
 8008070:	bf00      	nop
 8008072:	371c      	adds	r7, #28
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr
 800807c:	40010000 	.word	0x40010000
 8008080:	40010400 	.word	0x40010400

08008084 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008084:	b480      	push	{r7}
 8008086:	b087      	sub	sp, #28
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a1b      	ldr	r3, [r3, #32]
 8008098:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	021b      	lsls	r3, r3, #8
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80080ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	031b      	lsls	r3, r3, #12
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	4313      	orrs	r3, r2
 80080da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a12      	ldr	r2, [pc, #72]	@ (8008128 <TIM_OC4_SetConfig+0xa4>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d003      	beq.n	80080ec <TIM_OC4_SetConfig+0x68>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a11      	ldr	r2, [pc, #68]	@ (800812c <TIM_OC4_SetConfig+0xa8>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d109      	bne.n	8008100 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80080f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	695b      	ldr	r3, [r3, #20]
 80080f8:	019b      	lsls	r3, r3, #6
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	621a      	str	r2, [r3, #32]
}
 800811a:	bf00      	nop
 800811c:	371c      	adds	r7, #28
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	40010000 	.word	0x40010000
 800812c:	40010400 	.word	0x40010400

08008130 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008130:	b480      	push	{r7}
 8008132:	b087      	sub	sp, #28
 8008134:	af00      	add	r7, sp, #0
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]
 800813c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6a1b      	ldr	r3, [r3, #32]
 8008142:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6a1b      	ldr	r3, [r3, #32]
 8008148:	f023 0201 	bic.w	r2, r3, #1
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	4a28      	ldr	r2, [pc, #160]	@ (80081fc <TIM_TI1_SetConfig+0xcc>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d01b      	beq.n	8008196 <TIM_TI1_SetConfig+0x66>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008164:	d017      	beq.n	8008196 <TIM_TI1_SetConfig+0x66>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	4a25      	ldr	r2, [pc, #148]	@ (8008200 <TIM_TI1_SetConfig+0xd0>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d013      	beq.n	8008196 <TIM_TI1_SetConfig+0x66>
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	4a24      	ldr	r2, [pc, #144]	@ (8008204 <TIM_TI1_SetConfig+0xd4>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d00f      	beq.n	8008196 <TIM_TI1_SetConfig+0x66>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	4a23      	ldr	r2, [pc, #140]	@ (8008208 <TIM_TI1_SetConfig+0xd8>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d00b      	beq.n	8008196 <TIM_TI1_SetConfig+0x66>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	4a22      	ldr	r2, [pc, #136]	@ (800820c <TIM_TI1_SetConfig+0xdc>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d007      	beq.n	8008196 <TIM_TI1_SetConfig+0x66>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4a21      	ldr	r2, [pc, #132]	@ (8008210 <TIM_TI1_SetConfig+0xe0>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d003      	beq.n	8008196 <TIM_TI1_SetConfig+0x66>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	4a20      	ldr	r2, [pc, #128]	@ (8008214 <TIM_TI1_SetConfig+0xe4>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d101      	bne.n	800819a <TIM_TI1_SetConfig+0x6a>
 8008196:	2301      	movs	r3, #1
 8008198:	e000      	b.n	800819c <TIM_TI1_SetConfig+0x6c>
 800819a:	2300      	movs	r3, #0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d008      	beq.n	80081b2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	f023 0303 	bic.w	r3, r3, #3
 80081a6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	617b      	str	r3, [r7, #20]
 80081b0:	e003      	b.n	80081ba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	f043 0301 	orr.w	r3, r3, #1
 80081b8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	011b      	lsls	r3, r3, #4
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	697a      	ldr	r2, [r7, #20]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	f023 030a 	bic.w	r3, r3, #10
 80081d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	f003 030a 	and.w	r3, r3, #10
 80081dc:	693a      	ldr	r2, [r7, #16]
 80081de:	4313      	orrs	r3, r2
 80081e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	621a      	str	r2, [r3, #32]
}
 80081ee:	bf00      	nop
 80081f0:	371c      	adds	r7, #28
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	40010000 	.word	0x40010000
 8008200:	40000400 	.word	0x40000400
 8008204:	40000800 	.word	0x40000800
 8008208:	40000c00 	.word	0x40000c00
 800820c:	40010400 	.word	0x40010400
 8008210:	40014000 	.word	0x40014000
 8008214:	40001800 	.word	0x40001800

08008218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008218:	b480      	push	{r7}
 800821a:	b087      	sub	sp, #28
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6a1b      	ldr	r3, [r3, #32]
 8008228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	f023 0201 	bic.w	r2, r3, #1
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	011b      	lsls	r3, r3, #4
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	4313      	orrs	r3, r2
 800824c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	f023 030a 	bic.w	r3, r3, #10
 8008254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	4313      	orrs	r3, r2
 800825c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	697a      	ldr	r2, [r7, #20]
 8008268:	621a      	str	r2, [r3, #32]
}
 800826a:	bf00      	nop
 800826c:	371c      	adds	r7, #28
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008276:	b480      	push	{r7}
 8008278:	b087      	sub	sp, #28
 800827a:	af00      	add	r7, sp, #0
 800827c:	60f8      	str	r0, [r7, #12]
 800827e:	60b9      	str	r1, [r7, #8]
 8008280:	607a      	str	r2, [r7, #4]
 8008282:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6a1b      	ldr	r3, [r3, #32]
 8008288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	f023 0210 	bic.w	r2, r3, #16
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	021b      	lsls	r3, r3, #8
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80082b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	031b      	lsls	r3, r3, #12
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	4313      	orrs	r3, r2
 80082c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80082c8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	011b      	lsls	r3, r3, #4
 80082ce:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	621a      	str	r2, [r3, #32]
}
 80082e4:	bf00      	nop
 80082e6:	371c      	adds	r7, #28
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6a1b      	ldr	r3, [r3, #32]
 8008300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	f023 0210 	bic.w	r2, r3, #16
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	699b      	ldr	r3, [r3, #24]
 8008312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800831a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	031b      	lsls	r3, r3, #12
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	4313      	orrs	r3, r2
 8008324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800832c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	011b      	lsls	r3, r3, #4
 8008332:	697a      	ldr	r2, [r7, #20]
 8008334:	4313      	orrs	r3, r2
 8008336:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	621a      	str	r2, [r3, #32]
}
 8008344:	bf00      	nop
 8008346:	371c      	adds	r7, #28
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008350:	b480      	push	{r7}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
 800835c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6a1b      	ldr	r3, [r3, #32]
 8008368:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	69db      	ldr	r3, [r3, #28]
 8008374:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	f023 0303 	bic.w	r3, r3, #3
 800837c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4313      	orrs	r3, r2
 8008384:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800838c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	011b      	lsls	r3, r3, #4
 8008392:	b2db      	uxtb	r3, r3
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	4313      	orrs	r3, r2
 8008398:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80083a0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	021b      	lsls	r3, r3, #8
 80083a6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	693a      	ldr	r2, [r7, #16]
 80083b4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	621a      	str	r2, [r3, #32]
}
 80083bc:	bf00      	nop
 80083be:	371c      	adds	r7, #28
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
 80083d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6a1b      	ldr	r3, [r3, #32]
 80083e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	69db      	ldr	r3, [r3, #28]
 80083ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083f4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	021b      	lsls	r3, r3, #8
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008406:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	031b      	lsls	r3, r3, #12
 800840c:	b29b      	uxth	r3, r3
 800840e:	693a      	ldr	r2, [r7, #16]
 8008410:	4313      	orrs	r3, r2
 8008412:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800841a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	031b      	lsls	r3, r3, #12
 8008420:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	4313      	orrs	r3, r2
 8008428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	621a      	str	r2, [r3, #32]
}
 8008436:	bf00      	nop
 8008438:	371c      	adds	r7, #28
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008442:	b480      	push	{r7}
 8008444:	b085      	sub	sp, #20
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008458:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800845a:	683a      	ldr	r2, [r7, #0]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4313      	orrs	r3, r2
 8008460:	f043 0307 	orr.w	r3, r3, #7
 8008464:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	609a      	str	r2, [r3, #8]
}
 800846c:	bf00      	nop
 800846e:	3714      	adds	r7, #20
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008478:	b480      	push	{r7}
 800847a:	b087      	sub	sp, #28
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
 8008484:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008492:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	021a      	lsls	r2, r3, #8
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	431a      	orrs	r2, r3
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	4313      	orrs	r3, r2
 80084a0:	697a      	ldr	r2, [r7, #20]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	697a      	ldr	r2, [r7, #20]
 80084aa:	609a      	str	r2, [r3, #8]
}
 80084ac:	bf00      	nop
 80084ae:	371c      	adds	r7, #28
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	f003 031f 	and.w	r3, r3, #31
 80084ca:	2201      	movs	r2, #1
 80084cc:	fa02 f303 	lsl.w	r3, r2, r3
 80084d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6a1a      	ldr	r2, [r3, #32]
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	43db      	mvns	r3, r3
 80084da:	401a      	ands	r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6a1a      	ldr	r2, [r3, #32]
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	f003 031f 	and.w	r3, r3, #31
 80084ea:	6879      	ldr	r1, [r7, #4]
 80084ec:	fa01 f303 	lsl.w	r3, r1, r3
 80084f0:	431a      	orrs	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	621a      	str	r2, [r3, #32]
}
 80084f6:	bf00      	nop
 80084f8:	371c      	adds	r7, #28
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
	...

08008504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008514:	2b01      	cmp	r3, #1
 8008516:	d101      	bne.n	800851c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008518:	2302      	movs	r3, #2
 800851a:	e05a      	b.n	80085d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2202      	movs	r2, #2
 8008528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008542:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	4313      	orrs	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a21      	ldr	r2, [pc, #132]	@ (80085e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d022      	beq.n	80085a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008568:	d01d      	beq.n	80085a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a1d      	ldr	r2, [pc, #116]	@ (80085e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d018      	beq.n	80085a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a1b      	ldr	r2, [pc, #108]	@ (80085e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d013      	beq.n	80085a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a1a      	ldr	r2, [pc, #104]	@ (80085ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d00e      	beq.n	80085a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a18      	ldr	r2, [pc, #96]	@ (80085f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d009      	beq.n	80085a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a17      	ldr	r2, [pc, #92]	@ (80085f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d004      	beq.n	80085a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a15      	ldr	r2, [pc, #84]	@ (80085f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d10c      	bne.n	80085c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3714      	adds	r7, #20
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr
 80085de:	bf00      	nop
 80085e0:	40010000 	.word	0x40010000
 80085e4:	40000400 	.word	0x40000400
 80085e8:	40000800 	.word	0x40000800
 80085ec:	40000c00 	.word	0x40000c00
 80085f0:	40010400 	.word	0x40010400
 80085f4:	40014000 	.word	0x40014000
 80085f8:	40001800 	.word	0x40001800

080085fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008606:	2300      	movs	r3, #0
 8008608:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008610:	2b01      	cmp	r3, #1
 8008612:	d101      	bne.n	8008618 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008614:	2302      	movs	r3, #2
 8008616:	e03d      	b.n	8008694 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	4313      	orrs	r3, r2
 800862c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	4313      	orrs	r3, r2
 800863a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	4313      	orrs	r3, r2
 8008648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4313      	orrs	r3, r2
 8008656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	4313      	orrs	r3, r2
 8008664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	4313      	orrs	r3, r2
 8008672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	69db      	ldr	r3, [r3, #28]
 800867e:	4313      	orrs	r3, r2
 8008680:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086a8:	bf00      	nop
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d101      	bne.n	80086da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e042      	b.n	8008760 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d106      	bne.n	80086f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f7fb fc5c 	bl	8003fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2224      	movs	r2, #36	@ 0x24
 80086f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68da      	ldr	r2, [r3, #12]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800870a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fdbd 	bl	800928c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	691a      	ldr	r2, [r3, #16]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008720:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	695a      	ldr	r2, [r3, #20]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008730:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68da      	ldr	r2, [r3, #12]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008740:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2220      	movs	r2, #32
 800874c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2220      	movs	r2, #32
 8008754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b08a      	sub	sp, #40	@ 0x28
 800876c:	af02      	add	r7, sp, #8
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	603b      	str	r3, [r7, #0]
 8008774:	4613      	mov	r3, r2
 8008776:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008778:	2300      	movs	r3, #0
 800877a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b20      	cmp	r3, #32
 8008786:	d175      	bne.n	8008874 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <HAL_UART_Transmit+0x2c>
 800878e:	88fb      	ldrh	r3, [r7, #6]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e06e      	b.n	8008876 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2221      	movs	r2, #33	@ 0x21
 80087a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087a6:	f7fb fdf5 	bl	8004394 <HAL_GetTick>
 80087aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	88fa      	ldrh	r2, [r7, #6]
 80087b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	88fa      	ldrh	r2, [r7, #6]
 80087b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087c0:	d108      	bne.n	80087d4 <HAL_UART_Transmit+0x6c>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d104      	bne.n	80087d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80087ca:	2300      	movs	r3, #0
 80087cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	61bb      	str	r3, [r7, #24]
 80087d2:	e003      	b.n	80087dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087d8:	2300      	movs	r3, #0
 80087da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80087dc:	e02e      	b.n	800883c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2200      	movs	r2, #0
 80087e6:	2180      	movs	r1, #128	@ 0x80
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f000 fb1f 	bl	8008e2c <UART_WaitOnFlagUntilTimeout>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d005      	beq.n	8008800 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2220      	movs	r2, #32
 80087f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80087fc:	2303      	movs	r3, #3
 80087fe:	e03a      	b.n	8008876 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10b      	bne.n	800881e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008814:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	3302      	adds	r3, #2
 800881a:	61bb      	str	r3, [r7, #24]
 800881c:	e007      	b.n	800882e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	781a      	ldrb	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	3301      	adds	r3, #1
 800882c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008832:	b29b      	uxth	r3, r3
 8008834:	3b01      	subs	r3, #1
 8008836:	b29a      	uxth	r2, r3
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008840:	b29b      	uxth	r3, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1cb      	bne.n	80087de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	2200      	movs	r2, #0
 800884e:	2140      	movs	r1, #64	@ 0x40
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f000 faeb 	bl	8008e2c <UART_WaitOnFlagUntilTimeout>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d005      	beq.n	8008868 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2220      	movs	r2, #32
 8008860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008864:	2303      	movs	r3, #3
 8008866:	e006      	b.n	8008876 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2220      	movs	r2, #32
 800886c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008870:	2300      	movs	r3, #0
 8008872:	e000      	b.n	8008876 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008874:	2302      	movs	r3, #2
  }
}
 8008876:	4618      	mov	r0, r3
 8008878:	3720      	adds	r7, #32
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b084      	sub	sp, #16
 8008882:	af00      	add	r7, sp, #0
 8008884:	60f8      	str	r0, [r7, #12]
 8008886:	60b9      	str	r1, [r7, #8]
 8008888:	4613      	mov	r3, r2
 800888a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008892:	b2db      	uxtb	r3, r3
 8008894:	2b20      	cmp	r3, #32
 8008896:	d112      	bne.n	80088be <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d002      	beq.n	80088a4 <HAL_UART_Receive_IT+0x26>
 800889e:	88fb      	ldrh	r3, [r7, #6]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d101      	bne.n	80088a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e00b      	b.n	80088c0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80088ae:	88fb      	ldrh	r3, [r7, #6]
 80088b0:	461a      	mov	r2, r3
 80088b2:	68b9      	ldr	r1, [r7, #8]
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 fb12 	bl	8008ede <UART_Start_Receive_IT>
 80088ba:	4603      	mov	r3, r0
 80088bc:	e000      	b.n	80088c0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80088be:	2302      	movs	r3, #2
  }
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b0ba      	sub	sp, #232	@ 0xe8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	695b      	ldr	r3, [r3, #20]
 80088ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80088f4:	2300      	movs	r3, #0
 80088f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80088fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088fe:	f003 030f 	and.w	r3, r3, #15
 8008902:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008906:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10f      	bne.n	800892e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800890e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008912:	f003 0320 	and.w	r3, r3, #32
 8008916:	2b00      	cmp	r3, #0
 8008918:	d009      	beq.n	800892e <HAL_UART_IRQHandler+0x66>
 800891a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800891e:	f003 0320 	and.w	r3, r3, #32
 8008922:	2b00      	cmp	r3, #0
 8008924:	d003      	beq.n	800892e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fbf2 	bl	8009110 <UART_Receive_IT>
      return;
 800892c:	e25b      	b.n	8008de6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800892e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008932:	2b00      	cmp	r3, #0
 8008934:	f000 80de 	beq.w	8008af4 <HAL_UART_IRQHandler+0x22c>
 8008938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800893c:	f003 0301 	and.w	r3, r3, #1
 8008940:	2b00      	cmp	r3, #0
 8008942:	d106      	bne.n	8008952 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008948:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800894c:	2b00      	cmp	r3, #0
 800894e:	f000 80d1 	beq.w	8008af4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00b      	beq.n	8008976 <HAL_UART_IRQHandler+0xae>
 800895e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008966:	2b00      	cmp	r3, #0
 8008968:	d005      	beq.n	8008976 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800896e:	f043 0201 	orr.w	r2, r3, #1
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800897a:	f003 0304 	and.w	r3, r3, #4
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00b      	beq.n	800899a <HAL_UART_IRQHandler+0xd2>
 8008982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	2b00      	cmp	r3, #0
 800898c:	d005      	beq.n	800899a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008992:	f043 0202 	orr.w	r2, r3, #2
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800899a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800899e:	f003 0302 	and.w	r3, r3, #2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00b      	beq.n	80089be <HAL_UART_IRQHandler+0xf6>
 80089a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089aa:	f003 0301 	and.w	r3, r3, #1
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d005      	beq.n	80089be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089b6:	f043 0204 	orr.w	r2, r3, #4
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80089be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089c2:	f003 0308 	and.w	r3, r3, #8
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d011      	beq.n	80089ee <HAL_UART_IRQHandler+0x126>
 80089ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089ce:	f003 0320 	and.w	r3, r3, #32
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d105      	bne.n	80089e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80089d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80089da:	f003 0301 	and.w	r3, r3, #1
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d005      	beq.n	80089ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089e6:	f043 0208 	orr.w	r2, r3, #8
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f000 81f2 	beq.w	8008ddc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80089f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089fc:	f003 0320 	and.w	r3, r3, #32
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d008      	beq.n	8008a16 <HAL_UART_IRQHandler+0x14e>
 8008a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a08:	f003 0320 	and.w	r3, r3, #32
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d002      	beq.n	8008a16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fb7d 	bl	8009110 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	695b      	ldr	r3, [r3, #20]
 8008a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a20:	2b40      	cmp	r3, #64	@ 0x40
 8008a22:	bf0c      	ite	eq
 8008a24:	2301      	moveq	r3, #1
 8008a26:	2300      	movne	r3, #0
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a32:	f003 0308 	and.w	r3, r3, #8
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d103      	bne.n	8008a42 <HAL_UART_IRQHandler+0x17a>
 8008a3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d04f      	beq.n	8008ae2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fa85 	bl	8008f52 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	695b      	ldr	r3, [r3, #20]
 8008a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a52:	2b40      	cmp	r3, #64	@ 0x40
 8008a54:	d141      	bne.n	8008ada <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	3314      	adds	r3, #20
 8008a5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008a64:	e853 3f00 	ldrex	r3, [r3]
 8008a68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	3314      	adds	r3, #20
 8008a7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008a82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008a86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008a8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008a92:	e841 2300 	strex	r3, r2, [r1]
 8008a96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008a9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1d9      	bne.n	8008a56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d013      	beq.n	8008ad2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aae:	4a7e      	ldr	r2, [pc, #504]	@ (8008ca8 <HAL_UART_IRQHandler+0x3e0>)
 8008ab0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fc fa1d 	bl	8004ef6 <HAL_DMA_Abort_IT>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d016      	beq.n	8008af0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008acc:	4610      	mov	r0, r2
 8008ace:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ad0:	e00e      	b.n	8008af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f994 	bl	8008e00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ad8:	e00a      	b.n	8008af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f990 	bl	8008e00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ae0:	e006      	b.n	8008af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f98c 	bl	8008e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008aee:	e175      	b.n	8008ddc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008af0:	bf00      	nop
    return;
 8008af2:	e173      	b.n	8008ddc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	f040 814f 	bne.w	8008d9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b02:	f003 0310 	and.w	r3, r3, #16
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f000 8148 	beq.w	8008d9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b10:	f003 0310 	and.w	r3, r3, #16
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f000 8141 	beq.w	8008d9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	60bb      	str	r3, [r7, #8]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	60bb      	str	r3, [r7, #8]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	60bb      	str	r3, [r7, #8]
 8008b2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b3a:	2b40      	cmp	r3, #64	@ 0x40
 8008b3c:	f040 80b6 	bne.w	8008cac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f000 8145 	beq.w	8008de0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	f080 813e 	bcs.w	8008de0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008b6a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b70:	69db      	ldr	r3, [r3, #28]
 8008b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b76:	f000 8088 	beq.w	8008c8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	330c      	adds	r3, #12
 8008b80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008b88:	e853 3f00 	ldrex	r3, [r3]
 8008b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008b94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	330c      	adds	r3, #12
 8008ba2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008ba6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008baa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008bb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008bb6:	e841 2300 	strex	r3, r2, [r1]
 8008bba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1d9      	bne.n	8008b7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	3314      	adds	r3, #20
 8008bcc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008bd0:	e853 3f00 	ldrex	r3, [r3]
 8008bd4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008bd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008bd8:	f023 0301 	bic.w	r3, r3, #1
 8008bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3314      	adds	r3, #20
 8008be6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008bea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008bee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008bf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008bf6:	e841 2300 	strex	r3, r2, [r1]
 8008bfa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008bfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1e1      	bne.n	8008bc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	3314      	adds	r3, #20
 8008c08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c0c:	e853 3f00 	ldrex	r3, [r3]
 8008c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008c12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	3314      	adds	r3, #20
 8008c22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008c26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008c28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008c2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008c2e:	e841 2300 	strex	r3, r2, [r1]
 8008c32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008c34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1e3      	bne.n	8008c02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2220      	movs	r2, #32
 8008c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	330c      	adds	r3, #12
 8008c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c52:	e853 3f00 	ldrex	r3, [r3]
 8008c56:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008c58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c5a:	f023 0310 	bic.w	r3, r3, #16
 8008c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	330c      	adds	r3, #12
 8008c68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008c6c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008c6e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008c72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c74:	e841 2300 	strex	r3, r2, [r1]
 8008c78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d1e3      	bne.n	8008c48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fc f8c6 	bl	8004e16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2202      	movs	r2, #2
 8008c8e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 f8b7 	bl	8008e14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008ca6:	e09b      	b.n	8008de0 <HAL_UART_IRQHandler+0x518>
 8008ca8:	08009019 	.word	0x08009019
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	1ad3      	subs	r3, r2, r3
 8008cb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f000 808e 	beq.w	8008de4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008cc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f000 8089 	beq.w	8008de4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	330c      	adds	r3, #12
 8008cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cdc:	e853 3f00 	ldrex	r3, [r3]
 8008ce0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ce4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ce8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	330c      	adds	r3, #12
 8008cf2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008cf6:	647a      	str	r2, [r7, #68]	@ 0x44
 8008cf8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cfe:	e841 2300 	strex	r3, r2, [r1]
 8008d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1e3      	bne.n	8008cd2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3314      	adds	r3, #20
 8008d10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d14:	e853 3f00 	ldrex	r3, [r3]
 8008d18:	623b      	str	r3, [r7, #32]
   return(result);
 8008d1a:	6a3b      	ldr	r3, [r7, #32]
 8008d1c:	f023 0301 	bic.w	r3, r3, #1
 8008d20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3314      	adds	r3, #20
 8008d2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008d2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1e3      	bne.n	8008d0a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2220      	movs	r2, #32
 8008d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	330c      	adds	r3, #12
 8008d56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	e853 3f00 	ldrex	r3, [r3]
 8008d5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f023 0310 	bic.w	r3, r3, #16
 8008d66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	330c      	adds	r3, #12
 8008d70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008d74:	61fa      	str	r2, [r7, #28]
 8008d76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d78:	69b9      	ldr	r1, [r7, #24]
 8008d7a:	69fa      	ldr	r2, [r7, #28]
 8008d7c:	e841 2300 	strex	r3, r2, [r1]
 8008d80:	617b      	str	r3, [r7, #20]
   return(result);
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d1e3      	bne.n	8008d50 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008d92:	4619      	mov	r1, r3
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 f83d 	bl	8008e14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008d9a:	e023      	b.n	8008de4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d009      	beq.n	8008dbc <HAL_UART_IRQHandler+0x4f4>
 8008da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d003      	beq.n	8008dbc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f943 	bl	8009040 <UART_Transmit_IT>
    return;
 8008dba:	e014      	b.n	8008de6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00e      	beq.n	8008de6 <HAL_UART_IRQHandler+0x51e>
 8008dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d008      	beq.n	8008de6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f983 	bl	80090e0 <UART_EndTransmit_IT>
    return;
 8008dda:	e004      	b.n	8008de6 <HAL_UART_IRQHandler+0x51e>
    return;
 8008ddc:	bf00      	nop
 8008dde:	e002      	b.n	8008de6 <HAL_UART_IRQHandler+0x51e>
      return;
 8008de0:	bf00      	nop
 8008de2:	e000      	b.n	8008de6 <HAL_UART_IRQHandler+0x51e>
      return;
 8008de4:	bf00      	nop
  }
}
 8008de6:	37e8      	adds	r7, #232	@ 0xe8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008df4:	bf00      	nop
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008e08:	bf00      	nop
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b086      	sub	sp, #24
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	603b      	str	r3, [r7, #0]
 8008e38:	4613      	mov	r3, r2
 8008e3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e3c:	e03b      	b.n	8008eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e3e:	6a3b      	ldr	r3, [r7, #32]
 8008e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e44:	d037      	beq.n	8008eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e46:	f7fb faa5 	bl	8004394 <HAL_GetTick>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	1ad3      	subs	r3, r2, r3
 8008e50:	6a3a      	ldr	r2, [r7, #32]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d302      	bcc.n	8008e5c <UART_WaitOnFlagUntilTimeout+0x30>
 8008e56:	6a3b      	ldr	r3, [r7, #32]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d101      	bne.n	8008e60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e03a      	b.n	8008ed6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	f003 0304 	and.w	r3, r3, #4
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d023      	beq.n	8008eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	2b80      	cmp	r3, #128	@ 0x80
 8008e72:	d020      	beq.n	8008eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	2b40      	cmp	r3, #64	@ 0x40
 8008e78:	d01d      	beq.n	8008eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 0308 	and.w	r3, r3, #8
 8008e84:	2b08      	cmp	r3, #8
 8008e86:	d116      	bne.n	8008eb6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008e88:	2300      	movs	r3, #0
 8008e8a:	617b      	str	r3, [r7, #20]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	617b      	str	r3, [r7, #20]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	617b      	str	r3, [r7, #20]
 8008e9c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f000 f857 	bl	8008f52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2208      	movs	r2, #8
 8008ea8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e00f      	b.n	8008ed6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	68ba      	ldr	r2, [r7, #8]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	bf0c      	ite	eq
 8008ec6:	2301      	moveq	r3, #1
 8008ec8:	2300      	movne	r3, #0
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	461a      	mov	r2, r3
 8008ece:	79fb      	ldrb	r3, [r7, #7]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d0b4      	beq.n	8008e3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3718      	adds	r7, #24
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ede:	b480      	push	{r7}
 8008ee0:	b085      	sub	sp, #20
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	60f8      	str	r0, [r7, #12]
 8008ee6:	60b9      	str	r1, [r7, #8]
 8008ee8:	4613      	mov	r3, r2
 8008eea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	68ba      	ldr	r2, [r7, #8]
 8008ef0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	88fa      	ldrh	r2, [r7, #6]
 8008ef6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	88fa      	ldrh	r2, [r7, #6]
 8008efc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2200      	movs	r2, #0
 8008f02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2222      	movs	r2, #34	@ 0x22
 8008f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d007      	beq.n	8008f24 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68da      	ldr	r2, [r3, #12]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f22:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	695a      	ldr	r2, [r3, #20]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f042 0201 	orr.w	r2, r2, #1
 8008f32:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	68da      	ldr	r2, [r3, #12]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f042 0220 	orr.w	r2, r2, #32
 8008f42:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3714      	adds	r7, #20
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b095      	sub	sp, #84	@ 0x54
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	330c      	adds	r3, #12
 8008f60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f64:	e853 3f00 	ldrex	r3, [r3]
 8008f68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	330c      	adds	r3, #12
 8008f78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008f7a:	643a      	str	r2, [r7, #64]	@ 0x40
 8008f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f82:	e841 2300 	strex	r3, r2, [r1]
 8008f86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1e5      	bne.n	8008f5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	3314      	adds	r3, #20
 8008f94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f96:	6a3b      	ldr	r3, [r7, #32]
 8008f98:	e853 3f00 	ldrex	r3, [r3]
 8008f9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	f023 0301 	bic.w	r3, r3, #1
 8008fa4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3314      	adds	r3, #20
 8008fac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008fae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fb6:	e841 2300 	strex	r3, r2, [r1]
 8008fba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1e5      	bne.n	8008f8e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d119      	bne.n	8008ffe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	330c      	adds	r3, #12
 8008fd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	e853 3f00 	ldrex	r3, [r3]
 8008fd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	f023 0310 	bic.w	r3, r3, #16
 8008fe0:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	330c      	adds	r3, #12
 8008fe8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fea:	61ba      	str	r2, [r7, #24]
 8008fec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fee:	6979      	ldr	r1, [r7, #20]
 8008ff0:	69ba      	ldr	r2, [r7, #24]
 8008ff2:	e841 2300 	strex	r3, r2, [r1]
 8008ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1e5      	bne.n	8008fca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2220      	movs	r2, #32
 8009002:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800900c:	bf00      	nop
 800900e:	3754      	adds	r7, #84	@ 0x54
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009024:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2200      	movs	r2, #0
 800902a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f7ff fee4 	bl	8008e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009038:	bf00      	nop
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b21      	cmp	r3, #33	@ 0x21
 8009052:	d13e      	bne.n	80090d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800905c:	d114      	bne.n	8009088 <UART_Transmit_IT+0x48>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d110      	bne.n	8009088 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	461a      	mov	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800907a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a1b      	ldr	r3, [r3, #32]
 8009080:	1c9a      	adds	r2, r3, #2
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	621a      	str	r2, [r3, #32]
 8009086:	e008      	b.n	800909a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a1b      	ldr	r3, [r3, #32]
 800908c:	1c59      	adds	r1, r3, #1
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	6211      	str	r1, [r2, #32]
 8009092:	781a      	ldrb	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800909e:	b29b      	uxth	r3, r3
 80090a0:	3b01      	subs	r3, #1
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	4619      	mov	r1, r3
 80090a8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d10f      	bne.n	80090ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	68da      	ldr	r2, [r3, #12]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80090bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68da      	ldr	r2, [r3, #12]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80090cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80090ce:	2300      	movs	r3, #0
 80090d0:	e000      	b.n	80090d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80090d2:	2302      	movs	r3, #2
  }
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3714      	adds	r7, #20
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68da      	ldr	r2, [r3, #12]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80090f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2220      	movs	r2, #32
 80090fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f7ff fe73 	bl	8008dec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b08c      	sub	sp, #48	@ 0x30
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800911e:	b2db      	uxtb	r3, r3
 8009120:	2b22      	cmp	r3, #34	@ 0x22
 8009122:	f040 80ae 	bne.w	8009282 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800912e:	d117      	bne.n	8009160 <UART_Receive_IT+0x50>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d113      	bne.n	8009160 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009138:	2300      	movs	r3, #0
 800913a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009140:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	b29b      	uxth	r3, r3
 800914a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800914e:	b29a      	uxth	r2, r3
 8009150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009152:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009158:	1c9a      	adds	r2, r3, #2
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	629a      	str	r2, [r3, #40]	@ 0x28
 800915e:	e026      	b.n	80091ae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009164:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009166:	2300      	movs	r3, #0
 8009168:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	689b      	ldr	r3, [r3, #8]
 800916e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009172:	d007      	beq.n	8009184 <UART_Receive_IT+0x74>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10a      	bne.n	8009192 <UART_Receive_IT+0x82>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	691b      	ldr	r3, [r3, #16]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d106      	bne.n	8009192 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	b2da      	uxtb	r2, r3
 800918c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800918e:	701a      	strb	r2, [r3, #0]
 8009190:	e008      	b.n	80091a4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	b2db      	uxtb	r3, r3
 800919a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800919e:	b2da      	uxtb	r2, r3
 80091a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a8:	1c5a      	adds	r2, r3, #1
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	3b01      	subs	r3, #1
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	4619      	mov	r1, r3
 80091bc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d15d      	bne.n	800927e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68da      	ldr	r2, [r3, #12]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f022 0220 	bic.w	r2, r2, #32
 80091d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68da      	ldr	r2, [r3, #12]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80091e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	695a      	ldr	r2, [r3, #20]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f022 0201 	bic.w	r2, r2, #1
 80091f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2220      	movs	r2, #32
 80091f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009204:	2b01      	cmp	r3, #1
 8009206:	d135      	bne.n	8009274 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	330c      	adds	r3, #12
 8009214:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	e853 3f00 	ldrex	r3, [r3]
 800921c:	613b      	str	r3, [r7, #16]
   return(result);
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	f023 0310 	bic.w	r3, r3, #16
 8009224:	627b      	str	r3, [r7, #36]	@ 0x24
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	330c      	adds	r3, #12
 800922c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800922e:	623a      	str	r2, [r7, #32]
 8009230:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009232:	69f9      	ldr	r1, [r7, #28]
 8009234:	6a3a      	ldr	r2, [r7, #32]
 8009236:	e841 2300 	strex	r3, r2, [r1]
 800923a:	61bb      	str	r3, [r7, #24]
   return(result);
 800923c:	69bb      	ldr	r3, [r7, #24]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1e5      	bne.n	800920e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 0310 	and.w	r3, r3, #16
 800924c:	2b10      	cmp	r3, #16
 800924e:	d10a      	bne.n	8009266 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009250:	2300      	movs	r3, #0
 8009252:	60fb      	str	r3, [r7, #12]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	60fb      	str	r3, [r7, #12]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	60fb      	str	r3, [r7, #12]
 8009264:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f7ff fdd1 	bl	8008e14 <HAL_UARTEx_RxEventCallback>
 8009272:	e002      	b.n	800927a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f7f9 fedf 	bl	8003038 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	e002      	b.n	8009284 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	e000      	b.n	8009284 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009282:	2302      	movs	r3, #2
  }
}
 8009284:	4618      	mov	r0, r3
 8009286:	3730      	adds	r7, #48	@ 0x30
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}

0800928c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800928c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009290:	b0c0      	sub	sp, #256	@ 0x100
 8009292:	af00      	add	r7, sp, #0
 8009294:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	691b      	ldr	r3, [r3, #16]
 80092a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80092a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092a8:	68d9      	ldr	r1, [r3, #12]
 80092aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	ea40 0301 	orr.w	r3, r0, r1
 80092b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80092b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092ba:	689a      	ldr	r2, [r3, #8]
 80092bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	431a      	orrs	r2, r3
 80092c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	431a      	orrs	r2, r3
 80092cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092d0:	69db      	ldr	r3, [r3, #28]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80092d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80092e4:	f021 010c 	bic.w	r1, r1, #12
 80092e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80092f2:	430b      	orrs	r3, r1
 80092f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80092f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	695b      	ldr	r3, [r3, #20]
 80092fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009306:	6999      	ldr	r1, [r3, #24]
 8009308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	ea40 0301 	orr.w	r3, r0, r1
 8009312:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	4b8f      	ldr	r3, [pc, #572]	@ (8009558 <UART_SetConfig+0x2cc>)
 800931c:	429a      	cmp	r2, r3
 800931e:	d005      	beq.n	800932c <UART_SetConfig+0xa0>
 8009320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	4b8d      	ldr	r3, [pc, #564]	@ (800955c <UART_SetConfig+0x2d0>)
 8009328:	429a      	cmp	r2, r3
 800932a:	d104      	bne.n	8009336 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800932c:	f7fd fc7e 	bl	8006c2c <HAL_RCC_GetPCLK2Freq>
 8009330:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009334:	e003      	b.n	800933e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009336:	f7fd fc65 	bl	8006c04 <HAL_RCC_GetPCLK1Freq>
 800933a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800933e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009342:	69db      	ldr	r3, [r3, #28]
 8009344:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009348:	f040 810c 	bne.w	8009564 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800934c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009350:	2200      	movs	r2, #0
 8009352:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009356:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800935a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800935e:	4622      	mov	r2, r4
 8009360:	462b      	mov	r3, r5
 8009362:	1891      	adds	r1, r2, r2
 8009364:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009366:	415b      	adcs	r3, r3
 8009368:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800936a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800936e:	4621      	mov	r1, r4
 8009370:	eb12 0801 	adds.w	r8, r2, r1
 8009374:	4629      	mov	r1, r5
 8009376:	eb43 0901 	adc.w	r9, r3, r1
 800937a:	f04f 0200 	mov.w	r2, #0
 800937e:	f04f 0300 	mov.w	r3, #0
 8009382:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009386:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800938a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800938e:	4690      	mov	r8, r2
 8009390:	4699      	mov	r9, r3
 8009392:	4623      	mov	r3, r4
 8009394:	eb18 0303 	adds.w	r3, r8, r3
 8009398:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800939c:	462b      	mov	r3, r5
 800939e:	eb49 0303 	adc.w	r3, r9, r3
 80093a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80093a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80093b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80093b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80093ba:	460b      	mov	r3, r1
 80093bc:	18db      	adds	r3, r3, r3
 80093be:	653b      	str	r3, [r7, #80]	@ 0x50
 80093c0:	4613      	mov	r3, r2
 80093c2:	eb42 0303 	adc.w	r3, r2, r3
 80093c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80093c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80093cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80093d0:	f7f7 fc5a 	bl	8000c88 <__aeabi_uldivmod>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	4b61      	ldr	r3, [pc, #388]	@ (8009560 <UART_SetConfig+0x2d4>)
 80093da:	fba3 2302 	umull	r2, r3, r3, r2
 80093de:	095b      	lsrs	r3, r3, #5
 80093e0:	011c      	lsls	r4, r3, #4
 80093e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093e6:	2200      	movs	r2, #0
 80093e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80093ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80093f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80093f4:	4642      	mov	r2, r8
 80093f6:	464b      	mov	r3, r9
 80093f8:	1891      	adds	r1, r2, r2
 80093fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80093fc:	415b      	adcs	r3, r3
 80093fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009400:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009404:	4641      	mov	r1, r8
 8009406:	eb12 0a01 	adds.w	sl, r2, r1
 800940a:	4649      	mov	r1, r9
 800940c:	eb43 0b01 	adc.w	fp, r3, r1
 8009410:	f04f 0200 	mov.w	r2, #0
 8009414:	f04f 0300 	mov.w	r3, #0
 8009418:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800941c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009420:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009424:	4692      	mov	sl, r2
 8009426:	469b      	mov	fp, r3
 8009428:	4643      	mov	r3, r8
 800942a:	eb1a 0303 	adds.w	r3, sl, r3
 800942e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009432:	464b      	mov	r3, r9
 8009434:	eb4b 0303 	adc.w	r3, fp, r3
 8009438:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800943c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	2200      	movs	r2, #0
 8009444:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009448:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800944c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009450:	460b      	mov	r3, r1
 8009452:	18db      	adds	r3, r3, r3
 8009454:	643b      	str	r3, [r7, #64]	@ 0x40
 8009456:	4613      	mov	r3, r2
 8009458:	eb42 0303 	adc.w	r3, r2, r3
 800945c:	647b      	str	r3, [r7, #68]	@ 0x44
 800945e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009462:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009466:	f7f7 fc0f 	bl	8000c88 <__aeabi_uldivmod>
 800946a:	4602      	mov	r2, r0
 800946c:	460b      	mov	r3, r1
 800946e:	4611      	mov	r1, r2
 8009470:	4b3b      	ldr	r3, [pc, #236]	@ (8009560 <UART_SetConfig+0x2d4>)
 8009472:	fba3 2301 	umull	r2, r3, r3, r1
 8009476:	095b      	lsrs	r3, r3, #5
 8009478:	2264      	movs	r2, #100	@ 0x64
 800947a:	fb02 f303 	mul.w	r3, r2, r3
 800947e:	1acb      	subs	r3, r1, r3
 8009480:	00db      	lsls	r3, r3, #3
 8009482:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009486:	4b36      	ldr	r3, [pc, #216]	@ (8009560 <UART_SetConfig+0x2d4>)
 8009488:	fba3 2302 	umull	r2, r3, r3, r2
 800948c:	095b      	lsrs	r3, r3, #5
 800948e:	005b      	lsls	r3, r3, #1
 8009490:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009494:	441c      	add	r4, r3
 8009496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800949a:	2200      	movs	r2, #0
 800949c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80094a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80094a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80094a8:	4642      	mov	r2, r8
 80094aa:	464b      	mov	r3, r9
 80094ac:	1891      	adds	r1, r2, r2
 80094ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80094b0:	415b      	adcs	r3, r3
 80094b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80094b8:	4641      	mov	r1, r8
 80094ba:	1851      	adds	r1, r2, r1
 80094bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80094be:	4649      	mov	r1, r9
 80094c0:	414b      	adcs	r3, r1
 80094c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80094c4:	f04f 0200 	mov.w	r2, #0
 80094c8:	f04f 0300 	mov.w	r3, #0
 80094cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80094d0:	4659      	mov	r1, fp
 80094d2:	00cb      	lsls	r3, r1, #3
 80094d4:	4651      	mov	r1, sl
 80094d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094da:	4651      	mov	r1, sl
 80094dc:	00ca      	lsls	r2, r1, #3
 80094de:	4610      	mov	r0, r2
 80094e0:	4619      	mov	r1, r3
 80094e2:	4603      	mov	r3, r0
 80094e4:	4642      	mov	r2, r8
 80094e6:	189b      	adds	r3, r3, r2
 80094e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80094ec:	464b      	mov	r3, r9
 80094ee:	460a      	mov	r2, r1
 80094f0:	eb42 0303 	adc.w	r3, r2, r3
 80094f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80094f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009504:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009508:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800950c:	460b      	mov	r3, r1
 800950e:	18db      	adds	r3, r3, r3
 8009510:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009512:	4613      	mov	r3, r2
 8009514:	eb42 0303 	adc.w	r3, r2, r3
 8009518:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800951a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800951e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009522:	f7f7 fbb1 	bl	8000c88 <__aeabi_uldivmod>
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	4b0d      	ldr	r3, [pc, #52]	@ (8009560 <UART_SetConfig+0x2d4>)
 800952c:	fba3 1302 	umull	r1, r3, r3, r2
 8009530:	095b      	lsrs	r3, r3, #5
 8009532:	2164      	movs	r1, #100	@ 0x64
 8009534:	fb01 f303 	mul.w	r3, r1, r3
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	00db      	lsls	r3, r3, #3
 800953c:	3332      	adds	r3, #50	@ 0x32
 800953e:	4a08      	ldr	r2, [pc, #32]	@ (8009560 <UART_SetConfig+0x2d4>)
 8009540:	fba2 2303 	umull	r2, r3, r2, r3
 8009544:	095b      	lsrs	r3, r3, #5
 8009546:	f003 0207 	and.w	r2, r3, #7
 800954a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4422      	add	r2, r4
 8009552:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009554:	e106      	b.n	8009764 <UART_SetConfig+0x4d8>
 8009556:	bf00      	nop
 8009558:	40011000 	.word	0x40011000
 800955c:	40011400 	.word	0x40011400
 8009560:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009568:	2200      	movs	r2, #0
 800956a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800956e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009572:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009576:	4642      	mov	r2, r8
 8009578:	464b      	mov	r3, r9
 800957a:	1891      	adds	r1, r2, r2
 800957c:	6239      	str	r1, [r7, #32]
 800957e:	415b      	adcs	r3, r3
 8009580:	627b      	str	r3, [r7, #36]	@ 0x24
 8009582:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009586:	4641      	mov	r1, r8
 8009588:	1854      	adds	r4, r2, r1
 800958a:	4649      	mov	r1, r9
 800958c:	eb43 0501 	adc.w	r5, r3, r1
 8009590:	f04f 0200 	mov.w	r2, #0
 8009594:	f04f 0300 	mov.w	r3, #0
 8009598:	00eb      	lsls	r3, r5, #3
 800959a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800959e:	00e2      	lsls	r2, r4, #3
 80095a0:	4614      	mov	r4, r2
 80095a2:	461d      	mov	r5, r3
 80095a4:	4643      	mov	r3, r8
 80095a6:	18e3      	adds	r3, r4, r3
 80095a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80095ac:	464b      	mov	r3, r9
 80095ae:	eb45 0303 	adc.w	r3, r5, r3
 80095b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80095b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80095c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80095c6:	f04f 0200 	mov.w	r2, #0
 80095ca:	f04f 0300 	mov.w	r3, #0
 80095ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80095d2:	4629      	mov	r1, r5
 80095d4:	008b      	lsls	r3, r1, #2
 80095d6:	4621      	mov	r1, r4
 80095d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095dc:	4621      	mov	r1, r4
 80095de:	008a      	lsls	r2, r1, #2
 80095e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80095e4:	f7f7 fb50 	bl	8000c88 <__aeabi_uldivmod>
 80095e8:	4602      	mov	r2, r0
 80095ea:	460b      	mov	r3, r1
 80095ec:	4b60      	ldr	r3, [pc, #384]	@ (8009770 <UART_SetConfig+0x4e4>)
 80095ee:	fba3 2302 	umull	r2, r3, r3, r2
 80095f2:	095b      	lsrs	r3, r3, #5
 80095f4:	011c      	lsls	r4, r3, #4
 80095f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095fa:	2200      	movs	r2, #0
 80095fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009600:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009604:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009608:	4642      	mov	r2, r8
 800960a:	464b      	mov	r3, r9
 800960c:	1891      	adds	r1, r2, r2
 800960e:	61b9      	str	r1, [r7, #24]
 8009610:	415b      	adcs	r3, r3
 8009612:	61fb      	str	r3, [r7, #28]
 8009614:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009618:	4641      	mov	r1, r8
 800961a:	1851      	adds	r1, r2, r1
 800961c:	6139      	str	r1, [r7, #16]
 800961e:	4649      	mov	r1, r9
 8009620:	414b      	adcs	r3, r1
 8009622:	617b      	str	r3, [r7, #20]
 8009624:	f04f 0200 	mov.w	r2, #0
 8009628:	f04f 0300 	mov.w	r3, #0
 800962c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009630:	4659      	mov	r1, fp
 8009632:	00cb      	lsls	r3, r1, #3
 8009634:	4651      	mov	r1, sl
 8009636:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800963a:	4651      	mov	r1, sl
 800963c:	00ca      	lsls	r2, r1, #3
 800963e:	4610      	mov	r0, r2
 8009640:	4619      	mov	r1, r3
 8009642:	4603      	mov	r3, r0
 8009644:	4642      	mov	r2, r8
 8009646:	189b      	adds	r3, r3, r2
 8009648:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800964c:	464b      	mov	r3, r9
 800964e:	460a      	mov	r2, r1
 8009650:	eb42 0303 	adc.w	r3, r2, r3
 8009654:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009662:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009664:	f04f 0200 	mov.w	r2, #0
 8009668:	f04f 0300 	mov.w	r3, #0
 800966c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009670:	4649      	mov	r1, r9
 8009672:	008b      	lsls	r3, r1, #2
 8009674:	4641      	mov	r1, r8
 8009676:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800967a:	4641      	mov	r1, r8
 800967c:	008a      	lsls	r2, r1, #2
 800967e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009682:	f7f7 fb01 	bl	8000c88 <__aeabi_uldivmod>
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	4611      	mov	r1, r2
 800968c:	4b38      	ldr	r3, [pc, #224]	@ (8009770 <UART_SetConfig+0x4e4>)
 800968e:	fba3 2301 	umull	r2, r3, r3, r1
 8009692:	095b      	lsrs	r3, r3, #5
 8009694:	2264      	movs	r2, #100	@ 0x64
 8009696:	fb02 f303 	mul.w	r3, r2, r3
 800969a:	1acb      	subs	r3, r1, r3
 800969c:	011b      	lsls	r3, r3, #4
 800969e:	3332      	adds	r3, #50	@ 0x32
 80096a0:	4a33      	ldr	r2, [pc, #204]	@ (8009770 <UART_SetConfig+0x4e4>)
 80096a2:	fba2 2303 	umull	r2, r3, r2, r3
 80096a6:	095b      	lsrs	r3, r3, #5
 80096a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80096ac:	441c      	add	r4, r3
 80096ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096b2:	2200      	movs	r2, #0
 80096b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80096b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80096b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80096bc:	4642      	mov	r2, r8
 80096be:	464b      	mov	r3, r9
 80096c0:	1891      	adds	r1, r2, r2
 80096c2:	60b9      	str	r1, [r7, #8]
 80096c4:	415b      	adcs	r3, r3
 80096c6:	60fb      	str	r3, [r7, #12]
 80096c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80096cc:	4641      	mov	r1, r8
 80096ce:	1851      	adds	r1, r2, r1
 80096d0:	6039      	str	r1, [r7, #0]
 80096d2:	4649      	mov	r1, r9
 80096d4:	414b      	adcs	r3, r1
 80096d6:	607b      	str	r3, [r7, #4]
 80096d8:	f04f 0200 	mov.w	r2, #0
 80096dc:	f04f 0300 	mov.w	r3, #0
 80096e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80096e4:	4659      	mov	r1, fp
 80096e6:	00cb      	lsls	r3, r1, #3
 80096e8:	4651      	mov	r1, sl
 80096ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096ee:	4651      	mov	r1, sl
 80096f0:	00ca      	lsls	r2, r1, #3
 80096f2:	4610      	mov	r0, r2
 80096f4:	4619      	mov	r1, r3
 80096f6:	4603      	mov	r3, r0
 80096f8:	4642      	mov	r2, r8
 80096fa:	189b      	adds	r3, r3, r2
 80096fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80096fe:	464b      	mov	r3, r9
 8009700:	460a      	mov	r2, r1
 8009702:	eb42 0303 	adc.w	r3, r2, r3
 8009706:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	663b      	str	r3, [r7, #96]	@ 0x60
 8009712:	667a      	str	r2, [r7, #100]	@ 0x64
 8009714:	f04f 0200 	mov.w	r2, #0
 8009718:	f04f 0300 	mov.w	r3, #0
 800971c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009720:	4649      	mov	r1, r9
 8009722:	008b      	lsls	r3, r1, #2
 8009724:	4641      	mov	r1, r8
 8009726:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800972a:	4641      	mov	r1, r8
 800972c:	008a      	lsls	r2, r1, #2
 800972e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009732:	f7f7 faa9 	bl	8000c88 <__aeabi_uldivmod>
 8009736:	4602      	mov	r2, r0
 8009738:	460b      	mov	r3, r1
 800973a:	4b0d      	ldr	r3, [pc, #52]	@ (8009770 <UART_SetConfig+0x4e4>)
 800973c:	fba3 1302 	umull	r1, r3, r3, r2
 8009740:	095b      	lsrs	r3, r3, #5
 8009742:	2164      	movs	r1, #100	@ 0x64
 8009744:	fb01 f303 	mul.w	r3, r1, r3
 8009748:	1ad3      	subs	r3, r2, r3
 800974a:	011b      	lsls	r3, r3, #4
 800974c:	3332      	adds	r3, #50	@ 0x32
 800974e:	4a08      	ldr	r2, [pc, #32]	@ (8009770 <UART_SetConfig+0x4e4>)
 8009750:	fba2 2303 	umull	r2, r3, r2, r3
 8009754:	095b      	lsrs	r3, r3, #5
 8009756:	f003 020f 	and.w	r2, r3, #15
 800975a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4422      	add	r2, r4
 8009762:	609a      	str	r2, [r3, #8]
}
 8009764:	bf00      	nop
 8009766:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800976a:	46bd      	mov	sp, r7
 800976c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009770:	51eb851f 	.word	0x51eb851f

08009774 <_ICM20948_SelectUserBank>:

#include "ICM20948.h"

static float accel_offset[3] = {0,0,0};

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 8009774:	b580      	push	{r7, lr}
 8009776:	b08a      	sub	sp, #40	@ 0x28
 8009778:	af04      	add	r7, sp, #16
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	460b      	mov	r3, r1
 800977e:	607a      	str	r2, [r7, #4]
 8009780:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	b2db      	uxtb	r3, r3
 800978a:	011b      	lsls	r3, r3, #4
 800978c:	b2db      	uxtb	r3, r3
 800978e:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8009790:	7afb      	ldrb	r3, [r7, #11]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <_ICM20948_SelectUserBank+0x26>
 8009796:	2368      	movs	r3, #104	@ 0x68
 8009798:	e000      	b.n	800979c <_ICM20948_SelectUserBank+0x28>
 800979a:	2369      	movs	r3, #105	@ 0x69
 800979c:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800979e:	7dbb      	ldrb	r3, [r7, #22]
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	005b      	lsls	r3, r3, #1
 80097a4:	b299      	uxth	r1, r3
 80097a6:	230a      	movs	r3, #10
 80097a8:	9302      	str	r3, [sp, #8]
 80097aa:	2301      	movs	r3, #1
 80097ac:	9301      	str	r3, [sp, #4]
 80097ae:	f107 0315 	add.w	r3, r7, #21
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	2301      	movs	r3, #1
 80097b6:	227f      	movs	r2, #127	@ 0x7f
 80097b8:	68f8      	ldr	r0, [r7, #12]
 80097ba:	f7fb feeb 	bl	8005594 <HAL_I2C_Mem_Write>
 80097be:	4603      	mov	r3, r0
 80097c0:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80097c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3718      	adds	r7, #24
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b088      	sub	sp, #32
 80097d0:	af04      	add	r7, sp, #16
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	4608      	mov	r0, r1
 80097d6:	4611      	mov	r1, r2
 80097d8:	461a      	mov	r2, r3
 80097da:	4603      	mov	r3, r0
 80097dc:	70fb      	strb	r3, [r7, #3]
 80097de:	460b      	mov	r3, r1
 80097e0:	70bb      	strb	r3, [r7, #2]
 80097e2:	4613      	mov	r3, r2
 80097e4:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 80097ea:	78fb      	ldrb	r3, [r7, #3]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d101      	bne.n	80097f4 <_ICM20948_WriteByte+0x28>
 80097f0:	2368      	movs	r3, #104	@ 0x68
 80097f2:	e000      	b.n	80097f6 <_ICM20948_WriteByte+0x2a>
 80097f4:	2369      	movs	r3, #105	@ 0x69
 80097f6:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 80097f8:	7bbb      	ldrb	r3, [r7, #14]
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	005b      	lsls	r3, r3, #1
 80097fe:	b299      	uxth	r1, r3
 8009800:	78bb      	ldrb	r3, [r7, #2]
 8009802:	b29a      	uxth	r2, r3
 8009804:	230a      	movs	r3, #10
 8009806:	9302      	str	r3, [sp, #8]
 8009808:	2301      	movs	r3, #1
 800980a:	9301      	str	r3, [sp, #4]
 800980c:	1c7b      	adds	r3, r7, #1
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	2301      	movs	r3, #1
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7fb febe 	bl	8005594 <HAL_I2C_Mem_Write>
 8009818:	4603      	mov	r3, r0
 800981a:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800981c:	7bfb      	ldrb	r3, [r7, #15]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3710      	adds	r7, #16
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <_ICM20948_BrustRead>:
			10);

	return status;
}

HAL_StatusTypeDef _ICM20948_BrustRead(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const startAddress, uint16_t const amountOfRegistersToRead, uint8_t * readData) {
 8009826:	b580      	push	{r7, lr}
 8009828:	b088      	sub	sp, #32
 800982a:	af04      	add	r7, sp, #16
 800982c:	6078      	str	r0, [r7, #4]
 800982e:	4608      	mov	r0, r1
 8009830:	4611      	mov	r1, r2
 8009832:	461a      	mov	r2, r3
 8009834:	4603      	mov	r3, r0
 8009836:	70fb      	strb	r3, [r7, #3]
 8009838:	460b      	mov	r3, r1
 800983a:	70bb      	strb	r3, [r7, #2]
 800983c:	4613      	mov	r3, r2
 800983e:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8009840:	2300      	movs	r3, #0
 8009842:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8009844:	78fb      	ldrb	r3, [r7, #3]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d101      	bne.n	800984e <_ICM20948_BrustRead+0x28>
 800984a:	2368      	movs	r3, #104	@ 0x68
 800984c:	e000      	b.n	8009850 <_ICM20948_BrustRead+0x2a>
 800984e:	2369      	movs	r3, #105	@ 0x69
 8009850:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(
 8009852:	7bbb      	ldrb	r3, [r7, #14]
 8009854:	b29b      	uxth	r3, r3
 8009856:	005b      	lsls	r3, r3, #1
 8009858:	b299      	uxth	r1, r3
 800985a:	78bb      	ldrb	r3, [r7, #2]
 800985c:	b29a      	uxth	r2, r3
 800985e:	230a      	movs	r3, #10
 8009860:	9302      	str	r3, [sp, #8]
 8009862:	883b      	ldrh	r3, [r7, #0]
 8009864:	9301      	str	r3, [sp, #4]
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	9300      	str	r3, [sp, #0]
 800986a:	2301      	movs	r3, #1
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f7fb ff8b 	bl	8005788 <HAL_I2C_Mem_Read>
 8009872:	4603      	mov	r3, r0
 8009874:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			amountOfRegistersToRead * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8009876:	7bfb      	ldrb	r3, [r7, #15]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <_ICM20948_BurstWrite>:

HAL_StatusTypeDef _ICM20948_BurstWrite(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const startAddress, uint16_t const amountOfRegistersToWrite, uint8_t * writeData) {
 8009880:	b580      	push	{r7, lr}
 8009882:	b088      	sub	sp, #32
 8009884:	af04      	add	r7, sp, #16
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	4608      	mov	r0, r1
 800988a:	4611      	mov	r1, r2
 800988c:	461a      	mov	r2, r3
 800988e:	4603      	mov	r3, r0
 8009890:	70fb      	strb	r3, [r7, #3]
 8009892:	460b      	mov	r3, r1
 8009894:	70bb      	strb	r3, [r7, #2]
 8009896:	4613      	mov	r3, r2
 8009898:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 800989e:	78fb      	ldrb	r3, [r7, #3]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d101      	bne.n	80098a8 <_ICM20948_BurstWrite+0x28>
 80098a4:	2368      	movs	r3, #104	@ 0x68
 80098a6:	e000      	b.n	80098aa <_ICM20948_BurstWrite+0x2a>
 80098a8:	2369      	movs	r3, #105	@ 0x69
 80098aa:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 80098ac:	7bbb      	ldrb	r3, [r7, #14]
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	005b      	lsls	r3, r3, #1
 80098b2:	b299      	uxth	r1, r3
 80098b4:	78bb      	ldrb	r3, [r7, #2]
 80098b6:	b29a      	uxth	r2, r3
 80098b8:	230a      	movs	r3, #10
 80098ba:	9302      	str	r3, [sp, #8]
 80098bc:	883b      	ldrh	r3, [r7, #0]
 80098be:	9301      	str	r3, [sp, #4]
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	2301      	movs	r3, #1
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7fb fe64 	bl	8005594 <HAL_I2C_Mem_Write>
 80098cc:	4603      	mov	r3, r0
 80098ce:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			writeData,
			amountOfRegistersToWrite * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80098d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <_AK09916_WriteByte>:

HAL_StatusTypeDef _AK09916_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const registerAddress, uint8_t writeData) {
 80098da:	b580      	push	{r7, lr}
 80098dc:	b088      	sub	sp, #32
 80098de:	af04      	add	r7, sp, #16
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	460b      	mov	r3, r1
 80098e4:	70fb      	strb	r3, [r7, #3]
 80098e6:	4613      	mov	r3, r2
 80098e8:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 80098ee:	78fb      	ldrb	r3, [r7, #3]
 80098f0:	b29a      	uxth	r2, r3
 80098f2:	230a      	movs	r3, #10
 80098f4:	9302      	str	r3, [sp, #8]
 80098f6:	2301      	movs	r3, #1
 80098f8:	9301      	str	r3, [sp, #4]
 80098fa:	1cbb      	adds	r3, r7, #2
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	2301      	movs	r3, #1
 8009900:	2118      	movs	r1, #24
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f7fb fe46 	bl	8005594 <HAL_I2C_Mem_Write>
 8009908:	4603      	mov	r3, r0
 800990a:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800990c:	7bfb      	ldrb	r3, [r7, #15]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <ICM20948_init>:
	}
	
	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity) {
 8009916:	b580      	push	{r7, lr}
 8009918:	b084      	sub	sp, #16
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	4608      	mov	r0, r1
 8009920:	4611      	mov	r1, r2
 8009922:	461a      	mov	r2, r3
 8009924:	4603      	mov	r3, r0
 8009926:	70fb      	strb	r3, [r7, #3]
 8009928:	460b      	mov	r3, r1
 800992a:	70bb      	strb	r3, [r7, #2]
 800992c:	4613      	mov	r3, r2
 800992e:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8009934:	78fb      	ldrb	r3, [r7, #3]
 8009936:	2200      	movs	r2, #0
 8009938:	4619      	mov	r1, r3
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f7ff ff1a 	bl	8009774 <_ICM20948_SelectUserBank>
 8009940:	4603      	mov	r3, r0
 8009942:	73fb      	strb	r3, [r7, #15]

	do{
	status = _ICM20948_WriteByte(
 8009944:	78f9      	ldrb	r1, [r7, #3]
 8009946:	2380      	movs	r3, #128	@ 0x80
 8009948:	2206      	movs	r2, #6
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f7ff ff3e 	bl	80097cc <_ICM20948_WriteByte>
 8009950:	4603      	mov	r3, r0
 8009952:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);
	}
	while(status!=HAL_OK);
 8009954:	7bfb      	ldrb	r3, [r7, #15]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1f4      	bne.n	8009944 <ICM20948_init+0x2e>


	HAL_Delay(200);
 800995a:	20c8      	movs	r0, #200	@ 0xc8
 800995c:	f7fa fd26 	bl	80043ac <HAL_Delay>

	status = _ICM20948_WriteByte(
 8009960:	78f9      	ldrb	r1, [r7, #3]
 8009962:	2301      	movs	r3, #1
 8009964:	2206      	movs	r2, #6
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f7ff ff30 	bl	80097cc <_ICM20948_WriteByte>
 800996c:	4603      	mov	r3, r0
 800996e:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_AUTO_SELECT_CLOCK);

	//enable both gyroscope and accelerometer
	status = _ICM20948_WriteByte(
 8009970:	78f9      	ldrb	r1, [r7, #3]
 8009972:	2300      	movs	r3, #0
 8009974:	2207      	movs	r2, #7
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f7ff ff28 	bl	80097cc <_ICM20948_WriteByte>
 800997c:	4603      	mov	r3, r0
 800997e:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); // For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 8009980:	78fb      	ldrb	r3, [r7, #3]
 8009982:	2202      	movs	r2, #2
 8009984:	4619      	mov	r1, r3
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7ff fef4 	bl	8009774 <_ICM20948_SelectUserBank>
 800998c:	4603      	mov	r3, r0
 800998e:	73fb      	strb	r3, [r7, #15]
	//gyroscope sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			0 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << GYRO_FS_SEL_BIT|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 8009990:	78bb      	ldrb	r3, [r7, #2]
 8009992:	005b      	lsls	r3, r3, #1
 8009994:	b25b      	sxtb	r3, r3
 8009996:	f043 0301 	orr.w	r3, r3, #1
 800999a:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800999c:	b2db      	uxtb	r3, r3
 800999e:	78f9      	ldrb	r1, [r7, #3]
 80099a0:	2201      	movs	r2, #1
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f7ff ff12 	bl	80097cc <_ICM20948_WriteByte>
 80099a8:	4603      	mov	r3, r0
 80099aa:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 80099ac:	78f9      	ldrb	r1, [r7, #3]
 80099ae:	2304      	movs	r3, #4
 80099b0:	2200      	movs	r2, #0
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f7ff ff0a 	bl	80097cc <_ICM20948_WriteByte>
 80099b8:	4603      	mov	r3, r0
 80099ba:	73fb      	strb	r3, [r7, #15]
	//accelerometer sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
			1 << ACCEL_DLPFCFG_BIT|selectAccelSensitivity << ACCEL_FS_SEL_BIT|0x01 << ACCEL_FCHOICE_BIT);
 80099bc:	787b      	ldrb	r3, [r7, #1]
 80099be:	005b      	lsls	r3, r3, #1
 80099c0:	b25b      	sxtb	r3, r3
 80099c2:	f043 0309 	orr.w	r3, r3, #9
 80099c6:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	78f9      	ldrb	r1, [r7, #3]
 80099cc:	2214      	movs	r2, #20
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f7ff fefc 	bl	80097cc <_ICM20948_WriteByte>
 80099d4:	4603      	mov	r3, r0
 80099d6:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 80099d8:	78f9      	ldrb	r1, [r7, #3]
 80099da:	2304      	movs	r3, #4
 80099dc:	2211      	movs	r2, #17
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f7ff fef4 	bl	80097cc <_ICM20948_WriteByte>
 80099e4:	4603      	mov	r3, r0
 80099e6:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
			4);


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 80099e8:	78fb      	ldrb	r3, [r7, #3]
 80099ea:	2200      	movs	r2, #0
 80099ec:	4619      	mov	r1, r3
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f7ff fec0 	bl	8009774 <_ICM20948_SelectUserBank>
 80099f4:	4603      	mov	r3, r0
 80099f6:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 80099f8:	78f9      	ldrb	r1, [r7, #3]
 80099fa:	2302      	movs	r3, #2
 80099fc:	220f      	movs	r2, #15
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f7ff fee4 	bl	80097cc <_ICM20948_WriteByte>
 8009a04:	4603      	mov	r3, r0
 8009a06:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

	status = _AK09916_WriteByte(
 8009a08:	2208      	movs	r2, #8
 8009a0a:	2131      	movs	r1, #49	@ 0x31
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f7ff ff64 	bl	80098da <_AK09916_WriteByte>
 8009a12:	4603      	mov	r3, r0
 8009a14:	73fb      	strb	r3, [r7, #15]
			hi2c,
			AK09916__CNTL2__REGISTER,
			0x08);
}
 8009a16:	bf00      	nop
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
	...

08009a20 <ICM20948_readGyroscope_all>:
			break;
	}

}

void ICM20948_readGyroscope_all(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, float reading[3]) {
 8009a20:	b590      	push	{r4, r7, lr}
 8009a22:	b08f      	sub	sp, #60	@ 0x3c
 8009a24:	af02      	add	r7, sp, #8
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	607b      	str	r3, [r7, #4]
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	72fb      	strb	r3, [r7, #11]
 8009a2e:	4613      	mov	r3, r2
 8009a30:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[6];

	//_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__GYRO_XOUT_H__REGISTER, 6, readData);
 8009a32:	7af9      	ldrb	r1, [r7, #11]
 8009a34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	2306      	movs	r3, #6
 8009a3c:	2233      	movs	r2, #51	@ 0x33
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f7ff fef1 	bl	8009826 <_ICM20948_BrustRead>

	int16_t rD_int[3];
		rD_int[X] = readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE];
 8009a44:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009a48:	021b      	lsls	r3, r3, #8
 8009a4a:	b21a      	sxth	r2, r3
 8009a4c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009a50:	b21b      	sxth	r3, r3
 8009a52:	4313      	orrs	r3, r2
 8009a54:	b21b      	sxth	r3, r3
 8009a56:	843b      	strh	r3, [r7, #32]
		rD_int[Y] = readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE];
 8009a58:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009a5c:	021b      	lsls	r3, r3, #8
 8009a5e:	b21a      	sxth	r2, r3
 8009a60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a64:	b21b      	sxth	r3, r3
 8009a66:	4313      	orrs	r3, r2
 8009a68:	b21b      	sxth	r3, r3
 8009a6a:	847b      	strh	r3, [r7, #34]	@ 0x22
		rD_int[Z] = readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE];
 8009a6c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009a70:	021b      	lsls	r3, r3, #8
 8009a72:	b21a      	sxth	r2, r3
 8009a74:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8009a78:	b21b      	sxth	r3, r3
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	b21b      	sxth	r3, r3
 8009a7e:	84bb      	strh	r3, [r7, #36]	@ 0x24

		float rD[3];
		rD[X] = (float) rD_int[X];
 8009a80:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009a84:	ee07 3a90 	vmov	s15, r3
 8009a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a8c:	edc7 7a05 	vstr	s15, [r7, #20]
		rD[Y] = (float) rD_int[Y];
 8009a90:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8009a94:	ee07 3a90 	vmov	s15, r3
 8009a98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009a9c:	edc7 7a06 	vstr	s15, [r7, #24]
		rD[Z] = (float) rD_int[Z];
 8009aa0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8009aa4:	ee07 3a90 	vmov	s15, r3
 8009aa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009aac:	edc7 7a07 	vstr	s15, [r7, #28]

	//*gyroZ = (float) -reading;
	switch (selectGyroSensitivity) {
 8009ab0:	7abb      	ldrb	r3, [r7, #10]
 8009ab2:	2b03      	cmp	r3, #3
 8009ab4:	f200 80bc 	bhi.w	8009c30 <ICM20948_readGyroscope_all+0x210>
 8009ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ac0 <ICM20948_readGyroscope_all+0xa0>)
 8009aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009abe:	bf00      	nop
 8009ac0:	08009ad1 	.word	0x08009ad1
 8009ac4:	08009b0d 	.word	0x08009b0d
 8009ac8:	08009b49 	.word	0x08009b49
 8009acc:	08009bbd 	.word	0x08009bbd
		case GYRO_FULL_SCALE_250DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 8009ad0:	ed97 7a05 	vldr	s14, [r7, #20]
 8009ad4:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 8009c48 <ICM20948_readGyroscope_all+0x228>
 8009ad8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	edc3 7a00 	vstr	s15, [r3]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 8009ae2:	ed97 7a06 	vldr	s14, [r7, #24]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	3304      	adds	r3, #4
 8009aea:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8009c48 <ICM20948_readGyroscope_all+0x228>
 8009aee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009af2:	edc3 7a00 	vstr	s15, [r3]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 8009af6:	ed97 7a07 	vldr	s14, [r7, #28]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	3308      	adds	r3, #8
 8009afe:	eddf 6a52 	vldr	s13, [pc, #328]	@ 8009c48 <ICM20948_readGyroscope_all+0x228>
 8009b02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009b06:	edc3 7a00 	vstr	s15, [r3]
			break;
 8009b0a:	e091      	b.n	8009c30 <ICM20948_readGyroscope_all+0x210>
		case GYRO_FULL_SCALE_500DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 8009b0c:	ed97 7a05 	vldr	s14, [r7, #20]
 8009b10:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009c4c <ICM20948_readGyroscope_all+0x22c>
 8009b14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	edc3 7a00 	vstr	s15, [r3]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 8009b1e:	ed97 7a06 	vldr	s14, [r7, #24]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	3304      	adds	r3, #4
 8009b26:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8009c4c <ICM20948_readGyroscope_all+0x22c>
 8009b2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009b2e:	edc3 7a00 	vstr	s15, [r3]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 8009b32:	ed97 7a07 	vldr	s14, [r7, #28]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	3308      	adds	r3, #8
 8009b3a:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8009c4c <ICM20948_readGyroscope_all+0x22c>
 8009b3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009b42:	edc3 7a00 	vstr	s15, [r3]
			break;
 8009b46:	e073      	b.n	8009c30 <ICM20948_readGyroscope_all+0x210>
		case GYRO_FULL_SCALE_1000DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7f6 fcfc 	bl	8000548 <__aeabi_f2d>
 8009b50:	a339      	add	r3, pc, #228	@ (adr r3, 8009c38 <ICM20948_readGyroscope_all+0x218>)
 8009b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b56:	f7f6 fe79 	bl	800084c <__aeabi_ddiv>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	4610      	mov	r0, r2
 8009b60:	4619      	mov	r1, r3
 8009b62:	f7f7 f841 	bl	8000be8 <__aeabi_d2f>
 8009b66:	4602      	mov	r2, r0
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	601a      	str	r2, [r3, #0]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 8009b6c:	69bb      	ldr	r3, [r7, #24]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7f6 fcea 	bl	8000548 <__aeabi_f2d>
 8009b74:	a330      	add	r3, pc, #192	@ (adr r3, 8009c38 <ICM20948_readGyroscope_all+0x218>)
 8009b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7a:	f7f6 fe67 	bl	800084c <__aeabi_ddiv>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	460b      	mov	r3, r1
 8009b82:	4610      	mov	r0, r2
 8009b84:	4619      	mov	r1, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	1d1c      	adds	r4, r3, #4
 8009b8a:	f7f7 f82d 	bl	8000be8 <__aeabi_d2f>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	6023      	str	r3, [r4, #0]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7f6 fcd7 	bl	8000548 <__aeabi_f2d>
 8009b9a:	a327      	add	r3, pc, #156	@ (adr r3, 8009c38 <ICM20948_readGyroscope_all+0x218>)
 8009b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba0:	f7f6 fe54 	bl	800084c <__aeabi_ddiv>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	4610      	mov	r0, r2
 8009baa:	4619      	mov	r1, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f103 0408 	add.w	r4, r3, #8
 8009bb2:	f7f7 f819 	bl	8000be8 <__aeabi_d2f>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	6023      	str	r3, [r4, #0]
			break;
 8009bba:	e039      	b.n	8009c30 <ICM20948_readGyroscope_all+0x210>
		case GYRO_FULL_SCALE_2000DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7f6 fcc2 	bl	8000548 <__aeabi_f2d>
 8009bc4:	a31e      	add	r3, pc, #120	@ (adr r3, 8009c40 <ICM20948_readGyroscope_all+0x220>)
 8009bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bca:	f7f6 fe3f 	bl	800084c <__aeabi_ddiv>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	4610      	mov	r0, r2
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	f7f7 f807 	bl	8000be8 <__aeabi_d2f>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	601a      	str	r2, [r3, #0]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 8009be0:	69bb      	ldr	r3, [r7, #24]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7f6 fcb0 	bl	8000548 <__aeabi_f2d>
 8009be8:	a315      	add	r3, pc, #84	@ (adr r3, 8009c40 <ICM20948_readGyroscope_all+0x220>)
 8009bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bee:	f7f6 fe2d 	bl	800084c <__aeabi_ddiv>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	460b      	mov	r3, r1
 8009bf6:	4610      	mov	r0, r2
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	1d1c      	adds	r4, r3, #4
 8009bfe:	f7f6 fff3 	bl	8000be8 <__aeabi_d2f>
 8009c02:	4603      	mov	r3, r0
 8009c04:	6023      	str	r3, [r4, #0]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7f6 fc9d 	bl	8000548 <__aeabi_f2d>
 8009c0e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009c40 <ICM20948_readGyroscope_all+0x220>)
 8009c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c14:	f7f6 fe1a 	bl	800084c <__aeabi_ddiv>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	4619      	mov	r1, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f103 0408 	add.w	r4, r3, #8
 8009c26:	f7f6 ffdf 	bl	8000be8 <__aeabi_d2f>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	6023      	str	r3, [r4, #0]
			break;
 8009c2e:	bf00      	nop
	}

}
 8009c30:	bf00      	nop
 8009c32:	3734      	adds	r7, #52	@ 0x34
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd90      	pop	{r4, r7, pc}
 8009c38:	66666666 	.word	0x66666666
 8009c3c:	40406666 	.word	0x40406666
 8009c40:	66666666 	.word	0x66666666
 8009c44:	40306666 	.word	0x40306666
 8009c48:	43030000 	.word	0x43030000
 8009c4c:	42830000 	.word	0x42830000

08009c50 <ICM20948_readAccelerometer_all>:

void ICM20948_readAccelerometer_all(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectAccelSensitivity, float readings[3]) {
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b08e      	sub	sp, #56	@ 0x38
 8009c54:	af02      	add	r7, sp, #8
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	607b      	str	r3, [r7, #4]
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	72fb      	strb	r3, [r7, #11]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[6];

//	_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__ACCEL_XOUT_H__REGISTER, 6, readData);
 8009c62:	7af9      	ldrb	r1, [r7, #11]
 8009c64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	2306      	movs	r3, #6
 8009c6c:	222d      	movs	r2, #45	@ 0x2d
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f7ff fdd9 	bl	8009826 <_ICM20948_BrustRead>


	int16_t rD_int[3];
	rD_int[X] = readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE];
 8009c74:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009c78:	021b      	lsls	r3, r3, #8
 8009c7a:	b21a      	sxth	r2, r3
 8009c7c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009c80:	b21b      	sxth	r3, r3
 8009c82:	4313      	orrs	r3, r2
 8009c84:	b21b      	sxth	r3, r3
 8009c86:	843b      	strh	r3, [r7, #32]
	rD_int[Y] = readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE];
 8009c88:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009c8c:	021b      	lsls	r3, r3, #8
 8009c8e:	b21a      	sxth	r2, r3
 8009c90:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c94:	b21b      	sxth	r3, r3
 8009c96:	4313      	orrs	r3, r2
 8009c98:	b21b      	sxth	r3, r3
 8009c9a:	847b      	strh	r3, [r7, #34]	@ 0x22
	rD_int[Z] = readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE];
 8009c9c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009ca0:	021b      	lsls	r3, r3, #8
 8009ca2:	b21a      	sxth	r2, r3
 8009ca4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8009ca8:	b21b      	sxth	r3, r3
 8009caa:	4313      	orrs	r3, r2
 8009cac:	b21b      	sxth	r3, r3
 8009cae:	84bb      	strh	r3, [r7, #36]	@ 0x24

	float rD[3];
	rD[X] = (float) rD_int[X];
 8009cb0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009cb4:	ee07 3a90 	vmov	s15, r3
 8009cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cbc:	edc7 7a05 	vstr	s15, [r7, #20]
	rD[Y] = (float) rD_int[Y];
 8009cc0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8009cc4:	ee07 3a90 	vmov	s15, r3
 8009cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ccc:	edc7 7a06 	vstr	s15, [r7, #24]
	rD[Z] = (float) rD_int[Z];
 8009cd0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8009cd4:	ee07 3a90 	vmov	s15, r3
 8009cd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009cdc:	edc7 7a07 	vstr	s15, [r7, #28]

	switch (selectAccelSensitivity) {
 8009ce0:	7abb      	ldrb	r3, [r7, #10]
 8009ce2:	2b03      	cmp	r3, #3
 8009ce4:	f200 8084 	bhi.w	8009df0 <ICM20948_readAccelerometer_all+0x1a0>
 8009ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8009cf0 <ICM20948_readAccelerometer_all+0xa0>)
 8009cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cee:	bf00      	nop
 8009cf0:	08009d01 	.word	0x08009d01
 8009cf4:	08009d3d 	.word	0x08009d3d
 8009cf8:	08009d79 	.word	0x08009d79
 8009cfc:	08009db5 	.word	0x08009db5
		case ACCEL_FULL_SCALE_2G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 8009d00:	ed97 7a05 	vldr	s14, [r7, #20]
 8009d04:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009e44 <ICM20948_readAccelerometer_all+0x1f4>
 8009d08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 8009d12:	ed97 7a06 	vldr	s14, [r7, #24]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	3304      	adds	r3, #4
 8009d1a:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8009e44 <ICM20948_readAccelerometer_all+0x1f4>
 8009d1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d22:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 8009d26:	ed97 7a07 	vldr	s14, [r7, #28]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	3308      	adds	r3, #8
 8009d2e:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8009e44 <ICM20948_readAccelerometer_all+0x1f4>
 8009d32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d36:	edc3 7a00 	vstr	s15, [r3]
			break;
 8009d3a:	e059      	b.n	8009df0 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_4G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 8009d3c:	ed97 7a05 	vldr	s14, [r7, #20]
 8009d40:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8009e48 <ICM20948_readAccelerometer_all+0x1f8>
 8009d44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 8009d4e:	ed97 7a06 	vldr	s14, [r7, #24]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	3304      	adds	r3, #4
 8009d56:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8009e48 <ICM20948_readAccelerometer_all+0x1f8>
 8009d5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d5e:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 8009d62:	ed97 7a07 	vldr	s14, [r7, #28]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	3308      	adds	r3, #8
 8009d6a:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8009e48 <ICM20948_readAccelerometer_all+0x1f8>
 8009d6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d72:	edc3 7a00 	vstr	s15, [r3]
			break;
 8009d76:	e03b      	b.n	8009df0 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_8G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 8009d78:	ed97 7a05 	vldr	s14, [r7, #20]
 8009d7c:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8009e4c <ICM20948_readAccelerometer_all+0x1fc>
 8009d80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 8009d8a:	ed97 7a06 	vldr	s14, [r7, #24]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	3304      	adds	r3, #4
 8009d92:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8009e4c <ICM20948_readAccelerometer_all+0x1fc>
 8009d96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d9a:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 8009d9e:	ed97 7a07 	vldr	s14, [r7, #28]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	3308      	adds	r3, #8
 8009da6:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8009e4c <ICM20948_readAccelerometer_all+0x1fc>
 8009daa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009dae:	edc3 7a00 	vstr	s15, [r3]
			break;
 8009db2:	e01d      	b.n	8009df0 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_16G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 8009db4:	ed97 7a05 	vldr	s14, [r7, #20]
 8009db8:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8009e50 <ICM20948_readAccelerometer_all+0x200>
 8009dbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 8009dc6:	ed97 7a06 	vldr	s14, [r7, #24]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	3304      	adds	r3, #4
 8009dce:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8009e50 <ICM20948_readAccelerometer_all+0x200>
 8009dd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009dd6:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 8009dda:	ed97 7a07 	vldr	s14, [r7, #28]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	3308      	adds	r3, #8
 8009de2:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8009e50 <ICM20948_readAccelerometer_all+0x200>
 8009de6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009dea:	edc3 7a00 	vstr	s15, [r3]
			break;
 8009dee:	bf00      	nop
	}
	readings[X] -=accel_offset[X];
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	ed93 7a00 	vldr	s14, [r3]
 8009df6:	4b17      	ldr	r3, [pc, #92]	@ (8009e54 <ICM20948_readAccelerometer_all+0x204>)
 8009df8:	edd3 7a00 	vldr	s15, [r3]
 8009dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	edc3 7a00 	vstr	s15, [r3]
	readings[Y] -=accel_offset[Y];
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	3304      	adds	r3, #4
 8009e0a:	ed93 7a00 	vldr	s14, [r3]
 8009e0e:	4b11      	ldr	r3, [pc, #68]	@ (8009e54 <ICM20948_readAccelerometer_all+0x204>)
 8009e10:	edd3 7a01 	vldr	s15, [r3, #4]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	3304      	adds	r3, #4
 8009e18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e1c:	edc3 7a00 	vstr	s15, [r3]
	readings[Z] -=accel_offset[Z];
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	3308      	adds	r3, #8
 8009e24:	ed93 7a00 	vldr	s14, [r3]
 8009e28:	4b0a      	ldr	r3, [pc, #40]	@ (8009e54 <ICM20948_readAccelerometer_all+0x204>)
 8009e2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	3308      	adds	r3, #8
 8009e32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e36:	edc3 7a00 	vstr	s15, [r3]
}
 8009e3a:	bf00      	nop
 8009e3c:	3730      	adds	r7, #48	@ 0x30
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	46800000 	.word	0x46800000
 8009e48:	46000000 	.word	0x46000000
 8009e4c:	45800000 	.word	0x45800000
 8009e50:	45000000 	.word	0x45000000
 8009e54:	200005f8 	.word	0x200005f8

08009e58 <ICM20948_CalibrateGyro>:
			mag[i] = reading * MAG_SENSITIVITY_SCALE_FACTOR;
		}
	}

void ICM20948_CalibrateGyro(I2C_HandleTypeDef * hi2c,const uint8_t sensitivity,int samples)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b090      	sub	sp, #64	@ 0x40
 8009e5c:	af02      	add	r7, sp, #8
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	460b      	mov	r3, r1
 8009e62:	607a      	str	r2, [r7, #4]
 8009e64:	72fb      	strb	r3, [r7, #11]
	//float temp[3]={};
	int32_t gyro_bias[3] = {0};
 8009e66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	601a      	str	r2, [r3, #0]
 8009e6e:	605a      	str	r2, [r3, #4]
 8009e70:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 8009e72:	2300      	movs	r3, #0
 8009e74:	623b      	str	r3, [r7, #32]
 8009e76:	2300      	movs	r3, #0
 8009e78:	84bb      	strh	r3, [r7, #36]	@ 0x24

		for(int i = 0; i < samples; i++)
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e7e:	e032      	b.n	8009ee6 <ICM20948_CalibrateGyro+0x8e>
		{
			uint8_t readData[6];
			//_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
			_ICM20948_BrustRead(hi2c, 0, ICM20948__USER_BANK_0__GYRO_XOUT_H__REGISTER, 6, readData);
 8009e80:	f107 0318 	add.w	r3, r7, #24
 8009e84:	9300      	str	r3, [sp, #0]
 8009e86:	2306      	movs	r3, #6
 8009e88:	2233      	movs	r2, #51	@ 0x33
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f7ff fcca 	bl	8009826 <_ICM20948_BrustRead>

			int16_t temp[3];
			temp[X] = readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE];
 8009e92:	7e3b      	ldrb	r3, [r7, #24]
 8009e94:	021b      	lsls	r3, r3, #8
 8009e96:	b21a      	sxth	r2, r3
 8009e98:	7e7b      	ldrb	r3, [r7, #25]
 8009e9a:	b21b      	sxth	r3, r3
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	b21b      	sxth	r3, r3
 8009ea0:	823b      	strh	r3, [r7, #16]
			temp[Y] = readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE];
 8009ea2:	7ebb      	ldrb	r3, [r7, #26]
 8009ea4:	021b      	lsls	r3, r3, #8
 8009ea6:	b21a      	sxth	r2, r3
 8009ea8:	7efb      	ldrb	r3, [r7, #27]
 8009eaa:	b21b      	sxth	r3, r3
 8009eac:	4313      	orrs	r3, r2
 8009eae:	b21b      	sxth	r3, r3
 8009eb0:	827b      	strh	r3, [r7, #18]
			temp[Z] = readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE];
 8009eb2:	7f3b      	ldrb	r3, [r7, #28]
 8009eb4:	021b      	lsls	r3, r3, #8
 8009eb6:	b21a      	sxth	r2, r3
 8009eb8:	7f7b      	ldrb	r3, [r7, #29]
 8009eba:	b21b      	sxth	r3, r3
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	b21b      	sxth	r3, r3
 8009ec0:	82bb      	strh	r3, [r7, #20]

			gyro_bias[0] += temp[0];
 8009ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009ec8:	4413      	add	r3, r2
 8009eca:	62bb      	str	r3, [r7, #40]	@ 0x28
			gyro_bias[1] += temp[1];
 8009ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ece:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			gyro_bias[2] += temp[2];
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8009edc:	4413      	add	r3, r2
 8009ede:	633b      	str	r3, [r7, #48]	@ 0x30
		for(int i = 0; i < samples; i++)
 8009ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ee6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	dbc8      	blt.n	8009e80 <ICM20948_CalibrateGyro+0x28>
		}

		gyro_bias[0] /= samples;
 8009eee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	fb92 f3f3 	sdiv	r3, r2, r3
 8009ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
		gyro_bias[1] /= samples;
 8009ef8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	fb92 f3f3 	sdiv	r3, r2, r3
 8009f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
		gyro_bias[2] /= samples;
 8009f02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	fb92 f3f3 	sdiv	r3, r2, r3
 8009f0a:	633b      	str	r3, [r7, #48]	@ 0x30

		// Construct the gyro biases for push to the hardware gyro bias registers,
		// which are reset to zero upon device startup.
		// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
		// Biases are additive, so change sign on calculated average gyro biases
		gyro_offset[0] = (-gyro_bias[0] * 2  >> 8) & 0xFF;
 8009f0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f0e:	4613      	mov	r3, r2
 8009f10:	07db      	lsls	r3, r3, #31
 8009f12:	1a9b      	subs	r3, r3, r2
 8009f14:	005b      	lsls	r3, r3, #1
 8009f16:	121b      	asrs	r3, r3, #8
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	f887 3020 	strb.w	r3, [r7, #32]
		gyro_offset[1] = (-gyro_bias[0] * 2)       & 0xFF;
 8009f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	461a      	mov	r2, r3
 8009f24:	01d2      	lsls	r2, r2, #7
 8009f26:	1ad3      	subs	r3, r2, r3
 8009f28:	005b      	lsls	r3, r3, #1
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		gyro_offset[2] = (-gyro_bias[1] * 2  >> 8) & 0xFF;
 8009f30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f32:	4613      	mov	r3, r2
 8009f34:	07db      	lsls	r3, r3, #31
 8009f36:	1a9b      	subs	r3, r3, r2
 8009f38:	005b      	lsls	r3, r3, #1
 8009f3a:	121b      	asrs	r3, r3, #8
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		gyro_offset[3] = (-gyro_bias[1] * 2)       & 0xFF;
 8009f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	461a      	mov	r2, r3
 8009f48:	01d2      	lsls	r2, r2, #7
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	005b      	lsls	r3, r3, #1
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		gyro_offset[4] = (-gyro_bias[2] * 2  >> 8) & 0xFF;
 8009f54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f56:	4613      	mov	r3, r2
 8009f58:	07db      	lsls	r3, r3, #31
 8009f5a:	1a9b      	subs	r3, r3, r2
 8009f5c:	005b      	lsls	r3, r3, #1
 8009f5e:	121b      	asrs	r3, r3, #8
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		gyro_offset[5] = (-gyro_bias[2] * 2)       & 0xFF;
 8009f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	01d2      	lsls	r2, r2, #7
 8009f6e:	1ad3      	subs	r3, r2, r3
 8009f70:	005b      	lsls	r3, r3, #1
 8009f72:	b2db      	uxtb	r3, r3
 8009f74:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		_ICM20948_SelectUserBank(hi2c,0, USER_BANK_2);
 8009f78:	2202      	movs	r2, #2
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f7ff fbf9 	bl	8009774 <_ICM20948_SelectUserBank>
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+2,gyro_offset[2]);
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+3,gyro_offset[3]);
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+4,gyro_offset[4]);
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+5,gyro_offset[5]);

		_ICM20948_BurstWrite(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER,6,gyro_offset);
 8009f82:	f107 0320 	add.w	r3, r7, #32
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	2306      	movs	r3, #6
 8009f8a:	2203      	movs	r2, #3
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f7ff fc76 	bl	8009880 <_ICM20948_BurstWrite>
		_ICM20948_SelectUserBank(hi2c,0, USER_BANK_0);
 8009f94:	2200      	movs	r2, #0
 8009f96:	2100      	movs	r1, #0
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f7ff fbeb 	bl	8009774 <_ICM20948_SelectUserBank>
	}
 8009f9e:	bf00      	nop
 8009fa0:	3738      	adds	r7, #56	@ 0x38
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
	...

08009fa8 <ICM20948_CalibrateAccel>:

void ICM20948_CalibrateAccel(I2C_HandleTypeDef * hi2c,const uint8_t sensitivity,int samples)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b08c      	sub	sp, #48	@ 0x30
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	72fb      	strb	r3, [r7, #11]
	float accel_bias[3] = {0};
 8009fb6:	f107 0320 	add.w	r3, r7, #32
 8009fba:	2200      	movs	r2, #0
 8009fbc:	601a      	str	r2, [r3, #0]
 8009fbe:	605a      	str	r2, [r3, #4]
 8009fc0:	609a      	str	r2, [r3, #8]

			for(int i = 0; i < samples; i++)
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009fc6:	e025      	b.n	800a014 <ICM20948_CalibrateAccel+0x6c>
			{

				//_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
				float temp[3];
				ICM20948_readAccelerometer_all(hi2c, 0, sensitivity, temp);
 8009fc8:	f107 0314 	add.w	r3, r7, #20
 8009fcc:	7afa      	ldrb	r2, [r7, #11]
 8009fce:	2100      	movs	r1, #0
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f7ff fe3d 	bl	8009c50 <ICM20948_readAccelerometer_all>


				accel_bias[0] += temp[0];
 8009fd6:	ed97 7a08 	vldr	s14, [r7, #32]
 8009fda:	edd7 7a05 	vldr	s15, [r7, #20]
 8009fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009fe2:	edc7 7a08 	vstr	s15, [r7, #32]
				accel_bias[1] += temp[1];
 8009fe6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8009fea:	edd7 7a06 	vldr	s15, [r7, #24]
 8009fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ff2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
				accel_bias[2] += (temp[2]-1.0f);//ignore the gravity
 8009ff6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8009ffa:	edd7 7a07 	vldr	s15, [r7, #28]
 8009ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a002:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a006:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a00a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			for(int i = 0; i < samples; i++)
 800a00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a010:	3301      	adds	r3, #1
 800a012:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a014:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	429a      	cmp	r2, r3
 800a01a:	dbd5      	blt.n	8009fc8 <ICM20948_CalibrateAccel+0x20>
			}

			accel_offset[0] =accel_bias[0]/ samples;
 800a01c:	edd7 6a08 	vldr	s13, [r7, #32]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	ee07 3a90 	vmov	s15, r3
 800a026:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a02a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a02e:	4b0f      	ldr	r3, [pc, #60]	@ (800a06c <ICM20948_CalibrateAccel+0xc4>)
 800a030:	edc3 7a00 	vstr	s15, [r3]
			accel_offset[1] =accel_bias[1]/ samples;
 800a034:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	ee07 3a90 	vmov	s15, r3
 800a03e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a042:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a046:	4b09      	ldr	r3, [pc, #36]	@ (800a06c <ICM20948_CalibrateAccel+0xc4>)
 800a048:	edc3 7a01 	vstr	s15, [r3, #4]
			accel_offset[2] =accel_bias[2]/ samples;
 800a04c:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	ee07 3a90 	vmov	s15, r3
 800a056:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a05a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a05e:	4b03      	ldr	r3, [pc, #12]	@ (800a06c <ICM20948_CalibrateAccel+0xc4>)
 800a060:	edc3 7a02 	vstr	s15, [r3, #8]
	}
 800a064:	bf00      	nop
 800a066:	3730      	adds	r7, #48	@ 0x30
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	200005f8 	.word	0x200005f8

0800a070 <__NVIC_SetPriority>:
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	4603      	mov	r3, r0
 800a078:	6039      	str	r1, [r7, #0]
 800a07a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a07c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a080:	2b00      	cmp	r3, #0
 800a082:	db0a      	blt.n	800a09a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	b2da      	uxtb	r2, r3
 800a088:	490c      	ldr	r1, [pc, #48]	@ (800a0bc <__NVIC_SetPriority+0x4c>)
 800a08a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a08e:	0112      	lsls	r2, r2, #4
 800a090:	b2d2      	uxtb	r2, r2
 800a092:	440b      	add	r3, r1
 800a094:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a098:	e00a      	b.n	800a0b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	b2da      	uxtb	r2, r3
 800a09e:	4908      	ldr	r1, [pc, #32]	@ (800a0c0 <__NVIC_SetPriority+0x50>)
 800a0a0:	79fb      	ldrb	r3, [r7, #7]
 800a0a2:	f003 030f 	and.w	r3, r3, #15
 800a0a6:	3b04      	subs	r3, #4
 800a0a8:	0112      	lsls	r2, r2, #4
 800a0aa:	b2d2      	uxtb	r2, r2
 800a0ac:	440b      	add	r3, r1
 800a0ae:	761a      	strb	r2, [r3, #24]
}
 800a0b0:	bf00      	nop
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr
 800a0bc:	e000e100 	.word	0xe000e100
 800a0c0:	e000ed00 	.word	0xe000ed00

0800a0c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	f06f 0004 	mvn.w	r0, #4
 800a0ce:	f7ff ffcf 	bl	800a070 <__NVIC_SetPriority>
#endif
}
 800a0d2:	bf00      	nop
 800a0d4:	bd80      	pop	{r7, pc}
	...

0800a0d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0de:	f3ef 8305 	mrs	r3, IPSR
 800a0e2:	603b      	str	r3, [r7, #0]
  return(result);
 800a0e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d003      	beq.n	800a0f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a0ea:	f06f 0305 	mvn.w	r3, #5
 800a0ee:	607b      	str	r3, [r7, #4]
 800a0f0:	e00c      	b.n	800a10c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a0f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a11c <osKernelInitialize+0x44>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d105      	bne.n	800a106 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a0fa:	4b08      	ldr	r3, [pc, #32]	@ (800a11c <osKernelInitialize+0x44>)
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a100:	2300      	movs	r3, #0
 800a102:	607b      	str	r3, [r7, #4]
 800a104:	e002      	b.n	800a10c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a106:	f04f 33ff 	mov.w	r3, #4294967295
 800a10a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a10c:	687b      	ldr	r3, [r7, #4]
}
 800a10e:	4618      	mov	r0, r3
 800a110:	370c      	adds	r7, #12
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	20000604 	.word	0x20000604

0800a120 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a126:	f3ef 8305 	mrs	r3, IPSR
 800a12a:	603b      	str	r3, [r7, #0]
  return(result);
 800a12c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d003      	beq.n	800a13a <osKernelStart+0x1a>
    stat = osErrorISR;
 800a132:	f06f 0305 	mvn.w	r3, #5
 800a136:	607b      	str	r3, [r7, #4]
 800a138:	e010      	b.n	800a15c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a13a:	4b0b      	ldr	r3, [pc, #44]	@ (800a168 <osKernelStart+0x48>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d109      	bne.n	800a156 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a142:	f7ff ffbf 	bl	800a0c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a146:	4b08      	ldr	r3, [pc, #32]	@ (800a168 <osKernelStart+0x48>)
 800a148:	2202      	movs	r2, #2
 800a14a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a14c:	f001 f87a 	bl	800b244 <vTaskStartScheduler>
      stat = osOK;
 800a150:	2300      	movs	r3, #0
 800a152:	607b      	str	r3, [r7, #4]
 800a154:	e002      	b.n	800a15c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a156:	f04f 33ff 	mov.w	r3, #4294967295
 800a15a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a15c:	687b      	ldr	r3, [r7, #4]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3708      	adds	r7, #8
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	20000604 	.word	0x20000604

0800a16c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b08e      	sub	sp, #56	@ 0x38
 800a170:	af04      	add	r7, sp, #16
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a178:	2300      	movs	r3, #0
 800a17a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a17c:	f3ef 8305 	mrs	r3, IPSR
 800a180:	617b      	str	r3, [r7, #20]
  return(result);
 800a182:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a184:	2b00      	cmp	r3, #0
 800a186:	d17e      	bne.n	800a286 <osThreadNew+0x11a>
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d07b      	beq.n	800a286 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a18e:	2380      	movs	r3, #128	@ 0x80
 800a190:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a192:	2318      	movs	r3, #24
 800a194:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a196:	2300      	movs	r3, #0
 800a198:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a19a:	f04f 33ff 	mov.w	r3, #4294967295
 800a19e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d045      	beq.n	800a232 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d002      	beq.n	800a1b4 <osThreadNew+0x48>
        name = attr->name;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	699b      	ldr	r3, [r3, #24]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d002      	beq.n	800a1c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d008      	beq.n	800a1da <osThreadNew+0x6e>
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	2b38      	cmp	r3, #56	@ 0x38
 800a1cc:	d805      	bhi.n	800a1da <osThreadNew+0x6e>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	f003 0301 	and.w	r3, r3, #1
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d001      	beq.n	800a1de <osThreadNew+0x72>
        return (NULL);
 800a1da:	2300      	movs	r3, #0
 800a1dc:	e054      	b.n	800a288 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d003      	beq.n	800a1ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	089b      	lsrs	r3, r3, #2
 800a1ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00e      	beq.n	800a214 <osThreadNew+0xa8>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	2b5b      	cmp	r3, #91	@ 0x5b
 800a1fc:	d90a      	bls.n	800a214 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a202:	2b00      	cmp	r3, #0
 800a204:	d006      	beq.n	800a214 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	695b      	ldr	r3, [r3, #20]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d002      	beq.n	800a214 <osThreadNew+0xa8>
        mem = 1;
 800a20e:	2301      	movs	r3, #1
 800a210:	61bb      	str	r3, [r7, #24]
 800a212:	e010      	b.n	800a236 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d10c      	bne.n	800a236 <osThreadNew+0xca>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	68db      	ldr	r3, [r3, #12]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d108      	bne.n	800a236 <osThreadNew+0xca>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	691b      	ldr	r3, [r3, #16]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d104      	bne.n	800a236 <osThreadNew+0xca>
          mem = 0;
 800a22c:	2300      	movs	r3, #0
 800a22e:	61bb      	str	r3, [r7, #24]
 800a230:	e001      	b.n	800a236 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a232:	2300      	movs	r3, #0
 800a234:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a236:	69bb      	ldr	r3, [r7, #24]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d110      	bne.n	800a25e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a240:	687a      	ldr	r2, [r7, #4]
 800a242:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a244:	9202      	str	r2, [sp, #8]
 800a246:	9301      	str	r3, [sp, #4]
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	6a3a      	ldr	r2, [r7, #32]
 800a250:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f000 fe1a 	bl	800ae8c <xTaskCreateStatic>
 800a258:	4603      	mov	r3, r0
 800a25a:	613b      	str	r3, [r7, #16]
 800a25c:	e013      	b.n	800a286 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d110      	bne.n	800a286 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a264:	6a3b      	ldr	r3, [r7, #32]
 800a266:	b29a      	uxth	r2, r3
 800a268:	f107 0310 	add.w	r3, r7, #16
 800a26c:	9301      	str	r3, [sp, #4]
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	9300      	str	r3, [sp, #0]
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f000 fe68 	bl	800af4c <xTaskCreate>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d001      	beq.n	800a286 <osThreadNew+0x11a>
            hTask = NULL;
 800a282:	2300      	movs	r3, #0
 800a284:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a286:	693b      	ldr	r3, [r7, #16]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3728      	adds	r7, #40	@ 0x28
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a298:	f3ef 8305 	mrs	r3, IPSR
 800a29c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a29e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d003      	beq.n	800a2ac <osDelay+0x1c>
    stat = osErrorISR;
 800a2a4:	f06f 0305 	mvn.w	r3, #5
 800a2a8:	60fb      	str	r3, [r7, #12]
 800a2aa:	e007      	b.n	800a2bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d002      	beq.n	800a2bc <osDelay+0x2c>
      vTaskDelay(ticks);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 ff8e 	bl	800b1d8 <vTaskDelay>
    }
  }

  return (stat);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3710      	adds	r7, #16
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
	...

0800a2c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	4a07      	ldr	r2, [pc, #28]	@ (800a2f4 <vApplicationGetIdleTaskMemory+0x2c>)
 800a2d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	4a06      	ldr	r2, [pc, #24]	@ (800a2f8 <vApplicationGetIdleTaskMemory+0x30>)
 800a2de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2280      	movs	r2, #128	@ 0x80
 800a2e4:	601a      	str	r2, [r3, #0]
}
 800a2e6:	bf00      	nop
 800a2e8:	3714      	adds	r7, #20
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	20000608 	.word	0x20000608
 800a2f8:	20000664 	.word	0x20000664

0800a2fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a2fc:	b480      	push	{r7}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	4a07      	ldr	r2, [pc, #28]	@ (800a328 <vApplicationGetTimerTaskMemory+0x2c>)
 800a30c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	4a06      	ldr	r2, [pc, #24]	@ (800a32c <vApplicationGetTimerTaskMemory+0x30>)
 800a312:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a31a:	601a      	str	r2, [r3, #0]
}
 800a31c:	bf00      	nop
 800a31e:	3714      	adds	r7, #20
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr
 800a328:	20000864 	.word	0x20000864
 800a32c:	200008c0 	.word	0x200008c0

0800a330 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f103 0208 	add.w	r2, r3, #8
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f04f 32ff 	mov.w	r2, #4294967295
 800a348:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f103 0208 	add.w	r2, r3, #8
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f103 0208 	add.w	r2, r3, #8
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a37e:	bf00      	nop
 800a380:	370c      	adds	r7, #12
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr

0800a38a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a38a:	b480      	push	{r7}
 800a38c:	b085      	sub	sp, #20
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
 800a392:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	689a      	ldr	r2, [r3, #8]
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	683a      	ldr	r2, [r7, #0]
 800a3ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	1c5a      	adds	r2, r3, #1
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	601a      	str	r2, [r3, #0]
}
 800a3c6:	bf00      	nop
 800a3c8:	3714      	adds	r7, #20
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	b085      	sub	sp, #20
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
 800a3da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e8:	d103      	bne.n	800a3f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	60fb      	str	r3, [r7, #12]
 800a3f0:	e00c      	b.n	800a40c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	3308      	adds	r3, #8
 800a3f6:	60fb      	str	r3, [r7, #12]
 800a3f8:	e002      	b.n	800a400 <vListInsert+0x2e>
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	60fb      	str	r3, [r7, #12]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d2f6      	bcs.n	800a3fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	685a      	ldr	r2, [r3, #4]
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	683a      	ldr	r2, [r7, #0]
 800a41a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	683a      	ldr	r2, [r7, #0]
 800a426:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	1c5a      	adds	r2, r3, #1
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	601a      	str	r2, [r3, #0]
}
 800a438:	bf00      	nop
 800a43a:	3714      	adds	r7, #20
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	687a      	ldr	r2, [r7, #4]
 800a458:	6892      	ldr	r2, [r2, #8]
 800a45a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	689b      	ldr	r3, [r3, #8]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	6852      	ldr	r2, [r2, #4]
 800a464:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	687a      	ldr	r2, [r7, #4]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d103      	bne.n	800a478 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	689a      	ldr	r2, [r3, #8]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	1e5a      	subs	r2, r3, #1
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3714      	adds	r7, #20
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d10b      	bne.n	800a4c4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a4ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b0:	f383 8811 	msr	BASEPRI, r3
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	f3bf 8f4f 	dsb	sy
 800a4bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a4be:	bf00      	nop
 800a4c0:	bf00      	nop
 800a4c2:	e7fd      	b.n	800a4c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a4c4:	f002 f878 	bl	800c5b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4d0:	68f9      	ldr	r1, [r7, #12]
 800a4d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a4d4:	fb01 f303 	mul.w	r3, r1, r3
 800a4d8:	441a      	add	r2, r3
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	68f9      	ldr	r1, [r7, #12]
 800a4f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a4fa:	fb01 f303 	mul.w	r3, r1, r3
 800a4fe:	441a      	add	r2, r3
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	22ff      	movs	r2, #255	@ 0xff
 800a508:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	22ff      	movs	r2, #255	@ 0xff
 800a510:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d114      	bne.n	800a544 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d01a      	beq.n	800a558 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	3310      	adds	r3, #16
 800a526:	4618      	mov	r0, r3
 800a528:	f001 f91a 	bl	800b760 <xTaskRemoveFromEventList>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d012      	beq.n	800a558 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a532:	4b0d      	ldr	r3, [pc, #52]	@ (800a568 <xQueueGenericReset+0xd0>)
 800a534:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a538:	601a      	str	r2, [r3, #0]
 800a53a:	f3bf 8f4f 	dsb	sy
 800a53e:	f3bf 8f6f 	isb	sy
 800a542:	e009      	b.n	800a558 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	3310      	adds	r3, #16
 800a548:	4618      	mov	r0, r3
 800a54a:	f7ff fef1 	bl	800a330 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	3324      	adds	r3, #36	@ 0x24
 800a552:	4618      	mov	r0, r3
 800a554:	f7ff feec 	bl	800a330 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a558:	f002 f860 	bl	800c61c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a55c:	2301      	movs	r3, #1
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	e000ed04 	.word	0xe000ed04

0800a56c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b08e      	sub	sp, #56	@ 0x38
 800a570:	af02      	add	r7, sp, #8
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	607a      	str	r2, [r7, #4]
 800a578:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10b      	bne.n	800a598 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a584:	f383 8811 	msr	BASEPRI, r3
 800a588:	f3bf 8f6f 	isb	sy
 800a58c:	f3bf 8f4f 	dsb	sy
 800a590:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a592:	bf00      	nop
 800a594:	bf00      	nop
 800a596:	e7fd      	b.n	800a594 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d10b      	bne.n	800a5b6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a2:	f383 8811 	msr	BASEPRI, r3
 800a5a6:	f3bf 8f6f 	isb	sy
 800a5aa:	f3bf 8f4f 	dsb	sy
 800a5ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a5b0:	bf00      	nop
 800a5b2:	bf00      	nop
 800a5b4:	e7fd      	b.n	800a5b2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d002      	beq.n	800a5c2 <xQueueGenericCreateStatic+0x56>
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d001      	beq.n	800a5c6 <xQueueGenericCreateStatic+0x5a>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e000      	b.n	800a5c8 <xQueueGenericCreateStatic+0x5c>
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d10b      	bne.n	800a5e4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a5cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d0:	f383 8811 	msr	BASEPRI, r3
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	623b      	str	r3, [r7, #32]
}
 800a5de:	bf00      	nop
 800a5e0:	bf00      	nop
 800a5e2:	e7fd      	b.n	800a5e0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d102      	bne.n	800a5f0 <xQueueGenericCreateStatic+0x84>
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <xQueueGenericCreateStatic+0x88>
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e000      	b.n	800a5f6 <xQueueGenericCreateStatic+0x8a>
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10b      	bne.n	800a612 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a5fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fe:	f383 8811 	msr	BASEPRI, r3
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	61fb      	str	r3, [r7, #28]
}
 800a60c:	bf00      	nop
 800a60e:	bf00      	nop
 800a610:	e7fd      	b.n	800a60e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a612:	2350      	movs	r3, #80	@ 0x50
 800a614:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	2b50      	cmp	r3, #80	@ 0x50
 800a61a:	d00b      	beq.n	800a634 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a620:	f383 8811 	msr	BASEPRI, r3
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	f3bf 8f4f 	dsb	sy
 800a62c:	61bb      	str	r3, [r7, #24]
}
 800a62e:	bf00      	nop
 800a630:	bf00      	nop
 800a632:	e7fd      	b.n	800a630 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a634:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a63a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d00d      	beq.n	800a65c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a642:	2201      	movs	r2, #1
 800a644:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a648:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a64e:	9300      	str	r3, [sp, #0]
 800a650:	4613      	mov	r3, r2
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	68b9      	ldr	r1, [r7, #8]
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f000 f805 	bl	800a666 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a65c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a65e:	4618      	mov	r0, r3
 800a660:	3730      	adds	r7, #48	@ 0x30
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b084      	sub	sp, #16
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	60f8      	str	r0, [r7, #12]
 800a66e:	60b9      	str	r1, [r7, #8]
 800a670:	607a      	str	r2, [r7, #4]
 800a672:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d103      	bne.n	800a682 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	69ba      	ldr	r2, [r7, #24]
 800a67e:	601a      	str	r2, [r3, #0]
 800a680:	e002      	b.n	800a688 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a682:	69bb      	ldr	r3, [r7, #24]
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a694:	2101      	movs	r1, #1
 800a696:	69b8      	ldr	r0, [r7, #24]
 800a698:	f7ff fefe 	bl	800a498 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	78fa      	ldrb	r2, [r7, #3]
 800a6a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a6a4:	bf00      	nop
 800a6a6:	3710      	adds	r7, #16
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b08e      	sub	sp, #56	@ 0x38
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	607a      	str	r2, [r7, #4]
 800a6b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d10b      	bne.n	800a6e0 <xQueueGenericSend+0x34>
	__asm volatile
 800a6c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6cc:	f383 8811 	msr	BASEPRI, r3
 800a6d0:	f3bf 8f6f 	isb	sy
 800a6d4:	f3bf 8f4f 	dsb	sy
 800a6d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a6da:	bf00      	nop
 800a6dc:	bf00      	nop
 800a6de:	e7fd      	b.n	800a6dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d103      	bne.n	800a6ee <xQueueGenericSend+0x42>
 800a6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d101      	bne.n	800a6f2 <xQueueGenericSend+0x46>
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	e000      	b.n	800a6f4 <xQueueGenericSend+0x48>
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d10b      	bne.n	800a710 <xQueueGenericSend+0x64>
	__asm volatile
 800a6f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6fc:	f383 8811 	msr	BASEPRI, r3
 800a700:	f3bf 8f6f 	isb	sy
 800a704:	f3bf 8f4f 	dsb	sy
 800a708:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a70a:	bf00      	nop
 800a70c:	bf00      	nop
 800a70e:	e7fd      	b.n	800a70c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	2b02      	cmp	r3, #2
 800a714:	d103      	bne.n	800a71e <xQueueGenericSend+0x72>
 800a716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d101      	bne.n	800a722 <xQueueGenericSend+0x76>
 800a71e:	2301      	movs	r3, #1
 800a720:	e000      	b.n	800a724 <xQueueGenericSend+0x78>
 800a722:	2300      	movs	r3, #0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10b      	bne.n	800a740 <xQueueGenericSend+0x94>
	__asm volatile
 800a728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	623b      	str	r3, [r7, #32]
}
 800a73a:	bf00      	nop
 800a73c:	bf00      	nop
 800a73e:	e7fd      	b.n	800a73c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a740:	f001 f9ce 	bl	800bae0 <xTaskGetSchedulerState>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d102      	bne.n	800a750 <xQueueGenericSend+0xa4>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d101      	bne.n	800a754 <xQueueGenericSend+0xa8>
 800a750:	2301      	movs	r3, #1
 800a752:	e000      	b.n	800a756 <xQueueGenericSend+0xaa>
 800a754:	2300      	movs	r3, #0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d10b      	bne.n	800a772 <xQueueGenericSend+0xc6>
	__asm volatile
 800a75a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75e:	f383 8811 	msr	BASEPRI, r3
 800a762:	f3bf 8f6f 	isb	sy
 800a766:	f3bf 8f4f 	dsb	sy
 800a76a:	61fb      	str	r3, [r7, #28]
}
 800a76c:	bf00      	nop
 800a76e:	bf00      	nop
 800a770:	e7fd      	b.n	800a76e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a772:	f001 ff21 	bl	800c5b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a778:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a77c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a77e:	429a      	cmp	r2, r3
 800a780:	d302      	bcc.n	800a788 <xQueueGenericSend+0xdc>
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	2b02      	cmp	r3, #2
 800a786:	d129      	bne.n	800a7dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a788:	683a      	ldr	r2, [r7, #0]
 800a78a:	68b9      	ldr	r1, [r7, #8]
 800a78c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a78e:	f000 fa0f 	bl	800abb0 <prvCopyDataToQueue>
 800a792:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d010      	beq.n	800a7be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a79c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79e:	3324      	adds	r3, #36	@ 0x24
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f000 ffdd 	bl	800b760 <xTaskRemoveFromEventList>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d013      	beq.n	800a7d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a7ac:	4b3f      	ldr	r3, [pc, #252]	@ (800a8ac <xQueueGenericSend+0x200>)
 800a7ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7b2:	601a      	str	r2, [r3, #0]
 800a7b4:	f3bf 8f4f 	dsb	sy
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	e00a      	b.n	800a7d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a7be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d007      	beq.n	800a7d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a7c4:	4b39      	ldr	r3, [pc, #228]	@ (800a8ac <xQueueGenericSend+0x200>)
 800a7c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7ca:	601a      	str	r2, [r3, #0]
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a7d4:	f001 ff22 	bl	800c61c <vPortExitCritical>
				return pdPASS;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e063      	b.n	800a8a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d103      	bne.n	800a7ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7e2:	f001 ff1b 	bl	800c61c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	e05c      	b.n	800a8a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d106      	bne.n	800a7fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7f0:	f107 0314 	add.w	r3, r7, #20
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f001 f817 	bl	800b828 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7fe:	f001 ff0d 	bl	800c61c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a802:	f000 fd87 	bl	800b314 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a806:	f001 fed7 	bl	800c5b8 <vPortEnterCritical>
 800a80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a80c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a810:	b25b      	sxtb	r3, r3
 800a812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a816:	d103      	bne.n	800a820 <xQueueGenericSend+0x174>
 800a818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a81a:	2200      	movs	r2, #0
 800a81c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a822:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a826:	b25b      	sxtb	r3, r3
 800a828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a82c:	d103      	bne.n	800a836 <xQueueGenericSend+0x18a>
 800a82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a830:	2200      	movs	r2, #0
 800a832:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a836:	f001 fef1 	bl	800c61c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a83a:	1d3a      	adds	r2, r7, #4
 800a83c:	f107 0314 	add.w	r3, r7, #20
 800a840:	4611      	mov	r1, r2
 800a842:	4618      	mov	r0, r3
 800a844:	f001 f806 	bl	800b854 <xTaskCheckForTimeOut>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d124      	bne.n	800a898 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a84e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a850:	f000 faa6 	bl	800ada0 <prvIsQueueFull>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d018      	beq.n	800a88c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a85c:	3310      	adds	r3, #16
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	4611      	mov	r1, r2
 800a862:	4618      	mov	r0, r3
 800a864:	f000 ff2a 	bl	800b6bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a868:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a86a:	f000 fa31 	bl	800acd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a86e:	f000 fd5f 	bl	800b330 <xTaskResumeAll>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	f47f af7c 	bne.w	800a772 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a87a:	4b0c      	ldr	r3, [pc, #48]	@ (800a8ac <xQueueGenericSend+0x200>)
 800a87c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a880:	601a      	str	r2, [r3, #0]
 800a882:	f3bf 8f4f 	dsb	sy
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	e772      	b.n	800a772 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a88c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a88e:	f000 fa1f 	bl	800acd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a892:	f000 fd4d 	bl	800b330 <xTaskResumeAll>
 800a896:	e76c      	b.n	800a772 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a898:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a89a:	f000 fa19 	bl	800acd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a89e:	f000 fd47 	bl	800b330 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a8a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3738      	adds	r7, #56	@ 0x38
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	e000ed04 	.word	0xe000ed04

0800a8b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b090      	sub	sp, #64	@ 0x40
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	607a      	str	r2, [r7, #4]
 800a8bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a8c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d10b      	bne.n	800a8e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a8c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8cc:	f383 8811 	msr	BASEPRI, r3
 800a8d0:	f3bf 8f6f 	isb	sy
 800a8d4:	f3bf 8f4f 	dsb	sy
 800a8d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a8da:	bf00      	nop
 800a8dc:	bf00      	nop
 800a8de:	e7fd      	b.n	800a8dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d103      	bne.n	800a8ee <xQueueGenericSendFromISR+0x3e>
 800a8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d101      	bne.n	800a8f2 <xQueueGenericSendFromISR+0x42>
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e000      	b.n	800a8f4 <xQueueGenericSendFromISR+0x44>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10b      	bne.n	800a910 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a8f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8fc:	f383 8811 	msr	BASEPRI, r3
 800a900:	f3bf 8f6f 	isb	sy
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a90a:	bf00      	nop
 800a90c:	bf00      	nop
 800a90e:	e7fd      	b.n	800a90c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	2b02      	cmp	r3, #2
 800a914:	d103      	bne.n	800a91e <xQueueGenericSendFromISR+0x6e>
 800a916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d101      	bne.n	800a922 <xQueueGenericSendFromISR+0x72>
 800a91e:	2301      	movs	r3, #1
 800a920:	e000      	b.n	800a924 <xQueueGenericSendFromISR+0x74>
 800a922:	2300      	movs	r3, #0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10b      	bne.n	800a940 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a92c:	f383 8811 	msr	BASEPRI, r3
 800a930:	f3bf 8f6f 	isb	sy
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	623b      	str	r3, [r7, #32]
}
 800a93a:	bf00      	nop
 800a93c:	bf00      	nop
 800a93e:	e7fd      	b.n	800a93c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a940:	f001 ff1a 	bl	800c778 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a944:	f3ef 8211 	mrs	r2, BASEPRI
 800a948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a94c:	f383 8811 	msr	BASEPRI, r3
 800a950:	f3bf 8f6f 	isb	sy
 800a954:	f3bf 8f4f 	dsb	sy
 800a958:	61fa      	str	r2, [r7, #28]
 800a95a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a95c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a95e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a962:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a968:	429a      	cmp	r2, r3
 800a96a:	d302      	bcc.n	800a972 <xQueueGenericSendFromISR+0xc2>
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	2b02      	cmp	r3, #2
 800a970:	d12f      	bne.n	800a9d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a974:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a978:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a97e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a980:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a982:	683a      	ldr	r2, [r7, #0]
 800a984:	68b9      	ldr	r1, [r7, #8]
 800a986:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a988:	f000 f912 	bl	800abb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a98c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a990:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a994:	d112      	bne.n	800a9bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d016      	beq.n	800a9cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a0:	3324      	adds	r3, #36	@ 0x24
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f000 fedc 	bl	800b760 <xTaskRemoveFromEventList>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00e      	beq.n	800a9cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00b      	beq.n	800a9cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	601a      	str	r2, [r3, #0]
 800a9ba:	e007      	b.n	800a9cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a9bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	b25a      	sxtb	r2, r3
 800a9c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a9d0:	e001      	b.n	800a9d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a9e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a9e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3740      	adds	r7, #64	@ 0x40
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b08c      	sub	sp, #48	@ 0x30
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	60f8      	str	r0, [r7, #12]
 800a9f4:	60b9      	str	r1, [r7, #8]
 800a9f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d10b      	bne.n	800aa1e <xQueueReceive+0x32>
	__asm volatile
 800aa06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa0a:	f383 8811 	msr	BASEPRI, r3
 800aa0e:	f3bf 8f6f 	isb	sy
 800aa12:	f3bf 8f4f 	dsb	sy
 800aa16:	623b      	str	r3, [r7, #32]
}
 800aa18:	bf00      	nop
 800aa1a:	bf00      	nop
 800aa1c:	e7fd      	b.n	800aa1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d103      	bne.n	800aa2c <xQueueReceive+0x40>
 800aa24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d101      	bne.n	800aa30 <xQueueReceive+0x44>
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e000      	b.n	800aa32 <xQueueReceive+0x46>
 800aa30:	2300      	movs	r3, #0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d10b      	bne.n	800aa4e <xQueueReceive+0x62>
	__asm volatile
 800aa36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa3a:	f383 8811 	msr	BASEPRI, r3
 800aa3e:	f3bf 8f6f 	isb	sy
 800aa42:	f3bf 8f4f 	dsb	sy
 800aa46:	61fb      	str	r3, [r7, #28]
}
 800aa48:	bf00      	nop
 800aa4a:	bf00      	nop
 800aa4c:	e7fd      	b.n	800aa4a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa4e:	f001 f847 	bl	800bae0 <xTaskGetSchedulerState>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d102      	bne.n	800aa5e <xQueueReceive+0x72>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d101      	bne.n	800aa62 <xQueueReceive+0x76>
 800aa5e:	2301      	movs	r3, #1
 800aa60:	e000      	b.n	800aa64 <xQueueReceive+0x78>
 800aa62:	2300      	movs	r3, #0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10b      	bne.n	800aa80 <xQueueReceive+0x94>
	__asm volatile
 800aa68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa6c:	f383 8811 	msr	BASEPRI, r3
 800aa70:	f3bf 8f6f 	isb	sy
 800aa74:	f3bf 8f4f 	dsb	sy
 800aa78:	61bb      	str	r3, [r7, #24]
}
 800aa7a:	bf00      	nop
 800aa7c:	bf00      	nop
 800aa7e:	e7fd      	b.n	800aa7c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa80:	f001 fd9a 	bl	800c5b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa88:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d01f      	beq.n	800aad0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa90:	68b9      	ldr	r1, [r7, #8]
 800aa92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa94:	f000 f8f6 	bl	800ac84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa9a:	1e5a      	subs	r2, r3, #1
 800aa9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa9e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aaa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00f      	beq.n	800aac8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aaa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaaa:	3310      	adds	r3, #16
 800aaac:	4618      	mov	r0, r3
 800aaae:	f000 fe57 	bl	800b760 <xTaskRemoveFromEventList>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d007      	beq.n	800aac8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aab8:	4b3c      	ldr	r3, [pc, #240]	@ (800abac <xQueueReceive+0x1c0>)
 800aaba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aabe:	601a      	str	r2, [r3, #0]
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aac8:	f001 fda8 	bl	800c61c <vPortExitCritical>
				return pdPASS;
 800aacc:	2301      	movs	r3, #1
 800aace:	e069      	b.n	800aba4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d103      	bne.n	800aade <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aad6:	f001 fda1 	bl	800c61c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aada:	2300      	movs	r3, #0
 800aadc:	e062      	b.n	800aba4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d106      	bne.n	800aaf2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aae4:	f107 0310 	add.w	r3, r7, #16
 800aae8:	4618      	mov	r0, r3
 800aaea:	f000 fe9d 	bl	800b828 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aaf2:	f001 fd93 	bl	800c61c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aaf6:	f000 fc0d 	bl	800b314 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aafa:	f001 fd5d 	bl	800c5b8 <vPortEnterCritical>
 800aafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab04:	b25b      	sxtb	r3, r3
 800ab06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab0a:	d103      	bne.n	800ab14 <xQueueReceive+0x128>
 800ab0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab1a:	b25b      	sxtb	r3, r3
 800ab1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab20:	d103      	bne.n	800ab2a <xQueueReceive+0x13e>
 800ab22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab2a:	f001 fd77 	bl	800c61c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab2e:	1d3a      	adds	r2, r7, #4
 800ab30:	f107 0310 	add.w	r3, r7, #16
 800ab34:	4611      	mov	r1, r2
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 fe8c 	bl	800b854 <xTaskCheckForTimeOut>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d123      	bne.n	800ab8a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab44:	f000 f916 	bl	800ad74 <prvIsQueueEmpty>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d017      	beq.n	800ab7e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab50:	3324      	adds	r3, #36	@ 0x24
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	4611      	mov	r1, r2
 800ab56:	4618      	mov	r0, r3
 800ab58:	f000 fdb0 	bl	800b6bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab5e:	f000 f8b7 	bl	800acd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab62:	f000 fbe5 	bl	800b330 <xTaskResumeAll>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d189      	bne.n	800aa80 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ab6c:	4b0f      	ldr	r3, [pc, #60]	@ (800abac <xQueueReceive+0x1c0>)
 800ab6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab72:	601a      	str	r2, [r3, #0]
 800ab74:	f3bf 8f4f 	dsb	sy
 800ab78:	f3bf 8f6f 	isb	sy
 800ab7c:	e780      	b.n	800aa80 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ab7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab80:	f000 f8a6 	bl	800acd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab84:	f000 fbd4 	bl	800b330 <xTaskResumeAll>
 800ab88:	e77a      	b.n	800aa80 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ab8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab8c:	f000 f8a0 	bl	800acd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab90:	f000 fbce 	bl	800b330 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab96:	f000 f8ed 	bl	800ad74 <prvIsQueueEmpty>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f43f af6f 	beq.w	800aa80 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aba2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3730      	adds	r7, #48	@ 0x30
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	e000ed04 	.word	0xe000ed04

0800abb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b086      	sub	sp, #24
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800abbc:	2300      	movs	r3, #0
 800abbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d10d      	bne.n	800abea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d14d      	bne.n	800ac72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	4618      	mov	r0, r3
 800abdc:	f000 ff9e 	bl	800bb1c <xTaskPriorityDisinherit>
 800abe0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2200      	movs	r2, #0
 800abe6:	609a      	str	r2, [r3, #8]
 800abe8:	e043      	b.n	800ac72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d119      	bne.n	800ac24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	6858      	ldr	r0, [r3, #4]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abf8:	461a      	mov	r2, r3
 800abfa:	68b9      	ldr	r1, [r7, #8]
 800abfc:	f003 f8db 	bl	800ddb6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	685a      	ldr	r2, [r3, #4]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac08:	441a      	add	r2, r3
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	685a      	ldr	r2, [r3, #4]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d32b      	bcc.n	800ac72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	605a      	str	r2, [r3, #4]
 800ac22:	e026      	b.n	800ac72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	68d8      	ldr	r0, [r3, #12]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	68b9      	ldr	r1, [r7, #8]
 800ac30:	f003 f8c1 	bl	800ddb6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	68da      	ldr	r2, [r3, #12]
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac3c:	425b      	negs	r3, r3
 800ac3e:	441a      	add	r2, r3
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	68da      	ldr	r2, [r3, #12]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d207      	bcs.n	800ac60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	689a      	ldr	r2, [r3, #8]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac58:	425b      	negs	r3, r3
 800ac5a:	441a      	add	r2, r3
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	d105      	bne.n	800ac72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d002      	beq.n	800ac72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	3b01      	subs	r3, #1
 800ac70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	1c5a      	adds	r2, r3, #1
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ac7a:	697b      	ldr	r3, [r7, #20]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3718      	adds	r7, #24
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d018      	beq.n	800acc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	68da      	ldr	r2, [r3, #12]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac9e:	441a      	add	r2, r3
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	68da      	ldr	r2, [r3, #12]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	429a      	cmp	r2, r3
 800acae:	d303      	bcc.n	800acb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681a      	ldr	r2, [r3, #0]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	68d9      	ldr	r1, [r3, #12]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acc0:	461a      	mov	r2, r3
 800acc2:	6838      	ldr	r0, [r7, #0]
 800acc4:	f003 f877 	bl	800ddb6 <memcpy>
	}
}
 800acc8:	bf00      	nop
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800acd8:	f001 fc6e 	bl	800c5b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ace2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ace4:	e011      	b.n	800ad0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acea:	2b00      	cmp	r3, #0
 800acec:	d012      	beq.n	800ad14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	3324      	adds	r3, #36	@ 0x24
 800acf2:	4618      	mov	r0, r3
 800acf4:	f000 fd34 	bl	800b760 <xTaskRemoveFromEventList>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d001      	beq.n	800ad02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800acfe:	f000 fe0d 	bl	800b91c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad02:	7bfb      	ldrb	r3, [r7, #15]
 800ad04:	3b01      	subs	r3, #1
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	dce9      	bgt.n	800ace6 <prvUnlockQueue+0x16>
 800ad12:	e000      	b.n	800ad16 <prvUnlockQueue+0x46>
					break;
 800ad14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	22ff      	movs	r2, #255	@ 0xff
 800ad1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ad1e:	f001 fc7d 	bl	800c61c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad22:	f001 fc49 	bl	800c5b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad2e:	e011      	b.n	800ad54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	691b      	ldr	r3, [r3, #16]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d012      	beq.n	800ad5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	3310      	adds	r3, #16
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f000 fd0f 	bl	800b760 <xTaskRemoveFromEventList>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d001      	beq.n	800ad4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ad48:	f000 fde8 	bl	800b91c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ad4c:	7bbb      	ldrb	r3, [r7, #14]
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	dce9      	bgt.n	800ad30 <prvUnlockQueue+0x60>
 800ad5c:	e000      	b.n	800ad60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ad5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	22ff      	movs	r2, #255	@ 0xff
 800ad64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ad68:	f001 fc58 	bl	800c61c <vPortExitCritical>
}
 800ad6c:	bf00      	nop
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad7c:	f001 fc1c 	bl	800c5b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d102      	bne.n	800ad8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	60fb      	str	r3, [r7, #12]
 800ad8c:	e001      	b.n	800ad92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad92:	f001 fc43 	bl	800c61c <vPortExitCritical>

	return xReturn;
 800ad96:	68fb      	ldr	r3, [r7, #12]
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3710      	adds	r7, #16
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ada8:	f001 fc06 	bl	800c5b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d102      	bne.n	800adbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800adb8:	2301      	movs	r3, #1
 800adba:	60fb      	str	r3, [r7, #12]
 800adbc:	e001      	b.n	800adc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800adbe:	2300      	movs	r3, #0
 800adc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800adc2:	f001 fc2b 	bl	800c61c <vPortExitCritical>

	return xReturn;
 800adc6:	68fb      	ldr	r3, [r7, #12]
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800adda:	2300      	movs	r3, #0
 800addc:	60fb      	str	r3, [r7, #12]
 800adde:	e014      	b.n	800ae0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ade0:	4a0f      	ldr	r2, [pc, #60]	@ (800ae20 <vQueueAddToRegistry+0x50>)
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10b      	bne.n	800ae04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800adec:	490c      	ldr	r1, [pc, #48]	@ (800ae20 <vQueueAddToRegistry+0x50>)
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	683a      	ldr	r2, [r7, #0]
 800adf2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800adf6:	4a0a      	ldr	r2, [pc, #40]	@ (800ae20 <vQueueAddToRegistry+0x50>)
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	00db      	lsls	r3, r3, #3
 800adfc:	4413      	add	r3, r2
 800adfe:	687a      	ldr	r2, [r7, #4]
 800ae00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ae02:	e006      	b.n	800ae12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	3301      	adds	r3, #1
 800ae08:	60fb      	str	r3, [r7, #12]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2b07      	cmp	r3, #7
 800ae0e:	d9e7      	bls.n	800ade0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ae10:	bf00      	nop
 800ae12:	bf00      	nop
 800ae14:	3714      	adds	r7, #20
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr
 800ae1e:	bf00      	nop
 800ae20:	20000cc0 	.word	0x20000cc0

0800ae24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b086      	sub	sp, #24
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ae34:	f001 fbc0 	bl	800c5b8 <vPortEnterCritical>
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae3e:	b25b      	sxtb	r3, r3
 800ae40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae44:	d103      	bne.n	800ae4e <vQueueWaitForMessageRestricted+0x2a>
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae54:	b25b      	sxtb	r3, r3
 800ae56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae5a:	d103      	bne.n	800ae64 <vQueueWaitForMessageRestricted+0x40>
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae64:	f001 fbda 	bl	800c61c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d106      	bne.n	800ae7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	3324      	adds	r3, #36	@ 0x24
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	68b9      	ldr	r1, [r7, #8]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f000 fc45 	bl	800b708 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ae7e:	6978      	ldr	r0, [r7, #20]
 800ae80:	f7ff ff26 	bl	800acd0 <prvUnlockQueue>
	}
 800ae84:	bf00      	nop
 800ae86:	3718      	adds	r7, #24
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b08e      	sub	sp, #56	@ 0x38
 800ae90:	af04      	add	r7, sp, #16
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]
 800ae98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ae9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d10b      	bne.n	800aeb8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800aea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea4:	f383 8811 	msr	BASEPRI, r3
 800aea8:	f3bf 8f6f 	isb	sy
 800aeac:	f3bf 8f4f 	dsb	sy
 800aeb0:	623b      	str	r3, [r7, #32]
}
 800aeb2:	bf00      	nop
 800aeb4:	bf00      	nop
 800aeb6:	e7fd      	b.n	800aeb4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aeb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d10b      	bne.n	800aed6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800aebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec2:	f383 8811 	msr	BASEPRI, r3
 800aec6:	f3bf 8f6f 	isb	sy
 800aeca:	f3bf 8f4f 	dsb	sy
 800aece:	61fb      	str	r3, [r7, #28]
}
 800aed0:	bf00      	nop
 800aed2:	bf00      	nop
 800aed4:	e7fd      	b.n	800aed2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aed6:	235c      	movs	r3, #92	@ 0x5c
 800aed8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	2b5c      	cmp	r3, #92	@ 0x5c
 800aede:	d00b      	beq.n	800aef8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800aee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aee4:	f383 8811 	msr	BASEPRI, r3
 800aee8:	f3bf 8f6f 	isb	sy
 800aeec:	f3bf 8f4f 	dsb	sy
 800aef0:	61bb      	str	r3, [r7, #24]
}
 800aef2:	bf00      	nop
 800aef4:	bf00      	nop
 800aef6:	e7fd      	b.n	800aef4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aef8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aefa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d01e      	beq.n	800af3e <xTaskCreateStatic+0xb2>
 800af00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af02:	2b00      	cmp	r3, #0
 800af04:	d01b      	beq.n	800af3e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af08:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800af0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af0c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800af0e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800af10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af12:	2202      	movs	r2, #2
 800af14:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800af18:	2300      	movs	r3, #0
 800af1a:	9303      	str	r3, [sp, #12]
 800af1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af1e:	9302      	str	r3, [sp, #8]
 800af20:	f107 0314 	add.w	r3, r7, #20
 800af24:	9301      	str	r3, [sp, #4]
 800af26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af28:	9300      	str	r3, [sp, #0]
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	68b9      	ldr	r1, [r7, #8]
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	f000 f850 	bl	800afd6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800af38:	f000 f8de 	bl	800b0f8 <prvAddNewTaskToReadyList>
 800af3c:	e001      	b.n	800af42 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800af3e:	2300      	movs	r3, #0
 800af40:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800af42:	697b      	ldr	r3, [r7, #20]
	}
 800af44:	4618      	mov	r0, r3
 800af46:	3728      	adds	r7, #40	@ 0x28
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b08c      	sub	sp, #48	@ 0x30
 800af50:	af04      	add	r7, sp, #16
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	603b      	str	r3, [r7, #0]
 800af58:	4613      	mov	r3, r2
 800af5a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800af5c:	88fb      	ldrh	r3, [r7, #6]
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	4618      	mov	r0, r3
 800af62:	f001 fc4b 	bl	800c7fc <pvPortMalloc>
 800af66:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00e      	beq.n	800af8c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800af6e:	205c      	movs	r0, #92	@ 0x5c
 800af70:	f001 fc44 	bl	800c7fc <pvPortMalloc>
 800af74:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800af76:	69fb      	ldr	r3, [r7, #28]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d003      	beq.n	800af84 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	697a      	ldr	r2, [r7, #20]
 800af80:	631a      	str	r2, [r3, #48]	@ 0x30
 800af82:	e005      	b.n	800af90 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800af84:	6978      	ldr	r0, [r7, #20]
 800af86:	f001 fd07 	bl	800c998 <vPortFree>
 800af8a:	e001      	b.n	800af90 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800af8c:	2300      	movs	r3, #0
 800af8e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d017      	beq.n	800afc6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800af96:	69fb      	ldr	r3, [r7, #28]
 800af98:	2200      	movs	r2, #0
 800af9a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800af9e:	88fa      	ldrh	r2, [r7, #6]
 800afa0:	2300      	movs	r3, #0
 800afa2:	9303      	str	r3, [sp, #12]
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	9302      	str	r3, [sp, #8]
 800afa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afaa:	9301      	str	r3, [sp, #4]
 800afac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afae:	9300      	str	r3, [sp, #0]
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	68b9      	ldr	r1, [r7, #8]
 800afb4:	68f8      	ldr	r0, [r7, #12]
 800afb6:	f000 f80e 	bl	800afd6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800afba:	69f8      	ldr	r0, [r7, #28]
 800afbc:	f000 f89c 	bl	800b0f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800afc0:	2301      	movs	r3, #1
 800afc2:	61bb      	str	r3, [r7, #24]
 800afc4:	e002      	b.n	800afcc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800afc6:	f04f 33ff 	mov.w	r3, #4294967295
 800afca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800afcc:	69bb      	ldr	r3, [r7, #24]
	}
 800afce:	4618      	mov	r0, r3
 800afd0:	3720      	adds	r7, #32
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b088      	sub	sp, #32
 800afda:	af00      	add	r7, sp, #0
 800afdc:	60f8      	str	r0, [r7, #12]
 800afde:	60b9      	str	r1, [r7, #8]
 800afe0:	607a      	str	r2, [r7, #4]
 800afe2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800afe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	461a      	mov	r2, r3
 800afee:	21a5      	movs	r1, #165	@ 0xa5
 800aff0:	f002 fe3d 	bl	800dc6e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800affe:	3b01      	subs	r3, #1
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4413      	add	r3, r2
 800b004:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	f023 0307 	bic.w	r3, r3, #7
 800b00c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	f003 0307 	and.w	r3, r3, #7
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00b      	beq.n	800b030 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b01c:	f383 8811 	msr	BASEPRI, r3
 800b020:	f3bf 8f6f 	isb	sy
 800b024:	f3bf 8f4f 	dsb	sy
 800b028:	617b      	str	r3, [r7, #20]
}
 800b02a:	bf00      	nop
 800b02c:	bf00      	nop
 800b02e:	e7fd      	b.n	800b02c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d01f      	beq.n	800b076 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b036:	2300      	movs	r3, #0
 800b038:	61fb      	str	r3, [r7, #28]
 800b03a:	e012      	b.n	800b062 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b03c:	68ba      	ldr	r2, [r7, #8]
 800b03e:	69fb      	ldr	r3, [r7, #28]
 800b040:	4413      	add	r3, r2
 800b042:	7819      	ldrb	r1, [r3, #0]
 800b044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	4413      	add	r3, r2
 800b04a:	3334      	adds	r3, #52	@ 0x34
 800b04c:	460a      	mov	r2, r1
 800b04e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b050:	68ba      	ldr	r2, [r7, #8]
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	4413      	add	r3, r2
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d006      	beq.n	800b06a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	3301      	adds	r3, #1
 800b060:	61fb      	str	r3, [r7, #28]
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	2b0f      	cmp	r3, #15
 800b066:	d9e9      	bls.n	800b03c <prvInitialiseNewTask+0x66>
 800b068:	e000      	b.n	800b06c <prvInitialiseNewTask+0x96>
			{
				break;
 800b06a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06e:	2200      	movs	r2, #0
 800b070:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b074:	e003      	b.n	800b07e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b078:	2200      	movs	r2, #0
 800b07a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b080:	2b37      	cmp	r3, #55	@ 0x37
 800b082:	d901      	bls.n	800b088 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b084:	2337      	movs	r3, #55	@ 0x37
 800b086:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b08a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b08c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b090:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b092:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b096:	2200      	movs	r2, #0
 800b098:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b09a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b09c:	3304      	adds	r3, #4
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7ff f966 	bl	800a370 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a6:	3318      	adds	r3, #24
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7ff f961 	bl	800a370 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0b6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0c2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b0c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b0d2:	683a      	ldr	r2, [r7, #0]
 800b0d4:	68f9      	ldr	r1, [r7, #12]
 800b0d6:	69b8      	ldr	r0, [r7, #24]
 800b0d8:	f001 f93e 	bl	800c358 <pxPortInitialiseStack>
 800b0dc:	4602      	mov	r2, r0
 800b0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d002      	beq.n	800b0ee <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0ee:	bf00      	nop
 800b0f0:	3720      	adds	r7, #32
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
	...

0800b0f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b100:	f001 fa5a 	bl	800c5b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b104:	4b2d      	ldr	r3, [pc, #180]	@ (800b1bc <prvAddNewTaskToReadyList+0xc4>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	3301      	adds	r3, #1
 800b10a:	4a2c      	ldr	r2, [pc, #176]	@ (800b1bc <prvAddNewTaskToReadyList+0xc4>)
 800b10c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b10e:	4b2c      	ldr	r3, [pc, #176]	@ (800b1c0 <prvAddNewTaskToReadyList+0xc8>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d109      	bne.n	800b12a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b116:	4a2a      	ldr	r2, [pc, #168]	@ (800b1c0 <prvAddNewTaskToReadyList+0xc8>)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b11c:	4b27      	ldr	r3, [pc, #156]	@ (800b1bc <prvAddNewTaskToReadyList+0xc4>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d110      	bne.n	800b146 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b124:	f000 fc1e 	bl	800b964 <prvInitialiseTaskLists>
 800b128:	e00d      	b.n	800b146 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b12a:	4b26      	ldr	r3, [pc, #152]	@ (800b1c4 <prvAddNewTaskToReadyList+0xcc>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d109      	bne.n	800b146 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b132:	4b23      	ldr	r3, [pc, #140]	@ (800b1c0 <prvAddNewTaskToReadyList+0xc8>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d802      	bhi.n	800b146 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b140:	4a1f      	ldr	r2, [pc, #124]	@ (800b1c0 <prvAddNewTaskToReadyList+0xc8>)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b146:	4b20      	ldr	r3, [pc, #128]	@ (800b1c8 <prvAddNewTaskToReadyList+0xd0>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	3301      	adds	r3, #1
 800b14c:	4a1e      	ldr	r2, [pc, #120]	@ (800b1c8 <prvAddNewTaskToReadyList+0xd0>)
 800b14e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b150:	4b1d      	ldr	r3, [pc, #116]	@ (800b1c8 <prvAddNewTaskToReadyList+0xd0>)
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b15c:	4b1b      	ldr	r3, [pc, #108]	@ (800b1cc <prvAddNewTaskToReadyList+0xd4>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	429a      	cmp	r2, r3
 800b162:	d903      	bls.n	800b16c <prvAddNewTaskToReadyList+0x74>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b168:	4a18      	ldr	r2, [pc, #96]	@ (800b1cc <prvAddNewTaskToReadyList+0xd4>)
 800b16a:	6013      	str	r3, [r2, #0]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b170:	4613      	mov	r3, r2
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	4413      	add	r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	4a15      	ldr	r2, [pc, #84]	@ (800b1d0 <prvAddNewTaskToReadyList+0xd8>)
 800b17a:	441a      	add	r2, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	3304      	adds	r3, #4
 800b180:	4619      	mov	r1, r3
 800b182:	4610      	mov	r0, r2
 800b184:	f7ff f901 	bl	800a38a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b188:	f001 fa48 	bl	800c61c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b18c:	4b0d      	ldr	r3, [pc, #52]	@ (800b1c4 <prvAddNewTaskToReadyList+0xcc>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d00e      	beq.n	800b1b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b194:	4b0a      	ldr	r3, [pc, #40]	@ (800b1c0 <prvAddNewTaskToReadyList+0xc8>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d207      	bcs.n	800b1b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b1a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b1d4 <prvAddNewTaskToReadyList+0xdc>)
 800b1a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1a8:	601a      	str	r2, [r3, #0]
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1b2:	bf00      	nop
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	200011d4 	.word	0x200011d4
 800b1c0:	20000d00 	.word	0x20000d00
 800b1c4:	200011e0 	.word	0x200011e0
 800b1c8:	200011f0 	.word	0x200011f0
 800b1cc:	200011dc 	.word	0x200011dc
 800b1d0:	20000d04 	.word	0x20000d04
 800b1d4:	e000ed04 	.word	0xe000ed04

0800b1d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d018      	beq.n	800b21c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b1ea:	4b14      	ldr	r3, [pc, #80]	@ (800b23c <vTaskDelay+0x64>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d00b      	beq.n	800b20a <vTaskDelay+0x32>
	__asm volatile
 800b1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f6:	f383 8811 	msr	BASEPRI, r3
 800b1fa:	f3bf 8f6f 	isb	sy
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	60bb      	str	r3, [r7, #8]
}
 800b204:	bf00      	nop
 800b206:	bf00      	nop
 800b208:	e7fd      	b.n	800b206 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b20a:	f000 f883 	bl	800b314 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b20e:	2100      	movs	r1, #0
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 fcf3 	bl	800bbfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b216:	f000 f88b 	bl	800b330 <xTaskResumeAll>
 800b21a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d107      	bne.n	800b232 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b222:	4b07      	ldr	r3, [pc, #28]	@ (800b240 <vTaskDelay+0x68>)
 800b224:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b228:	601a      	str	r2, [r3, #0]
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b232:	bf00      	nop
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	200011fc 	.word	0x200011fc
 800b240:	e000ed04 	.word	0xe000ed04

0800b244 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b08a      	sub	sp, #40	@ 0x28
 800b248:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b24a:	2300      	movs	r3, #0
 800b24c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b24e:	2300      	movs	r3, #0
 800b250:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b252:	463a      	mov	r2, r7
 800b254:	1d39      	adds	r1, r7, #4
 800b256:	f107 0308 	add.w	r3, r7, #8
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7ff f834 	bl	800a2c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b260:	6839      	ldr	r1, [r7, #0]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	9202      	str	r2, [sp, #8]
 800b268:	9301      	str	r3, [sp, #4]
 800b26a:	2300      	movs	r3, #0
 800b26c:	9300      	str	r3, [sp, #0]
 800b26e:	2300      	movs	r3, #0
 800b270:	460a      	mov	r2, r1
 800b272:	4922      	ldr	r1, [pc, #136]	@ (800b2fc <vTaskStartScheduler+0xb8>)
 800b274:	4822      	ldr	r0, [pc, #136]	@ (800b300 <vTaskStartScheduler+0xbc>)
 800b276:	f7ff fe09 	bl	800ae8c <xTaskCreateStatic>
 800b27a:	4603      	mov	r3, r0
 800b27c:	4a21      	ldr	r2, [pc, #132]	@ (800b304 <vTaskStartScheduler+0xc0>)
 800b27e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b280:	4b20      	ldr	r3, [pc, #128]	@ (800b304 <vTaskStartScheduler+0xc0>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d002      	beq.n	800b28e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b288:	2301      	movs	r3, #1
 800b28a:	617b      	str	r3, [r7, #20]
 800b28c:	e001      	b.n	800b292 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b28e:	2300      	movs	r3, #0
 800b290:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d102      	bne.n	800b29e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b298:	f000 fd04 	bl	800bca4 <xTimerCreateTimerTask>
 800b29c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d116      	bne.n	800b2d2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a8:	f383 8811 	msr	BASEPRI, r3
 800b2ac:	f3bf 8f6f 	isb	sy
 800b2b0:	f3bf 8f4f 	dsb	sy
 800b2b4:	613b      	str	r3, [r7, #16]
}
 800b2b6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b2b8:	4b13      	ldr	r3, [pc, #76]	@ (800b308 <vTaskStartScheduler+0xc4>)
 800b2ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b2be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b2c0:	4b12      	ldr	r3, [pc, #72]	@ (800b30c <vTaskStartScheduler+0xc8>)
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b2c6:	4b12      	ldr	r3, [pc, #72]	@ (800b310 <vTaskStartScheduler+0xcc>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b2cc:	f001 f8d0 	bl	800c470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b2d0:	e00f      	b.n	800b2f2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2d8:	d10b      	bne.n	800b2f2 <vTaskStartScheduler+0xae>
	__asm volatile
 800b2da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2de:	f383 8811 	msr	BASEPRI, r3
 800b2e2:	f3bf 8f6f 	isb	sy
 800b2e6:	f3bf 8f4f 	dsb	sy
 800b2ea:	60fb      	str	r3, [r7, #12]
}
 800b2ec:	bf00      	nop
 800b2ee:	bf00      	nop
 800b2f0:	e7fd      	b.n	800b2ee <vTaskStartScheduler+0xaa>
}
 800b2f2:	bf00      	nop
 800b2f4:	3718      	adds	r7, #24
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	080104b8 	.word	0x080104b8
 800b300:	0800b935 	.word	0x0800b935
 800b304:	200011f8 	.word	0x200011f8
 800b308:	200011f4 	.word	0x200011f4
 800b30c:	200011e0 	.word	0x200011e0
 800b310:	200011d8 	.word	0x200011d8

0800b314 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b314:	b480      	push	{r7}
 800b316:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b318:	4b04      	ldr	r3, [pc, #16]	@ (800b32c <vTaskSuspendAll+0x18>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	3301      	adds	r3, #1
 800b31e:	4a03      	ldr	r2, [pc, #12]	@ (800b32c <vTaskSuspendAll+0x18>)
 800b320:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b322:	bf00      	nop
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr
 800b32c:	200011fc 	.word	0x200011fc

0800b330 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b336:	2300      	movs	r3, #0
 800b338:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b33a:	2300      	movs	r3, #0
 800b33c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b33e:	4b42      	ldr	r3, [pc, #264]	@ (800b448 <xTaskResumeAll+0x118>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d10b      	bne.n	800b35e <xTaskResumeAll+0x2e>
	__asm volatile
 800b346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b34a:	f383 8811 	msr	BASEPRI, r3
 800b34e:	f3bf 8f6f 	isb	sy
 800b352:	f3bf 8f4f 	dsb	sy
 800b356:	603b      	str	r3, [r7, #0]
}
 800b358:	bf00      	nop
 800b35a:	bf00      	nop
 800b35c:	e7fd      	b.n	800b35a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b35e:	f001 f92b 	bl	800c5b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b362:	4b39      	ldr	r3, [pc, #228]	@ (800b448 <xTaskResumeAll+0x118>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	3b01      	subs	r3, #1
 800b368:	4a37      	ldr	r2, [pc, #220]	@ (800b448 <xTaskResumeAll+0x118>)
 800b36a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b36c:	4b36      	ldr	r3, [pc, #216]	@ (800b448 <xTaskResumeAll+0x118>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d162      	bne.n	800b43a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b374:	4b35      	ldr	r3, [pc, #212]	@ (800b44c <xTaskResumeAll+0x11c>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d05e      	beq.n	800b43a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b37c:	e02f      	b.n	800b3de <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b37e:	4b34      	ldr	r3, [pc, #208]	@ (800b450 <xTaskResumeAll+0x120>)
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	3318      	adds	r3, #24
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7ff f85a 	bl	800a444 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	3304      	adds	r3, #4
 800b394:	4618      	mov	r0, r3
 800b396:	f7ff f855 	bl	800a444 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b39e:	4b2d      	ldr	r3, [pc, #180]	@ (800b454 <xTaskResumeAll+0x124>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d903      	bls.n	800b3ae <xTaskResumeAll+0x7e>
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3aa:	4a2a      	ldr	r2, [pc, #168]	@ (800b454 <xTaskResumeAll+0x124>)
 800b3ac:	6013      	str	r3, [r2, #0]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4413      	add	r3, r2
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	4a27      	ldr	r2, [pc, #156]	@ (800b458 <xTaskResumeAll+0x128>)
 800b3bc:	441a      	add	r2, r3
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	3304      	adds	r3, #4
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	4610      	mov	r0, r2
 800b3c6:	f7fe ffe0 	bl	800a38a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3ce:	4b23      	ldr	r3, [pc, #140]	@ (800b45c <xTaskResumeAll+0x12c>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d302      	bcc.n	800b3de <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b3d8:	4b21      	ldr	r3, [pc, #132]	@ (800b460 <xTaskResumeAll+0x130>)
 800b3da:	2201      	movs	r2, #1
 800b3dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3de:	4b1c      	ldr	r3, [pc, #112]	@ (800b450 <xTaskResumeAll+0x120>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d1cb      	bne.n	800b37e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d001      	beq.n	800b3f0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b3ec:	f000 fb58 	bl	800baa0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b3f0:	4b1c      	ldr	r3, [pc, #112]	@ (800b464 <xTaskResumeAll+0x134>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d010      	beq.n	800b41e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b3fc:	f000 f846 	bl	800b48c <xTaskIncrementTick>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d002      	beq.n	800b40c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b406:	4b16      	ldr	r3, [pc, #88]	@ (800b460 <xTaskResumeAll+0x130>)
 800b408:	2201      	movs	r2, #1
 800b40a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	3b01      	subs	r3, #1
 800b410:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d1f1      	bne.n	800b3fc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b418:	4b12      	ldr	r3, [pc, #72]	@ (800b464 <xTaskResumeAll+0x134>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b41e:	4b10      	ldr	r3, [pc, #64]	@ (800b460 <xTaskResumeAll+0x130>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d009      	beq.n	800b43a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b426:	2301      	movs	r3, #1
 800b428:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b42a:	4b0f      	ldr	r3, [pc, #60]	@ (800b468 <xTaskResumeAll+0x138>)
 800b42c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b430:	601a      	str	r2, [r3, #0]
 800b432:	f3bf 8f4f 	dsb	sy
 800b436:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b43a:	f001 f8ef 	bl	800c61c <vPortExitCritical>

	return xAlreadyYielded;
 800b43e:	68bb      	ldr	r3, [r7, #8]
}
 800b440:	4618      	mov	r0, r3
 800b442:	3710      	adds	r7, #16
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	200011fc 	.word	0x200011fc
 800b44c:	200011d4 	.word	0x200011d4
 800b450:	20001194 	.word	0x20001194
 800b454:	200011dc 	.word	0x200011dc
 800b458:	20000d04 	.word	0x20000d04
 800b45c:	20000d00 	.word	0x20000d00
 800b460:	200011e8 	.word	0x200011e8
 800b464:	200011e4 	.word	0x200011e4
 800b468:	e000ed04 	.word	0xe000ed04

0800b46c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b472:	4b05      	ldr	r3, [pc, #20]	@ (800b488 <xTaskGetTickCount+0x1c>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b478:	687b      	ldr	r3, [r7, #4]
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	370c      	adds	r7, #12
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	200011d8 	.word	0x200011d8

0800b48c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b086      	sub	sp, #24
 800b490:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b492:	2300      	movs	r3, #0
 800b494:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b496:	4b4f      	ldr	r3, [pc, #316]	@ (800b5d4 <xTaskIncrementTick+0x148>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	f040 8090 	bne.w	800b5c0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b4a0:	4b4d      	ldr	r3, [pc, #308]	@ (800b5d8 <xTaskIncrementTick+0x14c>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b4a8:	4a4b      	ldr	r2, [pc, #300]	@ (800b5d8 <xTaskIncrementTick+0x14c>)
 800b4aa:	693b      	ldr	r3, [r7, #16]
 800b4ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d121      	bne.n	800b4f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b4b4:	4b49      	ldr	r3, [pc, #292]	@ (800b5dc <xTaskIncrementTick+0x150>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00b      	beq.n	800b4d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c2:	f383 8811 	msr	BASEPRI, r3
 800b4c6:	f3bf 8f6f 	isb	sy
 800b4ca:	f3bf 8f4f 	dsb	sy
 800b4ce:	603b      	str	r3, [r7, #0]
}
 800b4d0:	bf00      	nop
 800b4d2:	bf00      	nop
 800b4d4:	e7fd      	b.n	800b4d2 <xTaskIncrementTick+0x46>
 800b4d6:	4b41      	ldr	r3, [pc, #260]	@ (800b5dc <xTaskIncrementTick+0x150>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	60fb      	str	r3, [r7, #12]
 800b4dc:	4b40      	ldr	r3, [pc, #256]	@ (800b5e0 <xTaskIncrementTick+0x154>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a3e      	ldr	r2, [pc, #248]	@ (800b5dc <xTaskIncrementTick+0x150>)
 800b4e2:	6013      	str	r3, [r2, #0]
 800b4e4:	4a3e      	ldr	r2, [pc, #248]	@ (800b5e0 <xTaskIncrementTick+0x154>)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	6013      	str	r3, [r2, #0]
 800b4ea:	4b3e      	ldr	r3, [pc, #248]	@ (800b5e4 <xTaskIncrementTick+0x158>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	4a3c      	ldr	r2, [pc, #240]	@ (800b5e4 <xTaskIncrementTick+0x158>)
 800b4f2:	6013      	str	r3, [r2, #0]
 800b4f4:	f000 fad4 	bl	800baa0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b4f8:	4b3b      	ldr	r3, [pc, #236]	@ (800b5e8 <xTaskIncrementTick+0x15c>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	693a      	ldr	r2, [r7, #16]
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d349      	bcc.n	800b596 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b502:	4b36      	ldr	r3, [pc, #216]	@ (800b5dc <xTaskIncrementTick+0x150>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d104      	bne.n	800b516 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b50c:	4b36      	ldr	r3, [pc, #216]	@ (800b5e8 <xTaskIncrementTick+0x15c>)
 800b50e:	f04f 32ff 	mov.w	r2, #4294967295
 800b512:	601a      	str	r2, [r3, #0]
					break;
 800b514:	e03f      	b.n	800b596 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b516:	4b31      	ldr	r3, [pc, #196]	@ (800b5dc <xTaskIncrementTick+0x150>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b526:	693a      	ldr	r2, [r7, #16]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d203      	bcs.n	800b536 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b52e:	4a2e      	ldr	r2, [pc, #184]	@ (800b5e8 <xTaskIncrementTick+0x15c>)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b534:	e02f      	b.n	800b596 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	3304      	adds	r3, #4
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fe ff82 	bl	800a444 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b544:	2b00      	cmp	r3, #0
 800b546:	d004      	beq.n	800b552 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	3318      	adds	r3, #24
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7fe ff79 	bl	800a444 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b556:	4b25      	ldr	r3, [pc, #148]	@ (800b5ec <xTaskIncrementTick+0x160>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d903      	bls.n	800b566 <xTaskIncrementTick+0xda>
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b562:	4a22      	ldr	r2, [pc, #136]	@ (800b5ec <xTaskIncrementTick+0x160>)
 800b564:	6013      	str	r3, [r2, #0]
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b56a:	4613      	mov	r3, r2
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	4413      	add	r3, r2
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	4a1f      	ldr	r2, [pc, #124]	@ (800b5f0 <xTaskIncrementTick+0x164>)
 800b574:	441a      	add	r2, r3
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	3304      	adds	r3, #4
 800b57a:	4619      	mov	r1, r3
 800b57c:	4610      	mov	r0, r2
 800b57e:	f7fe ff04 	bl	800a38a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b586:	4b1b      	ldr	r3, [pc, #108]	@ (800b5f4 <xTaskIncrementTick+0x168>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d3b8      	bcc.n	800b502 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b590:	2301      	movs	r3, #1
 800b592:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b594:	e7b5      	b.n	800b502 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b596:	4b17      	ldr	r3, [pc, #92]	@ (800b5f4 <xTaskIncrementTick+0x168>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b59c:	4914      	ldr	r1, [pc, #80]	@ (800b5f0 <xTaskIncrementTick+0x164>)
 800b59e:	4613      	mov	r3, r2
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	4413      	add	r3, r2
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	440b      	add	r3, r1
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	d901      	bls.n	800b5b2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b5b2:	4b11      	ldr	r3, [pc, #68]	@ (800b5f8 <xTaskIncrementTick+0x16c>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d007      	beq.n	800b5ca <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	617b      	str	r3, [r7, #20]
 800b5be:	e004      	b.n	800b5ca <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b5c0:	4b0e      	ldr	r3, [pc, #56]	@ (800b5fc <xTaskIncrementTick+0x170>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	4a0d      	ldr	r2, [pc, #52]	@ (800b5fc <xTaskIncrementTick+0x170>)
 800b5c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b5ca:	697b      	ldr	r3, [r7, #20]
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3718      	adds	r7, #24
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}
 800b5d4:	200011fc 	.word	0x200011fc
 800b5d8:	200011d8 	.word	0x200011d8
 800b5dc:	2000118c 	.word	0x2000118c
 800b5e0:	20001190 	.word	0x20001190
 800b5e4:	200011ec 	.word	0x200011ec
 800b5e8:	200011f4 	.word	0x200011f4
 800b5ec:	200011dc 	.word	0x200011dc
 800b5f0:	20000d04 	.word	0x20000d04
 800b5f4:	20000d00 	.word	0x20000d00
 800b5f8:	200011e8 	.word	0x200011e8
 800b5fc:	200011e4 	.word	0x200011e4

0800b600 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b600:	b480      	push	{r7}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b606:	4b28      	ldr	r3, [pc, #160]	@ (800b6a8 <vTaskSwitchContext+0xa8>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d003      	beq.n	800b616 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b60e:	4b27      	ldr	r3, [pc, #156]	@ (800b6ac <vTaskSwitchContext+0xac>)
 800b610:	2201      	movs	r2, #1
 800b612:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b614:	e042      	b.n	800b69c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b616:	4b25      	ldr	r3, [pc, #148]	@ (800b6ac <vTaskSwitchContext+0xac>)
 800b618:	2200      	movs	r2, #0
 800b61a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b61c:	4b24      	ldr	r3, [pc, #144]	@ (800b6b0 <vTaskSwitchContext+0xb0>)
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	60fb      	str	r3, [r7, #12]
 800b622:	e011      	b.n	800b648 <vTaskSwitchContext+0x48>
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d10b      	bne.n	800b642 <vTaskSwitchContext+0x42>
	__asm volatile
 800b62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b62e:	f383 8811 	msr	BASEPRI, r3
 800b632:	f3bf 8f6f 	isb	sy
 800b636:	f3bf 8f4f 	dsb	sy
 800b63a:	607b      	str	r3, [r7, #4]
}
 800b63c:	bf00      	nop
 800b63e:	bf00      	nop
 800b640:	e7fd      	b.n	800b63e <vTaskSwitchContext+0x3e>
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	3b01      	subs	r3, #1
 800b646:	60fb      	str	r3, [r7, #12]
 800b648:	491a      	ldr	r1, [pc, #104]	@ (800b6b4 <vTaskSwitchContext+0xb4>)
 800b64a:	68fa      	ldr	r2, [r7, #12]
 800b64c:	4613      	mov	r3, r2
 800b64e:	009b      	lsls	r3, r3, #2
 800b650:	4413      	add	r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	440b      	add	r3, r1
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d0e3      	beq.n	800b624 <vTaskSwitchContext+0x24>
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	4613      	mov	r3, r2
 800b660:	009b      	lsls	r3, r3, #2
 800b662:	4413      	add	r3, r2
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	4a13      	ldr	r2, [pc, #76]	@ (800b6b4 <vTaskSwitchContext+0xb4>)
 800b668:	4413      	add	r3, r2
 800b66a:	60bb      	str	r3, [r7, #8]
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	685a      	ldr	r2, [r3, #4]
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	605a      	str	r2, [r3, #4]
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	685a      	ldr	r2, [r3, #4]
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	3308      	adds	r3, #8
 800b67e:	429a      	cmp	r2, r3
 800b680:	d104      	bne.n	800b68c <vTaskSwitchContext+0x8c>
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	685a      	ldr	r2, [r3, #4]
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	605a      	str	r2, [r3, #4]
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	4a09      	ldr	r2, [pc, #36]	@ (800b6b8 <vTaskSwitchContext+0xb8>)
 800b694:	6013      	str	r3, [r2, #0]
 800b696:	4a06      	ldr	r2, [pc, #24]	@ (800b6b0 <vTaskSwitchContext+0xb0>)
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6013      	str	r3, [r2, #0]
}
 800b69c:	bf00      	nop
 800b69e:	3714      	adds	r7, #20
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr
 800b6a8:	200011fc 	.word	0x200011fc
 800b6ac:	200011e8 	.word	0x200011e8
 800b6b0:	200011dc 	.word	0x200011dc
 800b6b4:	20000d04 	.word	0x20000d04
 800b6b8:	20000d00 	.word	0x20000d00

0800b6bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d10b      	bne.n	800b6e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6d0:	f383 8811 	msr	BASEPRI, r3
 800b6d4:	f3bf 8f6f 	isb	sy
 800b6d8:	f3bf 8f4f 	dsb	sy
 800b6dc:	60fb      	str	r3, [r7, #12]
}
 800b6de:	bf00      	nop
 800b6e0:	bf00      	nop
 800b6e2:	e7fd      	b.n	800b6e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b6e4:	4b07      	ldr	r3, [pc, #28]	@ (800b704 <vTaskPlaceOnEventList+0x48>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	3318      	adds	r3, #24
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f7fe fe70 	bl	800a3d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b6f2:	2101      	movs	r1, #1
 800b6f4:	6838      	ldr	r0, [r7, #0]
 800b6f6:	f000 fa81 	bl	800bbfc <prvAddCurrentTaskToDelayedList>
}
 800b6fa:	bf00      	nop
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	20000d00 	.word	0x20000d00

0800b708 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b086      	sub	sp, #24
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d10b      	bne.n	800b732 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b71a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	617b      	str	r3, [r7, #20]
}
 800b72c:	bf00      	nop
 800b72e:	bf00      	nop
 800b730:	e7fd      	b.n	800b72e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b732:	4b0a      	ldr	r3, [pc, #40]	@ (800b75c <vTaskPlaceOnEventListRestricted+0x54>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	3318      	adds	r3, #24
 800b738:	4619      	mov	r1, r3
 800b73a:	68f8      	ldr	r0, [r7, #12]
 800b73c:	f7fe fe25 	bl	800a38a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d002      	beq.n	800b74c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b746:	f04f 33ff 	mov.w	r3, #4294967295
 800b74a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b74c:	6879      	ldr	r1, [r7, #4]
 800b74e:	68b8      	ldr	r0, [r7, #8]
 800b750:	f000 fa54 	bl	800bbfc <prvAddCurrentTaskToDelayedList>
	}
 800b754:	bf00      	nop
 800b756:	3718      	adds	r7, #24
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	20000d00 	.word	0x20000d00

0800b760 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b086      	sub	sp, #24
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d10b      	bne.n	800b78e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b77a:	f383 8811 	msr	BASEPRI, r3
 800b77e:	f3bf 8f6f 	isb	sy
 800b782:	f3bf 8f4f 	dsb	sy
 800b786:	60fb      	str	r3, [r7, #12]
}
 800b788:	bf00      	nop
 800b78a:	bf00      	nop
 800b78c:	e7fd      	b.n	800b78a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	3318      	adds	r3, #24
 800b792:	4618      	mov	r0, r3
 800b794:	f7fe fe56 	bl	800a444 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b798:	4b1d      	ldr	r3, [pc, #116]	@ (800b810 <xTaskRemoveFromEventList+0xb0>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d11d      	bne.n	800b7dc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	3304      	adds	r3, #4
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7fe fe4d 	bl	800a444 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7ae:	4b19      	ldr	r3, [pc, #100]	@ (800b814 <xTaskRemoveFromEventList+0xb4>)
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d903      	bls.n	800b7be <xTaskRemoveFromEventList+0x5e>
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ba:	4a16      	ldr	r2, [pc, #88]	@ (800b814 <xTaskRemoveFromEventList+0xb4>)
 800b7bc:	6013      	str	r3, [r2, #0]
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	4413      	add	r3, r2
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	4a13      	ldr	r2, [pc, #76]	@ (800b818 <xTaskRemoveFromEventList+0xb8>)
 800b7cc:	441a      	add	r2, r3
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	3304      	adds	r3, #4
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	4610      	mov	r0, r2
 800b7d6:	f7fe fdd8 	bl	800a38a <vListInsertEnd>
 800b7da:	e005      	b.n	800b7e8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	3318      	adds	r3, #24
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	480e      	ldr	r0, [pc, #56]	@ (800b81c <xTaskRemoveFromEventList+0xbc>)
 800b7e4:	f7fe fdd1 	bl	800a38a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7ec:	4b0c      	ldr	r3, [pc, #48]	@ (800b820 <xTaskRemoveFromEventList+0xc0>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d905      	bls.n	800b802 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b7fa:	4b0a      	ldr	r3, [pc, #40]	@ (800b824 <xTaskRemoveFromEventList+0xc4>)
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	601a      	str	r2, [r3, #0]
 800b800:	e001      	b.n	800b806 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b802:	2300      	movs	r3, #0
 800b804:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b806:	697b      	ldr	r3, [r7, #20]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3718      	adds	r7, #24
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	200011fc 	.word	0x200011fc
 800b814:	200011dc 	.word	0x200011dc
 800b818:	20000d04 	.word	0x20000d04
 800b81c:	20001194 	.word	0x20001194
 800b820:	20000d00 	.word	0x20000d00
 800b824:	200011e8 	.word	0x200011e8

0800b828 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b830:	4b06      	ldr	r3, [pc, #24]	@ (800b84c <vTaskInternalSetTimeOutState+0x24>)
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b838:	4b05      	ldr	r3, [pc, #20]	@ (800b850 <vTaskInternalSetTimeOutState+0x28>)
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	605a      	str	r2, [r3, #4]
}
 800b840:	bf00      	nop
 800b842:	370c      	adds	r7, #12
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr
 800b84c:	200011ec 	.word	0x200011ec
 800b850:	200011d8 	.word	0x200011d8

0800b854 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b088      	sub	sp, #32
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d10b      	bne.n	800b87c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b868:	f383 8811 	msr	BASEPRI, r3
 800b86c:	f3bf 8f6f 	isb	sy
 800b870:	f3bf 8f4f 	dsb	sy
 800b874:	613b      	str	r3, [r7, #16]
}
 800b876:	bf00      	nop
 800b878:	bf00      	nop
 800b87a:	e7fd      	b.n	800b878 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d10b      	bne.n	800b89a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b886:	f383 8811 	msr	BASEPRI, r3
 800b88a:	f3bf 8f6f 	isb	sy
 800b88e:	f3bf 8f4f 	dsb	sy
 800b892:	60fb      	str	r3, [r7, #12]
}
 800b894:	bf00      	nop
 800b896:	bf00      	nop
 800b898:	e7fd      	b.n	800b896 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b89a:	f000 fe8d 	bl	800c5b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b89e:	4b1d      	ldr	r3, [pc, #116]	@ (800b914 <xTaskCheckForTimeOut+0xc0>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	69ba      	ldr	r2, [r7, #24]
 800b8aa:	1ad3      	subs	r3, r2, r3
 800b8ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b6:	d102      	bne.n	800b8be <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	61fb      	str	r3, [r7, #28]
 800b8bc:	e023      	b.n	800b906 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	4b15      	ldr	r3, [pc, #84]	@ (800b918 <xTaskCheckForTimeOut+0xc4>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d007      	beq.n	800b8da <xTaskCheckForTimeOut+0x86>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	69ba      	ldr	r2, [r7, #24]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d302      	bcc.n	800b8da <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b8d4:	2301      	movs	r3, #1
 800b8d6:	61fb      	str	r3, [r7, #28]
 800b8d8:	e015      	b.n	800b906 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	697a      	ldr	r2, [r7, #20]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d20b      	bcs.n	800b8fc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	1ad2      	subs	r2, r2, r3
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f7ff ff99 	bl	800b828 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	61fb      	str	r3, [r7, #28]
 800b8fa:	e004      	b.n	800b906 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	2200      	movs	r2, #0
 800b900:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b902:	2301      	movs	r3, #1
 800b904:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b906:	f000 fe89 	bl	800c61c <vPortExitCritical>

	return xReturn;
 800b90a:	69fb      	ldr	r3, [r7, #28]
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	3720      	adds	r7, #32
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	200011d8 	.word	0x200011d8
 800b918:	200011ec 	.word	0x200011ec

0800b91c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b91c:	b480      	push	{r7}
 800b91e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b920:	4b03      	ldr	r3, [pc, #12]	@ (800b930 <vTaskMissedYield+0x14>)
 800b922:	2201      	movs	r2, #1
 800b924:	601a      	str	r2, [r3, #0]
}
 800b926:	bf00      	nop
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr
 800b930:	200011e8 	.word	0x200011e8

0800b934 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b082      	sub	sp, #8
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b93c:	f000 f852 	bl	800b9e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b940:	4b06      	ldr	r3, [pc, #24]	@ (800b95c <prvIdleTask+0x28>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d9f9      	bls.n	800b93c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b948:	4b05      	ldr	r3, [pc, #20]	@ (800b960 <prvIdleTask+0x2c>)
 800b94a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b94e:	601a      	str	r2, [r3, #0]
 800b950:	f3bf 8f4f 	dsb	sy
 800b954:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b958:	e7f0      	b.n	800b93c <prvIdleTask+0x8>
 800b95a:	bf00      	nop
 800b95c:	20000d04 	.word	0x20000d04
 800b960:	e000ed04 	.word	0xe000ed04

0800b964 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b96a:	2300      	movs	r3, #0
 800b96c:	607b      	str	r3, [r7, #4]
 800b96e:	e00c      	b.n	800b98a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	4613      	mov	r3, r2
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	4413      	add	r3, r2
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	4a12      	ldr	r2, [pc, #72]	@ (800b9c4 <prvInitialiseTaskLists+0x60>)
 800b97c:	4413      	add	r3, r2
 800b97e:	4618      	mov	r0, r3
 800b980:	f7fe fcd6 	bl	800a330 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	3301      	adds	r3, #1
 800b988:	607b      	str	r3, [r7, #4]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2b37      	cmp	r3, #55	@ 0x37
 800b98e:	d9ef      	bls.n	800b970 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b990:	480d      	ldr	r0, [pc, #52]	@ (800b9c8 <prvInitialiseTaskLists+0x64>)
 800b992:	f7fe fccd 	bl	800a330 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b996:	480d      	ldr	r0, [pc, #52]	@ (800b9cc <prvInitialiseTaskLists+0x68>)
 800b998:	f7fe fcca 	bl	800a330 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b99c:	480c      	ldr	r0, [pc, #48]	@ (800b9d0 <prvInitialiseTaskLists+0x6c>)
 800b99e:	f7fe fcc7 	bl	800a330 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b9a2:	480c      	ldr	r0, [pc, #48]	@ (800b9d4 <prvInitialiseTaskLists+0x70>)
 800b9a4:	f7fe fcc4 	bl	800a330 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b9a8:	480b      	ldr	r0, [pc, #44]	@ (800b9d8 <prvInitialiseTaskLists+0x74>)
 800b9aa:	f7fe fcc1 	bl	800a330 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b9ae:	4b0b      	ldr	r3, [pc, #44]	@ (800b9dc <prvInitialiseTaskLists+0x78>)
 800b9b0:	4a05      	ldr	r2, [pc, #20]	@ (800b9c8 <prvInitialiseTaskLists+0x64>)
 800b9b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b9b4:	4b0a      	ldr	r3, [pc, #40]	@ (800b9e0 <prvInitialiseTaskLists+0x7c>)
 800b9b6:	4a05      	ldr	r2, [pc, #20]	@ (800b9cc <prvInitialiseTaskLists+0x68>)
 800b9b8:	601a      	str	r2, [r3, #0]
}
 800b9ba:	bf00      	nop
 800b9bc:	3708      	adds	r7, #8
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	20000d04 	.word	0x20000d04
 800b9c8:	20001164 	.word	0x20001164
 800b9cc:	20001178 	.word	0x20001178
 800b9d0:	20001194 	.word	0x20001194
 800b9d4:	200011a8 	.word	0x200011a8
 800b9d8:	200011c0 	.word	0x200011c0
 800b9dc:	2000118c 	.word	0x2000118c
 800b9e0:	20001190 	.word	0x20001190

0800b9e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b9ea:	e019      	b.n	800ba20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b9ec:	f000 fde4 	bl	800c5b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9f0:	4b10      	ldr	r3, [pc, #64]	@ (800ba34 <prvCheckTasksWaitingTermination+0x50>)
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	3304      	adds	r3, #4
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f7fe fd21 	bl	800a444 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ba02:	4b0d      	ldr	r3, [pc, #52]	@ (800ba38 <prvCheckTasksWaitingTermination+0x54>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	3b01      	subs	r3, #1
 800ba08:	4a0b      	ldr	r2, [pc, #44]	@ (800ba38 <prvCheckTasksWaitingTermination+0x54>)
 800ba0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ba0c:	4b0b      	ldr	r3, [pc, #44]	@ (800ba3c <prvCheckTasksWaitingTermination+0x58>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	3b01      	subs	r3, #1
 800ba12:	4a0a      	ldr	r2, [pc, #40]	@ (800ba3c <prvCheckTasksWaitingTermination+0x58>)
 800ba14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba16:	f000 fe01 	bl	800c61c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 f810 	bl	800ba40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba20:	4b06      	ldr	r3, [pc, #24]	@ (800ba3c <prvCheckTasksWaitingTermination+0x58>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1e1      	bne.n	800b9ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ba28:	bf00      	nop
 800ba2a:	bf00      	nop
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	200011a8 	.word	0x200011a8
 800ba38:	200011d4 	.word	0x200011d4
 800ba3c:	200011bc 	.word	0x200011bc

0800ba40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d108      	bne.n	800ba64 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba56:	4618      	mov	r0, r3
 800ba58:	f000 ff9e 	bl	800c998 <vPortFree>
				vPortFree( pxTCB );
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 ff9b 	bl	800c998 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ba62:	e019      	b.n	800ba98 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d103      	bne.n	800ba76 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 ff92 	bl	800c998 <vPortFree>
	}
 800ba74:	e010      	b.n	800ba98 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800ba7c:	2b02      	cmp	r3, #2
 800ba7e:	d00b      	beq.n	800ba98 <prvDeleteTCB+0x58>
	__asm volatile
 800ba80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba84:	f383 8811 	msr	BASEPRI, r3
 800ba88:	f3bf 8f6f 	isb	sy
 800ba8c:	f3bf 8f4f 	dsb	sy
 800ba90:	60fb      	str	r3, [r7, #12]
}
 800ba92:	bf00      	nop
 800ba94:	bf00      	nop
 800ba96:	e7fd      	b.n	800ba94 <prvDeleteTCB+0x54>
	}
 800ba98:	bf00      	nop
 800ba9a:	3710      	adds	r7, #16
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800baa0:	b480      	push	{r7}
 800baa2:	b083      	sub	sp, #12
 800baa4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800baa6:	4b0c      	ldr	r3, [pc, #48]	@ (800bad8 <prvResetNextTaskUnblockTime+0x38>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d104      	bne.n	800baba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bab0:	4b0a      	ldr	r3, [pc, #40]	@ (800badc <prvResetNextTaskUnblockTime+0x3c>)
 800bab2:	f04f 32ff 	mov.w	r2, #4294967295
 800bab6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bab8:	e008      	b.n	800bacc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baba:	4b07      	ldr	r3, [pc, #28]	@ (800bad8 <prvResetNextTaskUnblockTime+0x38>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	4a04      	ldr	r2, [pc, #16]	@ (800badc <prvResetNextTaskUnblockTime+0x3c>)
 800baca:	6013      	str	r3, [r2, #0]
}
 800bacc:	bf00      	nop
 800bace:	370c      	adds	r7, #12
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr
 800bad8:	2000118c 	.word	0x2000118c
 800badc:	200011f4 	.word	0x200011f4

0800bae0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bae0:	b480      	push	{r7}
 800bae2:	b083      	sub	sp, #12
 800bae4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bae6:	4b0b      	ldr	r3, [pc, #44]	@ (800bb14 <xTaskGetSchedulerState+0x34>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d102      	bne.n	800baf4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800baee:	2301      	movs	r3, #1
 800baf0:	607b      	str	r3, [r7, #4]
 800baf2:	e008      	b.n	800bb06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800baf4:	4b08      	ldr	r3, [pc, #32]	@ (800bb18 <xTaskGetSchedulerState+0x38>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d102      	bne.n	800bb02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bafc:	2302      	movs	r3, #2
 800bafe:	607b      	str	r3, [r7, #4]
 800bb00:	e001      	b.n	800bb06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bb02:	2300      	movs	r3, #0
 800bb04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb06:	687b      	ldr	r3, [r7, #4]
	}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	370c      	adds	r7, #12
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr
 800bb14:	200011e0 	.word	0x200011e0
 800bb18:	200011fc 	.word	0x200011fc

0800bb1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b086      	sub	sp, #24
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d058      	beq.n	800bbe4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb32:	4b2f      	ldr	r3, [pc, #188]	@ (800bbf0 <xTaskPriorityDisinherit+0xd4>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	693a      	ldr	r2, [r7, #16]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d00b      	beq.n	800bb54 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bb3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb40:	f383 8811 	msr	BASEPRI, r3
 800bb44:	f3bf 8f6f 	isb	sy
 800bb48:	f3bf 8f4f 	dsb	sy
 800bb4c:	60fb      	str	r3, [r7, #12]
}
 800bb4e:	bf00      	nop
 800bb50:	bf00      	nop
 800bb52:	e7fd      	b.n	800bb50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10b      	bne.n	800bb74 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bb5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb60:	f383 8811 	msr	BASEPRI, r3
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	60bb      	str	r3, [r7, #8]
}
 800bb6e:	bf00      	nop
 800bb70:	bf00      	nop
 800bb72:	e7fd      	b.n	800bb70 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb78:	1e5a      	subs	r2, r3, #1
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d02c      	beq.n	800bbe4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d128      	bne.n	800bbe4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	3304      	adds	r3, #4
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7fe fc54 	bl	800a444 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bba8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbb4:	4b0f      	ldr	r3, [pc, #60]	@ (800bbf4 <xTaskPriorityDisinherit+0xd8>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d903      	bls.n	800bbc4 <xTaskPriorityDisinherit+0xa8>
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbc0:	4a0c      	ldr	r2, [pc, #48]	@ (800bbf4 <xTaskPriorityDisinherit+0xd8>)
 800bbc2:	6013      	str	r3, [r2, #0]
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbc8:	4613      	mov	r3, r2
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	4413      	add	r3, r2
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	4a09      	ldr	r2, [pc, #36]	@ (800bbf8 <xTaskPriorityDisinherit+0xdc>)
 800bbd2:	441a      	add	r2, r3
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	3304      	adds	r3, #4
 800bbd8:	4619      	mov	r1, r3
 800bbda:	4610      	mov	r0, r2
 800bbdc:	f7fe fbd5 	bl	800a38a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bbe4:	697b      	ldr	r3, [r7, #20]
	}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3718      	adds	r7, #24
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	20000d00 	.word	0x20000d00
 800bbf4:	200011dc 	.word	0x200011dc
 800bbf8:	20000d04 	.word	0x20000d04

0800bbfc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc06:	4b21      	ldr	r3, [pc, #132]	@ (800bc8c <prvAddCurrentTaskToDelayedList+0x90>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc0c:	4b20      	ldr	r3, [pc, #128]	@ (800bc90 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	3304      	adds	r3, #4
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7fe fc16 	bl	800a444 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc1e:	d10a      	bne.n	800bc36 <prvAddCurrentTaskToDelayedList+0x3a>
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d007      	beq.n	800bc36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc26:	4b1a      	ldr	r3, [pc, #104]	@ (800bc90 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	3304      	adds	r3, #4
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	4819      	ldr	r0, [pc, #100]	@ (800bc94 <prvAddCurrentTaskToDelayedList+0x98>)
 800bc30:	f7fe fbab 	bl	800a38a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc34:	e026      	b.n	800bc84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc36:	68fa      	ldr	r2, [r7, #12]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc3e:	4b14      	ldr	r3, [pc, #80]	@ (800bc90 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	68ba      	ldr	r2, [r7, #8]
 800bc44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bc46:	68ba      	ldr	r2, [r7, #8]
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d209      	bcs.n	800bc62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc4e:	4b12      	ldr	r3, [pc, #72]	@ (800bc98 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	4b0f      	ldr	r3, [pc, #60]	@ (800bc90 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	3304      	adds	r3, #4
 800bc58:	4619      	mov	r1, r3
 800bc5a:	4610      	mov	r0, r2
 800bc5c:	f7fe fbb9 	bl	800a3d2 <vListInsert>
}
 800bc60:	e010      	b.n	800bc84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc62:	4b0e      	ldr	r3, [pc, #56]	@ (800bc9c <prvAddCurrentTaskToDelayedList+0xa0>)
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	4b0a      	ldr	r3, [pc, #40]	@ (800bc90 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	3304      	adds	r3, #4
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	4610      	mov	r0, r2
 800bc70:	f7fe fbaf 	bl	800a3d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc74:	4b0a      	ldr	r3, [pc, #40]	@ (800bca0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	68ba      	ldr	r2, [r7, #8]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d202      	bcs.n	800bc84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc7e:	4a08      	ldr	r2, [pc, #32]	@ (800bca0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	6013      	str	r3, [r2, #0]
}
 800bc84:	bf00      	nop
 800bc86:	3710      	adds	r7, #16
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	200011d8 	.word	0x200011d8
 800bc90:	20000d00 	.word	0x20000d00
 800bc94:	200011c0 	.word	0x200011c0
 800bc98:	20001190 	.word	0x20001190
 800bc9c:	2000118c 	.word	0x2000118c
 800bca0:	200011f4 	.word	0x200011f4

0800bca4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b08a      	sub	sp, #40	@ 0x28
 800bca8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bcae:	f000 fb13 	bl	800c2d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bcb2:	4b1d      	ldr	r3, [pc, #116]	@ (800bd28 <xTimerCreateTimerTask+0x84>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d021      	beq.n	800bcfe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bcc2:	1d3a      	adds	r2, r7, #4
 800bcc4:	f107 0108 	add.w	r1, r7, #8
 800bcc8:	f107 030c 	add.w	r3, r7, #12
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7fe fb15 	bl	800a2fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bcd2:	6879      	ldr	r1, [r7, #4]
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	9202      	str	r2, [sp, #8]
 800bcda:	9301      	str	r3, [sp, #4]
 800bcdc:	2302      	movs	r3, #2
 800bcde:	9300      	str	r3, [sp, #0]
 800bce0:	2300      	movs	r3, #0
 800bce2:	460a      	mov	r2, r1
 800bce4:	4911      	ldr	r1, [pc, #68]	@ (800bd2c <xTimerCreateTimerTask+0x88>)
 800bce6:	4812      	ldr	r0, [pc, #72]	@ (800bd30 <xTimerCreateTimerTask+0x8c>)
 800bce8:	f7ff f8d0 	bl	800ae8c <xTaskCreateStatic>
 800bcec:	4603      	mov	r3, r0
 800bcee:	4a11      	ldr	r2, [pc, #68]	@ (800bd34 <xTimerCreateTimerTask+0x90>)
 800bcf0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bcf2:	4b10      	ldr	r3, [pc, #64]	@ (800bd34 <xTimerCreateTimerTask+0x90>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d001      	beq.n	800bcfe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d10b      	bne.n	800bd1c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bd04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd08:	f383 8811 	msr	BASEPRI, r3
 800bd0c:	f3bf 8f6f 	isb	sy
 800bd10:	f3bf 8f4f 	dsb	sy
 800bd14:	613b      	str	r3, [r7, #16]
}
 800bd16:	bf00      	nop
 800bd18:	bf00      	nop
 800bd1a:	e7fd      	b.n	800bd18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bd1c:	697b      	ldr	r3, [r7, #20]
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3718      	adds	r7, #24
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	20001230 	.word	0x20001230
 800bd2c:	080104c0 	.word	0x080104c0
 800bd30:	0800be71 	.word	0x0800be71
 800bd34:	20001234 	.word	0x20001234

0800bd38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b08a      	sub	sp, #40	@ 0x28
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	607a      	str	r2, [r7, #4]
 800bd44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bd46:	2300      	movs	r3, #0
 800bd48:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d10b      	bne.n	800bd68 <xTimerGenericCommand+0x30>
	__asm volatile
 800bd50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd54:	f383 8811 	msr	BASEPRI, r3
 800bd58:	f3bf 8f6f 	isb	sy
 800bd5c:	f3bf 8f4f 	dsb	sy
 800bd60:	623b      	str	r3, [r7, #32]
}
 800bd62:	bf00      	nop
 800bd64:	bf00      	nop
 800bd66:	e7fd      	b.n	800bd64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bd68:	4b19      	ldr	r3, [pc, #100]	@ (800bdd0 <xTimerGenericCommand+0x98>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d02a      	beq.n	800bdc6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	2b05      	cmp	r3, #5
 800bd80:	dc18      	bgt.n	800bdb4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd82:	f7ff fead 	bl	800bae0 <xTaskGetSchedulerState>
 800bd86:	4603      	mov	r3, r0
 800bd88:	2b02      	cmp	r3, #2
 800bd8a:	d109      	bne.n	800bda0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd8c:	4b10      	ldr	r3, [pc, #64]	@ (800bdd0 <xTimerGenericCommand+0x98>)
 800bd8e:	6818      	ldr	r0, [r3, #0]
 800bd90:	f107 0110 	add.w	r1, r7, #16
 800bd94:	2300      	movs	r3, #0
 800bd96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd98:	f7fe fc88 	bl	800a6ac <xQueueGenericSend>
 800bd9c:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd9e:	e012      	b.n	800bdc6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bda0:	4b0b      	ldr	r3, [pc, #44]	@ (800bdd0 <xTimerGenericCommand+0x98>)
 800bda2:	6818      	ldr	r0, [r3, #0]
 800bda4:	f107 0110 	add.w	r1, r7, #16
 800bda8:	2300      	movs	r3, #0
 800bdaa:	2200      	movs	r2, #0
 800bdac:	f7fe fc7e 	bl	800a6ac <xQueueGenericSend>
 800bdb0:	6278      	str	r0, [r7, #36]	@ 0x24
 800bdb2:	e008      	b.n	800bdc6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bdb4:	4b06      	ldr	r3, [pc, #24]	@ (800bdd0 <xTimerGenericCommand+0x98>)
 800bdb6:	6818      	ldr	r0, [r3, #0]
 800bdb8:	f107 0110 	add.w	r1, r7, #16
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	683a      	ldr	r2, [r7, #0]
 800bdc0:	f7fe fd76 	bl	800a8b0 <xQueueGenericSendFromISR>
 800bdc4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bdc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3728      	adds	r7, #40	@ 0x28
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}
 800bdd0:	20001230 	.word	0x20001230

0800bdd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b088      	sub	sp, #32
 800bdd8:	af02      	add	r7, sp, #8
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdde:	4b23      	ldr	r3, [pc, #140]	@ (800be6c <prvProcessExpiredTimer+0x98>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	68db      	ldr	r3, [r3, #12]
 800bde6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	3304      	adds	r3, #4
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7fe fb29 	bl	800a444 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdf8:	f003 0304 	and.w	r3, r3, #4
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d023      	beq.n	800be48 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	699a      	ldr	r2, [r3, #24]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	18d1      	adds	r1, r2, r3
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	683a      	ldr	r2, [r7, #0]
 800be0c:	6978      	ldr	r0, [r7, #20]
 800be0e:	f000 f8d5 	bl	800bfbc <prvInsertTimerInActiveList>
 800be12:	4603      	mov	r3, r0
 800be14:	2b00      	cmp	r3, #0
 800be16:	d020      	beq.n	800be5a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be18:	2300      	movs	r3, #0
 800be1a:	9300      	str	r3, [sp, #0]
 800be1c:	2300      	movs	r3, #0
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	2100      	movs	r1, #0
 800be22:	6978      	ldr	r0, [r7, #20]
 800be24:	f7ff ff88 	bl	800bd38 <xTimerGenericCommand>
 800be28:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d114      	bne.n	800be5a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800be30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be34:	f383 8811 	msr	BASEPRI, r3
 800be38:	f3bf 8f6f 	isb	sy
 800be3c:	f3bf 8f4f 	dsb	sy
 800be40:	60fb      	str	r3, [r7, #12]
}
 800be42:	bf00      	nop
 800be44:	bf00      	nop
 800be46:	e7fd      	b.n	800be44 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be4e:	f023 0301 	bic.w	r3, r3, #1
 800be52:	b2da      	uxtb	r2, r3
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	6a1b      	ldr	r3, [r3, #32]
 800be5e:	6978      	ldr	r0, [r7, #20]
 800be60:	4798      	blx	r3
}
 800be62:	bf00      	nop
 800be64:	3718      	adds	r7, #24
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	20001228 	.word	0x20001228

0800be70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be78:	f107 0308 	add.w	r3, r7, #8
 800be7c:	4618      	mov	r0, r3
 800be7e:	f000 f859 	bl	800bf34 <prvGetNextExpireTime>
 800be82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	4619      	mov	r1, r3
 800be88:	68f8      	ldr	r0, [r7, #12]
 800be8a:	f000 f805 	bl	800be98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be8e:	f000 f8d7 	bl	800c040 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be92:	bf00      	nop
 800be94:	e7f0      	b.n	800be78 <prvTimerTask+0x8>
	...

0800be98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bea2:	f7ff fa37 	bl	800b314 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bea6:	f107 0308 	add.w	r3, r7, #8
 800beaa:	4618      	mov	r0, r3
 800beac:	f000 f866 	bl	800bf7c <prvSampleTimeNow>
 800beb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d130      	bne.n	800bf1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d10a      	bne.n	800bed4 <prvProcessTimerOrBlockTask+0x3c>
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d806      	bhi.n	800bed4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bec6:	f7ff fa33 	bl	800b330 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800beca:	68f9      	ldr	r1, [r7, #12]
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f7ff ff81 	bl	800bdd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bed2:	e024      	b.n	800bf1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d008      	beq.n	800beec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800beda:	4b13      	ldr	r3, [pc, #76]	@ (800bf28 <prvProcessTimerOrBlockTask+0x90>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d101      	bne.n	800bee8 <prvProcessTimerOrBlockTask+0x50>
 800bee4:	2301      	movs	r3, #1
 800bee6:	e000      	b.n	800beea <prvProcessTimerOrBlockTask+0x52>
 800bee8:	2300      	movs	r3, #0
 800beea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800beec:	4b0f      	ldr	r3, [pc, #60]	@ (800bf2c <prvProcessTimerOrBlockTask+0x94>)
 800beee:	6818      	ldr	r0, [r3, #0]
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	1ad3      	subs	r3, r2, r3
 800bef6:	683a      	ldr	r2, [r7, #0]
 800bef8:	4619      	mov	r1, r3
 800befa:	f7fe ff93 	bl	800ae24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800befe:	f7ff fa17 	bl	800b330 <xTaskResumeAll>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d10a      	bne.n	800bf1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bf08:	4b09      	ldr	r3, [pc, #36]	@ (800bf30 <prvProcessTimerOrBlockTask+0x98>)
 800bf0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf0e:	601a      	str	r2, [r3, #0]
 800bf10:	f3bf 8f4f 	dsb	sy
 800bf14:	f3bf 8f6f 	isb	sy
}
 800bf18:	e001      	b.n	800bf1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bf1a:	f7ff fa09 	bl	800b330 <xTaskResumeAll>
}
 800bf1e:	bf00      	nop
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	2000122c 	.word	0x2000122c
 800bf2c:	20001230 	.word	0x20001230
 800bf30:	e000ed04 	.word	0xe000ed04

0800bf34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bf34:	b480      	push	{r7}
 800bf36:	b085      	sub	sp, #20
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bf3c:	4b0e      	ldr	r3, [pc, #56]	@ (800bf78 <prvGetNextExpireTime+0x44>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d101      	bne.n	800bf4a <prvGetNextExpireTime+0x16>
 800bf46:	2201      	movs	r2, #1
 800bf48:	e000      	b.n	800bf4c <prvGetNextExpireTime+0x18>
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d105      	bne.n	800bf64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf58:	4b07      	ldr	r3, [pc, #28]	@ (800bf78 <prvGetNextExpireTime+0x44>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	60fb      	str	r3, [r7, #12]
 800bf62:	e001      	b.n	800bf68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bf64:	2300      	movs	r3, #0
 800bf66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bf68:	68fb      	ldr	r3, [r7, #12]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3714      	adds	r7, #20
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr
 800bf76:	bf00      	nop
 800bf78:	20001228 	.word	0x20001228

0800bf7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf84:	f7ff fa72 	bl	800b46c <xTaskGetTickCount>
 800bf88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf8a:	4b0b      	ldr	r3, [pc, #44]	@ (800bfb8 <prvSampleTimeNow+0x3c>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	68fa      	ldr	r2, [r7, #12]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d205      	bcs.n	800bfa0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf94:	f000 f93a 	bl	800c20c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	601a      	str	r2, [r3, #0]
 800bf9e:	e002      	b.n	800bfa6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bfa6:	4a04      	ldr	r2, [pc, #16]	@ (800bfb8 <prvSampleTimeNow+0x3c>)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bfac:	68fb      	ldr	r3, [r7, #12]
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3710      	adds	r7, #16
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	20001238 	.word	0x20001238

0800bfbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b086      	sub	sp, #24
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	60f8      	str	r0, [r7, #12]
 800bfc4:	60b9      	str	r1, [r7, #8]
 800bfc6:	607a      	str	r2, [r7, #4]
 800bfc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	68ba      	ldr	r2, [r7, #8]
 800bfd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	68fa      	ldr	r2, [r7, #12]
 800bfd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bfda:	68ba      	ldr	r2, [r7, #8]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d812      	bhi.n	800c008 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	1ad2      	subs	r2, r2, r3
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	699b      	ldr	r3, [r3, #24]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d302      	bcc.n	800bff6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bff0:	2301      	movs	r3, #1
 800bff2:	617b      	str	r3, [r7, #20]
 800bff4:	e01b      	b.n	800c02e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bff6:	4b10      	ldr	r3, [pc, #64]	@ (800c038 <prvInsertTimerInActiveList+0x7c>)
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	3304      	adds	r3, #4
 800bffe:	4619      	mov	r1, r3
 800c000:	4610      	mov	r0, r2
 800c002:	f7fe f9e6 	bl	800a3d2 <vListInsert>
 800c006:	e012      	b.n	800c02e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d206      	bcs.n	800c01e <prvInsertTimerInActiveList+0x62>
 800c010:	68ba      	ldr	r2, [r7, #8]
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	429a      	cmp	r2, r3
 800c016:	d302      	bcc.n	800c01e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c018:	2301      	movs	r3, #1
 800c01a:	617b      	str	r3, [r7, #20]
 800c01c:	e007      	b.n	800c02e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c01e:	4b07      	ldr	r3, [pc, #28]	@ (800c03c <prvInsertTimerInActiveList+0x80>)
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	3304      	adds	r3, #4
 800c026:	4619      	mov	r1, r3
 800c028:	4610      	mov	r0, r2
 800c02a:	f7fe f9d2 	bl	800a3d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c02e:	697b      	ldr	r3, [r7, #20]
}
 800c030:	4618      	mov	r0, r3
 800c032:	3718      	adds	r7, #24
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	2000122c 	.word	0x2000122c
 800c03c:	20001228 	.word	0x20001228

0800c040 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b08e      	sub	sp, #56	@ 0x38
 800c044:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c046:	e0ce      	b.n	800c1e6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	da19      	bge.n	800c082 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c04e:	1d3b      	adds	r3, r7, #4
 800c050:	3304      	adds	r3, #4
 800c052:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c056:	2b00      	cmp	r3, #0
 800c058:	d10b      	bne.n	800c072 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c05e:	f383 8811 	msr	BASEPRI, r3
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	61fb      	str	r3, [r7, #28]
}
 800c06c:	bf00      	nop
 800c06e:	bf00      	nop
 800c070:	e7fd      	b.n	800c06e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c078:	6850      	ldr	r0, [r2, #4]
 800c07a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c07c:	6892      	ldr	r2, [r2, #8]
 800c07e:	4611      	mov	r1, r2
 800c080:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2b00      	cmp	r3, #0
 800c086:	f2c0 80ae 	blt.w	800c1e6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c090:	695b      	ldr	r3, [r3, #20]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d004      	beq.n	800c0a0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c098:	3304      	adds	r3, #4
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7fe f9d2 	bl	800a444 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c0a0:	463b      	mov	r3, r7
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7ff ff6a 	bl	800bf7c <prvSampleTimeNow>
 800c0a8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2b09      	cmp	r3, #9
 800c0ae:	f200 8097 	bhi.w	800c1e0 <prvProcessReceivedCommands+0x1a0>
 800c0b2:	a201      	add	r2, pc, #4	@ (adr r2, 800c0b8 <prvProcessReceivedCommands+0x78>)
 800c0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b8:	0800c0e1 	.word	0x0800c0e1
 800c0bc:	0800c0e1 	.word	0x0800c0e1
 800c0c0:	0800c0e1 	.word	0x0800c0e1
 800c0c4:	0800c157 	.word	0x0800c157
 800c0c8:	0800c16b 	.word	0x0800c16b
 800c0cc:	0800c1b7 	.word	0x0800c1b7
 800c0d0:	0800c0e1 	.word	0x0800c0e1
 800c0d4:	0800c0e1 	.word	0x0800c0e1
 800c0d8:	0800c157 	.word	0x0800c157
 800c0dc:	0800c16b 	.word	0x0800c16b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0e6:	f043 0301 	orr.w	r3, r3, #1
 800c0ea:	b2da      	uxtb	r2, r3
 800c0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c0f2:	68ba      	ldr	r2, [r7, #8]
 800c0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0f6:	699b      	ldr	r3, [r3, #24]
 800c0f8:	18d1      	adds	r1, r2, r3
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c100:	f7ff ff5c 	bl	800bfbc <prvInsertTimerInActiveList>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d06c      	beq.n	800c1e4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c10a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c10c:	6a1b      	ldr	r3, [r3, #32]
 800c10e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c110:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c114:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c118:	f003 0304 	and.w	r3, r3, #4
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d061      	beq.n	800c1e4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c120:	68ba      	ldr	r2, [r7, #8]
 800c122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c124:	699b      	ldr	r3, [r3, #24]
 800c126:	441a      	add	r2, r3
 800c128:	2300      	movs	r3, #0
 800c12a:	9300      	str	r3, [sp, #0]
 800c12c:	2300      	movs	r3, #0
 800c12e:	2100      	movs	r1, #0
 800c130:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c132:	f7ff fe01 	bl	800bd38 <xTimerGenericCommand>
 800c136:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c138:	6a3b      	ldr	r3, [r7, #32]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d152      	bne.n	800c1e4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c142:	f383 8811 	msr	BASEPRI, r3
 800c146:	f3bf 8f6f 	isb	sy
 800c14a:	f3bf 8f4f 	dsb	sy
 800c14e:	61bb      	str	r3, [r7, #24]
}
 800c150:	bf00      	nop
 800c152:	bf00      	nop
 800c154:	e7fd      	b.n	800c152 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c158:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c15c:	f023 0301 	bic.w	r3, r3, #1
 800c160:	b2da      	uxtb	r2, r3
 800c162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c164:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c168:	e03d      	b.n	800c1e6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c16c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c170:	f043 0301 	orr.w	r3, r3, #1
 800c174:	b2da      	uxtb	r2, r3
 800c176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c178:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c17c:	68ba      	ldr	r2, [r7, #8]
 800c17e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c180:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c184:	699b      	ldr	r3, [r3, #24]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d10b      	bne.n	800c1a2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c18a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c18e:	f383 8811 	msr	BASEPRI, r3
 800c192:	f3bf 8f6f 	isb	sy
 800c196:	f3bf 8f4f 	dsb	sy
 800c19a:	617b      	str	r3, [r7, #20]
}
 800c19c:	bf00      	nop
 800c19e:	bf00      	nop
 800c1a0:	e7fd      	b.n	800c19e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a4:	699a      	ldr	r2, [r3, #24]
 800c1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a8:	18d1      	adds	r1, r2, r3
 800c1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1b0:	f7ff ff04 	bl	800bfbc <prvInsertTimerInActiveList>
					break;
 800c1b4:	e017      	b.n	800c1e6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1bc:	f003 0302 	and.w	r3, r3, #2
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d103      	bne.n	800c1cc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c1c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1c6:	f000 fbe7 	bl	800c998 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c1ca:	e00c      	b.n	800c1e6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1d2:	f023 0301 	bic.w	r3, r3, #1
 800c1d6:	b2da      	uxtb	r2, r3
 800c1d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c1de:	e002      	b.n	800c1e6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c1e0:	bf00      	nop
 800c1e2:	e000      	b.n	800c1e6 <prvProcessReceivedCommands+0x1a6>
					break;
 800c1e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1e6:	4b08      	ldr	r3, [pc, #32]	@ (800c208 <prvProcessReceivedCommands+0x1c8>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	1d39      	adds	r1, r7, #4
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7fe fbfc 	bl	800a9ec <xQueueReceive>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	f47f af26 	bne.w	800c048 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c1fc:	bf00      	nop
 800c1fe:	bf00      	nop
 800c200:	3730      	adds	r7, #48	@ 0x30
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	20001230 	.word	0x20001230

0800c20c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b088      	sub	sp, #32
 800c210:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c212:	e049      	b.n	800c2a8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c214:	4b2e      	ldr	r3, [pc, #184]	@ (800c2d0 <prvSwitchTimerLists+0xc4>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c21e:	4b2c      	ldr	r3, [pc, #176]	@ (800c2d0 <prvSwitchTimerLists+0xc4>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	3304      	adds	r3, #4
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7fe f909 	bl	800a444 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	6a1b      	ldr	r3, [r3, #32]
 800c236:	68f8      	ldr	r0, [r7, #12]
 800c238:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c240:	f003 0304 	and.w	r3, r3, #4
 800c244:	2b00      	cmp	r3, #0
 800c246:	d02f      	beq.n	800c2a8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	699b      	ldr	r3, [r3, #24]
 800c24c:	693a      	ldr	r2, [r7, #16]
 800c24e:	4413      	add	r3, r2
 800c250:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c252:	68ba      	ldr	r2, [r7, #8]
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	429a      	cmp	r2, r3
 800c258:	d90e      	bls.n	800c278 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	68ba      	ldr	r2, [r7, #8]
 800c25e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	68fa      	ldr	r2, [r7, #12]
 800c264:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c266:	4b1a      	ldr	r3, [pc, #104]	@ (800c2d0 <prvSwitchTimerLists+0xc4>)
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	3304      	adds	r3, #4
 800c26e:	4619      	mov	r1, r3
 800c270:	4610      	mov	r0, r2
 800c272:	f7fe f8ae 	bl	800a3d2 <vListInsert>
 800c276:	e017      	b.n	800c2a8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c278:	2300      	movs	r3, #0
 800c27a:	9300      	str	r3, [sp, #0]
 800c27c:	2300      	movs	r3, #0
 800c27e:	693a      	ldr	r2, [r7, #16]
 800c280:	2100      	movs	r1, #0
 800c282:	68f8      	ldr	r0, [r7, #12]
 800c284:	f7ff fd58 	bl	800bd38 <xTimerGenericCommand>
 800c288:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d10b      	bne.n	800c2a8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c294:	f383 8811 	msr	BASEPRI, r3
 800c298:	f3bf 8f6f 	isb	sy
 800c29c:	f3bf 8f4f 	dsb	sy
 800c2a0:	603b      	str	r3, [r7, #0]
}
 800c2a2:	bf00      	nop
 800c2a4:	bf00      	nop
 800c2a6:	e7fd      	b.n	800c2a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c2a8:	4b09      	ldr	r3, [pc, #36]	@ (800c2d0 <prvSwitchTimerLists+0xc4>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d1b0      	bne.n	800c214 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c2b2:	4b07      	ldr	r3, [pc, #28]	@ (800c2d0 <prvSwitchTimerLists+0xc4>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c2b8:	4b06      	ldr	r3, [pc, #24]	@ (800c2d4 <prvSwitchTimerLists+0xc8>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a04      	ldr	r2, [pc, #16]	@ (800c2d0 <prvSwitchTimerLists+0xc4>)
 800c2be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c2c0:	4a04      	ldr	r2, [pc, #16]	@ (800c2d4 <prvSwitchTimerLists+0xc8>)
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	6013      	str	r3, [r2, #0]
}
 800c2c6:	bf00      	nop
 800c2c8:	3718      	adds	r7, #24
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	20001228 	.word	0x20001228
 800c2d4:	2000122c 	.word	0x2000122c

0800c2d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c2de:	f000 f96b 	bl	800c5b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c2e2:	4b15      	ldr	r3, [pc, #84]	@ (800c338 <prvCheckForValidListAndQueue+0x60>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d120      	bne.n	800c32c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c2ea:	4814      	ldr	r0, [pc, #80]	@ (800c33c <prvCheckForValidListAndQueue+0x64>)
 800c2ec:	f7fe f820 	bl	800a330 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c2f0:	4813      	ldr	r0, [pc, #76]	@ (800c340 <prvCheckForValidListAndQueue+0x68>)
 800c2f2:	f7fe f81d 	bl	800a330 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c2f6:	4b13      	ldr	r3, [pc, #76]	@ (800c344 <prvCheckForValidListAndQueue+0x6c>)
 800c2f8:	4a10      	ldr	r2, [pc, #64]	@ (800c33c <prvCheckForValidListAndQueue+0x64>)
 800c2fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c2fc:	4b12      	ldr	r3, [pc, #72]	@ (800c348 <prvCheckForValidListAndQueue+0x70>)
 800c2fe:	4a10      	ldr	r2, [pc, #64]	@ (800c340 <prvCheckForValidListAndQueue+0x68>)
 800c300:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c302:	2300      	movs	r3, #0
 800c304:	9300      	str	r3, [sp, #0]
 800c306:	4b11      	ldr	r3, [pc, #68]	@ (800c34c <prvCheckForValidListAndQueue+0x74>)
 800c308:	4a11      	ldr	r2, [pc, #68]	@ (800c350 <prvCheckForValidListAndQueue+0x78>)
 800c30a:	2110      	movs	r1, #16
 800c30c:	200a      	movs	r0, #10
 800c30e:	f7fe f92d 	bl	800a56c <xQueueGenericCreateStatic>
 800c312:	4603      	mov	r3, r0
 800c314:	4a08      	ldr	r2, [pc, #32]	@ (800c338 <prvCheckForValidListAndQueue+0x60>)
 800c316:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c318:	4b07      	ldr	r3, [pc, #28]	@ (800c338 <prvCheckForValidListAndQueue+0x60>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d005      	beq.n	800c32c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c320:	4b05      	ldr	r3, [pc, #20]	@ (800c338 <prvCheckForValidListAndQueue+0x60>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	490b      	ldr	r1, [pc, #44]	@ (800c354 <prvCheckForValidListAndQueue+0x7c>)
 800c326:	4618      	mov	r0, r3
 800c328:	f7fe fd52 	bl	800add0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c32c:	f000 f976 	bl	800c61c <vPortExitCritical>
}
 800c330:	bf00      	nop
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	20001230 	.word	0x20001230
 800c33c:	20001200 	.word	0x20001200
 800c340:	20001214 	.word	0x20001214
 800c344:	20001228 	.word	0x20001228
 800c348:	2000122c 	.word	0x2000122c
 800c34c:	200012dc 	.word	0x200012dc
 800c350:	2000123c 	.word	0x2000123c
 800c354:	080104c8 	.word	0x080104c8

0800c358 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c358:	b480      	push	{r7}
 800c35a:	b085      	sub	sp, #20
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	60f8      	str	r0, [r7, #12]
 800c360:	60b9      	str	r1, [r7, #8]
 800c362:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	3b04      	subs	r3, #4
 800c368:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	3b04      	subs	r3, #4
 800c376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	f023 0201 	bic.w	r2, r3, #1
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	3b04      	subs	r3, #4
 800c386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c388:	4a0c      	ldr	r2, [pc, #48]	@ (800c3bc <pxPortInitialiseStack+0x64>)
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	3b14      	subs	r3, #20
 800c392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	3b04      	subs	r3, #4
 800c39e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f06f 0202 	mvn.w	r2, #2
 800c3a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	3b20      	subs	r3, #32
 800c3ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3714      	adds	r7, #20
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr
 800c3bc:	0800c3c1 	.word	0x0800c3c1

0800c3c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b085      	sub	sp, #20
 800c3c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c3ca:	4b13      	ldr	r3, [pc, #76]	@ (800c418 <prvTaskExitError+0x58>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3d2:	d00b      	beq.n	800c3ec <prvTaskExitError+0x2c>
	__asm volatile
 800c3d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3d8:	f383 8811 	msr	BASEPRI, r3
 800c3dc:	f3bf 8f6f 	isb	sy
 800c3e0:	f3bf 8f4f 	dsb	sy
 800c3e4:	60fb      	str	r3, [r7, #12]
}
 800c3e6:	bf00      	nop
 800c3e8:	bf00      	nop
 800c3ea:	e7fd      	b.n	800c3e8 <prvTaskExitError+0x28>
	__asm volatile
 800c3ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f0:	f383 8811 	msr	BASEPRI, r3
 800c3f4:	f3bf 8f6f 	isb	sy
 800c3f8:	f3bf 8f4f 	dsb	sy
 800c3fc:	60bb      	str	r3, [r7, #8]
}
 800c3fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c400:	bf00      	nop
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d0fc      	beq.n	800c402 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c408:	bf00      	nop
 800c40a:	bf00      	nop
 800c40c:	3714      	adds	r7, #20
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr
 800c416:	bf00      	nop
 800c418:	20000030 	.word	0x20000030
 800c41c:	00000000 	.word	0x00000000

0800c420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c420:	4b07      	ldr	r3, [pc, #28]	@ (800c440 <pxCurrentTCBConst2>)
 800c422:	6819      	ldr	r1, [r3, #0]
 800c424:	6808      	ldr	r0, [r1, #0]
 800c426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c42a:	f380 8809 	msr	PSP, r0
 800c42e:	f3bf 8f6f 	isb	sy
 800c432:	f04f 0000 	mov.w	r0, #0
 800c436:	f380 8811 	msr	BASEPRI, r0
 800c43a:	4770      	bx	lr
 800c43c:	f3af 8000 	nop.w

0800c440 <pxCurrentTCBConst2>:
 800c440:	20000d00 	.word	0x20000d00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c444:	bf00      	nop
 800c446:	bf00      	nop

0800c448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c448:	4808      	ldr	r0, [pc, #32]	@ (800c46c <prvPortStartFirstTask+0x24>)
 800c44a:	6800      	ldr	r0, [r0, #0]
 800c44c:	6800      	ldr	r0, [r0, #0]
 800c44e:	f380 8808 	msr	MSP, r0
 800c452:	f04f 0000 	mov.w	r0, #0
 800c456:	f380 8814 	msr	CONTROL, r0
 800c45a:	b662      	cpsie	i
 800c45c:	b661      	cpsie	f
 800c45e:	f3bf 8f4f 	dsb	sy
 800c462:	f3bf 8f6f 	isb	sy
 800c466:	df00      	svc	0
 800c468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c46a:	bf00      	nop
 800c46c:	e000ed08 	.word	0xe000ed08

0800c470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b086      	sub	sp, #24
 800c474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c476:	4b47      	ldr	r3, [pc, #284]	@ (800c594 <xPortStartScheduler+0x124>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a47      	ldr	r2, [pc, #284]	@ (800c598 <xPortStartScheduler+0x128>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d10b      	bne.n	800c498 <xPortStartScheduler+0x28>
	__asm volatile
 800c480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c484:	f383 8811 	msr	BASEPRI, r3
 800c488:	f3bf 8f6f 	isb	sy
 800c48c:	f3bf 8f4f 	dsb	sy
 800c490:	613b      	str	r3, [r7, #16]
}
 800c492:	bf00      	nop
 800c494:	bf00      	nop
 800c496:	e7fd      	b.n	800c494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c498:	4b3e      	ldr	r3, [pc, #248]	@ (800c594 <xPortStartScheduler+0x124>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a3f      	ldr	r2, [pc, #252]	@ (800c59c <xPortStartScheduler+0x12c>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d10b      	bne.n	800c4ba <xPortStartScheduler+0x4a>
	__asm volatile
 800c4a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4a6:	f383 8811 	msr	BASEPRI, r3
 800c4aa:	f3bf 8f6f 	isb	sy
 800c4ae:	f3bf 8f4f 	dsb	sy
 800c4b2:	60fb      	str	r3, [r7, #12]
}
 800c4b4:	bf00      	nop
 800c4b6:	bf00      	nop
 800c4b8:	e7fd      	b.n	800c4b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c4ba:	4b39      	ldr	r3, [pc, #228]	@ (800c5a0 <xPortStartScheduler+0x130>)
 800c4bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	b2db      	uxtb	r3, r3
 800c4c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	22ff      	movs	r2, #255	@ 0xff
 800c4ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	b2db      	uxtb	r3, r3
 800c4d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c4d4:	78fb      	ldrb	r3, [r7, #3]
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c4dc:	b2da      	uxtb	r2, r3
 800c4de:	4b31      	ldr	r3, [pc, #196]	@ (800c5a4 <xPortStartScheduler+0x134>)
 800c4e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c4e2:	4b31      	ldr	r3, [pc, #196]	@ (800c5a8 <xPortStartScheduler+0x138>)
 800c4e4:	2207      	movs	r2, #7
 800c4e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4e8:	e009      	b.n	800c4fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c4ea:	4b2f      	ldr	r3, [pc, #188]	@ (800c5a8 <xPortStartScheduler+0x138>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	3b01      	subs	r3, #1
 800c4f0:	4a2d      	ldr	r2, [pc, #180]	@ (800c5a8 <xPortStartScheduler+0x138>)
 800c4f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c4f4:	78fb      	ldrb	r3, [r7, #3]
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	005b      	lsls	r3, r3, #1
 800c4fa:	b2db      	uxtb	r3, r3
 800c4fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4fe:	78fb      	ldrb	r3, [r7, #3]
 800c500:	b2db      	uxtb	r3, r3
 800c502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c506:	2b80      	cmp	r3, #128	@ 0x80
 800c508:	d0ef      	beq.n	800c4ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c50a:	4b27      	ldr	r3, [pc, #156]	@ (800c5a8 <xPortStartScheduler+0x138>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f1c3 0307 	rsb	r3, r3, #7
 800c512:	2b04      	cmp	r3, #4
 800c514:	d00b      	beq.n	800c52e <xPortStartScheduler+0xbe>
	__asm volatile
 800c516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c51a:	f383 8811 	msr	BASEPRI, r3
 800c51e:	f3bf 8f6f 	isb	sy
 800c522:	f3bf 8f4f 	dsb	sy
 800c526:	60bb      	str	r3, [r7, #8]
}
 800c528:	bf00      	nop
 800c52a:	bf00      	nop
 800c52c:	e7fd      	b.n	800c52a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c52e:	4b1e      	ldr	r3, [pc, #120]	@ (800c5a8 <xPortStartScheduler+0x138>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	021b      	lsls	r3, r3, #8
 800c534:	4a1c      	ldr	r2, [pc, #112]	@ (800c5a8 <xPortStartScheduler+0x138>)
 800c536:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c538:	4b1b      	ldr	r3, [pc, #108]	@ (800c5a8 <xPortStartScheduler+0x138>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c540:	4a19      	ldr	r2, [pc, #100]	@ (800c5a8 <xPortStartScheduler+0x138>)
 800c542:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	b2da      	uxtb	r2, r3
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c54c:	4b17      	ldr	r3, [pc, #92]	@ (800c5ac <xPortStartScheduler+0x13c>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a16      	ldr	r2, [pc, #88]	@ (800c5ac <xPortStartScheduler+0x13c>)
 800c552:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c556:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c558:	4b14      	ldr	r3, [pc, #80]	@ (800c5ac <xPortStartScheduler+0x13c>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a13      	ldr	r2, [pc, #76]	@ (800c5ac <xPortStartScheduler+0x13c>)
 800c55e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c562:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c564:	f000 f8da 	bl	800c71c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c568:	4b11      	ldr	r3, [pc, #68]	@ (800c5b0 <xPortStartScheduler+0x140>)
 800c56a:	2200      	movs	r2, #0
 800c56c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c56e:	f000 f8f9 	bl	800c764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c572:	4b10      	ldr	r3, [pc, #64]	@ (800c5b4 <xPortStartScheduler+0x144>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4a0f      	ldr	r2, [pc, #60]	@ (800c5b4 <xPortStartScheduler+0x144>)
 800c578:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c57c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c57e:	f7ff ff63 	bl	800c448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c582:	f7ff f83d 	bl	800b600 <vTaskSwitchContext>
	prvTaskExitError();
 800c586:	f7ff ff1b 	bl	800c3c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c58a:	2300      	movs	r3, #0
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3718      	adds	r7, #24
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	e000ed00 	.word	0xe000ed00
 800c598:	410fc271 	.word	0x410fc271
 800c59c:	410fc270 	.word	0x410fc270
 800c5a0:	e000e400 	.word	0xe000e400
 800c5a4:	2000132c 	.word	0x2000132c
 800c5a8:	20001330 	.word	0x20001330
 800c5ac:	e000ed20 	.word	0xe000ed20
 800c5b0:	20000030 	.word	0x20000030
 800c5b4:	e000ef34 	.word	0xe000ef34

0800c5b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5c2:	f383 8811 	msr	BASEPRI, r3
 800c5c6:	f3bf 8f6f 	isb	sy
 800c5ca:	f3bf 8f4f 	dsb	sy
 800c5ce:	607b      	str	r3, [r7, #4]
}
 800c5d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c5d2:	4b10      	ldr	r3, [pc, #64]	@ (800c614 <vPortEnterCritical+0x5c>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	4a0e      	ldr	r2, [pc, #56]	@ (800c614 <vPortEnterCritical+0x5c>)
 800c5da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c5dc:	4b0d      	ldr	r3, [pc, #52]	@ (800c614 <vPortEnterCritical+0x5c>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d110      	bne.n	800c606 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c5e4:	4b0c      	ldr	r3, [pc, #48]	@ (800c618 <vPortEnterCritical+0x60>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d00b      	beq.n	800c606 <vPortEnterCritical+0x4e>
	__asm volatile
 800c5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5f2:	f383 8811 	msr	BASEPRI, r3
 800c5f6:	f3bf 8f6f 	isb	sy
 800c5fa:	f3bf 8f4f 	dsb	sy
 800c5fe:	603b      	str	r3, [r7, #0]
}
 800c600:	bf00      	nop
 800c602:	bf00      	nop
 800c604:	e7fd      	b.n	800c602 <vPortEnterCritical+0x4a>
	}
}
 800c606:	bf00      	nop
 800c608:	370c      	adds	r7, #12
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	20000030 	.word	0x20000030
 800c618:	e000ed04 	.word	0xe000ed04

0800c61c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c61c:	b480      	push	{r7}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c622:	4b12      	ldr	r3, [pc, #72]	@ (800c66c <vPortExitCritical+0x50>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d10b      	bne.n	800c642 <vPortExitCritical+0x26>
	__asm volatile
 800c62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c62e:	f383 8811 	msr	BASEPRI, r3
 800c632:	f3bf 8f6f 	isb	sy
 800c636:	f3bf 8f4f 	dsb	sy
 800c63a:	607b      	str	r3, [r7, #4]
}
 800c63c:	bf00      	nop
 800c63e:	bf00      	nop
 800c640:	e7fd      	b.n	800c63e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c642:	4b0a      	ldr	r3, [pc, #40]	@ (800c66c <vPortExitCritical+0x50>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	3b01      	subs	r3, #1
 800c648:	4a08      	ldr	r2, [pc, #32]	@ (800c66c <vPortExitCritical+0x50>)
 800c64a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c64c:	4b07      	ldr	r3, [pc, #28]	@ (800c66c <vPortExitCritical+0x50>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d105      	bne.n	800c660 <vPortExitCritical+0x44>
 800c654:	2300      	movs	r3, #0
 800c656:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	f383 8811 	msr	BASEPRI, r3
}
 800c65e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c660:	bf00      	nop
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr
 800c66c:	20000030 	.word	0x20000030

0800c670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c670:	f3ef 8009 	mrs	r0, PSP
 800c674:	f3bf 8f6f 	isb	sy
 800c678:	4b15      	ldr	r3, [pc, #84]	@ (800c6d0 <pxCurrentTCBConst>)
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	f01e 0f10 	tst.w	lr, #16
 800c680:	bf08      	it	eq
 800c682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c68a:	6010      	str	r0, [r2, #0]
 800c68c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c690:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c694:	f380 8811 	msr	BASEPRI, r0
 800c698:	f3bf 8f4f 	dsb	sy
 800c69c:	f3bf 8f6f 	isb	sy
 800c6a0:	f7fe ffae 	bl	800b600 <vTaskSwitchContext>
 800c6a4:	f04f 0000 	mov.w	r0, #0
 800c6a8:	f380 8811 	msr	BASEPRI, r0
 800c6ac:	bc09      	pop	{r0, r3}
 800c6ae:	6819      	ldr	r1, [r3, #0]
 800c6b0:	6808      	ldr	r0, [r1, #0]
 800c6b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b6:	f01e 0f10 	tst.w	lr, #16
 800c6ba:	bf08      	it	eq
 800c6bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c6c0:	f380 8809 	msr	PSP, r0
 800c6c4:	f3bf 8f6f 	isb	sy
 800c6c8:	4770      	bx	lr
 800c6ca:	bf00      	nop
 800c6cc:	f3af 8000 	nop.w

0800c6d0 <pxCurrentTCBConst>:
 800c6d0:	20000d00 	.word	0x20000d00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c6d4:	bf00      	nop
 800c6d6:	bf00      	nop

0800c6d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6e2:	f383 8811 	msr	BASEPRI, r3
 800c6e6:	f3bf 8f6f 	isb	sy
 800c6ea:	f3bf 8f4f 	dsb	sy
 800c6ee:	607b      	str	r3, [r7, #4]
}
 800c6f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c6f2:	f7fe fecb 	bl	800b48c <xTaskIncrementTick>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d003      	beq.n	800c704 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c6fc:	4b06      	ldr	r3, [pc, #24]	@ (800c718 <xPortSysTickHandler+0x40>)
 800c6fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c702:	601a      	str	r2, [r3, #0]
 800c704:	2300      	movs	r3, #0
 800c706:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	f383 8811 	msr	BASEPRI, r3
}
 800c70e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c710:	bf00      	nop
 800c712:	3708      	adds	r7, #8
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	e000ed04 	.word	0xe000ed04

0800c71c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c71c:	b480      	push	{r7}
 800c71e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c720:	4b0b      	ldr	r3, [pc, #44]	@ (800c750 <vPortSetupTimerInterrupt+0x34>)
 800c722:	2200      	movs	r2, #0
 800c724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c726:	4b0b      	ldr	r3, [pc, #44]	@ (800c754 <vPortSetupTimerInterrupt+0x38>)
 800c728:	2200      	movs	r2, #0
 800c72a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c72c:	4b0a      	ldr	r3, [pc, #40]	@ (800c758 <vPortSetupTimerInterrupt+0x3c>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a0a      	ldr	r2, [pc, #40]	@ (800c75c <vPortSetupTimerInterrupt+0x40>)
 800c732:	fba2 2303 	umull	r2, r3, r2, r3
 800c736:	099b      	lsrs	r3, r3, #6
 800c738:	4a09      	ldr	r2, [pc, #36]	@ (800c760 <vPortSetupTimerInterrupt+0x44>)
 800c73a:	3b01      	subs	r3, #1
 800c73c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c73e:	4b04      	ldr	r3, [pc, #16]	@ (800c750 <vPortSetupTimerInterrupt+0x34>)
 800c740:	2207      	movs	r2, #7
 800c742:	601a      	str	r2, [r3, #0]
}
 800c744:	bf00      	nop
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	e000e010 	.word	0xe000e010
 800c754:	e000e018 	.word	0xe000e018
 800c758:	20000024 	.word	0x20000024
 800c75c:	10624dd3 	.word	0x10624dd3
 800c760:	e000e014 	.word	0xe000e014

0800c764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c764:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c774 <vPortEnableVFP+0x10>
 800c768:	6801      	ldr	r1, [r0, #0]
 800c76a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c76e:	6001      	str	r1, [r0, #0]
 800c770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c772:	bf00      	nop
 800c774:	e000ed88 	.word	0xe000ed88

0800c778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c778:	b480      	push	{r7}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c77e:	f3ef 8305 	mrs	r3, IPSR
 800c782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2b0f      	cmp	r3, #15
 800c788:	d915      	bls.n	800c7b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c78a:	4a18      	ldr	r2, [pc, #96]	@ (800c7ec <vPortValidateInterruptPriority+0x74>)
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	4413      	add	r3, r2
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c794:	4b16      	ldr	r3, [pc, #88]	@ (800c7f0 <vPortValidateInterruptPriority+0x78>)
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	7afa      	ldrb	r2, [r7, #11]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d20b      	bcs.n	800c7b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a2:	f383 8811 	msr	BASEPRI, r3
 800c7a6:	f3bf 8f6f 	isb	sy
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	607b      	str	r3, [r7, #4]
}
 800c7b0:	bf00      	nop
 800c7b2:	bf00      	nop
 800c7b4:	e7fd      	b.n	800c7b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c7b6:	4b0f      	ldr	r3, [pc, #60]	@ (800c7f4 <vPortValidateInterruptPriority+0x7c>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c7be:	4b0e      	ldr	r3, [pc, #56]	@ (800c7f8 <vPortValidateInterruptPriority+0x80>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d90b      	bls.n	800c7de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ca:	f383 8811 	msr	BASEPRI, r3
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	603b      	str	r3, [r7, #0]
}
 800c7d8:	bf00      	nop
 800c7da:	bf00      	nop
 800c7dc:	e7fd      	b.n	800c7da <vPortValidateInterruptPriority+0x62>
	}
 800c7de:	bf00      	nop
 800c7e0:	3714      	adds	r7, #20
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr
 800c7ea:	bf00      	nop
 800c7ec:	e000e3f0 	.word	0xe000e3f0
 800c7f0:	2000132c 	.word	0x2000132c
 800c7f4:	e000ed0c 	.word	0xe000ed0c
 800c7f8:	20001330 	.word	0x20001330

0800c7fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b08a      	sub	sp, #40	@ 0x28
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c804:	2300      	movs	r3, #0
 800c806:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c808:	f7fe fd84 	bl	800b314 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c80c:	4b5c      	ldr	r3, [pc, #368]	@ (800c980 <pvPortMalloc+0x184>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d101      	bne.n	800c818 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c814:	f000 f924 	bl	800ca60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c818:	4b5a      	ldr	r3, [pc, #360]	@ (800c984 <pvPortMalloc+0x188>)
 800c81a:	681a      	ldr	r2, [r3, #0]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	4013      	ands	r3, r2
 800c820:	2b00      	cmp	r3, #0
 800c822:	f040 8095 	bne.w	800c950 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d01e      	beq.n	800c86a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c82c:	2208      	movs	r2, #8
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	4413      	add	r3, r2
 800c832:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f003 0307 	and.w	r3, r3, #7
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d015      	beq.n	800c86a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f023 0307 	bic.w	r3, r3, #7
 800c844:	3308      	adds	r3, #8
 800c846:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f003 0307 	and.w	r3, r3, #7
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d00b      	beq.n	800c86a <pvPortMalloc+0x6e>
	__asm volatile
 800c852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c856:	f383 8811 	msr	BASEPRI, r3
 800c85a:	f3bf 8f6f 	isb	sy
 800c85e:	f3bf 8f4f 	dsb	sy
 800c862:	617b      	str	r3, [r7, #20]
}
 800c864:	bf00      	nop
 800c866:	bf00      	nop
 800c868:	e7fd      	b.n	800c866 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d06f      	beq.n	800c950 <pvPortMalloc+0x154>
 800c870:	4b45      	ldr	r3, [pc, #276]	@ (800c988 <pvPortMalloc+0x18c>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	429a      	cmp	r2, r3
 800c878:	d86a      	bhi.n	800c950 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c87a:	4b44      	ldr	r3, [pc, #272]	@ (800c98c <pvPortMalloc+0x190>)
 800c87c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c87e:	4b43      	ldr	r3, [pc, #268]	@ (800c98c <pvPortMalloc+0x190>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c884:	e004      	b.n	800c890 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c888:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	687a      	ldr	r2, [r7, #4]
 800c896:	429a      	cmp	r2, r3
 800c898:	d903      	bls.n	800c8a2 <pvPortMalloc+0xa6>
 800c89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d1f1      	bne.n	800c886 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c8a2:	4b37      	ldr	r3, [pc, #220]	@ (800c980 <pvPortMalloc+0x184>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d051      	beq.n	800c950 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c8ac:	6a3b      	ldr	r3, [r7, #32]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2208      	movs	r2, #8
 800c8b2:	4413      	add	r3, r2
 800c8b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	6a3b      	ldr	r3, [r7, #32]
 800c8bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c0:	685a      	ldr	r2, [r3, #4]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	1ad2      	subs	r2, r2, r3
 800c8c6:	2308      	movs	r3, #8
 800c8c8:	005b      	lsls	r3, r3, #1
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d920      	bls.n	800c910 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c8ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8d6:	69bb      	ldr	r3, [r7, #24]
 800c8d8:	f003 0307 	and.w	r3, r3, #7
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d00b      	beq.n	800c8f8 <pvPortMalloc+0xfc>
	__asm volatile
 800c8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8e4:	f383 8811 	msr	BASEPRI, r3
 800c8e8:	f3bf 8f6f 	isb	sy
 800c8ec:	f3bf 8f4f 	dsb	sy
 800c8f0:	613b      	str	r3, [r7, #16]
}
 800c8f2:	bf00      	nop
 800c8f4:	bf00      	nop
 800c8f6:	e7fd      	b.n	800c8f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8fa:	685a      	ldr	r2, [r3, #4]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	1ad2      	subs	r2, r2, r3
 800c900:	69bb      	ldr	r3, [r7, #24]
 800c902:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c906:	687a      	ldr	r2, [r7, #4]
 800c908:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c90a:	69b8      	ldr	r0, [r7, #24]
 800c90c:	f000 f90a 	bl	800cb24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c910:	4b1d      	ldr	r3, [pc, #116]	@ (800c988 <pvPortMalloc+0x18c>)
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	1ad3      	subs	r3, r2, r3
 800c91a:	4a1b      	ldr	r2, [pc, #108]	@ (800c988 <pvPortMalloc+0x18c>)
 800c91c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c91e:	4b1a      	ldr	r3, [pc, #104]	@ (800c988 <pvPortMalloc+0x18c>)
 800c920:	681a      	ldr	r2, [r3, #0]
 800c922:	4b1b      	ldr	r3, [pc, #108]	@ (800c990 <pvPortMalloc+0x194>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	429a      	cmp	r2, r3
 800c928:	d203      	bcs.n	800c932 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c92a:	4b17      	ldr	r3, [pc, #92]	@ (800c988 <pvPortMalloc+0x18c>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4a18      	ldr	r2, [pc, #96]	@ (800c990 <pvPortMalloc+0x194>)
 800c930:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c934:	685a      	ldr	r2, [r3, #4]
 800c936:	4b13      	ldr	r3, [pc, #76]	@ (800c984 <pvPortMalloc+0x188>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	431a      	orrs	r2, r3
 800c93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c93e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c942:	2200      	movs	r2, #0
 800c944:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c946:	4b13      	ldr	r3, [pc, #76]	@ (800c994 <pvPortMalloc+0x198>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	3301      	adds	r3, #1
 800c94c:	4a11      	ldr	r2, [pc, #68]	@ (800c994 <pvPortMalloc+0x198>)
 800c94e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c950:	f7fe fcee 	bl	800b330 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c954:	69fb      	ldr	r3, [r7, #28]
 800c956:	f003 0307 	and.w	r3, r3, #7
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d00b      	beq.n	800c976 <pvPortMalloc+0x17a>
	__asm volatile
 800c95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c962:	f383 8811 	msr	BASEPRI, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	60fb      	str	r3, [r7, #12]
}
 800c970:	bf00      	nop
 800c972:	bf00      	nop
 800c974:	e7fd      	b.n	800c972 <pvPortMalloc+0x176>
	return pvReturn;
 800c976:	69fb      	ldr	r3, [r7, #28]
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3728      	adds	r7, #40	@ 0x28
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}
 800c980:	20004f3c 	.word	0x20004f3c
 800c984:	20004f50 	.word	0x20004f50
 800c988:	20004f40 	.word	0x20004f40
 800c98c:	20004f34 	.word	0x20004f34
 800c990:	20004f44 	.word	0x20004f44
 800c994:	20004f48 	.word	0x20004f48

0800c998 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b086      	sub	sp, #24
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d04f      	beq.n	800ca4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c9aa:	2308      	movs	r3, #8
 800c9ac:	425b      	negs	r3, r3
 800c9ae:	697a      	ldr	r2, [r7, #20]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	685a      	ldr	r2, [r3, #4]
 800c9bc:	4b25      	ldr	r3, [pc, #148]	@ (800ca54 <vPortFree+0xbc>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4013      	ands	r3, r2
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d10b      	bne.n	800c9de <vPortFree+0x46>
	__asm volatile
 800c9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ca:	f383 8811 	msr	BASEPRI, r3
 800c9ce:	f3bf 8f6f 	isb	sy
 800c9d2:	f3bf 8f4f 	dsb	sy
 800c9d6:	60fb      	str	r3, [r7, #12]
}
 800c9d8:	bf00      	nop
 800c9da:	bf00      	nop
 800c9dc:	e7fd      	b.n	800c9da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d00b      	beq.n	800c9fe <vPortFree+0x66>
	__asm volatile
 800c9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ea:	f383 8811 	msr	BASEPRI, r3
 800c9ee:	f3bf 8f6f 	isb	sy
 800c9f2:	f3bf 8f4f 	dsb	sy
 800c9f6:	60bb      	str	r3, [r7, #8]
}
 800c9f8:	bf00      	nop
 800c9fa:	bf00      	nop
 800c9fc:	e7fd      	b.n	800c9fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	685a      	ldr	r2, [r3, #4]
 800ca02:	4b14      	ldr	r3, [pc, #80]	@ (800ca54 <vPortFree+0xbc>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4013      	ands	r3, r2
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d01e      	beq.n	800ca4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d11a      	bne.n	800ca4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	685a      	ldr	r2, [r3, #4]
 800ca18:	4b0e      	ldr	r3, [pc, #56]	@ (800ca54 <vPortFree+0xbc>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	43db      	mvns	r3, r3
 800ca1e:	401a      	ands	r2, r3
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca24:	f7fe fc76 	bl	800b314 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	685a      	ldr	r2, [r3, #4]
 800ca2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ca58 <vPortFree+0xc0>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4413      	add	r3, r2
 800ca32:	4a09      	ldr	r2, [pc, #36]	@ (800ca58 <vPortFree+0xc0>)
 800ca34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca36:	6938      	ldr	r0, [r7, #16]
 800ca38:	f000 f874 	bl	800cb24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca3c:	4b07      	ldr	r3, [pc, #28]	@ (800ca5c <vPortFree+0xc4>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	3301      	adds	r3, #1
 800ca42:	4a06      	ldr	r2, [pc, #24]	@ (800ca5c <vPortFree+0xc4>)
 800ca44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ca46:	f7fe fc73 	bl	800b330 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca4a:	bf00      	nop
 800ca4c:	3718      	adds	r7, #24
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	20004f50 	.word	0x20004f50
 800ca58:	20004f40 	.word	0x20004f40
 800ca5c:	20004f4c 	.word	0x20004f4c

0800ca60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca60:	b480      	push	{r7}
 800ca62:	b085      	sub	sp, #20
 800ca64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca66:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ca6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca6c:	4b27      	ldr	r3, [pc, #156]	@ (800cb0c <prvHeapInit+0xac>)
 800ca6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f003 0307 	and.w	r3, r3, #7
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d00c      	beq.n	800ca94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	3307      	adds	r3, #7
 800ca7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f023 0307 	bic.w	r3, r3, #7
 800ca86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca88:	68ba      	ldr	r2, [r7, #8]
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	1ad3      	subs	r3, r2, r3
 800ca8e:	4a1f      	ldr	r2, [pc, #124]	@ (800cb0c <prvHeapInit+0xac>)
 800ca90:	4413      	add	r3, r2
 800ca92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca98:	4a1d      	ldr	r2, [pc, #116]	@ (800cb10 <prvHeapInit+0xb0>)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca9e:	4b1c      	ldr	r3, [pc, #112]	@ (800cb10 <prvHeapInit+0xb0>)
 800caa0:	2200      	movs	r2, #0
 800caa2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	68ba      	ldr	r2, [r7, #8]
 800caa8:	4413      	add	r3, r2
 800caaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800caac:	2208      	movs	r2, #8
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	1a9b      	subs	r3, r3, r2
 800cab2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f023 0307 	bic.w	r3, r3, #7
 800caba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	4a15      	ldr	r2, [pc, #84]	@ (800cb14 <prvHeapInit+0xb4>)
 800cac0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cac2:	4b14      	ldr	r3, [pc, #80]	@ (800cb14 <prvHeapInit+0xb4>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2200      	movs	r2, #0
 800cac8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800caca:	4b12      	ldr	r3, [pc, #72]	@ (800cb14 <prvHeapInit+0xb4>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	2200      	movs	r2, #0
 800cad0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	68fa      	ldr	r2, [r7, #12]
 800cada:	1ad2      	subs	r2, r2, r3
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cae0:	4b0c      	ldr	r3, [pc, #48]	@ (800cb14 <prvHeapInit+0xb4>)
 800cae2:	681a      	ldr	r2, [r3, #0]
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	4a0a      	ldr	r2, [pc, #40]	@ (800cb18 <prvHeapInit+0xb8>)
 800caee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	4a09      	ldr	r2, [pc, #36]	@ (800cb1c <prvHeapInit+0xbc>)
 800caf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800caf8:	4b09      	ldr	r3, [pc, #36]	@ (800cb20 <prvHeapInit+0xc0>)
 800cafa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cafe:	601a      	str	r2, [r3, #0]
}
 800cb00:	bf00      	nop
 800cb02:	3714      	adds	r7, #20
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr
 800cb0c:	20001334 	.word	0x20001334
 800cb10:	20004f34 	.word	0x20004f34
 800cb14:	20004f3c 	.word	0x20004f3c
 800cb18:	20004f44 	.word	0x20004f44
 800cb1c:	20004f40 	.word	0x20004f40
 800cb20:	20004f50 	.word	0x20004f50

0800cb24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb24:	b480      	push	{r7}
 800cb26:	b085      	sub	sp, #20
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb2c:	4b28      	ldr	r3, [pc, #160]	@ (800cbd0 <prvInsertBlockIntoFreeList+0xac>)
 800cb2e:	60fb      	str	r3, [r7, #12]
 800cb30:	e002      	b.n	800cb38 <prvInsertBlockIntoFreeList+0x14>
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	60fb      	str	r3, [r7, #12]
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d8f7      	bhi.n	800cb32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	68ba      	ldr	r2, [r7, #8]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d108      	bne.n	800cb66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	685a      	ldr	r2, [r3, #4]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	441a      	add	r2, r3
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	68ba      	ldr	r2, [r7, #8]
 800cb70:	441a      	add	r2, r3
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d118      	bne.n	800cbac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681a      	ldr	r2, [r3, #0]
 800cb7e:	4b15      	ldr	r3, [pc, #84]	@ (800cbd4 <prvInsertBlockIntoFreeList+0xb0>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d00d      	beq.n	800cba2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	685a      	ldr	r2, [r3, #4]
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	441a      	add	r2, r3
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	601a      	str	r2, [r3, #0]
 800cba0:	e008      	b.n	800cbb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cba2:	4b0c      	ldr	r3, [pc, #48]	@ (800cbd4 <prvInsertBlockIntoFreeList+0xb0>)
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	601a      	str	r2, [r3, #0]
 800cbaa:	e003      	b.n	800cbb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cbb4:	68fa      	ldr	r2, [r7, #12]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d002      	beq.n	800cbc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbc2:	bf00      	nop
 800cbc4:	3714      	adds	r7, #20
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr
 800cbce:	bf00      	nop
 800cbd0:	20004f34 	.word	0x20004f34
 800cbd4:	20004f3c 	.word	0x20004f3c

0800cbd8 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800cbde:	2300      	movs	r3, #0
 800cbe0:	71fb      	strb	r3, [r7, #7]
 800cbe2:	e026      	b.n	800cc32 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800cbe4:	79fb      	ldrb	r3, [r7, #7]
 800cbe6:	3b50      	subs	r3, #80	@ 0x50
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	2100      	movs	r1, #0
 800cbec:	4618      	mov	r0, r3
 800cbee:	f000 f82b 	bl	800cc48 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800cbf2:	2100      	movs	r1, #0
 800cbf4:	2000      	movs	r0, #0
 800cbf6:	f000 f827 	bl	800cc48 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800cbfa:	2100      	movs	r1, #0
 800cbfc:	2010      	movs	r0, #16
 800cbfe:	f000 f823 	bl	800cc48 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800cc02:	2300      	movs	r3, #0
 800cc04:	71bb      	strb	r3, [r7, #6]
 800cc06:	e00d      	b.n	800cc24 <OLED_Refresh_Gram+0x4c>
 800cc08:	79ba      	ldrb	r2, [r7, #6]
 800cc0a:	79fb      	ldrb	r3, [r7, #7]
 800cc0c:	490d      	ldr	r1, [pc, #52]	@ (800cc44 <OLED_Refresh_Gram+0x6c>)
 800cc0e:	00d2      	lsls	r2, r2, #3
 800cc10:	440a      	add	r2, r1
 800cc12:	4413      	add	r3, r2
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	2101      	movs	r1, #1
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f000 f815 	bl	800cc48 <OLED_WR_Byte>
 800cc1e:	79bb      	ldrb	r3, [r7, #6]
 800cc20:	3301      	adds	r3, #1
 800cc22:	71bb      	strb	r3, [r7, #6]
 800cc24:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	daed      	bge.n	800cc08 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800cc2c:	79fb      	ldrb	r3, [r7, #7]
 800cc2e:	3301      	adds	r3, #1
 800cc30:	71fb      	strb	r3, [r7, #7]
 800cc32:	79fb      	ldrb	r3, [r7, #7]
 800cc34:	2b07      	cmp	r3, #7
 800cc36:	d9d5      	bls.n	800cbe4 <OLED_Refresh_Gram+0xc>
	}   
}
 800cc38:	bf00      	nop
 800cc3a:	bf00      	nop
 800cc3c:	3708      	adds	r7, #8
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	20004f54 	.word	0x20004f54

0800cc48 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	4603      	mov	r3, r0
 800cc50:	460a      	mov	r2, r1
 800cc52:	71fb      	strb	r3, [r7, #7]
 800cc54:	4613      	mov	r3, r2
 800cc56:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800cc58:	79bb      	ldrb	r3, [r7, #6]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d006      	beq.n	800cc6c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800cc5e:	2201      	movs	r2, #1
 800cc60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cc64:	481c      	ldr	r0, [pc, #112]	@ (800ccd8 <OLED_WR_Byte+0x90>)
 800cc66:	f7f8 fb1d 	bl	80052a4 <HAL_GPIO_WritePin>
 800cc6a:	e005      	b.n	800cc78 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cc72:	4819      	ldr	r0, [pc, #100]	@ (800ccd8 <OLED_WR_Byte+0x90>)
 800cc74:	f7f8 fb16 	bl	80052a4 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800cc78:	2300      	movs	r3, #0
 800cc7a:	73fb      	strb	r3, [r7, #15]
 800cc7c:	e01e      	b.n	800ccbc <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800cc7e:	2200      	movs	r2, #0
 800cc80:	2120      	movs	r1, #32
 800cc82:	4815      	ldr	r0, [pc, #84]	@ (800ccd8 <OLED_WR_Byte+0x90>)
 800cc84:	f7f8 fb0e 	bl	80052a4 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800cc88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	da05      	bge.n	800cc9c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800cc90:	2201      	movs	r2, #1
 800cc92:	2140      	movs	r1, #64	@ 0x40
 800cc94:	4810      	ldr	r0, [pc, #64]	@ (800ccd8 <OLED_WR_Byte+0x90>)
 800cc96:	f7f8 fb05 	bl	80052a4 <HAL_GPIO_WritePin>
 800cc9a:	e004      	b.n	800cca6 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	2140      	movs	r1, #64	@ 0x40
 800cca0:	480d      	ldr	r0, [pc, #52]	@ (800ccd8 <OLED_WR_Byte+0x90>)
 800cca2:	f7f8 faff 	bl	80052a4 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800cca6:	2201      	movs	r2, #1
 800cca8:	2120      	movs	r1, #32
 800ccaa:	480b      	ldr	r0, [pc, #44]	@ (800ccd8 <OLED_WR_Byte+0x90>)
 800ccac:	f7f8 fafa 	bl	80052a4 <HAL_GPIO_WritePin>
		dat<<=1;   
 800ccb0:	79fb      	ldrb	r3, [r7, #7]
 800ccb2:	005b      	lsls	r3, r3, #1
 800ccb4:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800ccb6:	7bfb      	ldrb	r3, [r7, #15]
 800ccb8:	3301      	adds	r3, #1
 800ccba:	73fb      	strb	r3, [r7, #15]
 800ccbc:	7bfb      	ldrb	r3, [r7, #15]
 800ccbe:	2b07      	cmp	r3, #7
 800ccc0:	d9dd      	bls.n	800cc7e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ccc8:	4803      	ldr	r0, [pc, #12]	@ (800ccd8 <OLED_WR_Byte+0x90>)
 800ccca:	f7f8 faeb 	bl	80052a4 <HAL_GPIO_WritePin>
} 
 800ccce:	bf00      	nop
 800ccd0:	3710      	adds	r7, #16
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	40021000 	.word	0x40021000

0800ccdc <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800cce2:	2300      	movs	r3, #0
 800cce4:	71fb      	strb	r3, [r7, #7]
 800cce6:	e014      	b.n	800cd12 <OLED_Clear+0x36>
 800cce8:	2300      	movs	r3, #0
 800ccea:	71bb      	strb	r3, [r7, #6]
 800ccec:	e00a      	b.n	800cd04 <OLED_Clear+0x28>
 800ccee:	79ba      	ldrb	r2, [r7, #6]
 800ccf0:	79fb      	ldrb	r3, [r7, #7]
 800ccf2:	490c      	ldr	r1, [pc, #48]	@ (800cd24 <OLED_Clear+0x48>)
 800ccf4:	00d2      	lsls	r2, r2, #3
 800ccf6:	440a      	add	r2, r1
 800ccf8:	4413      	add	r3, r2
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	701a      	strb	r2, [r3, #0]
 800ccfe:	79bb      	ldrb	r3, [r7, #6]
 800cd00:	3301      	adds	r3, #1
 800cd02:	71bb      	strb	r3, [r7, #6]
 800cd04:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	daf0      	bge.n	800ccee <OLED_Clear+0x12>
 800cd0c:	79fb      	ldrb	r3, [r7, #7]
 800cd0e:	3301      	adds	r3, #1
 800cd10:	71fb      	strb	r3, [r7, #7]
 800cd12:	79fb      	ldrb	r3, [r7, #7]
 800cd14:	2b07      	cmp	r3, #7
 800cd16:	d9e7      	bls.n	800cce8 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800cd18:	f7ff ff5e 	bl	800cbd8 <OLED_Refresh_Gram>
}
 800cd1c:	bf00      	nop
 800cd1e:	3708      	adds	r7, #8
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	20004f54 	.word	0x20004f54

0800cd28 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b085      	sub	sp, #20
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	4603      	mov	r3, r0
 800cd30:	71fb      	strb	r3, [r7, #7]
 800cd32:	460b      	mov	r3, r1
 800cd34:	71bb      	strb	r3, [r7, #6]
 800cd36:	4613      	mov	r3, r2
 800cd38:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800cd3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	db41      	blt.n	800cdca <OLED_DrawPoint+0xa2>
 800cd46:	79bb      	ldrb	r3, [r7, #6]
 800cd48:	2b3f      	cmp	r3, #63	@ 0x3f
 800cd4a:	d83e      	bhi.n	800cdca <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800cd4c:	79bb      	ldrb	r3, [r7, #6]
 800cd4e:	08db      	lsrs	r3, r3, #3
 800cd50:	b2db      	uxtb	r3, r3
 800cd52:	f1c3 0307 	rsb	r3, r3, #7
 800cd56:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800cd58:	79bb      	ldrb	r3, [r7, #6]
 800cd5a:	f003 0307 	and.w	r3, r3, #7
 800cd5e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800cd60:	7b7b      	ldrb	r3, [r7, #13]
 800cd62:	f1c3 0307 	rsb	r3, r3, #7
 800cd66:	2201      	movs	r2, #1
 800cd68:	fa02 f303 	lsl.w	r3, r2, r3
 800cd6c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800cd6e:	797b      	ldrb	r3, [r7, #5]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d012      	beq.n	800cd9a <OLED_DrawPoint+0x72>
 800cd74:	79fa      	ldrb	r2, [r7, #7]
 800cd76:	7bbb      	ldrb	r3, [r7, #14]
 800cd78:	4917      	ldr	r1, [pc, #92]	@ (800cdd8 <OLED_DrawPoint+0xb0>)
 800cd7a:	00d2      	lsls	r2, r2, #3
 800cd7c:	440a      	add	r2, r1
 800cd7e:	4413      	add	r3, r2
 800cd80:	7818      	ldrb	r0, [r3, #0]
 800cd82:	79fa      	ldrb	r2, [r7, #7]
 800cd84:	7bbb      	ldrb	r3, [r7, #14]
 800cd86:	7bf9      	ldrb	r1, [r7, #15]
 800cd88:	4301      	orrs	r1, r0
 800cd8a:	b2c8      	uxtb	r0, r1
 800cd8c:	4912      	ldr	r1, [pc, #72]	@ (800cdd8 <OLED_DrawPoint+0xb0>)
 800cd8e:	00d2      	lsls	r2, r2, #3
 800cd90:	440a      	add	r2, r1
 800cd92:	4413      	add	r3, r2
 800cd94:	4602      	mov	r2, r0
 800cd96:	701a      	strb	r2, [r3, #0]
 800cd98:	e018      	b.n	800cdcc <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800cd9a:	79fa      	ldrb	r2, [r7, #7]
 800cd9c:	7bbb      	ldrb	r3, [r7, #14]
 800cd9e:	490e      	ldr	r1, [pc, #56]	@ (800cdd8 <OLED_DrawPoint+0xb0>)
 800cda0:	00d2      	lsls	r2, r2, #3
 800cda2:	440a      	add	r2, r1
 800cda4:	4413      	add	r3, r2
 800cda6:	781b      	ldrb	r3, [r3, #0]
 800cda8:	b25a      	sxtb	r2, r3
 800cdaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdae:	43db      	mvns	r3, r3
 800cdb0:	b25b      	sxtb	r3, r3
 800cdb2:	4013      	ands	r3, r2
 800cdb4:	b259      	sxtb	r1, r3
 800cdb6:	79fa      	ldrb	r2, [r7, #7]
 800cdb8:	7bbb      	ldrb	r3, [r7, #14]
 800cdba:	b2c8      	uxtb	r0, r1
 800cdbc:	4906      	ldr	r1, [pc, #24]	@ (800cdd8 <OLED_DrawPoint+0xb0>)
 800cdbe:	00d2      	lsls	r2, r2, #3
 800cdc0:	440a      	add	r2, r1
 800cdc2:	4413      	add	r3, r2
 800cdc4:	4602      	mov	r2, r0
 800cdc6:	701a      	strb	r2, [r3, #0]
 800cdc8:	e000      	b.n	800cdcc <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800cdca:	bf00      	nop
}
 800cdcc:	3714      	adds	r7, #20
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd4:	4770      	bx	lr
 800cdd6:	bf00      	nop
 800cdd8:	20004f54 	.word	0x20004f54

0800cddc <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800cddc:	b590      	push	{r4, r7, lr}
 800cdde:	b085      	sub	sp, #20
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	4604      	mov	r4, r0
 800cde4:	4608      	mov	r0, r1
 800cde6:	4611      	mov	r1, r2
 800cde8:	461a      	mov	r2, r3
 800cdea:	4623      	mov	r3, r4
 800cdec:	71fb      	strb	r3, [r7, #7]
 800cdee:	4603      	mov	r3, r0
 800cdf0:	71bb      	strb	r3, [r7, #6]
 800cdf2:	460b      	mov	r3, r1
 800cdf4:	717b      	strb	r3, [r7, #5]
 800cdf6:	4613      	mov	r3, r2
 800cdf8:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800cdfa:	79bb      	ldrb	r3, [r7, #6]
 800cdfc:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800cdfe:	797b      	ldrb	r3, [r7, #5]
 800ce00:	3b20      	subs	r3, #32
 800ce02:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800ce04:	2300      	movs	r3, #0
 800ce06:	73bb      	strb	r3, [r7, #14]
 800ce08:	e04d      	b.n	800cea6 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800ce0a:	793b      	ldrb	r3, [r7, #4]
 800ce0c:	2b0c      	cmp	r3, #12
 800ce0e:	d10b      	bne.n	800ce28 <OLED_ShowChar+0x4c>
 800ce10:	797a      	ldrb	r2, [r7, #5]
 800ce12:	7bb9      	ldrb	r1, [r7, #14]
 800ce14:	4828      	ldr	r0, [pc, #160]	@ (800ceb8 <OLED_ShowChar+0xdc>)
 800ce16:	4613      	mov	r3, r2
 800ce18:	005b      	lsls	r3, r3, #1
 800ce1a:	4413      	add	r3, r2
 800ce1c:	009b      	lsls	r3, r3, #2
 800ce1e:	4403      	add	r3, r0
 800ce20:	440b      	add	r3, r1
 800ce22:	781b      	ldrb	r3, [r3, #0]
 800ce24:	73fb      	strb	r3, [r7, #15]
 800ce26:	e007      	b.n	800ce38 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800ce28:	797a      	ldrb	r2, [r7, #5]
 800ce2a:	7bbb      	ldrb	r3, [r7, #14]
 800ce2c:	4923      	ldr	r1, [pc, #140]	@ (800cebc <OLED_ShowChar+0xe0>)
 800ce2e:	0112      	lsls	r2, r2, #4
 800ce30:	440a      	add	r2, r1
 800ce32:	4413      	add	r3, r2
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800ce38:	2300      	movs	r3, #0
 800ce3a:	737b      	strb	r3, [r7, #13]
 800ce3c:	e02d      	b.n	800ce9a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800ce3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	da07      	bge.n	800ce56 <OLED_ShowChar+0x7a>
 800ce46:	f897 2020 	ldrb.w	r2, [r7, #32]
 800ce4a:	79b9      	ldrb	r1, [r7, #6]
 800ce4c:	79fb      	ldrb	r3, [r7, #7]
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7ff ff6a 	bl	800cd28 <OLED_DrawPoint>
 800ce54:	e00c      	b.n	800ce70 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800ce56:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	bf0c      	ite	eq
 800ce5e:	2301      	moveq	r3, #1
 800ce60:	2300      	movne	r3, #0
 800ce62:	b2db      	uxtb	r3, r3
 800ce64:	461a      	mov	r2, r3
 800ce66:	79b9      	ldrb	r1, [r7, #6]
 800ce68:	79fb      	ldrb	r3, [r7, #7]
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7ff ff5c 	bl	800cd28 <OLED_DrawPoint>
			temp<<=1;
 800ce70:	7bfb      	ldrb	r3, [r7, #15]
 800ce72:	005b      	lsls	r3, r3, #1
 800ce74:	73fb      	strb	r3, [r7, #15]
			y++;
 800ce76:	79bb      	ldrb	r3, [r7, #6]
 800ce78:	3301      	adds	r3, #1
 800ce7a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800ce7c:	79ba      	ldrb	r2, [r7, #6]
 800ce7e:	7b3b      	ldrb	r3, [r7, #12]
 800ce80:	1ad2      	subs	r2, r2, r3
 800ce82:	793b      	ldrb	r3, [r7, #4]
 800ce84:	429a      	cmp	r2, r3
 800ce86:	d105      	bne.n	800ce94 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800ce88:	7b3b      	ldrb	r3, [r7, #12]
 800ce8a:	71bb      	strb	r3, [r7, #6]
				x++;
 800ce8c:	79fb      	ldrb	r3, [r7, #7]
 800ce8e:	3301      	adds	r3, #1
 800ce90:	71fb      	strb	r3, [r7, #7]
				break;
 800ce92:	e005      	b.n	800cea0 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800ce94:	7b7b      	ldrb	r3, [r7, #13]
 800ce96:	3301      	adds	r3, #1
 800ce98:	737b      	strb	r3, [r7, #13]
 800ce9a:	7b7b      	ldrb	r3, [r7, #13]
 800ce9c:	2b07      	cmp	r3, #7
 800ce9e:	d9ce      	bls.n	800ce3e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800cea0:	7bbb      	ldrb	r3, [r7, #14]
 800cea2:	3301      	adds	r3, #1
 800cea4:	73bb      	strb	r3, [r7, #14]
 800cea6:	7bba      	ldrb	r2, [r7, #14]
 800cea8:	793b      	ldrb	r3, [r7, #4]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d3ad      	bcc.n	800ce0a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800ceae:	bf00      	nop
 800ceb0:	bf00      	nop
 800ceb2:	3714      	adds	r7, #20
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd90      	pop	{r4, r7, pc}
 800ceb8:	0801059c 	.word	0x0801059c
 800cebc:	08010a10 	.word	0x08010a10

0800cec0 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af02      	add	r7, sp, #8
 800cec6:	4603      	mov	r3, r0
 800cec8:	603a      	str	r2, [r7, #0]
 800ceca:	71fb      	strb	r3, [r7, #7]
 800cecc:	460b      	mov	r3, r1
 800cece:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800ced0:	e01f      	b.n	800cf12 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800ced2:	79fb      	ldrb	r3, [r7, #7]
 800ced4:	2b7a      	cmp	r3, #122	@ 0x7a
 800ced6:	d904      	bls.n	800cee2 <OLED_ShowString+0x22>
 800ced8:	2300      	movs	r3, #0
 800ceda:	71fb      	strb	r3, [r7, #7]
 800cedc:	79bb      	ldrb	r3, [r7, #6]
 800cede:	3310      	adds	r3, #16
 800cee0:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800cee2:	79bb      	ldrb	r3, [r7, #6]
 800cee4:	2b3a      	cmp	r3, #58	@ 0x3a
 800cee6:	d905      	bls.n	800cef4 <OLED_ShowString+0x34>
 800cee8:	2300      	movs	r3, #0
 800ceea:	71fb      	strb	r3, [r7, #7]
 800ceec:	79fb      	ldrb	r3, [r7, #7]
 800ceee:	71bb      	strb	r3, [r7, #6]
 800cef0:	f7ff fef4 	bl	800ccdc <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	781a      	ldrb	r2, [r3, #0]
 800cef8:	79b9      	ldrb	r1, [r7, #6]
 800cefa:	79f8      	ldrb	r0, [r7, #7]
 800cefc:	2301      	movs	r3, #1
 800cefe:	9300      	str	r3, [sp, #0]
 800cf00:	230c      	movs	r3, #12
 800cf02:	f7ff ff6b 	bl	800cddc <OLED_ShowChar>
        x+=8;
 800cf06:	79fb      	ldrb	r3, [r7, #7]
 800cf08:	3308      	adds	r3, #8
 800cf0a:	71fb      	strb	r3, [r7, #7]
        p++;
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	3301      	adds	r3, #1
 800cf10:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d1db      	bne.n	800ced2 <OLED_ShowString+0x12>
    }  
}	 
 800cf1a:	bf00      	nop
 800cf1c:	bf00      	nop
 800cf1e:	3708      	adds	r7, #8
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <OLED_Init>:

void OLED_Init(void)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800cf28:	f7f9 fa14 	bl	8006354 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800cf2c:	4b41      	ldr	r3, [pc, #260]	@ (800d034 <OLED_Init+0x110>)
 800cf2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf30:	4a40      	ldr	r2, [pc, #256]	@ (800d034 <OLED_Init+0x110>)
 800cf32:	f023 0301 	bic.w	r3, r3, #1
 800cf36:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf38:	4b3e      	ldr	r3, [pc, #248]	@ (800d034 <OLED_Init+0x110>)
 800cf3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf3c:	4a3d      	ldr	r2, [pc, #244]	@ (800d034 <OLED_Init+0x110>)
 800cf3e:	f023 0304 	bic.w	r3, r3, #4
 800cf42:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800cf44:	f7f9 fa1a 	bl	800637c <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800cf48:	2200      	movs	r2, #0
 800cf4a:	2180      	movs	r1, #128	@ 0x80
 800cf4c:	483a      	ldr	r0, [pc, #232]	@ (800d038 <OLED_Init+0x114>)
 800cf4e:	f7f8 f9a9 	bl	80052a4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800cf52:	2064      	movs	r0, #100	@ 0x64
 800cf54:	f7f7 fa2a 	bl	80043ac <HAL_Delay>
	OLED_RST_Set();
 800cf58:	2201      	movs	r2, #1
 800cf5a:	2180      	movs	r1, #128	@ 0x80
 800cf5c:	4836      	ldr	r0, [pc, #216]	@ (800d038 <OLED_Init+0x114>)
 800cf5e:	f7f8 f9a1 	bl	80052a4 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800cf62:	2100      	movs	r1, #0
 800cf64:	20ae      	movs	r0, #174	@ 0xae
 800cf66:	f7ff fe6f 	bl	800cc48 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800cf6a:	2100      	movs	r1, #0
 800cf6c:	20d5      	movs	r0, #213	@ 0xd5
 800cf6e:	f7ff fe6b 	bl	800cc48 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800cf72:	2100      	movs	r1, #0
 800cf74:	2050      	movs	r0, #80	@ 0x50
 800cf76:	f7ff fe67 	bl	800cc48 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800cf7a:	2100      	movs	r1, #0
 800cf7c:	20a8      	movs	r0, #168	@ 0xa8
 800cf7e:	f7ff fe63 	bl	800cc48 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800cf82:	2100      	movs	r1, #0
 800cf84:	203f      	movs	r0, #63	@ 0x3f
 800cf86:	f7ff fe5f 	bl	800cc48 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800cf8a:	2100      	movs	r1, #0
 800cf8c:	20d3      	movs	r0, #211	@ 0xd3
 800cf8e:	f7ff fe5b 	bl	800cc48 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800cf92:	2100      	movs	r1, #0
 800cf94:	2000      	movs	r0, #0
 800cf96:	f7ff fe57 	bl	800cc48 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800cf9a:	2100      	movs	r1, #0
 800cf9c:	2040      	movs	r0, #64	@ 0x40
 800cf9e:	f7ff fe53 	bl	800cc48 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800cfa2:	2100      	movs	r1, #0
 800cfa4:	208d      	movs	r0, #141	@ 0x8d
 800cfa6:	f7ff fe4f 	bl	800cc48 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800cfaa:	2100      	movs	r1, #0
 800cfac:	2014      	movs	r0, #20
 800cfae:	f7ff fe4b 	bl	800cc48 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800cfb2:	2100      	movs	r1, #0
 800cfb4:	2020      	movs	r0, #32
 800cfb6:	f7ff fe47 	bl	800cc48 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800cfba:	2100      	movs	r1, #0
 800cfbc:	2002      	movs	r0, #2
 800cfbe:	f7ff fe43 	bl	800cc48 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800cfc2:	2100      	movs	r1, #0
 800cfc4:	20a1      	movs	r0, #161	@ 0xa1
 800cfc6:	f7ff fe3f 	bl	800cc48 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800cfca:	2100      	movs	r1, #0
 800cfcc:	20c0      	movs	r0, #192	@ 0xc0
 800cfce:	f7ff fe3b 	bl	800cc48 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800cfd2:	2100      	movs	r1, #0
 800cfd4:	20da      	movs	r0, #218	@ 0xda
 800cfd6:	f7ff fe37 	bl	800cc48 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800cfda:	2100      	movs	r1, #0
 800cfdc:	2012      	movs	r0, #18
 800cfde:	f7ff fe33 	bl	800cc48 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800cfe2:	2100      	movs	r1, #0
 800cfe4:	2081      	movs	r0, #129	@ 0x81
 800cfe6:	f7ff fe2f 	bl	800cc48 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800cfea:	2100      	movs	r1, #0
 800cfec:	20ef      	movs	r0, #239	@ 0xef
 800cfee:	f7ff fe2b 	bl	800cc48 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800cff2:	2100      	movs	r1, #0
 800cff4:	20d9      	movs	r0, #217	@ 0xd9
 800cff6:	f7ff fe27 	bl	800cc48 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800cffa:	2100      	movs	r1, #0
 800cffc:	20f1      	movs	r0, #241	@ 0xf1
 800cffe:	f7ff fe23 	bl	800cc48 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800d002:	2100      	movs	r1, #0
 800d004:	20db      	movs	r0, #219	@ 0xdb
 800d006:	f7ff fe1f 	bl	800cc48 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800d00a:	2100      	movs	r1, #0
 800d00c:	2030      	movs	r0, #48	@ 0x30
 800d00e:	f7ff fe1b 	bl	800cc48 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800d012:	2100      	movs	r1, #0
 800d014:	20a4      	movs	r0, #164	@ 0xa4
 800d016:	f7ff fe17 	bl	800cc48 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800d01a:	2100      	movs	r1, #0
 800d01c:	20a6      	movs	r0, #166	@ 0xa6
 800d01e:	f7ff fe13 	bl	800cc48 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800d022:	2100      	movs	r1, #0
 800d024:	20af      	movs	r0, #175	@ 0xaf
 800d026:	f7ff fe0f 	bl	800cc48 <OLED_WR_Byte>
	OLED_Clear(); 
 800d02a:	f7ff fe57 	bl	800ccdc <OLED_Clear>
 800d02e:	bf00      	nop
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	40023800 	.word	0x40023800
 800d038:	40021000 	.word	0x40021000

0800d03c <atoi>:
 800d03c:	220a      	movs	r2, #10
 800d03e:	2100      	movs	r1, #0
 800d040:	f000 b87a 	b.w	800d138 <strtol>

0800d044 <_strtol_l.constprop.0>:
 800d044:	2b24      	cmp	r3, #36	@ 0x24
 800d046:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d04a:	4686      	mov	lr, r0
 800d04c:	4690      	mov	r8, r2
 800d04e:	d801      	bhi.n	800d054 <_strtol_l.constprop.0+0x10>
 800d050:	2b01      	cmp	r3, #1
 800d052:	d106      	bne.n	800d062 <_strtol_l.constprop.0+0x1e>
 800d054:	f000 fe82 	bl	800dd5c <__errno>
 800d058:	2316      	movs	r3, #22
 800d05a:	6003      	str	r3, [r0, #0]
 800d05c:	2000      	movs	r0, #0
 800d05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d062:	4834      	ldr	r0, [pc, #208]	@ (800d134 <_strtol_l.constprop.0+0xf0>)
 800d064:	460d      	mov	r5, r1
 800d066:	462a      	mov	r2, r5
 800d068:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d06c:	5d06      	ldrb	r6, [r0, r4]
 800d06e:	f016 0608 	ands.w	r6, r6, #8
 800d072:	d1f8      	bne.n	800d066 <_strtol_l.constprop.0+0x22>
 800d074:	2c2d      	cmp	r4, #45	@ 0x2d
 800d076:	d12d      	bne.n	800d0d4 <_strtol_l.constprop.0+0x90>
 800d078:	782c      	ldrb	r4, [r5, #0]
 800d07a:	2601      	movs	r6, #1
 800d07c:	1c95      	adds	r5, r2, #2
 800d07e:	f033 0210 	bics.w	r2, r3, #16
 800d082:	d109      	bne.n	800d098 <_strtol_l.constprop.0+0x54>
 800d084:	2c30      	cmp	r4, #48	@ 0x30
 800d086:	d12a      	bne.n	800d0de <_strtol_l.constprop.0+0x9a>
 800d088:	782a      	ldrb	r2, [r5, #0]
 800d08a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d08e:	2a58      	cmp	r2, #88	@ 0x58
 800d090:	d125      	bne.n	800d0de <_strtol_l.constprop.0+0x9a>
 800d092:	786c      	ldrb	r4, [r5, #1]
 800d094:	2310      	movs	r3, #16
 800d096:	3502      	adds	r5, #2
 800d098:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d09c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	fbbc f9f3 	udiv	r9, ip, r3
 800d0a6:	4610      	mov	r0, r2
 800d0a8:	fb03 ca19 	mls	sl, r3, r9, ip
 800d0ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d0b0:	2f09      	cmp	r7, #9
 800d0b2:	d81b      	bhi.n	800d0ec <_strtol_l.constprop.0+0xa8>
 800d0b4:	463c      	mov	r4, r7
 800d0b6:	42a3      	cmp	r3, r4
 800d0b8:	dd27      	ble.n	800d10a <_strtol_l.constprop.0+0xc6>
 800d0ba:	1c57      	adds	r7, r2, #1
 800d0bc:	d007      	beq.n	800d0ce <_strtol_l.constprop.0+0x8a>
 800d0be:	4581      	cmp	r9, r0
 800d0c0:	d320      	bcc.n	800d104 <_strtol_l.constprop.0+0xc0>
 800d0c2:	d101      	bne.n	800d0c8 <_strtol_l.constprop.0+0x84>
 800d0c4:	45a2      	cmp	sl, r4
 800d0c6:	db1d      	blt.n	800d104 <_strtol_l.constprop.0+0xc0>
 800d0c8:	fb00 4003 	mla	r0, r0, r3, r4
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0d2:	e7eb      	b.n	800d0ac <_strtol_l.constprop.0+0x68>
 800d0d4:	2c2b      	cmp	r4, #43	@ 0x2b
 800d0d6:	bf04      	itt	eq
 800d0d8:	782c      	ldrbeq	r4, [r5, #0]
 800d0da:	1c95      	addeq	r5, r2, #2
 800d0dc:	e7cf      	b.n	800d07e <_strtol_l.constprop.0+0x3a>
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d1da      	bne.n	800d098 <_strtol_l.constprop.0+0x54>
 800d0e2:	2c30      	cmp	r4, #48	@ 0x30
 800d0e4:	bf0c      	ite	eq
 800d0e6:	2308      	moveq	r3, #8
 800d0e8:	230a      	movne	r3, #10
 800d0ea:	e7d5      	b.n	800d098 <_strtol_l.constprop.0+0x54>
 800d0ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d0f0:	2f19      	cmp	r7, #25
 800d0f2:	d801      	bhi.n	800d0f8 <_strtol_l.constprop.0+0xb4>
 800d0f4:	3c37      	subs	r4, #55	@ 0x37
 800d0f6:	e7de      	b.n	800d0b6 <_strtol_l.constprop.0+0x72>
 800d0f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d0fc:	2f19      	cmp	r7, #25
 800d0fe:	d804      	bhi.n	800d10a <_strtol_l.constprop.0+0xc6>
 800d100:	3c57      	subs	r4, #87	@ 0x57
 800d102:	e7d8      	b.n	800d0b6 <_strtol_l.constprop.0+0x72>
 800d104:	f04f 32ff 	mov.w	r2, #4294967295
 800d108:	e7e1      	b.n	800d0ce <_strtol_l.constprop.0+0x8a>
 800d10a:	1c53      	adds	r3, r2, #1
 800d10c:	d108      	bne.n	800d120 <_strtol_l.constprop.0+0xdc>
 800d10e:	2322      	movs	r3, #34	@ 0x22
 800d110:	f8ce 3000 	str.w	r3, [lr]
 800d114:	4660      	mov	r0, ip
 800d116:	f1b8 0f00 	cmp.w	r8, #0
 800d11a:	d0a0      	beq.n	800d05e <_strtol_l.constprop.0+0x1a>
 800d11c:	1e69      	subs	r1, r5, #1
 800d11e:	e006      	b.n	800d12e <_strtol_l.constprop.0+0xea>
 800d120:	b106      	cbz	r6, 800d124 <_strtol_l.constprop.0+0xe0>
 800d122:	4240      	negs	r0, r0
 800d124:	f1b8 0f00 	cmp.w	r8, #0
 800d128:	d099      	beq.n	800d05e <_strtol_l.constprop.0+0x1a>
 800d12a:	2a00      	cmp	r2, #0
 800d12c:	d1f6      	bne.n	800d11c <_strtol_l.constprop.0+0xd8>
 800d12e:	f8c8 1000 	str.w	r1, [r8]
 800d132:	e794      	b.n	800d05e <_strtol_l.constprop.0+0x1a>
 800d134:	08011001 	.word	0x08011001

0800d138 <strtol>:
 800d138:	4613      	mov	r3, r2
 800d13a:	460a      	mov	r2, r1
 800d13c:	4601      	mov	r1, r0
 800d13e:	4802      	ldr	r0, [pc, #8]	@ (800d148 <strtol+0x10>)
 800d140:	6800      	ldr	r0, [r0, #0]
 800d142:	f7ff bf7f 	b.w	800d044 <_strtol_l.constprop.0>
 800d146:	bf00      	nop
 800d148:	20000040 	.word	0x20000040

0800d14c <__cvt>:
 800d14c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d150:	ec57 6b10 	vmov	r6, r7, d0
 800d154:	2f00      	cmp	r7, #0
 800d156:	460c      	mov	r4, r1
 800d158:	4619      	mov	r1, r3
 800d15a:	463b      	mov	r3, r7
 800d15c:	bfbb      	ittet	lt
 800d15e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d162:	461f      	movlt	r7, r3
 800d164:	2300      	movge	r3, #0
 800d166:	232d      	movlt	r3, #45	@ 0x2d
 800d168:	700b      	strb	r3, [r1, #0]
 800d16a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d16c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d170:	4691      	mov	r9, r2
 800d172:	f023 0820 	bic.w	r8, r3, #32
 800d176:	bfbc      	itt	lt
 800d178:	4632      	movlt	r2, r6
 800d17a:	4616      	movlt	r6, r2
 800d17c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d180:	d005      	beq.n	800d18e <__cvt+0x42>
 800d182:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d186:	d100      	bne.n	800d18a <__cvt+0x3e>
 800d188:	3401      	adds	r4, #1
 800d18a:	2102      	movs	r1, #2
 800d18c:	e000      	b.n	800d190 <__cvt+0x44>
 800d18e:	2103      	movs	r1, #3
 800d190:	ab03      	add	r3, sp, #12
 800d192:	9301      	str	r3, [sp, #4]
 800d194:	ab02      	add	r3, sp, #8
 800d196:	9300      	str	r3, [sp, #0]
 800d198:	ec47 6b10 	vmov	d0, r6, r7
 800d19c:	4653      	mov	r3, sl
 800d19e:	4622      	mov	r2, r4
 800d1a0:	f000 fea2 	bl	800dee8 <_dtoa_r>
 800d1a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d1a8:	4605      	mov	r5, r0
 800d1aa:	d119      	bne.n	800d1e0 <__cvt+0x94>
 800d1ac:	f019 0f01 	tst.w	r9, #1
 800d1b0:	d00e      	beq.n	800d1d0 <__cvt+0x84>
 800d1b2:	eb00 0904 	add.w	r9, r0, r4
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	4630      	mov	r0, r6
 800d1bc:	4639      	mov	r1, r7
 800d1be:	f7f3 fc83 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1c2:	b108      	cbz	r0, 800d1c8 <__cvt+0x7c>
 800d1c4:	f8cd 900c 	str.w	r9, [sp, #12]
 800d1c8:	2230      	movs	r2, #48	@ 0x30
 800d1ca:	9b03      	ldr	r3, [sp, #12]
 800d1cc:	454b      	cmp	r3, r9
 800d1ce:	d31e      	bcc.n	800d20e <__cvt+0xc2>
 800d1d0:	9b03      	ldr	r3, [sp, #12]
 800d1d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d1d4:	1b5b      	subs	r3, r3, r5
 800d1d6:	4628      	mov	r0, r5
 800d1d8:	6013      	str	r3, [r2, #0]
 800d1da:	b004      	add	sp, #16
 800d1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d1e4:	eb00 0904 	add.w	r9, r0, r4
 800d1e8:	d1e5      	bne.n	800d1b6 <__cvt+0x6a>
 800d1ea:	7803      	ldrb	r3, [r0, #0]
 800d1ec:	2b30      	cmp	r3, #48	@ 0x30
 800d1ee:	d10a      	bne.n	800d206 <__cvt+0xba>
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	4630      	mov	r0, r6
 800d1f6:	4639      	mov	r1, r7
 800d1f8:	f7f3 fc66 	bl	8000ac8 <__aeabi_dcmpeq>
 800d1fc:	b918      	cbnz	r0, 800d206 <__cvt+0xba>
 800d1fe:	f1c4 0401 	rsb	r4, r4, #1
 800d202:	f8ca 4000 	str.w	r4, [sl]
 800d206:	f8da 3000 	ldr.w	r3, [sl]
 800d20a:	4499      	add	r9, r3
 800d20c:	e7d3      	b.n	800d1b6 <__cvt+0x6a>
 800d20e:	1c59      	adds	r1, r3, #1
 800d210:	9103      	str	r1, [sp, #12]
 800d212:	701a      	strb	r2, [r3, #0]
 800d214:	e7d9      	b.n	800d1ca <__cvt+0x7e>

0800d216 <__exponent>:
 800d216:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d218:	2900      	cmp	r1, #0
 800d21a:	bfba      	itte	lt
 800d21c:	4249      	neglt	r1, r1
 800d21e:	232d      	movlt	r3, #45	@ 0x2d
 800d220:	232b      	movge	r3, #43	@ 0x2b
 800d222:	2909      	cmp	r1, #9
 800d224:	7002      	strb	r2, [r0, #0]
 800d226:	7043      	strb	r3, [r0, #1]
 800d228:	dd29      	ble.n	800d27e <__exponent+0x68>
 800d22a:	f10d 0307 	add.w	r3, sp, #7
 800d22e:	461d      	mov	r5, r3
 800d230:	270a      	movs	r7, #10
 800d232:	461a      	mov	r2, r3
 800d234:	fbb1 f6f7 	udiv	r6, r1, r7
 800d238:	fb07 1416 	mls	r4, r7, r6, r1
 800d23c:	3430      	adds	r4, #48	@ 0x30
 800d23e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d242:	460c      	mov	r4, r1
 800d244:	2c63      	cmp	r4, #99	@ 0x63
 800d246:	f103 33ff 	add.w	r3, r3, #4294967295
 800d24a:	4631      	mov	r1, r6
 800d24c:	dcf1      	bgt.n	800d232 <__exponent+0x1c>
 800d24e:	3130      	adds	r1, #48	@ 0x30
 800d250:	1e94      	subs	r4, r2, #2
 800d252:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d256:	1c41      	adds	r1, r0, #1
 800d258:	4623      	mov	r3, r4
 800d25a:	42ab      	cmp	r3, r5
 800d25c:	d30a      	bcc.n	800d274 <__exponent+0x5e>
 800d25e:	f10d 0309 	add.w	r3, sp, #9
 800d262:	1a9b      	subs	r3, r3, r2
 800d264:	42ac      	cmp	r4, r5
 800d266:	bf88      	it	hi
 800d268:	2300      	movhi	r3, #0
 800d26a:	3302      	adds	r3, #2
 800d26c:	4403      	add	r3, r0
 800d26e:	1a18      	subs	r0, r3, r0
 800d270:	b003      	add	sp, #12
 800d272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d274:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d278:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d27c:	e7ed      	b.n	800d25a <__exponent+0x44>
 800d27e:	2330      	movs	r3, #48	@ 0x30
 800d280:	3130      	adds	r1, #48	@ 0x30
 800d282:	7083      	strb	r3, [r0, #2]
 800d284:	70c1      	strb	r1, [r0, #3]
 800d286:	1d03      	adds	r3, r0, #4
 800d288:	e7f1      	b.n	800d26e <__exponent+0x58>
	...

0800d28c <_printf_float>:
 800d28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d290:	b08d      	sub	sp, #52	@ 0x34
 800d292:	460c      	mov	r4, r1
 800d294:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d298:	4616      	mov	r6, r2
 800d29a:	461f      	mov	r7, r3
 800d29c:	4605      	mov	r5, r0
 800d29e:	f000 fd13 	bl	800dcc8 <_localeconv_r>
 800d2a2:	6803      	ldr	r3, [r0, #0]
 800d2a4:	9304      	str	r3, [sp, #16]
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7f2 ffe2 	bl	8000270 <strlen>
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2b0:	f8d8 3000 	ldr.w	r3, [r8]
 800d2b4:	9005      	str	r0, [sp, #20]
 800d2b6:	3307      	adds	r3, #7
 800d2b8:	f023 0307 	bic.w	r3, r3, #7
 800d2bc:	f103 0208 	add.w	r2, r3, #8
 800d2c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d2c4:	f8d4 b000 	ldr.w	fp, [r4]
 800d2c8:	f8c8 2000 	str.w	r2, [r8]
 800d2cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d2d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d2d4:	9307      	str	r3, [sp, #28]
 800d2d6:	f8cd 8018 	str.w	r8, [sp, #24]
 800d2da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d2de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2e2:	4b9c      	ldr	r3, [pc, #624]	@ (800d554 <_printf_float+0x2c8>)
 800d2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d2e8:	f7f3 fc20 	bl	8000b2c <__aeabi_dcmpun>
 800d2ec:	bb70      	cbnz	r0, 800d34c <_printf_float+0xc0>
 800d2ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d2f2:	4b98      	ldr	r3, [pc, #608]	@ (800d554 <_printf_float+0x2c8>)
 800d2f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d2f8:	f7f3 fbfa 	bl	8000af0 <__aeabi_dcmple>
 800d2fc:	bb30      	cbnz	r0, 800d34c <_printf_float+0xc0>
 800d2fe:	2200      	movs	r2, #0
 800d300:	2300      	movs	r3, #0
 800d302:	4640      	mov	r0, r8
 800d304:	4649      	mov	r1, r9
 800d306:	f7f3 fbe9 	bl	8000adc <__aeabi_dcmplt>
 800d30a:	b110      	cbz	r0, 800d312 <_printf_float+0x86>
 800d30c:	232d      	movs	r3, #45	@ 0x2d
 800d30e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d312:	4a91      	ldr	r2, [pc, #580]	@ (800d558 <_printf_float+0x2cc>)
 800d314:	4b91      	ldr	r3, [pc, #580]	@ (800d55c <_printf_float+0x2d0>)
 800d316:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d31a:	bf94      	ite	ls
 800d31c:	4690      	movls	r8, r2
 800d31e:	4698      	movhi	r8, r3
 800d320:	2303      	movs	r3, #3
 800d322:	6123      	str	r3, [r4, #16]
 800d324:	f02b 0304 	bic.w	r3, fp, #4
 800d328:	6023      	str	r3, [r4, #0]
 800d32a:	f04f 0900 	mov.w	r9, #0
 800d32e:	9700      	str	r7, [sp, #0]
 800d330:	4633      	mov	r3, r6
 800d332:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d334:	4621      	mov	r1, r4
 800d336:	4628      	mov	r0, r5
 800d338:	f000 f9d2 	bl	800d6e0 <_printf_common>
 800d33c:	3001      	adds	r0, #1
 800d33e:	f040 808d 	bne.w	800d45c <_printf_float+0x1d0>
 800d342:	f04f 30ff 	mov.w	r0, #4294967295
 800d346:	b00d      	add	sp, #52	@ 0x34
 800d348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d34c:	4642      	mov	r2, r8
 800d34e:	464b      	mov	r3, r9
 800d350:	4640      	mov	r0, r8
 800d352:	4649      	mov	r1, r9
 800d354:	f7f3 fbea 	bl	8000b2c <__aeabi_dcmpun>
 800d358:	b140      	cbz	r0, 800d36c <_printf_float+0xe0>
 800d35a:	464b      	mov	r3, r9
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	bfbc      	itt	lt
 800d360:	232d      	movlt	r3, #45	@ 0x2d
 800d362:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d366:	4a7e      	ldr	r2, [pc, #504]	@ (800d560 <_printf_float+0x2d4>)
 800d368:	4b7e      	ldr	r3, [pc, #504]	@ (800d564 <_printf_float+0x2d8>)
 800d36a:	e7d4      	b.n	800d316 <_printf_float+0x8a>
 800d36c:	6863      	ldr	r3, [r4, #4]
 800d36e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d372:	9206      	str	r2, [sp, #24]
 800d374:	1c5a      	adds	r2, r3, #1
 800d376:	d13b      	bne.n	800d3f0 <_printf_float+0x164>
 800d378:	2306      	movs	r3, #6
 800d37a:	6063      	str	r3, [r4, #4]
 800d37c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d380:	2300      	movs	r3, #0
 800d382:	6022      	str	r2, [r4, #0]
 800d384:	9303      	str	r3, [sp, #12]
 800d386:	ab0a      	add	r3, sp, #40	@ 0x28
 800d388:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d38c:	ab09      	add	r3, sp, #36	@ 0x24
 800d38e:	9300      	str	r3, [sp, #0]
 800d390:	6861      	ldr	r1, [r4, #4]
 800d392:	ec49 8b10 	vmov	d0, r8, r9
 800d396:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d39a:	4628      	mov	r0, r5
 800d39c:	f7ff fed6 	bl	800d14c <__cvt>
 800d3a0:	9b06      	ldr	r3, [sp, #24]
 800d3a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d3a4:	2b47      	cmp	r3, #71	@ 0x47
 800d3a6:	4680      	mov	r8, r0
 800d3a8:	d129      	bne.n	800d3fe <_printf_float+0x172>
 800d3aa:	1cc8      	adds	r0, r1, #3
 800d3ac:	db02      	blt.n	800d3b4 <_printf_float+0x128>
 800d3ae:	6863      	ldr	r3, [r4, #4]
 800d3b0:	4299      	cmp	r1, r3
 800d3b2:	dd41      	ble.n	800d438 <_printf_float+0x1ac>
 800d3b4:	f1aa 0a02 	sub.w	sl, sl, #2
 800d3b8:	fa5f fa8a 	uxtb.w	sl, sl
 800d3bc:	3901      	subs	r1, #1
 800d3be:	4652      	mov	r2, sl
 800d3c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d3c4:	9109      	str	r1, [sp, #36]	@ 0x24
 800d3c6:	f7ff ff26 	bl	800d216 <__exponent>
 800d3ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d3cc:	1813      	adds	r3, r2, r0
 800d3ce:	2a01      	cmp	r2, #1
 800d3d0:	4681      	mov	r9, r0
 800d3d2:	6123      	str	r3, [r4, #16]
 800d3d4:	dc02      	bgt.n	800d3dc <_printf_float+0x150>
 800d3d6:	6822      	ldr	r2, [r4, #0]
 800d3d8:	07d2      	lsls	r2, r2, #31
 800d3da:	d501      	bpl.n	800d3e0 <_printf_float+0x154>
 800d3dc:	3301      	adds	r3, #1
 800d3de:	6123      	str	r3, [r4, #16]
 800d3e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d0a2      	beq.n	800d32e <_printf_float+0xa2>
 800d3e8:	232d      	movs	r3, #45	@ 0x2d
 800d3ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d3ee:	e79e      	b.n	800d32e <_printf_float+0xa2>
 800d3f0:	9a06      	ldr	r2, [sp, #24]
 800d3f2:	2a47      	cmp	r2, #71	@ 0x47
 800d3f4:	d1c2      	bne.n	800d37c <_printf_float+0xf0>
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d1c0      	bne.n	800d37c <_printf_float+0xf0>
 800d3fa:	2301      	movs	r3, #1
 800d3fc:	e7bd      	b.n	800d37a <_printf_float+0xee>
 800d3fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d402:	d9db      	bls.n	800d3bc <_printf_float+0x130>
 800d404:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d408:	d118      	bne.n	800d43c <_printf_float+0x1b0>
 800d40a:	2900      	cmp	r1, #0
 800d40c:	6863      	ldr	r3, [r4, #4]
 800d40e:	dd0b      	ble.n	800d428 <_printf_float+0x19c>
 800d410:	6121      	str	r1, [r4, #16]
 800d412:	b913      	cbnz	r3, 800d41a <_printf_float+0x18e>
 800d414:	6822      	ldr	r2, [r4, #0]
 800d416:	07d0      	lsls	r0, r2, #31
 800d418:	d502      	bpl.n	800d420 <_printf_float+0x194>
 800d41a:	3301      	adds	r3, #1
 800d41c:	440b      	add	r3, r1
 800d41e:	6123      	str	r3, [r4, #16]
 800d420:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d422:	f04f 0900 	mov.w	r9, #0
 800d426:	e7db      	b.n	800d3e0 <_printf_float+0x154>
 800d428:	b913      	cbnz	r3, 800d430 <_printf_float+0x1a4>
 800d42a:	6822      	ldr	r2, [r4, #0]
 800d42c:	07d2      	lsls	r2, r2, #31
 800d42e:	d501      	bpl.n	800d434 <_printf_float+0x1a8>
 800d430:	3302      	adds	r3, #2
 800d432:	e7f4      	b.n	800d41e <_printf_float+0x192>
 800d434:	2301      	movs	r3, #1
 800d436:	e7f2      	b.n	800d41e <_printf_float+0x192>
 800d438:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d43c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d43e:	4299      	cmp	r1, r3
 800d440:	db05      	blt.n	800d44e <_printf_float+0x1c2>
 800d442:	6823      	ldr	r3, [r4, #0]
 800d444:	6121      	str	r1, [r4, #16]
 800d446:	07d8      	lsls	r0, r3, #31
 800d448:	d5ea      	bpl.n	800d420 <_printf_float+0x194>
 800d44a:	1c4b      	adds	r3, r1, #1
 800d44c:	e7e7      	b.n	800d41e <_printf_float+0x192>
 800d44e:	2900      	cmp	r1, #0
 800d450:	bfd4      	ite	le
 800d452:	f1c1 0202 	rsble	r2, r1, #2
 800d456:	2201      	movgt	r2, #1
 800d458:	4413      	add	r3, r2
 800d45a:	e7e0      	b.n	800d41e <_printf_float+0x192>
 800d45c:	6823      	ldr	r3, [r4, #0]
 800d45e:	055a      	lsls	r2, r3, #21
 800d460:	d407      	bmi.n	800d472 <_printf_float+0x1e6>
 800d462:	6923      	ldr	r3, [r4, #16]
 800d464:	4642      	mov	r2, r8
 800d466:	4631      	mov	r1, r6
 800d468:	4628      	mov	r0, r5
 800d46a:	47b8      	blx	r7
 800d46c:	3001      	adds	r0, #1
 800d46e:	d12b      	bne.n	800d4c8 <_printf_float+0x23c>
 800d470:	e767      	b.n	800d342 <_printf_float+0xb6>
 800d472:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d476:	f240 80dd 	bls.w	800d634 <_printf_float+0x3a8>
 800d47a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d47e:	2200      	movs	r2, #0
 800d480:	2300      	movs	r3, #0
 800d482:	f7f3 fb21 	bl	8000ac8 <__aeabi_dcmpeq>
 800d486:	2800      	cmp	r0, #0
 800d488:	d033      	beq.n	800d4f2 <_printf_float+0x266>
 800d48a:	4a37      	ldr	r2, [pc, #220]	@ (800d568 <_printf_float+0x2dc>)
 800d48c:	2301      	movs	r3, #1
 800d48e:	4631      	mov	r1, r6
 800d490:	4628      	mov	r0, r5
 800d492:	47b8      	blx	r7
 800d494:	3001      	adds	r0, #1
 800d496:	f43f af54 	beq.w	800d342 <_printf_float+0xb6>
 800d49a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d49e:	4543      	cmp	r3, r8
 800d4a0:	db02      	blt.n	800d4a8 <_printf_float+0x21c>
 800d4a2:	6823      	ldr	r3, [r4, #0]
 800d4a4:	07d8      	lsls	r0, r3, #31
 800d4a6:	d50f      	bpl.n	800d4c8 <_printf_float+0x23c>
 800d4a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4ac:	4631      	mov	r1, r6
 800d4ae:	4628      	mov	r0, r5
 800d4b0:	47b8      	blx	r7
 800d4b2:	3001      	adds	r0, #1
 800d4b4:	f43f af45 	beq.w	800d342 <_printf_float+0xb6>
 800d4b8:	f04f 0900 	mov.w	r9, #0
 800d4bc:	f108 38ff 	add.w	r8, r8, #4294967295
 800d4c0:	f104 0a1a 	add.w	sl, r4, #26
 800d4c4:	45c8      	cmp	r8, r9
 800d4c6:	dc09      	bgt.n	800d4dc <_printf_float+0x250>
 800d4c8:	6823      	ldr	r3, [r4, #0]
 800d4ca:	079b      	lsls	r3, r3, #30
 800d4cc:	f100 8103 	bmi.w	800d6d6 <_printf_float+0x44a>
 800d4d0:	68e0      	ldr	r0, [r4, #12]
 800d4d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d4d4:	4298      	cmp	r0, r3
 800d4d6:	bfb8      	it	lt
 800d4d8:	4618      	movlt	r0, r3
 800d4da:	e734      	b.n	800d346 <_printf_float+0xba>
 800d4dc:	2301      	movs	r3, #1
 800d4de:	4652      	mov	r2, sl
 800d4e0:	4631      	mov	r1, r6
 800d4e2:	4628      	mov	r0, r5
 800d4e4:	47b8      	blx	r7
 800d4e6:	3001      	adds	r0, #1
 800d4e8:	f43f af2b 	beq.w	800d342 <_printf_float+0xb6>
 800d4ec:	f109 0901 	add.w	r9, r9, #1
 800d4f0:	e7e8      	b.n	800d4c4 <_printf_float+0x238>
 800d4f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	dc39      	bgt.n	800d56c <_printf_float+0x2e0>
 800d4f8:	4a1b      	ldr	r2, [pc, #108]	@ (800d568 <_printf_float+0x2dc>)
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	4631      	mov	r1, r6
 800d4fe:	4628      	mov	r0, r5
 800d500:	47b8      	blx	r7
 800d502:	3001      	adds	r0, #1
 800d504:	f43f af1d 	beq.w	800d342 <_printf_float+0xb6>
 800d508:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d50c:	ea59 0303 	orrs.w	r3, r9, r3
 800d510:	d102      	bne.n	800d518 <_printf_float+0x28c>
 800d512:	6823      	ldr	r3, [r4, #0]
 800d514:	07d9      	lsls	r1, r3, #31
 800d516:	d5d7      	bpl.n	800d4c8 <_printf_float+0x23c>
 800d518:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d51c:	4631      	mov	r1, r6
 800d51e:	4628      	mov	r0, r5
 800d520:	47b8      	blx	r7
 800d522:	3001      	adds	r0, #1
 800d524:	f43f af0d 	beq.w	800d342 <_printf_float+0xb6>
 800d528:	f04f 0a00 	mov.w	sl, #0
 800d52c:	f104 0b1a 	add.w	fp, r4, #26
 800d530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d532:	425b      	negs	r3, r3
 800d534:	4553      	cmp	r3, sl
 800d536:	dc01      	bgt.n	800d53c <_printf_float+0x2b0>
 800d538:	464b      	mov	r3, r9
 800d53a:	e793      	b.n	800d464 <_printf_float+0x1d8>
 800d53c:	2301      	movs	r3, #1
 800d53e:	465a      	mov	r2, fp
 800d540:	4631      	mov	r1, r6
 800d542:	4628      	mov	r0, r5
 800d544:	47b8      	blx	r7
 800d546:	3001      	adds	r0, #1
 800d548:	f43f aefb 	beq.w	800d342 <_printf_float+0xb6>
 800d54c:	f10a 0a01 	add.w	sl, sl, #1
 800d550:	e7ee      	b.n	800d530 <_printf_float+0x2a4>
 800d552:	bf00      	nop
 800d554:	7fefffff 	.word	0x7fefffff
 800d558:	08011101 	.word	0x08011101
 800d55c:	08011105 	.word	0x08011105
 800d560:	08011109 	.word	0x08011109
 800d564:	0801110d 	.word	0x0801110d
 800d568:	08011111 	.word	0x08011111
 800d56c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d56e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d572:	4553      	cmp	r3, sl
 800d574:	bfa8      	it	ge
 800d576:	4653      	movge	r3, sl
 800d578:	2b00      	cmp	r3, #0
 800d57a:	4699      	mov	r9, r3
 800d57c:	dc36      	bgt.n	800d5ec <_printf_float+0x360>
 800d57e:	f04f 0b00 	mov.w	fp, #0
 800d582:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d586:	f104 021a 	add.w	r2, r4, #26
 800d58a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d58c:	9306      	str	r3, [sp, #24]
 800d58e:	eba3 0309 	sub.w	r3, r3, r9
 800d592:	455b      	cmp	r3, fp
 800d594:	dc31      	bgt.n	800d5fa <_printf_float+0x36e>
 800d596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d598:	459a      	cmp	sl, r3
 800d59a:	dc3a      	bgt.n	800d612 <_printf_float+0x386>
 800d59c:	6823      	ldr	r3, [r4, #0]
 800d59e:	07da      	lsls	r2, r3, #31
 800d5a0:	d437      	bmi.n	800d612 <_printf_float+0x386>
 800d5a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5a4:	ebaa 0903 	sub.w	r9, sl, r3
 800d5a8:	9b06      	ldr	r3, [sp, #24]
 800d5aa:	ebaa 0303 	sub.w	r3, sl, r3
 800d5ae:	4599      	cmp	r9, r3
 800d5b0:	bfa8      	it	ge
 800d5b2:	4699      	movge	r9, r3
 800d5b4:	f1b9 0f00 	cmp.w	r9, #0
 800d5b8:	dc33      	bgt.n	800d622 <_printf_float+0x396>
 800d5ba:	f04f 0800 	mov.w	r8, #0
 800d5be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d5c2:	f104 0b1a 	add.w	fp, r4, #26
 800d5c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5c8:	ebaa 0303 	sub.w	r3, sl, r3
 800d5cc:	eba3 0309 	sub.w	r3, r3, r9
 800d5d0:	4543      	cmp	r3, r8
 800d5d2:	f77f af79 	ble.w	800d4c8 <_printf_float+0x23c>
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	465a      	mov	r2, fp
 800d5da:	4631      	mov	r1, r6
 800d5dc:	4628      	mov	r0, r5
 800d5de:	47b8      	blx	r7
 800d5e0:	3001      	adds	r0, #1
 800d5e2:	f43f aeae 	beq.w	800d342 <_printf_float+0xb6>
 800d5e6:	f108 0801 	add.w	r8, r8, #1
 800d5ea:	e7ec      	b.n	800d5c6 <_printf_float+0x33a>
 800d5ec:	4642      	mov	r2, r8
 800d5ee:	4631      	mov	r1, r6
 800d5f0:	4628      	mov	r0, r5
 800d5f2:	47b8      	blx	r7
 800d5f4:	3001      	adds	r0, #1
 800d5f6:	d1c2      	bne.n	800d57e <_printf_float+0x2f2>
 800d5f8:	e6a3      	b.n	800d342 <_printf_float+0xb6>
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	4631      	mov	r1, r6
 800d5fe:	4628      	mov	r0, r5
 800d600:	9206      	str	r2, [sp, #24]
 800d602:	47b8      	blx	r7
 800d604:	3001      	adds	r0, #1
 800d606:	f43f ae9c 	beq.w	800d342 <_printf_float+0xb6>
 800d60a:	9a06      	ldr	r2, [sp, #24]
 800d60c:	f10b 0b01 	add.w	fp, fp, #1
 800d610:	e7bb      	b.n	800d58a <_printf_float+0x2fe>
 800d612:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d616:	4631      	mov	r1, r6
 800d618:	4628      	mov	r0, r5
 800d61a:	47b8      	blx	r7
 800d61c:	3001      	adds	r0, #1
 800d61e:	d1c0      	bne.n	800d5a2 <_printf_float+0x316>
 800d620:	e68f      	b.n	800d342 <_printf_float+0xb6>
 800d622:	9a06      	ldr	r2, [sp, #24]
 800d624:	464b      	mov	r3, r9
 800d626:	4442      	add	r2, r8
 800d628:	4631      	mov	r1, r6
 800d62a:	4628      	mov	r0, r5
 800d62c:	47b8      	blx	r7
 800d62e:	3001      	adds	r0, #1
 800d630:	d1c3      	bne.n	800d5ba <_printf_float+0x32e>
 800d632:	e686      	b.n	800d342 <_printf_float+0xb6>
 800d634:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d638:	f1ba 0f01 	cmp.w	sl, #1
 800d63c:	dc01      	bgt.n	800d642 <_printf_float+0x3b6>
 800d63e:	07db      	lsls	r3, r3, #31
 800d640:	d536      	bpl.n	800d6b0 <_printf_float+0x424>
 800d642:	2301      	movs	r3, #1
 800d644:	4642      	mov	r2, r8
 800d646:	4631      	mov	r1, r6
 800d648:	4628      	mov	r0, r5
 800d64a:	47b8      	blx	r7
 800d64c:	3001      	adds	r0, #1
 800d64e:	f43f ae78 	beq.w	800d342 <_printf_float+0xb6>
 800d652:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d656:	4631      	mov	r1, r6
 800d658:	4628      	mov	r0, r5
 800d65a:	47b8      	blx	r7
 800d65c:	3001      	adds	r0, #1
 800d65e:	f43f ae70 	beq.w	800d342 <_printf_float+0xb6>
 800d662:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d666:	2200      	movs	r2, #0
 800d668:	2300      	movs	r3, #0
 800d66a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d66e:	f7f3 fa2b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d672:	b9c0      	cbnz	r0, 800d6a6 <_printf_float+0x41a>
 800d674:	4653      	mov	r3, sl
 800d676:	f108 0201 	add.w	r2, r8, #1
 800d67a:	4631      	mov	r1, r6
 800d67c:	4628      	mov	r0, r5
 800d67e:	47b8      	blx	r7
 800d680:	3001      	adds	r0, #1
 800d682:	d10c      	bne.n	800d69e <_printf_float+0x412>
 800d684:	e65d      	b.n	800d342 <_printf_float+0xb6>
 800d686:	2301      	movs	r3, #1
 800d688:	465a      	mov	r2, fp
 800d68a:	4631      	mov	r1, r6
 800d68c:	4628      	mov	r0, r5
 800d68e:	47b8      	blx	r7
 800d690:	3001      	adds	r0, #1
 800d692:	f43f ae56 	beq.w	800d342 <_printf_float+0xb6>
 800d696:	f108 0801 	add.w	r8, r8, #1
 800d69a:	45d0      	cmp	r8, sl
 800d69c:	dbf3      	blt.n	800d686 <_printf_float+0x3fa>
 800d69e:	464b      	mov	r3, r9
 800d6a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d6a4:	e6df      	b.n	800d466 <_printf_float+0x1da>
 800d6a6:	f04f 0800 	mov.w	r8, #0
 800d6aa:	f104 0b1a 	add.w	fp, r4, #26
 800d6ae:	e7f4      	b.n	800d69a <_printf_float+0x40e>
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	4642      	mov	r2, r8
 800d6b4:	e7e1      	b.n	800d67a <_printf_float+0x3ee>
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	464a      	mov	r2, r9
 800d6ba:	4631      	mov	r1, r6
 800d6bc:	4628      	mov	r0, r5
 800d6be:	47b8      	blx	r7
 800d6c0:	3001      	adds	r0, #1
 800d6c2:	f43f ae3e 	beq.w	800d342 <_printf_float+0xb6>
 800d6c6:	f108 0801 	add.w	r8, r8, #1
 800d6ca:	68e3      	ldr	r3, [r4, #12]
 800d6cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d6ce:	1a5b      	subs	r3, r3, r1
 800d6d0:	4543      	cmp	r3, r8
 800d6d2:	dcf0      	bgt.n	800d6b6 <_printf_float+0x42a>
 800d6d4:	e6fc      	b.n	800d4d0 <_printf_float+0x244>
 800d6d6:	f04f 0800 	mov.w	r8, #0
 800d6da:	f104 0919 	add.w	r9, r4, #25
 800d6de:	e7f4      	b.n	800d6ca <_printf_float+0x43e>

0800d6e0 <_printf_common>:
 800d6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6e4:	4616      	mov	r6, r2
 800d6e6:	4698      	mov	r8, r3
 800d6e8:	688a      	ldr	r2, [r1, #8]
 800d6ea:	690b      	ldr	r3, [r1, #16]
 800d6ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	bfb8      	it	lt
 800d6f4:	4613      	movlt	r3, r2
 800d6f6:	6033      	str	r3, [r6, #0]
 800d6f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d6fc:	4607      	mov	r7, r0
 800d6fe:	460c      	mov	r4, r1
 800d700:	b10a      	cbz	r2, 800d706 <_printf_common+0x26>
 800d702:	3301      	adds	r3, #1
 800d704:	6033      	str	r3, [r6, #0]
 800d706:	6823      	ldr	r3, [r4, #0]
 800d708:	0699      	lsls	r1, r3, #26
 800d70a:	bf42      	ittt	mi
 800d70c:	6833      	ldrmi	r3, [r6, #0]
 800d70e:	3302      	addmi	r3, #2
 800d710:	6033      	strmi	r3, [r6, #0]
 800d712:	6825      	ldr	r5, [r4, #0]
 800d714:	f015 0506 	ands.w	r5, r5, #6
 800d718:	d106      	bne.n	800d728 <_printf_common+0x48>
 800d71a:	f104 0a19 	add.w	sl, r4, #25
 800d71e:	68e3      	ldr	r3, [r4, #12]
 800d720:	6832      	ldr	r2, [r6, #0]
 800d722:	1a9b      	subs	r3, r3, r2
 800d724:	42ab      	cmp	r3, r5
 800d726:	dc26      	bgt.n	800d776 <_printf_common+0x96>
 800d728:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d72c:	6822      	ldr	r2, [r4, #0]
 800d72e:	3b00      	subs	r3, #0
 800d730:	bf18      	it	ne
 800d732:	2301      	movne	r3, #1
 800d734:	0692      	lsls	r2, r2, #26
 800d736:	d42b      	bmi.n	800d790 <_printf_common+0xb0>
 800d738:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d73c:	4641      	mov	r1, r8
 800d73e:	4638      	mov	r0, r7
 800d740:	47c8      	blx	r9
 800d742:	3001      	adds	r0, #1
 800d744:	d01e      	beq.n	800d784 <_printf_common+0xa4>
 800d746:	6823      	ldr	r3, [r4, #0]
 800d748:	6922      	ldr	r2, [r4, #16]
 800d74a:	f003 0306 	and.w	r3, r3, #6
 800d74e:	2b04      	cmp	r3, #4
 800d750:	bf02      	ittt	eq
 800d752:	68e5      	ldreq	r5, [r4, #12]
 800d754:	6833      	ldreq	r3, [r6, #0]
 800d756:	1aed      	subeq	r5, r5, r3
 800d758:	68a3      	ldr	r3, [r4, #8]
 800d75a:	bf0c      	ite	eq
 800d75c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d760:	2500      	movne	r5, #0
 800d762:	4293      	cmp	r3, r2
 800d764:	bfc4      	itt	gt
 800d766:	1a9b      	subgt	r3, r3, r2
 800d768:	18ed      	addgt	r5, r5, r3
 800d76a:	2600      	movs	r6, #0
 800d76c:	341a      	adds	r4, #26
 800d76e:	42b5      	cmp	r5, r6
 800d770:	d11a      	bne.n	800d7a8 <_printf_common+0xc8>
 800d772:	2000      	movs	r0, #0
 800d774:	e008      	b.n	800d788 <_printf_common+0xa8>
 800d776:	2301      	movs	r3, #1
 800d778:	4652      	mov	r2, sl
 800d77a:	4641      	mov	r1, r8
 800d77c:	4638      	mov	r0, r7
 800d77e:	47c8      	blx	r9
 800d780:	3001      	adds	r0, #1
 800d782:	d103      	bne.n	800d78c <_printf_common+0xac>
 800d784:	f04f 30ff 	mov.w	r0, #4294967295
 800d788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d78c:	3501      	adds	r5, #1
 800d78e:	e7c6      	b.n	800d71e <_printf_common+0x3e>
 800d790:	18e1      	adds	r1, r4, r3
 800d792:	1c5a      	adds	r2, r3, #1
 800d794:	2030      	movs	r0, #48	@ 0x30
 800d796:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d79a:	4422      	add	r2, r4
 800d79c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d7a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d7a4:	3302      	adds	r3, #2
 800d7a6:	e7c7      	b.n	800d738 <_printf_common+0x58>
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	4622      	mov	r2, r4
 800d7ac:	4641      	mov	r1, r8
 800d7ae:	4638      	mov	r0, r7
 800d7b0:	47c8      	blx	r9
 800d7b2:	3001      	adds	r0, #1
 800d7b4:	d0e6      	beq.n	800d784 <_printf_common+0xa4>
 800d7b6:	3601      	adds	r6, #1
 800d7b8:	e7d9      	b.n	800d76e <_printf_common+0x8e>
	...

0800d7bc <_printf_i>:
 800d7bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7c0:	7e0f      	ldrb	r7, [r1, #24]
 800d7c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d7c4:	2f78      	cmp	r7, #120	@ 0x78
 800d7c6:	4691      	mov	r9, r2
 800d7c8:	4680      	mov	r8, r0
 800d7ca:	460c      	mov	r4, r1
 800d7cc:	469a      	mov	sl, r3
 800d7ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d7d2:	d807      	bhi.n	800d7e4 <_printf_i+0x28>
 800d7d4:	2f62      	cmp	r7, #98	@ 0x62
 800d7d6:	d80a      	bhi.n	800d7ee <_printf_i+0x32>
 800d7d8:	2f00      	cmp	r7, #0
 800d7da:	f000 80d2 	beq.w	800d982 <_printf_i+0x1c6>
 800d7de:	2f58      	cmp	r7, #88	@ 0x58
 800d7e0:	f000 80b9 	beq.w	800d956 <_printf_i+0x19a>
 800d7e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d7e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d7ec:	e03a      	b.n	800d864 <_printf_i+0xa8>
 800d7ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d7f2:	2b15      	cmp	r3, #21
 800d7f4:	d8f6      	bhi.n	800d7e4 <_printf_i+0x28>
 800d7f6:	a101      	add	r1, pc, #4	@ (adr r1, 800d7fc <_printf_i+0x40>)
 800d7f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d7fc:	0800d855 	.word	0x0800d855
 800d800:	0800d869 	.word	0x0800d869
 800d804:	0800d7e5 	.word	0x0800d7e5
 800d808:	0800d7e5 	.word	0x0800d7e5
 800d80c:	0800d7e5 	.word	0x0800d7e5
 800d810:	0800d7e5 	.word	0x0800d7e5
 800d814:	0800d869 	.word	0x0800d869
 800d818:	0800d7e5 	.word	0x0800d7e5
 800d81c:	0800d7e5 	.word	0x0800d7e5
 800d820:	0800d7e5 	.word	0x0800d7e5
 800d824:	0800d7e5 	.word	0x0800d7e5
 800d828:	0800d969 	.word	0x0800d969
 800d82c:	0800d893 	.word	0x0800d893
 800d830:	0800d923 	.word	0x0800d923
 800d834:	0800d7e5 	.word	0x0800d7e5
 800d838:	0800d7e5 	.word	0x0800d7e5
 800d83c:	0800d98b 	.word	0x0800d98b
 800d840:	0800d7e5 	.word	0x0800d7e5
 800d844:	0800d893 	.word	0x0800d893
 800d848:	0800d7e5 	.word	0x0800d7e5
 800d84c:	0800d7e5 	.word	0x0800d7e5
 800d850:	0800d92b 	.word	0x0800d92b
 800d854:	6833      	ldr	r3, [r6, #0]
 800d856:	1d1a      	adds	r2, r3, #4
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	6032      	str	r2, [r6, #0]
 800d85c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d860:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d864:	2301      	movs	r3, #1
 800d866:	e09d      	b.n	800d9a4 <_printf_i+0x1e8>
 800d868:	6833      	ldr	r3, [r6, #0]
 800d86a:	6820      	ldr	r0, [r4, #0]
 800d86c:	1d19      	adds	r1, r3, #4
 800d86e:	6031      	str	r1, [r6, #0]
 800d870:	0606      	lsls	r6, r0, #24
 800d872:	d501      	bpl.n	800d878 <_printf_i+0xbc>
 800d874:	681d      	ldr	r5, [r3, #0]
 800d876:	e003      	b.n	800d880 <_printf_i+0xc4>
 800d878:	0645      	lsls	r5, r0, #25
 800d87a:	d5fb      	bpl.n	800d874 <_printf_i+0xb8>
 800d87c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d880:	2d00      	cmp	r5, #0
 800d882:	da03      	bge.n	800d88c <_printf_i+0xd0>
 800d884:	232d      	movs	r3, #45	@ 0x2d
 800d886:	426d      	negs	r5, r5
 800d888:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d88c:	4859      	ldr	r0, [pc, #356]	@ (800d9f4 <_printf_i+0x238>)
 800d88e:	230a      	movs	r3, #10
 800d890:	e011      	b.n	800d8b6 <_printf_i+0xfa>
 800d892:	6821      	ldr	r1, [r4, #0]
 800d894:	6833      	ldr	r3, [r6, #0]
 800d896:	0608      	lsls	r0, r1, #24
 800d898:	f853 5b04 	ldr.w	r5, [r3], #4
 800d89c:	d402      	bmi.n	800d8a4 <_printf_i+0xe8>
 800d89e:	0649      	lsls	r1, r1, #25
 800d8a0:	bf48      	it	mi
 800d8a2:	b2ad      	uxthmi	r5, r5
 800d8a4:	2f6f      	cmp	r7, #111	@ 0x6f
 800d8a6:	4853      	ldr	r0, [pc, #332]	@ (800d9f4 <_printf_i+0x238>)
 800d8a8:	6033      	str	r3, [r6, #0]
 800d8aa:	bf14      	ite	ne
 800d8ac:	230a      	movne	r3, #10
 800d8ae:	2308      	moveq	r3, #8
 800d8b0:	2100      	movs	r1, #0
 800d8b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d8b6:	6866      	ldr	r6, [r4, #4]
 800d8b8:	60a6      	str	r6, [r4, #8]
 800d8ba:	2e00      	cmp	r6, #0
 800d8bc:	bfa2      	ittt	ge
 800d8be:	6821      	ldrge	r1, [r4, #0]
 800d8c0:	f021 0104 	bicge.w	r1, r1, #4
 800d8c4:	6021      	strge	r1, [r4, #0]
 800d8c6:	b90d      	cbnz	r5, 800d8cc <_printf_i+0x110>
 800d8c8:	2e00      	cmp	r6, #0
 800d8ca:	d04b      	beq.n	800d964 <_printf_i+0x1a8>
 800d8cc:	4616      	mov	r6, r2
 800d8ce:	fbb5 f1f3 	udiv	r1, r5, r3
 800d8d2:	fb03 5711 	mls	r7, r3, r1, r5
 800d8d6:	5dc7      	ldrb	r7, [r0, r7]
 800d8d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d8dc:	462f      	mov	r7, r5
 800d8de:	42bb      	cmp	r3, r7
 800d8e0:	460d      	mov	r5, r1
 800d8e2:	d9f4      	bls.n	800d8ce <_printf_i+0x112>
 800d8e4:	2b08      	cmp	r3, #8
 800d8e6:	d10b      	bne.n	800d900 <_printf_i+0x144>
 800d8e8:	6823      	ldr	r3, [r4, #0]
 800d8ea:	07df      	lsls	r7, r3, #31
 800d8ec:	d508      	bpl.n	800d900 <_printf_i+0x144>
 800d8ee:	6923      	ldr	r3, [r4, #16]
 800d8f0:	6861      	ldr	r1, [r4, #4]
 800d8f2:	4299      	cmp	r1, r3
 800d8f4:	bfde      	ittt	le
 800d8f6:	2330      	movle	r3, #48	@ 0x30
 800d8f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d8fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d900:	1b92      	subs	r2, r2, r6
 800d902:	6122      	str	r2, [r4, #16]
 800d904:	f8cd a000 	str.w	sl, [sp]
 800d908:	464b      	mov	r3, r9
 800d90a:	aa03      	add	r2, sp, #12
 800d90c:	4621      	mov	r1, r4
 800d90e:	4640      	mov	r0, r8
 800d910:	f7ff fee6 	bl	800d6e0 <_printf_common>
 800d914:	3001      	adds	r0, #1
 800d916:	d14a      	bne.n	800d9ae <_printf_i+0x1f2>
 800d918:	f04f 30ff 	mov.w	r0, #4294967295
 800d91c:	b004      	add	sp, #16
 800d91e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d922:	6823      	ldr	r3, [r4, #0]
 800d924:	f043 0320 	orr.w	r3, r3, #32
 800d928:	6023      	str	r3, [r4, #0]
 800d92a:	4833      	ldr	r0, [pc, #204]	@ (800d9f8 <_printf_i+0x23c>)
 800d92c:	2778      	movs	r7, #120	@ 0x78
 800d92e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d932:	6823      	ldr	r3, [r4, #0]
 800d934:	6831      	ldr	r1, [r6, #0]
 800d936:	061f      	lsls	r7, r3, #24
 800d938:	f851 5b04 	ldr.w	r5, [r1], #4
 800d93c:	d402      	bmi.n	800d944 <_printf_i+0x188>
 800d93e:	065f      	lsls	r7, r3, #25
 800d940:	bf48      	it	mi
 800d942:	b2ad      	uxthmi	r5, r5
 800d944:	6031      	str	r1, [r6, #0]
 800d946:	07d9      	lsls	r1, r3, #31
 800d948:	bf44      	itt	mi
 800d94a:	f043 0320 	orrmi.w	r3, r3, #32
 800d94e:	6023      	strmi	r3, [r4, #0]
 800d950:	b11d      	cbz	r5, 800d95a <_printf_i+0x19e>
 800d952:	2310      	movs	r3, #16
 800d954:	e7ac      	b.n	800d8b0 <_printf_i+0xf4>
 800d956:	4827      	ldr	r0, [pc, #156]	@ (800d9f4 <_printf_i+0x238>)
 800d958:	e7e9      	b.n	800d92e <_printf_i+0x172>
 800d95a:	6823      	ldr	r3, [r4, #0]
 800d95c:	f023 0320 	bic.w	r3, r3, #32
 800d960:	6023      	str	r3, [r4, #0]
 800d962:	e7f6      	b.n	800d952 <_printf_i+0x196>
 800d964:	4616      	mov	r6, r2
 800d966:	e7bd      	b.n	800d8e4 <_printf_i+0x128>
 800d968:	6833      	ldr	r3, [r6, #0]
 800d96a:	6825      	ldr	r5, [r4, #0]
 800d96c:	6961      	ldr	r1, [r4, #20]
 800d96e:	1d18      	adds	r0, r3, #4
 800d970:	6030      	str	r0, [r6, #0]
 800d972:	062e      	lsls	r6, r5, #24
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	d501      	bpl.n	800d97c <_printf_i+0x1c0>
 800d978:	6019      	str	r1, [r3, #0]
 800d97a:	e002      	b.n	800d982 <_printf_i+0x1c6>
 800d97c:	0668      	lsls	r0, r5, #25
 800d97e:	d5fb      	bpl.n	800d978 <_printf_i+0x1bc>
 800d980:	8019      	strh	r1, [r3, #0]
 800d982:	2300      	movs	r3, #0
 800d984:	6123      	str	r3, [r4, #16]
 800d986:	4616      	mov	r6, r2
 800d988:	e7bc      	b.n	800d904 <_printf_i+0x148>
 800d98a:	6833      	ldr	r3, [r6, #0]
 800d98c:	1d1a      	adds	r2, r3, #4
 800d98e:	6032      	str	r2, [r6, #0]
 800d990:	681e      	ldr	r6, [r3, #0]
 800d992:	6862      	ldr	r2, [r4, #4]
 800d994:	2100      	movs	r1, #0
 800d996:	4630      	mov	r0, r6
 800d998:	f7f2 fc1a 	bl	80001d0 <memchr>
 800d99c:	b108      	cbz	r0, 800d9a2 <_printf_i+0x1e6>
 800d99e:	1b80      	subs	r0, r0, r6
 800d9a0:	6060      	str	r0, [r4, #4]
 800d9a2:	6863      	ldr	r3, [r4, #4]
 800d9a4:	6123      	str	r3, [r4, #16]
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d9ac:	e7aa      	b.n	800d904 <_printf_i+0x148>
 800d9ae:	6923      	ldr	r3, [r4, #16]
 800d9b0:	4632      	mov	r2, r6
 800d9b2:	4649      	mov	r1, r9
 800d9b4:	4640      	mov	r0, r8
 800d9b6:	47d0      	blx	sl
 800d9b8:	3001      	adds	r0, #1
 800d9ba:	d0ad      	beq.n	800d918 <_printf_i+0x15c>
 800d9bc:	6823      	ldr	r3, [r4, #0]
 800d9be:	079b      	lsls	r3, r3, #30
 800d9c0:	d413      	bmi.n	800d9ea <_printf_i+0x22e>
 800d9c2:	68e0      	ldr	r0, [r4, #12]
 800d9c4:	9b03      	ldr	r3, [sp, #12]
 800d9c6:	4298      	cmp	r0, r3
 800d9c8:	bfb8      	it	lt
 800d9ca:	4618      	movlt	r0, r3
 800d9cc:	e7a6      	b.n	800d91c <_printf_i+0x160>
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	4632      	mov	r2, r6
 800d9d2:	4649      	mov	r1, r9
 800d9d4:	4640      	mov	r0, r8
 800d9d6:	47d0      	blx	sl
 800d9d8:	3001      	adds	r0, #1
 800d9da:	d09d      	beq.n	800d918 <_printf_i+0x15c>
 800d9dc:	3501      	adds	r5, #1
 800d9de:	68e3      	ldr	r3, [r4, #12]
 800d9e0:	9903      	ldr	r1, [sp, #12]
 800d9e2:	1a5b      	subs	r3, r3, r1
 800d9e4:	42ab      	cmp	r3, r5
 800d9e6:	dcf2      	bgt.n	800d9ce <_printf_i+0x212>
 800d9e8:	e7eb      	b.n	800d9c2 <_printf_i+0x206>
 800d9ea:	2500      	movs	r5, #0
 800d9ec:	f104 0619 	add.w	r6, r4, #25
 800d9f0:	e7f5      	b.n	800d9de <_printf_i+0x222>
 800d9f2:	bf00      	nop
 800d9f4:	08011113 	.word	0x08011113
 800d9f8:	08011124 	.word	0x08011124

0800d9fc <std>:
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	b510      	push	{r4, lr}
 800da00:	4604      	mov	r4, r0
 800da02:	e9c0 3300 	strd	r3, r3, [r0]
 800da06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800da0a:	6083      	str	r3, [r0, #8]
 800da0c:	8181      	strh	r1, [r0, #12]
 800da0e:	6643      	str	r3, [r0, #100]	@ 0x64
 800da10:	81c2      	strh	r2, [r0, #14]
 800da12:	6183      	str	r3, [r0, #24]
 800da14:	4619      	mov	r1, r3
 800da16:	2208      	movs	r2, #8
 800da18:	305c      	adds	r0, #92	@ 0x5c
 800da1a:	f000 f928 	bl	800dc6e <memset>
 800da1e:	4b0d      	ldr	r3, [pc, #52]	@ (800da54 <std+0x58>)
 800da20:	6263      	str	r3, [r4, #36]	@ 0x24
 800da22:	4b0d      	ldr	r3, [pc, #52]	@ (800da58 <std+0x5c>)
 800da24:	62a3      	str	r3, [r4, #40]	@ 0x28
 800da26:	4b0d      	ldr	r3, [pc, #52]	@ (800da5c <std+0x60>)
 800da28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800da2a:	4b0d      	ldr	r3, [pc, #52]	@ (800da60 <std+0x64>)
 800da2c:	6323      	str	r3, [r4, #48]	@ 0x30
 800da2e:	4b0d      	ldr	r3, [pc, #52]	@ (800da64 <std+0x68>)
 800da30:	6224      	str	r4, [r4, #32]
 800da32:	429c      	cmp	r4, r3
 800da34:	d006      	beq.n	800da44 <std+0x48>
 800da36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800da3a:	4294      	cmp	r4, r2
 800da3c:	d002      	beq.n	800da44 <std+0x48>
 800da3e:	33d0      	adds	r3, #208	@ 0xd0
 800da40:	429c      	cmp	r4, r3
 800da42:	d105      	bne.n	800da50 <std+0x54>
 800da44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800da48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da4c:	f000 b9b0 	b.w	800ddb0 <__retarget_lock_init_recursive>
 800da50:	bd10      	pop	{r4, pc}
 800da52:	bf00      	nop
 800da54:	0800dbe9 	.word	0x0800dbe9
 800da58:	0800dc0b 	.word	0x0800dc0b
 800da5c:	0800dc43 	.word	0x0800dc43
 800da60:	0800dc67 	.word	0x0800dc67
 800da64:	20005354 	.word	0x20005354

0800da68 <stdio_exit_handler>:
 800da68:	4a02      	ldr	r2, [pc, #8]	@ (800da74 <stdio_exit_handler+0xc>)
 800da6a:	4903      	ldr	r1, [pc, #12]	@ (800da78 <stdio_exit_handler+0x10>)
 800da6c:	4803      	ldr	r0, [pc, #12]	@ (800da7c <stdio_exit_handler+0x14>)
 800da6e:	f000 b869 	b.w	800db44 <_fwalk_sglue>
 800da72:	bf00      	nop
 800da74:	20000034 	.word	0x20000034
 800da78:	0800f72d 	.word	0x0800f72d
 800da7c:	20000044 	.word	0x20000044

0800da80 <cleanup_stdio>:
 800da80:	6841      	ldr	r1, [r0, #4]
 800da82:	4b0c      	ldr	r3, [pc, #48]	@ (800dab4 <cleanup_stdio+0x34>)
 800da84:	4299      	cmp	r1, r3
 800da86:	b510      	push	{r4, lr}
 800da88:	4604      	mov	r4, r0
 800da8a:	d001      	beq.n	800da90 <cleanup_stdio+0x10>
 800da8c:	f001 fe4e 	bl	800f72c <_fflush_r>
 800da90:	68a1      	ldr	r1, [r4, #8]
 800da92:	4b09      	ldr	r3, [pc, #36]	@ (800dab8 <cleanup_stdio+0x38>)
 800da94:	4299      	cmp	r1, r3
 800da96:	d002      	beq.n	800da9e <cleanup_stdio+0x1e>
 800da98:	4620      	mov	r0, r4
 800da9a:	f001 fe47 	bl	800f72c <_fflush_r>
 800da9e:	68e1      	ldr	r1, [r4, #12]
 800daa0:	4b06      	ldr	r3, [pc, #24]	@ (800dabc <cleanup_stdio+0x3c>)
 800daa2:	4299      	cmp	r1, r3
 800daa4:	d004      	beq.n	800dab0 <cleanup_stdio+0x30>
 800daa6:	4620      	mov	r0, r4
 800daa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800daac:	f001 be3e 	b.w	800f72c <_fflush_r>
 800dab0:	bd10      	pop	{r4, pc}
 800dab2:	bf00      	nop
 800dab4:	20005354 	.word	0x20005354
 800dab8:	200053bc 	.word	0x200053bc
 800dabc:	20005424 	.word	0x20005424

0800dac0 <global_stdio_init.part.0>:
 800dac0:	b510      	push	{r4, lr}
 800dac2:	4b0b      	ldr	r3, [pc, #44]	@ (800daf0 <global_stdio_init.part.0+0x30>)
 800dac4:	4c0b      	ldr	r4, [pc, #44]	@ (800daf4 <global_stdio_init.part.0+0x34>)
 800dac6:	4a0c      	ldr	r2, [pc, #48]	@ (800daf8 <global_stdio_init.part.0+0x38>)
 800dac8:	601a      	str	r2, [r3, #0]
 800daca:	4620      	mov	r0, r4
 800dacc:	2200      	movs	r2, #0
 800dace:	2104      	movs	r1, #4
 800dad0:	f7ff ff94 	bl	800d9fc <std>
 800dad4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dad8:	2201      	movs	r2, #1
 800dada:	2109      	movs	r1, #9
 800dadc:	f7ff ff8e 	bl	800d9fc <std>
 800dae0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dae4:	2202      	movs	r2, #2
 800dae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800daea:	2112      	movs	r1, #18
 800daec:	f7ff bf86 	b.w	800d9fc <std>
 800daf0:	2000548c 	.word	0x2000548c
 800daf4:	20005354 	.word	0x20005354
 800daf8:	0800da69 	.word	0x0800da69

0800dafc <__sfp_lock_acquire>:
 800dafc:	4801      	ldr	r0, [pc, #4]	@ (800db04 <__sfp_lock_acquire+0x8>)
 800dafe:	f000 b958 	b.w	800ddb2 <__retarget_lock_acquire_recursive>
 800db02:	bf00      	nop
 800db04:	20005495 	.word	0x20005495

0800db08 <__sfp_lock_release>:
 800db08:	4801      	ldr	r0, [pc, #4]	@ (800db10 <__sfp_lock_release+0x8>)
 800db0a:	f000 b953 	b.w	800ddb4 <__retarget_lock_release_recursive>
 800db0e:	bf00      	nop
 800db10:	20005495 	.word	0x20005495

0800db14 <__sinit>:
 800db14:	b510      	push	{r4, lr}
 800db16:	4604      	mov	r4, r0
 800db18:	f7ff fff0 	bl	800dafc <__sfp_lock_acquire>
 800db1c:	6a23      	ldr	r3, [r4, #32]
 800db1e:	b11b      	cbz	r3, 800db28 <__sinit+0x14>
 800db20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db24:	f7ff bff0 	b.w	800db08 <__sfp_lock_release>
 800db28:	4b04      	ldr	r3, [pc, #16]	@ (800db3c <__sinit+0x28>)
 800db2a:	6223      	str	r3, [r4, #32]
 800db2c:	4b04      	ldr	r3, [pc, #16]	@ (800db40 <__sinit+0x2c>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d1f5      	bne.n	800db20 <__sinit+0xc>
 800db34:	f7ff ffc4 	bl	800dac0 <global_stdio_init.part.0>
 800db38:	e7f2      	b.n	800db20 <__sinit+0xc>
 800db3a:	bf00      	nop
 800db3c:	0800da81 	.word	0x0800da81
 800db40:	2000548c 	.word	0x2000548c

0800db44 <_fwalk_sglue>:
 800db44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db48:	4607      	mov	r7, r0
 800db4a:	4688      	mov	r8, r1
 800db4c:	4614      	mov	r4, r2
 800db4e:	2600      	movs	r6, #0
 800db50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800db54:	f1b9 0901 	subs.w	r9, r9, #1
 800db58:	d505      	bpl.n	800db66 <_fwalk_sglue+0x22>
 800db5a:	6824      	ldr	r4, [r4, #0]
 800db5c:	2c00      	cmp	r4, #0
 800db5e:	d1f7      	bne.n	800db50 <_fwalk_sglue+0xc>
 800db60:	4630      	mov	r0, r6
 800db62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db66:	89ab      	ldrh	r3, [r5, #12]
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d907      	bls.n	800db7c <_fwalk_sglue+0x38>
 800db6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db70:	3301      	adds	r3, #1
 800db72:	d003      	beq.n	800db7c <_fwalk_sglue+0x38>
 800db74:	4629      	mov	r1, r5
 800db76:	4638      	mov	r0, r7
 800db78:	47c0      	blx	r8
 800db7a:	4306      	orrs	r6, r0
 800db7c:	3568      	adds	r5, #104	@ 0x68
 800db7e:	e7e9      	b.n	800db54 <_fwalk_sglue+0x10>

0800db80 <sniprintf>:
 800db80:	b40c      	push	{r2, r3}
 800db82:	b530      	push	{r4, r5, lr}
 800db84:	4b17      	ldr	r3, [pc, #92]	@ (800dbe4 <sniprintf+0x64>)
 800db86:	1e0c      	subs	r4, r1, #0
 800db88:	681d      	ldr	r5, [r3, #0]
 800db8a:	b09d      	sub	sp, #116	@ 0x74
 800db8c:	da08      	bge.n	800dba0 <sniprintf+0x20>
 800db8e:	238b      	movs	r3, #139	@ 0x8b
 800db90:	602b      	str	r3, [r5, #0]
 800db92:	f04f 30ff 	mov.w	r0, #4294967295
 800db96:	b01d      	add	sp, #116	@ 0x74
 800db98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db9c:	b002      	add	sp, #8
 800db9e:	4770      	bx	lr
 800dba0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800dba4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dba8:	bf14      	ite	ne
 800dbaa:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dbae:	4623      	moveq	r3, r4
 800dbb0:	9304      	str	r3, [sp, #16]
 800dbb2:	9307      	str	r3, [sp, #28]
 800dbb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dbb8:	9002      	str	r0, [sp, #8]
 800dbba:	9006      	str	r0, [sp, #24]
 800dbbc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dbc0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800dbc2:	ab21      	add	r3, sp, #132	@ 0x84
 800dbc4:	a902      	add	r1, sp, #8
 800dbc6:	4628      	mov	r0, r5
 800dbc8:	9301      	str	r3, [sp, #4]
 800dbca:	f001 fc2f 	bl	800f42c <_svfiprintf_r>
 800dbce:	1c43      	adds	r3, r0, #1
 800dbd0:	bfbc      	itt	lt
 800dbd2:	238b      	movlt	r3, #139	@ 0x8b
 800dbd4:	602b      	strlt	r3, [r5, #0]
 800dbd6:	2c00      	cmp	r4, #0
 800dbd8:	d0dd      	beq.n	800db96 <sniprintf+0x16>
 800dbda:	9b02      	ldr	r3, [sp, #8]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	701a      	strb	r2, [r3, #0]
 800dbe0:	e7d9      	b.n	800db96 <sniprintf+0x16>
 800dbe2:	bf00      	nop
 800dbe4:	20000040 	.word	0x20000040

0800dbe8 <__sread>:
 800dbe8:	b510      	push	{r4, lr}
 800dbea:	460c      	mov	r4, r1
 800dbec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbf0:	f000 f890 	bl	800dd14 <_read_r>
 800dbf4:	2800      	cmp	r0, #0
 800dbf6:	bfab      	itete	ge
 800dbf8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dbfa:	89a3      	ldrhlt	r3, [r4, #12]
 800dbfc:	181b      	addge	r3, r3, r0
 800dbfe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dc02:	bfac      	ite	ge
 800dc04:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dc06:	81a3      	strhlt	r3, [r4, #12]
 800dc08:	bd10      	pop	{r4, pc}

0800dc0a <__swrite>:
 800dc0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc0e:	461f      	mov	r7, r3
 800dc10:	898b      	ldrh	r3, [r1, #12]
 800dc12:	05db      	lsls	r3, r3, #23
 800dc14:	4605      	mov	r5, r0
 800dc16:	460c      	mov	r4, r1
 800dc18:	4616      	mov	r6, r2
 800dc1a:	d505      	bpl.n	800dc28 <__swrite+0x1e>
 800dc1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc20:	2302      	movs	r3, #2
 800dc22:	2200      	movs	r2, #0
 800dc24:	f000 f864 	bl	800dcf0 <_lseek_r>
 800dc28:	89a3      	ldrh	r3, [r4, #12]
 800dc2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dc32:	81a3      	strh	r3, [r4, #12]
 800dc34:	4632      	mov	r2, r6
 800dc36:	463b      	mov	r3, r7
 800dc38:	4628      	mov	r0, r5
 800dc3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc3e:	f000 b87b 	b.w	800dd38 <_write_r>

0800dc42 <__sseek>:
 800dc42:	b510      	push	{r4, lr}
 800dc44:	460c      	mov	r4, r1
 800dc46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc4a:	f000 f851 	bl	800dcf0 <_lseek_r>
 800dc4e:	1c43      	adds	r3, r0, #1
 800dc50:	89a3      	ldrh	r3, [r4, #12]
 800dc52:	bf15      	itete	ne
 800dc54:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dc56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dc5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dc5e:	81a3      	strheq	r3, [r4, #12]
 800dc60:	bf18      	it	ne
 800dc62:	81a3      	strhne	r3, [r4, #12]
 800dc64:	bd10      	pop	{r4, pc}

0800dc66 <__sclose>:
 800dc66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc6a:	f000 b831 	b.w	800dcd0 <_close_r>

0800dc6e <memset>:
 800dc6e:	4402      	add	r2, r0
 800dc70:	4603      	mov	r3, r0
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d100      	bne.n	800dc78 <memset+0xa>
 800dc76:	4770      	bx	lr
 800dc78:	f803 1b01 	strb.w	r1, [r3], #1
 800dc7c:	e7f9      	b.n	800dc72 <memset+0x4>

0800dc7e <strncmp>:
 800dc7e:	b510      	push	{r4, lr}
 800dc80:	b16a      	cbz	r2, 800dc9e <strncmp+0x20>
 800dc82:	3901      	subs	r1, #1
 800dc84:	1884      	adds	r4, r0, r2
 800dc86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc8a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d103      	bne.n	800dc9a <strncmp+0x1c>
 800dc92:	42a0      	cmp	r0, r4
 800dc94:	d001      	beq.n	800dc9a <strncmp+0x1c>
 800dc96:	2a00      	cmp	r2, #0
 800dc98:	d1f5      	bne.n	800dc86 <strncmp+0x8>
 800dc9a:	1ad0      	subs	r0, r2, r3
 800dc9c:	bd10      	pop	{r4, pc}
 800dc9e:	4610      	mov	r0, r2
 800dca0:	e7fc      	b.n	800dc9c <strncmp+0x1e>

0800dca2 <strncpy>:
 800dca2:	b510      	push	{r4, lr}
 800dca4:	3901      	subs	r1, #1
 800dca6:	4603      	mov	r3, r0
 800dca8:	b132      	cbz	r2, 800dcb8 <strncpy+0x16>
 800dcaa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dcae:	f803 4b01 	strb.w	r4, [r3], #1
 800dcb2:	3a01      	subs	r2, #1
 800dcb4:	2c00      	cmp	r4, #0
 800dcb6:	d1f7      	bne.n	800dca8 <strncpy+0x6>
 800dcb8:	441a      	add	r2, r3
 800dcba:	2100      	movs	r1, #0
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	d100      	bne.n	800dcc2 <strncpy+0x20>
 800dcc0:	bd10      	pop	{r4, pc}
 800dcc2:	f803 1b01 	strb.w	r1, [r3], #1
 800dcc6:	e7f9      	b.n	800dcbc <strncpy+0x1a>

0800dcc8 <_localeconv_r>:
 800dcc8:	4800      	ldr	r0, [pc, #0]	@ (800dccc <_localeconv_r+0x4>)
 800dcca:	4770      	bx	lr
 800dccc:	20000180 	.word	0x20000180

0800dcd0 <_close_r>:
 800dcd0:	b538      	push	{r3, r4, r5, lr}
 800dcd2:	4d06      	ldr	r5, [pc, #24]	@ (800dcec <_close_r+0x1c>)
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	4604      	mov	r4, r0
 800dcd8:	4608      	mov	r0, r1
 800dcda:	602b      	str	r3, [r5, #0]
 800dcdc:	f7f6 fa4e 	bl	800417c <_close>
 800dce0:	1c43      	adds	r3, r0, #1
 800dce2:	d102      	bne.n	800dcea <_close_r+0x1a>
 800dce4:	682b      	ldr	r3, [r5, #0]
 800dce6:	b103      	cbz	r3, 800dcea <_close_r+0x1a>
 800dce8:	6023      	str	r3, [r4, #0]
 800dcea:	bd38      	pop	{r3, r4, r5, pc}
 800dcec:	20005490 	.word	0x20005490

0800dcf0 <_lseek_r>:
 800dcf0:	b538      	push	{r3, r4, r5, lr}
 800dcf2:	4d07      	ldr	r5, [pc, #28]	@ (800dd10 <_lseek_r+0x20>)
 800dcf4:	4604      	mov	r4, r0
 800dcf6:	4608      	mov	r0, r1
 800dcf8:	4611      	mov	r1, r2
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	602a      	str	r2, [r5, #0]
 800dcfe:	461a      	mov	r2, r3
 800dd00:	f7f6 fa63 	bl	80041ca <_lseek>
 800dd04:	1c43      	adds	r3, r0, #1
 800dd06:	d102      	bne.n	800dd0e <_lseek_r+0x1e>
 800dd08:	682b      	ldr	r3, [r5, #0]
 800dd0a:	b103      	cbz	r3, 800dd0e <_lseek_r+0x1e>
 800dd0c:	6023      	str	r3, [r4, #0]
 800dd0e:	bd38      	pop	{r3, r4, r5, pc}
 800dd10:	20005490 	.word	0x20005490

0800dd14 <_read_r>:
 800dd14:	b538      	push	{r3, r4, r5, lr}
 800dd16:	4d07      	ldr	r5, [pc, #28]	@ (800dd34 <_read_r+0x20>)
 800dd18:	4604      	mov	r4, r0
 800dd1a:	4608      	mov	r0, r1
 800dd1c:	4611      	mov	r1, r2
 800dd1e:	2200      	movs	r2, #0
 800dd20:	602a      	str	r2, [r5, #0]
 800dd22:	461a      	mov	r2, r3
 800dd24:	f7f6 f9f1 	bl	800410a <_read>
 800dd28:	1c43      	adds	r3, r0, #1
 800dd2a:	d102      	bne.n	800dd32 <_read_r+0x1e>
 800dd2c:	682b      	ldr	r3, [r5, #0]
 800dd2e:	b103      	cbz	r3, 800dd32 <_read_r+0x1e>
 800dd30:	6023      	str	r3, [r4, #0]
 800dd32:	bd38      	pop	{r3, r4, r5, pc}
 800dd34:	20005490 	.word	0x20005490

0800dd38 <_write_r>:
 800dd38:	b538      	push	{r3, r4, r5, lr}
 800dd3a:	4d07      	ldr	r5, [pc, #28]	@ (800dd58 <_write_r+0x20>)
 800dd3c:	4604      	mov	r4, r0
 800dd3e:	4608      	mov	r0, r1
 800dd40:	4611      	mov	r1, r2
 800dd42:	2200      	movs	r2, #0
 800dd44:	602a      	str	r2, [r5, #0]
 800dd46:	461a      	mov	r2, r3
 800dd48:	f7f6 f9fc 	bl	8004144 <_write>
 800dd4c:	1c43      	adds	r3, r0, #1
 800dd4e:	d102      	bne.n	800dd56 <_write_r+0x1e>
 800dd50:	682b      	ldr	r3, [r5, #0]
 800dd52:	b103      	cbz	r3, 800dd56 <_write_r+0x1e>
 800dd54:	6023      	str	r3, [r4, #0]
 800dd56:	bd38      	pop	{r3, r4, r5, pc}
 800dd58:	20005490 	.word	0x20005490

0800dd5c <__errno>:
 800dd5c:	4b01      	ldr	r3, [pc, #4]	@ (800dd64 <__errno+0x8>)
 800dd5e:	6818      	ldr	r0, [r3, #0]
 800dd60:	4770      	bx	lr
 800dd62:	bf00      	nop
 800dd64:	20000040 	.word	0x20000040

0800dd68 <__libc_init_array>:
 800dd68:	b570      	push	{r4, r5, r6, lr}
 800dd6a:	4d0d      	ldr	r5, [pc, #52]	@ (800dda0 <__libc_init_array+0x38>)
 800dd6c:	4c0d      	ldr	r4, [pc, #52]	@ (800dda4 <__libc_init_array+0x3c>)
 800dd6e:	1b64      	subs	r4, r4, r5
 800dd70:	10a4      	asrs	r4, r4, #2
 800dd72:	2600      	movs	r6, #0
 800dd74:	42a6      	cmp	r6, r4
 800dd76:	d109      	bne.n	800dd8c <__libc_init_array+0x24>
 800dd78:	4d0b      	ldr	r5, [pc, #44]	@ (800dda8 <__libc_init_array+0x40>)
 800dd7a:	4c0c      	ldr	r4, [pc, #48]	@ (800ddac <__libc_init_array+0x44>)
 800dd7c:	f002 fad0 	bl	8010320 <_init>
 800dd80:	1b64      	subs	r4, r4, r5
 800dd82:	10a4      	asrs	r4, r4, #2
 800dd84:	2600      	movs	r6, #0
 800dd86:	42a6      	cmp	r6, r4
 800dd88:	d105      	bne.n	800dd96 <__libc_init_array+0x2e>
 800dd8a:	bd70      	pop	{r4, r5, r6, pc}
 800dd8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd90:	4798      	blx	r3
 800dd92:	3601      	adds	r6, #1
 800dd94:	e7ee      	b.n	800dd74 <__libc_init_array+0xc>
 800dd96:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd9a:	4798      	blx	r3
 800dd9c:	3601      	adds	r6, #1
 800dd9e:	e7f2      	b.n	800dd86 <__libc_init_array+0x1e>
 800dda0:	080113e8 	.word	0x080113e8
 800dda4:	080113e8 	.word	0x080113e8
 800dda8:	080113e8 	.word	0x080113e8
 800ddac:	080113ec 	.word	0x080113ec

0800ddb0 <__retarget_lock_init_recursive>:
 800ddb0:	4770      	bx	lr

0800ddb2 <__retarget_lock_acquire_recursive>:
 800ddb2:	4770      	bx	lr

0800ddb4 <__retarget_lock_release_recursive>:
 800ddb4:	4770      	bx	lr

0800ddb6 <memcpy>:
 800ddb6:	440a      	add	r2, r1
 800ddb8:	4291      	cmp	r1, r2
 800ddba:	f100 33ff 	add.w	r3, r0, #4294967295
 800ddbe:	d100      	bne.n	800ddc2 <memcpy+0xc>
 800ddc0:	4770      	bx	lr
 800ddc2:	b510      	push	{r4, lr}
 800ddc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddcc:	4291      	cmp	r1, r2
 800ddce:	d1f9      	bne.n	800ddc4 <memcpy+0xe>
 800ddd0:	bd10      	pop	{r4, pc}

0800ddd2 <quorem>:
 800ddd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd6:	6903      	ldr	r3, [r0, #16]
 800ddd8:	690c      	ldr	r4, [r1, #16]
 800ddda:	42a3      	cmp	r3, r4
 800dddc:	4607      	mov	r7, r0
 800ddde:	db7e      	blt.n	800dede <quorem+0x10c>
 800dde0:	3c01      	subs	r4, #1
 800dde2:	f101 0814 	add.w	r8, r1, #20
 800dde6:	00a3      	lsls	r3, r4, #2
 800dde8:	f100 0514 	add.w	r5, r0, #20
 800ddec:	9300      	str	r3, [sp, #0]
 800ddee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ddf2:	9301      	str	r3, [sp, #4]
 800ddf4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ddf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	429a      	cmp	r2, r3
 800de00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800de04:	fbb2 f6f3 	udiv	r6, r2, r3
 800de08:	d32e      	bcc.n	800de68 <quorem+0x96>
 800de0a:	f04f 0a00 	mov.w	sl, #0
 800de0e:	46c4      	mov	ip, r8
 800de10:	46ae      	mov	lr, r5
 800de12:	46d3      	mov	fp, sl
 800de14:	f85c 3b04 	ldr.w	r3, [ip], #4
 800de18:	b298      	uxth	r0, r3
 800de1a:	fb06 a000 	mla	r0, r6, r0, sl
 800de1e:	0c02      	lsrs	r2, r0, #16
 800de20:	0c1b      	lsrs	r3, r3, #16
 800de22:	fb06 2303 	mla	r3, r6, r3, r2
 800de26:	f8de 2000 	ldr.w	r2, [lr]
 800de2a:	b280      	uxth	r0, r0
 800de2c:	b292      	uxth	r2, r2
 800de2e:	1a12      	subs	r2, r2, r0
 800de30:	445a      	add	r2, fp
 800de32:	f8de 0000 	ldr.w	r0, [lr]
 800de36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800de3a:	b29b      	uxth	r3, r3
 800de3c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800de40:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800de44:	b292      	uxth	r2, r2
 800de46:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800de4a:	45e1      	cmp	r9, ip
 800de4c:	f84e 2b04 	str.w	r2, [lr], #4
 800de50:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800de54:	d2de      	bcs.n	800de14 <quorem+0x42>
 800de56:	9b00      	ldr	r3, [sp, #0]
 800de58:	58eb      	ldr	r3, [r5, r3]
 800de5a:	b92b      	cbnz	r3, 800de68 <quorem+0x96>
 800de5c:	9b01      	ldr	r3, [sp, #4]
 800de5e:	3b04      	subs	r3, #4
 800de60:	429d      	cmp	r5, r3
 800de62:	461a      	mov	r2, r3
 800de64:	d32f      	bcc.n	800dec6 <quorem+0xf4>
 800de66:	613c      	str	r4, [r7, #16]
 800de68:	4638      	mov	r0, r7
 800de6a:	f001 f97b 	bl	800f164 <__mcmp>
 800de6e:	2800      	cmp	r0, #0
 800de70:	db25      	blt.n	800debe <quorem+0xec>
 800de72:	4629      	mov	r1, r5
 800de74:	2000      	movs	r0, #0
 800de76:	f858 2b04 	ldr.w	r2, [r8], #4
 800de7a:	f8d1 c000 	ldr.w	ip, [r1]
 800de7e:	fa1f fe82 	uxth.w	lr, r2
 800de82:	fa1f f38c 	uxth.w	r3, ip
 800de86:	eba3 030e 	sub.w	r3, r3, lr
 800de8a:	4403      	add	r3, r0
 800de8c:	0c12      	lsrs	r2, r2, #16
 800de8e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800de92:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800de96:	b29b      	uxth	r3, r3
 800de98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de9c:	45c1      	cmp	r9, r8
 800de9e:	f841 3b04 	str.w	r3, [r1], #4
 800dea2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dea6:	d2e6      	bcs.n	800de76 <quorem+0xa4>
 800dea8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800deac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800deb0:	b922      	cbnz	r2, 800debc <quorem+0xea>
 800deb2:	3b04      	subs	r3, #4
 800deb4:	429d      	cmp	r5, r3
 800deb6:	461a      	mov	r2, r3
 800deb8:	d30b      	bcc.n	800ded2 <quorem+0x100>
 800deba:	613c      	str	r4, [r7, #16]
 800debc:	3601      	adds	r6, #1
 800debe:	4630      	mov	r0, r6
 800dec0:	b003      	add	sp, #12
 800dec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dec6:	6812      	ldr	r2, [r2, #0]
 800dec8:	3b04      	subs	r3, #4
 800deca:	2a00      	cmp	r2, #0
 800decc:	d1cb      	bne.n	800de66 <quorem+0x94>
 800dece:	3c01      	subs	r4, #1
 800ded0:	e7c6      	b.n	800de60 <quorem+0x8e>
 800ded2:	6812      	ldr	r2, [r2, #0]
 800ded4:	3b04      	subs	r3, #4
 800ded6:	2a00      	cmp	r2, #0
 800ded8:	d1ef      	bne.n	800deba <quorem+0xe8>
 800deda:	3c01      	subs	r4, #1
 800dedc:	e7ea      	b.n	800deb4 <quorem+0xe2>
 800dede:	2000      	movs	r0, #0
 800dee0:	e7ee      	b.n	800dec0 <quorem+0xee>
 800dee2:	0000      	movs	r0, r0
 800dee4:	0000      	movs	r0, r0
	...

0800dee8 <_dtoa_r>:
 800dee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deec:	69c7      	ldr	r7, [r0, #28]
 800deee:	b099      	sub	sp, #100	@ 0x64
 800def0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800def4:	ec55 4b10 	vmov	r4, r5, d0
 800def8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800defa:	9109      	str	r1, [sp, #36]	@ 0x24
 800defc:	4683      	mov	fp, r0
 800defe:	920e      	str	r2, [sp, #56]	@ 0x38
 800df00:	9313      	str	r3, [sp, #76]	@ 0x4c
 800df02:	b97f      	cbnz	r7, 800df24 <_dtoa_r+0x3c>
 800df04:	2010      	movs	r0, #16
 800df06:	f000 fdfd 	bl	800eb04 <malloc>
 800df0a:	4602      	mov	r2, r0
 800df0c:	f8cb 001c 	str.w	r0, [fp, #28]
 800df10:	b920      	cbnz	r0, 800df1c <_dtoa_r+0x34>
 800df12:	4ba7      	ldr	r3, [pc, #668]	@ (800e1b0 <_dtoa_r+0x2c8>)
 800df14:	21ef      	movs	r1, #239	@ 0xef
 800df16:	48a7      	ldr	r0, [pc, #668]	@ (800e1b4 <_dtoa_r+0x2cc>)
 800df18:	f001 fc5a 	bl	800f7d0 <__assert_func>
 800df1c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800df20:	6007      	str	r7, [r0, #0]
 800df22:	60c7      	str	r7, [r0, #12]
 800df24:	f8db 301c 	ldr.w	r3, [fp, #28]
 800df28:	6819      	ldr	r1, [r3, #0]
 800df2a:	b159      	cbz	r1, 800df44 <_dtoa_r+0x5c>
 800df2c:	685a      	ldr	r2, [r3, #4]
 800df2e:	604a      	str	r2, [r1, #4]
 800df30:	2301      	movs	r3, #1
 800df32:	4093      	lsls	r3, r2
 800df34:	608b      	str	r3, [r1, #8]
 800df36:	4658      	mov	r0, fp
 800df38:	f000 feda 	bl	800ecf0 <_Bfree>
 800df3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800df40:	2200      	movs	r2, #0
 800df42:	601a      	str	r2, [r3, #0]
 800df44:	1e2b      	subs	r3, r5, #0
 800df46:	bfb9      	ittee	lt
 800df48:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800df4c:	9303      	strlt	r3, [sp, #12]
 800df4e:	2300      	movge	r3, #0
 800df50:	6033      	strge	r3, [r6, #0]
 800df52:	9f03      	ldr	r7, [sp, #12]
 800df54:	4b98      	ldr	r3, [pc, #608]	@ (800e1b8 <_dtoa_r+0x2d0>)
 800df56:	bfbc      	itt	lt
 800df58:	2201      	movlt	r2, #1
 800df5a:	6032      	strlt	r2, [r6, #0]
 800df5c:	43bb      	bics	r3, r7
 800df5e:	d112      	bne.n	800df86 <_dtoa_r+0x9e>
 800df60:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800df62:	f242 730f 	movw	r3, #9999	@ 0x270f
 800df66:	6013      	str	r3, [r2, #0]
 800df68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800df6c:	4323      	orrs	r3, r4
 800df6e:	f000 854d 	beq.w	800ea0c <_dtoa_r+0xb24>
 800df72:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800df74:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e1cc <_dtoa_r+0x2e4>
 800df78:	2b00      	cmp	r3, #0
 800df7a:	f000 854f 	beq.w	800ea1c <_dtoa_r+0xb34>
 800df7e:	f10a 0303 	add.w	r3, sl, #3
 800df82:	f000 bd49 	b.w	800ea18 <_dtoa_r+0xb30>
 800df86:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df8a:	2200      	movs	r2, #0
 800df8c:	ec51 0b17 	vmov	r0, r1, d7
 800df90:	2300      	movs	r3, #0
 800df92:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800df96:	f7f2 fd97 	bl	8000ac8 <__aeabi_dcmpeq>
 800df9a:	4680      	mov	r8, r0
 800df9c:	b158      	cbz	r0, 800dfb6 <_dtoa_r+0xce>
 800df9e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	6013      	str	r3, [r2, #0]
 800dfa4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dfa6:	b113      	cbz	r3, 800dfae <_dtoa_r+0xc6>
 800dfa8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dfaa:	4b84      	ldr	r3, [pc, #528]	@ (800e1bc <_dtoa_r+0x2d4>)
 800dfac:	6013      	str	r3, [r2, #0]
 800dfae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e1d0 <_dtoa_r+0x2e8>
 800dfb2:	f000 bd33 	b.w	800ea1c <_dtoa_r+0xb34>
 800dfb6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dfba:	aa16      	add	r2, sp, #88	@ 0x58
 800dfbc:	a917      	add	r1, sp, #92	@ 0x5c
 800dfbe:	4658      	mov	r0, fp
 800dfc0:	f001 f980 	bl	800f2c4 <__d2b>
 800dfc4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dfc8:	4681      	mov	r9, r0
 800dfca:	2e00      	cmp	r6, #0
 800dfcc:	d077      	beq.n	800e0be <_dtoa_r+0x1d6>
 800dfce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dfd0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800dfd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dfd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dfdc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dfe0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dfe4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dfe8:	4619      	mov	r1, r3
 800dfea:	2200      	movs	r2, #0
 800dfec:	4b74      	ldr	r3, [pc, #464]	@ (800e1c0 <_dtoa_r+0x2d8>)
 800dfee:	f7f2 f94b 	bl	8000288 <__aeabi_dsub>
 800dff2:	a369      	add	r3, pc, #420	@ (adr r3, 800e198 <_dtoa_r+0x2b0>)
 800dff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff8:	f7f2 fafe 	bl	80005f8 <__aeabi_dmul>
 800dffc:	a368      	add	r3, pc, #416	@ (adr r3, 800e1a0 <_dtoa_r+0x2b8>)
 800dffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e002:	f7f2 f943 	bl	800028c <__adddf3>
 800e006:	4604      	mov	r4, r0
 800e008:	4630      	mov	r0, r6
 800e00a:	460d      	mov	r5, r1
 800e00c:	f7f2 fa8a 	bl	8000524 <__aeabi_i2d>
 800e010:	a365      	add	r3, pc, #404	@ (adr r3, 800e1a8 <_dtoa_r+0x2c0>)
 800e012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e016:	f7f2 faef 	bl	80005f8 <__aeabi_dmul>
 800e01a:	4602      	mov	r2, r0
 800e01c:	460b      	mov	r3, r1
 800e01e:	4620      	mov	r0, r4
 800e020:	4629      	mov	r1, r5
 800e022:	f7f2 f933 	bl	800028c <__adddf3>
 800e026:	4604      	mov	r4, r0
 800e028:	460d      	mov	r5, r1
 800e02a:	f7f2 fd95 	bl	8000b58 <__aeabi_d2iz>
 800e02e:	2200      	movs	r2, #0
 800e030:	4607      	mov	r7, r0
 800e032:	2300      	movs	r3, #0
 800e034:	4620      	mov	r0, r4
 800e036:	4629      	mov	r1, r5
 800e038:	f7f2 fd50 	bl	8000adc <__aeabi_dcmplt>
 800e03c:	b140      	cbz	r0, 800e050 <_dtoa_r+0x168>
 800e03e:	4638      	mov	r0, r7
 800e040:	f7f2 fa70 	bl	8000524 <__aeabi_i2d>
 800e044:	4622      	mov	r2, r4
 800e046:	462b      	mov	r3, r5
 800e048:	f7f2 fd3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e04c:	b900      	cbnz	r0, 800e050 <_dtoa_r+0x168>
 800e04e:	3f01      	subs	r7, #1
 800e050:	2f16      	cmp	r7, #22
 800e052:	d851      	bhi.n	800e0f8 <_dtoa_r+0x210>
 800e054:	4b5b      	ldr	r3, [pc, #364]	@ (800e1c4 <_dtoa_r+0x2dc>)
 800e056:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e05e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e062:	f7f2 fd3b 	bl	8000adc <__aeabi_dcmplt>
 800e066:	2800      	cmp	r0, #0
 800e068:	d048      	beq.n	800e0fc <_dtoa_r+0x214>
 800e06a:	3f01      	subs	r7, #1
 800e06c:	2300      	movs	r3, #0
 800e06e:	9312      	str	r3, [sp, #72]	@ 0x48
 800e070:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e072:	1b9b      	subs	r3, r3, r6
 800e074:	1e5a      	subs	r2, r3, #1
 800e076:	bf44      	itt	mi
 800e078:	f1c3 0801 	rsbmi	r8, r3, #1
 800e07c:	2300      	movmi	r3, #0
 800e07e:	9208      	str	r2, [sp, #32]
 800e080:	bf54      	ite	pl
 800e082:	f04f 0800 	movpl.w	r8, #0
 800e086:	9308      	strmi	r3, [sp, #32]
 800e088:	2f00      	cmp	r7, #0
 800e08a:	db39      	blt.n	800e100 <_dtoa_r+0x218>
 800e08c:	9b08      	ldr	r3, [sp, #32]
 800e08e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e090:	443b      	add	r3, r7
 800e092:	9308      	str	r3, [sp, #32]
 800e094:	2300      	movs	r3, #0
 800e096:	930a      	str	r3, [sp, #40]	@ 0x28
 800e098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e09a:	2b09      	cmp	r3, #9
 800e09c:	d864      	bhi.n	800e168 <_dtoa_r+0x280>
 800e09e:	2b05      	cmp	r3, #5
 800e0a0:	bfc4      	itt	gt
 800e0a2:	3b04      	subgt	r3, #4
 800e0a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e0a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0a8:	f1a3 0302 	sub.w	r3, r3, #2
 800e0ac:	bfcc      	ite	gt
 800e0ae:	2400      	movgt	r4, #0
 800e0b0:	2401      	movle	r4, #1
 800e0b2:	2b03      	cmp	r3, #3
 800e0b4:	d863      	bhi.n	800e17e <_dtoa_r+0x296>
 800e0b6:	e8df f003 	tbb	[pc, r3]
 800e0ba:	372a      	.short	0x372a
 800e0bc:	5535      	.short	0x5535
 800e0be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e0c2:	441e      	add	r6, r3
 800e0c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e0c8:	2b20      	cmp	r3, #32
 800e0ca:	bfc1      	itttt	gt
 800e0cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e0d0:	409f      	lslgt	r7, r3
 800e0d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e0d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e0da:	bfd6      	itet	le
 800e0dc:	f1c3 0320 	rsble	r3, r3, #32
 800e0e0:	ea47 0003 	orrgt.w	r0, r7, r3
 800e0e4:	fa04 f003 	lslle.w	r0, r4, r3
 800e0e8:	f7f2 fa0c 	bl	8000504 <__aeabi_ui2d>
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e0f2:	3e01      	subs	r6, #1
 800e0f4:	9214      	str	r2, [sp, #80]	@ 0x50
 800e0f6:	e777      	b.n	800dfe8 <_dtoa_r+0x100>
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	e7b8      	b.n	800e06e <_dtoa_r+0x186>
 800e0fc:	9012      	str	r0, [sp, #72]	@ 0x48
 800e0fe:	e7b7      	b.n	800e070 <_dtoa_r+0x188>
 800e100:	427b      	negs	r3, r7
 800e102:	930a      	str	r3, [sp, #40]	@ 0x28
 800e104:	2300      	movs	r3, #0
 800e106:	eba8 0807 	sub.w	r8, r8, r7
 800e10a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e10c:	e7c4      	b.n	800e098 <_dtoa_r+0x1b0>
 800e10e:	2300      	movs	r3, #0
 800e110:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e112:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e114:	2b00      	cmp	r3, #0
 800e116:	dc35      	bgt.n	800e184 <_dtoa_r+0x29c>
 800e118:	2301      	movs	r3, #1
 800e11a:	9300      	str	r3, [sp, #0]
 800e11c:	9307      	str	r3, [sp, #28]
 800e11e:	461a      	mov	r2, r3
 800e120:	920e      	str	r2, [sp, #56]	@ 0x38
 800e122:	e00b      	b.n	800e13c <_dtoa_r+0x254>
 800e124:	2301      	movs	r3, #1
 800e126:	e7f3      	b.n	800e110 <_dtoa_r+0x228>
 800e128:	2300      	movs	r3, #0
 800e12a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e12c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e12e:	18fb      	adds	r3, r7, r3
 800e130:	9300      	str	r3, [sp, #0]
 800e132:	3301      	adds	r3, #1
 800e134:	2b01      	cmp	r3, #1
 800e136:	9307      	str	r3, [sp, #28]
 800e138:	bfb8      	it	lt
 800e13a:	2301      	movlt	r3, #1
 800e13c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e140:	2100      	movs	r1, #0
 800e142:	2204      	movs	r2, #4
 800e144:	f102 0514 	add.w	r5, r2, #20
 800e148:	429d      	cmp	r5, r3
 800e14a:	d91f      	bls.n	800e18c <_dtoa_r+0x2a4>
 800e14c:	6041      	str	r1, [r0, #4]
 800e14e:	4658      	mov	r0, fp
 800e150:	f000 fd8e 	bl	800ec70 <_Balloc>
 800e154:	4682      	mov	sl, r0
 800e156:	2800      	cmp	r0, #0
 800e158:	d13c      	bne.n	800e1d4 <_dtoa_r+0x2ec>
 800e15a:	4b1b      	ldr	r3, [pc, #108]	@ (800e1c8 <_dtoa_r+0x2e0>)
 800e15c:	4602      	mov	r2, r0
 800e15e:	f240 11af 	movw	r1, #431	@ 0x1af
 800e162:	e6d8      	b.n	800df16 <_dtoa_r+0x2e>
 800e164:	2301      	movs	r3, #1
 800e166:	e7e0      	b.n	800e12a <_dtoa_r+0x242>
 800e168:	2401      	movs	r4, #1
 800e16a:	2300      	movs	r3, #0
 800e16c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e16e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e170:	f04f 33ff 	mov.w	r3, #4294967295
 800e174:	9300      	str	r3, [sp, #0]
 800e176:	9307      	str	r3, [sp, #28]
 800e178:	2200      	movs	r2, #0
 800e17a:	2312      	movs	r3, #18
 800e17c:	e7d0      	b.n	800e120 <_dtoa_r+0x238>
 800e17e:	2301      	movs	r3, #1
 800e180:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e182:	e7f5      	b.n	800e170 <_dtoa_r+0x288>
 800e184:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e186:	9300      	str	r3, [sp, #0]
 800e188:	9307      	str	r3, [sp, #28]
 800e18a:	e7d7      	b.n	800e13c <_dtoa_r+0x254>
 800e18c:	3101      	adds	r1, #1
 800e18e:	0052      	lsls	r2, r2, #1
 800e190:	e7d8      	b.n	800e144 <_dtoa_r+0x25c>
 800e192:	bf00      	nop
 800e194:	f3af 8000 	nop.w
 800e198:	636f4361 	.word	0x636f4361
 800e19c:	3fd287a7 	.word	0x3fd287a7
 800e1a0:	8b60c8b3 	.word	0x8b60c8b3
 800e1a4:	3fc68a28 	.word	0x3fc68a28
 800e1a8:	509f79fb 	.word	0x509f79fb
 800e1ac:	3fd34413 	.word	0x3fd34413
 800e1b0:	08011142 	.word	0x08011142
 800e1b4:	08011159 	.word	0x08011159
 800e1b8:	7ff00000 	.word	0x7ff00000
 800e1bc:	08011112 	.word	0x08011112
 800e1c0:	3ff80000 	.word	0x3ff80000
 800e1c4:	08011250 	.word	0x08011250
 800e1c8:	080111b1 	.word	0x080111b1
 800e1cc:	0801113e 	.word	0x0801113e
 800e1d0:	08011111 	.word	0x08011111
 800e1d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e1d8:	6018      	str	r0, [r3, #0]
 800e1da:	9b07      	ldr	r3, [sp, #28]
 800e1dc:	2b0e      	cmp	r3, #14
 800e1de:	f200 80a4 	bhi.w	800e32a <_dtoa_r+0x442>
 800e1e2:	2c00      	cmp	r4, #0
 800e1e4:	f000 80a1 	beq.w	800e32a <_dtoa_r+0x442>
 800e1e8:	2f00      	cmp	r7, #0
 800e1ea:	dd33      	ble.n	800e254 <_dtoa_r+0x36c>
 800e1ec:	4bad      	ldr	r3, [pc, #692]	@ (800e4a4 <_dtoa_r+0x5bc>)
 800e1ee:	f007 020f 	and.w	r2, r7, #15
 800e1f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e1f6:	ed93 7b00 	vldr	d7, [r3]
 800e1fa:	05f8      	lsls	r0, r7, #23
 800e1fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e200:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e204:	d516      	bpl.n	800e234 <_dtoa_r+0x34c>
 800e206:	4ba8      	ldr	r3, [pc, #672]	@ (800e4a8 <_dtoa_r+0x5c0>)
 800e208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e20c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e210:	f7f2 fb1c 	bl	800084c <__aeabi_ddiv>
 800e214:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e218:	f004 040f 	and.w	r4, r4, #15
 800e21c:	2603      	movs	r6, #3
 800e21e:	4da2      	ldr	r5, [pc, #648]	@ (800e4a8 <_dtoa_r+0x5c0>)
 800e220:	b954      	cbnz	r4, 800e238 <_dtoa_r+0x350>
 800e222:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e22a:	f7f2 fb0f 	bl	800084c <__aeabi_ddiv>
 800e22e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e232:	e028      	b.n	800e286 <_dtoa_r+0x39e>
 800e234:	2602      	movs	r6, #2
 800e236:	e7f2      	b.n	800e21e <_dtoa_r+0x336>
 800e238:	07e1      	lsls	r1, r4, #31
 800e23a:	d508      	bpl.n	800e24e <_dtoa_r+0x366>
 800e23c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e240:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e244:	f7f2 f9d8 	bl	80005f8 <__aeabi_dmul>
 800e248:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e24c:	3601      	adds	r6, #1
 800e24e:	1064      	asrs	r4, r4, #1
 800e250:	3508      	adds	r5, #8
 800e252:	e7e5      	b.n	800e220 <_dtoa_r+0x338>
 800e254:	f000 80d2 	beq.w	800e3fc <_dtoa_r+0x514>
 800e258:	427c      	negs	r4, r7
 800e25a:	4b92      	ldr	r3, [pc, #584]	@ (800e4a4 <_dtoa_r+0x5bc>)
 800e25c:	4d92      	ldr	r5, [pc, #584]	@ (800e4a8 <_dtoa_r+0x5c0>)
 800e25e:	f004 020f 	and.w	r2, r4, #15
 800e262:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e26a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e26e:	f7f2 f9c3 	bl	80005f8 <__aeabi_dmul>
 800e272:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e276:	1124      	asrs	r4, r4, #4
 800e278:	2300      	movs	r3, #0
 800e27a:	2602      	movs	r6, #2
 800e27c:	2c00      	cmp	r4, #0
 800e27e:	f040 80b2 	bne.w	800e3e6 <_dtoa_r+0x4fe>
 800e282:	2b00      	cmp	r3, #0
 800e284:	d1d3      	bne.n	800e22e <_dtoa_r+0x346>
 800e286:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e288:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	f000 80b7 	beq.w	800e400 <_dtoa_r+0x518>
 800e292:	4b86      	ldr	r3, [pc, #536]	@ (800e4ac <_dtoa_r+0x5c4>)
 800e294:	2200      	movs	r2, #0
 800e296:	4620      	mov	r0, r4
 800e298:	4629      	mov	r1, r5
 800e29a:	f7f2 fc1f 	bl	8000adc <__aeabi_dcmplt>
 800e29e:	2800      	cmp	r0, #0
 800e2a0:	f000 80ae 	beq.w	800e400 <_dtoa_r+0x518>
 800e2a4:	9b07      	ldr	r3, [sp, #28]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	f000 80aa 	beq.w	800e400 <_dtoa_r+0x518>
 800e2ac:	9b00      	ldr	r3, [sp, #0]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	dd37      	ble.n	800e322 <_dtoa_r+0x43a>
 800e2b2:	1e7b      	subs	r3, r7, #1
 800e2b4:	9304      	str	r3, [sp, #16]
 800e2b6:	4620      	mov	r0, r4
 800e2b8:	4b7d      	ldr	r3, [pc, #500]	@ (800e4b0 <_dtoa_r+0x5c8>)
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	4629      	mov	r1, r5
 800e2be:	f7f2 f99b 	bl	80005f8 <__aeabi_dmul>
 800e2c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2c6:	9c00      	ldr	r4, [sp, #0]
 800e2c8:	3601      	adds	r6, #1
 800e2ca:	4630      	mov	r0, r6
 800e2cc:	f7f2 f92a 	bl	8000524 <__aeabi_i2d>
 800e2d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2d4:	f7f2 f990 	bl	80005f8 <__aeabi_dmul>
 800e2d8:	4b76      	ldr	r3, [pc, #472]	@ (800e4b4 <_dtoa_r+0x5cc>)
 800e2da:	2200      	movs	r2, #0
 800e2dc:	f7f1 ffd6 	bl	800028c <__adddf3>
 800e2e0:	4605      	mov	r5, r0
 800e2e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e2e6:	2c00      	cmp	r4, #0
 800e2e8:	f040 808d 	bne.w	800e406 <_dtoa_r+0x51e>
 800e2ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2f0:	4b71      	ldr	r3, [pc, #452]	@ (800e4b8 <_dtoa_r+0x5d0>)
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f7f1 ffc8 	bl	8000288 <__aeabi_dsub>
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	460b      	mov	r3, r1
 800e2fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e300:	462a      	mov	r2, r5
 800e302:	4633      	mov	r3, r6
 800e304:	f7f2 fc08 	bl	8000b18 <__aeabi_dcmpgt>
 800e308:	2800      	cmp	r0, #0
 800e30a:	f040 828b 	bne.w	800e824 <_dtoa_r+0x93c>
 800e30e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e312:	462a      	mov	r2, r5
 800e314:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e318:	f7f2 fbe0 	bl	8000adc <__aeabi_dcmplt>
 800e31c:	2800      	cmp	r0, #0
 800e31e:	f040 8128 	bne.w	800e572 <_dtoa_r+0x68a>
 800e322:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e326:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e32a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	f2c0 815a 	blt.w	800e5e6 <_dtoa_r+0x6fe>
 800e332:	2f0e      	cmp	r7, #14
 800e334:	f300 8157 	bgt.w	800e5e6 <_dtoa_r+0x6fe>
 800e338:	4b5a      	ldr	r3, [pc, #360]	@ (800e4a4 <_dtoa_r+0x5bc>)
 800e33a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e33e:	ed93 7b00 	vldr	d7, [r3]
 800e342:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e344:	2b00      	cmp	r3, #0
 800e346:	ed8d 7b00 	vstr	d7, [sp]
 800e34a:	da03      	bge.n	800e354 <_dtoa_r+0x46c>
 800e34c:	9b07      	ldr	r3, [sp, #28]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	f340 8101 	ble.w	800e556 <_dtoa_r+0x66e>
 800e354:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e358:	4656      	mov	r6, sl
 800e35a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e35e:	4620      	mov	r0, r4
 800e360:	4629      	mov	r1, r5
 800e362:	f7f2 fa73 	bl	800084c <__aeabi_ddiv>
 800e366:	f7f2 fbf7 	bl	8000b58 <__aeabi_d2iz>
 800e36a:	4680      	mov	r8, r0
 800e36c:	f7f2 f8da 	bl	8000524 <__aeabi_i2d>
 800e370:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e374:	f7f2 f940 	bl	80005f8 <__aeabi_dmul>
 800e378:	4602      	mov	r2, r0
 800e37a:	460b      	mov	r3, r1
 800e37c:	4620      	mov	r0, r4
 800e37e:	4629      	mov	r1, r5
 800e380:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e384:	f7f1 ff80 	bl	8000288 <__aeabi_dsub>
 800e388:	f806 4b01 	strb.w	r4, [r6], #1
 800e38c:	9d07      	ldr	r5, [sp, #28]
 800e38e:	eba6 040a 	sub.w	r4, r6, sl
 800e392:	42a5      	cmp	r5, r4
 800e394:	4602      	mov	r2, r0
 800e396:	460b      	mov	r3, r1
 800e398:	f040 8117 	bne.w	800e5ca <_dtoa_r+0x6e2>
 800e39c:	f7f1 ff76 	bl	800028c <__adddf3>
 800e3a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3a4:	4604      	mov	r4, r0
 800e3a6:	460d      	mov	r5, r1
 800e3a8:	f7f2 fbb6 	bl	8000b18 <__aeabi_dcmpgt>
 800e3ac:	2800      	cmp	r0, #0
 800e3ae:	f040 80f9 	bne.w	800e5a4 <_dtoa_r+0x6bc>
 800e3b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	4629      	mov	r1, r5
 800e3ba:	f7f2 fb85 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3be:	b118      	cbz	r0, 800e3c8 <_dtoa_r+0x4e0>
 800e3c0:	f018 0f01 	tst.w	r8, #1
 800e3c4:	f040 80ee 	bne.w	800e5a4 <_dtoa_r+0x6bc>
 800e3c8:	4649      	mov	r1, r9
 800e3ca:	4658      	mov	r0, fp
 800e3cc:	f000 fc90 	bl	800ecf0 <_Bfree>
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	7033      	strb	r3, [r6, #0]
 800e3d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e3d6:	3701      	adds	r7, #1
 800e3d8:	601f      	str	r7, [r3, #0]
 800e3da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	f000 831d 	beq.w	800ea1c <_dtoa_r+0xb34>
 800e3e2:	601e      	str	r6, [r3, #0]
 800e3e4:	e31a      	b.n	800ea1c <_dtoa_r+0xb34>
 800e3e6:	07e2      	lsls	r2, r4, #31
 800e3e8:	d505      	bpl.n	800e3f6 <_dtoa_r+0x50e>
 800e3ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e3ee:	f7f2 f903 	bl	80005f8 <__aeabi_dmul>
 800e3f2:	3601      	adds	r6, #1
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	1064      	asrs	r4, r4, #1
 800e3f8:	3508      	adds	r5, #8
 800e3fa:	e73f      	b.n	800e27c <_dtoa_r+0x394>
 800e3fc:	2602      	movs	r6, #2
 800e3fe:	e742      	b.n	800e286 <_dtoa_r+0x39e>
 800e400:	9c07      	ldr	r4, [sp, #28]
 800e402:	9704      	str	r7, [sp, #16]
 800e404:	e761      	b.n	800e2ca <_dtoa_r+0x3e2>
 800e406:	4b27      	ldr	r3, [pc, #156]	@ (800e4a4 <_dtoa_r+0x5bc>)
 800e408:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e40a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e40e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e412:	4454      	add	r4, sl
 800e414:	2900      	cmp	r1, #0
 800e416:	d053      	beq.n	800e4c0 <_dtoa_r+0x5d8>
 800e418:	4928      	ldr	r1, [pc, #160]	@ (800e4bc <_dtoa_r+0x5d4>)
 800e41a:	2000      	movs	r0, #0
 800e41c:	f7f2 fa16 	bl	800084c <__aeabi_ddiv>
 800e420:	4633      	mov	r3, r6
 800e422:	462a      	mov	r2, r5
 800e424:	f7f1 ff30 	bl	8000288 <__aeabi_dsub>
 800e428:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e42c:	4656      	mov	r6, sl
 800e42e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e432:	f7f2 fb91 	bl	8000b58 <__aeabi_d2iz>
 800e436:	4605      	mov	r5, r0
 800e438:	f7f2 f874 	bl	8000524 <__aeabi_i2d>
 800e43c:	4602      	mov	r2, r0
 800e43e:	460b      	mov	r3, r1
 800e440:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e444:	f7f1 ff20 	bl	8000288 <__aeabi_dsub>
 800e448:	3530      	adds	r5, #48	@ 0x30
 800e44a:	4602      	mov	r2, r0
 800e44c:	460b      	mov	r3, r1
 800e44e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e452:	f806 5b01 	strb.w	r5, [r6], #1
 800e456:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e45a:	f7f2 fb3f 	bl	8000adc <__aeabi_dcmplt>
 800e45e:	2800      	cmp	r0, #0
 800e460:	d171      	bne.n	800e546 <_dtoa_r+0x65e>
 800e462:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e466:	4911      	ldr	r1, [pc, #68]	@ (800e4ac <_dtoa_r+0x5c4>)
 800e468:	2000      	movs	r0, #0
 800e46a:	f7f1 ff0d 	bl	8000288 <__aeabi_dsub>
 800e46e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e472:	f7f2 fb33 	bl	8000adc <__aeabi_dcmplt>
 800e476:	2800      	cmp	r0, #0
 800e478:	f040 8095 	bne.w	800e5a6 <_dtoa_r+0x6be>
 800e47c:	42a6      	cmp	r6, r4
 800e47e:	f43f af50 	beq.w	800e322 <_dtoa_r+0x43a>
 800e482:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e486:	4b0a      	ldr	r3, [pc, #40]	@ (800e4b0 <_dtoa_r+0x5c8>)
 800e488:	2200      	movs	r2, #0
 800e48a:	f7f2 f8b5 	bl	80005f8 <__aeabi_dmul>
 800e48e:	4b08      	ldr	r3, [pc, #32]	@ (800e4b0 <_dtoa_r+0x5c8>)
 800e490:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e494:	2200      	movs	r2, #0
 800e496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e49a:	f7f2 f8ad 	bl	80005f8 <__aeabi_dmul>
 800e49e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4a2:	e7c4      	b.n	800e42e <_dtoa_r+0x546>
 800e4a4:	08011250 	.word	0x08011250
 800e4a8:	08011228 	.word	0x08011228
 800e4ac:	3ff00000 	.word	0x3ff00000
 800e4b0:	40240000 	.word	0x40240000
 800e4b4:	401c0000 	.word	0x401c0000
 800e4b8:	40140000 	.word	0x40140000
 800e4bc:	3fe00000 	.word	0x3fe00000
 800e4c0:	4631      	mov	r1, r6
 800e4c2:	4628      	mov	r0, r5
 800e4c4:	f7f2 f898 	bl	80005f8 <__aeabi_dmul>
 800e4c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e4cc:	9415      	str	r4, [sp, #84]	@ 0x54
 800e4ce:	4656      	mov	r6, sl
 800e4d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4d4:	f7f2 fb40 	bl	8000b58 <__aeabi_d2iz>
 800e4d8:	4605      	mov	r5, r0
 800e4da:	f7f2 f823 	bl	8000524 <__aeabi_i2d>
 800e4de:	4602      	mov	r2, r0
 800e4e0:	460b      	mov	r3, r1
 800e4e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4e6:	f7f1 fecf 	bl	8000288 <__aeabi_dsub>
 800e4ea:	3530      	adds	r5, #48	@ 0x30
 800e4ec:	f806 5b01 	strb.w	r5, [r6], #1
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	42a6      	cmp	r6, r4
 800e4f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e4fa:	f04f 0200 	mov.w	r2, #0
 800e4fe:	d124      	bne.n	800e54a <_dtoa_r+0x662>
 800e500:	4bac      	ldr	r3, [pc, #688]	@ (800e7b4 <_dtoa_r+0x8cc>)
 800e502:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e506:	f7f1 fec1 	bl	800028c <__adddf3>
 800e50a:	4602      	mov	r2, r0
 800e50c:	460b      	mov	r3, r1
 800e50e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e512:	f7f2 fb01 	bl	8000b18 <__aeabi_dcmpgt>
 800e516:	2800      	cmp	r0, #0
 800e518:	d145      	bne.n	800e5a6 <_dtoa_r+0x6be>
 800e51a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e51e:	49a5      	ldr	r1, [pc, #660]	@ (800e7b4 <_dtoa_r+0x8cc>)
 800e520:	2000      	movs	r0, #0
 800e522:	f7f1 feb1 	bl	8000288 <__aeabi_dsub>
 800e526:	4602      	mov	r2, r0
 800e528:	460b      	mov	r3, r1
 800e52a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e52e:	f7f2 fad5 	bl	8000adc <__aeabi_dcmplt>
 800e532:	2800      	cmp	r0, #0
 800e534:	f43f aef5 	beq.w	800e322 <_dtoa_r+0x43a>
 800e538:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e53a:	1e73      	subs	r3, r6, #1
 800e53c:	9315      	str	r3, [sp, #84]	@ 0x54
 800e53e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e542:	2b30      	cmp	r3, #48	@ 0x30
 800e544:	d0f8      	beq.n	800e538 <_dtoa_r+0x650>
 800e546:	9f04      	ldr	r7, [sp, #16]
 800e548:	e73e      	b.n	800e3c8 <_dtoa_r+0x4e0>
 800e54a:	4b9b      	ldr	r3, [pc, #620]	@ (800e7b8 <_dtoa_r+0x8d0>)
 800e54c:	f7f2 f854 	bl	80005f8 <__aeabi_dmul>
 800e550:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e554:	e7bc      	b.n	800e4d0 <_dtoa_r+0x5e8>
 800e556:	d10c      	bne.n	800e572 <_dtoa_r+0x68a>
 800e558:	4b98      	ldr	r3, [pc, #608]	@ (800e7bc <_dtoa_r+0x8d4>)
 800e55a:	2200      	movs	r2, #0
 800e55c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e560:	f7f2 f84a 	bl	80005f8 <__aeabi_dmul>
 800e564:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e568:	f7f2 facc 	bl	8000b04 <__aeabi_dcmpge>
 800e56c:	2800      	cmp	r0, #0
 800e56e:	f000 8157 	beq.w	800e820 <_dtoa_r+0x938>
 800e572:	2400      	movs	r4, #0
 800e574:	4625      	mov	r5, r4
 800e576:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e578:	43db      	mvns	r3, r3
 800e57a:	9304      	str	r3, [sp, #16]
 800e57c:	4656      	mov	r6, sl
 800e57e:	2700      	movs	r7, #0
 800e580:	4621      	mov	r1, r4
 800e582:	4658      	mov	r0, fp
 800e584:	f000 fbb4 	bl	800ecf0 <_Bfree>
 800e588:	2d00      	cmp	r5, #0
 800e58a:	d0dc      	beq.n	800e546 <_dtoa_r+0x65e>
 800e58c:	b12f      	cbz	r7, 800e59a <_dtoa_r+0x6b2>
 800e58e:	42af      	cmp	r7, r5
 800e590:	d003      	beq.n	800e59a <_dtoa_r+0x6b2>
 800e592:	4639      	mov	r1, r7
 800e594:	4658      	mov	r0, fp
 800e596:	f000 fbab 	bl	800ecf0 <_Bfree>
 800e59a:	4629      	mov	r1, r5
 800e59c:	4658      	mov	r0, fp
 800e59e:	f000 fba7 	bl	800ecf0 <_Bfree>
 800e5a2:	e7d0      	b.n	800e546 <_dtoa_r+0x65e>
 800e5a4:	9704      	str	r7, [sp, #16]
 800e5a6:	4633      	mov	r3, r6
 800e5a8:	461e      	mov	r6, r3
 800e5aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5ae:	2a39      	cmp	r2, #57	@ 0x39
 800e5b0:	d107      	bne.n	800e5c2 <_dtoa_r+0x6da>
 800e5b2:	459a      	cmp	sl, r3
 800e5b4:	d1f8      	bne.n	800e5a8 <_dtoa_r+0x6c0>
 800e5b6:	9a04      	ldr	r2, [sp, #16]
 800e5b8:	3201      	adds	r2, #1
 800e5ba:	9204      	str	r2, [sp, #16]
 800e5bc:	2230      	movs	r2, #48	@ 0x30
 800e5be:	f88a 2000 	strb.w	r2, [sl]
 800e5c2:	781a      	ldrb	r2, [r3, #0]
 800e5c4:	3201      	adds	r2, #1
 800e5c6:	701a      	strb	r2, [r3, #0]
 800e5c8:	e7bd      	b.n	800e546 <_dtoa_r+0x65e>
 800e5ca:	4b7b      	ldr	r3, [pc, #492]	@ (800e7b8 <_dtoa_r+0x8d0>)
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	f7f2 f813 	bl	80005f8 <__aeabi_dmul>
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	4604      	mov	r4, r0
 800e5d8:	460d      	mov	r5, r1
 800e5da:	f7f2 fa75 	bl	8000ac8 <__aeabi_dcmpeq>
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	f43f aebb 	beq.w	800e35a <_dtoa_r+0x472>
 800e5e4:	e6f0      	b.n	800e3c8 <_dtoa_r+0x4e0>
 800e5e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e5e8:	2a00      	cmp	r2, #0
 800e5ea:	f000 80db 	beq.w	800e7a4 <_dtoa_r+0x8bc>
 800e5ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e5f0:	2a01      	cmp	r2, #1
 800e5f2:	f300 80bf 	bgt.w	800e774 <_dtoa_r+0x88c>
 800e5f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e5f8:	2a00      	cmp	r2, #0
 800e5fa:	f000 80b7 	beq.w	800e76c <_dtoa_r+0x884>
 800e5fe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e602:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e604:	4646      	mov	r6, r8
 800e606:	9a08      	ldr	r2, [sp, #32]
 800e608:	2101      	movs	r1, #1
 800e60a:	441a      	add	r2, r3
 800e60c:	4658      	mov	r0, fp
 800e60e:	4498      	add	r8, r3
 800e610:	9208      	str	r2, [sp, #32]
 800e612:	f000 fc21 	bl	800ee58 <__i2b>
 800e616:	4605      	mov	r5, r0
 800e618:	b15e      	cbz	r6, 800e632 <_dtoa_r+0x74a>
 800e61a:	9b08      	ldr	r3, [sp, #32]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	dd08      	ble.n	800e632 <_dtoa_r+0x74a>
 800e620:	42b3      	cmp	r3, r6
 800e622:	9a08      	ldr	r2, [sp, #32]
 800e624:	bfa8      	it	ge
 800e626:	4633      	movge	r3, r6
 800e628:	eba8 0803 	sub.w	r8, r8, r3
 800e62c:	1af6      	subs	r6, r6, r3
 800e62e:	1ad3      	subs	r3, r2, r3
 800e630:	9308      	str	r3, [sp, #32]
 800e632:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e634:	b1f3      	cbz	r3, 800e674 <_dtoa_r+0x78c>
 800e636:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e638:	2b00      	cmp	r3, #0
 800e63a:	f000 80b7 	beq.w	800e7ac <_dtoa_r+0x8c4>
 800e63e:	b18c      	cbz	r4, 800e664 <_dtoa_r+0x77c>
 800e640:	4629      	mov	r1, r5
 800e642:	4622      	mov	r2, r4
 800e644:	4658      	mov	r0, fp
 800e646:	f000 fcc7 	bl	800efd8 <__pow5mult>
 800e64a:	464a      	mov	r2, r9
 800e64c:	4601      	mov	r1, r0
 800e64e:	4605      	mov	r5, r0
 800e650:	4658      	mov	r0, fp
 800e652:	f000 fc17 	bl	800ee84 <__multiply>
 800e656:	4649      	mov	r1, r9
 800e658:	9004      	str	r0, [sp, #16]
 800e65a:	4658      	mov	r0, fp
 800e65c:	f000 fb48 	bl	800ecf0 <_Bfree>
 800e660:	9b04      	ldr	r3, [sp, #16]
 800e662:	4699      	mov	r9, r3
 800e664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e666:	1b1a      	subs	r2, r3, r4
 800e668:	d004      	beq.n	800e674 <_dtoa_r+0x78c>
 800e66a:	4649      	mov	r1, r9
 800e66c:	4658      	mov	r0, fp
 800e66e:	f000 fcb3 	bl	800efd8 <__pow5mult>
 800e672:	4681      	mov	r9, r0
 800e674:	2101      	movs	r1, #1
 800e676:	4658      	mov	r0, fp
 800e678:	f000 fbee 	bl	800ee58 <__i2b>
 800e67c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e67e:	4604      	mov	r4, r0
 800e680:	2b00      	cmp	r3, #0
 800e682:	f000 81cf 	beq.w	800ea24 <_dtoa_r+0xb3c>
 800e686:	461a      	mov	r2, r3
 800e688:	4601      	mov	r1, r0
 800e68a:	4658      	mov	r0, fp
 800e68c:	f000 fca4 	bl	800efd8 <__pow5mult>
 800e690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e692:	2b01      	cmp	r3, #1
 800e694:	4604      	mov	r4, r0
 800e696:	f300 8095 	bgt.w	800e7c4 <_dtoa_r+0x8dc>
 800e69a:	9b02      	ldr	r3, [sp, #8]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	f040 8087 	bne.w	800e7b0 <_dtoa_r+0x8c8>
 800e6a2:	9b03      	ldr	r3, [sp, #12]
 800e6a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	f040 8089 	bne.w	800e7c0 <_dtoa_r+0x8d8>
 800e6ae:	9b03      	ldr	r3, [sp, #12]
 800e6b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e6b4:	0d1b      	lsrs	r3, r3, #20
 800e6b6:	051b      	lsls	r3, r3, #20
 800e6b8:	b12b      	cbz	r3, 800e6c6 <_dtoa_r+0x7de>
 800e6ba:	9b08      	ldr	r3, [sp, #32]
 800e6bc:	3301      	adds	r3, #1
 800e6be:	9308      	str	r3, [sp, #32]
 800e6c0:	f108 0801 	add.w	r8, r8, #1
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	f000 81b0 	beq.w	800ea30 <_dtoa_r+0xb48>
 800e6d0:	6923      	ldr	r3, [r4, #16]
 800e6d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e6d6:	6918      	ldr	r0, [r3, #16]
 800e6d8:	f000 fb72 	bl	800edc0 <__hi0bits>
 800e6dc:	f1c0 0020 	rsb	r0, r0, #32
 800e6e0:	9b08      	ldr	r3, [sp, #32]
 800e6e2:	4418      	add	r0, r3
 800e6e4:	f010 001f 	ands.w	r0, r0, #31
 800e6e8:	d077      	beq.n	800e7da <_dtoa_r+0x8f2>
 800e6ea:	f1c0 0320 	rsb	r3, r0, #32
 800e6ee:	2b04      	cmp	r3, #4
 800e6f0:	dd6b      	ble.n	800e7ca <_dtoa_r+0x8e2>
 800e6f2:	9b08      	ldr	r3, [sp, #32]
 800e6f4:	f1c0 001c 	rsb	r0, r0, #28
 800e6f8:	4403      	add	r3, r0
 800e6fa:	4480      	add	r8, r0
 800e6fc:	4406      	add	r6, r0
 800e6fe:	9308      	str	r3, [sp, #32]
 800e700:	f1b8 0f00 	cmp.w	r8, #0
 800e704:	dd05      	ble.n	800e712 <_dtoa_r+0x82a>
 800e706:	4649      	mov	r1, r9
 800e708:	4642      	mov	r2, r8
 800e70a:	4658      	mov	r0, fp
 800e70c:	f000 fcbe 	bl	800f08c <__lshift>
 800e710:	4681      	mov	r9, r0
 800e712:	9b08      	ldr	r3, [sp, #32]
 800e714:	2b00      	cmp	r3, #0
 800e716:	dd05      	ble.n	800e724 <_dtoa_r+0x83c>
 800e718:	4621      	mov	r1, r4
 800e71a:	461a      	mov	r2, r3
 800e71c:	4658      	mov	r0, fp
 800e71e:	f000 fcb5 	bl	800f08c <__lshift>
 800e722:	4604      	mov	r4, r0
 800e724:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e726:	2b00      	cmp	r3, #0
 800e728:	d059      	beq.n	800e7de <_dtoa_r+0x8f6>
 800e72a:	4621      	mov	r1, r4
 800e72c:	4648      	mov	r0, r9
 800e72e:	f000 fd19 	bl	800f164 <__mcmp>
 800e732:	2800      	cmp	r0, #0
 800e734:	da53      	bge.n	800e7de <_dtoa_r+0x8f6>
 800e736:	1e7b      	subs	r3, r7, #1
 800e738:	9304      	str	r3, [sp, #16]
 800e73a:	4649      	mov	r1, r9
 800e73c:	2300      	movs	r3, #0
 800e73e:	220a      	movs	r2, #10
 800e740:	4658      	mov	r0, fp
 800e742:	f000 faf7 	bl	800ed34 <__multadd>
 800e746:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e748:	4681      	mov	r9, r0
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	f000 8172 	beq.w	800ea34 <_dtoa_r+0xb4c>
 800e750:	2300      	movs	r3, #0
 800e752:	4629      	mov	r1, r5
 800e754:	220a      	movs	r2, #10
 800e756:	4658      	mov	r0, fp
 800e758:	f000 faec 	bl	800ed34 <__multadd>
 800e75c:	9b00      	ldr	r3, [sp, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	4605      	mov	r5, r0
 800e762:	dc67      	bgt.n	800e834 <_dtoa_r+0x94c>
 800e764:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e766:	2b02      	cmp	r3, #2
 800e768:	dc41      	bgt.n	800e7ee <_dtoa_r+0x906>
 800e76a:	e063      	b.n	800e834 <_dtoa_r+0x94c>
 800e76c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e76e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e772:	e746      	b.n	800e602 <_dtoa_r+0x71a>
 800e774:	9b07      	ldr	r3, [sp, #28]
 800e776:	1e5c      	subs	r4, r3, #1
 800e778:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e77a:	42a3      	cmp	r3, r4
 800e77c:	bfbf      	itttt	lt
 800e77e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e780:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e782:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e784:	1ae3      	sublt	r3, r4, r3
 800e786:	bfb4      	ite	lt
 800e788:	18d2      	addlt	r2, r2, r3
 800e78a:	1b1c      	subge	r4, r3, r4
 800e78c:	9b07      	ldr	r3, [sp, #28]
 800e78e:	bfbc      	itt	lt
 800e790:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e792:	2400      	movlt	r4, #0
 800e794:	2b00      	cmp	r3, #0
 800e796:	bfb5      	itete	lt
 800e798:	eba8 0603 	sublt.w	r6, r8, r3
 800e79c:	9b07      	ldrge	r3, [sp, #28]
 800e79e:	2300      	movlt	r3, #0
 800e7a0:	4646      	movge	r6, r8
 800e7a2:	e730      	b.n	800e606 <_dtoa_r+0x71e>
 800e7a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e7a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e7a8:	4646      	mov	r6, r8
 800e7aa:	e735      	b.n	800e618 <_dtoa_r+0x730>
 800e7ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e7ae:	e75c      	b.n	800e66a <_dtoa_r+0x782>
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	e788      	b.n	800e6c6 <_dtoa_r+0x7de>
 800e7b4:	3fe00000 	.word	0x3fe00000
 800e7b8:	40240000 	.word	0x40240000
 800e7bc:	40140000 	.word	0x40140000
 800e7c0:	9b02      	ldr	r3, [sp, #8]
 800e7c2:	e780      	b.n	800e6c6 <_dtoa_r+0x7de>
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7c8:	e782      	b.n	800e6d0 <_dtoa_r+0x7e8>
 800e7ca:	d099      	beq.n	800e700 <_dtoa_r+0x818>
 800e7cc:	9a08      	ldr	r2, [sp, #32]
 800e7ce:	331c      	adds	r3, #28
 800e7d0:	441a      	add	r2, r3
 800e7d2:	4498      	add	r8, r3
 800e7d4:	441e      	add	r6, r3
 800e7d6:	9208      	str	r2, [sp, #32]
 800e7d8:	e792      	b.n	800e700 <_dtoa_r+0x818>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	e7f6      	b.n	800e7cc <_dtoa_r+0x8e4>
 800e7de:	9b07      	ldr	r3, [sp, #28]
 800e7e0:	9704      	str	r7, [sp, #16]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	dc20      	bgt.n	800e828 <_dtoa_r+0x940>
 800e7e6:	9300      	str	r3, [sp, #0]
 800e7e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7ea:	2b02      	cmp	r3, #2
 800e7ec:	dd1e      	ble.n	800e82c <_dtoa_r+0x944>
 800e7ee:	9b00      	ldr	r3, [sp, #0]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	f47f aec0 	bne.w	800e576 <_dtoa_r+0x68e>
 800e7f6:	4621      	mov	r1, r4
 800e7f8:	2205      	movs	r2, #5
 800e7fa:	4658      	mov	r0, fp
 800e7fc:	f000 fa9a 	bl	800ed34 <__multadd>
 800e800:	4601      	mov	r1, r0
 800e802:	4604      	mov	r4, r0
 800e804:	4648      	mov	r0, r9
 800e806:	f000 fcad 	bl	800f164 <__mcmp>
 800e80a:	2800      	cmp	r0, #0
 800e80c:	f77f aeb3 	ble.w	800e576 <_dtoa_r+0x68e>
 800e810:	4656      	mov	r6, sl
 800e812:	2331      	movs	r3, #49	@ 0x31
 800e814:	f806 3b01 	strb.w	r3, [r6], #1
 800e818:	9b04      	ldr	r3, [sp, #16]
 800e81a:	3301      	adds	r3, #1
 800e81c:	9304      	str	r3, [sp, #16]
 800e81e:	e6ae      	b.n	800e57e <_dtoa_r+0x696>
 800e820:	9c07      	ldr	r4, [sp, #28]
 800e822:	9704      	str	r7, [sp, #16]
 800e824:	4625      	mov	r5, r4
 800e826:	e7f3      	b.n	800e810 <_dtoa_r+0x928>
 800e828:	9b07      	ldr	r3, [sp, #28]
 800e82a:	9300      	str	r3, [sp, #0]
 800e82c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e82e:	2b00      	cmp	r3, #0
 800e830:	f000 8104 	beq.w	800ea3c <_dtoa_r+0xb54>
 800e834:	2e00      	cmp	r6, #0
 800e836:	dd05      	ble.n	800e844 <_dtoa_r+0x95c>
 800e838:	4629      	mov	r1, r5
 800e83a:	4632      	mov	r2, r6
 800e83c:	4658      	mov	r0, fp
 800e83e:	f000 fc25 	bl	800f08c <__lshift>
 800e842:	4605      	mov	r5, r0
 800e844:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e846:	2b00      	cmp	r3, #0
 800e848:	d05a      	beq.n	800e900 <_dtoa_r+0xa18>
 800e84a:	6869      	ldr	r1, [r5, #4]
 800e84c:	4658      	mov	r0, fp
 800e84e:	f000 fa0f 	bl	800ec70 <_Balloc>
 800e852:	4606      	mov	r6, r0
 800e854:	b928      	cbnz	r0, 800e862 <_dtoa_r+0x97a>
 800e856:	4b84      	ldr	r3, [pc, #528]	@ (800ea68 <_dtoa_r+0xb80>)
 800e858:	4602      	mov	r2, r0
 800e85a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e85e:	f7ff bb5a 	b.w	800df16 <_dtoa_r+0x2e>
 800e862:	692a      	ldr	r2, [r5, #16]
 800e864:	3202      	adds	r2, #2
 800e866:	0092      	lsls	r2, r2, #2
 800e868:	f105 010c 	add.w	r1, r5, #12
 800e86c:	300c      	adds	r0, #12
 800e86e:	f7ff faa2 	bl	800ddb6 <memcpy>
 800e872:	2201      	movs	r2, #1
 800e874:	4631      	mov	r1, r6
 800e876:	4658      	mov	r0, fp
 800e878:	f000 fc08 	bl	800f08c <__lshift>
 800e87c:	f10a 0301 	add.w	r3, sl, #1
 800e880:	9307      	str	r3, [sp, #28]
 800e882:	9b00      	ldr	r3, [sp, #0]
 800e884:	4453      	add	r3, sl
 800e886:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e888:	9b02      	ldr	r3, [sp, #8]
 800e88a:	f003 0301 	and.w	r3, r3, #1
 800e88e:	462f      	mov	r7, r5
 800e890:	930a      	str	r3, [sp, #40]	@ 0x28
 800e892:	4605      	mov	r5, r0
 800e894:	9b07      	ldr	r3, [sp, #28]
 800e896:	4621      	mov	r1, r4
 800e898:	3b01      	subs	r3, #1
 800e89a:	4648      	mov	r0, r9
 800e89c:	9300      	str	r3, [sp, #0]
 800e89e:	f7ff fa98 	bl	800ddd2 <quorem>
 800e8a2:	4639      	mov	r1, r7
 800e8a4:	9002      	str	r0, [sp, #8]
 800e8a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e8aa:	4648      	mov	r0, r9
 800e8ac:	f000 fc5a 	bl	800f164 <__mcmp>
 800e8b0:	462a      	mov	r2, r5
 800e8b2:	9008      	str	r0, [sp, #32]
 800e8b4:	4621      	mov	r1, r4
 800e8b6:	4658      	mov	r0, fp
 800e8b8:	f000 fc70 	bl	800f19c <__mdiff>
 800e8bc:	68c2      	ldr	r2, [r0, #12]
 800e8be:	4606      	mov	r6, r0
 800e8c0:	bb02      	cbnz	r2, 800e904 <_dtoa_r+0xa1c>
 800e8c2:	4601      	mov	r1, r0
 800e8c4:	4648      	mov	r0, r9
 800e8c6:	f000 fc4d 	bl	800f164 <__mcmp>
 800e8ca:	4602      	mov	r2, r0
 800e8cc:	4631      	mov	r1, r6
 800e8ce:	4658      	mov	r0, fp
 800e8d0:	920e      	str	r2, [sp, #56]	@ 0x38
 800e8d2:	f000 fa0d 	bl	800ecf0 <_Bfree>
 800e8d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e8da:	9e07      	ldr	r6, [sp, #28]
 800e8dc:	ea43 0102 	orr.w	r1, r3, r2
 800e8e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e8e2:	4319      	orrs	r1, r3
 800e8e4:	d110      	bne.n	800e908 <_dtoa_r+0xa20>
 800e8e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e8ea:	d029      	beq.n	800e940 <_dtoa_r+0xa58>
 800e8ec:	9b08      	ldr	r3, [sp, #32]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	dd02      	ble.n	800e8f8 <_dtoa_r+0xa10>
 800e8f2:	9b02      	ldr	r3, [sp, #8]
 800e8f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e8f8:	9b00      	ldr	r3, [sp, #0]
 800e8fa:	f883 8000 	strb.w	r8, [r3]
 800e8fe:	e63f      	b.n	800e580 <_dtoa_r+0x698>
 800e900:	4628      	mov	r0, r5
 800e902:	e7bb      	b.n	800e87c <_dtoa_r+0x994>
 800e904:	2201      	movs	r2, #1
 800e906:	e7e1      	b.n	800e8cc <_dtoa_r+0x9e4>
 800e908:	9b08      	ldr	r3, [sp, #32]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	db04      	blt.n	800e918 <_dtoa_r+0xa30>
 800e90e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e910:	430b      	orrs	r3, r1
 800e912:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e914:	430b      	orrs	r3, r1
 800e916:	d120      	bne.n	800e95a <_dtoa_r+0xa72>
 800e918:	2a00      	cmp	r2, #0
 800e91a:	dded      	ble.n	800e8f8 <_dtoa_r+0xa10>
 800e91c:	4649      	mov	r1, r9
 800e91e:	2201      	movs	r2, #1
 800e920:	4658      	mov	r0, fp
 800e922:	f000 fbb3 	bl	800f08c <__lshift>
 800e926:	4621      	mov	r1, r4
 800e928:	4681      	mov	r9, r0
 800e92a:	f000 fc1b 	bl	800f164 <__mcmp>
 800e92e:	2800      	cmp	r0, #0
 800e930:	dc03      	bgt.n	800e93a <_dtoa_r+0xa52>
 800e932:	d1e1      	bne.n	800e8f8 <_dtoa_r+0xa10>
 800e934:	f018 0f01 	tst.w	r8, #1
 800e938:	d0de      	beq.n	800e8f8 <_dtoa_r+0xa10>
 800e93a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e93e:	d1d8      	bne.n	800e8f2 <_dtoa_r+0xa0a>
 800e940:	9a00      	ldr	r2, [sp, #0]
 800e942:	2339      	movs	r3, #57	@ 0x39
 800e944:	7013      	strb	r3, [r2, #0]
 800e946:	4633      	mov	r3, r6
 800e948:	461e      	mov	r6, r3
 800e94a:	3b01      	subs	r3, #1
 800e94c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e950:	2a39      	cmp	r2, #57	@ 0x39
 800e952:	d052      	beq.n	800e9fa <_dtoa_r+0xb12>
 800e954:	3201      	adds	r2, #1
 800e956:	701a      	strb	r2, [r3, #0]
 800e958:	e612      	b.n	800e580 <_dtoa_r+0x698>
 800e95a:	2a00      	cmp	r2, #0
 800e95c:	dd07      	ble.n	800e96e <_dtoa_r+0xa86>
 800e95e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e962:	d0ed      	beq.n	800e940 <_dtoa_r+0xa58>
 800e964:	9a00      	ldr	r2, [sp, #0]
 800e966:	f108 0301 	add.w	r3, r8, #1
 800e96a:	7013      	strb	r3, [r2, #0]
 800e96c:	e608      	b.n	800e580 <_dtoa_r+0x698>
 800e96e:	9b07      	ldr	r3, [sp, #28]
 800e970:	9a07      	ldr	r2, [sp, #28]
 800e972:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e976:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e978:	4293      	cmp	r3, r2
 800e97a:	d028      	beq.n	800e9ce <_dtoa_r+0xae6>
 800e97c:	4649      	mov	r1, r9
 800e97e:	2300      	movs	r3, #0
 800e980:	220a      	movs	r2, #10
 800e982:	4658      	mov	r0, fp
 800e984:	f000 f9d6 	bl	800ed34 <__multadd>
 800e988:	42af      	cmp	r7, r5
 800e98a:	4681      	mov	r9, r0
 800e98c:	f04f 0300 	mov.w	r3, #0
 800e990:	f04f 020a 	mov.w	r2, #10
 800e994:	4639      	mov	r1, r7
 800e996:	4658      	mov	r0, fp
 800e998:	d107      	bne.n	800e9aa <_dtoa_r+0xac2>
 800e99a:	f000 f9cb 	bl	800ed34 <__multadd>
 800e99e:	4607      	mov	r7, r0
 800e9a0:	4605      	mov	r5, r0
 800e9a2:	9b07      	ldr	r3, [sp, #28]
 800e9a4:	3301      	adds	r3, #1
 800e9a6:	9307      	str	r3, [sp, #28]
 800e9a8:	e774      	b.n	800e894 <_dtoa_r+0x9ac>
 800e9aa:	f000 f9c3 	bl	800ed34 <__multadd>
 800e9ae:	4629      	mov	r1, r5
 800e9b0:	4607      	mov	r7, r0
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	220a      	movs	r2, #10
 800e9b6:	4658      	mov	r0, fp
 800e9b8:	f000 f9bc 	bl	800ed34 <__multadd>
 800e9bc:	4605      	mov	r5, r0
 800e9be:	e7f0      	b.n	800e9a2 <_dtoa_r+0xaba>
 800e9c0:	9b00      	ldr	r3, [sp, #0]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	bfcc      	ite	gt
 800e9c6:	461e      	movgt	r6, r3
 800e9c8:	2601      	movle	r6, #1
 800e9ca:	4456      	add	r6, sl
 800e9cc:	2700      	movs	r7, #0
 800e9ce:	4649      	mov	r1, r9
 800e9d0:	2201      	movs	r2, #1
 800e9d2:	4658      	mov	r0, fp
 800e9d4:	f000 fb5a 	bl	800f08c <__lshift>
 800e9d8:	4621      	mov	r1, r4
 800e9da:	4681      	mov	r9, r0
 800e9dc:	f000 fbc2 	bl	800f164 <__mcmp>
 800e9e0:	2800      	cmp	r0, #0
 800e9e2:	dcb0      	bgt.n	800e946 <_dtoa_r+0xa5e>
 800e9e4:	d102      	bne.n	800e9ec <_dtoa_r+0xb04>
 800e9e6:	f018 0f01 	tst.w	r8, #1
 800e9ea:	d1ac      	bne.n	800e946 <_dtoa_r+0xa5e>
 800e9ec:	4633      	mov	r3, r6
 800e9ee:	461e      	mov	r6, r3
 800e9f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e9f4:	2a30      	cmp	r2, #48	@ 0x30
 800e9f6:	d0fa      	beq.n	800e9ee <_dtoa_r+0xb06>
 800e9f8:	e5c2      	b.n	800e580 <_dtoa_r+0x698>
 800e9fa:	459a      	cmp	sl, r3
 800e9fc:	d1a4      	bne.n	800e948 <_dtoa_r+0xa60>
 800e9fe:	9b04      	ldr	r3, [sp, #16]
 800ea00:	3301      	adds	r3, #1
 800ea02:	9304      	str	r3, [sp, #16]
 800ea04:	2331      	movs	r3, #49	@ 0x31
 800ea06:	f88a 3000 	strb.w	r3, [sl]
 800ea0a:	e5b9      	b.n	800e580 <_dtoa_r+0x698>
 800ea0c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ea0e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ea6c <_dtoa_r+0xb84>
 800ea12:	b11b      	cbz	r3, 800ea1c <_dtoa_r+0xb34>
 800ea14:	f10a 0308 	add.w	r3, sl, #8
 800ea18:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ea1a:	6013      	str	r3, [r2, #0]
 800ea1c:	4650      	mov	r0, sl
 800ea1e:	b019      	add	sp, #100	@ 0x64
 800ea20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea26:	2b01      	cmp	r3, #1
 800ea28:	f77f ae37 	ble.w	800e69a <_dtoa_r+0x7b2>
 800ea2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea30:	2001      	movs	r0, #1
 800ea32:	e655      	b.n	800e6e0 <_dtoa_r+0x7f8>
 800ea34:	9b00      	ldr	r3, [sp, #0]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	f77f aed6 	ble.w	800e7e8 <_dtoa_r+0x900>
 800ea3c:	4656      	mov	r6, sl
 800ea3e:	4621      	mov	r1, r4
 800ea40:	4648      	mov	r0, r9
 800ea42:	f7ff f9c6 	bl	800ddd2 <quorem>
 800ea46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ea4a:	f806 8b01 	strb.w	r8, [r6], #1
 800ea4e:	9b00      	ldr	r3, [sp, #0]
 800ea50:	eba6 020a 	sub.w	r2, r6, sl
 800ea54:	4293      	cmp	r3, r2
 800ea56:	ddb3      	ble.n	800e9c0 <_dtoa_r+0xad8>
 800ea58:	4649      	mov	r1, r9
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	220a      	movs	r2, #10
 800ea5e:	4658      	mov	r0, fp
 800ea60:	f000 f968 	bl	800ed34 <__multadd>
 800ea64:	4681      	mov	r9, r0
 800ea66:	e7ea      	b.n	800ea3e <_dtoa_r+0xb56>
 800ea68:	080111b1 	.word	0x080111b1
 800ea6c:	08011135 	.word	0x08011135

0800ea70 <_free_r>:
 800ea70:	b538      	push	{r3, r4, r5, lr}
 800ea72:	4605      	mov	r5, r0
 800ea74:	2900      	cmp	r1, #0
 800ea76:	d041      	beq.n	800eafc <_free_r+0x8c>
 800ea78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea7c:	1f0c      	subs	r4, r1, #4
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	bfb8      	it	lt
 800ea82:	18e4      	addlt	r4, r4, r3
 800ea84:	f000 f8e8 	bl	800ec58 <__malloc_lock>
 800ea88:	4a1d      	ldr	r2, [pc, #116]	@ (800eb00 <_free_r+0x90>)
 800ea8a:	6813      	ldr	r3, [r2, #0]
 800ea8c:	b933      	cbnz	r3, 800ea9c <_free_r+0x2c>
 800ea8e:	6063      	str	r3, [r4, #4]
 800ea90:	6014      	str	r4, [r2, #0]
 800ea92:	4628      	mov	r0, r5
 800ea94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea98:	f000 b8e4 	b.w	800ec64 <__malloc_unlock>
 800ea9c:	42a3      	cmp	r3, r4
 800ea9e:	d908      	bls.n	800eab2 <_free_r+0x42>
 800eaa0:	6820      	ldr	r0, [r4, #0]
 800eaa2:	1821      	adds	r1, r4, r0
 800eaa4:	428b      	cmp	r3, r1
 800eaa6:	bf01      	itttt	eq
 800eaa8:	6819      	ldreq	r1, [r3, #0]
 800eaaa:	685b      	ldreq	r3, [r3, #4]
 800eaac:	1809      	addeq	r1, r1, r0
 800eaae:	6021      	streq	r1, [r4, #0]
 800eab0:	e7ed      	b.n	800ea8e <_free_r+0x1e>
 800eab2:	461a      	mov	r2, r3
 800eab4:	685b      	ldr	r3, [r3, #4]
 800eab6:	b10b      	cbz	r3, 800eabc <_free_r+0x4c>
 800eab8:	42a3      	cmp	r3, r4
 800eaba:	d9fa      	bls.n	800eab2 <_free_r+0x42>
 800eabc:	6811      	ldr	r1, [r2, #0]
 800eabe:	1850      	adds	r0, r2, r1
 800eac0:	42a0      	cmp	r0, r4
 800eac2:	d10b      	bne.n	800eadc <_free_r+0x6c>
 800eac4:	6820      	ldr	r0, [r4, #0]
 800eac6:	4401      	add	r1, r0
 800eac8:	1850      	adds	r0, r2, r1
 800eaca:	4283      	cmp	r3, r0
 800eacc:	6011      	str	r1, [r2, #0]
 800eace:	d1e0      	bne.n	800ea92 <_free_r+0x22>
 800ead0:	6818      	ldr	r0, [r3, #0]
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	6053      	str	r3, [r2, #4]
 800ead6:	4408      	add	r0, r1
 800ead8:	6010      	str	r0, [r2, #0]
 800eada:	e7da      	b.n	800ea92 <_free_r+0x22>
 800eadc:	d902      	bls.n	800eae4 <_free_r+0x74>
 800eade:	230c      	movs	r3, #12
 800eae0:	602b      	str	r3, [r5, #0]
 800eae2:	e7d6      	b.n	800ea92 <_free_r+0x22>
 800eae4:	6820      	ldr	r0, [r4, #0]
 800eae6:	1821      	adds	r1, r4, r0
 800eae8:	428b      	cmp	r3, r1
 800eaea:	bf04      	itt	eq
 800eaec:	6819      	ldreq	r1, [r3, #0]
 800eaee:	685b      	ldreq	r3, [r3, #4]
 800eaf0:	6063      	str	r3, [r4, #4]
 800eaf2:	bf04      	itt	eq
 800eaf4:	1809      	addeq	r1, r1, r0
 800eaf6:	6021      	streq	r1, [r4, #0]
 800eaf8:	6054      	str	r4, [r2, #4]
 800eafa:	e7ca      	b.n	800ea92 <_free_r+0x22>
 800eafc:	bd38      	pop	{r3, r4, r5, pc}
 800eafe:	bf00      	nop
 800eb00:	2000549c 	.word	0x2000549c

0800eb04 <malloc>:
 800eb04:	4b02      	ldr	r3, [pc, #8]	@ (800eb10 <malloc+0xc>)
 800eb06:	4601      	mov	r1, r0
 800eb08:	6818      	ldr	r0, [r3, #0]
 800eb0a:	f000 b825 	b.w	800eb58 <_malloc_r>
 800eb0e:	bf00      	nop
 800eb10:	20000040 	.word	0x20000040

0800eb14 <sbrk_aligned>:
 800eb14:	b570      	push	{r4, r5, r6, lr}
 800eb16:	4e0f      	ldr	r6, [pc, #60]	@ (800eb54 <sbrk_aligned+0x40>)
 800eb18:	460c      	mov	r4, r1
 800eb1a:	6831      	ldr	r1, [r6, #0]
 800eb1c:	4605      	mov	r5, r0
 800eb1e:	b911      	cbnz	r1, 800eb26 <sbrk_aligned+0x12>
 800eb20:	f000 fe46 	bl	800f7b0 <_sbrk_r>
 800eb24:	6030      	str	r0, [r6, #0]
 800eb26:	4621      	mov	r1, r4
 800eb28:	4628      	mov	r0, r5
 800eb2a:	f000 fe41 	bl	800f7b0 <_sbrk_r>
 800eb2e:	1c43      	adds	r3, r0, #1
 800eb30:	d103      	bne.n	800eb3a <sbrk_aligned+0x26>
 800eb32:	f04f 34ff 	mov.w	r4, #4294967295
 800eb36:	4620      	mov	r0, r4
 800eb38:	bd70      	pop	{r4, r5, r6, pc}
 800eb3a:	1cc4      	adds	r4, r0, #3
 800eb3c:	f024 0403 	bic.w	r4, r4, #3
 800eb40:	42a0      	cmp	r0, r4
 800eb42:	d0f8      	beq.n	800eb36 <sbrk_aligned+0x22>
 800eb44:	1a21      	subs	r1, r4, r0
 800eb46:	4628      	mov	r0, r5
 800eb48:	f000 fe32 	bl	800f7b0 <_sbrk_r>
 800eb4c:	3001      	adds	r0, #1
 800eb4e:	d1f2      	bne.n	800eb36 <sbrk_aligned+0x22>
 800eb50:	e7ef      	b.n	800eb32 <sbrk_aligned+0x1e>
 800eb52:	bf00      	nop
 800eb54:	20005498 	.word	0x20005498

0800eb58 <_malloc_r>:
 800eb58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb5c:	1ccd      	adds	r5, r1, #3
 800eb5e:	f025 0503 	bic.w	r5, r5, #3
 800eb62:	3508      	adds	r5, #8
 800eb64:	2d0c      	cmp	r5, #12
 800eb66:	bf38      	it	cc
 800eb68:	250c      	movcc	r5, #12
 800eb6a:	2d00      	cmp	r5, #0
 800eb6c:	4606      	mov	r6, r0
 800eb6e:	db01      	blt.n	800eb74 <_malloc_r+0x1c>
 800eb70:	42a9      	cmp	r1, r5
 800eb72:	d904      	bls.n	800eb7e <_malloc_r+0x26>
 800eb74:	230c      	movs	r3, #12
 800eb76:	6033      	str	r3, [r6, #0]
 800eb78:	2000      	movs	r0, #0
 800eb7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ec54 <_malloc_r+0xfc>
 800eb82:	f000 f869 	bl	800ec58 <__malloc_lock>
 800eb86:	f8d8 3000 	ldr.w	r3, [r8]
 800eb8a:	461c      	mov	r4, r3
 800eb8c:	bb44      	cbnz	r4, 800ebe0 <_malloc_r+0x88>
 800eb8e:	4629      	mov	r1, r5
 800eb90:	4630      	mov	r0, r6
 800eb92:	f7ff ffbf 	bl	800eb14 <sbrk_aligned>
 800eb96:	1c43      	adds	r3, r0, #1
 800eb98:	4604      	mov	r4, r0
 800eb9a:	d158      	bne.n	800ec4e <_malloc_r+0xf6>
 800eb9c:	f8d8 4000 	ldr.w	r4, [r8]
 800eba0:	4627      	mov	r7, r4
 800eba2:	2f00      	cmp	r7, #0
 800eba4:	d143      	bne.n	800ec2e <_malloc_r+0xd6>
 800eba6:	2c00      	cmp	r4, #0
 800eba8:	d04b      	beq.n	800ec42 <_malloc_r+0xea>
 800ebaa:	6823      	ldr	r3, [r4, #0]
 800ebac:	4639      	mov	r1, r7
 800ebae:	4630      	mov	r0, r6
 800ebb0:	eb04 0903 	add.w	r9, r4, r3
 800ebb4:	f000 fdfc 	bl	800f7b0 <_sbrk_r>
 800ebb8:	4581      	cmp	r9, r0
 800ebba:	d142      	bne.n	800ec42 <_malloc_r+0xea>
 800ebbc:	6821      	ldr	r1, [r4, #0]
 800ebbe:	1a6d      	subs	r5, r5, r1
 800ebc0:	4629      	mov	r1, r5
 800ebc2:	4630      	mov	r0, r6
 800ebc4:	f7ff ffa6 	bl	800eb14 <sbrk_aligned>
 800ebc8:	3001      	adds	r0, #1
 800ebca:	d03a      	beq.n	800ec42 <_malloc_r+0xea>
 800ebcc:	6823      	ldr	r3, [r4, #0]
 800ebce:	442b      	add	r3, r5
 800ebd0:	6023      	str	r3, [r4, #0]
 800ebd2:	f8d8 3000 	ldr.w	r3, [r8]
 800ebd6:	685a      	ldr	r2, [r3, #4]
 800ebd8:	bb62      	cbnz	r2, 800ec34 <_malloc_r+0xdc>
 800ebda:	f8c8 7000 	str.w	r7, [r8]
 800ebde:	e00f      	b.n	800ec00 <_malloc_r+0xa8>
 800ebe0:	6822      	ldr	r2, [r4, #0]
 800ebe2:	1b52      	subs	r2, r2, r5
 800ebe4:	d420      	bmi.n	800ec28 <_malloc_r+0xd0>
 800ebe6:	2a0b      	cmp	r2, #11
 800ebe8:	d917      	bls.n	800ec1a <_malloc_r+0xc2>
 800ebea:	1961      	adds	r1, r4, r5
 800ebec:	42a3      	cmp	r3, r4
 800ebee:	6025      	str	r5, [r4, #0]
 800ebf0:	bf18      	it	ne
 800ebf2:	6059      	strne	r1, [r3, #4]
 800ebf4:	6863      	ldr	r3, [r4, #4]
 800ebf6:	bf08      	it	eq
 800ebf8:	f8c8 1000 	streq.w	r1, [r8]
 800ebfc:	5162      	str	r2, [r4, r5]
 800ebfe:	604b      	str	r3, [r1, #4]
 800ec00:	4630      	mov	r0, r6
 800ec02:	f000 f82f 	bl	800ec64 <__malloc_unlock>
 800ec06:	f104 000b 	add.w	r0, r4, #11
 800ec0a:	1d23      	adds	r3, r4, #4
 800ec0c:	f020 0007 	bic.w	r0, r0, #7
 800ec10:	1ac2      	subs	r2, r0, r3
 800ec12:	bf1c      	itt	ne
 800ec14:	1a1b      	subne	r3, r3, r0
 800ec16:	50a3      	strne	r3, [r4, r2]
 800ec18:	e7af      	b.n	800eb7a <_malloc_r+0x22>
 800ec1a:	6862      	ldr	r2, [r4, #4]
 800ec1c:	42a3      	cmp	r3, r4
 800ec1e:	bf0c      	ite	eq
 800ec20:	f8c8 2000 	streq.w	r2, [r8]
 800ec24:	605a      	strne	r2, [r3, #4]
 800ec26:	e7eb      	b.n	800ec00 <_malloc_r+0xa8>
 800ec28:	4623      	mov	r3, r4
 800ec2a:	6864      	ldr	r4, [r4, #4]
 800ec2c:	e7ae      	b.n	800eb8c <_malloc_r+0x34>
 800ec2e:	463c      	mov	r4, r7
 800ec30:	687f      	ldr	r7, [r7, #4]
 800ec32:	e7b6      	b.n	800eba2 <_malloc_r+0x4a>
 800ec34:	461a      	mov	r2, r3
 800ec36:	685b      	ldr	r3, [r3, #4]
 800ec38:	42a3      	cmp	r3, r4
 800ec3a:	d1fb      	bne.n	800ec34 <_malloc_r+0xdc>
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	6053      	str	r3, [r2, #4]
 800ec40:	e7de      	b.n	800ec00 <_malloc_r+0xa8>
 800ec42:	230c      	movs	r3, #12
 800ec44:	6033      	str	r3, [r6, #0]
 800ec46:	4630      	mov	r0, r6
 800ec48:	f000 f80c 	bl	800ec64 <__malloc_unlock>
 800ec4c:	e794      	b.n	800eb78 <_malloc_r+0x20>
 800ec4e:	6005      	str	r5, [r0, #0]
 800ec50:	e7d6      	b.n	800ec00 <_malloc_r+0xa8>
 800ec52:	bf00      	nop
 800ec54:	2000549c 	.word	0x2000549c

0800ec58 <__malloc_lock>:
 800ec58:	4801      	ldr	r0, [pc, #4]	@ (800ec60 <__malloc_lock+0x8>)
 800ec5a:	f7ff b8aa 	b.w	800ddb2 <__retarget_lock_acquire_recursive>
 800ec5e:	bf00      	nop
 800ec60:	20005494 	.word	0x20005494

0800ec64 <__malloc_unlock>:
 800ec64:	4801      	ldr	r0, [pc, #4]	@ (800ec6c <__malloc_unlock+0x8>)
 800ec66:	f7ff b8a5 	b.w	800ddb4 <__retarget_lock_release_recursive>
 800ec6a:	bf00      	nop
 800ec6c:	20005494 	.word	0x20005494

0800ec70 <_Balloc>:
 800ec70:	b570      	push	{r4, r5, r6, lr}
 800ec72:	69c6      	ldr	r6, [r0, #28]
 800ec74:	4604      	mov	r4, r0
 800ec76:	460d      	mov	r5, r1
 800ec78:	b976      	cbnz	r6, 800ec98 <_Balloc+0x28>
 800ec7a:	2010      	movs	r0, #16
 800ec7c:	f7ff ff42 	bl	800eb04 <malloc>
 800ec80:	4602      	mov	r2, r0
 800ec82:	61e0      	str	r0, [r4, #28]
 800ec84:	b920      	cbnz	r0, 800ec90 <_Balloc+0x20>
 800ec86:	4b18      	ldr	r3, [pc, #96]	@ (800ece8 <_Balloc+0x78>)
 800ec88:	4818      	ldr	r0, [pc, #96]	@ (800ecec <_Balloc+0x7c>)
 800ec8a:	216b      	movs	r1, #107	@ 0x6b
 800ec8c:	f000 fda0 	bl	800f7d0 <__assert_func>
 800ec90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec94:	6006      	str	r6, [r0, #0]
 800ec96:	60c6      	str	r6, [r0, #12]
 800ec98:	69e6      	ldr	r6, [r4, #28]
 800ec9a:	68f3      	ldr	r3, [r6, #12]
 800ec9c:	b183      	cbz	r3, 800ecc0 <_Balloc+0x50>
 800ec9e:	69e3      	ldr	r3, [r4, #28]
 800eca0:	68db      	ldr	r3, [r3, #12]
 800eca2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eca6:	b9b8      	cbnz	r0, 800ecd8 <_Balloc+0x68>
 800eca8:	2101      	movs	r1, #1
 800ecaa:	fa01 f605 	lsl.w	r6, r1, r5
 800ecae:	1d72      	adds	r2, r6, #5
 800ecb0:	0092      	lsls	r2, r2, #2
 800ecb2:	4620      	mov	r0, r4
 800ecb4:	f000 fdaa 	bl	800f80c <_calloc_r>
 800ecb8:	b160      	cbz	r0, 800ecd4 <_Balloc+0x64>
 800ecba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ecbe:	e00e      	b.n	800ecde <_Balloc+0x6e>
 800ecc0:	2221      	movs	r2, #33	@ 0x21
 800ecc2:	2104      	movs	r1, #4
 800ecc4:	4620      	mov	r0, r4
 800ecc6:	f000 fda1 	bl	800f80c <_calloc_r>
 800ecca:	69e3      	ldr	r3, [r4, #28]
 800eccc:	60f0      	str	r0, [r6, #12]
 800ecce:	68db      	ldr	r3, [r3, #12]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d1e4      	bne.n	800ec9e <_Balloc+0x2e>
 800ecd4:	2000      	movs	r0, #0
 800ecd6:	bd70      	pop	{r4, r5, r6, pc}
 800ecd8:	6802      	ldr	r2, [r0, #0]
 800ecda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ecde:	2300      	movs	r3, #0
 800ece0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ece4:	e7f7      	b.n	800ecd6 <_Balloc+0x66>
 800ece6:	bf00      	nop
 800ece8:	08011142 	.word	0x08011142
 800ecec:	080111c2 	.word	0x080111c2

0800ecf0 <_Bfree>:
 800ecf0:	b570      	push	{r4, r5, r6, lr}
 800ecf2:	69c6      	ldr	r6, [r0, #28]
 800ecf4:	4605      	mov	r5, r0
 800ecf6:	460c      	mov	r4, r1
 800ecf8:	b976      	cbnz	r6, 800ed18 <_Bfree+0x28>
 800ecfa:	2010      	movs	r0, #16
 800ecfc:	f7ff ff02 	bl	800eb04 <malloc>
 800ed00:	4602      	mov	r2, r0
 800ed02:	61e8      	str	r0, [r5, #28]
 800ed04:	b920      	cbnz	r0, 800ed10 <_Bfree+0x20>
 800ed06:	4b09      	ldr	r3, [pc, #36]	@ (800ed2c <_Bfree+0x3c>)
 800ed08:	4809      	ldr	r0, [pc, #36]	@ (800ed30 <_Bfree+0x40>)
 800ed0a:	218f      	movs	r1, #143	@ 0x8f
 800ed0c:	f000 fd60 	bl	800f7d0 <__assert_func>
 800ed10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed14:	6006      	str	r6, [r0, #0]
 800ed16:	60c6      	str	r6, [r0, #12]
 800ed18:	b13c      	cbz	r4, 800ed2a <_Bfree+0x3a>
 800ed1a:	69eb      	ldr	r3, [r5, #28]
 800ed1c:	6862      	ldr	r2, [r4, #4]
 800ed1e:	68db      	ldr	r3, [r3, #12]
 800ed20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ed24:	6021      	str	r1, [r4, #0]
 800ed26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ed2a:	bd70      	pop	{r4, r5, r6, pc}
 800ed2c:	08011142 	.word	0x08011142
 800ed30:	080111c2 	.word	0x080111c2

0800ed34 <__multadd>:
 800ed34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed38:	690d      	ldr	r5, [r1, #16]
 800ed3a:	4607      	mov	r7, r0
 800ed3c:	460c      	mov	r4, r1
 800ed3e:	461e      	mov	r6, r3
 800ed40:	f101 0c14 	add.w	ip, r1, #20
 800ed44:	2000      	movs	r0, #0
 800ed46:	f8dc 3000 	ldr.w	r3, [ip]
 800ed4a:	b299      	uxth	r1, r3
 800ed4c:	fb02 6101 	mla	r1, r2, r1, r6
 800ed50:	0c1e      	lsrs	r6, r3, #16
 800ed52:	0c0b      	lsrs	r3, r1, #16
 800ed54:	fb02 3306 	mla	r3, r2, r6, r3
 800ed58:	b289      	uxth	r1, r1
 800ed5a:	3001      	adds	r0, #1
 800ed5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ed60:	4285      	cmp	r5, r0
 800ed62:	f84c 1b04 	str.w	r1, [ip], #4
 800ed66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ed6a:	dcec      	bgt.n	800ed46 <__multadd+0x12>
 800ed6c:	b30e      	cbz	r6, 800edb2 <__multadd+0x7e>
 800ed6e:	68a3      	ldr	r3, [r4, #8]
 800ed70:	42ab      	cmp	r3, r5
 800ed72:	dc19      	bgt.n	800eda8 <__multadd+0x74>
 800ed74:	6861      	ldr	r1, [r4, #4]
 800ed76:	4638      	mov	r0, r7
 800ed78:	3101      	adds	r1, #1
 800ed7a:	f7ff ff79 	bl	800ec70 <_Balloc>
 800ed7e:	4680      	mov	r8, r0
 800ed80:	b928      	cbnz	r0, 800ed8e <__multadd+0x5a>
 800ed82:	4602      	mov	r2, r0
 800ed84:	4b0c      	ldr	r3, [pc, #48]	@ (800edb8 <__multadd+0x84>)
 800ed86:	480d      	ldr	r0, [pc, #52]	@ (800edbc <__multadd+0x88>)
 800ed88:	21ba      	movs	r1, #186	@ 0xba
 800ed8a:	f000 fd21 	bl	800f7d0 <__assert_func>
 800ed8e:	6922      	ldr	r2, [r4, #16]
 800ed90:	3202      	adds	r2, #2
 800ed92:	f104 010c 	add.w	r1, r4, #12
 800ed96:	0092      	lsls	r2, r2, #2
 800ed98:	300c      	adds	r0, #12
 800ed9a:	f7ff f80c 	bl	800ddb6 <memcpy>
 800ed9e:	4621      	mov	r1, r4
 800eda0:	4638      	mov	r0, r7
 800eda2:	f7ff ffa5 	bl	800ecf0 <_Bfree>
 800eda6:	4644      	mov	r4, r8
 800eda8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800edac:	3501      	adds	r5, #1
 800edae:	615e      	str	r6, [r3, #20]
 800edb0:	6125      	str	r5, [r4, #16]
 800edb2:	4620      	mov	r0, r4
 800edb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edb8:	080111b1 	.word	0x080111b1
 800edbc:	080111c2 	.word	0x080111c2

0800edc0 <__hi0bits>:
 800edc0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800edc4:	4603      	mov	r3, r0
 800edc6:	bf36      	itet	cc
 800edc8:	0403      	lslcc	r3, r0, #16
 800edca:	2000      	movcs	r0, #0
 800edcc:	2010      	movcc	r0, #16
 800edce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800edd2:	bf3c      	itt	cc
 800edd4:	021b      	lslcc	r3, r3, #8
 800edd6:	3008      	addcc	r0, #8
 800edd8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eddc:	bf3c      	itt	cc
 800edde:	011b      	lslcc	r3, r3, #4
 800ede0:	3004      	addcc	r0, #4
 800ede2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ede6:	bf3c      	itt	cc
 800ede8:	009b      	lslcc	r3, r3, #2
 800edea:	3002      	addcc	r0, #2
 800edec:	2b00      	cmp	r3, #0
 800edee:	db05      	blt.n	800edfc <__hi0bits+0x3c>
 800edf0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800edf4:	f100 0001 	add.w	r0, r0, #1
 800edf8:	bf08      	it	eq
 800edfa:	2020      	moveq	r0, #32
 800edfc:	4770      	bx	lr

0800edfe <__lo0bits>:
 800edfe:	6803      	ldr	r3, [r0, #0]
 800ee00:	4602      	mov	r2, r0
 800ee02:	f013 0007 	ands.w	r0, r3, #7
 800ee06:	d00b      	beq.n	800ee20 <__lo0bits+0x22>
 800ee08:	07d9      	lsls	r1, r3, #31
 800ee0a:	d421      	bmi.n	800ee50 <__lo0bits+0x52>
 800ee0c:	0798      	lsls	r0, r3, #30
 800ee0e:	bf49      	itett	mi
 800ee10:	085b      	lsrmi	r3, r3, #1
 800ee12:	089b      	lsrpl	r3, r3, #2
 800ee14:	2001      	movmi	r0, #1
 800ee16:	6013      	strmi	r3, [r2, #0]
 800ee18:	bf5c      	itt	pl
 800ee1a:	6013      	strpl	r3, [r2, #0]
 800ee1c:	2002      	movpl	r0, #2
 800ee1e:	4770      	bx	lr
 800ee20:	b299      	uxth	r1, r3
 800ee22:	b909      	cbnz	r1, 800ee28 <__lo0bits+0x2a>
 800ee24:	0c1b      	lsrs	r3, r3, #16
 800ee26:	2010      	movs	r0, #16
 800ee28:	b2d9      	uxtb	r1, r3
 800ee2a:	b909      	cbnz	r1, 800ee30 <__lo0bits+0x32>
 800ee2c:	3008      	adds	r0, #8
 800ee2e:	0a1b      	lsrs	r3, r3, #8
 800ee30:	0719      	lsls	r1, r3, #28
 800ee32:	bf04      	itt	eq
 800ee34:	091b      	lsreq	r3, r3, #4
 800ee36:	3004      	addeq	r0, #4
 800ee38:	0799      	lsls	r1, r3, #30
 800ee3a:	bf04      	itt	eq
 800ee3c:	089b      	lsreq	r3, r3, #2
 800ee3e:	3002      	addeq	r0, #2
 800ee40:	07d9      	lsls	r1, r3, #31
 800ee42:	d403      	bmi.n	800ee4c <__lo0bits+0x4e>
 800ee44:	085b      	lsrs	r3, r3, #1
 800ee46:	f100 0001 	add.w	r0, r0, #1
 800ee4a:	d003      	beq.n	800ee54 <__lo0bits+0x56>
 800ee4c:	6013      	str	r3, [r2, #0]
 800ee4e:	4770      	bx	lr
 800ee50:	2000      	movs	r0, #0
 800ee52:	4770      	bx	lr
 800ee54:	2020      	movs	r0, #32
 800ee56:	4770      	bx	lr

0800ee58 <__i2b>:
 800ee58:	b510      	push	{r4, lr}
 800ee5a:	460c      	mov	r4, r1
 800ee5c:	2101      	movs	r1, #1
 800ee5e:	f7ff ff07 	bl	800ec70 <_Balloc>
 800ee62:	4602      	mov	r2, r0
 800ee64:	b928      	cbnz	r0, 800ee72 <__i2b+0x1a>
 800ee66:	4b05      	ldr	r3, [pc, #20]	@ (800ee7c <__i2b+0x24>)
 800ee68:	4805      	ldr	r0, [pc, #20]	@ (800ee80 <__i2b+0x28>)
 800ee6a:	f240 1145 	movw	r1, #325	@ 0x145
 800ee6e:	f000 fcaf 	bl	800f7d0 <__assert_func>
 800ee72:	2301      	movs	r3, #1
 800ee74:	6144      	str	r4, [r0, #20]
 800ee76:	6103      	str	r3, [r0, #16]
 800ee78:	bd10      	pop	{r4, pc}
 800ee7a:	bf00      	nop
 800ee7c:	080111b1 	.word	0x080111b1
 800ee80:	080111c2 	.word	0x080111c2

0800ee84 <__multiply>:
 800ee84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee88:	4614      	mov	r4, r2
 800ee8a:	690a      	ldr	r2, [r1, #16]
 800ee8c:	6923      	ldr	r3, [r4, #16]
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	bfa8      	it	ge
 800ee92:	4623      	movge	r3, r4
 800ee94:	460f      	mov	r7, r1
 800ee96:	bfa4      	itt	ge
 800ee98:	460c      	movge	r4, r1
 800ee9a:	461f      	movge	r7, r3
 800ee9c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800eea0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800eea4:	68a3      	ldr	r3, [r4, #8]
 800eea6:	6861      	ldr	r1, [r4, #4]
 800eea8:	eb0a 0609 	add.w	r6, sl, r9
 800eeac:	42b3      	cmp	r3, r6
 800eeae:	b085      	sub	sp, #20
 800eeb0:	bfb8      	it	lt
 800eeb2:	3101      	addlt	r1, #1
 800eeb4:	f7ff fedc 	bl	800ec70 <_Balloc>
 800eeb8:	b930      	cbnz	r0, 800eec8 <__multiply+0x44>
 800eeba:	4602      	mov	r2, r0
 800eebc:	4b44      	ldr	r3, [pc, #272]	@ (800efd0 <__multiply+0x14c>)
 800eebe:	4845      	ldr	r0, [pc, #276]	@ (800efd4 <__multiply+0x150>)
 800eec0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800eec4:	f000 fc84 	bl	800f7d0 <__assert_func>
 800eec8:	f100 0514 	add.w	r5, r0, #20
 800eecc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800eed0:	462b      	mov	r3, r5
 800eed2:	2200      	movs	r2, #0
 800eed4:	4543      	cmp	r3, r8
 800eed6:	d321      	bcc.n	800ef1c <__multiply+0x98>
 800eed8:	f107 0114 	add.w	r1, r7, #20
 800eedc:	f104 0214 	add.w	r2, r4, #20
 800eee0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800eee4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800eee8:	9302      	str	r3, [sp, #8]
 800eeea:	1b13      	subs	r3, r2, r4
 800eeec:	3b15      	subs	r3, #21
 800eeee:	f023 0303 	bic.w	r3, r3, #3
 800eef2:	3304      	adds	r3, #4
 800eef4:	f104 0715 	add.w	r7, r4, #21
 800eef8:	42ba      	cmp	r2, r7
 800eefa:	bf38      	it	cc
 800eefc:	2304      	movcc	r3, #4
 800eefe:	9301      	str	r3, [sp, #4]
 800ef00:	9b02      	ldr	r3, [sp, #8]
 800ef02:	9103      	str	r1, [sp, #12]
 800ef04:	428b      	cmp	r3, r1
 800ef06:	d80c      	bhi.n	800ef22 <__multiply+0x9e>
 800ef08:	2e00      	cmp	r6, #0
 800ef0a:	dd03      	ble.n	800ef14 <__multiply+0x90>
 800ef0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d05b      	beq.n	800efcc <__multiply+0x148>
 800ef14:	6106      	str	r6, [r0, #16]
 800ef16:	b005      	add	sp, #20
 800ef18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef1c:	f843 2b04 	str.w	r2, [r3], #4
 800ef20:	e7d8      	b.n	800eed4 <__multiply+0x50>
 800ef22:	f8b1 a000 	ldrh.w	sl, [r1]
 800ef26:	f1ba 0f00 	cmp.w	sl, #0
 800ef2a:	d024      	beq.n	800ef76 <__multiply+0xf2>
 800ef2c:	f104 0e14 	add.w	lr, r4, #20
 800ef30:	46a9      	mov	r9, r5
 800ef32:	f04f 0c00 	mov.w	ip, #0
 800ef36:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ef3a:	f8d9 3000 	ldr.w	r3, [r9]
 800ef3e:	fa1f fb87 	uxth.w	fp, r7
 800ef42:	b29b      	uxth	r3, r3
 800ef44:	fb0a 330b 	mla	r3, sl, fp, r3
 800ef48:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ef4c:	f8d9 7000 	ldr.w	r7, [r9]
 800ef50:	4463      	add	r3, ip
 800ef52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ef56:	fb0a c70b 	mla	r7, sl, fp, ip
 800ef5a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ef5e:	b29b      	uxth	r3, r3
 800ef60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ef64:	4572      	cmp	r2, lr
 800ef66:	f849 3b04 	str.w	r3, [r9], #4
 800ef6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ef6e:	d8e2      	bhi.n	800ef36 <__multiply+0xb2>
 800ef70:	9b01      	ldr	r3, [sp, #4]
 800ef72:	f845 c003 	str.w	ip, [r5, r3]
 800ef76:	9b03      	ldr	r3, [sp, #12]
 800ef78:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ef7c:	3104      	adds	r1, #4
 800ef7e:	f1b9 0f00 	cmp.w	r9, #0
 800ef82:	d021      	beq.n	800efc8 <__multiply+0x144>
 800ef84:	682b      	ldr	r3, [r5, #0]
 800ef86:	f104 0c14 	add.w	ip, r4, #20
 800ef8a:	46ae      	mov	lr, r5
 800ef8c:	f04f 0a00 	mov.w	sl, #0
 800ef90:	f8bc b000 	ldrh.w	fp, [ip]
 800ef94:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ef98:	fb09 770b 	mla	r7, r9, fp, r7
 800ef9c:	4457      	add	r7, sl
 800ef9e:	b29b      	uxth	r3, r3
 800efa0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800efa4:	f84e 3b04 	str.w	r3, [lr], #4
 800efa8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800efac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800efb0:	f8be 3000 	ldrh.w	r3, [lr]
 800efb4:	fb09 330a 	mla	r3, r9, sl, r3
 800efb8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800efbc:	4562      	cmp	r2, ip
 800efbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800efc2:	d8e5      	bhi.n	800ef90 <__multiply+0x10c>
 800efc4:	9f01      	ldr	r7, [sp, #4]
 800efc6:	51eb      	str	r3, [r5, r7]
 800efc8:	3504      	adds	r5, #4
 800efca:	e799      	b.n	800ef00 <__multiply+0x7c>
 800efcc:	3e01      	subs	r6, #1
 800efce:	e79b      	b.n	800ef08 <__multiply+0x84>
 800efd0:	080111b1 	.word	0x080111b1
 800efd4:	080111c2 	.word	0x080111c2

0800efd8 <__pow5mult>:
 800efd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efdc:	4615      	mov	r5, r2
 800efde:	f012 0203 	ands.w	r2, r2, #3
 800efe2:	4607      	mov	r7, r0
 800efe4:	460e      	mov	r6, r1
 800efe6:	d007      	beq.n	800eff8 <__pow5mult+0x20>
 800efe8:	4c25      	ldr	r4, [pc, #148]	@ (800f080 <__pow5mult+0xa8>)
 800efea:	3a01      	subs	r2, #1
 800efec:	2300      	movs	r3, #0
 800efee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eff2:	f7ff fe9f 	bl	800ed34 <__multadd>
 800eff6:	4606      	mov	r6, r0
 800eff8:	10ad      	asrs	r5, r5, #2
 800effa:	d03d      	beq.n	800f078 <__pow5mult+0xa0>
 800effc:	69fc      	ldr	r4, [r7, #28]
 800effe:	b97c      	cbnz	r4, 800f020 <__pow5mult+0x48>
 800f000:	2010      	movs	r0, #16
 800f002:	f7ff fd7f 	bl	800eb04 <malloc>
 800f006:	4602      	mov	r2, r0
 800f008:	61f8      	str	r0, [r7, #28]
 800f00a:	b928      	cbnz	r0, 800f018 <__pow5mult+0x40>
 800f00c:	4b1d      	ldr	r3, [pc, #116]	@ (800f084 <__pow5mult+0xac>)
 800f00e:	481e      	ldr	r0, [pc, #120]	@ (800f088 <__pow5mult+0xb0>)
 800f010:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f014:	f000 fbdc 	bl	800f7d0 <__assert_func>
 800f018:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f01c:	6004      	str	r4, [r0, #0]
 800f01e:	60c4      	str	r4, [r0, #12]
 800f020:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f024:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f028:	b94c      	cbnz	r4, 800f03e <__pow5mult+0x66>
 800f02a:	f240 2171 	movw	r1, #625	@ 0x271
 800f02e:	4638      	mov	r0, r7
 800f030:	f7ff ff12 	bl	800ee58 <__i2b>
 800f034:	2300      	movs	r3, #0
 800f036:	f8c8 0008 	str.w	r0, [r8, #8]
 800f03a:	4604      	mov	r4, r0
 800f03c:	6003      	str	r3, [r0, #0]
 800f03e:	f04f 0900 	mov.w	r9, #0
 800f042:	07eb      	lsls	r3, r5, #31
 800f044:	d50a      	bpl.n	800f05c <__pow5mult+0x84>
 800f046:	4631      	mov	r1, r6
 800f048:	4622      	mov	r2, r4
 800f04a:	4638      	mov	r0, r7
 800f04c:	f7ff ff1a 	bl	800ee84 <__multiply>
 800f050:	4631      	mov	r1, r6
 800f052:	4680      	mov	r8, r0
 800f054:	4638      	mov	r0, r7
 800f056:	f7ff fe4b 	bl	800ecf0 <_Bfree>
 800f05a:	4646      	mov	r6, r8
 800f05c:	106d      	asrs	r5, r5, #1
 800f05e:	d00b      	beq.n	800f078 <__pow5mult+0xa0>
 800f060:	6820      	ldr	r0, [r4, #0]
 800f062:	b938      	cbnz	r0, 800f074 <__pow5mult+0x9c>
 800f064:	4622      	mov	r2, r4
 800f066:	4621      	mov	r1, r4
 800f068:	4638      	mov	r0, r7
 800f06a:	f7ff ff0b 	bl	800ee84 <__multiply>
 800f06e:	6020      	str	r0, [r4, #0]
 800f070:	f8c0 9000 	str.w	r9, [r0]
 800f074:	4604      	mov	r4, r0
 800f076:	e7e4      	b.n	800f042 <__pow5mult+0x6a>
 800f078:	4630      	mov	r0, r6
 800f07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f07e:	bf00      	nop
 800f080:	0801121c 	.word	0x0801121c
 800f084:	08011142 	.word	0x08011142
 800f088:	080111c2 	.word	0x080111c2

0800f08c <__lshift>:
 800f08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f090:	460c      	mov	r4, r1
 800f092:	6849      	ldr	r1, [r1, #4]
 800f094:	6923      	ldr	r3, [r4, #16]
 800f096:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f09a:	68a3      	ldr	r3, [r4, #8]
 800f09c:	4607      	mov	r7, r0
 800f09e:	4691      	mov	r9, r2
 800f0a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f0a4:	f108 0601 	add.w	r6, r8, #1
 800f0a8:	42b3      	cmp	r3, r6
 800f0aa:	db0b      	blt.n	800f0c4 <__lshift+0x38>
 800f0ac:	4638      	mov	r0, r7
 800f0ae:	f7ff fddf 	bl	800ec70 <_Balloc>
 800f0b2:	4605      	mov	r5, r0
 800f0b4:	b948      	cbnz	r0, 800f0ca <__lshift+0x3e>
 800f0b6:	4602      	mov	r2, r0
 800f0b8:	4b28      	ldr	r3, [pc, #160]	@ (800f15c <__lshift+0xd0>)
 800f0ba:	4829      	ldr	r0, [pc, #164]	@ (800f160 <__lshift+0xd4>)
 800f0bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f0c0:	f000 fb86 	bl	800f7d0 <__assert_func>
 800f0c4:	3101      	adds	r1, #1
 800f0c6:	005b      	lsls	r3, r3, #1
 800f0c8:	e7ee      	b.n	800f0a8 <__lshift+0x1c>
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	f100 0114 	add.w	r1, r0, #20
 800f0d0:	f100 0210 	add.w	r2, r0, #16
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	4553      	cmp	r3, sl
 800f0d8:	db33      	blt.n	800f142 <__lshift+0xb6>
 800f0da:	6920      	ldr	r0, [r4, #16]
 800f0dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f0e0:	f104 0314 	add.w	r3, r4, #20
 800f0e4:	f019 091f 	ands.w	r9, r9, #31
 800f0e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f0ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f0f0:	d02b      	beq.n	800f14a <__lshift+0xbe>
 800f0f2:	f1c9 0e20 	rsb	lr, r9, #32
 800f0f6:	468a      	mov	sl, r1
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	6818      	ldr	r0, [r3, #0]
 800f0fc:	fa00 f009 	lsl.w	r0, r0, r9
 800f100:	4310      	orrs	r0, r2
 800f102:	f84a 0b04 	str.w	r0, [sl], #4
 800f106:	f853 2b04 	ldr.w	r2, [r3], #4
 800f10a:	459c      	cmp	ip, r3
 800f10c:	fa22 f20e 	lsr.w	r2, r2, lr
 800f110:	d8f3      	bhi.n	800f0fa <__lshift+0x6e>
 800f112:	ebac 0304 	sub.w	r3, ip, r4
 800f116:	3b15      	subs	r3, #21
 800f118:	f023 0303 	bic.w	r3, r3, #3
 800f11c:	3304      	adds	r3, #4
 800f11e:	f104 0015 	add.w	r0, r4, #21
 800f122:	4584      	cmp	ip, r0
 800f124:	bf38      	it	cc
 800f126:	2304      	movcc	r3, #4
 800f128:	50ca      	str	r2, [r1, r3]
 800f12a:	b10a      	cbz	r2, 800f130 <__lshift+0xa4>
 800f12c:	f108 0602 	add.w	r6, r8, #2
 800f130:	3e01      	subs	r6, #1
 800f132:	4638      	mov	r0, r7
 800f134:	612e      	str	r6, [r5, #16]
 800f136:	4621      	mov	r1, r4
 800f138:	f7ff fdda 	bl	800ecf0 <_Bfree>
 800f13c:	4628      	mov	r0, r5
 800f13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f142:	f842 0f04 	str.w	r0, [r2, #4]!
 800f146:	3301      	adds	r3, #1
 800f148:	e7c5      	b.n	800f0d6 <__lshift+0x4a>
 800f14a:	3904      	subs	r1, #4
 800f14c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f150:	f841 2f04 	str.w	r2, [r1, #4]!
 800f154:	459c      	cmp	ip, r3
 800f156:	d8f9      	bhi.n	800f14c <__lshift+0xc0>
 800f158:	e7ea      	b.n	800f130 <__lshift+0xa4>
 800f15a:	bf00      	nop
 800f15c:	080111b1 	.word	0x080111b1
 800f160:	080111c2 	.word	0x080111c2

0800f164 <__mcmp>:
 800f164:	690a      	ldr	r2, [r1, #16]
 800f166:	4603      	mov	r3, r0
 800f168:	6900      	ldr	r0, [r0, #16]
 800f16a:	1a80      	subs	r0, r0, r2
 800f16c:	b530      	push	{r4, r5, lr}
 800f16e:	d10e      	bne.n	800f18e <__mcmp+0x2a>
 800f170:	3314      	adds	r3, #20
 800f172:	3114      	adds	r1, #20
 800f174:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f178:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f17c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f180:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f184:	4295      	cmp	r5, r2
 800f186:	d003      	beq.n	800f190 <__mcmp+0x2c>
 800f188:	d205      	bcs.n	800f196 <__mcmp+0x32>
 800f18a:	f04f 30ff 	mov.w	r0, #4294967295
 800f18e:	bd30      	pop	{r4, r5, pc}
 800f190:	42a3      	cmp	r3, r4
 800f192:	d3f3      	bcc.n	800f17c <__mcmp+0x18>
 800f194:	e7fb      	b.n	800f18e <__mcmp+0x2a>
 800f196:	2001      	movs	r0, #1
 800f198:	e7f9      	b.n	800f18e <__mcmp+0x2a>
	...

0800f19c <__mdiff>:
 800f19c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1a0:	4689      	mov	r9, r1
 800f1a2:	4606      	mov	r6, r0
 800f1a4:	4611      	mov	r1, r2
 800f1a6:	4648      	mov	r0, r9
 800f1a8:	4614      	mov	r4, r2
 800f1aa:	f7ff ffdb 	bl	800f164 <__mcmp>
 800f1ae:	1e05      	subs	r5, r0, #0
 800f1b0:	d112      	bne.n	800f1d8 <__mdiff+0x3c>
 800f1b2:	4629      	mov	r1, r5
 800f1b4:	4630      	mov	r0, r6
 800f1b6:	f7ff fd5b 	bl	800ec70 <_Balloc>
 800f1ba:	4602      	mov	r2, r0
 800f1bc:	b928      	cbnz	r0, 800f1ca <__mdiff+0x2e>
 800f1be:	4b3f      	ldr	r3, [pc, #252]	@ (800f2bc <__mdiff+0x120>)
 800f1c0:	f240 2137 	movw	r1, #567	@ 0x237
 800f1c4:	483e      	ldr	r0, [pc, #248]	@ (800f2c0 <__mdiff+0x124>)
 800f1c6:	f000 fb03 	bl	800f7d0 <__assert_func>
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f1d0:	4610      	mov	r0, r2
 800f1d2:	b003      	add	sp, #12
 800f1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1d8:	bfbc      	itt	lt
 800f1da:	464b      	movlt	r3, r9
 800f1dc:	46a1      	movlt	r9, r4
 800f1de:	4630      	mov	r0, r6
 800f1e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f1e4:	bfba      	itte	lt
 800f1e6:	461c      	movlt	r4, r3
 800f1e8:	2501      	movlt	r5, #1
 800f1ea:	2500      	movge	r5, #0
 800f1ec:	f7ff fd40 	bl	800ec70 <_Balloc>
 800f1f0:	4602      	mov	r2, r0
 800f1f2:	b918      	cbnz	r0, 800f1fc <__mdiff+0x60>
 800f1f4:	4b31      	ldr	r3, [pc, #196]	@ (800f2bc <__mdiff+0x120>)
 800f1f6:	f240 2145 	movw	r1, #581	@ 0x245
 800f1fa:	e7e3      	b.n	800f1c4 <__mdiff+0x28>
 800f1fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f200:	6926      	ldr	r6, [r4, #16]
 800f202:	60c5      	str	r5, [r0, #12]
 800f204:	f109 0310 	add.w	r3, r9, #16
 800f208:	f109 0514 	add.w	r5, r9, #20
 800f20c:	f104 0e14 	add.w	lr, r4, #20
 800f210:	f100 0b14 	add.w	fp, r0, #20
 800f214:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f218:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f21c:	9301      	str	r3, [sp, #4]
 800f21e:	46d9      	mov	r9, fp
 800f220:	f04f 0c00 	mov.w	ip, #0
 800f224:	9b01      	ldr	r3, [sp, #4]
 800f226:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f22a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f22e:	9301      	str	r3, [sp, #4]
 800f230:	fa1f f38a 	uxth.w	r3, sl
 800f234:	4619      	mov	r1, r3
 800f236:	b283      	uxth	r3, r0
 800f238:	1acb      	subs	r3, r1, r3
 800f23a:	0c00      	lsrs	r0, r0, #16
 800f23c:	4463      	add	r3, ip
 800f23e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f242:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f246:	b29b      	uxth	r3, r3
 800f248:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f24c:	4576      	cmp	r6, lr
 800f24e:	f849 3b04 	str.w	r3, [r9], #4
 800f252:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f256:	d8e5      	bhi.n	800f224 <__mdiff+0x88>
 800f258:	1b33      	subs	r3, r6, r4
 800f25a:	3b15      	subs	r3, #21
 800f25c:	f023 0303 	bic.w	r3, r3, #3
 800f260:	3415      	adds	r4, #21
 800f262:	3304      	adds	r3, #4
 800f264:	42a6      	cmp	r6, r4
 800f266:	bf38      	it	cc
 800f268:	2304      	movcc	r3, #4
 800f26a:	441d      	add	r5, r3
 800f26c:	445b      	add	r3, fp
 800f26e:	461e      	mov	r6, r3
 800f270:	462c      	mov	r4, r5
 800f272:	4544      	cmp	r4, r8
 800f274:	d30e      	bcc.n	800f294 <__mdiff+0xf8>
 800f276:	f108 0103 	add.w	r1, r8, #3
 800f27a:	1b49      	subs	r1, r1, r5
 800f27c:	f021 0103 	bic.w	r1, r1, #3
 800f280:	3d03      	subs	r5, #3
 800f282:	45a8      	cmp	r8, r5
 800f284:	bf38      	it	cc
 800f286:	2100      	movcc	r1, #0
 800f288:	440b      	add	r3, r1
 800f28a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f28e:	b191      	cbz	r1, 800f2b6 <__mdiff+0x11a>
 800f290:	6117      	str	r7, [r2, #16]
 800f292:	e79d      	b.n	800f1d0 <__mdiff+0x34>
 800f294:	f854 1b04 	ldr.w	r1, [r4], #4
 800f298:	46e6      	mov	lr, ip
 800f29a:	0c08      	lsrs	r0, r1, #16
 800f29c:	fa1c fc81 	uxtah	ip, ip, r1
 800f2a0:	4471      	add	r1, lr
 800f2a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f2a6:	b289      	uxth	r1, r1
 800f2a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f2ac:	f846 1b04 	str.w	r1, [r6], #4
 800f2b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f2b4:	e7dd      	b.n	800f272 <__mdiff+0xd6>
 800f2b6:	3f01      	subs	r7, #1
 800f2b8:	e7e7      	b.n	800f28a <__mdiff+0xee>
 800f2ba:	bf00      	nop
 800f2bc:	080111b1 	.word	0x080111b1
 800f2c0:	080111c2 	.word	0x080111c2

0800f2c4 <__d2b>:
 800f2c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f2c8:	460f      	mov	r7, r1
 800f2ca:	2101      	movs	r1, #1
 800f2cc:	ec59 8b10 	vmov	r8, r9, d0
 800f2d0:	4616      	mov	r6, r2
 800f2d2:	f7ff fccd 	bl	800ec70 <_Balloc>
 800f2d6:	4604      	mov	r4, r0
 800f2d8:	b930      	cbnz	r0, 800f2e8 <__d2b+0x24>
 800f2da:	4602      	mov	r2, r0
 800f2dc:	4b23      	ldr	r3, [pc, #140]	@ (800f36c <__d2b+0xa8>)
 800f2de:	4824      	ldr	r0, [pc, #144]	@ (800f370 <__d2b+0xac>)
 800f2e0:	f240 310f 	movw	r1, #783	@ 0x30f
 800f2e4:	f000 fa74 	bl	800f7d0 <__assert_func>
 800f2e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f2ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f2f0:	b10d      	cbz	r5, 800f2f6 <__d2b+0x32>
 800f2f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f2f6:	9301      	str	r3, [sp, #4]
 800f2f8:	f1b8 0300 	subs.w	r3, r8, #0
 800f2fc:	d023      	beq.n	800f346 <__d2b+0x82>
 800f2fe:	4668      	mov	r0, sp
 800f300:	9300      	str	r3, [sp, #0]
 800f302:	f7ff fd7c 	bl	800edfe <__lo0bits>
 800f306:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f30a:	b1d0      	cbz	r0, 800f342 <__d2b+0x7e>
 800f30c:	f1c0 0320 	rsb	r3, r0, #32
 800f310:	fa02 f303 	lsl.w	r3, r2, r3
 800f314:	430b      	orrs	r3, r1
 800f316:	40c2      	lsrs	r2, r0
 800f318:	6163      	str	r3, [r4, #20]
 800f31a:	9201      	str	r2, [sp, #4]
 800f31c:	9b01      	ldr	r3, [sp, #4]
 800f31e:	61a3      	str	r3, [r4, #24]
 800f320:	2b00      	cmp	r3, #0
 800f322:	bf0c      	ite	eq
 800f324:	2201      	moveq	r2, #1
 800f326:	2202      	movne	r2, #2
 800f328:	6122      	str	r2, [r4, #16]
 800f32a:	b1a5      	cbz	r5, 800f356 <__d2b+0x92>
 800f32c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f330:	4405      	add	r5, r0
 800f332:	603d      	str	r5, [r7, #0]
 800f334:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f338:	6030      	str	r0, [r6, #0]
 800f33a:	4620      	mov	r0, r4
 800f33c:	b003      	add	sp, #12
 800f33e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f342:	6161      	str	r1, [r4, #20]
 800f344:	e7ea      	b.n	800f31c <__d2b+0x58>
 800f346:	a801      	add	r0, sp, #4
 800f348:	f7ff fd59 	bl	800edfe <__lo0bits>
 800f34c:	9b01      	ldr	r3, [sp, #4]
 800f34e:	6163      	str	r3, [r4, #20]
 800f350:	3020      	adds	r0, #32
 800f352:	2201      	movs	r2, #1
 800f354:	e7e8      	b.n	800f328 <__d2b+0x64>
 800f356:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f35a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f35e:	6038      	str	r0, [r7, #0]
 800f360:	6918      	ldr	r0, [r3, #16]
 800f362:	f7ff fd2d 	bl	800edc0 <__hi0bits>
 800f366:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f36a:	e7e5      	b.n	800f338 <__d2b+0x74>
 800f36c:	080111b1 	.word	0x080111b1
 800f370:	080111c2 	.word	0x080111c2

0800f374 <__ssputs_r>:
 800f374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f378:	688e      	ldr	r6, [r1, #8]
 800f37a:	461f      	mov	r7, r3
 800f37c:	42be      	cmp	r6, r7
 800f37e:	680b      	ldr	r3, [r1, #0]
 800f380:	4682      	mov	sl, r0
 800f382:	460c      	mov	r4, r1
 800f384:	4690      	mov	r8, r2
 800f386:	d82d      	bhi.n	800f3e4 <__ssputs_r+0x70>
 800f388:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f38c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f390:	d026      	beq.n	800f3e0 <__ssputs_r+0x6c>
 800f392:	6965      	ldr	r5, [r4, #20]
 800f394:	6909      	ldr	r1, [r1, #16]
 800f396:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f39a:	eba3 0901 	sub.w	r9, r3, r1
 800f39e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f3a2:	1c7b      	adds	r3, r7, #1
 800f3a4:	444b      	add	r3, r9
 800f3a6:	106d      	asrs	r5, r5, #1
 800f3a8:	429d      	cmp	r5, r3
 800f3aa:	bf38      	it	cc
 800f3ac:	461d      	movcc	r5, r3
 800f3ae:	0553      	lsls	r3, r2, #21
 800f3b0:	d527      	bpl.n	800f402 <__ssputs_r+0x8e>
 800f3b2:	4629      	mov	r1, r5
 800f3b4:	f7ff fbd0 	bl	800eb58 <_malloc_r>
 800f3b8:	4606      	mov	r6, r0
 800f3ba:	b360      	cbz	r0, 800f416 <__ssputs_r+0xa2>
 800f3bc:	6921      	ldr	r1, [r4, #16]
 800f3be:	464a      	mov	r2, r9
 800f3c0:	f7fe fcf9 	bl	800ddb6 <memcpy>
 800f3c4:	89a3      	ldrh	r3, [r4, #12]
 800f3c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f3ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f3ce:	81a3      	strh	r3, [r4, #12]
 800f3d0:	6126      	str	r6, [r4, #16]
 800f3d2:	6165      	str	r5, [r4, #20]
 800f3d4:	444e      	add	r6, r9
 800f3d6:	eba5 0509 	sub.w	r5, r5, r9
 800f3da:	6026      	str	r6, [r4, #0]
 800f3dc:	60a5      	str	r5, [r4, #8]
 800f3de:	463e      	mov	r6, r7
 800f3e0:	42be      	cmp	r6, r7
 800f3e2:	d900      	bls.n	800f3e6 <__ssputs_r+0x72>
 800f3e4:	463e      	mov	r6, r7
 800f3e6:	6820      	ldr	r0, [r4, #0]
 800f3e8:	4632      	mov	r2, r6
 800f3ea:	4641      	mov	r1, r8
 800f3ec:	f000 f9c6 	bl	800f77c <memmove>
 800f3f0:	68a3      	ldr	r3, [r4, #8]
 800f3f2:	1b9b      	subs	r3, r3, r6
 800f3f4:	60a3      	str	r3, [r4, #8]
 800f3f6:	6823      	ldr	r3, [r4, #0]
 800f3f8:	4433      	add	r3, r6
 800f3fa:	6023      	str	r3, [r4, #0]
 800f3fc:	2000      	movs	r0, #0
 800f3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f402:	462a      	mov	r2, r5
 800f404:	f000 fa28 	bl	800f858 <_realloc_r>
 800f408:	4606      	mov	r6, r0
 800f40a:	2800      	cmp	r0, #0
 800f40c:	d1e0      	bne.n	800f3d0 <__ssputs_r+0x5c>
 800f40e:	6921      	ldr	r1, [r4, #16]
 800f410:	4650      	mov	r0, sl
 800f412:	f7ff fb2d 	bl	800ea70 <_free_r>
 800f416:	230c      	movs	r3, #12
 800f418:	f8ca 3000 	str.w	r3, [sl]
 800f41c:	89a3      	ldrh	r3, [r4, #12]
 800f41e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f422:	81a3      	strh	r3, [r4, #12]
 800f424:	f04f 30ff 	mov.w	r0, #4294967295
 800f428:	e7e9      	b.n	800f3fe <__ssputs_r+0x8a>
	...

0800f42c <_svfiprintf_r>:
 800f42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f430:	4698      	mov	r8, r3
 800f432:	898b      	ldrh	r3, [r1, #12]
 800f434:	061b      	lsls	r3, r3, #24
 800f436:	b09d      	sub	sp, #116	@ 0x74
 800f438:	4607      	mov	r7, r0
 800f43a:	460d      	mov	r5, r1
 800f43c:	4614      	mov	r4, r2
 800f43e:	d510      	bpl.n	800f462 <_svfiprintf_r+0x36>
 800f440:	690b      	ldr	r3, [r1, #16]
 800f442:	b973      	cbnz	r3, 800f462 <_svfiprintf_r+0x36>
 800f444:	2140      	movs	r1, #64	@ 0x40
 800f446:	f7ff fb87 	bl	800eb58 <_malloc_r>
 800f44a:	6028      	str	r0, [r5, #0]
 800f44c:	6128      	str	r0, [r5, #16]
 800f44e:	b930      	cbnz	r0, 800f45e <_svfiprintf_r+0x32>
 800f450:	230c      	movs	r3, #12
 800f452:	603b      	str	r3, [r7, #0]
 800f454:	f04f 30ff 	mov.w	r0, #4294967295
 800f458:	b01d      	add	sp, #116	@ 0x74
 800f45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f45e:	2340      	movs	r3, #64	@ 0x40
 800f460:	616b      	str	r3, [r5, #20]
 800f462:	2300      	movs	r3, #0
 800f464:	9309      	str	r3, [sp, #36]	@ 0x24
 800f466:	2320      	movs	r3, #32
 800f468:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f46c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f470:	2330      	movs	r3, #48	@ 0x30
 800f472:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f610 <_svfiprintf_r+0x1e4>
 800f476:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f47a:	f04f 0901 	mov.w	r9, #1
 800f47e:	4623      	mov	r3, r4
 800f480:	469a      	mov	sl, r3
 800f482:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f486:	b10a      	cbz	r2, 800f48c <_svfiprintf_r+0x60>
 800f488:	2a25      	cmp	r2, #37	@ 0x25
 800f48a:	d1f9      	bne.n	800f480 <_svfiprintf_r+0x54>
 800f48c:	ebba 0b04 	subs.w	fp, sl, r4
 800f490:	d00b      	beq.n	800f4aa <_svfiprintf_r+0x7e>
 800f492:	465b      	mov	r3, fp
 800f494:	4622      	mov	r2, r4
 800f496:	4629      	mov	r1, r5
 800f498:	4638      	mov	r0, r7
 800f49a:	f7ff ff6b 	bl	800f374 <__ssputs_r>
 800f49e:	3001      	adds	r0, #1
 800f4a0:	f000 80a7 	beq.w	800f5f2 <_svfiprintf_r+0x1c6>
 800f4a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4a6:	445a      	add	r2, fp
 800f4a8:	9209      	str	r2, [sp, #36]	@ 0x24
 800f4aa:	f89a 3000 	ldrb.w	r3, [sl]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	f000 809f 	beq.w	800f5f2 <_svfiprintf_r+0x1c6>
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f4ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4be:	f10a 0a01 	add.w	sl, sl, #1
 800f4c2:	9304      	str	r3, [sp, #16]
 800f4c4:	9307      	str	r3, [sp, #28]
 800f4c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f4ca:	931a      	str	r3, [sp, #104]	@ 0x68
 800f4cc:	4654      	mov	r4, sl
 800f4ce:	2205      	movs	r2, #5
 800f4d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4d4:	484e      	ldr	r0, [pc, #312]	@ (800f610 <_svfiprintf_r+0x1e4>)
 800f4d6:	f7f0 fe7b 	bl	80001d0 <memchr>
 800f4da:	9a04      	ldr	r2, [sp, #16]
 800f4dc:	b9d8      	cbnz	r0, 800f516 <_svfiprintf_r+0xea>
 800f4de:	06d0      	lsls	r0, r2, #27
 800f4e0:	bf44      	itt	mi
 800f4e2:	2320      	movmi	r3, #32
 800f4e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f4e8:	0711      	lsls	r1, r2, #28
 800f4ea:	bf44      	itt	mi
 800f4ec:	232b      	movmi	r3, #43	@ 0x2b
 800f4ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f4f2:	f89a 3000 	ldrb.w	r3, [sl]
 800f4f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4f8:	d015      	beq.n	800f526 <_svfiprintf_r+0xfa>
 800f4fa:	9a07      	ldr	r2, [sp, #28]
 800f4fc:	4654      	mov	r4, sl
 800f4fe:	2000      	movs	r0, #0
 800f500:	f04f 0c0a 	mov.w	ip, #10
 800f504:	4621      	mov	r1, r4
 800f506:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f50a:	3b30      	subs	r3, #48	@ 0x30
 800f50c:	2b09      	cmp	r3, #9
 800f50e:	d94b      	bls.n	800f5a8 <_svfiprintf_r+0x17c>
 800f510:	b1b0      	cbz	r0, 800f540 <_svfiprintf_r+0x114>
 800f512:	9207      	str	r2, [sp, #28]
 800f514:	e014      	b.n	800f540 <_svfiprintf_r+0x114>
 800f516:	eba0 0308 	sub.w	r3, r0, r8
 800f51a:	fa09 f303 	lsl.w	r3, r9, r3
 800f51e:	4313      	orrs	r3, r2
 800f520:	9304      	str	r3, [sp, #16]
 800f522:	46a2      	mov	sl, r4
 800f524:	e7d2      	b.n	800f4cc <_svfiprintf_r+0xa0>
 800f526:	9b03      	ldr	r3, [sp, #12]
 800f528:	1d19      	adds	r1, r3, #4
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	9103      	str	r1, [sp, #12]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	bfbb      	ittet	lt
 800f532:	425b      	neglt	r3, r3
 800f534:	f042 0202 	orrlt.w	r2, r2, #2
 800f538:	9307      	strge	r3, [sp, #28]
 800f53a:	9307      	strlt	r3, [sp, #28]
 800f53c:	bfb8      	it	lt
 800f53e:	9204      	strlt	r2, [sp, #16]
 800f540:	7823      	ldrb	r3, [r4, #0]
 800f542:	2b2e      	cmp	r3, #46	@ 0x2e
 800f544:	d10a      	bne.n	800f55c <_svfiprintf_r+0x130>
 800f546:	7863      	ldrb	r3, [r4, #1]
 800f548:	2b2a      	cmp	r3, #42	@ 0x2a
 800f54a:	d132      	bne.n	800f5b2 <_svfiprintf_r+0x186>
 800f54c:	9b03      	ldr	r3, [sp, #12]
 800f54e:	1d1a      	adds	r2, r3, #4
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	9203      	str	r2, [sp, #12]
 800f554:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f558:	3402      	adds	r4, #2
 800f55a:	9305      	str	r3, [sp, #20]
 800f55c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f620 <_svfiprintf_r+0x1f4>
 800f560:	7821      	ldrb	r1, [r4, #0]
 800f562:	2203      	movs	r2, #3
 800f564:	4650      	mov	r0, sl
 800f566:	f7f0 fe33 	bl	80001d0 <memchr>
 800f56a:	b138      	cbz	r0, 800f57c <_svfiprintf_r+0x150>
 800f56c:	9b04      	ldr	r3, [sp, #16]
 800f56e:	eba0 000a 	sub.w	r0, r0, sl
 800f572:	2240      	movs	r2, #64	@ 0x40
 800f574:	4082      	lsls	r2, r0
 800f576:	4313      	orrs	r3, r2
 800f578:	3401      	adds	r4, #1
 800f57a:	9304      	str	r3, [sp, #16]
 800f57c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f580:	4824      	ldr	r0, [pc, #144]	@ (800f614 <_svfiprintf_r+0x1e8>)
 800f582:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f586:	2206      	movs	r2, #6
 800f588:	f7f0 fe22 	bl	80001d0 <memchr>
 800f58c:	2800      	cmp	r0, #0
 800f58e:	d036      	beq.n	800f5fe <_svfiprintf_r+0x1d2>
 800f590:	4b21      	ldr	r3, [pc, #132]	@ (800f618 <_svfiprintf_r+0x1ec>)
 800f592:	bb1b      	cbnz	r3, 800f5dc <_svfiprintf_r+0x1b0>
 800f594:	9b03      	ldr	r3, [sp, #12]
 800f596:	3307      	adds	r3, #7
 800f598:	f023 0307 	bic.w	r3, r3, #7
 800f59c:	3308      	adds	r3, #8
 800f59e:	9303      	str	r3, [sp, #12]
 800f5a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5a2:	4433      	add	r3, r6
 800f5a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5a6:	e76a      	b.n	800f47e <_svfiprintf_r+0x52>
 800f5a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5ac:	460c      	mov	r4, r1
 800f5ae:	2001      	movs	r0, #1
 800f5b0:	e7a8      	b.n	800f504 <_svfiprintf_r+0xd8>
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	3401      	adds	r4, #1
 800f5b6:	9305      	str	r3, [sp, #20]
 800f5b8:	4619      	mov	r1, r3
 800f5ba:	f04f 0c0a 	mov.w	ip, #10
 800f5be:	4620      	mov	r0, r4
 800f5c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5c4:	3a30      	subs	r2, #48	@ 0x30
 800f5c6:	2a09      	cmp	r2, #9
 800f5c8:	d903      	bls.n	800f5d2 <_svfiprintf_r+0x1a6>
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d0c6      	beq.n	800f55c <_svfiprintf_r+0x130>
 800f5ce:	9105      	str	r1, [sp, #20]
 800f5d0:	e7c4      	b.n	800f55c <_svfiprintf_r+0x130>
 800f5d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f5d6:	4604      	mov	r4, r0
 800f5d8:	2301      	movs	r3, #1
 800f5da:	e7f0      	b.n	800f5be <_svfiprintf_r+0x192>
 800f5dc:	ab03      	add	r3, sp, #12
 800f5de:	9300      	str	r3, [sp, #0]
 800f5e0:	462a      	mov	r2, r5
 800f5e2:	4b0e      	ldr	r3, [pc, #56]	@ (800f61c <_svfiprintf_r+0x1f0>)
 800f5e4:	a904      	add	r1, sp, #16
 800f5e6:	4638      	mov	r0, r7
 800f5e8:	f7fd fe50 	bl	800d28c <_printf_float>
 800f5ec:	1c42      	adds	r2, r0, #1
 800f5ee:	4606      	mov	r6, r0
 800f5f0:	d1d6      	bne.n	800f5a0 <_svfiprintf_r+0x174>
 800f5f2:	89ab      	ldrh	r3, [r5, #12]
 800f5f4:	065b      	lsls	r3, r3, #25
 800f5f6:	f53f af2d 	bmi.w	800f454 <_svfiprintf_r+0x28>
 800f5fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f5fc:	e72c      	b.n	800f458 <_svfiprintf_r+0x2c>
 800f5fe:	ab03      	add	r3, sp, #12
 800f600:	9300      	str	r3, [sp, #0]
 800f602:	462a      	mov	r2, r5
 800f604:	4b05      	ldr	r3, [pc, #20]	@ (800f61c <_svfiprintf_r+0x1f0>)
 800f606:	a904      	add	r1, sp, #16
 800f608:	4638      	mov	r0, r7
 800f60a:	f7fe f8d7 	bl	800d7bc <_printf_i>
 800f60e:	e7ed      	b.n	800f5ec <_svfiprintf_r+0x1c0>
 800f610:	08011318 	.word	0x08011318
 800f614:	08011322 	.word	0x08011322
 800f618:	0800d28d 	.word	0x0800d28d
 800f61c:	0800f375 	.word	0x0800f375
 800f620:	0801131e 	.word	0x0801131e

0800f624 <__sflush_r>:
 800f624:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f62c:	0716      	lsls	r6, r2, #28
 800f62e:	4605      	mov	r5, r0
 800f630:	460c      	mov	r4, r1
 800f632:	d454      	bmi.n	800f6de <__sflush_r+0xba>
 800f634:	684b      	ldr	r3, [r1, #4]
 800f636:	2b00      	cmp	r3, #0
 800f638:	dc02      	bgt.n	800f640 <__sflush_r+0x1c>
 800f63a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	dd48      	ble.n	800f6d2 <__sflush_r+0xae>
 800f640:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f642:	2e00      	cmp	r6, #0
 800f644:	d045      	beq.n	800f6d2 <__sflush_r+0xae>
 800f646:	2300      	movs	r3, #0
 800f648:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f64c:	682f      	ldr	r7, [r5, #0]
 800f64e:	6a21      	ldr	r1, [r4, #32]
 800f650:	602b      	str	r3, [r5, #0]
 800f652:	d030      	beq.n	800f6b6 <__sflush_r+0x92>
 800f654:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f656:	89a3      	ldrh	r3, [r4, #12]
 800f658:	0759      	lsls	r1, r3, #29
 800f65a:	d505      	bpl.n	800f668 <__sflush_r+0x44>
 800f65c:	6863      	ldr	r3, [r4, #4]
 800f65e:	1ad2      	subs	r2, r2, r3
 800f660:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f662:	b10b      	cbz	r3, 800f668 <__sflush_r+0x44>
 800f664:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f666:	1ad2      	subs	r2, r2, r3
 800f668:	2300      	movs	r3, #0
 800f66a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f66c:	6a21      	ldr	r1, [r4, #32]
 800f66e:	4628      	mov	r0, r5
 800f670:	47b0      	blx	r6
 800f672:	1c43      	adds	r3, r0, #1
 800f674:	89a3      	ldrh	r3, [r4, #12]
 800f676:	d106      	bne.n	800f686 <__sflush_r+0x62>
 800f678:	6829      	ldr	r1, [r5, #0]
 800f67a:	291d      	cmp	r1, #29
 800f67c:	d82b      	bhi.n	800f6d6 <__sflush_r+0xb2>
 800f67e:	4a2a      	ldr	r2, [pc, #168]	@ (800f728 <__sflush_r+0x104>)
 800f680:	410a      	asrs	r2, r1
 800f682:	07d6      	lsls	r6, r2, #31
 800f684:	d427      	bmi.n	800f6d6 <__sflush_r+0xb2>
 800f686:	2200      	movs	r2, #0
 800f688:	6062      	str	r2, [r4, #4]
 800f68a:	04d9      	lsls	r1, r3, #19
 800f68c:	6922      	ldr	r2, [r4, #16]
 800f68e:	6022      	str	r2, [r4, #0]
 800f690:	d504      	bpl.n	800f69c <__sflush_r+0x78>
 800f692:	1c42      	adds	r2, r0, #1
 800f694:	d101      	bne.n	800f69a <__sflush_r+0x76>
 800f696:	682b      	ldr	r3, [r5, #0]
 800f698:	b903      	cbnz	r3, 800f69c <__sflush_r+0x78>
 800f69a:	6560      	str	r0, [r4, #84]	@ 0x54
 800f69c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f69e:	602f      	str	r7, [r5, #0]
 800f6a0:	b1b9      	cbz	r1, 800f6d2 <__sflush_r+0xae>
 800f6a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f6a6:	4299      	cmp	r1, r3
 800f6a8:	d002      	beq.n	800f6b0 <__sflush_r+0x8c>
 800f6aa:	4628      	mov	r0, r5
 800f6ac:	f7ff f9e0 	bl	800ea70 <_free_r>
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	6363      	str	r3, [r4, #52]	@ 0x34
 800f6b4:	e00d      	b.n	800f6d2 <__sflush_r+0xae>
 800f6b6:	2301      	movs	r3, #1
 800f6b8:	4628      	mov	r0, r5
 800f6ba:	47b0      	blx	r6
 800f6bc:	4602      	mov	r2, r0
 800f6be:	1c50      	adds	r0, r2, #1
 800f6c0:	d1c9      	bne.n	800f656 <__sflush_r+0x32>
 800f6c2:	682b      	ldr	r3, [r5, #0]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d0c6      	beq.n	800f656 <__sflush_r+0x32>
 800f6c8:	2b1d      	cmp	r3, #29
 800f6ca:	d001      	beq.n	800f6d0 <__sflush_r+0xac>
 800f6cc:	2b16      	cmp	r3, #22
 800f6ce:	d11e      	bne.n	800f70e <__sflush_r+0xea>
 800f6d0:	602f      	str	r7, [r5, #0]
 800f6d2:	2000      	movs	r0, #0
 800f6d4:	e022      	b.n	800f71c <__sflush_r+0xf8>
 800f6d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6da:	b21b      	sxth	r3, r3
 800f6dc:	e01b      	b.n	800f716 <__sflush_r+0xf2>
 800f6de:	690f      	ldr	r7, [r1, #16]
 800f6e0:	2f00      	cmp	r7, #0
 800f6e2:	d0f6      	beq.n	800f6d2 <__sflush_r+0xae>
 800f6e4:	0793      	lsls	r3, r2, #30
 800f6e6:	680e      	ldr	r6, [r1, #0]
 800f6e8:	bf08      	it	eq
 800f6ea:	694b      	ldreq	r3, [r1, #20]
 800f6ec:	600f      	str	r7, [r1, #0]
 800f6ee:	bf18      	it	ne
 800f6f0:	2300      	movne	r3, #0
 800f6f2:	eba6 0807 	sub.w	r8, r6, r7
 800f6f6:	608b      	str	r3, [r1, #8]
 800f6f8:	f1b8 0f00 	cmp.w	r8, #0
 800f6fc:	dde9      	ble.n	800f6d2 <__sflush_r+0xae>
 800f6fe:	6a21      	ldr	r1, [r4, #32]
 800f700:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f702:	4643      	mov	r3, r8
 800f704:	463a      	mov	r2, r7
 800f706:	4628      	mov	r0, r5
 800f708:	47b0      	blx	r6
 800f70a:	2800      	cmp	r0, #0
 800f70c:	dc08      	bgt.n	800f720 <__sflush_r+0xfc>
 800f70e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f716:	81a3      	strh	r3, [r4, #12]
 800f718:	f04f 30ff 	mov.w	r0, #4294967295
 800f71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f720:	4407      	add	r7, r0
 800f722:	eba8 0800 	sub.w	r8, r8, r0
 800f726:	e7e7      	b.n	800f6f8 <__sflush_r+0xd4>
 800f728:	dfbffffe 	.word	0xdfbffffe

0800f72c <_fflush_r>:
 800f72c:	b538      	push	{r3, r4, r5, lr}
 800f72e:	690b      	ldr	r3, [r1, #16]
 800f730:	4605      	mov	r5, r0
 800f732:	460c      	mov	r4, r1
 800f734:	b913      	cbnz	r3, 800f73c <_fflush_r+0x10>
 800f736:	2500      	movs	r5, #0
 800f738:	4628      	mov	r0, r5
 800f73a:	bd38      	pop	{r3, r4, r5, pc}
 800f73c:	b118      	cbz	r0, 800f746 <_fflush_r+0x1a>
 800f73e:	6a03      	ldr	r3, [r0, #32]
 800f740:	b90b      	cbnz	r3, 800f746 <_fflush_r+0x1a>
 800f742:	f7fe f9e7 	bl	800db14 <__sinit>
 800f746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d0f3      	beq.n	800f736 <_fflush_r+0xa>
 800f74e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f750:	07d0      	lsls	r0, r2, #31
 800f752:	d404      	bmi.n	800f75e <_fflush_r+0x32>
 800f754:	0599      	lsls	r1, r3, #22
 800f756:	d402      	bmi.n	800f75e <_fflush_r+0x32>
 800f758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f75a:	f7fe fb2a 	bl	800ddb2 <__retarget_lock_acquire_recursive>
 800f75e:	4628      	mov	r0, r5
 800f760:	4621      	mov	r1, r4
 800f762:	f7ff ff5f 	bl	800f624 <__sflush_r>
 800f766:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f768:	07da      	lsls	r2, r3, #31
 800f76a:	4605      	mov	r5, r0
 800f76c:	d4e4      	bmi.n	800f738 <_fflush_r+0xc>
 800f76e:	89a3      	ldrh	r3, [r4, #12]
 800f770:	059b      	lsls	r3, r3, #22
 800f772:	d4e1      	bmi.n	800f738 <_fflush_r+0xc>
 800f774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f776:	f7fe fb1d 	bl	800ddb4 <__retarget_lock_release_recursive>
 800f77a:	e7dd      	b.n	800f738 <_fflush_r+0xc>

0800f77c <memmove>:
 800f77c:	4288      	cmp	r0, r1
 800f77e:	b510      	push	{r4, lr}
 800f780:	eb01 0402 	add.w	r4, r1, r2
 800f784:	d902      	bls.n	800f78c <memmove+0x10>
 800f786:	4284      	cmp	r4, r0
 800f788:	4623      	mov	r3, r4
 800f78a:	d807      	bhi.n	800f79c <memmove+0x20>
 800f78c:	1e43      	subs	r3, r0, #1
 800f78e:	42a1      	cmp	r1, r4
 800f790:	d008      	beq.n	800f7a4 <memmove+0x28>
 800f792:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f796:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f79a:	e7f8      	b.n	800f78e <memmove+0x12>
 800f79c:	4402      	add	r2, r0
 800f79e:	4601      	mov	r1, r0
 800f7a0:	428a      	cmp	r2, r1
 800f7a2:	d100      	bne.n	800f7a6 <memmove+0x2a>
 800f7a4:	bd10      	pop	{r4, pc}
 800f7a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f7aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f7ae:	e7f7      	b.n	800f7a0 <memmove+0x24>

0800f7b0 <_sbrk_r>:
 800f7b0:	b538      	push	{r3, r4, r5, lr}
 800f7b2:	4d06      	ldr	r5, [pc, #24]	@ (800f7cc <_sbrk_r+0x1c>)
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	4604      	mov	r4, r0
 800f7b8:	4608      	mov	r0, r1
 800f7ba:	602b      	str	r3, [r5, #0]
 800f7bc:	f7f4 fd12 	bl	80041e4 <_sbrk>
 800f7c0:	1c43      	adds	r3, r0, #1
 800f7c2:	d102      	bne.n	800f7ca <_sbrk_r+0x1a>
 800f7c4:	682b      	ldr	r3, [r5, #0]
 800f7c6:	b103      	cbz	r3, 800f7ca <_sbrk_r+0x1a>
 800f7c8:	6023      	str	r3, [r4, #0]
 800f7ca:	bd38      	pop	{r3, r4, r5, pc}
 800f7cc:	20005490 	.word	0x20005490

0800f7d0 <__assert_func>:
 800f7d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f7d2:	4614      	mov	r4, r2
 800f7d4:	461a      	mov	r2, r3
 800f7d6:	4b09      	ldr	r3, [pc, #36]	@ (800f7fc <__assert_func+0x2c>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	4605      	mov	r5, r0
 800f7dc:	68d8      	ldr	r0, [r3, #12]
 800f7de:	b954      	cbnz	r4, 800f7f6 <__assert_func+0x26>
 800f7e0:	4b07      	ldr	r3, [pc, #28]	@ (800f800 <__assert_func+0x30>)
 800f7e2:	461c      	mov	r4, r3
 800f7e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f7e8:	9100      	str	r1, [sp, #0]
 800f7ea:	462b      	mov	r3, r5
 800f7ec:	4905      	ldr	r1, [pc, #20]	@ (800f804 <__assert_func+0x34>)
 800f7ee:	f000 f86f 	bl	800f8d0 <fiprintf>
 800f7f2:	f000 f87f 	bl	800f8f4 <abort>
 800f7f6:	4b04      	ldr	r3, [pc, #16]	@ (800f808 <__assert_func+0x38>)
 800f7f8:	e7f4      	b.n	800f7e4 <__assert_func+0x14>
 800f7fa:	bf00      	nop
 800f7fc:	20000040 	.word	0x20000040
 800f800:	0801136e 	.word	0x0801136e
 800f804:	08011340 	.word	0x08011340
 800f808:	08011333 	.word	0x08011333

0800f80c <_calloc_r>:
 800f80c:	b570      	push	{r4, r5, r6, lr}
 800f80e:	fba1 5402 	umull	r5, r4, r1, r2
 800f812:	b93c      	cbnz	r4, 800f824 <_calloc_r+0x18>
 800f814:	4629      	mov	r1, r5
 800f816:	f7ff f99f 	bl	800eb58 <_malloc_r>
 800f81a:	4606      	mov	r6, r0
 800f81c:	b928      	cbnz	r0, 800f82a <_calloc_r+0x1e>
 800f81e:	2600      	movs	r6, #0
 800f820:	4630      	mov	r0, r6
 800f822:	bd70      	pop	{r4, r5, r6, pc}
 800f824:	220c      	movs	r2, #12
 800f826:	6002      	str	r2, [r0, #0]
 800f828:	e7f9      	b.n	800f81e <_calloc_r+0x12>
 800f82a:	462a      	mov	r2, r5
 800f82c:	4621      	mov	r1, r4
 800f82e:	f7fe fa1e 	bl	800dc6e <memset>
 800f832:	e7f5      	b.n	800f820 <_calloc_r+0x14>

0800f834 <__ascii_mbtowc>:
 800f834:	b082      	sub	sp, #8
 800f836:	b901      	cbnz	r1, 800f83a <__ascii_mbtowc+0x6>
 800f838:	a901      	add	r1, sp, #4
 800f83a:	b142      	cbz	r2, 800f84e <__ascii_mbtowc+0x1a>
 800f83c:	b14b      	cbz	r3, 800f852 <__ascii_mbtowc+0x1e>
 800f83e:	7813      	ldrb	r3, [r2, #0]
 800f840:	600b      	str	r3, [r1, #0]
 800f842:	7812      	ldrb	r2, [r2, #0]
 800f844:	1e10      	subs	r0, r2, #0
 800f846:	bf18      	it	ne
 800f848:	2001      	movne	r0, #1
 800f84a:	b002      	add	sp, #8
 800f84c:	4770      	bx	lr
 800f84e:	4610      	mov	r0, r2
 800f850:	e7fb      	b.n	800f84a <__ascii_mbtowc+0x16>
 800f852:	f06f 0001 	mvn.w	r0, #1
 800f856:	e7f8      	b.n	800f84a <__ascii_mbtowc+0x16>

0800f858 <_realloc_r>:
 800f858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f85c:	4680      	mov	r8, r0
 800f85e:	4615      	mov	r5, r2
 800f860:	460c      	mov	r4, r1
 800f862:	b921      	cbnz	r1, 800f86e <_realloc_r+0x16>
 800f864:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f868:	4611      	mov	r1, r2
 800f86a:	f7ff b975 	b.w	800eb58 <_malloc_r>
 800f86e:	b92a      	cbnz	r2, 800f87c <_realloc_r+0x24>
 800f870:	f7ff f8fe 	bl	800ea70 <_free_r>
 800f874:	2400      	movs	r4, #0
 800f876:	4620      	mov	r0, r4
 800f878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f87c:	f000 f841 	bl	800f902 <_malloc_usable_size_r>
 800f880:	4285      	cmp	r5, r0
 800f882:	4606      	mov	r6, r0
 800f884:	d802      	bhi.n	800f88c <_realloc_r+0x34>
 800f886:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f88a:	d8f4      	bhi.n	800f876 <_realloc_r+0x1e>
 800f88c:	4629      	mov	r1, r5
 800f88e:	4640      	mov	r0, r8
 800f890:	f7ff f962 	bl	800eb58 <_malloc_r>
 800f894:	4607      	mov	r7, r0
 800f896:	2800      	cmp	r0, #0
 800f898:	d0ec      	beq.n	800f874 <_realloc_r+0x1c>
 800f89a:	42b5      	cmp	r5, r6
 800f89c:	462a      	mov	r2, r5
 800f89e:	4621      	mov	r1, r4
 800f8a0:	bf28      	it	cs
 800f8a2:	4632      	movcs	r2, r6
 800f8a4:	f7fe fa87 	bl	800ddb6 <memcpy>
 800f8a8:	4621      	mov	r1, r4
 800f8aa:	4640      	mov	r0, r8
 800f8ac:	f7ff f8e0 	bl	800ea70 <_free_r>
 800f8b0:	463c      	mov	r4, r7
 800f8b2:	e7e0      	b.n	800f876 <_realloc_r+0x1e>

0800f8b4 <__ascii_wctomb>:
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	4608      	mov	r0, r1
 800f8b8:	b141      	cbz	r1, 800f8cc <__ascii_wctomb+0x18>
 800f8ba:	2aff      	cmp	r2, #255	@ 0xff
 800f8bc:	d904      	bls.n	800f8c8 <__ascii_wctomb+0x14>
 800f8be:	228a      	movs	r2, #138	@ 0x8a
 800f8c0:	601a      	str	r2, [r3, #0]
 800f8c2:	f04f 30ff 	mov.w	r0, #4294967295
 800f8c6:	4770      	bx	lr
 800f8c8:	700a      	strb	r2, [r1, #0]
 800f8ca:	2001      	movs	r0, #1
 800f8cc:	4770      	bx	lr
	...

0800f8d0 <fiprintf>:
 800f8d0:	b40e      	push	{r1, r2, r3}
 800f8d2:	b503      	push	{r0, r1, lr}
 800f8d4:	4601      	mov	r1, r0
 800f8d6:	ab03      	add	r3, sp, #12
 800f8d8:	4805      	ldr	r0, [pc, #20]	@ (800f8f0 <fiprintf+0x20>)
 800f8da:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8de:	6800      	ldr	r0, [r0, #0]
 800f8e0:	9301      	str	r3, [sp, #4]
 800f8e2:	f000 f83f 	bl	800f964 <_vfiprintf_r>
 800f8e6:	b002      	add	sp, #8
 800f8e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f8ec:	b003      	add	sp, #12
 800f8ee:	4770      	bx	lr
 800f8f0:	20000040 	.word	0x20000040

0800f8f4 <abort>:
 800f8f4:	b508      	push	{r3, lr}
 800f8f6:	2006      	movs	r0, #6
 800f8f8:	f000 fa08 	bl	800fd0c <raise>
 800f8fc:	2001      	movs	r0, #1
 800f8fe:	f7f4 fbf9 	bl	80040f4 <_exit>

0800f902 <_malloc_usable_size_r>:
 800f902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f906:	1f18      	subs	r0, r3, #4
 800f908:	2b00      	cmp	r3, #0
 800f90a:	bfbc      	itt	lt
 800f90c:	580b      	ldrlt	r3, [r1, r0]
 800f90e:	18c0      	addlt	r0, r0, r3
 800f910:	4770      	bx	lr

0800f912 <__sfputc_r>:
 800f912:	6893      	ldr	r3, [r2, #8]
 800f914:	3b01      	subs	r3, #1
 800f916:	2b00      	cmp	r3, #0
 800f918:	b410      	push	{r4}
 800f91a:	6093      	str	r3, [r2, #8]
 800f91c:	da08      	bge.n	800f930 <__sfputc_r+0x1e>
 800f91e:	6994      	ldr	r4, [r2, #24]
 800f920:	42a3      	cmp	r3, r4
 800f922:	db01      	blt.n	800f928 <__sfputc_r+0x16>
 800f924:	290a      	cmp	r1, #10
 800f926:	d103      	bne.n	800f930 <__sfputc_r+0x1e>
 800f928:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f92c:	f000 b932 	b.w	800fb94 <__swbuf_r>
 800f930:	6813      	ldr	r3, [r2, #0]
 800f932:	1c58      	adds	r0, r3, #1
 800f934:	6010      	str	r0, [r2, #0]
 800f936:	7019      	strb	r1, [r3, #0]
 800f938:	4608      	mov	r0, r1
 800f93a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f93e:	4770      	bx	lr

0800f940 <__sfputs_r>:
 800f940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f942:	4606      	mov	r6, r0
 800f944:	460f      	mov	r7, r1
 800f946:	4614      	mov	r4, r2
 800f948:	18d5      	adds	r5, r2, r3
 800f94a:	42ac      	cmp	r4, r5
 800f94c:	d101      	bne.n	800f952 <__sfputs_r+0x12>
 800f94e:	2000      	movs	r0, #0
 800f950:	e007      	b.n	800f962 <__sfputs_r+0x22>
 800f952:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f956:	463a      	mov	r2, r7
 800f958:	4630      	mov	r0, r6
 800f95a:	f7ff ffda 	bl	800f912 <__sfputc_r>
 800f95e:	1c43      	adds	r3, r0, #1
 800f960:	d1f3      	bne.n	800f94a <__sfputs_r+0xa>
 800f962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f964 <_vfiprintf_r>:
 800f964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f968:	460d      	mov	r5, r1
 800f96a:	b09d      	sub	sp, #116	@ 0x74
 800f96c:	4614      	mov	r4, r2
 800f96e:	4698      	mov	r8, r3
 800f970:	4606      	mov	r6, r0
 800f972:	b118      	cbz	r0, 800f97c <_vfiprintf_r+0x18>
 800f974:	6a03      	ldr	r3, [r0, #32]
 800f976:	b90b      	cbnz	r3, 800f97c <_vfiprintf_r+0x18>
 800f978:	f7fe f8cc 	bl	800db14 <__sinit>
 800f97c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f97e:	07d9      	lsls	r1, r3, #31
 800f980:	d405      	bmi.n	800f98e <_vfiprintf_r+0x2a>
 800f982:	89ab      	ldrh	r3, [r5, #12]
 800f984:	059a      	lsls	r2, r3, #22
 800f986:	d402      	bmi.n	800f98e <_vfiprintf_r+0x2a>
 800f988:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f98a:	f7fe fa12 	bl	800ddb2 <__retarget_lock_acquire_recursive>
 800f98e:	89ab      	ldrh	r3, [r5, #12]
 800f990:	071b      	lsls	r3, r3, #28
 800f992:	d501      	bpl.n	800f998 <_vfiprintf_r+0x34>
 800f994:	692b      	ldr	r3, [r5, #16]
 800f996:	b99b      	cbnz	r3, 800f9c0 <_vfiprintf_r+0x5c>
 800f998:	4629      	mov	r1, r5
 800f99a:	4630      	mov	r0, r6
 800f99c:	f000 f938 	bl	800fc10 <__swsetup_r>
 800f9a0:	b170      	cbz	r0, 800f9c0 <_vfiprintf_r+0x5c>
 800f9a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f9a4:	07dc      	lsls	r4, r3, #31
 800f9a6:	d504      	bpl.n	800f9b2 <_vfiprintf_r+0x4e>
 800f9a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f9ac:	b01d      	add	sp, #116	@ 0x74
 800f9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9b2:	89ab      	ldrh	r3, [r5, #12]
 800f9b4:	0598      	lsls	r0, r3, #22
 800f9b6:	d4f7      	bmi.n	800f9a8 <_vfiprintf_r+0x44>
 800f9b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f9ba:	f7fe f9fb 	bl	800ddb4 <__retarget_lock_release_recursive>
 800f9be:	e7f3      	b.n	800f9a8 <_vfiprintf_r+0x44>
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9c4:	2320      	movs	r3, #32
 800f9c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f9ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9ce:	2330      	movs	r3, #48	@ 0x30
 800f9d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fb80 <_vfiprintf_r+0x21c>
 800f9d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f9d8:	f04f 0901 	mov.w	r9, #1
 800f9dc:	4623      	mov	r3, r4
 800f9de:	469a      	mov	sl, r3
 800f9e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9e4:	b10a      	cbz	r2, 800f9ea <_vfiprintf_r+0x86>
 800f9e6:	2a25      	cmp	r2, #37	@ 0x25
 800f9e8:	d1f9      	bne.n	800f9de <_vfiprintf_r+0x7a>
 800f9ea:	ebba 0b04 	subs.w	fp, sl, r4
 800f9ee:	d00b      	beq.n	800fa08 <_vfiprintf_r+0xa4>
 800f9f0:	465b      	mov	r3, fp
 800f9f2:	4622      	mov	r2, r4
 800f9f4:	4629      	mov	r1, r5
 800f9f6:	4630      	mov	r0, r6
 800f9f8:	f7ff ffa2 	bl	800f940 <__sfputs_r>
 800f9fc:	3001      	adds	r0, #1
 800f9fe:	f000 80a7 	beq.w	800fb50 <_vfiprintf_r+0x1ec>
 800fa02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa04:	445a      	add	r2, fp
 800fa06:	9209      	str	r2, [sp, #36]	@ 0x24
 800fa08:	f89a 3000 	ldrb.w	r3, [sl]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	f000 809f 	beq.w	800fb50 <_vfiprintf_r+0x1ec>
 800fa12:	2300      	movs	r3, #0
 800fa14:	f04f 32ff 	mov.w	r2, #4294967295
 800fa18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa1c:	f10a 0a01 	add.w	sl, sl, #1
 800fa20:	9304      	str	r3, [sp, #16]
 800fa22:	9307      	str	r3, [sp, #28]
 800fa24:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fa28:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa2a:	4654      	mov	r4, sl
 800fa2c:	2205      	movs	r2, #5
 800fa2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa32:	4853      	ldr	r0, [pc, #332]	@ (800fb80 <_vfiprintf_r+0x21c>)
 800fa34:	f7f0 fbcc 	bl	80001d0 <memchr>
 800fa38:	9a04      	ldr	r2, [sp, #16]
 800fa3a:	b9d8      	cbnz	r0, 800fa74 <_vfiprintf_r+0x110>
 800fa3c:	06d1      	lsls	r1, r2, #27
 800fa3e:	bf44      	itt	mi
 800fa40:	2320      	movmi	r3, #32
 800fa42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa46:	0713      	lsls	r3, r2, #28
 800fa48:	bf44      	itt	mi
 800fa4a:	232b      	movmi	r3, #43	@ 0x2b
 800fa4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa50:	f89a 3000 	ldrb.w	r3, [sl]
 800fa54:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa56:	d015      	beq.n	800fa84 <_vfiprintf_r+0x120>
 800fa58:	9a07      	ldr	r2, [sp, #28]
 800fa5a:	4654      	mov	r4, sl
 800fa5c:	2000      	movs	r0, #0
 800fa5e:	f04f 0c0a 	mov.w	ip, #10
 800fa62:	4621      	mov	r1, r4
 800fa64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa68:	3b30      	subs	r3, #48	@ 0x30
 800fa6a:	2b09      	cmp	r3, #9
 800fa6c:	d94b      	bls.n	800fb06 <_vfiprintf_r+0x1a2>
 800fa6e:	b1b0      	cbz	r0, 800fa9e <_vfiprintf_r+0x13a>
 800fa70:	9207      	str	r2, [sp, #28]
 800fa72:	e014      	b.n	800fa9e <_vfiprintf_r+0x13a>
 800fa74:	eba0 0308 	sub.w	r3, r0, r8
 800fa78:	fa09 f303 	lsl.w	r3, r9, r3
 800fa7c:	4313      	orrs	r3, r2
 800fa7e:	9304      	str	r3, [sp, #16]
 800fa80:	46a2      	mov	sl, r4
 800fa82:	e7d2      	b.n	800fa2a <_vfiprintf_r+0xc6>
 800fa84:	9b03      	ldr	r3, [sp, #12]
 800fa86:	1d19      	adds	r1, r3, #4
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	9103      	str	r1, [sp, #12]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	bfbb      	ittet	lt
 800fa90:	425b      	neglt	r3, r3
 800fa92:	f042 0202 	orrlt.w	r2, r2, #2
 800fa96:	9307      	strge	r3, [sp, #28]
 800fa98:	9307      	strlt	r3, [sp, #28]
 800fa9a:	bfb8      	it	lt
 800fa9c:	9204      	strlt	r2, [sp, #16]
 800fa9e:	7823      	ldrb	r3, [r4, #0]
 800faa0:	2b2e      	cmp	r3, #46	@ 0x2e
 800faa2:	d10a      	bne.n	800faba <_vfiprintf_r+0x156>
 800faa4:	7863      	ldrb	r3, [r4, #1]
 800faa6:	2b2a      	cmp	r3, #42	@ 0x2a
 800faa8:	d132      	bne.n	800fb10 <_vfiprintf_r+0x1ac>
 800faaa:	9b03      	ldr	r3, [sp, #12]
 800faac:	1d1a      	adds	r2, r3, #4
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	9203      	str	r2, [sp, #12]
 800fab2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fab6:	3402      	adds	r4, #2
 800fab8:	9305      	str	r3, [sp, #20]
 800faba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fb90 <_vfiprintf_r+0x22c>
 800fabe:	7821      	ldrb	r1, [r4, #0]
 800fac0:	2203      	movs	r2, #3
 800fac2:	4650      	mov	r0, sl
 800fac4:	f7f0 fb84 	bl	80001d0 <memchr>
 800fac8:	b138      	cbz	r0, 800fada <_vfiprintf_r+0x176>
 800faca:	9b04      	ldr	r3, [sp, #16]
 800facc:	eba0 000a 	sub.w	r0, r0, sl
 800fad0:	2240      	movs	r2, #64	@ 0x40
 800fad2:	4082      	lsls	r2, r0
 800fad4:	4313      	orrs	r3, r2
 800fad6:	3401      	adds	r4, #1
 800fad8:	9304      	str	r3, [sp, #16]
 800fada:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fade:	4829      	ldr	r0, [pc, #164]	@ (800fb84 <_vfiprintf_r+0x220>)
 800fae0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fae4:	2206      	movs	r2, #6
 800fae6:	f7f0 fb73 	bl	80001d0 <memchr>
 800faea:	2800      	cmp	r0, #0
 800faec:	d03f      	beq.n	800fb6e <_vfiprintf_r+0x20a>
 800faee:	4b26      	ldr	r3, [pc, #152]	@ (800fb88 <_vfiprintf_r+0x224>)
 800faf0:	bb1b      	cbnz	r3, 800fb3a <_vfiprintf_r+0x1d6>
 800faf2:	9b03      	ldr	r3, [sp, #12]
 800faf4:	3307      	adds	r3, #7
 800faf6:	f023 0307 	bic.w	r3, r3, #7
 800fafa:	3308      	adds	r3, #8
 800fafc:	9303      	str	r3, [sp, #12]
 800fafe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb00:	443b      	add	r3, r7
 800fb02:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb04:	e76a      	b.n	800f9dc <_vfiprintf_r+0x78>
 800fb06:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb0a:	460c      	mov	r4, r1
 800fb0c:	2001      	movs	r0, #1
 800fb0e:	e7a8      	b.n	800fa62 <_vfiprintf_r+0xfe>
 800fb10:	2300      	movs	r3, #0
 800fb12:	3401      	adds	r4, #1
 800fb14:	9305      	str	r3, [sp, #20]
 800fb16:	4619      	mov	r1, r3
 800fb18:	f04f 0c0a 	mov.w	ip, #10
 800fb1c:	4620      	mov	r0, r4
 800fb1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb22:	3a30      	subs	r2, #48	@ 0x30
 800fb24:	2a09      	cmp	r2, #9
 800fb26:	d903      	bls.n	800fb30 <_vfiprintf_r+0x1cc>
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d0c6      	beq.n	800faba <_vfiprintf_r+0x156>
 800fb2c:	9105      	str	r1, [sp, #20]
 800fb2e:	e7c4      	b.n	800faba <_vfiprintf_r+0x156>
 800fb30:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb34:	4604      	mov	r4, r0
 800fb36:	2301      	movs	r3, #1
 800fb38:	e7f0      	b.n	800fb1c <_vfiprintf_r+0x1b8>
 800fb3a:	ab03      	add	r3, sp, #12
 800fb3c:	9300      	str	r3, [sp, #0]
 800fb3e:	462a      	mov	r2, r5
 800fb40:	4b12      	ldr	r3, [pc, #72]	@ (800fb8c <_vfiprintf_r+0x228>)
 800fb42:	a904      	add	r1, sp, #16
 800fb44:	4630      	mov	r0, r6
 800fb46:	f7fd fba1 	bl	800d28c <_printf_float>
 800fb4a:	4607      	mov	r7, r0
 800fb4c:	1c78      	adds	r0, r7, #1
 800fb4e:	d1d6      	bne.n	800fafe <_vfiprintf_r+0x19a>
 800fb50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fb52:	07d9      	lsls	r1, r3, #31
 800fb54:	d405      	bmi.n	800fb62 <_vfiprintf_r+0x1fe>
 800fb56:	89ab      	ldrh	r3, [r5, #12]
 800fb58:	059a      	lsls	r2, r3, #22
 800fb5a:	d402      	bmi.n	800fb62 <_vfiprintf_r+0x1fe>
 800fb5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fb5e:	f7fe f929 	bl	800ddb4 <__retarget_lock_release_recursive>
 800fb62:	89ab      	ldrh	r3, [r5, #12]
 800fb64:	065b      	lsls	r3, r3, #25
 800fb66:	f53f af1f 	bmi.w	800f9a8 <_vfiprintf_r+0x44>
 800fb6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb6c:	e71e      	b.n	800f9ac <_vfiprintf_r+0x48>
 800fb6e:	ab03      	add	r3, sp, #12
 800fb70:	9300      	str	r3, [sp, #0]
 800fb72:	462a      	mov	r2, r5
 800fb74:	4b05      	ldr	r3, [pc, #20]	@ (800fb8c <_vfiprintf_r+0x228>)
 800fb76:	a904      	add	r1, sp, #16
 800fb78:	4630      	mov	r0, r6
 800fb7a:	f7fd fe1f 	bl	800d7bc <_printf_i>
 800fb7e:	e7e4      	b.n	800fb4a <_vfiprintf_r+0x1e6>
 800fb80:	08011318 	.word	0x08011318
 800fb84:	08011322 	.word	0x08011322
 800fb88:	0800d28d 	.word	0x0800d28d
 800fb8c:	0800f941 	.word	0x0800f941
 800fb90:	0801131e 	.word	0x0801131e

0800fb94 <__swbuf_r>:
 800fb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb96:	460e      	mov	r6, r1
 800fb98:	4614      	mov	r4, r2
 800fb9a:	4605      	mov	r5, r0
 800fb9c:	b118      	cbz	r0, 800fba6 <__swbuf_r+0x12>
 800fb9e:	6a03      	ldr	r3, [r0, #32]
 800fba0:	b90b      	cbnz	r3, 800fba6 <__swbuf_r+0x12>
 800fba2:	f7fd ffb7 	bl	800db14 <__sinit>
 800fba6:	69a3      	ldr	r3, [r4, #24]
 800fba8:	60a3      	str	r3, [r4, #8]
 800fbaa:	89a3      	ldrh	r3, [r4, #12]
 800fbac:	071a      	lsls	r2, r3, #28
 800fbae:	d501      	bpl.n	800fbb4 <__swbuf_r+0x20>
 800fbb0:	6923      	ldr	r3, [r4, #16]
 800fbb2:	b943      	cbnz	r3, 800fbc6 <__swbuf_r+0x32>
 800fbb4:	4621      	mov	r1, r4
 800fbb6:	4628      	mov	r0, r5
 800fbb8:	f000 f82a 	bl	800fc10 <__swsetup_r>
 800fbbc:	b118      	cbz	r0, 800fbc6 <__swbuf_r+0x32>
 800fbbe:	f04f 37ff 	mov.w	r7, #4294967295
 800fbc2:	4638      	mov	r0, r7
 800fbc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbc6:	6823      	ldr	r3, [r4, #0]
 800fbc8:	6922      	ldr	r2, [r4, #16]
 800fbca:	1a98      	subs	r0, r3, r2
 800fbcc:	6963      	ldr	r3, [r4, #20]
 800fbce:	b2f6      	uxtb	r6, r6
 800fbd0:	4283      	cmp	r3, r0
 800fbd2:	4637      	mov	r7, r6
 800fbd4:	dc05      	bgt.n	800fbe2 <__swbuf_r+0x4e>
 800fbd6:	4621      	mov	r1, r4
 800fbd8:	4628      	mov	r0, r5
 800fbda:	f7ff fda7 	bl	800f72c <_fflush_r>
 800fbde:	2800      	cmp	r0, #0
 800fbe0:	d1ed      	bne.n	800fbbe <__swbuf_r+0x2a>
 800fbe2:	68a3      	ldr	r3, [r4, #8]
 800fbe4:	3b01      	subs	r3, #1
 800fbe6:	60a3      	str	r3, [r4, #8]
 800fbe8:	6823      	ldr	r3, [r4, #0]
 800fbea:	1c5a      	adds	r2, r3, #1
 800fbec:	6022      	str	r2, [r4, #0]
 800fbee:	701e      	strb	r6, [r3, #0]
 800fbf0:	6962      	ldr	r2, [r4, #20]
 800fbf2:	1c43      	adds	r3, r0, #1
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d004      	beq.n	800fc02 <__swbuf_r+0x6e>
 800fbf8:	89a3      	ldrh	r3, [r4, #12]
 800fbfa:	07db      	lsls	r3, r3, #31
 800fbfc:	d5e1      	bpl.n	800fbc2 <__swbuf_r+0x2e>
 800fbfe:	2e0a      	cmp	r6, #10
 800fc00:	d1df      	bne.n	800fbc2 <__swbuf_r+0x2e>
 800fc02:	4621      	mov	r1, r4
 800fc04:	4628      	mov	r0, r5
 800fc06:	f7ff fd91 	bl	800f72c <_fflush_r>
 800fc0a:	2800      	cmp	r0, #0
 800fc0c:	d0d9      	beq.n	800fbc2 <__swbuf_r+0x2e>
 800fc0e:	e7d6      	b.n	800fbbe <__swbuf_r+0x2a>

0800fc10 <__swsetup_r>:
 800fc10:	b538      	push	{r3, r4, r5, lr}
 800fc12:	4b29      	ldr	r3, [pc, #164]	@ (800fcb8 <__swsetup_r+0xa8>)
 800fc14:	4605      	mov	r5, r0
 800fc16:	6818      	ldr	r0, [r3, #0]
 800fc18:	460c      	mov	r4, r1
 800fc1a:	b118      	cbz	r0, 800fc24 <__swsetup_r+0x14>
 800fc1c:	6a03      	ldr	r3, [r0, #32]
 800fc1e:	b90b      	cbnz	r3, 800fc24 <__swsetup_r+0x14>
 800fc20:	f7fd ff78 	bl	800db14 <__sinit>
 800fc24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc28:	0719      	lsls	r1, r3, #28
 800fc2a:	d422      	bmi.n	800fc72 <__swsetup_r+0x62>
 800fc2c:	06da      	lsls	r2, r3, #27
 800fc2e:	d407      	bmi.n	800fc40 <__swsetup_r+0x30>
 800fc30:	2209      	movs	r2, #9
 800fc32:	602a      	str	r2, [r5, #0]
 800fc34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc38:	81a3      	strh	r3, [r4, #12]
 800fc3a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc3e:	e033      	b.n	800fca8 <__swsetup_r+0x98>
 800fc40:	0758      	lsls	r0, r3, #29
 800fc42:	d512      	bpl.n	800fc6a <__swsetup_r+0x5a>
 800fc44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fc46:	b141      	cbz	r1, 800fc5a <__swsetup_r+0x4a>
 800fc48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fc4c:	4299      	cmp	r1, r3
 800fc4e:	d002      	beq.n	800fc56 <__swsetup_r+0x46>
 800fc50:	4628      	mov	r0, r5
 800fc52:	f7fe ff0d 	bl	800ea70 <_free_r>
 800fc56:	2300      	movs	r3, #0
 800fc58:	6363      	str	r3, [r4, #52]	@ 0x34
 800fc5a:	89a3      	ldrh	r3, [r4, #12]
 800fc5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fc60:	81a3      	strh	r3, [r4, #12]
 800fc62:	2300      	movs	r3, #0
 800fc64:	6063      	str	r3, [r4, #4]
 800fc66:	6923      	ldr	r3, [r4, #16]
 800fc68:	6023      	str	r3, [r4, #0]
 800fc6a:	89a3      	ldrh	r3, [r4, #12]
 800fc6c:	f043 0308 	orr.w	r3, r3, #8
 800fc70:	81a3      	strh	r3, [r4, #12]
 800fc72:	6923      	ldr	r3, [r4, #16]
 800fc74:	b94b      	cbnz	r3, 800fc8a <__swsetup_r+0x7a>
 800fc76:	89a3      	ldrh	r3, [r4, #12]
 800fc78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fc7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fc80:	d003      	beq.n	800fc8a <__swsetup_r+0x7a>
 800fc82:	4621      	mov	r1, r4
 800fc84:	4628      	mov	r0, r5
 800fc86:	f000 f883 	bl	800fd90 <__smakebuf_r>
 800fc8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc8e:	f013 0201 	ands.w	r2, r3, #1
 800fc92:	d00a      	beq.n	800fcaa <__swsetup_r+0x9a>
 800fc94:	2200      	movs	r2, #0
 800fc96:	60a2      	str	r2, [r4, #8]
 800fc98:	6962      	ldr	r2, [r4, #20]
 800fc9a:	4252      	negs	r2, r2
 800fc9c:	61a2      	str	r2, [r4, #24]
 800fc9e:	6922      	ldr	r2, [r4, #16]
 800fca0:	b942      	cbnz	r2, 800fcb4 <__swsetup_r+0xa4>
 800fca2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fca6:	d1c5      	bne.n	800fc34 <__swsetup_r+0x24>
 800fca8:	bd38      	pop	{r3, r4, r5, pc}
 800fcaa:	0799      	lsls	r1, r3, #30
 800fcac:	bf58      	it	pl
 800fcae:	6962      	ldrpl	r2, [r4, #20]
 800fcb0:	60a2      	str	r2, [r4, #8]
 800fcb2:	e7f4      	b.n	800fc9e <__swsetup_r+0x8e>
 800fcb4:	2000      	movs	r0, #0
 800fcb6:	e7f7      	b.n	800fca8 <__swsetup_r+0x98>
 800fcb8:	20000040 	.word	0x20000040

0800fcbc <_raise_r>:
 800fcbc:	291f      	cmp	r1, #31
 800fcbe:	b538      	push	{r3, r4, r5, lr}
 800fcc0:	4605      	mov	r5, r0
 800fcc2:	460c      	mov	r4, r1
 800fcc4:	d904      	bls.n	800fcd0 <_raise_r+0x14>
 800fcc6:	2316      	movs	r3, #22
 800fcc8:	6003      	str	r3, [r0, #0]
 800fcca:	f04f 30ff 	mov.w	r0, #4294967295
 800fcce:	bd38      	pop	{r3, r4, r5, pc}
 800fcd0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fcd2:	b112      	cbz	r2, 800fcda <_raise_r+0x1e>
 800fcd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fcd8:	b94b      	cbnz	r3, 800fcee <_raise_r+0x32>
 800fcda:	4628      	mov	r0, r5
 800fcdc:	f000 f830 	bl	800fd40 <_getpid_r>
 800fce0:	4622      	mov	r2, r4
 800fce2:	4601      	mov	r1, r0
 800fce4:	4628      	mov	r0, r5
 800fce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcea:	f000 b817 	b.w	800fd1c <_kill_r>
 800fcee:	2b01      	cmp	r3, #1
 800fcf0:	d00a      	beq.n	800fd08 <_raise_r+0x4c>
 800fcf2:	1c59      	adds	r1, r3, #1
 800fcf4:	d103      	bne.n	800fcfe <_raise_r+0x42>
 800fcf6:	2316      	movs	r3, #22
 800fcf8:	6003      	str	r3, [r0, #0]
 800fcfa:	2001      	movs	r0, #1
 800fcfc:	e7e7      	b.n	800fcce <_raise_r+0x12>
 800fcfe:	2100      	movs	r1, #0
 800fd00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fd04:	4620      	mov	r0, r4
 800fd06:	4798      	blx	r3
 800fd08:	2000      	movs	r0, #0
 800fd0a:	e7e0      	b.n	800fcce <_raise_r+0x12>

0800fd0c <raise>:
 800fd0c:	4b02      	ldr	r3, [pc, #8]	@ (800fd18 <raise+0xc>)
 800fd0e:	4601      	mov	r1, r0
 800fd10:	6818      	ldr	r0, [r3, #0]
 800fd12:	f7ff bfd3 	b.w	800fcbc <_raise_r>
 800fd16:	bf00      	nop
 800fd18:	20000040 	.word	0x20000040

0800fd1c <_kill_r>:
 800fd1c:	b538      	push	{r3, r4, r5, lr}
 800fd1e:	4d07      	ldr	r5, [pc, #28]	@ (800fd3c <_kill_r+0x20>)
 800fd20:	2300      	movs	r3, #0
 800fd22:	4604      	mov	r4, r0
 800fd24:	4608      	mov	r0, r1
 800fd26:	4611      	mov	r1, r2
 800fd28:	602b      	str	r3, [r5, #0]
 800fd2a:	f7f4 f9d3 	bl	80040d4 <_kill>
 800fd2e:	1c43      	adds	r3, r0, #1
 800fd30:	d102      	bne.n	800fd38 <_kill_r+0x1c>
 800fd32:	682b      	ldr	r3, [r5, #0]
 800fd34:	b103      	cbz	r3, 800fd38 <_kill_r+0x1c>
 800fd36:	6023      	str	r3, [r4, #0]
 800fd38:	bd38      	pop	{r3, r4, r5, pc}
 800fd3a:	bf00      	nop
 800fd3c:	20005490 	.word	0x20005490

0800fd40 <_getpid_r>:
 800fd40:	f7f4 b9c0 	b.w	80040c4 <_getpid>

0800fd44 <__swhatbuf_r>:
 800fd44:	b570      	push	{r4, r5, r6, lr}
 800fd46:	460c      	mov	r4, r1
 800fd48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd4c:	2900      	cmp	r1, #0
 800fd4e:	b096      	sub	sp, #88	@ 0x58
 800fd50:	4615      	mov	r5, r2
 800fd52:	461e      	mov	r6, r3
 800fd54:	da0d      	bge.n	800fd72 <__swhatbuf_r+0x2e>
 800fd56:	89a3      	ldrh	r3, [r4, #12]
 800fd58:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fd5c:	f04f 0100 	mov.w	r1, #0
 800fd60:	bf14      	ite	ne
 800fd62:	2340      	movne	r3, #64	@ 0x40
 800fd64:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fd68:	2000      	movs	r0, #0
 800fd6a:	6031      	str	r1, [r6, #0]
 800fd6c:	602b      	str	r3, [r5, #0]
 800fd6e:	b016      	add	sp, #88	@ 0x58
 800fd70:	bd70      	pop	{r4, r5, r6, pc}
 800fd72:	466a      	mov	r2, sp
 800fd74:	f000 f848 	bl	800fe08 <_fstat_r>
 800fd78:	2800      	cmp	r0, #0
 800fd7a:	dbec      	blt.n	800fd56 <__swhatbuf_r+0x12>
 800fd7c:	9901      	ldr	r1, [sp, #4]
 800fd7e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fd82:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fd86:	4259      	negs	r1, r3
 800fd88:	4159      	adcs	r1, r3
 800fd8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd8e:	e7eb      	b.n	800fd68 <__swhatbuf_r+0x24>

0800fd90 <__smakebuf_r>:
 800fd90:	898b      	ldrh	r3, [r1, #12]
 800fd92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd94:	079d      	lsls	r5, r3, #30
 800fd96:	4606      	mov	r6, r0
 800fd98:	460c      	mov	r4, r1
 800fd9a:	d507      	bpl.n	800fdac <__smakebuf_r+0x1c>
 800fd9c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fda0:	6023      	str	r3, [r4, #0]
 800fda2:	6123      	str	r3, [r4, #16]
 800fda4:	2301      	movs	r3, #1
 800fda6:	6163      	str	r3, [r4, #20]
 800fda8:	b003      	add	sp, #12
 800fdaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdac:	ab01      	add	r3, sp, #4
 800fdae:	466a      	mov	r2, sp
 800fdb0:	f7ff ffc8 	bl	800fd44 <__swhatbuf_r>
 800fdb4:	9f00      	ldr	r7, [sp, #0]
 800fdb6:	4605      	mov	r5, r0
 800fdb8:	4639      	mov	r1, r7
 800fdba:	4630      	mov	r0, r6
 800fdbc:	f7fe fecc 	bl	800eb58 <_malloc_r>
 800fdc0:	b948      	cbnz	r0, 800fdd6 <__smakebuf_r+0x46>
 800fdc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdc6:	059a      	lsls	r2, r3, #22
 800fdc8:	d4ee      	bmi.n	800fda8 <__smakebuf_r+0x18>
 800fdca:	f023 0303 	bic.w	r3, r3, #3
 800fdce:	f043 0302 	orr.w	r3, r3, #2
 800fdd2:	81a3      	strh	r3, [r4, #12]
 800fdd4:	e7e2      	b.n	800fd9c <__smakebuf_r+0xc>
 800fdd6:	89a3      	ldrh	r3, [r4, #12]
 800fdd8:	6020      	str	r0, [r4, #0]
 800fdda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fdde:	81a3      	strh	r3, [r4, #12]
 800fde0:	9b01      	ldr	r3, [sp, #4]
 800fde2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fde6:	b15b      	cbz	r3, 800fe00 <__smakebuf_r+0x70>
 800fde8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdec:	4630      	mov	r0, r6
 800fdee:	f000 f81d 	bl	800fe2c <_isatty_r>
 800fdf2:	b128      	cbz	r0, 800fe00 <__smakebuf_r+0x70>
 800fdf4:	89a3      	ldrh	r3, [r4, #12]
 800fdf6:	f023 0303 	bic.w	r3, r3, #3
 800fdfa:	f043 0301 	orr.w	r3, r3, #1
 800fdfe:	81a3      	strh	r3, [r4, #12]
 800fe00:	89a3      	ldrh	r3, [r4, #12]
 800fe02:	431d      	orrs	r5, r3
 800fe04:	81a5      	strh	r5, [r4, #12]
 800fe06:	e7cf      	b.n	800fda8 <__smakebuf_r+0x18>

0800fe08 <_fstat_r>:
 800fe08:	b538      	push	{r3, r4, r5, lr}
 800fe0a:	4d07      	ldr	r5, [pc, #28]	@ (800fe28 <_fstat_r+0x20>)
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	4604      	mov	r4, r0
 800fe10:	4608      	mov	r0, r1
 800fe12:	4611      	mov	r1, r2
 800fe14:	602b      	str	r3, [r5, #0]
 800fe16:	f7f4 f9bd 	bl	8004194 <_fstat>
 800fe1a:	1c43      	adds	r3, r0, #1
 800fe1c:	d102      	bne.n	800fe24 <_fstat_r+0x1c>
 800fe1e:	682b      	ldr	r3, [r5, #0]
 800fe20:	b103      	cbz	r3, 800fe24 <_fstat_r+0x1c>
 800fe22:	6023      	str	r3, [r4, #0]
 800fe24:	bd38      	pop	{r3, r4, r5, pc}
 800fe26:	bf00      	nop
 800fe28:	20005490 	.word	0x20005490

0800fe2c <_isatty_r>:
 800fe2c:	b538      	push	{r3, r4, r5, lr}
 800fe2e:	4d06      	ldr	r5, [pc, #24]	@ (800fe48 <_isatty_r+0x1c>)
 800fe30:	2300      	movs	r3, #0
 800fe32:	4604      	mov	r4, r0
 800fe34:	4608      	mov	r0, r1
 800fe36:	602b      	str	r3, [r5, #0]
 800fe38:	f7f4 f9bc 	bl	80041b4 <_isatty>
 800fe3c:	1c43      	adds	r3, r0, #1
 800fe3e:	d102      	bne.n	800fe46 <_isatty_r+0x1a>
 800fe40:	682b      	ldr	r3, [r5, #0]
 800fe42:	b103      	cbz	r3, 800fe46 <_isatty_r+0x1a>
 800fe44:	6023      	str	r3, [r4, #0]
 800fe46:	bd38      	pop	{r3, r4, r5, pc}
 800fe48:	20005490 	.word	0x20005490

0800fe4c <atan2>:
 800fe4c:	f000 b800 	b.w	800fe50 <__ieee754_atan2>

0800fe50 <__ieee754_atan2>:
 800fe50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe54:	ec57 6b11 	vmov	r6, r7, d1
 800fe58:	4273      	negs	r3, r6
 800fe5a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800ffd8 <__ieee754_atan2+0x188>
 800fe5e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800fe62:	4333      	orrs	r3, r6
 800fe64:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800fe68:	4543      	cmp	r3, r8
 800fe6a:	ec51 0b10 	vmov	r0, r1, d0
 800fe6e:	4635      	mov	r5, r6
 800fe70:	d809      	bhi.n	800fe86 <__ieee754_atan2+0x36>
 800fe72:	4244      	negs	r4, r0
 800fe74:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fe78:	4304      	orrs	r4, r0
 800fe7a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800fe7e:	4544      	cmp	r4, r8
 800fe80:	468e      	mov	lr, r1
 800fe82:	4681      	mov	r9, r0
 800fe84:	d907      	bls.n	800fe96 <__ieee754_atan2+0x46>
 800fe86:	4632      	mov	r2, r6
 800fe88:	463b      	mov	r3, r7
 800fe8a:	f7f0 f9ff 	bl	800028c <__adddf3>
 800fe8e:	ec41 0b10 	vmov	d0, r0, r1
 800fe92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe96:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800fe9a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800fe9e:	4334      	orrs	r4, r6
 800fea0:	d103      	bne.n	800feaa <__ieee754_atan2+0x5a>
 800fea2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fea6:	f000 b89b 	b.w	800ffe0 <atan>
 800feaa:	17bc      	asrs	r4, r7, #30
 800feac:	f004 0402 	and.w	r4, r4, #2
 800feb0:	ea53 0909 	orrs.w	r9, r3, r9
 800feb4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800feb8:	d107      	bne.n	800feca <__ieee754_atan2+0x7a>
 800feba:	2c02      	cmp	r4, #2
 800febc:	d05f      	beq.n	800ff7e <__ieee754_atan2+0x12e>
 800febe:	2c03      	cmp	r4, #3
 800fec0:	d1e5      	bne.n	800fe8e <__ieee754_atan2+0x3e>
 800fec2:	a141      	add	r1, pc, #260	@ (adr r1, 800ffc8 <__ieee754_atan2+0x178>)
 800fec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fec8:	e7e1      	b.n	800fe8e <__ieee754_atan2+0x3e>
 800feca:	4315      	orrs	r5, r2
 800fecc:	d106      	bne.n	800fedc <__ieee754_atan2+0x8c>
 800fece:	f1be 0f00 	cmp.w	lr, #0
 800fed2:	da5f      	bge.n	800ff94 <__ieee754_atan2+0x144>
 800fed4:	a13e      	add	r1, pc, #248	@ (adr r1, 800ffd0 <__ieee754_atan2+0x180>)
 800fed6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800feda:	e7d8      	b.n	800fe8e <__ieee754_atan2+0x3e>
 800fedc:	4542      	cmp	r2, r8
 800fede:	d10f      	bne.n	800ff00 <__ieee754_atan2+0xb0>
 800fee0:	4293      	cmp	r3, r2
 800fee2:	f104 34ff 	add.w	r4, r4, #4294967295
 800fee6:	d107      	bne.n	800fef8 <__ieee754_atan2+0xa8>
 800fee8:	2c02      	cmp	r4, #2
 800feea:	d84c      	bhi.n	800ff86 <__ieee754_atan2+0x136>
 800feec:	4b34      	ldr	r3, [pc, #208]	@ (800ffc0 <__ieee754_atan2+0x170>)
 800feee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fef2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fef6:	e7ca      	b.n	800fe8e <__ieee754_atan2+0x3e>
 800fef8:	2c02      	cmp	r4, #2
 800fefa:	d848      	bhi.n	800ff8e <__ieee754_atan2+0x13e>
 800fefc:	4b31      	ldr	r3, [pc, #196]	@ (800ffc4 <__ieee754_atan2+0x174>)
 800fefe:	e7f6      	b.n	800feee <__ieee754_atan2+0x9e>
 800ff00:	4543      	cmp	r3, r8
 800ff02:	d0e4      	beq.n	800fece <__ieee754_atan2+0x7e>
 800ff04:	1a9b      	subs	r3, r3, r2
 800ff06:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800ff0a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ff0e:	da1e      	bge.n	800ff4e <__ieee754_atan2+0xfe>
 800ff10:	2f00      	cmp	r7, #0
 800ff12:	da01      	bge.n	800ff18 <__ieee754_atan2+0xc8>
 800ff14:	323c      	adds	r2, #60	@ 0x3c
 800ff16:	db1e      	blt.n	800ff56 <__ieee754_atan2+0x106>
 800ff18:	4632      	mov	r2, r6
 800ff1a:	463b      	mov	r3, r7
 800ff1c:	f7f0 fc96 	bl	800084c <__aeabi_ddiv>
 800ff20:	ec41 0b10 	vmov	d0, r0, r1
 800ff24:	f000 f9f4 	bl	8010310 <fabs>
 800ff28:	f000 f85a 	bl	800ffe0 <atan>
 800ff2c:	ec51 0b10 	vmov	r0, r1, d0
 800ff30:	2c01      	cmp	r4, #1
 800ff32:	d013      	beq.n	800ff5c <__ieee754_atan2+0x10c>
 800ff34:	2c02      	cmp	r4, #2
 800ff36:	d015      	beq.n	800ff64 <__ieee754_atan2+0x114>
 800ff38:	2c00      	cmp	r4, #0
 800ff3a:	d0a8      	beq.n	800fe8e <__ieee754_atan2+0x3e>
 800ff3c:	a318      	add	r3, pc, #96	@ (adr r3, 800ffa0 <__ieee754_atan2+0x150>)
 800ff3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff42:	f7f0 f9a1 	bl	8000288 <__aeabi_dsub>
 800ff46:	a318      	add	r3, pc, #96	@ (adr r3, 800ffa8 <__ieee754_atan2+0x158>)
 800ff48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff4c:	e014      	b.n	800ff78 <__ieee754_atan2+0x128>
 800ff4e:	a118      	add	r1, pc, #96	@ (adr r1, 800ffb0 <__ieee754_atan2+0x160>)
 800ff50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff54:	e7ec      	b.n	800ff30 <__ieee754_atan2+0xe0>
 800ff56:	2000      	movs	r0, #0
 800ff58:	2100      	movs	r1, #0
 800ff5a:	e7e9      	b.n	800ff30 <__ieee754_atan2+0xe0>
 800ff5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ff60:	4619      	mov	r1, r3
 800ff62:	e794      	b.n	800fe8e <__ieee754_atan2+0x3e>
 800ff64:	a30e      	add	r3, pc, #56	@ (adr r3, 800ffa0 <__ieee754_atan2+0x150>)
 800ff66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff6a:	f7f0 f98d 	bl	8000288 <__aeabi_dsub>
 800ff6e:	4602      	mov	r2, r0
 800ff70:	460b      	mov	r3, r1
 800ff72:	a10d      	add	r1, pc, #52	@ (adr r1, 800ffa8 <__ieee754_atan2+0x158>)
 800ff74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff78:	f7f0 f986 	bl	8000288 <__aeabi_dsub>
 800ff7c:	e787      	b.n	800fe8e <__ieee754_atan2+0x3e>
 800ff7e:	a10a      	add	r1, pc, #40	@ (adr r1, 800ffa8 <__ieee754_atan2+0x158>)
 800ff80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff84:	e783      	b.n	800fe8e <__ieee754_atan2+0x3e>
 800ff86:	a10c      	add	r1, pc, #48	@ (adr r1, 800ffb8 <__ieee754_atan2+0x168>)
 800ff88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff8c:	e77f      	b.n	800fe8e <__ieee754_atan2+0x3e>
 800ff8e:	2000      	movs	r0, #0
 800ff90:	2100      	movs	r1, #0
 800ff92:	e77c      	b.n	800fe8e <__ieee754_atan2+0x3e>
 800ff94:	a106      	add	r1, pc, #24	@ (adr r1, 800ffb0 <__ieee754_atan2+0x160>)
 800ff96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff9a:	e778      	b.n	800fe8e <__ieee754_atan2+0x3e>
 800ff9c:	f3af 8000 	nop.w
 800ffa0:	33145c07 	.word	0x33145c07
 800ffa4:	3ca1a626 	.word	0x3ca1a626
 800ffa8:	54442d18 	.word	0x54442d18
 800ffac:	400921fb 	.word	0x400921fb
 800ffb0:	54442d18 	.word	0x54442d18
 800ffb4:	3ff921fb 	.word	0x3ff921fb
 800ffb8:	54442d18 	.word	0x54442d18
 800ffbc:	3fe921fb 	.word	0x3fe921fb
 800ffc0:	08011388 	.word	0x08011388
 800ffc4:	08011370 	.word	0x08011370
 800ffc8:	54442d18 	.word	0x54442d18
 800ffcc:	c00921fb 	.word	0xc00921fb
 800ffd0:	54442d18 	.word	0x54442d18
 800ffd4:	bff921fb 	.word	0xbff921fb
 800ffd8:	7ff00000 	.word	0x7ff00000
 800ffdc:	00000000 	.word	0x00000000

0800ffe0 <atan>:
 800ffe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe4:	ec55 4b10 	vmov	r4, r5, d0
 800ffe8:	4bbf      	ldr	r3, [pc, #764]	@ (80102e8 <atan+0x308>)
 800ffea:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800ffee:	429e      	cmp	r6, r3
 800fff0:	46ab      	mov	fp, r5
 800fff2:	d918      	bls.n	8010026 <atan+0x46>
 800fff4:	4bbd      	ldr	r3, [pc, #756]	@ (80102ec <atan+0x30c>)
 800fff6:	429e      	cmp	r6, r3
 800fff8:	d801      	bhi.n	800fffe <atan+0x1e>
 800fffa:	d109      	bne.n	8010010 <atan+0x30>
 800fffc:	b144      	cbz	r4, 8010010 <atan+0x30>
 800fffe:	4622      	mov	r2, r4
 8010000:	462b      	mov	r3, r5
 8010002:	4620      	mov	r0, r4
 8010004:	4629      	mov	r1, r5
 8010006:	f7f0 f941 	bl	800028c <__adddf3>
 801000a:	4604      	mov	r4, r0
 801000c:	460d      	mov	r5, r1
 801000e:	e006      	b.n	801001e <atan+0x3e>
 8010010:	f1bb 0f00 	cmp.w	fp, #0
 8010014:	f340 812b 	ble.w	801026e <atan+0x28e>
 8010018:	a597      	add	r5, pc, #604	@ (adr r5, 8010278 <atan+0x298>)
 801001a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801001e:	ec45 4b10 	vmov	d0, r4, r5
 8010022:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010026:	4bb2      	ldr	r3, [pc, #712]	@ (80102f0 <atan+0x310>)
 8010028:	429e      	cmp	r6, r3
 801002a:	d813      	bhi.n	8010054 <atan+0x74>
 801002c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8010030:	429e      	cmp	r6, r3
 8010032:	d80c      	bhi.n	801004e <atan+0x6e>
 8010034:	a392      	add	r3, pc, #584	@ (adr r3, 8010280 <atan+0x2a0>)
 8010036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801003a:	4620      	mov	r0, r4
 801003c:	4629      	mov	r1, r5
 801003e:	f7f0 f925 	bl	800028c <__adddf3>
 8010042:	4bac      	ldr	r3, [pc, #688]	@ (80102f4 <atan+0x314>)
 8010044:	2200      	movs	r2, #0
 8010046:	f7f0 fd67 	bl	8000b18 <__aeabi_dcmpgt>
 801004a:	2800      	cmp	r0, #0
 801004c:	d1e7      	bne.n	801001e <atan+0x3e>
 801004e:	f04f 3aff 	mov.w	sl, #4294967295
 8010052:	e029      	b.n	80100a8 <atan+0xc8>
 8010054:	f000 f95c 	bl	8010310 <fabs>
 8010058:	4ba7      	ldr	r3, [pc, #668]	@ (80102f8 <atan+0x318>)
 801005a:	429e      	cmp	r6, r3
 801005c:	ec55 4b10 	vmov	r4, r5, d0
 8010060:	f200 80bc 	bhi.w	80101dc <atan+0x1fc>
 8010064:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8010068:	429e      	cmp	r6, r3
 801006a:	f200 809e 	bhi.w	80101aa <atan+0x1ca>
 801006e:	4622      	mov	r2, r4
 8010070:	462b      	mov	r3, r5
 8010072:	4620      	mov	r0, r4
 8010074:	4629      	mov	r1, r5
 8010076:	f7f0 f909 	bl	800028c <__adddf3>
 801007a:	4b9e      	ldr	r3, [pc, #632]	@ (80102f4 <atan+0x314>)
 801007c:	2200      	movs	r2, #0
 801007e:	f7f0 f903 	bl	8000288 <__aeabi_dsub>
 8010082:	2200      	movs	r2, #0
 8010084:	4606      	mov	r6, r0
 8010086:	460f      	mov	r7, r1
 8010088:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801008c:	4620      	mov	r0, r4
 801008e:	4629      	mov	r1, r5
 8010090:	f7f0 f8fc 	bl	800028c <__adddf3>
 8010094:	4602      	mov	r2, r0
 8010096:	460b      	mov	r3, r1
 8010098:	4630      	mov	r0, r6
 801009a:	4639      	mov	r1, r7
 801009c:	f7f0 fbd6 	bl	800084c <__aeabi_ddiv>
 80100a0:	f04f 0a00 	mov.w	sl, #0
 80100a4:	4604      	mov	r4, r0
 80100a6:	460d      	mov	r5, r1
 80100a8:	4622      	mov	r2, r4
 80100aa:	462b      	mov	r3, r5
 80100ac:	4620      	mov	r0, r4
 80100ae:	4629      	mov	r1, r5
 80100b0:	f7f0 faa2 	bl	80005f8 <__aeabi_dmul>
 80100b4:	4602      	mov	r2, r0
 80100b6:	460b      	mov	r3, r1
 80100b8:	4680      	mov	r8, r0
 80100ba:	4689      	mov	r9, r1
 80100bc:	f7f0 fa9c 	bl	80005f8 <__aeabi_dmul>
 80100c0:	a371      	add	r3, pc, #452	@ (adr r3, 8010288 <atan+0x2a8>)
 80100c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100c6:	4606      	mov	r6, r0
 80100c8:	460f      	mov	r7, r1
 80100ca:	f7f0 fa95 	bl	80005f8 <__aeabi_dmul>
 80100ce:	a370      	add	r3, pc, #448	@ (adr r3, 8010290 <atan+0x2b0>)
 80100d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d4:	f7f0 f8da 	bl	800028c <__adddf3>
 80100d8:	4632      	mov	r2, r6
 80100da:	463b      	mov	r3, r7
 80100dc:	f7f0 fa8c 	bl	80005f8 <__aeabi_dmul>
 80100e0:	a36d      	add	r3, pc, #436	@ (adr r3, 8010298 <atan+0x2b8>)
 80100e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100e6:	f7f0 f8d1 	bl	800028c <__adddf3>
 80100ea:	4632      	mov	r2, r6
 80100ec:	463b      	mov	r3, r7
 80100ee:	f7f0 fa83 	bl	80005f8 <__aeabi_dmul>
 80100f2:	a36b      	add	r3, pc, #428	@ (adr r3, 80102a0 <atan+0x2c0>)
 80100f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f8:	f7f0 f8c8 	bl	800028c <__adddf3>
 80100fc:	4632      	mov	r2, r6
 80100fe:	463b      	mov	r3, r7
 8010100:	f7f0 fa7a 	bl	80005f8 <__aeabi_dmul>
 8010104:	a368      	add	r3, pc, #416	@ (adr r3, 80102a8 <atan+0x2c8>)
 8010106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801010a:	f7f0 f8bf 	bl	800028c <__adddf3>
 801010e:	4632      	mov	r2, r6
 8010110:	463b      	mov	r3, r7
 8010112:	f7f0 fa71 	bl	80005f8 <__aeabi_dmul>
 8010116:	a366      	add	r3, pc, #408	@ (adr r3, 80102b0 <atan+0x2d0>)
 8010118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801011c:	f7f0 f8b6 	bl	800028c <__adddf3>
 8010120:	4642      	mov	r2, r8
 8010122:	464b      	mov	r3, r9
 8010124:	f7f0 fa68 	bl	80005f8 <__aeabi_dmul>
 8010128:	a363      	add	r3, pc, #396	@ (adr r3, 80102b8 <atan+0x2d8>)
 801012a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801012e:	4680      	mov	r8, r0
 8010130:	4689      	mov	r9, r1
 8010132:	4630      	mov	r0, r6
 8010134:	4639      	mov	r1, r7
 8010136:	f7f0 fa5f 	bl	80005f8 <__aeabi_dmul>
 801013a:	a361      	add	r3, pc, #388	@ (adr r3, 80102c0 <atan+0x2e0>)
 801013c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010140:	f7f0 f8a2 	bl	8000288 <__aeabi_dsub>
 8010144:	4632      	mov	r2, r6
 8010146:	463b      	mov	r3, r7
 8010148:	f7f0 fa56 	bl	80005f8 <__aeabi_dmul>
 801014c:	a35e      	add	r3, pc, #376	@ (adr r3, 80102c8 <atan+0x2e8>)
 801014e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010152:	f7f0 f899 	bl	8000288 <__aeabi_dsub>
 8010156:	4632      	mov	r2, r6
 8010158:	463b      	mov	r3, r7
 801015a:	f7f0 fa4d 	bl	80005f8 <__aeabi_dmul>
 801015e:	a35c      	add	r3, pc, #368	@ (adr r3, 80102d0 <atan+0x2f0>)
 8010160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010164:	f7f0 f890 	bl	8000288 <__aeabi_dsub>
 8010168:	4632      	mov	r2, r6
 801016a:	463b      	mov	r3, r7
 801016c:	f7f0 fa44 	bl	80005f8 <__aeabi_dmul>
 8010170:	a359      	add	r3, pc, #356	@ (adr r3, 80102d8 <atan+0x2f8>)
 8010172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010176:	f7f0 f887 	bl	8000288 <__aeabi_dsub>
 801017a:	4632      	mov	r2, r6
 801017c:	463b      	mov	r3, r7
 801017e:	f7f0 fa3b 	bl	80005f8 <__aeabi_dmul>
 8010182:	4602      	mov	r2, r0
 8010184:	460b      	mov	r3, r1
 8010186:	4640      	mov	r0, r8
 8010188:	4649      	mov	r1, r9
 801018a:	f7f0 f87f 	bl	800028c <__adddf3>
 801018e:	4622      	mov	r2, r4
 8010190:	462b      	mov	r3, r5
 8010192:	f7f0 fa31 	bl	80005f8 <__aeabi_dmul>
 8010196:	f1ba 3fff 	cmp.w	sl, #4294967295
 801019a:	4602      	mov	r2, r0
 801019c:	460b      	mov	r3, r1
 801019e:	d148      	bne.n	8010232 <atan+0x252>
 80101a0:	4620      	mov	r0, r4
 80101a2:	4629      	mov	r1, r5
 80101a4:	f7f0 f870 	bl	8000288 <__aeabi_dsub>
 80101a8:	e72f      	b.n	801000a <atan+0x2a>
 80101aa:	4b52      	ldr	r3, [pc, #328]	@ (80102f4 <atan+0x314>)
 80101ac:	2200      	movs	r2, #0
 80101ae:	4620      	mov	r0, r4
 80101b0:	4629      	mov	r1, r5
 80101b2:	f7f0 f869 	bl	8000288 <__aeabi_dsub>
 80101b6:	4b4f      	ldr	r3, [pc, #316]	@ (80102f4 <atan+0x314>)
 80101b8:	4606      	mov	r6, r0
 80101ba:	460f      	mov	r7, r1
 80101bc:	2200      	movs	r2, #0
 80101be:	4620      	mov	r0, r4
 80101c0:	4629      	mov	r1, r5
 80101c2:	f7f0 f863 	bl	800028c <__adddf3>
 80101c6:	4602      	mov	r2, r0
 80101c8:	460b      	mov	r3, r1
 80101ca:	4630      	mov	r0, r6
 80101cc:	4639      	mov	r1, r7
 80101ce:	f7f0 fb3d 	bl	800084c <__aeabi_ddiv>
 80101d2:	f04f 0a01 	mov.w	sl, #1
 80101d6:	4604      	mov	r4, r0
 80101d8:	460d      	mov	r5, r1
 80101da:	e765      	b.n	80100a8 <atan+0xc8>
 80101dc:	4b47      	ldr	r3, [pc, #284]	@ (80102fc <atan+0x31c>)
 80101de:	429e      	cmp	r6, r3
 80101e0:	d21c      	bcs.n	801021c <atan+0x23c>
 80101e2:	4b47      	ldr	r3, [pc, #284]	@ (8010300 <atan+0x320>)
 80101e4:	2200      	movs	r2, #0
 80101e6:	4620      	mov	r0, r4
 80101e8:	4629      	mov	r1, r5
 80101ea:	f7f0 f84d 	bl	8000288 <__aeabi_dsub>
 80101ee:	4b44      	ldr	r3, [pc, #272]	@ (8010300 <atan+0x320>)
 80101f0:	4606      	mov	r6, r0
 80101f2:	460f      	mov	r7, r1
 80101f4:	2200      	movs	r2, #0
 80101f6:	4620      	mov	r0, r4
 80101f8:	4629      	mov	r1, r5
 80101fa:	f7f0 f9fd 	bl	80005f8 <__aeabi_dmul>
 80101fe:	4b3d      	ldr	r3, [pc, #244]	@ (80102f4 <atan+0x314>)
 8010200:	2200      	movs	r2, #0
 8010202:	f7f0 f843 	bl	800028c <__adddf3>
 8010206:	4602      	mov	r2, r0
 8010208:	460b      	mov	r3, r1
 801020a:	4630      	mov	r0, r6
 801020c:	4639      	mov	r1, r7
 801020e:	f7f0 fb1d 	bl	800084c <__aeabi_ddiv>
 8010212:	f04f 0a02 	mov.w	sl, #2
 8010216:	4604      	mov	r4, r0
 8010218:	460d      	mov	r5, r1
 801021a:	e745      	b.n	80100a8 <atan+0xc8>
 801021c:	4622      	mov	r2, r4
 801021e:	462b      	mov	r3, r5
 8010220:	4938      	ldr	r1, [pc, #224]	@ (8010304 <atan+0x324>)
 8010222:	2000      	movs	r0, #0
 8010224:	f7f0 fb12 	bl	800084c <__aeabi_ddiv>
 8010228:	f04f 0a03 	mov.w	sl, #3
 801022c:	4604      	mov	r4, r0
 801022e:	460d      	mov	r5, r1
 8010230:	e73a      	b.n	80100a8 <atan+0xc8>
 8010232:	4b35      	ldr	r3, [pc, #212]	@ (8010308 <atan+0x328>)
 8010234:	4e35      	ldr	r6, [pc, #212]	@ (801030c <atan+0x32c>)
 8010236:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801023a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023e:	f7f0 f823 	bl	8000288 <__aeabi_dsub>
 8010242:	4622      	mov	r2, r4
 8010244:	462b      	mov	r3, r5
 8010246:	f7f0 f81f 	bl	8000288 <__aeabi_dsub>
 801024a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801024e:	4602      	mov	r2, r0
 8010250:	460b      	mov	r3, r1
 8010252:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010256:	f7f0 f817 	bl	8000288 <__aeabi_dsub>
 801025a:	f1bb 0f00 	cmp.w	fp, #0
 801025e:	4604      	mov	r4, r0
 8010260:	460d      	mov	r5, r1
 8010262:	f6bf aedc 	bge.w	801001e <atan+0x3e>
 8010266:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801026a:	461d      	mov	r5, r3
 801026c:	e6d7      	b.n	801001e <atan+0x3e>
 801026e:	a51c      	add	r5, pc, #112	@ (adr r5, 80102e0 <atan+0x300>)
 8010270:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010274:	e6d3      	b.n	801001e <atan+0x3e>
 8010276:	bf00      	nop
 8010278:	54442d18 	.word	0x54442d18
 801027c:	3ff921fb 	.word	0x3ff921fb
 8010280:	8800759c 	.word	0x8800759c
 8010284:	7e37e43c 	.word	0x7e37e43c
 8010288:	e322da11 	.word	0xe322da11
 801028c:	3f90ad3a 	.word	0x3f90ad3a
 8010290:	24760deb 	.word	0x24760deb
 8010294:	3fa97b4b 	.word	0x3fa97b4b
 8010298:	a0d03d51 	.word	0xa0d03d51
 801029c:	3fb10d66 	.word	0x3fb10d66
 80102a0:	c54c206e 	.word	0xc54c206e
 80102a4:	3fb745cd 	.word	0x3fb745cd
 80102a8:	920083ff 	.word	0x920083ff
 80102ac:	3fc24924 	.word	0x3fc24924
 80102b0:	5555550d 	.word	0x5555550d
 80102b4:	3fd55555 	.word	0x3fd55555
 80102b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80102bc:	bfa2b444 	.word	0xbfa2b444
 80102c0:	52defd9a 	.word	0x52defd9a
 80102c4:	3fadde2d 	.word	0x3fadde2d
 80102c8:	af749a6d 	.word	0xaf749a6d
 80102cc:	3fb3b0f2 	.word	0x3fb3b0f2
 80102d0:	fe231671 	.word	0xfe231671
 80102d4:	3fbc71c6 	.word	0x3fbc71c6
 80102d8:	9998ebc4 	.word	0x9998ebc4
 80102dc:	3fc99999 	.word	0x3fc99999
 80102e0:	54442d18 	.word	0x54442d18
 80102e4:	bff921fb 	.word	0xbff921fb
 80102e8:	440fffff 	.word	0x440fffff
 80102ec:	7ff00000 	.word	0x7ff00000
 80102f0:	3fdbffff 	.word	0x3fdbffff
 80102f4:	3ff00000 	.word	0x3ff00000
 80102f8:	3ff2ffff 	.word	0x3ff2ffff
 80102fc:	40038000 	.word	0x40038000
 8010300:	3ff80000 	.word	0x3ff80000
 8010304:	bff00000 	.word	0xbff00000
 8010308:	080113a0 	.word	0x080113a0
 801030c:	080113c0 	.word	0x080113c0

08010310 <fabs>:
 8010310:	ec51 0b10 	vmov	r0, r1, d0
 8010314:	4602      	mov	r2, r0
 8010316:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801031a:	ec43 2b10 	vmov	d0, r2, r3
 801031e:	4770      	bx	lr

08010320 <_init>:
 8010320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010322:	bf00      	nop
 8010324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010326:	bc08      	pop	{r3}
 8010328:	469e      	mov	lr, r3
 801032a:	4770      	bx	lr

0801032c <_fini>:
 801032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801032e:	bf00      	nop
 8010330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010332:	bc08      	pop	{r3}
 8010334:	469e      	mov	lr, r3
 8010336:	4770      	bx	lr
