
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e39c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001040  0800e530  0800e530  0000f530  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f570  0800f570  000111f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f570  0800f570  00010570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f578  0800f578  000111f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f578  0800f578  00010578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f57c  0800f57c  0001057c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800f580  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000111f0  2**0
                  CONTENTS
 10 .bss          00005230  200001f0  200001f0  000111f0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005420  20005420  000111f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000111f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ddbe  00000000  00000000  00011220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fd1  00000000  00000000  0002efde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b88  00000000  00000000  00032fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000159e  00000000  00000000  00034b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000620a  00000000  00000000  000360d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fd69  00000000  00000000  0003c2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9dc5  00000000  00000000  0005c049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145e0e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000086f0  00000000  00000000  00145e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0014e544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e514 	.word	0x0800e514

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800e514 	.word	0x0800e514

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <Set_Motor_Direction>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t aRxBuffer[3]={0};

//SET both wheel direction
void Set_Motor_Direction(int foward_flag) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOA, AIN1_Pin,
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	bf14      	ite	ne
 8000f86:	2301      	movne	r3, #1
 8000f88:	2300      	moveq	r3, #0
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	2108      	movs	r1, #8
 8000f90:	4813      	ldr	r0, [pc, #76]	@ (8000fe0 <Set_Motor_Direction+0x68>)
 8000f92:	f002 fef9 	bl	8003d88 <HAL_GPIO_WritePin>
            ((foward_flag) ? GPIO_PIN_SET : GPIO_PIN_RESET));
    HAL_GPIO_WritePin(GPIOA, AIN2_Pin,
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	bf0c      	ite	eq
 8000f9c:	2301      	moveq	r3, #1
 8000f9e:	2300      	movne	r3, #0
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	2104      	movs	r1, #4
 8000fa6:	480e      	ldr	r0, [pc, #56]	@ (8000fe0 <Set_Motor_Direction+0x68>)
 8000fa8:	f002 feee 	bl	8003d88 <HAL_GPIO_WritePin>
            ((foward_flag) ? GPIO_PIN_RESET : GPIO_PIN_SET));
    HAL_GPIO_WritePin(GPIOA, BIN2_Pin,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	bf0c      	ite	eq
 8000fb2:	2301      	moveq	r3, #1
 8000fb4:	2300      	movne	r3, #0
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	461a      	mov	r2, r3
 8000fba:	2120      	movs	r1, #32
 8000fbc:	4808      	ldr	r0, [pc, #32]	@ (8000fe0 <Set_Motor_Direction+0x68>)
 8000fbe:	f002 fee3 	bl	8003d88 <HAL_GPIO_WritePin>
            ((foward_flag) ? GPIO_PIN_RESET : GPIO_PIN_SET));
    HAL_GPIO_WritePin(GPIOA, BIN1_Pin,
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	bf14      	ite	ne
 8000fc8:	2301      	movne	r3, #1
 8000fca:	2300      	moveq	r3, #0
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	461a      	mov	r2, r3
 8000fd0:	2110      	movs	r1, #16
 8000fd2:	4803      	ldr	r0, [pc, #12]	@ (8000fe0 <Set_Motor_Direction+0x68>)
 8000fd4:	f002 fed8 	bl	8003d88 <HAL_GPIO_WritePin>
            ((foward_flag) ? GPIO_PIN_SET : GPIO_PIN_RESET));
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40020000 	.word	0x40020000

08000fe4 <delay_us>:
void delay_us(uint16_t us)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6,0);
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <delay_us+0x30>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6)<us);
 8000ff6:	bf00      	nop
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <delay_us+0x30>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	429a      	cmp	r2, r3
 8001002:	d3f9      	bcc.n	8000ff8 <delay_us+0x14>

}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000434 	.word	0x20000434

08001018 <high_pass_filter>:
float high_pass_filter(float raw_gyro, float alpha)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001022:	edc7 0a00 	vstr	s1, [r7]
//	if(raw_gyro<0.15&&raw_gyro>0)
//	{
//		//last_raw=raw_gyro;
//	}
//	else{
		filtered_gyro = alpha *(filtered_gyro +raw_gyro-last_raw);
 8001026:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <high_pass_filter+0x50>)
 8001028:	ed93 7a00 	vldr	s14, [r3]
 800102c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001030:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001034:	4b0d      	ldr	r3, [pc, #52]	@ (800106c <high_pass_filter+0x54>)
 8001036:	edd3 7a00 	vldr	s15, [r3]
 800103a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800103e:	edd7 7a00 	vldr	s15, [r7]
 8001042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001046:	4b08      	ldr	r3, [pc, #32]	@ (8001068 <high_pass_filter+0x50>)
 8001048:	edc3 7a00 	vstr	s15, [r3]
	    last_raw=raw_gyro;
 800104c:	4a07      	ldr	r2, [pc, #28]	@ (800106c <high_pass_filter+0x54>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
//	}


    return filtered_gyro;
 8001052:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <high_pass_filter+0x50>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	ee07 3a90 	vmov	s15, r3
}
 800105a:	eeb0 0a67 	vmov.f32	s0, s15
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	2000020c 	.word	0x2000020c
 800106c:	20000210 	.word	0x20000210

08001070 <set_servo_angle>:
    	servo_pwm = MAX_SERVO;
    }
    htim1.Instance->CCR4 = servo_pwm;
}
void set_servo_angle(uint8_t value)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
    if (value > 180) value = 180;
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	2bb4      	cmp	r3, #180	@ 0xb4
 800107e:	d901      	bls.n	8001084 <set_servo_angle+0x14>
 8001080:	23b4      	movs	r3, #180	@ 0xb4
 8001082:	71fb      	strb	r3, [r7, #7]
    if (value < 0) value = 0;

	 servo_pwm = 240 - ((value * (240 - 60)) / 180);
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800108a:	4a08      	ldr	r2, [pc, #32]	@ (80010ac <set_servo_angle+0x3c>)
 800108c:	6013      	str	r3, [r2, #0]
    if(servo_pwm > MAX_SERVO)
    {
    	servo_pwm = MAX_SERVO;

    }*/
	 angle=value;
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	4a07      	ldr	r2, [pc, #28]	@ (80010b0 <set_servo_angle+0x40>)
 8001092:	6013      	str	r3, [r2, #0]
    htim1.Instance->CCR4 = servo_pwm;
 8001094:	4b05      	ldr	r3, [pc, #20]	@ (80010ac <set_servo_angle+0x3c>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <set_servo_angle+0x44>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000008 	.word	0x20000008
 80010b0:	20000560 	.word	0x20000560
 80010b4:	20000314 	.word	0x20000314

080010b8 <PID_Control>:
float previous_error_R = 0.0f;
float integral_L = 0.0f;
float integral_R = 0.0f;


void PID_Control(float target_RPM_R ,float target_RPM_L) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08c      	sub	sp, #48	@ 0x30
 80010bc:	af00      	add	r7, sp, #0
 80010be:	ed87 0a01 	vstr	s0, [r7, #4]
 80010c2:	edc7 0a00 	vstr	s1, [r7]
    float error_L = target_RPM_L - RPM_L;  // Left motor speed error
 80010c6:	6838      	ldr	r0, [r7, #0]
 80010c8:	f7ff fa3e 	bl	8000548 <__aeabi_f2d>
 80010cc:	4b73      	ldr	r3, [pc, #460]	@ (800129c <PID_Control+0x1e4>)
 80010ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d2:	f7ff f8d9 	bl	8000288 <__aeabi_dsub>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fd83 	bl	8000be8 <__aeabi_d2f>
 80010e2:	4603      	mov	r3, r0
 80010e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float error_R = target_RPM_R - RPM_R;  // Right motor speed error
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff fa2e 	bl	8000548 <__aeabi_f2d>
 80010ec:	4b6c      	ldr	r3, [pc, #432]	@ (80012a0 <PID_Control+0x1e8>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff f8c9 	bl	8000288 <__aeabi_dsub>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f7ff fd73 	bl	8000be8 <__aeabi_d2f>
 8001102:	4603      	mov	r3, r0
 8001104:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Proportional term (current error)
    float P_L = Kp * error_L;
 8001106:	4b67      	ldr	r3, [pc, #412]	@ (80012a4 <PID_Control+0x1ec>)
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001114:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float P_R = Kp * error_R;
 8001118:	4b62      	ldr	r3, [pc, #392]	@ (80012a4 <PID_Control+0x1ec>)
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001126:	edc7 7a08 	vstr	s15, [r7, #32]

    // Integral term (sum of past errors)
    integral_L += error_L;
 800112a:	4b5f      	ldr	r3, [pc, #380]	@ (80012a8 <PID_Control+0x1f0>)
 800112c:	ed93 7a00 	vldr	s14, [r3]
 8001130:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001138:	4b5b      	ldr	r3, [pc, #364]	@ (80012a8 <PID_Control+0x1f0>)
 800113a:	edc3 7a00 	vstr	s15, [r3]
    integral_R += error_R;
 800113e:	4b5b      	ldr	r3, [pc, #364]	@ (80012ac <PID_Control+0x1f4>)
 8001140:	ed93 7a00 	vldr	s14, [r3]
 8001144:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800114c:	4b57      	ldr	r3, [pc, #348]	@ (80012ac <PID_Control+0x1f4>)
 800114e:	edc3 7a00 	vstr	s15, [r3]
    float I_L = Ki * integral_L;
 8001152:	4b57      	ldr	r3, [pc, #348]	@ (80012b0 <PID_Control+0x1f8>)
 8001154:	ed93 7a00 	vldr	s14, [r3]
 8001158:	4b53      	ldr	r3, [pc, #332]	@ (80012a8 <PID_Control+0x1f0>)
 800115a:	edd3 7a00 	vldr	s15, [r3]
 800115e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001162:	edc7 7a07 	vstr	s15, [r7, #28]
    float I_R = Ki * integral_R;
 8001166:	4b52      	ldr	r3, [pc, #328]	@ (80012b0 <PID_Control+0x1f8>)
 8001168:	ed93 7a00 	vldr	s14, [r3]
 800116c:	4b4f      	ldr	r3, [pc, #316]	@ (80012ac <PID_Control+0x1f4>)
 800116e:	edd3 7a00 	vldr	s15, [r3]
 8001172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001176:	edc7 7a06 	vstr	s15, [r7, #24]

    // Derivative term (change in error)
    float D_L = Kd * (error_L - previous_error_L);
 800117a:	4b4e      	ldr	r3, [pc, #312]	@ (80012b4 <PID_Control+0x1fc>)
 800117c:	edd3 7a00 	vldr	s15, [r3]
 8001180:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001184:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001188:	4b4b      	ldr	r3, [pc, #300]	@ (80012b8 <PID_Control+0x200>)
 800118a:	edd3 7a00 	vldr	s15, [r3]
 800118e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001192:	edc7 7a05 	vstr	s15, [r7, #20]
    float D_R = Kd * (error_R - previous_error_R);
 8001196:	4b49      	ldr	r3, [pc, #292]	@ (80012bc <PID_Control+0x204>)
 8001198:	edd3 7a00 	vldr	s15, [r3]
 800119c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80011a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011a4:	4b44      	ldr	r3, [pc, #272]	@ (80012b8 <PID_Control+0x200>)
 80011a6:	edd3 7a00 	vldr	s15, [r3]
 80011aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ae:	edc7 7a04 	vstr	s15, [r7, #16]

    // Compute the PID output
    float PID_output_L = P_L + I_L + D_L;
 80011b2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80011b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80011ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011be:	ed97 7a05 	vldr	s14, [r7, #20]
 80011c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c6:	edc7 7a03 	vstr	s15, [r7, #12]
    float PID_output_R = P_R + I_R + D_R;
 80011ca:	ed97 7a08 	vldr	s14, [r7, #32]
 80011ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80011d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80011da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011de:	edc7 7a02 	vstr	s15, [r7, #8]

    // Adjust PWM based on PID output (clamping to a valid range)
    pwmValL = (int16_t)(pwmValL + PID_output_L);
 80011e2:	4b37      	ldr	r3, [pc, #220]	@ (80012c0 <PID_Control+0x208>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80011f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011fa:	ee17 3a90 	vmov	r3, s15
 80011fe:	b21b      	sxth	r3, r3
 8001200:	461a      	mov	r2, r3
 8001202:	4b2f      	ldr	r3, [pc, #188]	@ (80012c0 <PID_Control+0x208>)
 8001204:	601a      	str	r2, [r3, #0]
    pwmValR = (int16_t)(pwmValR + PID_output_R);
 8001206:	4b2f      	ldr	r3, [pc, #188]	@ (80012c4 <PID_Control+0x20c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	ee07 3a90 	vmov	s15, r3
 800120e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001212:	edd7 7a02 	vldr	s15, [r7, #8]
 8001216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800121a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800121e:	ee17 3a90 	vmov	r3, s15
 8001222:	b21b      	sxth	r3, r3
 8001224:	461a      	mov	r2, r3
 8001226:	4b27      	ldr	r3, [pc, #156]	@ (80012c4 <PID_Control+0x20c>)
 8001228:	601a      	str	r2, [r3, #0]
    if (pwmValL > 4000) pwmValL = 4000;
 800122a:	4b25      	ldr	r3, [pc, #148]	@ (80012c0 <PID_Control+0x208>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001232:	dd03      	ble.n	800123c <PID_Control+0x184>
 8001234:	4b22      	ldr	r3, [pc, #136]	@ (80012c0 <PID_Control+0x208>)
 8001236:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800123a:	601a      	str	r2, [r3, #0]
    if (pwmValL < 2000) pwmValL = 2000;
 800123c:	4b20      	ldr	r3, [pc, #128]	@ (80012c0 <PID_Control+0x208>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001244:	da03      	bge.n	800124e <PID_Control+0x196>
 8001246:	4b1e      	ldr	r3, [pc, #120]	@ (80012c0 <PID_Control+0x208>)
 8001248:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800124c:	601a      	str	r2, [r3, #0]

    if (pwmValR > 4000) pwmValR = 4000;
 800124e:	4b1d      	ldr	r3, [pc, #116]	@ (80012c4 <PID_Control+0x20c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001256:	dd03      	ble.n	8001260 <PID_Control+0x1a8>
 8001258:	4b1a      	ldr	r3, [pc, #104]	@ (80012c4 <PID_Control+0x20c>)
 800125a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800125e:	601a      	str	r2, [r3, #0]
    if (pwmValR < 2000) pwmValR = 2000;
 8001260:	4b18      	ldr	r3, [pc, #96]	@ (80012c4 <PID_Control+0x20c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001268:	da03      	bge.n	8001272 <PID_Control+0x1ba>
 800126a:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <PID_Control+0x20c>)
 800126c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001270:	601a      	str	r2, [r3, #0]

    // Set the new PWM values
    __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValL);
 8001272:	4b13      	ldr	r3, [pc, #76]	@ (80012c0 <PID_Control+0x208>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <PID_Control+0x210>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmValR);
 800127c:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <PID_Control+0x20c>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <PID_Control+0x210>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	639a      	str	r2, [r3, #56]	@ 0x38

    // Update previous errors for the next cycle
    previous_error_L = error_L;
 8001286:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <PID_Control+0x1fc>)
 8001288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800128a:	6013      	str	r3, [r2, #0]
    previous_error_R = error_R;
 800128c:	4a0b      	ldr	r2, [pc, #44]	@ (80012bc <PID_Control+0x204>)
 800128e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001290:	6013      	str	r3, [r2, #0]
}
 8001292:	bf00      	nop
 8001294:	3730      	adds	r7, #48	@ 0x30
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000538 	.word	0x20000538
 80012a0:	20000540 	.word	0x20000540
 80012a4:	2000000c 	.word	0x2000000c
 80012a8:	20000574 	.word	0x20000574
 80012ac:	20000578 	.word	0x20000578
 80012b0:	20000010 	.word	0x20000010
 80012b4:	2000056c 	.word	0x2000056c
 80012b8:	20000014 	.word	0x20000014
 80012bc:	20000570 	.word	0x20000570
 80012c0:	20000554 	.word	0x20000554
 80012c4:	20000558 	.word	0x20000558
 80012c8:	2000047c 	.word	0x2000047c

080012cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d0:	f001 fd6c 	bl	8002dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d4:	f000 f8a4 	bl	8001420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d8:	f000 fc92 	bl	8001c00 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80012dc:	f000 fc66 	bl	8001bac <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80012e0:	f000 fac0 	bl	8001864 <MX_TIM3_Init>
  MX_TIM6_Init();
 80012e4:	f000 fb82 	bl	80019ec <MX_TIM6_Init>
  MX_TIM1_Init();
 80012e8:	f000 f9ca 	bl	8001680 <MX_TIM1_Init>
  MX_TIM8_Init();
 80012ec:	f000 fbb4 	bl	8001a58 <MX_TIM8_Init>
  MX_I2C1_Init();
 80012f0:	f000 f998 	bl	8001624 <MX_I2C1_Init>
  MX_TIM2_Init();
 80012f4:	f000 fa62 	bl	80017bc <MX_TIM2_Init>
  MX_TIM4_Init();
 80012f8:	f000 fb08 	bl	800190c <MX_TIM4_Init>
  MX_ADC1_Init();
 80012fc:	f000 f8ee 	bl	80014dc <MX_ADC1_Init>
  MX_ADC2_Init();
 8001300:	f000 f93e 	bl	8001580 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8001304:	f00a fa1e 	bl	800b744 <OLED_Init>
  ICM20948_init(&hi2c1,0,GYRO_SENS,ACCEL_SENS);
 8001308:	2300      	movs	r3, #0
 800130a:	2203      	movs	r2, #3
 800130c:	2100      	movs	r1, #0
 800130e:	482a      	ldr	r0, [pc, #168]	@ (80013b8 <main+0xec>)
 8001310:	f007 f873 	bl	80083fa <ICM20948_init>

  HAL_Delay(200);
 8001314:	20c8      	movs	r0, #200	@ 0xc8
 8001316:	f001 fdbb 	bl	8002e90 <HAL_Delay>
  ICM20948_CalibrateGyro(&hi2c1,GYRO_SENS, 250);
 800131a:	22fa      	movs	r2, #250	@ 0xfa
 800131c:	2103      	movs	r1, #3
 800131e:	4826      	ldr	r0, [pc, #152]	@ (80013b8 <main+0xec>)
 8001320:	f007 fa0a 	bl	8008738 <ICM20948_CalibrateGyro>

  HAL_TIM_Base_Start(&htim6);
 8001324:	4825      	ldr	r0, [pc, #148]	@ (80013bc <main+0xf0>)
 8001326:	f004 fa57 	bl	80057d8 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);//Timer for ultra sonic
 800132a:	2100      	movs	r1, #0
 800132c:	4824      	ldr	r0, [pc, #144]	@ (80013c0 <main+0xf4>)
 800132e:	f004 fc37 	bl	8005ba0 <HAL_TIM_IC_Start_IT>
 HAL_UART_Receive_IT(&huart3,(uint8_t *)aRxBuffer,4);//Receive data from uart
 8001332:	2204      	movs	r2, #4
 8001334:	4923      	ldr	r1, [pc, #140]	@ (80013c4 <main+0xf8>)
 8001336:	4824      	ldr	r0, [pc, #144]	@ (80013c8 <main+0xfc>)
 8001338:	f006 f813 	bl	8007362 <HAL_UART_Receive_IT>
  functionCheck();
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800133c:	f007 fad8 	bl	80088f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001340:	4a22      	ldr	r2, [pc, #136]	@ (80013cc <main+0x100>)
 8001342:	2100      	movs	r1, #0
 8001344:	4822      	ldr	r0, [pc, #136]	@ (80013d0 <main+0x104>)
 8001346:	f007 fb1d 	bl	8008984 <osThreadNew>
 800134a:	4603      	mov	r3, r0
 800134c:	4a21      	ldr	r2, [pc, #132]	@ (80013d4 <main+0x108>)
 800134e:	6013      	str	r3, [r2, #0]

  /* creation of oledTask */
  oledTaskHandle = osThreadNew(StartOledTask, NULL, &oledTask_attributes);
 8001350:	4a21      	ldr	r2, [pc, #132]	@ (80013d8 <main+0x10c>)
 8001352:	2100      	movs	r1, #0
 8001354:	4821      	ldr	r0, [pc, #132]	@ (80013dc <main+0x110>)
 8001356:	f007 fb15 	bl	8008984 <osThreadNew>
 800135a:	4603      	mov	r3, r0
 800135c:	4a20      	ldr	r2, [pc, #128]	@ (80013e0 <main+0x114>)
 800135e:	6013      	str	r3, [r2, #0]

  /* creation of ultraSonicTask */
  ultraSonicTaskHandle = osThreadNew(StartUltraSonic, NULL, &ultraSonicTask_attributes);
 8001360:	4a20      	ldr	r2, [pc, #128]	@ (80013e4 <main+0x118>)
 8001362:	2100      	movs	r1, #0
 8001364:	4820      	ldr	r0, [pc, #128]	@ (80013e8 <main+0x11c>)
 8001366:	f007 fb0d 	bl	8008984 <osThreadNew>
 800136a:	4603      	mov	r3, r0
 800136c:	4a1f      	ldr	r2, [pc, #124]	@ (80013ec <main+0x120>)
 800136e:	6013      	str	r3, [r2, #0]

  /* creation of servoTask */
  servoTaskHandle = osThreadNew(StartServoTask, NULL, &servoTask_attributes);
 8001370:	4a1f      	ldr	r2, [pc, #124]	@ (80013f0 <main+0x124>)
 8001372:	2100      	movs	r1, #0
 8001374:	481f      	ldr	r0, [pc, #124]	@ (80013f4 <main+0x128>)
 8001376:	f007 fb05 	bl	8008984 <osThreadNew>
 800137a:	4603      	mov	r3, r0
 800137c:	4a1e      	ldr	r2, [pc, #120]	@ (80013f8 <main+0x12c>)
 800137e:	6013      	str	r3, [r2, #0]

  /* creation of motorTask */
  motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 8001380:	4a1e      	ldr	r2, [pc, #120]	@ (80013fc <main+0x130>)
 8001382:	2100      	movs	r1, #0
 8001384:	481e      	ldr	r0, [pc, #120]	@ (8001400 <main+0x134>)
 8001386:	f007 fafd 	bl	8008984 <osThreadNew>
 800138a:	4603      	mov	r3, r0
 800138c:	4a1d      	ldr	r2, [pc, #116]	@ (8001404 <main+0x138>)
 800138e:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 8001390:	4a1d      	ldr	r2, [pc, #116]	@ (8001408 <main+0x13c>)
 8001392:	2100      	movs	r1, #0
 8001394:	481d      	ldr	r0, [pc, #116]	@ (800140c <main+0x140>)
 8001396:	f007 faf5 	bl	8008984 <osThreadNew>
 800139a:	4603      	mov	r3, r0
 800139c:	4a1c      	ldr	r2, [pc, #112]	@ (8001410 <main+0x144>)
 800139e:	6013      	str	r3, [r2, #0]

  /* creation of IRTask */
  IRTaskHandle = osThreadNew(Start_IRTask, NULL, &IRTask_attributes);
 80013a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001414 <main+0x148>)
 80013a2:	2100      	movs	r1, #0
 80013a4:	481c      	ldr	r0, [pc, #112]	@ (8001418 <main+0x14c>)
 80013a6:	f007 faed 	bl	8008984 <osThreadNew>
 80013aa:	4603      	mov	r3, r0
 80013ac:	4a1b      	ldr	r2, [pc, #108]	@ (800141c <main+0x150>)
 80013ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013b0:	f007 fac2 	bl	8008938 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <main+0xe8>
 80013b8:	200002c0 	.word	0x200002c0
 80013bc:	20000434 	.word	0x20000434
 80013c0:	200003ec 	.word	0x200003ec
 80013c4:	20000564 	.word	0x20000564
 80013c8:	200004c4 	.word	0x200004c4
 80013cc:	0800e684 	.word	0x0800e684
 80013d0:	08002021 	.word	0x08002021
 80013d4:	2000050c 	.word	0x2000050c
 80013d8:	0800e6a8 	.word	0x0800e6a8
 80013dc:	08002041 	.word	0x08002041
 80013e0:	20000510 	.word	0x20000510
 80013e4:	0800e6cc 	.word	0x0800e6cc
 80013e8:	08002109 	.word	0x08002109
 80013ec:	20000514 	.word	0x20000514
 80013f0:	0800e6f0 	.word	0x0800e6f0
 80013f4:	08002151 	.word	0x08002151
 80013f8:	20000518 	.word	0x20000518
 80013fc:	0800e714 	.word	0x0800e714
 8001400:	080022b5 	.word	0x080022b5
 8001404:	2000051c 	.word	0x2000051c
 8001408:	0800e738 	.word	0x0800e738
 800140c:	08002361 	.word	0x08002361
 8001410:	20000520 	.word	0x20000520
 8001414:	0800e75c 	.word	0x0800e75c
 8001418:	0800258d 	.word	0x0800258d
 800141c:	20000524 	.word	0x20000524

08001420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b094      	sub	sp, #80	@ 0x50
 8001424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001426:	f107 0320 	add.w	r3, r7, #32
 800142a:	2230      	movs	r2, #48	@ 0x30
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f00a ffa5 	bl	800c37e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	4b22      	ldr	r3, [pc, #136]	@ (80014d4 <SystemClock_Config+0xb4>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	4a21      	ldr	r2, [pc, #132]	@ (80014d4 <SystemClock_Config+0xb4>)
 800144e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001452:	6413      	str	r3, [r2, #64]	@ 0x40
 8001454:	4b1f      	ldr	r3, [pc, #124]	@ (80014d4 <SystemClock_Config+0xb4>)
 8001456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001458:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001460:	2300      	movs	r3, #0
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	4b1c      	ldr	r3, [pc, #112]	@ (80014d8 <SystemClock_Config+0xb8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a1b      	ldr	r2, [pc, #108]	@ (80014d8 <SystemClock_Config+0xb8>)
 800146a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <SystemClock_Config+0xb8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800147c:	2302      	movs	r3, #2
 800147e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001480:	2301      	movs	r3, #1
 8001482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001484:	2310      	movs	r3, #16
 8001486:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001488:	2300      	movs	r3, #0
 800148a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800148c:	f107 0320 	add.w	r3, r7, #32
 8001490:	4618      	mov	r0, r3
 8001492:	f003 fcf9 	bl	8004e88 <HAL_RCC_OscConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800149c:	f001 f883 	bl	80025a6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a0:	230f      	movs	r3, #15
 80014a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f003 ff5c 	bl	8005378 <HAL_RCC_ClockConfig>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80014c6:	f001 f86e 	bl	80025a6 <Error_Handler>
  }
}
 80014ca:	bf00      	nop
 80014cc:	3750      	adds	r7, #80	@ 0x50
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40007000 	.word	0x40007000

080014dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014e2:	463b      	mov	r3, r7
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014ee:	4b21      	ldr	r3, [pc, #132]	@ (8001574 <MX_ADC1_Init+0x98>)
 80014f0:	4a21      	ldr	r2, [pc, #132]	@ (8001578 <MX_ADC1_Init+0x9c>)
 80014f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80014f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001574 <MX_ADC1_Init+0x98>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001574 <MX_ADC1_Init+0x98>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001500:	4b1c      	ldr	r3, [pc, #112]	@ (8001574 <MX_ADC1_Init+0x98>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001506:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <MX_ADC1_Init+0x98>)
 8001508:	2200      	movs	r2, #0
 800150a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800150c:	4b19      	ldr	r3, [pc, #100]	@ (8001574 <MX_ADC1_Init+0x98>)
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001514:	4b17      	ldr	r3, [pc, #92]	@ (8001574 <MX_ADC1_Init+0x98>)
 8001516:	2200      	movs	r2, #0
 8001518:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800151a:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <MX_ADC1_Init+0x98>)
 800151c:	4a17      	ldr	r2, [pc, #92]	@ (800157c <MX_ADC1_Init+0xa0>)
 800151e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001520:	4b14      	ldr	r3, [pc, #80]	@ (8001574 <MX_ADC1_Init+0x98>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001526:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <MX_ADC1_Init+0x98>)
 8001528:	2201      	movs	r2, #1
 800152a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800152c:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <MX_ADC1_Init+0x98>)
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001534:	4b0f      	ldr	r3, [pc, #60]	@ (8001574 <MX_ADC1_Init+0x98>)
 8001536:	2201      	movs	r2, #1
 8001538:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800153a:	480e      	ldr	r0, [pc, #56]	@ (8001574 <MX_ADC1_Init+0x98>)
 800153c:	f001 fccc 	bl	8002ed8 <HAL_ADC_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001546:	f001 f82e 	bl	80025a6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800154a:	2300      	movs	r3, #0
 800154c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800154e:	2301      	movs	r3, #1
 8001550:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001556:	463b      	mov	r3, r7
 8001558:	4619      	mov	r1, r3
 800155a:	4806      	ldr	r0, [pc, #24]	@ (8001574 <MX_ADC1_Init+0x98>)
 800155c:	f001 fe9e 	bl	800329c <HAL_ADC_ConfigChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001566:	f001 f81e 	bl	80025a6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000230 	.word	0x20000230
 8001578:	40012000 	.word	0x40012000
 800157c:	0f000001 	.word	0x0f000001

08001580 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001586:	463b      	mov	r3, r7
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001592:	4b21      	ldr	r3, [pc, #132]	@ (8001618 <MX_ADC2_Init+0x98>)
 8001594:	4a21      	ldr	r2, [pc, #132]	@ (800161c <MX_ADC2_Init+0x9c>)
 8001596:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001598:	4b1f      	ldr	r3, [pc, #124]	@ (8001618 <MX_ADC2_Init+0x98>)
 800159a:	2200      	movs	r2, #0
 800159c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800159e:	4b1e      	ldr	r3, [pc, #120]	@ (8001618 <MX_ADC2_Init+0x98>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80015a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001618 <MX_ADC2_Init+0x98>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80015aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <MX_ADC2_Init+0x98>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80015b0:	4b19      	ldr	r3, [pc, #100]	@ (8001618 <MX_ADC2_Init+0x98>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015b8:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <MX_ADC2_Init+0x98>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015be:	4b16      	ldr	r3, [pc, #88]	@ (8001618 <MX_ADC2_Init+0x98>)
 80015c0:	4a17      	ldr	r2, [pc, #92]	@ (8001620 <MX_ADC2_Init+0xa0>)
 80015c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015c4:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <MX_ADC2_Init+0x98>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80015ca:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <MX_ADC2_Init+0x98>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80015d0:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <MX_ADC2_Init+0x98>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001618 <MX_ADC2_Init+0x98>)
 80015da:	2201      	movs	r2, #1
 80015dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80015de:	480e      	ldr	r0, [pc, #56]	@ (8001618 <MX_ADC2_Init+0x98>)
 80015e0:	f001 fc7a 	bl	8002ed8 <HAL_ADC_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80015ea:	f000 ffdc 	bl	80025a6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015ee:	2301      	movs	r3, #1
 80015f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015f2:	2301      	movs	r3, #1
 80015f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015fa:	463b      	mov	r3, r7
 80015fc:	4619      	mov	r1, r3
 80015fe:	4806      	ldr	r0, [pc, #24]	@ (8001618 <MX_ADC2_Init+0x98>)
 8001600:	f001 fe4c 	bl	800329c <HAL_ADC_ConfigChannel>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800160a:	f000 ffcc 	bl	80025a6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000278 	.word	0x20000278
 800161c:	40012100 	.word	0x40012100
 8001620:	0f000001 	.word	0x0f000001

08001624 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001628:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <MX_I2C1_Init+0x50>)
 800162a:	4a13      	ldr	r2, [pc, #76]	@ (8001678 <MX_I2C1_Init+0x54>)
 800162c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800162e:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <MX_I2C1_Init+0x50>)
 8001630:	4a12      	ldr	r2, [pc, #72]	@ (800167c <MX_I2C1_Init+0x58>)
 8001632:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001634:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <MX_I2C1_Init+0x50>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800163a:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <MX_I2C1_Init+0x50>)
 800163c:	2200      	movs	r2, #0
 800163e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001640:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <MX_I2C1_Init+0x50>)
 8001642:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001646:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001648:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <MX_I2C1_Init+0x50>)
 800164a:	2200      	movs	r2, #0
 800164c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800164e:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <MX_I2C1_Init+0x50>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001654:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <MX_I2C1_Init+0x50>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800165a:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <MX_I2C1_Init+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001660:	4804      	ldr	r0, [pc, #16]	@ (8001674 <MX_I2C1_Init+0x50>)
 8001662:	f002 fbc5 	bl	8003df0 <HAL_I2C_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800166c:	f000 ff9b 	bl	80025a6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200002c0 	.word	0x200002c0
 8001678:	40005400 	.word	0x40005400
 800167c:	000186a0 	.word	0x000186a0

08001680 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b096      	sub	sp, #88	@ 0x58
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001686:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001694:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800169e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]
 80016ae:	615a      	str	r2, [r3, #20]
 80016b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2220      	movs	r2, #32
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f00a fe60 	bl	800c37e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016be:	4b3d      	ldr	r3, [pc, #244]	@ (80017b4 <MX_TIM1_Init+0x134>)
 80016c0:	4a3d      	ldr	r2, [pc, #244]	@ (80017b8 <MX_TIM1_Init+0x138>)
 80016c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80016c4:	4b3b      	ldr	r3, [pc, #236]	@ (80017b4 <MX_TIM1_Init+0x134>)
 80016c6:	22a0      	movs	r2, #160	@ 0xa0
 80016c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ca:	4b3a      	ldr	r3, [pc, #232]	@ (80017b4 <MX_TIM1_Init+0x134>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016d0:	4b38      	ldr	r3, [pc, #224]	@ (80017b4 <MX_TIM1_Init+0x134>)
 80016d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d8:	4b36      	ldr	r3, [pc, #216]	@ (80017b4 <MX_TIM1_Init+0x134>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016de:	4b35      	ldr	r3, [pc, #212]	@ (80017b4 <MX_TIM1_Init+0x134>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e4:	4b33      	ldr	r3, [pc, #204]	@ (80017b4 <MX_TIM1_Init+0x134>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016ea:	4832      	ldr	r0, [pc, #200]	@ (80017b4 <MX_TIM1_Init+0x134>)
 80016ec:	f004 f824 	bl	8005738 <HAL_TIM_Base_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016f6:	f000 ff56 	bl	80025a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001700:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001704:	4619      	mov	r1, r3
 8001706:	482b      	ldr	r0, [pc, #172]	@ (80017b4 <MX_TIM1_Init+0x134>)
 8001708:	f004 fef4 	bl	80064f4 <HAL_TIM_ConfigClockSource>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001712:	f000 ff48 	bl	80025a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001716:	4827      	ldr	r0, [pc, #156]	@ (80017b4 <MX_TIM1_Init+0x134>)
 8001718:	f004 f8c6 	bl	80058a8 <HAL_TIM_PWM_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001722:	f000 ff40 	bl	80025a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800172e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001732:	4619      	mov	r1, r3
 8001734:	481f      	ldr	r0, [pc, #124]	@ (80017b4 <MX_TIM1_Init+0x134>)
 8001736:	f005 fc57 	bl	8006fe8 <HAL_TIMEx_MasterConfigSynchronization>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001740:	f000 ff31 	bl	80025a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001744:	2360      	movs	r3, #96	@ 0x60
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800174c:	2300      	movs	r3, #0
 800174e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001754:	2300      	movs	r3, #0
 8001756:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001758:	2300      	movs	r3, #0
 800175a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800175c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001760:	220c      	movs	r2, #12
 8001762:	4619      	mov	r1, r3
 8001764:	4813      	ldr	r0, [pc, #76]	@ (80017b4 <MX_TIM1_Init+0x134>)
 8001766:	f004 fe03 	bl	8006370 <HAL_TIM_PWM_ConfigChannel>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001770:	f000 ff19 	bl	80025a6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001788:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800178c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	4619      	mov	r1, r3
 8001796:	4807      	ldr	r0, [pc, #28]	@ (80017b4 <MX_TIM1_Init+0x134>)
 8001798:	f005 fca2 	bl	80070e0 <HAL_TIMEx_ConfigBreakDeadTime>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80017a2:	f000 ff00 	bl	80025a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017a6:	4803      	ldr	r0, [pc, #12]	@ (80017b4 <MX_TIM1_Init+0x134>)
 80017a8:	f001 f938 	bl	8002a1c <HAL_TIM_MspPostInit>

}
 80017ac:	bf00      	nop
 80017ae:	3758      	adds	r7, #88	@ 0x58
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000314 	.word	0x20000314
 80017b8:	40010000 	.word	0x40010000

080017bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08c      	sub	sp, #48	@ 0x30
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	2224      	movs	r2, #36	@ 0x24
 80017c8:	2100      	movs	r1, #0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f00a fdd7 	bl	800c37e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017d8:	4b21      	ldr	r3, [pc, #132]	@ (8001860 <MX_TIM2_Init+0xa4>)
 80017da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001860 <MX_TIM2_Init+0xa4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001860 <MX_TIM2_Init+0xa4>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80017ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001860 <MX_TIM2_Init+0xa4>)
 80017ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001860 <MX_TIM2_Init+0xa4>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fa:	4b19      	ldr	r3, [pc, #100]	@ (8001860 <MX_TIM2_Init+0xa4>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001800:	2303      	movs	r3, #3
 8001802:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001804:	2300      	movs	r3, #0
 8001806:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001808:	2301      	movs	r3, #1
 800180a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001810:	230a      	movs	r3, #10
 8001812:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001818:	2301      	movs	r3, #1
 800181a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800181c:	2300      	movs	r3, #0
 800181e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8001820:	230a      	movs	r3, #10
 8001822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	4619      	mov	r1, r3
 800182a:	480d      	ldr	r0, [pc, #52]	@ (8001860 <MX_TIM2_Init+0xa4>)
 800182c:	f004 fae0 	bl	8005df0 <HAL_TIM_Encoder_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001836:	f000 feb6 	bl	80025a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	4619      	mov	r1, r3
 8001846:	4806      	ldr	r0, [pc, #24]	@ (8001860 <MX_TIM2_Init+0xa4>)
 8001848:	f005 fbce 	bl	8006fe8 <HAL_TIMEx_MasterConfigSynchronization>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001852:	f000 fea8 	bl	80025a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	3730      	adds	r7, #48	@ 0x30
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	2000035c 	.word	0x2000035c

08001864 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08c      	sub	sp, #48	@ 0x30
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800186a:	f107 030c 	add.w	r3, r7, #12
 800186e:	2224      	movs	r2, #36	@ 0x24
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f00a fd83 	bl	800c37e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001880:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <MX_TIM3_Init+0xa0>)
 8001882:	4a21      	ldr	r2, [pc, #132]	@ (8001908 <MX_TIM3_Init+0xa4>)
 8001884:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001886:	4b1f      	ldr	r3, [pc, #124]	@ (8001904 <MX_TIM3_Init+0xa0>)
 8001888:	2200      	movs	r2, #0
 800188a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188c:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <MX_TIM3_Init+0xa0>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001892:	4b1c      	ldr	r3, [pc, #112]	@ (8001904 <MX_TIM3_Init+0xa0>)
 8001894:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001898:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189a:	4b1a      	ldr	r3, [pc, #104]	@ (8001904 <MX_TIM3_Init+0xa0>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a0:	4b18      	ldr	r3, [pc, #96]	@ (8001904 <MX_TIM3_Init+0xa0>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018a6:	2303      	movs	r3, #3
 80018a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018ae:	2301      	movs	r3, #1
 80018b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80018b6:	230a      	movs	r3, #10
 80018b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018ba:	2300      	movs	r3, #0
 80018bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018be:	2301      	movs	r3, #1
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018c2:	2300      	movs	r3, #0
 80018c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80018c6:	230a      	movs	r3, #10
 80018c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80018ca:	f107 030c 	add.w	r3, r7, #12
 80018ce:	4619      	mov	r1, r3
 80018d0:	480c      	ldr	r0, [pc, #48]	@ (8001904 <MX_TIM3_Init+0xa0>)
 80018d2:	f004 fa8d 	bl	8005df0 <HAL_TIM_Encoder_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80018dc:	f000 fe63 	bl	80025a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e0:	2300      	movs	r3, #0
 80018e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	4619      	mov	r1, r3
 80018ec:	4805      	ldr	r0, [pc, #20]	@ (8001904 <MX_TIM3_Init+0xa0>)
 80018ee:	f005 fb7b 	bl	8006fe8 <HAL_TIMEx_MasterConfigSynchronization>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80018f8:	f000 fe55 	bl	80025a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018fc:	bf00      	nop
 80018fe:	3730      	adds	r7, #48	@ 0x30
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200003a4 	.word	0x200003a4
 8001908:	40000400 	.word	0x40000400

0800190c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	@ 0x28
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001912:	f107 0318 	add.w	r3, r7, #24
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800192a:	463b      	mov	r3, r7
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001936:	4b2b      	ldr	r3, [pc, #172]	@ (80019e4 <MX_TIM4_Init+0xd8>)
 8001938:	4a2b      	ldr	r2, [pc, #172]	@ (80019e8 <MX_TIM4_Init+0xdc>)
 800193a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 800193c:	4b29      	ldr	r3, [pc, #164]	@ (80019e4 <MX_TIM4_Init+0xd8>)
 800193e:	220f      	movs	r2, #15
 8001940:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001942:	4b28      	ldr	r3, [pc, #160]	@ (80019e4 <MX_TIM4_Init+0xd8>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001948:	4b26      	ldr	r3, [pc, #152]	@ (80019e4 <MX_TIM4_Init+0xd8>)
 800194a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800194e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001950:	4b24      	ldr	r3, [pc, #144]	@ (80019e4 <MX_TIM4_Init+0xd8>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001956:	4b23      	ldr	r3, [pc, #140]	@ (80019e4 <MX_TIM4_Init+0xd8>)
 8001958:	2200      	movs	r2, #0
 800195a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800195c:	4821      	ldr	r0, [pc, #132]	@ (80019e4 <MX_TIM4_Init+0xd8>)
 800195e:	f003 feeb 	bl	8005738 <HAL_TIM_Base_Init>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001968:	f000 fe1d 	bl	80025a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800196c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001970:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001972:	f107 0318 	add.w	r3, r7, #24
 8001976:	4619      	mov	r1, r3
 8001978:	481a      	ldr	r0, [pc, #104]	@ (80019e4 <MX_TIM4_Init+0xd8>)
 800197a:	f004 fdbb 	bl	80064f4 <HAL_TIM_ConfigClockSource>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001984:	f000 fe0f 	bl	80025a6 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001988:	4816      	ldr	r0, [pc, #88]	@ (80019e4 <MX_TIM4_Init+0xd8>)
 800198a:	f004 f8af 	bl	8005aec <HAL_TIM_IC_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001994:	f000 fe07 	bl	80025a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	4619      	mov	r1, r3
 80019a6:	480f      	ldr	r0, [pc, #60]	@ (80019e4 <MX_TIM4_Init+0xd8>)
 80019a8:	f005 fb1e 	bl	8006fe8 <HAL_TIMEx_MasterConfigSynchronization>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 80019b2:	f000 fdf8 	bl	80025a6 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80019b6:	230a      	movs	r3, #10
 80019b8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019ba:	2301      	movs	r3, #1
 80019bc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80019c6:	463b      	mov	r3, r7
 80019c8:	2200      	movs	r2, #0
 80019ca:	4619      	mov	r1, r3
 80019cc:	4805      	ldr	r0, [pc, #20]	@ (80019e4 <MX_TIM4_Init+0xd8>)
 80019ce:	f004 fc33 	bl	8006238 <HAL_TIM_IC_ConfigChannel>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 80019d8:	f000 fde5 	bl	80025a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019dc:	bf00      	nop
 80019de:	3728      	adds	r7, #40	@ 0x28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	200003ec 	.word	0x200003ec
 80019e8:	40000800 	.word	0x40000800

080019ec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f2:	463b      	mov	r3, r7
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80019fa:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <MX_TIM6_Init+0x64>)
 80019fc:	4a15      	ldr	r2, [pc, #84]	@ (8001a54 <MX_TIM6_Init+0x68>)
 80019fe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 8001a00:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <MX_TIM6_Init+0x64>)
 8001a02:	220f      	movs	r2, #15
 8001a04:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a06:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <MX_TIM6_Init+0x64>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001a0c:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <MX_TIM6_Init+0x64>)
 8001a0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a12:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a14:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <MX_TIM6_Init+0x64>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a1a:	480d      	ldr	r0, [pc, #52]	@ (8001a50 <MX_TIM6_Init+0x64>)
 8001a1c:	f003 fe8c 	bl	8005738 <HAL_TIM_Base_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001a26:	f000 fdbe 	bl	80025a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a32:	463b      	mov	r3, r7
 8001a34:	4619      	mov	r1, r3
 8001a36:	4806      	ldr	r0, [pc, #24]	@ (8001a50 <MX_TIM6_Init+0x64>)
 8001a38:	f005 fad6 	bl	8006fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001a42:	f000 fdb0 	bl	80025a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000434 	.word	0x20000434
 8001a54:	40001000 	.word	0x40001000

08001a58 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b096      	sub	sp, #88	@ 0x58
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a6c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	611a      	str	r2, [r3, #16]
 8001a86:	615a      	str	r2, [r3, #20]
 8001a88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	2220      	movs	r2, #32
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f00a fc74 	bl	800c37e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a96:	4b43      	ldr	r3, [pc, #268]	@ (8001ba4 <MX_TIM8_Init+0x14c>)
 8001a98:	4a43      	ldr	r2, [pc, #268]	@ (8001ba8 <MX_TIM8_Init+0x150>)
 8001a9a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a9c:	4b41      	ldr	r3, [pc, #260]	@ (8001ba4 <MX_TIM8_Init+0x14c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa2:	4b40      	ldr	r3, [pc, #256]	@ (8001ba4 <MX_TIM8_Init+0x14c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001aa8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ba4 <MX_TIM8_Init+0x14c>)
 8001aaa:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001aae:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab0:	4b3c      	ldr	r3, [pc, #240]	@ (8001ba4 <MX_TIM8_Init+0x14c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba4 <MX_TIM8_Init+0x14c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001abc:	4b39      	ldr	r3, [pc, #228]	@ (8001ba4 <MX_TIM8_Init+0x14c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ac2:	4838      	ldr	r0, [pc, #224]	@ (8001ba4 <MX_TIM8_Init+0x14c>)
 8001ac4:	f003 fe38 	bl	8005738 <HAL_TIM_Base_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001ace:	f000 fd6a 	bl	80025a6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ad8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001adc:	4619      	mov	r1, r3
 8001ade:	4831      	ldr	r0, [pc, #196]	@ (8001ba4 <MX_TIM8_Init+0x14c>)
 8001ae0:	f004 fd08 	bl	80064f4 <HAL_TIM_ConfigClockSource>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001aea:	f000 fd5c 	bl	80025a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001aee:	482d      	ldr	r0, [pc, #180]	@ (8001ba4 <MX_TIM8_Init+0x14c>)
 8001af0:	f003 feda 	bl	80058a8 <HAL_TIM_PWM_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001afa:	f000 fd54 	bl	80025a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afe:	2300      	movs	r3, #0
 8001b00:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b06:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4825      	ldr	r0, [pc, #148]	@ (8001ba4 <MX_TIM8_Init+0x14c>)
 8001b0e:	f005 fa6b 	bl	8006fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001b18:	f000 fd45 	bl	80025a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b1c:	2360      	movs	r3, #96	@ 0x60
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b30:	2300      	movs	r3, #0
 8001b32:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b34:	2300      	movs	r3, #0
 8001b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4818      	ldr	r0, [pc, #96]	@ (8001ba4 <MX_TIM8_Init+0x14c>)
 8001b42:	f004 fc15 	bl	8006370 <HAL_TIM_PWM_ConfigChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001b4c:	f000 fd2b 	bl	80025a6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b54:	2204      	movs	r2, #4
 8001b56:	4619      	mov	r1, r3
 8001b58:	4812      	ldr	r0, [pc, #72]	@ (8001ba4 <MX_TIM8_Init+0x14c>)
 8001b5a:	f004 fc09 	bl	8006370 <HAL_TIM_PWM_ConfigChannel>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001b64:	f000 fd1f 	bl	80025a6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4806      	ldr	r0, [pc, #24]	@ (8001ba4 <MX_TIM8_Init+0x14c>)
 8001b8c:	f005 faa8 	bl	80070e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001b96:	f000 fd06 	bl	80025a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	3758      	adds	r7, #88	@ 0x58
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2000047c 	.word	0x2000047c
 8001ba8:	40010400 	.word	0x40010400

08001bac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001bb0:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <MX_USART3_UART_Init+0x4c>)
 8001bb2:	4a12      	ldr	r2, [pc, #72]	@ (8001bfc <MX_USART3_UART_Init+0x50>)
 8001bb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bb6:	4b10      	ldr	r3, [pc, #64]	@ (8001bf8 <MX_USART3_UART_Init+0x4c>)
 8001bb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf8 <MX_USART3_UART_Init+0x4c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <MX_USART3_UART_Init+0x4c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bca:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <MX_USART3_UART_Init+0x4c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bd0:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <MX_USART3_UART_Init+0x4c>)
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd6:	4b08      	ldr	r3, [pc, #32]	@ (8001bf8 <MX_USART3_UART_Init+0x4c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <MX_USART3_UART_Init+0x4c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001be2:	4805      	ldr	r0, [pc, #20]	@ (8001bf8 <MX_USART3_UART_Init+0x4c>)
 8001be4:	f005 fae2 	bl	80071ac <HAL_UART_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001bee:	f000 fcda 	bl	80025a6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200004c4 	.word	0x200004c4
 8001bfc:	40004800 	.word	0x40004800

08001c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	@ 0x28
 8001c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]
 8001c12:	60da      	str	r2, [r3, #12]
 8001c14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d14 <MX_GPIO_Init+0x114>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	4a3d      	ldr	r2, [pc, #244]	@ (8001d14 <MX_GPIO_Init+0x114>)
 8001c20:	f043 0310 	orr.w	r3, r3, #16
 8001c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c26:	4b3b      	ldr	r3, [pc, #236]	@ (8001d14 <MX_GPIO_Init+0x114>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4b37      	ldr	r3, [pc, #220]	@ (8001d14 <MX_GPIO_Init+0x114>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	4a36      	ldr	r2, [pc, #216]	@ (8001d14 <MX_GPIO_Init+0x114>)
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c42:	4b34      	ldr	r3, [pc, #208]	@ (8001d14 <MX_GPIO_Init+0x114>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	4b30      	ldr	r3, [pc, #192]	@ (8001d14 <MX_GPIO_Init+0x114>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	4a2f      	ldr	r2, [pc, #188]	@ (8001d14 <MX_GPIO_Init+0x114>)
 8001c58:	f043 0308 	orr.w	r3, r3, #8
 8001c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d14 <MX_GPIO_Init+0x114>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	4b29      	ldr	r3, [pc, #164]	@ (8001d14 <MX_GPIO_Init+0x114>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	4a28      	ldr	r2, [pc, #160]	@ (8001d14 <MX_GPIO_Init+0x114>)
 8001c74:	f043 0304 	orr.w	r3, r3, #4
 8001c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7a:	4b26      	ldr	r3, [pc, #152]	@ (8001d14 <MX_GPIO_Init+0x114>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	4b22      	ldr	r3, [pc, #136]	@ (8001d14 <MX_GPIO_Init+0x114>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	4a21      	ldr	r2, [pc, #132]	@ (8001d14 <MX_GPIO_Init+0x114>)
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c96:	4b1f      	ldr	r3, [pc, #124]	@ (8001d14 <MX_GPIO_Init+0x114>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8001ca8:	481b      	ldr	r0, [pc, #108]	@ (8001d18 <MX_GPIO_Init+0x118>)
 8001caa:	f002 f86d 	bl	8003d88 <HAL_GPIO_WritePin>
                          |TRIG_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001cae:	2200      	movs	r2, #0
 8001cb0:	213c      	movs	r1, #60	@ 0x3c
 8001cb2:	481a      	ldr	r0, [pc, #104]	@ (8001d1c <MX_GPIO_Init+0x11c>)
 8001cb4:	f002 f868 	bl	8003d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           TRIG_Pin LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001cb8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001cbc:	617b      	str	r3, [r7, #20]
                          |TRIG_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4811      	ldr	r0, [pc, #68]	@ (8001d18 <MX_GPIO_Init+0x118>)
 8001cd2:	f001 fea5 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001cd6:	233c      	movs	r3, #60	@ 0x3c
 8001cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce6:	f107 0314 	add.w	r3, r7, #20
 8001cea:	4619      	mov	r1, r3
 8001cec:	480b      	ldr	r0, [pc, #44]	@ (8001d1c <MX_GPIO_Init+0x11c>)
 8001cee:	f001 fe97 	bl	8003a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4619      	mov	r1, r3
 8001d06:	4806      	ldr	r0, [pc, #24]	@ (8001d20 <MX_GPIO_Init+0x120>)
 8001d08:	f001 fe8a 	bl	8003a20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d0c:	bf00      	nop
 8001d0e:	3728      	adds	r7, #40	@ 0x28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40020000 	.word	0x40020000
 8001d20:	40020c00 	.word	0x40020c00

08001d24 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//Interrupt Serial callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	//prevent unused argument
	UNUSED(huart);
	HAL_UART_Transmit(&huart3,(uint8_t *)aRxBuffer,4,0xFFFF);
 8001d2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d30:	2204      	movs	r2, #4
 8001d32:	4908      	ldr	r1, [pc, #32]	@ (8001d54 <HAL_UART_RxCpltCallback+0x30>)
 8001d34:	4808      	ldr	r0, [pc, #32]	@ (8001d58 <HAL_UART_RxCpltCallback+0x34>)
 8001d36:	f005 fa89 	bl	800724c <HAL_UART_Transmit>
	flagReceived=1;
 8001d3a:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <HAL_UART_RxCpltCallback+0x38>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]
	// servo_pwm  = atoi(aRxBuffer);
	//memset(aRxBuffer,0,sizeof(aRxBuffer));
	 HAL_UART_Receive_IT(&huart3,(uint8_t *)aRxBuffer,4);
 8001d40:	2204      	movs	r2, #4
 8001d42:	4904      	ldr	r1, [pc, #16]	@ (8001d54 <HAL_UART_RxCpltCallback+0x30>)
 8001d44:	4804      	ldr	r0, [pc, #16]	@ (8001d58 <HAL_UART_RxCpltCallback+0x34>)
 8001d46:	f005 fb0c 	bl	8007362 <HAL_UART_Receive_IT>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000564 	.word	0x20000564
 8001d58:	200004c4 	.word	0x200004c4
 8001d5c:	20000224 	.word	0x20000224

08001d60 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
	//timer 3 for the ultrasonic echo
if(htim==&htim4)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a37      	ldr	r2, [pc, #220]	@ (8001e48 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d161      	bne.n	8001e34 <HAL_TIM_IC_CaptureCallback+0xd4>
{
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12)==1)//rising edge
 8001d70:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d74:	4835      	ldr	r0, [pc, #212]	@ (8001e4c <HAL_TIM_IC_CaptureCallback+0xec>)
 8001d76:	f001 ffef 	bl	8003d58 <HAL_GPIO_ReadPin>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d108      	bne.n	8001d92 <HAL_TIM_IC_CaptureCallback+0x32>
	{
		tc1=HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8001d80:	2100      	movs	r1, #0
 8001d82:	4831      	ldr	r0, [pc, #196]	@ (8001e48 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001d84:	f004 fc7e 	bl	8006684 <HAL_TIM_ReadCapturedValue>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b30      	ldr	r3, [pc, #192]	@ (8001e50 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	e01e      	b.n	8001dd0 <HAL_TIM_IC_CaptureCallback+0x70>

	}
	else
	{
		tc2=HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8001d92:	2100      	movs	r1, #0
 8001d94:	482c      	ldr	r0, [pc, #176]	@ (8001e48 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8001d96:	f004 fc75 	bl	8006684 <HAL_TIM_ReadCapturedValue>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001e54 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001da0:	601a      	str	r2, [r3, #0]
		if(tc2>tc1)
 8001da2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e54 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e50 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	dd07      	ble.n	8001dbe <HAL_TIM_IC_CaptureCallback+0x5e>
			echo = (tc2-tc1);
 8001dae:	4b29      	ldr	r3, [pc, #164]	@ (8001e54 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	4b27      	ldr	r3, [pc, #156]	@ (8001e50 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	4a27      	ldr	r2, [pc, #156]	@ (8001e58 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	e008      	b.n	8001dd0 <HAL_TIM_IC_CaptureCallback+0x70>
		else //tc2 overflow
			echo=((65536-tc1)+tc2);
 8001dbe:	4b24      	ldr	r3, [pc, #144]	@ (8001e50 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8001dc6:	4b23      	ldr	r3, [pc, #140]	@ (8001e54 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	4a22      	ldr	r2, [pc, #136]	@ (8001e58 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8001dce:	6013      	str	r3, [r2, #0]
	}g_distanceUS = (tc2 > tc1 ? (tc2 - tc1) : (65535 - tc1 + tc2)) * 0.034 / 2;
 8001dd0:	4b20      	ldr	r3, [pc, #128]	@ (8001e54 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e50 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	dd08      	ble.n	8001dee <HAL_TIM_IC_CaptureCallback+0x8e>
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8001e54 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e50 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fb9c 	bl	8000524 <__aeabi_i2d>
 8001dec:	e00a      	b.n	8001e04 <HAL_TIM_IC_CaptureCallback+0xa4>
 8001dee:	4b18      	ldr	r3, [pc, #96]	@ (8001e50 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8001df6:	33ff      	adds	r3, #255	@ 0xff
 8001df8:	4a16      	ldr	r2, [pc, #88]	@ (8001e54 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fb90 	bl	8000524 <__aeabi_i2d>
 8001e04:	a30e      	add	r3, pc, #56	@ (adr r3, 8001e40 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0a:	f7fe fbf5 	bl	80005f8 <__aeabi_dmul>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001e1e:	f7fe fd15 	bl	800084c <__aeabi_ddiv>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4610      	mov	r0, r2
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f7fe fedd 	bl	8000be8 <__aeabi_d2f>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	4a0a      	ldr	r2, [pc, #40]	@ (8001e5c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8001e32:	6013      	str	r3, [r2, #0]
}

}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	f3af 8000 	nop.w
 8001e40:	b020c49c 	.word	0xb020c49c
 8001e44:	3fa16872 	.word	0x3fa16872
 8001e48:	200003ec 	.word	0x200003ec
 8001e4c:	40020c00 	.word	0x40020c00
 8001e50:	20000528 	.word	0x20000528
 8001e54:	2000052c 	.word	0x2000052c
 8001e58:	20000530 	.word	0x20000530
 8001e5c:	20000534 	.word	0x20000534

08001e60 <IR_Left_Read>:
void IR_Left_Read() {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 8001e64:	481e      	ldr	r0, [pc, #120]	@ (8001ee0 <IR_Left_Read+0x80>)
 8001e66:	f001 f87b 	bl	8002f60 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 10);
 8001e6a:	210a      	movs	r1, #10
 8001e6c:	481c      	ldr	r0, [pc, #112]	@ (8001ee0 <IR_Left_Read+0x80>)
 8001e6e:	f001 f97c 	bl	800316a <HAL_ADC_PollForConversion>
	iDistanceL = HAL_ADC_GetValue(&hadc2);
 8001e72:	481b      	ldr	r0, [pc, #108]	@ (8001ee0 <IR_Left_Read+0x80>)
 8001e74:	f001 fa04 	bl	8003280 <HAL_ADC_GetValue>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ee4 <IR_Left_Read+0x84>)
 8001e7e:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 8001e80:	4817      	ldr	r0, [pc, #92]	@ (8001ee0 <IR_Left_Read+0x80>)
 8001e82:	f001 f93f 	bl	8003104 <HAL_ADC_Stop>
	iDistanceL=(int)(iDistanceL*-4.286e-03)+2.189e+01;
 8001e86:	4b17      	ldr	r3, [pc, #92]	@ (8001ee4 <IR_Left_Read+0x84>)
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fb4a 	bl	8000524 <__aeabi_i2d>
 8001e90:	a30f      	add	r3, pc, #60	@ (adr r3, 8001ed0 <IR_Left_Read+0x70>)
 8001e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e96:	f7fe fbaf 	bl	80005f8 <__aeabi_dmul>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f7fe fe59 	bl	8000b58 <__aeabi_d2iz>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fb3b 	bl	8000524 <__aeabi_i2d>
 8001eae:	a30a      	add	r3, pc, #40	@ (adr r3, 8001ed8 <IR_Left_Read+0x78>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe f9ea 	bl	800028c <__adddf3>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f7fe fe72 	bl	8000ba8 <__aeabi_d2uiz>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <IR_Left_Read+0x84>)
 8001eca:	801a      	strh	r2, [r3, #0]
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	5d4a5df2 	.word	0x5d4a5df2
 8001ed4:	bf718e32 	.word	0xbf718e32
 8001ed8:	0a3d70a4 	.word	0x0a3d70a4
 8001edc:	4035e3d7 	.word	0x4035e3d7
 8001ee0:	20000278 	.word	0x20000278
 8001ee4:	20000568 	.word	0x20000568

08001ee8 <IR_Right_Read>:

void IR_Right_Read() {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001eec:	481e      	ldr	r0, [pc, #120]	@ (8001f68 <IR_Right_Read+0x80>)
 8001eee:	f001 f837 	bl	8002f60 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8001ef2:	210a      	movs	r1, #10
 8001ef4:	481c      	ldr	r0, [pc, #112]	@ (8001f68 <IR_Right_Read+0x80>)
 8001ef6:	f001 f938 	bl	800316a <HAL_ADC_PollForConversion>
	iDistanceR = HAL_ADC_GetValue(&hadc1);
 8001efa:	481b      	ldr	r0, [pc, #108]	@ (8001f68 <IR_Right_Read+0x80>)
 8001efc:	f001 f9c0 	bl	8003280 <HAL_ADC_GetValue>
 8001f00:	4603      	mov	r3, r0
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	4b19      	ldr	r3, [pc, #100]	@ (8001f6c <IR_Right_Read+0x84>)
 8001f06:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8001f08:	4817      	ldr	r0, [pc, #92]	@ (8001f68 <IR_Right_Read+0x80>)
 8001f0a:	f001 f8fb 	bl	8003104 <HAL_ADC_Stop>
	iDistanceR=(int)(iDistanceR*-4.286e-03)+2.189e+01;
 8001f0e:	4b17      	ldr	r3, [pc, #92]	@ (8001f6c <IR_Right_Read+0x84>)
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe fb06 	bl	8000524 <__aeabi_i2d>
 8001f18:	a30f      	add	r3, pc, #60	@ (adr r3, 8001f58 <IR_Right_Read+0x70>)
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	f7fe fb6b 	bl	80005f8 <__aeabi_dmul>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4610      	mov	r0, r2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f7fe fe15 	bl	8000b58 <__aeabi_d2iz>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe faf7 	bl	8000524 <__aeabi_i2d>
 8001f36:	a30a      	add	r3, pc, #40	@ (adr r3, 8001f60 <IR_Right_Read+0x78>)
 8001f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3c:	f7fe f9a6 	bl	800028c <__adddf3>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	f7fe fe2e 	bl	8000ba8 <__aeabi_d2uiz>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <IR_Right_Read+0x84>)
 8001f52:	801a      	strh	r2, [r3, #0]
}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	5d4a5df2 	.word	0x5d4a5df2
 8001f5c:	bf718e32 	.word	0xbf718e32
 8001f60:	0a3d70a4 	.word	0x0a3d70a4
 8001f64:	4035e3d7 	.word	0x4035e3d7
 8001f68:	20000230 	.word	0x20000230
 8001f6c:	2000056a 	.word	0x2000056a

08001f70 <Move_Right>:
	set_servo_angle(Left);
	osDelay(1000);
	PID_Control(1,10);

}
void Move_Right(){
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
	Set_Motor_Direction(1);
 8001f74:	2001      	movs	r0, #1
 8001f76:	f7fe ffff 	bl	8000f78 <Set_Motor_Direction>
	set_servo_angle(Right);
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f7ff f878 	bl	8001070 <set_servo_angle>
	osDelay(1000);
 8001f80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f84:	f006 fd90 	bl	8008aa8 <osDelay>
	PID_Control(10,1);
 8001f88:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001f8c:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8001f90:	f7ff f892 	bl	80010b8 <PID_Control>

}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <Motor_Stop>:
void Motor_Stop()
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
	degree=0;
 8001f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <Motor_Stop+0x40>)
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
	set_servo_angle(Center);
 8001fa4:	205f      	movs	r0, #95	@ 0x5f
 8001fa6:	f7ff f863 	bl	8001070 <set_servo_angle>
	//distanceTraveled=0;
    pwmValL = 0;
 8001faa:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <Motor_Stop+0x44>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
    pwmValR = 0;
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <Motor_Stop+0x48>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValL); // Stop left motor
 8001fb6:	4b09      	ldr	r3, [pc, #36]	@ (8001fdc <Motor_Stop+0x44>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <Motor_Stop+0x4c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmValR); // Stop right motor
 8001fc0:	4b07      	ldr	r3, [pc, #28]	@ (8001fe0 <Motor_Stop+0x48>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <Motor_Stop+0x4c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	639a      	str	r2, [r3, #56]	@ 0x38
    count++;
 8001fca:	4b07      	ldr	r3, [pc, #28]	@ (8001fe8 <Motor_Stop+0x50>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	4a05      	ldr	r2, [pc, #20]	@ (8001fe8 <Motor_Stop+0x50>)
 8001fd2:	6013      	str	r3, [r2, #0]
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	2000055c 	.word	0x2000055c
 8001fdc:	20000554 	.word	0x20000554
 8001fe0:	20000558 	.word	0x20000558
 8001fe4:	2000047c 	.word	0x2000047c
 8001fe8:	20000004 	.word	0x20000004

08001fec <Move_Straight>:
void Move_Straight(){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
    // Set PWM duty cycle for both motors
	Set_Motor_Direction(1);
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	f7fe ffc1 	bl	8000f78 <Set_Motor_Direction>
	PID_Control(5,5);
 8001ff6:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 8001ffa:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8001ffe:	f7ff f85b 	bl	80010b8 <PID_Control>
//	pwmValL=2000;
//	pwmValR=2000;
//    __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValL);
//    __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmValR);
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}

08002006 <Move_Backwards>:
void Move_Backwards(){
 8002006:	b580      	push	{r7, lr}
 8002008:	af00      	add	r7, sp, #0
	Set_Motor_Direction(0);
 800200a:	2000      	movs	r0, #0
 800200c:	f7fe ffb4 	bl	8000f78 <Set_Motor_Direction>
    // Set PWM duty cycle for both motors
	PID_Control(5,5);
 8002010:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 8002014:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8002018:	f7ff f84e 	bl	80010b8 <PID_Control>
//	pwmValL=2000;
//	pwmValR=2000;
//	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValL);
//    __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmValR);

}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}

08002020 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  	  HAL_GPIO_TogglePin(GPIOE,LED3_Pin);
 8002028:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800202c:	4803      	ldr	r0, [pc, #12]	@ (800203c <StartDefaultTask+0x1c>)
 800202e:	f001 fec4 	bl	8003dba <HAL_GPIO_TogglePin>
		  //sprintf(test,"%s\0",aRxBuffer);
//		  snprintf(test,15,"dist: %3.2f cm\0",dist);
//		  OLED_ShowString(10,10,test);
//
//		  OLED_Refresh_Gram();
    osDelay(150);
 8002032:	2096      	movs	r0, #150	@ 0x96
 8002034:	f006 fd38 	bl	8008aa8 <osDelay>
	  	  HAL_GPIO_TogglePin(GPIOE,LED3_Pin);
 8002038:	bf00      	nop
 800203a:	e7f5      	b.n	8002028 <StartDefaultTask+0x8>
 800203c:	40021000 	.word	0x40021000

08002040 <StartOledTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOledTask */
void StartOledTask(void *argument)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af02      	add	r7, sp, #8
 8002046:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledTask */
	char text[16]={};
 8002048:	2300      	movs	r3, #0
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
  /* Infinite loop */
  for(;;)
  {

//
		snprintf(text, sizeof(text), "EA:%d", error_angle);
 8002058:	4b23      	ldr	r3, [pc, #140]	@ (80020e8 <StartOledTask+0xa8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f107 0008 	add.w	r0, r7, #8
 8002060:	4a22      	ldr	r2, [pc, #136]	@ (80020ec <StartOledTask+0xac>)
 8002062:	2110      	movs	r1, #16
 8002064:	f00a f914 	bl	800c290 <sniprintf>
		OLED_ShowString(10, 40, text);
 8002068:	f107 0308 	add.w	r3, r7, #8
 800206c:	461a      	mov	r2, r3
 800206e:	2128      	movs	r1, #40	@ 0x28
 8002070:	200a      	movs	r0, #10
 8002072:	f009 fb35 	bl	800b6e0 <OLED_ShowString>
		ICM20948_readGyroscope_all(&hi2c1, 0, GYRO_SENS, &accel);
 8002076:	4b1e      	ldr	r3, [pc, #120]	@ (80020f0 <StartOledTask+0xb0>)
 8002078:	2203      	movs	r2, #3
 800207a:	2100      	movs	r1, #0
 800207c:	481d      	ldr	r0, [pc, #116]	@ (80020f4 <StartOledTask+0xb4>)
 800207e:	f006 fa43 	bl	8008508 <ICM20948_readGyroscope_all>
//		  OLED_ShowString(10, 50, text);
		//		  snprintf(text, sizeof(text), "X:%d", flagReceived);
		//		  OLED_ShowString(10, 50, text);
//		  snprintf(text, sizeof(text), "PWM:%c", aRxBuffer[0]);
//		  OLED_ShowString(10, 20, text);
		  snprintf(text, sizeof(text), "degree :%5.2f", degree);
 8002082:	4b1d      	ldr	r3, [pc, #116]	@ (80020f8 <StartOledTask+0xb8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fa5e 	bl	8000548 <__aeabi_f2d>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	f107 0008 	add.w	r0, r7, #8
 8002094:	e9cd 2300 	strd	r2, r3, [sp]
 8002098:	4a18      	ldr	r2, [pc, #96]	@ (80020fc <StartOledTask+0xbc>)
 800209a:	2110      	movs	r1, #16
 800209c:	f00a f8f8 	bl	800c290 <sniprintf>
		  OLED_ShowString(10, 30, text);
 80020a0:	f107 0308 	add.w	r3, r7, #8
 80020a4:	461a      	mov	r2, r3
 80020a6:	211e      	movs	r1, #30
 80020a8:	200a      	movs	r0, #10
 80020aa:	f009 fb19 	bl	800b6e0 <OLED_ShowString>
		  OLED_Refresh_Gram();
 80020ae:	f009 f9a3 	bl	800b3f8 <OLED_Refresh_Gram>
		  //snprintf(text, sizeof(text), "A:%d", angle);
		  snprintf(text, sizeof(text), "Distance: %.2f m", distanceTraveled);
 80020b2:	4b13      	ldr	r3, [pc, #76]	@ (8002100 <StartOledTask+0xc0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa46 	bl	8000548 <__aeabi_f2d>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	f107 0008 	add.w	r0, r7, #8
 80020c4:	e9cd 2300 	strd	r2, r3, [sp]
 80020c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002104 <StartOledTask+0xc4>)
 80020ca:	2110      	movs	r1, #16
 80020cc:	f00a f8e0 	bl	800c290 <sniprintf>
		  OLED_ShowString(10, 10, text);
 80020d0:	f107 0308 	add.w	r3, r7, #8
 80020d4:	461a      	mov	r2, r3
 80020d6:	210a      	movs	r1, #10
 80020d8:	200a      	movs	r0, #10
 80020da:	f009 fb01 	bl	800b6e0 <OLED_ShowString>
	  	snprintf(text, sizeof(text), "Roll:%5.2f", roll);
	  		  OLED_ShowString(10, 40, text);*/
	 //OLED_Refresh_Gram();
	  //HAL_UART_Transmit(&huart2,text,sizeof(text),0xFFFF);
	  //HAL_UART_Transmit(&huart2,"\n\r",2,0xFFFF);
    osDelay(200);
 80020de:	20c8      	movs	r0, #200	@ 0xc8
 80020e0:	f006 fce2 	bl	8008aa8 <osDelay>
  {
 80020e4:	bf00      	nop
 80020e6:	e7b7      	b.n	8002058 <StartOledTask+0x18>
 80020e8:	20000220 	.word	0x20000220
 80020ec:	0800e640 	.word	0x0800e640
 80020f0:	20000548 	.word	0x20000548
 80020f4:	200002c0 	.word	0x200002c0
 80020f8:	2000055c 	.word	0x2000055c
 80020fc:	0800e648 	.word	0x0800e648
 8002100:	20000218 	.word	0x20000218
 8002104:	0800e658 	.word	0x0800e658

08002108 <StartUltraSonic>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUltraSonic */
void StartUltraSonic(void *argument)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUltraSonic */

  /* Infinite loop */
  for(;;)
  {
	  	HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_RESET);
 8002110:	2200      	movs	r2, #0
 8002112:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002116:	480d      	ldr	r0, [pc, #52]	@ (800214c <StartUltraSonic+0x44>)
 8002118:	f001 fe36 	bl	8003d88 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_SET);
 800211c:	2201      	movs	r2, #1
 800211e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002122:	480a      	ldr	r0, [pc, #40]	@ (800214c <StartUltraSonic+0x44>)
 8002124:	f001 fe30 	bl	8003d88 <HAL_GPIO_WritePin>
	    delay_us(10);
 8002128:	200a      	movs	r0, #10
 800212a:	f7fe ff5b 	bl	8000fe4 <delay_us>
	    HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_RESET);
 800212e:	2200      	movs	r2, #0
 8002130:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002134:	4805      	ldr	r0, [pc, #20]	@ (800214c <StartUltraSonic+0x44>)
 8002136:	f001 fe27 	bl	8003d88 <HAL_GPIO_WritePin>
	    osDelay(10);
 800213a:	200a      	movs	r0, #10
 800213c:	f006 fcb4 	bl	8008aa8 <osDelay>
	    //g_distanceUS = (tc2 > tc1 ? (tc2 - tc1) : (65535 - tc1 + tc2)) * 0.034 / 2; //echo/1000000.0f *343.0f/2.0f *100.0f equivalent
    osDelay(200);
 8002140:	20c8      	movs	r0, #200	@ 0xc8
 8002142:	f006 fcb1 	bl	8008aa8 <osDelay>
	  	HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_RESET);
 8002146:	bf00      	nop
 8002148:	e7e2      	b.n	8002110 <StartUltraSonic+0x8>
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000

08002150 <StartServoTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartServoTask */
void StartServoTask(void *argument)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartServoTask */

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);//Start servo pwm timer
 8002158:	210c      	movs	r1, #12
 800215a:	484c      	ldr	r0, [pc, #304]	@ (800228c <StartServoTask+0x13c>)
 800215c:	f003 fbfe 	bl	800595c <HAL_TIM_PWM_Start>
	degree=0;
 8002160:	4b4b      	ldr	r3, [pc, #300]	@ (8002290 <StartServoTask+0x140>)
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
	osDelay(200);
 8002168:	20c8      	movs	r0, #200	@ 0xc8
 800216a:	f006 fc9d 	bl	8008aa8 <osDelay>
	//Calibrate();
	start_time = HAL_GetTick();
 800216e:	f000 fe83 	bl	8002e78 <HAL_GetTick>
 8002172:	4603      	mov	r3, r0
 8002174:	4a47      	ldr	r2, [pc, #284]	@ (8002294 <StartServoTask+0x144>)
 8002176:	6013      	str	r3, [r2, #0]
	end_time = HAL_GetTick();  // Record end time
 8002178:	f000 fe7e 	bl	8002e78 <HAL_GetTick>
 800217c:	4603      	mov	r3, r0
 800217e:	4a46      	ldr	r2, [pc, #280]	@ (8002298 <StartServoTask+0x148>)
 8002180:	6013      	str	r3, [r2, #0]
	delta_time_sec= (end_time - start_time) / 1000.0f; // Time difference in ms
 8002182:	4b45      	ldr	r3, [pc, #276]	@ (8002298 <StartServoTask+0x148>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4b43      	ldr	r3, [pc, #268]	@ (8002294 <StartServoTask+0x144>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	ee07 3a90 	vmov	s15, r3
 8002190:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002194:	eddf 6a41 	vldr	s13, [pc, #260]	@ 800229c <StartServoTask+0x14c>
 8002198:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800219c:	4b40      	ldr	r3, [pc, #256]	@ (80022a0 <StartServoTask+0x150>)
 800219e:	edc3 7a00 	vstr	s15, [r3]
  /* Infinite loop */
  for(;;)
  {
//	  if(aRxBuffer[0]=='W'||aRxBuffer[0]=='S')
//	  {
		end_time = HAL_GetTick();
 80021a2:	f000 fe69 	bl	8002e78 <HAL_GetTick>
 80021a6:	4603      	mov	r3, r0
 80021a8:	4a3b      	ldr	r2, [pc, #236]	@ (8002298 <StartServoTask+0x148>)
 80021aa:	6013      	str	r3, [r2, #0]
		delta_time_sec= (end_time - start_time) / 1000.0f;
 80021ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002298 <StartServoTask+0x148>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b38      	ldr	r3, [pc, #224]	@ (8002294 <StartServoTask+0x144>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	ee07 3a90 	vmov	s15, r3
 80021ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021be:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800229c <StartServoTask+0x14c>
 80021c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021c6:	4b36      	ldr	r3, [pc, #216]	@ (80022a0 <StartServoTask+0x150>)
 80021c8:	edc3 7a00 	vstr	s15, [r3]
		 float filtered_gyro_value = high_pass_filter(accel.z, alpha);
 80021cc:	4b35      	ldr	r3, [pc, #212]	@ (80022a4 <StartServoTask+0x154>)
 80021ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80021d2:	4b35      	ldr	r3, [pc, #212]	@ (80022a8 <StartServoTask+0x158>)
 80021d4:	ed93 7a00 	vldr	s14, [r3]
 80021d8:	eef0 0a47 	vmov.f32	s1, s14
 80021dc:	eeb0 0a67 	vmov.f32	s0, s15
 80021e0:	f7fe ff1a 	bl	8001018 <high_pass_filter>
 80021e4:	ed87 0a03 	vstr	s0, [r7, #12]
		  degree+=filtered_gyro_value * delta_time_sec;
 80021e8:	4b2d      	ldr	r3, [pc, #180]	@ (80022a0 <StartServoTask+0x150>)
 80021ea:	ed93 7a00 	vldr	s14, [r3]
 80021ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80021f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021f6:	4b26      	ldr	r3, [pc, #152]	@ (8002290 <StartServoTask+0x140>)
 80021f8:	edd3 7a00 	vldr	s15, [r3]
 80021fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002200:	4b23      	ldr	r3, [pc, #140]	@ (8002290 <StartServoTask+0x140>)
 8002202:	edc3 7a00 	vstr	s15, [r3]
		  error_angle=Center-(int)degree;
 8002206:	4b22      	ldr	r3, [pc, #136]	@ (8002290 <StartServoTask+0x140>)
 8002208:	edd3 7a00 	vldr	s15, [r3]
 800220c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002210:	ee17 3a90 	vmov	r3, s15
 8002214:	f1c3 035f 	rsb	r3, r3, #95	@ 0x5f
 8002218:	4a24      	ldr	r2, [pc, #144]	@ (80022ac <StartServoTask+0x15c>)
 800221a:	6013      	str	r3, [r2, #0]
		  if(count==0)
 800221c:	4b24      	ldr	r3, [pc, #144]	@ (80022b0 <StartServoTask+0x160>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d113      	bne.n	800224c <StartServoTask+0xfc>
		  {
			  if(error_angle>(Center+.2)) //(error_angle>(Center+.5))
 8002224:	4b21      	ldr	r3, [pc, #132]	@ (80022ac <StartServoTask+0x15c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b5f      	cmp	r3, #95	@ 0x5f
 800222a:	dd03      	ble.n	8002234 <StartServoTask+0xe4>
			  {
				  //set_servo_pwm(146);//turn slght left 146
				  set_servo_angle(Slight_Left);
 800222c:	2064      	movs	r0, #100	@ 0x64
 800222e:	f7fe ff1f 	bl	8001070 <set_servo_angle>
 8002232:	e022      	b.n	800227a <StartServoTask+0x12a>
			  }
			  else if(error_angle<(Center-.2))
 8002234:	4b1d      	ldr	r3, [pc, #116]	@ (80022ac <StartServoTask+0x15c>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b5e      	cmp	r3, #94	@ 0x5e
 800223a:	dc03      	bgt.n	8002244 <StartServoTask+0xf4>
			  {
				  //set_servo_pwm(160); //turn slight right 160
				  set_servo_angle(Slight_Right);
 800223c:	205a      	movs	r0, #90	@ 0x5a
 800223e:	f7fe ff17 	bl	8001070 <set_servo_angle>
 8002242:	e01a      	b.n	800227a <StartServoTask+0x12a>
			  }
			  else{
				  //set_servo_pwm(152);
				  set_servo_angle(Center);
 8002244:	205f      	movs	r0, #95	@ 0x5f
 8002246:	f7fe ff13 	bl	8001070 <set_servo_angle>
 800224a:	e016      	b.n	800227a <StartServoTask+0x12a>
			  }
		  }
		  else if(count==1)
 800224c:	4b18      	ldr	r3, [pc, #96]	@ (80022b0 <StartServoTask+0x160>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d112      	bne.n	800227a <StartServoTask+0x12a>
		  {
			  if(error_angle<(Center-.5)) //(error_angle>(Center+.5))
 8002254:	4b15      	ldr	r3, [pc, #84]	@ (80022ac <StartServoTask+0x15c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2b5e      	cmp	r3, #94	@ 0x5e
 800225a:	dc03      	bgt.n	8002264 <StartServoTask+0x114>
			  {
				  //set_servo_pwm(146);//turn slght left 146
				  set_servo_angle(Slight_Left);
 800225c:	2064      	movs	r0, #100	@ 0x64
 800225e:	f7fe ff07 	bl	8001070 <set_servo_angle>
 8002262:	e00a      	b.n	800227a <StartServoTask+0x12a>
			  }
			  else if(error_angle>(Center+.5))
 8002264:	4b11      	ldr	r3, [pc, #68]	@ (80022ac <StartServoTask+0x15c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b5f      	cmp	r3, #95	@ 0x5f
 800226a:	dd03      	ble.n	8002274 <StartServoTask+0x124>
			  {
				  //set_servo_pwm(160); //turn slight right 160
				  set_servo_angle(Slight_Right);
 800226c:	205a      	movs	r0, #90	@ 0x5a
 800226e:	f7fe feff 	bl	8001070 <set_servo_angle>
 8002272:	e002      	b.n	800227a <StartServoTask+0x12a>
			  }
			  else{
				  //set_servo_pwm(152);
				  set_servo_angle(Center);
 8002274:	205f      	movs	r0, #95	@ 0x5f
 8002276:	f7fe fefb 	bl	8001070 <set_servo_angle>
			  }
		  }
		  start_time = HAL_GetTick();
 800227a:	f000 fdfd 	bl	8002e78 <HAL_GetTick>
 800227e:	4603      	mov	r3, r0
 8002280:	4a04      	ldr	r2, [pc, #16]	@ (8002294 <StartServoTask+0x144>)
 8002282:	6013      	str	r3, [r2, #0]
		    osDelay(150);
 8002284:	2096      	movs	r0, #150	@ 0x96
 8002286:	f006 fc0f 	bl	8008aa8 <osDelay>
  {
 800228a:	e78a      	b.n	80021a2 <StartServoTask+0x52>
 800228c:	20000314 	.word	0x20000314
 8002290:	2000055c 	.word	0x2000055c
 8002294:	20000228 	.word	0x20000228
 8002298:	2000022c 	.word	0x2000022c
 800229c:	447a0000 	.word	0x447a0000
 80022a0:	2000021c 	.word	0x2000021c
 80022a4:	20000548 	.word	0x20000548
 80022a8:	20000000 	.word	0x20000000
 80022ac:	20000220 	.word	0x20000220
 80022b0:	20000004 	.word	0x20000004

080022b4 <StartMotorTask>:
/* USER CODE END Header_StartMotorTask */


  /* USER CODE BEGIN StartMotorTask */
void StartMotorTask(void *argument)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80022bc:	2100      	movs	r1, #0
 80022be:	4822      	ldr	r0, [pc, #136]	@ (8002348 <StartMotorTask+0x94>)
 80022c0:	f003 fb4c 	bl	800595c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80022c4:	2104      	movs	r1, #4
 80022c6:	4820      	ldr	r0, [pc, #128]	@ (8002348 <StartMotorTask+0x94>)
 80022c8:	f003 fb48 	bl	800595c <HAL_TIM_PWM_Start>
	while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8)==1);
 80022cc:	bf00      	nop
 80022ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022d2:	481e      	ldr	r0, [pc, #120]	@ (800234c <StartMotorTask+0x98>)
 80022d4:	f001 fd40 	bl	8003d58 <HAL_GPIO_ReadPin>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d0f7      	beq.n	80022ce <StartMotorTask+0x1a>
	//while(calibrate==0);
	set_servo_angle(Center);
 80022de:	205f      	movs	r0, #95	@ 0x5f
 80022e0:	f7fe fec6 	bl	8001070 <set_servo_angle>
	Target_Distance=200;
 80022e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002350 <StartMotorTask+0x9c>)
 80022e6:	22c8      	movs	r2, #200	@ 0xc8
 80022e8:	601a      	str	r2, [r3, #0]
//	  }
//	  if(count==0)
//	  {
//		  Move_Right(40);
//	  } //70 is for left //140 for right
	  if(count==2)
 80022ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002354 <StartMotorTask+0xa0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d108      	bne.n	8002304 <StartMotorTask+0x50>
	  {
		  if(error_angle<175) // Move left 135 for 90 degree //180 for 180 degree 175 works too // do increments of 45 for each 90 degree
 80022f2:	4b19      	ldr	r3, [pc, #100]	@ (8002358 <StartMotorTask+0xa4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2bae      	cmp	r3, #174	@ 0xae
 80022f8:	dc02      	bgt.n	8002300 <StartMotorTask+0x4c>
		  {
			  Move_Right();
 80022fa:	f7ff fe39 	bl	8001f70 <Move_Right>
 80022fe:	e001      	b.n	8002304 <StartMotorTask+0x50>
		  }
		  		else{
		  			Motor_Stop();
 8002300:	f7ff fe4a 	bl	8001f98 <Motor_Stop>
//		  		else{
//		  			Motor_Stop();
//		  		}
//	  }

	  if(distanceTraveled<Target_Distance)// Do not touch
 8002304:	4b12      	ldr	r3, [pc, #72]	@ (8002350 <StartMotorTask+0x9c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	ee07 3a90 	vmov	s15, r3
 800230c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002310:	4b12      	ldr	r3, [pc, #72]	@ (800235c <StartMotorTask+0xa8>)
 8002312:	edd3 7a00 	vldr	s15, [r3]
 8002316:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800231a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231e:	dd0c      	ble.n	800233a <StartMotorTask+0x86>
	  {
		  if(count==0)
 8002320:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <StartMotorTask+0xa0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <StartMotorTask+0x78>
		  {
			  Move_Straight();
 8002328:	f7ff fe60 	bl	8001fec <Move_Straight>
		  }
		  if(count==1)
 800232c:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <StartMotorTask+0xa0>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d104      	bne.n	800233e <StartMotorTask+0x8a>
		  {
			  Move_Backwards();
 8002334:	f7ff fe67 	bl	8002006 <Move_Backwards>
 8002338:	e001      	b.n	800233e <StartMotorTask+0x8a>
//			else{
//				flagReceived=0;
//			}
////	}
		else{
			Motor_Stop();
 800233a:	f7ff fe2d 	bl	8001f98 <Motor_Stop>
//		flagReceived=0;
//		flagDone = 0;
//	}


	    osDelay(50); // Delay to control update frequency
 800233e:	2032      	movs	r0, #50	@ 0x32
 8002340:	f006 fbb2 	bl	8008aa8 <osDelay>
	  if(count==2)
 8002344:	e7d1      	b.n	80022ea <StartMotorTask+0x36>
 8002346:	bf00      	nop
 8002348:	2000047c 	.word	0x2000047c
 800234c:	40020c00 	.word	0x40020c00
 8002350:	20000214 	.word	0x20000214
 8002354:	20000004 	.word	0x20000004
 8002358:	20000220 	.word	0x20000220
 800235c:	20000218 	.word	0x20000218

08002360 <StartEncoderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08a      	sub	sp, #40	@ 0x28
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002368:	213c      	movs	r1, #60	@ 0x3c
 800236a:	4881      	ldr	r0, [pc, #516]	@ (8002570 <StartEncoderTask+0x210>)
 800236c:	f003 fde6 	bl	8005f3c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8002370:	213c      	movs	r1, #60	@ 0x3c
 8002372:	4880      	ldr	r0, [pc, #512]	@ (8002574 <StartEncoderTask+0x214>)
 8002374:	f003 fde2 	bl	8005f3c <HAL_TIM_Encoder_Start>

	int16_t cnt1L,cnt2L,diffL;
	int16_t cnt1R,cnt2R,diffR;
	uint32_t tick;
	cnt1L = __HAL_TIM_GET_COUNTER(&htim2);
 8002378:	4b7d      	ldr	r3, [pc, #500]	@ (8002570 <StartEncoderTask+0x210>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	cnt1R = __HAL_TIM_GET_COUNTER(&htim3);
 8002380:	4b7c      	ldr	r3, [pc, #496]	@ (8002574 <StartEncoderTask+0x214>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	847b      	strh	r3, [r7, #34]	@ 0x22
    tick = HAL_GetTick(); // in milliseconds
 8002388:	f000 fd76 	bl	8002e78 <HAL_GetTick>
 800238c:	61f8      	str	r0, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
	  if (HAL_GetTick() - tick > 10L) { // Checking per second
 800238e:	f000 fd73 	bl	8002e78 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b0a      	cmp	r3, #10
 800239a:	f240 80e1 	bls.w	8002560 <StartEncoderTask+0x200>
	              cnt2L = __HAL_TIM_GET_COUNTER(&htim2);
 800239e:	4b74      	ldr	r3, [pc, #464]	@ (8002570 <StartEncoderTask+0x210>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a4:	837b      	strh	r3, [r7, #26]
	              cnt2R = __HAL_TIM_GET_COUNTER(&htim3);
 80023a6:	4b73      	ldr	r3, [pc, #460]	@ (8002574 <StartEncoderTask+0x214>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	833b      	strh	r3, [r7, #24]

	              //Left
	              if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 80023ae:	4b70      	ldr	r3, [pc, #448]	@ (8002570 <StartEncoderTask+0x210>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	2b10      	cmp	r3, #16
 80023ba:	d114      	bne.n	80023e6 <StartEncoderTask+0x86>
	            	  diffL = (cnt2L < cnt1L) ? (cnt1L - cnt2L) : ((65535 - cnt2L) + cnt1L);
 80023bc:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80023c0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80023c4:	429a      	cmp	r2, r3
 80023c6:	da05      	bge.n	80023d4 <StartEncoderTask+0x74>
 80023c8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80023ca:	8b7b      	ldrh	r3, [r7, #26]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	b21b      	sxth	r3, r3
 80023d2:	e006      	b.n	80023e2 <StartEncoderTask+0x82>
 80023d4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80023d6:	8b7b      	ldrh	r3, [r7, #26]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29b      	uxth	r3, r3
 80023e0:	b21b      	sxth	r3, r3
 80023e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80023e4:	e013      	b.n	800240e <StartEncoderTask+0xae>
	              } else {
	            	  diffL = (cnt2L > cnt1L) ? (cnt2L - cnt1L) : ((65535 - cnt1L) + cnt2L);
 80023e6:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80023ea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80023ee:	429a      	cmp	r2, r3
 80023f0:	dd05      	ble.n	80023fe <StartEncoderTask+0x9e>
 80023f2:	8b7a      	ldrh	r2, [r7, #26]
 80023f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	b21b      	sxth	r3, r3
 80023fc:	e006      	b.n	800240c <StartEncoderTask+0xac>
 80023fe:	8b7a      	ldrh	r2, [r7, #26]
 8002400:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	b29b      	uxth	r3, r3
 8002406:	3b01      	subs	r3, #1
 8002408:	b29b      	uxth	r3, r3
 800240a:	b21b      	sxth	r3, r3
 800240c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	              }

	              //Right
	              if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) {
 800240e:	4b59      	ldr	r3, [pc, #356]	@ (8002574 <StartEncoderTask+0x214>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	2b10      	cmp	r3, #16
 800241a:	d114      	bne.n	8002446 <StartEncoderTask+0xe6>
	              	            	  diffR = (cnt2R < cnt1R) ? (cnt1R - cnt2R) : ((65535 - cnt2R) + cnt1R);
 800241c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002420:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002424:	429a      	cmp	r2, r3
 8002426:	da05      	bge.n	8002434 <StartEncoderTask+0xd4>
 8002428:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800242a:	8b3b      	ldrh	r3, [r7, #24]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	b29b      	uxth	r3, r3
 8002430:	b21b      	sxth	r3, r3
 8002432:	e006      	b.n	8002442 <StartEncoderTask+0xe2>
 8002434:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8002436:	8b3b      	ldrh	r3, [r7, #24]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29b      	uxth	r3, r3
 8002440:	b21b      	sxth	r3, r3
 8002442:	843b      	strh	r3, [r7, #32]
 8002444:	e013      	b.n	800246e <StartEncoderTask+0x10e>
	              	              } else {
	              	            	  diffR = (cnt2R > cnt1R) ? (cnt2R - cnt1R) : ((65535 - cnt1R) + cnt2R);
 8002446:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800244a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800244e:	429a      	cmp	r2, r3
 8002450:	dd05      	ble.n	800245e <StartEncoderTask+0xfe>
 8002452:	8b3a      	ldrh	r2, [r7, #24]
 8002454:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	b29b      	uxth	r3, r3
 800245a:	b21b      	sxth	r3, r3
 800245c:	e006      	b.n	800246c <StartEncoderTask+0x10c>
 800245e:	8b3a      	ldrh	r2, [r7, #24]
 8002460:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	b29b      	uxth	r3, r3
 8002466:	3b01      	subs	r3, #1
 8002468:	b29b      	uxth	r3, r3
 800246a:	b21b      	sxth	r3, r3
 800246c:	843b      	strh	r3, [r7, #32]
	              	              }
	  // RPM Calculation
	  RPM_L = ((float) diffL / (ENCODER_PULSES_PER_REVOLUTION * 4));// * 60.0;
 800246e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002472:	ee07 3a90 	vmov	s15, r3
 8002476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800247a:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8002578 <StartEncoderTask+0x218>
 800247e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002482:	ee16 0a90 	vmov	r0, s13
 8002486:	f7fe f85f 	bl	8000548 <__aeabi_f2d>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	493b      	ldr	r1, [pc, #236]	@ (800257c <StartEncoderTask+0x21c>)
 8002490:	e9c1 2300 	strd	r2, r3, [r1]
	  RPM_R = ((float) diffR / (ENCODER_PULSES_PER_REVOLUTION * 4));
 8002494:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002498:	ee07 3a90 	vmov	s15, r3
 800249c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024a0:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8002578 <StartEncoderTask+0x218>
 80024a4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80024a8:	ee16 0a90 	vmov	r0, s13
 80024ac:	f7fe f84c 	bl	8000548 <__aeabi_f2d>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4932      	ldr	r1, [pc, #200]	@ (8002580 <StartEncoderTask+0x220>)
 80024b6:	e9c1 2300 	strd	r2, r3, [r1]

      // Calculate the distance traveled by each wheel (in meters)
      float distanceLeftThisSecond = RPM_L * PI * WHEEL_DIAMETER;
 80024ba:	4b30      	ldr	r3, [pc, #192]	@ (800257c <StartEncoderTask+0x21c>)
 80024bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024c0:	a329      	add	r3, pc, #164	@ (adr r3, 8002568 <StartEncoderTask+0x208>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	f7fe f897 	bl	80005f8 <__aeabi_dmul>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4610      	mov	r0, r2
 80024d0:	4619      	mov	r1, r3
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002584 <StartEncoderTask+0x224>)
 80024d8:	f7fe f88e 	bl	80005f8 <__aeabi_dmul>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4610      	mov	r0, r2
 80024e2:	4619      	mov	r1, r3
 80024e4:	f7fe fb80 	bl	8000be8 <__aeabi_d2f>
 80024e8:	4603      	mov	r3, r0
 80024ea:	617b      	str	r3, [r7, #20]
      float distanceRightThisSecond = RPM_R * PI * WHEEL_DIAMETER;
 80024ec:	4b24      	ldr	r3, [pc, #144]	@ (8002580 <StartEncoderTask+0x220>)
 80024ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024f2:	a31d      	add	r3, pc, #116	@ (adr r3, 8002568 <StartEncoderTask+0x208>)
 80024f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f8:	f7fe f87e 	bl	80005f8 <__aeabi_dmul>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	4b1e      	ldr	r3, [pc, #120]	@ (8002584 <StartEncoderTask+0x224>)
 800250a:	f7fe f875 	bl	80005f8 <__aeabi_dmul>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4610      	mov	r0, r2
 8002514:	4619      	mov	r1, r3
 8002516:	f7fe fb67 	bl	8000be8 <__aeabi_d2f>
 800251a:	4603      	mov	r3, r0
 800251c:	613b      	str	r3, [r7, #16]

	    // Average the distances to account for potential minor differences in wheel speed
	    float distanceThisSecond = (distanceLeftThisSecond + distanceRightThisSecond) / 2.0;
 800251e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002522:	edd7 7a04 	vldr	s15, [r7, #16]
 8002526:	ee37 7a27 	vadd.f32	s14, s14, s15
 800252a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800252e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002532:	edc7 7a03 	vstr	s15, [r7, #12]
	    distanceTraveled += distanceThisSecond;
 8002536:	4b14      	ldr	r3, [pc, #80]	@ (8002588 <StartEncoderTask+0x228>)
 8002538:	ed93 7a00 	vldr	s14, [r3]
 800253c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002544:	4b10      	ldr	r3, [pc, #64]	@ (8002588 <StartEncoderTask+0x228>)
 8002546:	edc3 7a00 	vstr	s15, [r3]
	    // Accumulate the total distance traveled
	  cnt1L = __HAL_TIM_GET_COUNTER(&htim2);
 800254a:	4b09      	ldr	r3, [pc, #36]	@ (8002570 <StartEncoderTask+0x210>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002550:	84fb      	strh	r3, [r7, #38]	@ 0x26
	  cnt1R = __HAL_TIM_GET_COUNTER(&htim3);
 8002552:	4b08      	ldr	r3, [pc, #32]	@ (8002574 <StartEncoderTask+0x214>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002558:	847b      	strh	r3, [r7, #34]	@ 0x22
	 tick = HAL_GetTick();
 800255a:	f000 fc8d 	bl	8002e78 <HAL_GetTick>
 800255e:	61f8      	str	r0, [r7, #28]
  }
	  osDelay(150);
 8002560:	2096      	movs	r0, #150	@ 0x96
 8002562:	f006 faa1 	bl	8008aa8 <osDelay>
	  if (HAL_GetTick() - tick > 10L) { // Checking per second
 8002566:	e712      	b.n	800238e <StartEncoderTask+0x2e>
 8002568:	54442eea 	.word	0x54442eea
 800256c:	400921fb 	.word	0x400921fb
 8002570:	2000035c 	.word	0x2000035c
 8002574:	200003a4 	.word	0x200003a4
 8002578:	44a50000 	.word	0x44a50000
 800257c:	20000538 	.word	0x20000538
 8002580:	20000540 	.word	0x20000540
 8002584:	401a0000 	.word	0x401a0000
 8002588:	20000218 	.word	0x20000218

0800258c <Start_IRTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_IRTask */
void Start_IRTask(void *argument)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_IRTask */
  /* Infinite loop */
  for(;;)
  {
		IR_Left_Read();
 8002594:	f7ff fc64 	bl	8001e60 <IR_Left_Read>
		IR_Right_Read();
 8002598:	f7ff fca6 	bl	8001ee8 <IR_Right_Read>
		osDelay(150);
 800259c:	2096      	movs	r0, #150	@ 0x96
 800259e:	f006 fa83 	bl	8008aa8 <osDelay>
		IR_Left_Read();
 80025a2:	bf00      	nop
 80025a4:	e7f6      	b.n	8002594 <Start_IRTask+0x8>

080025a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025aa:	b672      	cpsid	i
}
 80025ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025ae:	bf00      	nop
 80025b0:	e7fd      	b.n	80025ae <Error_Handler+0x8>
	...

080025b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	607b      	str	r3, [r7, #4]
 80025be:	4b12      	ldr	r3, [pc, #72]	@ (8002608 <HAL_MspInit+0x54>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c2:	4a11      	ldr	r2, [pc, #68]	@ (8002608 <HAL_MspInit+0x54>)
 80025c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002608 <HAL_MspInit+0x54>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025d2:	607b      	str	r3, [r7, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	603b      	str	r3, [r7, #0]
 80025da:	4b0b      	ldr	r3, [pc, #44]	@ (8002608 <HAL_MspInit+0x54>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025de:	4a0a      	ldr	r2, [pc, #40]	@ (8002608 <HAL_MspInit+0x54>)
 80025e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025e6:	4b08      	ldr	r3, [pc, #32]	@ (8002608 <HAL_MspInit+0x54>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025f2:	2200      	movs	r2, #0
 80025f4:	210f      	movs	r1, #15
 80025f6:	f06f 0001 	mvn.w	r0, #1
 80025fa:	f001 f948 	bl	800388e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025fe:	bf00      	nop
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40023800 	.word	0x40023800

0800260c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08c      	sub	sp, #48	@ 0x30
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002614:	f107 031c 	add.w	r3, r7, #28
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	60da      	str	r2, [r3, #12]
 8002622:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a2e      	ldr	r2, [pc, #184]	@ (80026e4 <HAL_ADC_MspInit+0xd8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d128      	bne.n	8002680 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	4b2d      	ldr	r3, [pc, #180]	@ (80026e8 <HAL_ADC_MspInit+0xdc>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002636:	4a2c      	ldr	r2, [pc, #176]	@ (80026e8 <HAL_ADC_MspInit+0xdc>)
 8002638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263c:	6453      	str	r3, [r2, #68]	@ 0x44
 800263e:	4b2a      	ldr	r3, [pc, #168]	@ (80026e8 <HAL_ADC_MspInit+0xdc>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002646:	61bb      	str	r3, [r7, #24]
 8002648:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	4b26      	ldr	r3, [pc, #152]	@ (80026e8 <HAL_ADC_MspInit+0xdc>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	4a25      	ldr	r2, [pc, #148]	@ (80026e8 <HAL_ADC_MspInit+0xdc>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6313      	str	r3, [r2, #48]	@ 0x30
 800265a:	4b23      	ldr	r3, [pc, #140]	@ (80026e8 <HAL_ADC_MspInit+0xdc>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002666:	2301      	movs	r3, #1
 8002668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800266a:	2303      	movs	r3, #3
 800266c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002672:	f107 031c 	add.w	r3, r7, #28
 8002676:	4619      	mov	r1, r3
 8002678:	481c      	ldr	r0, [pc, #112]	@ (80026ec <HAL_ADC_MspInit+0xe0>)
 800267a:	f001 f9d1 	bl	8003a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800267e:	e02c      	b.n	80026da <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a1a      	ldr	r2, [pc, #104]	@ (80026f0 <HAL_ADC_MspInit+0xe4>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d127      	bne.n	80026da <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	4b16      	ldr	r3, [pc, #88]	@ (80026e8 <HAL_ADC_MspInit+0xdc>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002692:	4a15      	ldr	r2, [pc, #84]	@ (80026e8 <HAL_ADC_MspInit+0xdc>)
 8002694:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002698:	6453      	str	r3, [r2, #68]	@ 0x44
 800269a:	4b13      	ldr	r3, [pc, #76]	@ (80026e8 <HAL_ADC_MspInit+0xdc>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	4b0f      	ldr	r3, [pc, #60]	@ (80026e8 <HAL_ADC_MspInit+0xdc>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	4a0e      	ldr	r2, [pc, #56]	@ (80026e8 <HAL_ADC_MspInit+0xdc>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b6:	4b0c      	ldr	r3, [pc, #48]	@ (80026e8 <HAL_ADC_MspInit+0xdc>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80026c2:	2302      	movs	r3, #2
 80026c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026c6:	2303      	movs	r3, #3
 80026c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ce:	f107 031c 	add.w	r3, r7, #28
 80026d2:	4619      	mov	r1, r3
 80026d4:	4805      	ldr	r0, [pc, #20]	@ (80026ec <HAL_ADC_MspInit+0xe0>)
 80026d6:	f001 f9a3 	bl	8003a20 <HAL_GPIO_Init>
}
 80026da:	bf00      	nop
 80026dc:	3730      	adds	r7, #48	@ 0x30
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	40012000 	.word	0x40012000
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40020000 	.word	0x40020000
 80026f0:	40012100 	.word	0x40012100

080026f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08a      	sub	sp, #40	@ 0x28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a19      	ldr	r2, [pc, #100]	@ (8002778 <HAL_I2C_MspInit+0x84>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d12c      	bne.n	8002770 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	4b18      	ldr	r3, [pc, #96]	@ (800277c <HAL_I2C_MspInit+0x88>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271e:	4a17      	ldr	r2, [pc, #92]	@ (800277c <HAL_I2C_MspInit+0x88>)
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	6313      	str	r3, [r2, #48]	@ 0x30
 8002726:	4b15      	ldr	r3, [pc, #84]	@ (800277c <HAL_I2C_MspInit+0x88>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002732:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002738:	2312      	movs	r3, #18
 800273a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002740:	2303      	movs	r3, #3
 8002742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002744:	2304      	movs	r3, #4
 8002746:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	4619      	mov	r1, r3
 800274e:	480c      	ldr	r0, [pc, #48]	@ (8002780 <HAL_I2C_MspInit+0x8c>)
 8002750:	f001 f966 	bl	8003a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	4b08      	ldr	r3, [pc, #32]	@ (800277c <HAL_I2C_MspInit+0x88>)
 800275a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275c:	4a07      	ldr	r2, [pc, #28]	@ (800277c <HAL_I2C_MspInit+0x88>)
 800275e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002762:	6413      	str	r3, [r2, #64]	@ 0x40
 8002764:	4b05      	ldr	r3, [pc, #20]	@ (800277c <HAL_I2C_MspInit+0x88>)
 8002766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002768:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002770:	bf00      	nop
 8002772:	3728      	adds	r7, #40	@ 0x28
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40005400 	.word	0x40005400
 800277c:	40023800 	.word	0x40023800
 8002780:	40020400 	.word	0x40020400

08002784 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08e      	sub	sp, #56	@ 0x38
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a4a      	ldr	r2, [pc, #296]	@ (80028cc <HAL_TIM_Base_MspInit+0x148>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d10e      	bne.n	80027c4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	623b      	str	r3, [r7, #32]
 80027aa:	4b49      	ldr	r3, [pc, #292]	@ (80028d0 <HAL_TIM_Base_MspInit+0x14c>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ae:	4a48      	ldr	r2, [pc, #288]	@ (80028d0 <HAL_TIM_Base_MspInit+0x14c>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027b6:	4b46      	ldr	r3, [pc, #280]	@ (80028d0 <HAL_TIM_Base_MspInit+0x14c>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	623b      	str	r3, [r7, #32]
 80027c0:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80027c2:	e07f      	b.n	80028c4 <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM4)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a42      	ldr	r2, [pc, #264]	@ (80028d4 <HAL_TIM_Base_MspInit+0x150>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d135      	bne.n	800283a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	4b3f      	ldr	r3, [pc, #252]	@ (80028d0 <HAL_TIM_Base_MspInit+0x14c>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	4a3e      	ldr	r2, [pc, #248]	@ (80028d0 <HAL_TIM_Base_MspInit+0x14c>)
 80027d8:	f043 0304 	orr.w	r3, r3, #4
 80027dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80027de:	4b3c      	ldr	r3, [pc, #240]	@ (80028d0 <HAL_TIM_Base_MspInit+0x14c>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	61fb      	str	r3, [r7, #28]
 80027e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	4b38      	ldr	r3, [pc, #224]	@ (80028d0 <HAL_TIM_Base_MspInit+0x14c>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f2:	4a37      	ldr	r2, [pc, #220]	@ (80028d0 <HAL_TIM_Base_MspInit+0x14c>)
 80027f4:	f043 0308 	orr.w	r3, r3, #8
 80027f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027fa:	4b35      	ldr	r3, [pc, #212]	@ (80028d0 <HAL_TIM_Base_MspInit+0x14c>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	61bb      	str	r3, [r7, #24]
 8002804:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002806:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800280a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002814:	2300      	movs	r3, #0
 8002816:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002818:	2302      	movs	r3, #2
 800281a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800281c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002820:	4619      	mov	r1, r3
 8002822:	482d      	ldr	r0, [pc, #180]	@ (80028d8 <HAL_TIM_Base_MspInit+0x154>)
 8002824:	f001 f8fc 	bl	8003a20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002828:	2200      	movs	r2, #0
 800282a:	2105      	movs	r1, #5
 800282c:	201e      	movs	r0, #30
 800282e:	f001 f82e 	bl	800388e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002832:	201e      	movs	r0, #30
 8002834:	f001 f847 	bl	80038c6 <HAL_NVIC_EnableIRQ>
}
 8002838:	e044      	b.n	80028c4 <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM6)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a27      	ldr	r2, [pc, #156]	@ (80028dc <HAL_TIM_Base_MspInit+0x158>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d10e      	bne.n	8002862 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002844:	2300      	movs	r3, #0
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	4b21      	ldr	r3, [pc, #132]	@ (80028d0 <HAL_TIM_Base_MspInit+0x14c>)
 800284a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284c:	4a20      	ldr	r2, [pc, #128]	@ (80028d0 <HAL_TIM_Base_MspInit+0x14c>)
 800284e:	f043 0310 	orr.w	r3, r3, #16
 8002852:	6413      	str	r3, [r2, #64]	@ 0x40
 8002854:	4b1e      	ldr	r3, [pc, #120]	@ (80028d0 <HAL_TIM_Base_MspInit+0x14c>)
 8002856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	617b      	str	r3, [r7, #20]
 800285e:	697b      	ldr	r3, [r7, #20]
}
 8002860:	e030      	b.n	80028c4 <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM8)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1e      	ldr	r2, [pc, #120]	@ (80028e0 <HAL_TIM_Base_MspInit+0x15c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d12b      	bne.n	80028c4 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800286c:	2300      	movs	r3, #0
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	4b17      	ldr	r3, [pc, #92]	@ (80028d0 <HAL_TIM_Base_MspInit+0x14c>)
 8002872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002874:	4a16      	ldr	r2, [pc, #88]	@ (80028d0 <HAL_TIM_Base_MspInit+0x14c>)
 8002876:	f043 0302 	orr.w	r3, r3, #2
 800287a:	6453      	str	r3, [r2, #68]	@ 0x44
 800287c:	4b14      	ldr	r3, [pc, #80]	@ (80028d0 <HAL_TIM_Base_MspInit+0x14c>)
 800287e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	613b      	str	r3, [r7, #16]
 8002886:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	4b10      	ldr	r3, [pc, #64]	@ (80028d0 <HAL_TIM_Base_MspInit+0x14c>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002890:	4a0f      	ldr	r2, [pc, #60]	@ (80028d0 <HAL_TIM_Base_MspInit+0x14c>)
 8002892:	f043 0304 	orr.w	r3, r3, #4
 8002896:	6313      	str	r3, [r2, #48]	@ 0x30
 8002898:	4b0d      	ldr	r3, [pc, #52]	@ (80028d0 <HAL_TIM_Base_MspInit+0x14c>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028a4:	23c0      	movs	r3, #192	@ 0xc0
 80028a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a8:	2302      	movs	r3, #2
 80028aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b0:	2300      	movs	r3, #0
 80028b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80028b4:	2303      	movs	r3, #3
 80028b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028bc:	4619      	mov	r1, r3
 80028be:	4809      	ldr	r0, [pc, #36]	@ (80028e4 <HAL_TIM_Base_MspInit+0x160>)
 80028c0:	f001 f8ae 	bl	8003a20 <HAL_GPIO_Init>
}
 80028c4:	bf00      	nop
 80028c6:	3738      	adds	r7, #56	@ 0x38
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40010000 	.word	0x40010000
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40000800 	.word	0x40000800
 80028d8:	40020c00 	.word	0x40020c00
 80028dc:	40001000 	.word	0x40001000
 80028e0:	40010400 	.word	0x40010400
 80028e4:	40020800 	.word	0x40020800

080028e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08c      	sub	sp, #48	@ 0x30
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f0:	f107 031c 	add.w	r3, r7, #28
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002908:	d14b      	bne.n	80029a2 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	4b3f      	ldr	r3, [pc, #252]	@ (8002a0c <HAL_TIM_Encoder_MspInit+0x124>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	4a3e      	ldr	r2, [pc, #248]	@ (8002a0c <HAL_TIM_Encoder_MspInit+0x124>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6413      	str	r3, [r2, #64]	@ 0x40
 800291a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a0c <HAL_TIM_Encoder_MspInit+0x124>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	61bb      	str	r3, [r7, #24]
 8002924:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	4b38      	ldr	r3, [pc, #224]	@ (8002a0c <HAL_TIM_Encoder_MspInit+0x124>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	4a37      	ldr	r2, [pc, #220]	@ (8002a0c <HAL_TIM_Encoder_MspInit+0x124>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	6313      	str	r3, [r2, #48]	@ 0x30
 8002936:	4b35      	ldr	r3, [pc, #212]	@ (8002a0c <HAL_TIM_Encoder_MspInit+0x124>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	4b31      	ldr	r3, [pc, #196]	@ (8002a0c <HAL_TIM_Encoder_MspInit+0x124>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	4a30      	ldr	r2, [pc, #192]	@ (8002a0c <HAL_TIM_Encoder_MspInit+0x124>)
 800294c:	f043 0302 	orr.w	r3, r3, #2
 8002950:	6313      	str	r3, [r2, #48]	@ 0x30
 8002952:	4b2e      	ldr	r3, [pc, #184]	@ (8002a0c <HAL_TIM_Encoder_MspInit+0x124>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800295e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002964:	2302      	movs	r3, #2
 8002966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296c:	2300      	movs	r3, #0
 800296e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002970:	2301      	movs	r3, #1
 8002972:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002974:	f107 031c 	add.w	r3, r7, #28
 8002978:	4619      	mov	r1, r3
 800297a:	4825      	ldr	r0, [pc, #148]	@ (8002a10 <HAL_TIM_Encoder_MspInit+0x128>)
 800297c:	f001 f850 	bl	8003a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002980:	2308      	movs	r3, #8
 8002982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002990:	2301      	movs	r3, #1
 8002992:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002994:	f107 031c 	add.w	r3, r7, #28
 8002998:	4619      	mov	r1, r3
 800299a:	481e      	ldr	r0, [pc, #120]	@ (8002a14 <HAL_TIM_Encoder_MspInit+0x12c>)
 800299c:	f001 f840 	bl	8003a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80029a0:	e030      	b.n	8002a04 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a18 <HAL_TIM_Encoder_MspInit+0x130>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d12b      	bne.n	8002a04 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	4b16      	ldr	r3, [pc, #88]	@ (8002a0c <HAL_TIM_Encoder_MspInit+0x124>)
 80029b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b4:	4a15      	ldr	r2, [pc, #84]	@ (8002a0c <HAL_TIM_Encoder_MspInit+0x124>)
 80029b6:	f043 0302 	orr.w	r3, r3, #2
 80029ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80029bc:	4b13      	ldr	r3, [pc, #76]	@ (8002a0c <HAL_TIM_Encoder_MspInit+0x124>)
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c8:	2300      	movs	r3, #0
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	4b0f      	ldr	r3, [pc, #60]	@ (8002a0c <HAL_TIM_Encoder_MspInit+0x124>)
 80029ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d0:	4a0e      	ldr	r2, [pc, #56]	@ (8002a0c <HAL_TIM_Encoder_MspInit+0x124>)
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a0c <HAL_TIM_Encoder_MspInit+0x124>)
 80029da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029e4:	23c0      	movs	r3, #192	@ 0xc0
 80029e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e8:	2302      	movs	r3, #2
 80029ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f0:	2300      	movs	r3, #0
 80029f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029f4:	2302      	movs	r3, #2
 80029f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f8:	f107 031c 	add.w	r3, r7, #28
 80029fc:	4619      	mov	r1, r3
 80029fe:	4804      	ldr	r0, [pc, #16]	@ (8002a10 <HAL_TIM_Encoder_MspInit+0x128>)
 8002a00:	f001 f80e 	bl	8003a20 <HAL_GPIO_Init>
}
 8002a04:	bf00      	nop
 8002a06:	3730      	adds	r7, #48	@ 0x30
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40020000 	.word	0x40020000
 8002a14:	40020400 	.word	0x40020400
 8002a18:	40000400 	.word	0x40000400

08002a1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a24:	f107 030c 	add.w	r3, r7, #12
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	60da      	str	r2, [r3, #12]
 8002a32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a12      	ldr	r2, [pc, #72]	@ (8002a84 <HAL_TIM_MspPostInit+0x68>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d11e      	bne.n	8002a7c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	4b11      	ldr	r3, [pc, #68]	@ (8002a88 <HAL_TIM_MspPostInit+0x6c>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a46:	4a10      	ldr	r2, [pc, #64]	@ (8002a88 <HAL_TIM_MspPostInit+0x6c>)
 8002a48:	f043 0310 	orr.w	r3, r3, #16
 8002a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a88 <HAL_TIM_MspPostInit+0x6c>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002a5a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a60:	2302      	movs	r3, #2
 8002a62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a70:	f107 030c 	add.w	r3, r7, #12
 8002a74:	4619      	mov	r1, r3
 8002a76:	4805      	ldr	r0, [pc, #20]	@ (8002a8c <HAL_TIM_MspPostInit+0x70>)
 8002a78:	f000 ffd2 	bl	8003a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a7c:	bf00      	nop
 8002a7e:	3720      	adds	r7, #32
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40010000 	.word	0x40010000
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40021000 	.word	0x40021000

08002a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	@ 0x28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1d      	ldr	r2, [pc, #116]	@ (8002b24 <HAL_UART_MspInit+0x94>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d134      	bne.n	8002b1c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b28 <HAL_UART_MspInit+0x98>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	4a1b      	ldr	r2, [pc, #108]	@ (8002b28 <HAL_UART_MspInit+0x98>)
 8002abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ac0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ac2:	4b19      	ldr	r3, [pc, #100]	@ (8002b28 <HAL_UART_MspInit+0x98>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	4b15      	ldr	r3, [pc, #84]	@ (8002b28 <HAL_UART_MspInit+0x98>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	4a14      	ldr	r2, [pc, #80]	@ (8002b28 <HAL_UART_MspInit+0x98>)
 8002ad8:	f043 0304 	orr.w	r3, r3, #4
 8002adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ade:	4b12      	ldr	r3, [pc, #72]	@ (8002b28 <HAL_UART_MspInit+0x98>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002aea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af0:	2302      	movs	r3, #2
 8002af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af8:	2303      	movs	r3, #3
 8002afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002afc:	2307      	movs	r3, #7
 8002afe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b00:	f107 0314 	add.w	r3, r7, #20
 8002b04:	4619      	mov	r1, r3
 8002b06:	4809      	ldr	r0, [pc, #36]	@ (8002b2c <HAL_UART_MspInit+0x9c>)
 8002b08:	f000 ff8a 	bl	8003a20 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2105      	movs	r1, #5
 8002b10:	2027      	movs	r0, #39	@ 0x27
 8002b12:	f000 febc 	bl	800388e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002b16:	2027      	movs	r0, #39	@ 0x27
 8002b18:	f000 fed5 	bl	80038c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002b1c:	bf00      	nop
 8002b1e:	3728      	adds	r7, #40	@ 0x28
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40004800 	.word	0x40004800
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	40020800 	.word	0x40020800

08002b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b34:	bf00      	nop
 8002b36:	e7fd      	b.n	8002b34 <NMI_Handler+0x4>

08002b38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b3c:	bf00      	nop
 8002b3e:	e7fd      	b.n	8002b3c <HardFault_Handler+0x4>

08002b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b44:	bf00      	nop
 8002b46:	e7fd      	b.n	8002b44 <MemManage_Handler+0x4>

08002b48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b4c:	bf00      	nop
 8002b4e:	e7fd      	b.n	8002b4c <BusFault_Handler+0x4>

08002b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b54:	bf00      	nop
 8002b56:	e7fd      	b.n	8002b54 <UsageFault_Handler+0x4>

08002b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b6a:	f000 f971 	bl	8002e50 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002b6e:	f007 fbc3 	bl	800a2f8 <xTaskGetSchedulerState>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d001      	beq.n	8002b7c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002b78:	f008 f9be 	bl	800aef8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b7c:	bf00      	nop
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b84:	4802      	ldr	r0, [pc, #8]	@ (8002b90 <TIM4_IRQHandler+0x10>)
 8002b86:	f003 fa67 	bl	8006058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	200003ec 	.word	0x200003ec

08002b94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002b98:	4802      	ldr	r0, [pc, #8]	@ (8002ba4 <USART3_IRQHandler+0x10>)
 8002b9a:	f004 fc07 	bl	80073ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200004c4 	.word	0x200004c4

08002ba8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
	return 1;
 8002bac:	2301      	movs	r3, #1
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <_kill>:

int _kill(int pid, int sig)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002bc2:	f009 fc2f 	bl	800c424 <__errno>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2216      	movs	r2, #22
 8002bca:	601a      	str	r2, [r3, #0]
	return -1;
 8002bcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <_exit>:

void _exit (int status)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002be0:	f04f 31ff 	mov.w	r1, #4294967295
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ffe7 	bl	8002bb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bea:	bf00      	nop
 8002bec:	e7fd      	b.n	8002bea <_exit+0x12>

08002bee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b086      	sub	sp, #24
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	e00a      	b.n	8002c16 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c00:	f3af 8000 	nop.w
 8002c04:	4601      	mov	r1, r0
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	60ba      	str	r2, [r7, #8]
 8002c0c:	b2ca      	uxtb	r2, r1
 8002c0e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	3301      	adds	r3, #1
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	dbf0      	blt.n	8002c00 <_read+0x12>
	}

return len;
 8002c1e:	687b      	ldr	r3, [r7, #4]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	e009      	b.n	8002c4e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	60ba      	str	r2, [r7, #8]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	dbf1      	blt.n	8002c3a <_write+0x12>
	}
	return len;
 8002c56:	687b      	ldr	r3, [r7, #4]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <_close>:

int _close(int file)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
	return -1;
 8002c68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c88:	605a      	str	r2, [r3, #4]
	return 0;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <_isatty>:

int _isatty(int file)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	return 1;
 8002ca0:	2301      	movs	r3, #1
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b085      	sub	sp, #20
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
	return 0;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cd0:	4a14      	ldr	r2, [pc, #80]	@ (8002d24 <_sbrk+0x5c>)
 8002cd2:	4b15      	ldr	r3, [pc, #84]	@ (8002d28 <_sbrk+0x60>)
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cdc:	4b13      	ldr	r3, [pc, #76]	@ (8002d2c <_sbrk+0x64>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ce4:	4b11      	ldr	r3, [pc, #68]	@ (8002d2c <_sbrk+0x64>)
 8002ce6:	4a12      	ldr	r2, [pc, #72]	@ (8002d30 <_sbrk+0x68>)
 8002ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cea:	4b10      	ldr	r3, [pc, #64]	@ (8002d2c <_sbrk+0x64>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d207      	bcs.n	8002d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cf8:	f009 fb94 	bl	800c424 <__errno>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	220c      	movs	r2, #12
 8002d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d02:	f04f 33ff 	mov.w	r3, #4294967295
 8002d06:	e009      	b.n	8002d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d08:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <_sbrk+0x64>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d0e:	4b07      	ldr	r3, [pc, #28]	@ (8002d2c <_sbrk+0x64>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4413      	add	r3, r2
 8002d16:	4a05      	ldr	r2, [pc, #20]	@ (8002d2c <_sbrk+0x64>)
 8002d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20020000 	.word	0x20020000
 8002d28:	00000400 	.word	0x00000400
 8002d2c:	2000057c 	.word	0x2000057c
 8002d30:	20005420 	.word	0x20005420

08002d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d38:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <SystemInit+0x20>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d3e:	4a05      	ldr	r2, [pc, #20]	@ (8002d54 <SystemInit+0x20>)
 8002d40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d5c:	480d      	ldr	r0, [pc, #52]	@ (8002d94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d5e:	490e      	ldr	r1, [pc, #56]	@ (8002d98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d60:	4a0e      	ldr	r2, [pc, #56]	@ (8002d9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d64:	e002      	b.n	8002d6c <LoopCopyDataInit>

08002d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d6a:	3304      	adds	r3, #4

08002d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d70:	d3f9      	bcc.n	8002d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d72:	4a0b      	ldr	r2, [pc, #44]	@ (8002da0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d74:	4c0b      	ldr	r4, [pc, #44]	@ (8002da4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d78:	e001      	b.n	8002d7e <LoopFillZerobss>

08002d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d7c:	3204      	adds	r2, #4

08002d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d80:	d3fb      	bcc.n	8002d7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d82:	f7ff ffd7 	bl	8002d34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d86:	f009 fb53 	bl	800c430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d8a:	f7fe fa9f 	bl	80012cc <main>
  bx  lr    
 8002d8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d98:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002d9c:	0800f580 	.word	0x0800f580
  ldr r2, =_sbss
 8002da0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002da4:	20005420 	.word	0x20005420

08002da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002da8:	e7fe      	b.n	8002da8 <ADC_IRQHandler>
	...

08002dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002db0:	4b0e      	ldr	r3, [pc, #56]	@ (8002dec <HAL_Init+0x40>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a0d      	ldr	r2, [pc, #52]	@ (8002dec <HAL_Init+0x40>)
 8002db6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <HAL_Init+0x40>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8002dec <HAL_Init+0x40>)
 8002dc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dc8:	4b08      	ldr	r3, [pc, #32]	@ (8002dec <HAL_Init+0x40>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a07      	ldr	r2, [pc, #28]	@ (8002dec <HAL_Init+0x40>)
 8002dce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dd4:	2003      	movs	r0, #3
 8002dd6:	f000 fd4f 	bl	8003878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dda:	200f      	movs	r0, #15
 8002ddc:	f000 f808 	bl	8002df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002de0:	f7ff fbe8 	bl	80025b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40023c00 	.word	0x40023c00

08002df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002df8:	4b12      	ldr	r3, [pc, #72]	@ (8002e44 <HAL_InitTick+0x54>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4b12      	ldr	r3, [pc, #72]	@ (8002e48 <HAL_InitTick+0x58>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	4619      	mov	r1, r3
 8002e02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fd67 	bl	80038e2 <HAL_SYSTICK_Config>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e00e      	b.n	8002e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b0f      	cmp	r3, #15
 8002e22:	d80a      	bhi.n	8002e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e24:	2200      	movs	r2, #0
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	f04f 30ff 	mov.w	r0, #4294967295
 8002e2c:	f000 fd2f 	bl	800388e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e30:	4a06      	ldr	r2, [pc, #24]	@ (8002e4c <HAL_InitTick+0x5c>)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	e000      	b.n	8002e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	20000018 	.word	0x20000018
 8002e48:	20000020 	.word	0x20000020
 8002e4c:	2000001c 	.word	0x2000001c

08002e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e54:	4b06      	ldr	r3, [pc, #24]	@ (8002e70 <HAL_IncTick+0x20>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <HAL_IncTick+0x24>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4413      	add	r3, r2
 8002e60:	4a04      	ldr	r2, [pc, #16]	@ (8002e74 <HAL_IncTick+0x24>)
 8002e62:	6013      	str	r3, [r2, #0]
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	20000020 	.word	0x20000020
 8002e74:	20000580 	.word	0x20000580

08002e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e7c:	4b03      	ldr	r3, [pc, #12]	@ (8002e8c <HAL_GetTick+0x14>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000580 	.word	0x20000580

08002e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e98:	f7ff ffee 	bl	8002e78 <HAL_GetTick>
 8002e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea8:	d005      	beq.n	8002eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed4 <HAL_Delay+0x44>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002eb6:	bf00      	nop
 8002eb8:	f7ff ffde 	bl	8002e78 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d8f7      	bhi.n	8002eb8 <HAL_Delay+0x28>
  {
  }
}
 8002ec8:	bf00      	nop
 8002eca:	bf00      	nop
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000020 	.word	0x20000020

08002ed8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e033      	b.n	8002f56 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff fb88 	bl	800260c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d118      	bne.n	8002f48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f1e:	f023 0302 	bic.w	r3, r3, #2
 8002f22:	f043 0202 	orr.w	r2, r3, #2
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 fad8 	bl	80034e0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	f023 0303 	bic.w	r3, r3, #3
 8002f3e:	f043 0201 	orr.w	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f46:	e001      	b.n	8002f4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_ADC_Start+0x1a>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e0b2      	b.n	80030e0 <HAL_ADC_Start+0x180>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d018      	beq.n	8002fc2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fa0:	4b52      	ldr	r3, [pc, #328]	@ (80030ec <HAL_ADC_Start+0x18c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a52      	ldr	r2, [pc, #328]	@ (80030f0 <HAL_ADC_Start+0x190>)
 8002fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002faa:	0c9a      	lsrs	r2, r3, #18
 8002fac:	4613      	mov	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4413      	add	r3, r2
 8002fb2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002fb4:	e002      	b.n	8002fbc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f9      	bne.n	8002fb6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d17a      	bne.n	80030c6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002fd8:	f023 0301 	bic.w	r3, r3, #1
 8002fdc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d007      	beq.n	8003002 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ffa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800300a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800300e:	d106      	bne.n	800301e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003014:	f023 0206 	bic.w	r2, r3, #6
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	645a      	str	r2, [r3, #68]	@ 0x44
 800301c:	e002      	b.n	8003024 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800302c:	4b31      	ldr	r3, [pc, #196]	@ (80030f4 <HAL_ADC_Start+0x194>)
 800302e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003038:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 031f 	and.w	r3, r3, #31
 8003042:	2b00      	cmp	r3, #0
 8003044:	d12a      	bne.n	800309c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a2b      	ldr	r2, [pc, #172]	@ (80030f8 <HAL_ADC_Start+0x198>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d015      	beq.n	800307c <HAL_ADC_Start+0x11c>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a29      	ldr	r2, [pc, #164]	@ (80030fc <HAL_ADC_Start+0x19c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d105      	bne.n	8003066 <HAL_ADC_Start+0x106>
 800305a:	4b26      	ldr	r3, [pc, #152]	@ (80030f4 <HAL_ADC_Start+0x194>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a25      	ldr	r2, [pc, #148]	@ (8003100 <HAL_ADC_Start+0x1a0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d136      	bne.n	80030de <HAL_ADC_Start+0x17e>
 8003070:	4b20      	ldr	r3, [pc, #128]	@ (80030f4 <HAL_ADC_Start+0x194>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 0310 	and.w	r3, r3, #16
 8003078:	2b00      	cmp	r3, #0
 800307a:	d130      	bne.n	80030de <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d129      	bne.n	80030de <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003098:	609a      	str	r2, [r3, #8]
 800309a:	e020      	b.n	80030de <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a15      	ldr	r2, [pc, #84]	@ (80030f8 <HAL_ADC_Start+0x198>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d11b      	bne.n	80030de <HAL_ADC_Start+0x17e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d114      	bne.n	80030de <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	e00b      	b.n	80030de <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	f043 0210 	orr.w	r2, r3, #16
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d6:	f043 0201 	orr.w	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	20000018 	.word	0x20000018
 80030f0:	431bde83 	.word	0x431bde83
 80030f4:	40012300 	.word	0x40012300
 80030f8:	40012000 	.word	0x40012000
 80030fc:	40012100 	.word	0x40012100
 8003100:	40012200 	.word	0x40012200

08003104 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_ADC_Stop+0x16>
 8003116:	2302      	movs	r3, #2
 8003118:	e021      	b.n	800315e <HAL_ADC_Stop+0x5a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0201 	bic.w	r2, r2, #1
 8003130:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d109      	bne.n	8003154 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003144:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003148:	f023 0301 	bic.w	r3, r3, #1
 800314c:	f043 0201 	orr.w	r2, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr

0800316a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b084      	sub	sp, #16
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003186:	d113      	bne.n	80031b0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003196:	d10b      	bne.n	80031b0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	f043 0220 	orr.w	r2, r3, #32
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e063      	b.n	8003278 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80031b0:	f7ff fe62 	bl	8002e78 <HAL_GetTick>
 80031b4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031b6:	e021      	b.n	80031fc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031be:	d01d      	beq.n	80031fc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d007      	beq.n	80031d6 <HAL_ADC_PollForConversion+0x6c>
 80031c6:	f7ff fe57 	bl	8002e78 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d212      	bcs.n	80031fc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d00b      	beq.n	80031fc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	f043 0204 	orr.w	r2, r3, #4
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e03d      	b.n	8003278 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b02      	cmp	r3, #2
 8003208:	d1d6      	bne.n	80031b8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f06f 0212 	mvn.w	r2, #18
 8003212:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003218:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d123      	bne.n	8003276 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003232:	2b00      	cmp	r3, #0
 8003234:	d11f      	bne.n	8003276 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003240:	2b00      	cmp	r3, #0
 8003242:	d006      	beq.n	8003252 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800324e:	2b00      	cmp	r3, #0
 8003250:	d111      	bne.n	8003276 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003262:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d105      	bne.n	8003276 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	f043 0201 	orr.w	r2, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800328e:	4618      	mov	r0, r3
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x1c>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e105      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x228>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b09      	cmp	r3, #9
 80032c6:	d925      	bls.n	8003314 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68d9      	ldr	r1, [r3, #12]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	4613      	mov	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	4413      	add	r3, r2
 80032dc:	3b1e      	subs	r3, #30
 80032de:	2207      	movs	r2, #7
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43da      	mvns	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	400a      	ands	r2, r1
 80032ec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68d9      	ldr	r1, [r3, #12]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	4618      	mov	r0, r3
 8003300:	4603      	mov	r3, r0
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4403      	add	r3, r0
 8003306:	3b1e      	subs	r3, #30
 8003308:	409a      	lsls	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	430a      	orrs	r2, r1
 8003310:	60da      	str	r2, [r3, #12]
 8003312:	e022      	b.n	800335a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6919      	ldr	r1, [r3, #16]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	b29b      	uxth	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	2207      	movs	r2, #7
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43da      	mvns	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	400a      	ands	r2, r1
 8003336:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6919      	ldr	r1, [r3, #16]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	b29b      	uxth	r3, r3
 8003348:	4618      	mov	r0, r3
 800334a:	4603      	mov	r3, r0
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4403      	add	r3, r0
 8003350:	409a      	lsls	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b06      	cmp	r3, #6
 8003360:	d824      	bhi.n	80033ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	3b05      	subs	r3, #5
 8003374:	221f      	movs	r2, #31
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43da      	mvns	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	400a      	ands	r2, r1
 8003382:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	4618      	mov	r0, r3
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	3b05      	subs	r3, #5
 800339e:	fa00 f203 	lsl.w	r2, r0, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80033aa:	e04c      	b.n	8003446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b0c      	cmp	r3, #12
 80033b2:	d824      	bhi.n	80033fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	3b23      	subs	r3, #35	@ 0x23
 80033c6:	221f      	movs	r2, #31
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43da      	mvns	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	400a      	ands	r2, r1
 80033d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	4618      	mov	r0, r3
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	3b23      	subs	r3, #35	@ 0x23
 80033f0:	fa00 f203 	lsl.w	r2, r0, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80033fc:	e023      	b.n	8003446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	3b41      	subs	r3, #65	@ 0x41
 8003410:	221f      	movs	r2, #31
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43da      	mvns	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	400a      	ands	r2, r1
 800341e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	b29b      	uxth	r3, r3
 800342c:	4618      	mov	r0, r3
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	3b41      	subs	r3, #65	@ 0x41
 800343a:	fa00 f203 	lsl.w	r2, r0, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003446:	4b22      	ldr	r3, [pc, #136]	@ (80034d0 <HAL_ADC_ConfigChannel+0x234>)
 8003448:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a21      	ldr	r2, [pc, #132]	@ (80034d4 <HAL_ADC_ConfigChannel+0x238>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d109      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x1cc>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b12      	cmp	r3, #18
 800345a:	d105      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a19      	ldr	r2, [pc, #100]	@ (80034d4 <HAL_ADC_ConfigChannel+0x238>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d123      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x21e>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b10      	cmp	r3, #16
 8003478:	d003      	beq.n	8003482 <HAL_ADC_ConfigChannel+0x1e6>
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2b11      	cmp	r3, #17
 8003480:	d11b      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b10      	cmp	r3, #16
 8003494:	d111      	bne.n	80034ba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003496:	4b10      	ldr	r3, [pc, #64]	@ (80034d8 <HAL_ADC_ConfigChannel+0x23c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a10      	ldr	r2, [pc, #64]	@ (80034dc <HAL_ADC_ConfigChannel+0x240>)
 800349c:	fba2 2303 	umull	r2, r3, r2, r3
 80034a0:	0c9a      	lsrs	r2, r3, #18
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80034ac:	e002      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	3b01      	subs	r3, #1
 80034b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f9      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3714      	adds	r7, #20
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	40012300 	.word	0x40012300
 80034d4:	40012000 	.word	0x40012000
 80034d8:	20000018 	.word	0x20000018
 80034dc:	431bde83 	.word	0x431bde83

080034e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034e8:	4b79      	ldr	r3, [pc, #484]	@ (80036d0 <ADC_Init+0x1f0>)
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	431a      	orrs	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003514:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6859      	ldr	r1, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	021a      	lsls	r2, r3, #8
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003538:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6859      	ldr	r1, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800355a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6899      	ldr	r1, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003572:	4a58      	ldr	r2, [pc, #352]	@ (80036d4 <ADC_Init+0x1f4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d022      	beq.n	80035be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003586:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6899      	ldr	r1, [r3, #8]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80035a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6899      	ldr	r1, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	e00f      	b.n	80035de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80035dc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0202 	bic.w	r2, r2, #2
 80035ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6899      	ldr	r1, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	7e1b      	ldrb	r3, [r3, #24]
 80035f8:	005a      	lsls	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01b      	beq.n	8003644 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800361a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800362a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6859      	ldr	r1, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003636:	3b01      	subs	r3, #1
 8003638:	035a      	lsls	r2, r3, #13
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
 8003642:	e007      	b.n	8003654 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003652:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003662:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	3b01      	subs	r3, #1
 8003670:	051a      	lsls	r2, r3, #20
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003688:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6899      	ldr	r1, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003696:	025a      	lsls	r2, r3, #9
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6899      	ldr	r1, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	029a      	lsls	r2, r3, #10
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	609a      	str	r2, [r3, #8]
}
 80036c4:	bf00      	nop
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	40012300 	.word	0x40012300
 80036d4:	0f000001 	.word	0x0f000001

080036d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036e8:	4b0c      	ldr	r3, [pc, #48]	@ (800371c <__NVIC_SetPriorityGrouping+0x44>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036f4:	4013      	ands	r3, r2
 80036f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003700:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800370a:	4a04      	ldr	r2, [pc, #16]	@ (800371c <__NVIC_SetPriorityGrouping+0x44>)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	60d3      	str	r3, [r2, #12]
}
 8003710:	bf00      	nop
 8003712:	3714      	adds	r7, #20
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	e000ed00 	.word	0xe000ed00

08003720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003724:	4b04      	ldr	r3, [pc, #16]	@ (8003738 <__NVIC_GetPriorityGrouping+0x18>)
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	0a1b      	lsrs	r3, r3, #8
 800372a:	f003 0307 	and.w	r3, r3, #7
}
 800372e:	4618      	mov	r0, r3
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	e000ed00 	.word	0xe000ed00

0800373c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374a:	2b00      	cmp	r3, #0
 800374c:	db0b      	blt.n	8003766 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800374e:	79fb      	ldrb	r3, [r7, #7]
 8003750:	f003 021f 	and.w	r2, r3, #31
 8003754:	4907      	ldr	r1, [pc, #28]	@ (8003774 <__NVIC_EnableIRQ+0x38>)
 8003756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	2001      	movs	r0, #1
 800375e:	fa00 f202 	lsl.w	r2, r0, r2
 8003762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	e000e100 	.word	0xe000e100

08003778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	6039      	str	r1, [r7, #0]
 8003782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003788:	2b00      	cmp	r3, #0
 800378a:	db0a      	blt.n	80037a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	b2da      	uxtb	r2, r3
 8003790:	490c      	ldr	r1, [pc, #48]	@ (80037c4 <__NVIC_SetPriority+0x4c>)
 8003792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003796:	0112      	lsls	r2, r2, #4
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	440b      	add	r3, r1
 800379c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037a0:	e00a      	b.n	80037b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	4908      	ldr	r1, [pc, #32]	@ (80037c8 <__NVIC_SetPriority+0x50>)
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	3b04      	subs	r3, #4
 80037b0:	0112      	lsls	r2, r2, #4
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	440b      	add	r3, r1
 80037b6:	761a      	strb	r2, [r3, #24]
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	e000e100 	.word	0xe000e100
 80037c8:	e000ed00 	.word	0xe000ed00

080037cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b089      	sub	sp, #36	@ 0x24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f1c3 0307 	rsb	r3, r3, #7
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	bf28      	it	cs
 80037ea:	2304      	movcs	r3, #4
 80037ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	3304      	adds	r3, #4
 80037f2:	2b06      	cmp	r3, #6
 80037f4:	d902      	bls.n	80037fc <NVIC_EncodePriority+0x30>
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	3b03      	subs	r3, #3
 80037fa:	e000      	b.n	80037fe <NVIC_EncodePriority+0x32>
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003800:	f04f 32ff 	mov.w	r2, #4294967295
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43da      	mvns	r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	401a      	ands	r2, r3
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003814:	f04f 31ff 	mov.w	r1, #4294967295
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	fa01 f303 	lsl.w	r3, r1, r3
 800381e:	43d9      	mvns	r1, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003824:	4313      	orrs	r3, r2
         );
}
 8003826:	4618      	mov	r0, r3
 8003828:	3724      	adds	r7, #36	@ 0x24
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
	...

08003834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3b01      	subs	r3, #1
 8003840:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003844:	d301      	bcc.n	800384a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003846:	2301      	movs	r3, #1
 8003848:	e00f      	b.n	800386a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800384a:	4a0a      	ldr	r2, [pc, #40]	@ (8003874 <SysTick_Config+0x40>)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3b01      	subs	r3, #1
 8003850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003852:	210f      	movs	r1, #15
 8003854:	f04f 30ff 	mov.w	r0, #4294967295
 8003858:	f7ff ff8e 	bl	8003778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800385c:	4b05      	ldr	r3, [pc, #20]	@ (8003874 <SysTick_Config+0x40>)
 800385e:	2200      	movs	r2, #0
 8003860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003862:	4b04      	ldr	r3, [pc, #16]	@ (8003874 <SysTick_Config+0x40>)
 8003864:	2207      	movs	r2, #7
 8003866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	e000e010 	.word	0xe000e010

08003878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff ff29 	bl	80036d8 <__NVIC_SetPriorityGrouping>
}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800388e:	b580      	push	{r7, lr}
 8003890:	b086      	sub	sp, #24
 8003892:	af00      	add	r7, sp, #0
 8003894:	4603      	mov	r3, r0
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	607a      	str	r2, [r7, #4]
 800389a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038a0:	f7ff ff3e 	bl	8003720 <__NVIC_GetPriorityGrouping>
 80038a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	68b9      	ldr	r1, [r7, #8]
 80038aa:	6978      	ldr	r0, [r7, #20]
 80038ac:	f7ff ff8e 	bl	80037cc <NVIC_EncodePriority>
 80038b0:	4602      	mov	r2, r0
 80038b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b6:	4611      	mov	r1, r2
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff ff5d 	bl	8003778 <__NVIC_SetPriority>
}
 80038be:	bf00      	nop
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b082      	sub	sp, #8
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	4603      	mov	r3, r0
 80038ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff ff31 	bl	800373c <__NVIC_EnableIRQ>
}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff ffa2 	bl	8003834 <SysTick_Config>
 80038f0:	4603      	mov	r3, r0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003906:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003908:	f7ff fab6 	bl	8002e78 <HAL_GetTick>
 800390c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d008      	beq.n	800392c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2280      	movs	r2, #128	@ 0x80
 800391e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e052      	b.n	80039d2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0216 	bic.w	r2, r2, #22
 800393a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695a      	ldr	r2, [r3, #20]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800394a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003950:	2b00      	cmp	r3, #0
 8003952:	d103      	bne.n	800395c <HAL_DMA_Abort+0x62>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003958:	2b00      	cmp	r3, #0
 800395a:	d007      	beq.n	800396c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0208 	bic.w	r2, r2, #8
 800396a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0201 	bic.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800397c:	e013      	b.n	80039a6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800397e:	f7ff fa7b 	bl	8002e78 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b05      	cmp	r3, #5
 800398a:	d90c      	bls.n	80039a6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2203      	movs	r2, #3
 8003996:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e015      	b.n	80039d2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e4      	bne.n	800397e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039b8:	223f      	movs	r2, #63	@ 0x3f
 80039ba:	409a      	lsls	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d004      	beq.n	80039f8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2280      	movs	r2, #128	@ 0x80
 80039f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e00c      	b.n	8003a12 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2205      	movs	r2, #5
 80039fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0201 	bic.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
	...

08003a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b089      	sub	sp, #36	@ 0x24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	e16b      	b.n	8003d14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	f040 815a 	bne.w	8003d0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d005      	beq.n	8003a72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d130      	bne.n	8003ad4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	43db      	mvns	r3, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4013      	ands	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	f003 0201 	and.w	r2, r3, #1
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 0303 	and.w	r3, r3, #3
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d017      	beq.n	8003b10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	2203      	movs	r2, #3
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	43db      	mvns	r3, r3
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	4013      	ands	r3, r2
 8003af6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d123      	bne.n	8003b64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	08da      	lsrs	r2, r3, #3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3208      	adds	r2, #8
 8003b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	220f      	movs	r2, #15
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	08da      	lsrs	r2, r3, #3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3208      	adds	r2, #8
 8003b5e:	69b9      	ldr	r1, [r7, #24]
 8003b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	2203      	movs	r2, #3
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 0203 	and.w	r2, r3, #3
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 80b4 	beq.w	8003d0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	4b60      	ldr	r3, [pc, #384]	@ (8003d2c <HAL_GPIO_Init+0x30c>)
 8003bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bae:	4a5f      	ldr	r2, [pc, #380]	@ (8003d2c <HAL_GPIO_Init+0x30c>)
 8003bb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bb6:	4b5d      	ldr	r3, [pc, #372]	@ (8003d2c <HAL_GPIO_Init+0x30c>)
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bc2:	4a5b      	ldr	r2, [pc, #364]	@ (8003d30 <HAL_GPIO_Init+0x310>)
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	089b      	lsrs	r3, r3, #2
 8003bc8:	3302      	adds	r3, #2
 8003bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	220f      	movs	r2, #15
 8003bda:	fa02 f303 	lsl.w	r3, r2, r3
 8003bde:	43db      	mvns	r3, r3
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	4013      	ands	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a52      	ldr	r2, [pc, #328]	@ (8003d34 <HAL_GPIO_Init+0x314>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d02b      	beq.n	8003c46 <HAL_GPIO_Init+0x226>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a51      	ldr	r2, [pc, #324]	@ (8003d38 <HAL_GPIO_Init+0x318>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d025      	beq.n	8003c42 <HAL_GPIO_Init+0x222>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a50      	ldr	r2, [pc, #320]	@ (8003d3c <HAL_GPIO_Init+0x31c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d01f      	beq.n	8003c3e <HAL_GPIO_Init+0x21e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a4f      	ldr	r2, [pc, #316]	@ (8003d40 <HAL_GPIO_Init+0x320>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d019      	beq.n	8003c3a <HAL_GPIO_Init+0x21a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a4e      	ldr	r2, [pc, #312]	@ (8003d44 <HAL_GPIO_Init+0x324>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d013      	beq.n	8003c36 <HAL_GPIO_Init+0x216>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a4d      	ldr	r2, [pc, #308]	@ (8003d48 <HAL_GPIO_Init+0x328>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00d      	beq.n	8003c32 <HAL_GPIO_Init+0x212>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a4c      	ldr	r2, [pc, #304]	@ (8003d4c <HAL_GPIO_Init+0x32c>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d007      	beq.n	8003c2e <HAL_GPIO_Init+0x20e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a4b      	ldr	r2, [pc, #300]	@ (8003d50 <HAL_GPIO_Init+0x330>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d101      	bne.n	8003c2a <HAL_GPIO_Init+0x20a>
 8003c26:	2307      	movs	r3, #7
 8003c28:	e00e      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c2a:	2308      	movs	r3, #8
 8003c2c:	e00c      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c2e:	2306      	movs	r3, #6
 8003c30:	e00a      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c32:	2305      	movs	r3, #5
 8003c34:	e008      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c36:	2304      	movs	r3, #4
 8003c38:	e006      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e004      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e002      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <HAL_GPIO_Init+0x228>
 8003c46:	2300      	movs	r3, #0
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	f002 0203 	and.w	r2, r2, #3
 8003c4e:	0092      	lsls	r2, r2, #2
 8003c50:	4093      	lsls	r3, r2
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c58:	4935      	ldr	r1, [pc, #212]	@ (8003d30 <HAL_GPIO_Init+0x310>)
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	089b      	lsrs	r3, r3, #2
 8003c5e:	3302      	adds	r3, #2
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c66:	4b3b      	ldr	r3, [pc, #236]	@ (8003d54 <HAL_GPIO_Init+0x334>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c8a:	4a32      	ldr	r2, [pc, #200]	@ (8003d54 <HAL_GPIO_Init+0x334>)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c90:	4b30      	ldr	r3, [pc, #192]	@ (8003d54 <HAL_GPIO_Init+0x334>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cb4:	4a27      	ldr	r2, [pc, #156]	@ (8003d54 <HAL_GPIO_Init+0x334>)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cba:	4b26      	ldr	r3, [pc, #152]	@ (8003d54 <HAL_GPIO_Init+0x334>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cde:	4a1d      	ldr	r2, [pc, #116]	@ (8003d54 <HAL_GPIO_Init+0x334>)
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d54 <HAL_GPIO_Init+0x334>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d08:	4a12      	ldr	r2, [pc, #72]	@ (8003d54 <HAL_GPIO_Init+0x334>)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	3301      	adds	r3, #1
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	2b0f      	cmp	r3, #15
 8003d18:	f67f ae90 	bls.w	8003a3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	3724      	adds	r7, #36	@ 0x24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40013800 	.word	0x40013800
 8003d34:	40020000 	.word	0x40020000
 8003d38:	40020400 	.word	0x40020400
 8003d3c:	40020800 	.word	0x40020800
 8003d40:	40020c00 	.word	0x40020c00
 8003d44:	40021000 	.word	0x40021000
 8003d48:	40021400 	.word	0x40021400
 8003d4c:	40021800 	.word	0x40021800
 8003d50:	40021c00 	.word	0x40021c00
 8003d54:	40013c00 	.word	0x40013c00

08003d58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	887b      	ldrh	r3, [r7, #2]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d002      	beq.n	8003d76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d70:	2301      	movs	r3, #1
 8003d72:	73fb      	strb	r3, [r7, #15]
 8003d74:	e001      	b.n	8003d7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d76:	2300      	movs	r3, #0
 8003d78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	460b      	mov	r3, r1
 8003d92:	807b      	strh	r3, [r7, #2]
 8003d94:	4613      	mov	r3, r2
 8003d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d98:	787b      	ldrb	r3, [r7, #1]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d9e:	887a      	ldrh	r2, [r7, #2]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003da4:	e003      	b.n	8003dae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003da6:	887b      	ldrh	r3, [r7, #2]
 8003da8:	041a      	lsls	r2, r3, #16
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	619a      	str	r2, [r3, #24]
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b085      	sub	sp, #20
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003dcc:	887a      	ldrh	r2, [r7, #2]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	041a      	lsls	r2, r3, #16
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	43d9      	mvns	r1, r3
 8003dd8:	887b      	ldrh	r3, [r7, #2]
 8003dda:	400b      	ands	r3, r1
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	619a      	str	r2, [r3, #24]
}
 8003de2:	bf00      	nop
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
	...

08003df0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e12b      	b.n	800405a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7fe fc6c 	bl	80026f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2224      	movs	r2, #36	@ 0x24
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0201 	bic.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e54:	f001 fc48 	bl	80056e8 <HAL_RCC_GetPCLK1Freq>
 8003e58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	4a81      	ldr	r2, [pc, #516]	@ (8004064 <HAL_I2C_Init+0x274>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d807      	bhi.n	8003e74 <HAL_I2C_Init+0x84>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4a80      	ldr	r2, [pc, #512]	@ (8004068 <HAL_I2C_Init+0x278>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	bf94      	ite	ls
 8003e6c:	2301      	movls	r3, #1
 8003e6e:	2300      	movhi	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	e006      	b.n	8003e82 <HAL_I2C_Init+0x92>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4a7d      	ldr	r2, [pc, #500]	@ (800406c <HAL_I2C_Init+0x27c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	bf94      	ite	ls
 8003e7c:	2301      	movls	r3, #1
 8003e7e:	2300      	movhi	r3, #0
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e0e7      	b.n	800405a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4a78      	ldr	r2, [pc, #480]	@ (8004070 <HAL_I2C_Init+0x280>)
 8003e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e92:	0c9b      	lsrs	r3, r3, #18
 8003e94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	4a6a      	ldr	r2, [pc, #424]	@ (8004064 <HAL_I2C_Init+0x274>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d802      	bhi.n	8003ec4 <HAL_I2C_Init+0xd4>
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	e009      	b.n	8003ed8 <HAL_I2C_Init+0xe8>
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003eca:	fb02 f303 	mul.w	r3, r2, r3
 8003ece:	4a69      	ldr	r2, [pc, #420]	@ (8004074 <HAL_I2C_Init+0x284>)
 8003ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed4:	099b      	lsrs	r3, r3, #6
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6812      	ldr	r2, [r2, #0]
 8003edc:	430b      	orrs	r3, r1
 8003ede:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003eea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	495c      	ldr	r1, [pc, #368]	@ (8004064 <HAL_I2C_Init+0x274>)
 8003ef4:	428b      	cmp	r3, r1
 8003ef6:	d819      	bhi.n	8003f2c <HAL_I2C_Init+0x13c>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	1e59      	subs	r1, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f06:	1c59      	adds	r1, r3, #1
 8003f08:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f0c:	400b      	ands	r3, r1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <HAL_I2C_Init+0x138>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1e59      	subs	r1, r3, #1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f20:	3301      	adds	r3, #1
 8003f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f26:	e051      	b.n	8003fcc <HAL_I2C_Init+0x1dc>
 8003f28:	2304      	movs	r3, #4
 8003f2a:	e04f      	b.n	8003fcc <HAL_I2C_Init+0x1dc>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d111      	bne.n	8003f58 <HAL_I2C_Init+0x168>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	1e58      	subs	r0, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6859      	ldr	r1, [r3, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	440b      	add	r3, r1
 8003f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f46:	3301      	adds	r3, #1
 8003f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	bf0c      	ite	eq
 8003f50:	2301      	moveq	r3, #1
 8003f52:	2300      	movne	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	e012      	b.n	8003f7e <HAL_I2C_Init+0x18e>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	1e58      	subs	r0, r3, #1
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6859      	ldr	r1, [r3, #4]
 8003f60:	460b      	mov	r3, r1
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	0099      	lsls	r1, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f6e:	3301      	adds	r3, #1
 8003f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	bf0c      	ite	eq
 8003f78:	2301      	moveq	r3, #1
 8003f7a:	2300      	movne	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_I2C_Init+0x196>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e022      	b.n	8003fcc <HAL_I2C_Init+0x1dc>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10e      	bne.n	8003fac <HAL_I2C_Init+0x1bc>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	1e58      	subs	r0, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6859      	ldr	r1, [r3, #4]
 8003f96:	460b      	mov	r3, r1
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	440b      	add	r3, r1
 8003f9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003faa:	e00f      	b.n	8003fcc <HAL_I2C_Init+0x1dc>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	1e58      	subs	r0, r3, #1
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6859      	ldr	r1, [r3, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	0099      	lsls	r1, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	6809      	ldr	r1, [r1, #0]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69da      	ldr	r2, [r3, #28]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ffa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6911      	ldr	r1, [r2, #16]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	68d2      	ldr	r2, [r2, #12]
 8004006:	4311      	orrs	r1, r2
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	6812      	ldr	r2, [r2, #0]
 800400c:	430b      	orrs	r3, r1
 800400e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695a      	ldr	r2, [r3, #20]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0201 	orr.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	000186a0 	.word	0x000186a0
 8004068:	001e847f 	.word	0x001e847f
 800406c:	003d08ff 	.word	0x003d08ff
 8004070:	431bde83 	.word	0x431bde83
 8004074:	10624dd3 	.word	0x10624dd3

08004078 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b088      	sub	sp, #32
 800407c:	af02      	add	r7, sp, #8
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	4608      	mov	r0, r1
 8004082:	4611      	mov	r1, r2
 8004084:	461a      	mov	r2, r3
 8004086:	4603      	mov	r3, r0
 8004088:	817b      	strh	r3, [r7, #10]
 800408a:	460b      	mov	r3, r1
 800408c:	813b      	strh	r3, [r7, #8]
 800408e:	4613      	mov	r3, r2
 8004090:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004092:	f7fe fef1 	bl	8002e78 <HAL_GetTick>
 8004096:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	f040 80d9 	bne.w	8004258 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	9300      	str	r3, [sp, #0]
 80040aa:	2319      	movs	r3, #25
 80040ac:	2201      	movs	r2, #1
 80040ae:	496d      	ldr	r1, [pc, #436]	@ (8004264 <HAL_I2C_Mem_Write+0x1ec>)
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 fc8b 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80040bc:	2302      	movs	r3, #2
 80040be:	e0cc      	b.n	800425a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_I2C_Mem_Write+0x56>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e0c5      	b.n	800425a <HAL_I2C_Mem_Write+0x1e2>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d007      	beq.n	80040f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004102:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2221      	movs	r2, #33	@ 0x21
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2240      	movs	r2, #64	@ 0x40
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a3a      	ldr	r2, [r7, #32]
 800411e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004124:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4a4d      	ldr	r2, [pc, #308]	@ (8004268 <HAL_I2C_Mem_Write+0x1f0>)
 8004134:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004136:	88f8      	ldrh	r0, [r7, #6]
 8004138:	893a      	ldrh	r2, [r7, #8]
 800413a:	8979      	ldrh	r1, [r7, #10]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	4603      	mov	r3, r0
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 fac2 	bl	80046d0 <I2C_RequestMemoryWrite>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d052      	beq.n	80041f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e081      	b.n	800425a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f000 fd50 	bl	8004c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00d      	beq.n	8004182 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	2b04      	cmp	r3, #4
 800416c:	d107      	bne.n	800417e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800417c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e06b      	b.n	800425a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004186:	781a      	ldrb	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d11b      	bne.n	80041f8 <HAL_I2C_Mem_Write+0x180>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d017      	beq.n	80041f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041cc:	781a      	ldrb	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	3b01      	subs	r3, #1
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1aa      	bne.n	8004156 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 fd43 	bl	8004c90 <I2C_WaitOnBTFFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00d      	beq.n	800422c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004214:	2b04      	cmp	r3, #4
 8004216:	d107      	bne.n	8004228 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004226:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e016      	b.n	800425a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800423a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	e000      	b.n	800425a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004258:	2302      	movs	r3, #2
  }
}
 800425a:	4618      	mov	r0, r3
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	00100002 	.word	0x00100002
 8004268:	ffff0000 	.word	0xffff0000

0800426c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08c      	sub	sp, #48	@ 0x30
 8004270:	af02      	add	r7, sp, #8
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	4608      	mov	r0, r1
 8004276:	4611      	mov	r1, r2
 8004278:	461a      	mov	r2, r3
 800427a:	4603      	mov	r3, r0
 800427c:	817b      	strh	r3, [r7, #10]
 800427e:	460b      	mov	r3, r1
 8004280:	813b      	strh	r3, [r7, #8]
 8004282:	4613      	mov	r3, r2
 8004284:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004286:	f7fe fdf7 	bl	8002e78 <HAL_GetTick>
 800428a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004292:	b2db      	uxtb	r3, r3
 8004294:	2b20      	cmp	r3, #32
 8004296:	f040 8214 	bne.w	80046c2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800429a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	2319      	movs	r3, #25
 80042a0:	2201      	movs	r2, #1
 80042a2:	497b      	ldr	r1, [pc, #492]	@ (8004490 <HAL_I2C_Mem_Read+0x224>)
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 fb91 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80042b0:	2302      	movs	r3, #2
 80042b2:	e207      	b.n	80046c4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_I2C_Mem_Read+0x56>
 80042be:	2302      	movs	r3, #2
 80042c0:	e200      	b.n	80046c4 <HAL_I2C_Mem_Read+0x458>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d007      	beq.n	80042e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2222      	movs	r2, #34	@ 0x22
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2240      	movs	r2, #64	@ 0x40
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004312:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004318:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4a5b      	ldr	r2, [pc, #364]	@ (8004494 <HAL_I2C_Mem_Read+0x228>)
 8004328:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800432a:	88f8      	ldrh	r0, [r7, #6]
 800432c:	893a      	ldrh	r2, [r7, #8]
 800432e:	8979      	ldrh	r1, [r7, #10]
 8004330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004332:	9301      	str	r3, [sp, #4]
 8004334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	4603      	mov	r3, r0
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 fa5e 	bl	80047fc <I2C_RequestMemoryRead>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e1bc      	b.n	80046c4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434e:	2b00      	cmp	r3, #0
 8004350:	d113      	bne.n	800437a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004352:	2300      	movs	r3, #0
 8004354:	623b      	str	r3, [r7, #32]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	623b      	str	r3, [r7, #32]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	623b      	str	r3, [r7, #32]
 8004366:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	e190      	b.n	800469c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800437e:	2b01      	cmp	r3, #1
 8004380:	d11b      	bne.n	80043ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004390:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004392:	2300      	movs	r3, #0
 8004394:	61fb      	str	r3, [r7, #28]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	61fb      	str	r3, [r7, #28]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	61fb      	str	r3, [r7, #28]
 80043a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	e170      	b.n	800469c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d11b      	bne.n	80043fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e2:	2300      	movs	r3, #0
 80043e4:	61bb      	str	r3, [r7, #24]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	61bb      	str	r3, [r7, #24]
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	e150      	b.n	800469c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fa:	2300      	movs	r3, #0
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	617b      	str	r3, [r7, #20]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004410:	e144      	b.n	800469c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004416:	2b03      	cmp	r3, #3
 8004418:	f200 80f1 	bhi.w	80045fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004420:	2b01      	cmp	r3, #1
 8004422:	d123      	bne.n	800446c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004426:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 fc79 	bl	8004d20 <I2C_WaitOnRXNEFlagUntilTimeout>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e145      	b.n	80046c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29a      	uxth	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800446a:	e117      	b.n	800469c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004470:	2b02      	cmp	r3, #2
 8004472:	d14e      	bne.n	8004512 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800447a:	2200      	movs	r2, #0
 800447c:	4906      	ldr	r1, [pc, #24]	@ (8004498 <HAL_I2C_Mem_Read+0x22c>)
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f000 faa4 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d008      	beq.n	800449c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e11a      	b.n	80046c4 <HAL_I2C_Mem_Read+0x458>
 800448e:	bf00      	nop
 8004490:	00100002 	.word	0x00100002
 8004494:	ffff0000 	.word	0xffff0000
 8004498:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e8:	b2d2      	uxtb	r2, r2
 80044ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004510:	e0c4      	b.n	800469c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004518:	2200      	movs	r2, #0
 800451a:	496c      	ldr	r1, [pc, #432]	@ (80046cc <HAL_I2C_Mem_Read+0x460>)
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 fa55 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0cb      	b.n	80046c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800453a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004546:	b2d2      	uxtb	r2, r2
 8004548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29a      	uxth	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004574:	2200      	movs	r2, #0
 8004576:	4955      	ldr	r1, [pc, #340]	@ (80046cc <HAL_I2C_Mem_Read+0x460>)
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 fa27 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e09d      	b.n	80046c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004596:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691a      	ldr	r2, [r3, #16]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e6:	3b01      	subs	r3, #1
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045fc:	e04e      	b.n	800469c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004600:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 fb8c 	bl	8004d20 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e058      	b.n	80046c4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f003 0304 	and.w	r3, r3, #4
 800464e:	2b04      	cmp	r3, #4
 8004650:	d124      	bne.n	800469c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004656:	2b03      	cmp	r3, #3
 8004658:	d107      	bne.n	800466a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004668:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004692:	b29b      	uxth	r3, r3
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f47f aeb6 	bne.w	8004412 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	e000      	b.n	80046c4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
  }
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3728      	adds	r7, #40	@ 0x28
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	00010004 	.word	0x00010004

080046d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	4608      	mov	r0, r1
 80046da:	4611      	mov	r1, r2
 80046dc:	461a      	mov	r2, r3
 80046de:	4603      	mov	r3, r0
 80046e0:	817b      	strh	r3, [r7, #10]
 80046e2:	460b      	mov	r3, r1
 80046e4:	813b      	strh	r3, [r7, #8]
 80046e6:	4613      	mov	r3, r2
 80046e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	2200      	movs	r2, #0
 8004702:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 f960 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00d      	beq.n	800472e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800471c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004720:	d103      	bne.n	800472a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004728:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e05f      	b.n	80047ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800472e:	897b      	ldrh	r3, [r7, #10]
 8004730:	b2db      	uxtb	r3, r3
 8004732:	461a      	mov	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800473c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	6a3a      	ldr	r2, [r7, #32]
 8004742:	492d      	ldr	r1, [pc, #180]	@ (80047f8 <I2C_RequestMemoryWrite+0x128>)
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f9bb 	bl	8004ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e04c      	b.n	80047ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	617b      	str	r3, [r7, #20]
 8004768:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800476a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800476c:	6a39      	ldr	r1, [r7, #32]
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 fa46 	bl	8004c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00d      	beq.n	8004796 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477e:	2b04      	cmp	r3, #4
 8004780:	d107      	bne.n	8004792 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004790:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e02b      	b.n	80047ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d105      	bne.n	80047a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800479c:	893b      	ldrh	r3, [r7, #8]
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	611a      	str	r2, [r3, #16]
 80047a6:	e021      	b.n	80047ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047a8:	893b      	ldrh	r3, [r7, #8]
 80047aa:	0a1b      	lsrs	r3, r3, #8
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b8:	6a39      	ldr	r1, [r7, #32]
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 fa20 	bl	8004c00 <I2C_WaitOnTXEFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00d      	beq.n	80047e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d107      	bne.n	80047de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e005      	b.n	80047ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047e2:	893b      	ldrh	r3, [r7, #8]
 80047e4:	b2da      	uxtb	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3718      	adds	r7, #24
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	00010002 	.word	0x00010002

080047fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af02      	add	r7, sp, #8
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	4608      	mov	r0, r1
 8004806:	4611      	mov	r1, r2
 8004808:	461a      	mov	r2, r3
 800480a:	4603      	mov	r3, r0
 800480c:	817b      	strh	r3, [r7, #10]
 800480e:	460b      	mov	r3, r1
 8004810:	813b      	strh	r3, [r7, #8]
 8004812:	4613      	mov	r3, r2
 8004814:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004824:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004834:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	2200      	movs	r2, #0
 800483e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f8c2 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00d      	beq.n	800486a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004858:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800485c:	d103      	bne.n	8004866 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004864:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e0aa      	b.n	80049c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800486a:	897b      	ldrh	r3, [r7, #10]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	461a      	mov	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004878:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800487a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487c:	6a3a      	ldr	r2, [r7, #32]
 800487e:	4952      	ldr	r1, [pc, #328]	@ (80049c8 <I2C_RequestMemoryRead+0x1cc>)
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 f91d 	bl	8004ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e097      	b.n	80049c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004890:	2300      	movs	r3, #0
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	617b      	str	r3, [r7, #20]
 80048a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048a8:	6a39      	ldr	r1, [r7, #32]
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f9a8 	bl	8004c00 <I2C_WaitOnTXEFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00d      	beq.n	80048d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d107      	bne.n	80048ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e076      	b.n	80049c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d105      	bne.n	80048e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048d8:	893b      	ldrh	r3, [r7, #8]
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	611a      	str	r2, [r3, #16]
 80048e2:	e021      	b.n	8004928 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048e4:	893b      	ldrh	r3, [r7, #8]
 80048e6:	0a1b      	lsrs	r3, r3, #8
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048f4:	6a39      	ldr	r1, [r7, #32]
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f982 	bl	8004c00 <I2C_WaitOnTXEFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00d      	beq.n	800491e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004906:	2b04      	cmp	r3, #4
 8004908:	d107      	bne.n	800491a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004918:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e050      	b.n	80049c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800491e:	893b      	ldrh	r3, [r7, #8]
 8004920:	b2da      	uxtb	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800492a:	6a39      	ldr	r1, [r7, #32]
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f967 	bl	8004c00 <I2C_WaitOnTXEFlagUntilTimeout>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00d      	beq.n	8004954 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493c:	2b04      	cmp	r3, #4
 800493e:	d107      	bne.n	8004950 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800494e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e035      	b.n	80049c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004962:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	2200      	movs	r2, #0
 800496c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f82b 	bl	80049cc <I2C_WaitOnFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00d      	beq.n	8004998 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800498a:	d103      	bne.n	8004994 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004992:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e013      	b.n	80049c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004998:	897b      	ldrh	r3, [r7, #10]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	f043 0301 	orr.w	r3, r3, #1
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049aa:	6a3a      	ldr	r2, [r7, #32]
 80049ac:	4906      	ldr	r1, [pc, #24]	@ (80049c8 <I2C_RequestMemoryRead+0x1cc>)
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 f886 	bl	8004ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	00010002 	.word	0x00010002

080049cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049dc:	e048      	b.n	8004a70 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e4:	d044      	beq.n	8004a70 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e6:	f7fe fa47 	bl	8002e78 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d302      	bcc.n	80049fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d139      	bne.n	8004a70 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	0c1b      	lsrs	r3, r3, #16
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d10d      	bne.n	8004a22 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	43da      	mvns	r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	4013      	ands	r3, r2
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	bf0c      	ite	eq
 8004a18:	2301      	moveq	r3, #1
 8004a1a:	2300      	movne	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	461a      	mov	r2, r3
 8004a20:	e00c      	b.n	8004a3c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	43da      	mvns	r2, r3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	bf0c      	ite	eq
 8004a34:	2301      	moveq	r3, #1
 8004a36:	2300      	movne	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	79fb      	ldrb	r3, [r7, #7]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d116      	bne.n	8004a70 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5c:	f043 0220 	orr.w	r2, r3, #32
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e023      	b.n	8004ab8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	0c1b      	lsrs	r3, r3, #16
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d10d      	bne.n	8004a96 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	43da      	mvns	r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	4013      	ands	r3, r2
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	bf0c      	ite	eq
 8004a8c:	2301      	moveq	r3, #1
 8004a8e:	2300      	movne	r3, #0
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	461a      	mov	r2, r3
 8004a94:	e00c      	b.n	8004ab0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	699b      	ldr	r3, [r3, #24]
 8004a9c:	43da      	mvns	r2, r3
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	bf0c      	ite	eq
 8004aa8:	2301      	moveq	r3, #1
 8004aaa:	2300      	movne	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	79fb      	ldrb	r3, [r7, #7]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d093      	beq.n	80049de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ab6:	2300      	movs	r3, #0
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ace:	e071      	b.n	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ade:	d123      	bne.n	8004b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004af8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b14:	f043 0204 	orr.w	r2, r3, #4
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e067      	b.n	8004bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2e:	d041      	beq.n	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b30:	f7fe f9a2 	bl	8002e78 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d302      	bcc.n	8004b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d136      	bne.n	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	0c1b      	lsrs	r3, r3, #16
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d10c      	bne.n	8004b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	43da      	mvns	r2, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	bf14      	ite	ne
 8004b62:	2301      	movne	r3, #1
 8004b64:	2300      	moveq	r3, #0
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	e00b      	b.n	8004b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	43da      	mvns	r2, r3
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	4013      	ands	r3, r2
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bf14      	ite	ne
 8004b7c:	2301      	movne	r3, #1
 8004b7e:	2300      	moveq	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d016      	beq.n	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba0:	f043 0220 	orr.w	r2, r3, #32
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e021      	b.n	8004bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	0c1b      	lsrs	r3, r3, #16
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d10c      	bne.n	8004bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	43da      	mvns	r2, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bf14      	ite	ne
 8004bd0:	2301      	movne	r3, #1
 8004bd2:	2300      	moveq	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	e00b      	b.n	8004bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	43da      	mvns	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4013      	ands	r3, r2
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	bf14      	ite	ne
 8004bea:	2301      	movne	r3, #1
 8004bec:	2300      	moveq	r3, #0
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f47f af6d 	bne.w	8004ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c0c:	e034      	b.n	8004c78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 f8e3 	bl	8004dda <I2C_IsAcknowledgeFailed>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e034      	b.n	8004c88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c24:	d028      	beq.n	8004c78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c26:	f7fe f927 	bl	8002e78 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d302      	bcc.n	8004c3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d11d      	bne.n	8004c78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c46:	2b80      	cmp	r3, #128	@ 0x80
 8004c48:	d016      	beq.n	8004c78 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c64:	f043 0220 	orr.w	r2, r3, #32
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e007      	b.n	8004c88 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c82:	2b80      	cmp	r3, #128	@ 0x80
 8004c84:	d1c3      	bne.n	8004c0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c9c:	e034      	b.n	8004d08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f89b 	bl	8004dda <I2C_IsAcknowledgeFailed>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e034      	b.n	8004d18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb4:	d028      	beq.n	8004d08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb6:	f7fe f8df 	bl	8002e78 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d302      	bcc.n	8004ccc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d11d      	bne.n	8004d08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	f003 0304 	and.w	r3, r3, #4
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d016      	beq.n	8004d08 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf4:	f043 0220 	orr.w	r2, r3, #32
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e007      	b.n	8004d18 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d1c3      	bne.n	8004c9e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d2c:	e049      	b.n	8004dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	f003 0310 	and.w	r3, r3, #16
 8004d38:	2b10      	cmp	r3, #16
 8004d3a:	d119      	bne.n	8004d70 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f06f 0210 	mvn.w	r2, #16
 8004d44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e030      	b.n	8004dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d70:	f7fe f882 	bl	8002e78 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d302      	bcc.n	8004d86 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d11d      	bne.n	8004dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d90:	2b40      	cmp	r3, #64	@ 0x40
 8004d92:	d016      	beq.n	8004dc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dae:	f043 0220 	orr.w	r2, r3, #32
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e007      	b.n	8004dd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dcc:	2b40      	cmp	r3, #64	@ 0x40
 8004dce:	d1ae      	bne.n	8004d2e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004df0:	d11b      	bne.n	8004e2a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004dfa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e16:	f043 0204 	orr.w	r2, r3, #4
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004e3e:	4b06      	ldr	r3, [pc, #24]	@ (8004e58 <HAL_PWR_EnableBkUpAccess+0x20>)
 8004e40:	2201      	movs	r2, #1
 8004e42:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004e44:	4b05      	ldr	r3, [pc, #20]	@ (8004e5c <HAL_PWR_EnableBkUpAccess+0x24>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004e4a:	687b      	ldr	r3, [r7, #4]
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	420e0020 	.word	0x420e0020
 8004e5c:	40007000 	.word	0x40007000

08004e60 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8004e66:	4b06      	ldr	r3, [pc, #24]	@ (8004e80 <HAL_PWR_DisableBkUpAccess+0x20>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004e6c:	4b05      	ldr	r3, [pc, #20]	@ (8004e84 <HAL_PWR_DisableBkUpAccess+0x24>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004e72:	687b      	ldr	r3, [r7, #4]
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	420e0020 	.word	0x420e0020
 8004e84:	40007000 	.word	0x40007000

08004e88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e267      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d075      	beq.n	8004f92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ea6:	4b88      	ldr	r3, [pc, #544]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 030c 	and.w	r3, r3, #12
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d00c      	beq.n	8004ecc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eb2:	4b85      	ldr	r3, [pc, #532]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	d112      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ebe:	4b82      	ldr	r3, [pc, #520]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ec6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004eca:	d10b      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ecc:	4b7e      	ldr	r3, [pc, #504]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d05b      	beq.n	8004f90 <HAL_RCC_OscConfig+0x108>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d157      	bne.n	8004f90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e242      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eec:	d106      	bne.n	8004efc <HAL_RCC_OscConfig+0x74>
 8004eee:	4b76      	ldr	r3, [pc, #472]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a75      	ldr	r2, [pc, #468]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	e01d      	b.n	8004f38 <HAL_RCC_OscConfig+0xb0>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f04:	d10c      	bne.n	8004f20 <HAL_RCC_OscConfig+0x98>
 8004f06:	4b70      	ldr	r3, [pc, #448]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a6f      	ldr	r2, [pc, #444]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004f0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f10:	6013      	str	r3, [r2, #0]
 8004f12:	4b6d      	ldr	r3, [pc, #436]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a6c      	ldr	r2, [pc, #432]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f1c:	6013      	str	r3, [r2, #0]
 8004f1e:	e00b      	b.n	8004f38 <HAL_RCC_OscConfig+0xb0>
 8004f20:	4b69      	ldr	r3, [pc, #420]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a68      	ldr	r2, [pc, #416]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f2a:	6013      	str	r3, [r2, #0]
 8004f2c:	4b66      	ldr	r3, [pc, #408]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a65      	ldr	r2, [pc, #404]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004f32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d013      	beq.n	8004f68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f40:	f7fd ff9a 	bl	8002e78 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f48:	f7fd ff96 	bl	8002e78 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b64      	cmp	r3, #100	@ 0x64
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e207      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f5a:	4b5b      	ldr	r3, [pc, #364]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0f0      	beq.n	8004f48 <HAL_RCC_OscConfig+0xc0>
 8004f66:	e014      	b.n	8004f92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f68:	f7fd ff86 	bl	8002e78 <HAL_GetTick>
 8004f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f70:	f7fd ff82 	bl	8002e78 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b64      	cmp	r3, #100	@ 0x64
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e1f3      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f82:	4b51      	ldr	r3, [pc, #324]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1f0      	bne.n	8004f70 <HAL_RCC_OscConfig+0xe8>
 8004f8e:	e000      	b.n	8004f92 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d063      	beq.n	8005066 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 030c 	and.w	r3, r3, #12
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00b      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004faa:	4b47      	ldr	r3, [pc, #284]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004fb2:	2b08      	cmp	r3, #8
 8004fb4:	d11c      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fb6:	4b44      	ldr	r3, [pc, #272]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d116      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fc2:	4b41      	ldr	r3, [pc, #260]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <HAL_RCC_OscConfig+0x152>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d001      	beq.n	8004fda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e1c7      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fda:	4b3b      	ldr	r3, [pc, #236]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	4937      	ldr	r1, [pc, #220]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fee:	e03a      	b.n	8005066 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d020      	beq.n	800503a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ff8:	4b34      	ldr	r3, [pc, #208]	@ (80050cc <HAL_RCC_OscConfig+0x244>)
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffe:	f7fd ff3b 	bl	8002e78 <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005006:	f7fd ff37 	bl	8002e78 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e1a8      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005018:	4b2b      	ldr	r3, [pc, #172]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0f0      	beq.n	8005006 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005024:	4b28      	ldr	r3, [pc, #160]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	4925      	ldr	r1, [pc, #148]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 8005034:	4313      	orrs	r3, r2
 8005036:	600b      	str	r3, [r1, #0]
 8005038:	e015      	b.n	8005066 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800503a:	4b24      	ldr	r3, [pc, #144]	@ (80050cc <HAL_RCC_OscConfig+0x244>)
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005040:	f7fd ff1a 	bl	8002e78 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005048:	f7fd ff16 	bl	8002e78 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e187      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800505a:	4b1b      	ldr	r3, [pc, #108]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1f0      	bne.n	8005048 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b00      	cmp	r3, #0
 8005070:	d036      	beq.n	80050e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d016      	beq.n	80050a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800507a:	4b15      	ldr	r3, [pc, #84]	@ (80050d0 <HAL_RCC_OscConfig+0x248>)
 800507c:	2201      	movs	r2, #1
 800507e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005080:	f7fd fefa 	bl	8002e78 <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005088:	f7fd fef6 	bl	8002e78 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e167      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800509a:	4b0b      	ldr	r3, [pc, #44]	@ (80050c8 <HAL_RCC_OscConfig+0x240>)
 800509c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f0      	beq.n	8005088 <HAL_RCC_OscConfig+0x200>
 80050a6:	e01b      	b.n	80050e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050a8:	4b09      	ldr	r3, [pc, #36]	@ (80050d0 <HAL_RCC_OscConfig+0x248>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ae:	f7fd fee3 	bl	8002e78 <HAL_GetTick>
 80050b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b4:	e00e      	b.n	80050d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050b6:	f7fd fedf 	bl	8002e78 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d907      	bls.n	80050d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e150      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
 80050c8:	40023800 	.word	0x40023800
 80050cc:	42470000 	.word	0x42470000
 80050d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d4:	4b88      	ldr	r3, [pc, #544]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 80050d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1ea      	bne.n	80050b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 8097 	beq.w	800521c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ee:	2300      	movs	r3, #0
 80050f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050f2:	4b81      	ldr	r3, [pc, #516]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 80050f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10f      	bne.n	800511e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050fe:	2300      	movs	r3, #0
 8005100:	60bb      	str	r3, [r7, #8]
 8005102:	4b7d      	ldr	r3, [pc, #500]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005106:	4a7c      	ldr	r2, [pc, #496]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 8005108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800510c:	6413      	str	r3, [r2, #64]	@ 0x40
 800510e:	4b7a      	ldr	r3, [pc, #488]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005116:	60bb      	str	r3, [r7, #8]
 8005118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800511a:	2301      	movs	r3, #1
 800511c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800511e:	4b77      	ldr	r3, [pc, #476]	@ (80052fc <HAL_RCC_OscConfig+0x474>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005126:	2b00      	cmp	r3, #0
 8005128:	d118      	bne.n	800515c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800512a:	4b74      	ldr	r3, [pc, #464]	@ (80052fc <HAL_RCC_OscConfig+0x474>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a73      	ldr	r2, [pc, #460]	@ (80052fc <HAL_RCC_OscConfig+0x474>)
 8005130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005136:	f7fd fe9f 	bl	8002e78 <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800513c:	e008      	b.n	8005150 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800513e:	f7fd fe9b 	bl	8002e78 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e10c      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005150:	4b6a      	ldr	r3, [pc, #424]	@ (80052fc <HAL_RCC_OscConfig+0x474>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0f0      	beq.n	800513e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d106      	bne.n	8005172 <HAL_RCC_OscConfig+0x2ea>
 8005164:	4b64      	ldr	r3, [pc, #400]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 8005166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005168:	4a63      	ldr	r2, [pc, #396]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 800516a:	f043 0301 	orr.w	r3, r3, #1
 800516e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005170:	e01c      	b.n	80051ac <HAL_RCC_OscConfig+0x324>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2b05      	cmp	r3, #5
 8005178:	d10c      	bne.n	8005194 <HAL_RCC_OscConfig+0x30c>
 800517a:	4b5f      	ldr	r3, [pc, #380]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 800517c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800517e:	4a5e      	ldr	r2, [pc, #376]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 8005180:	f043 0304 	orr.w	r3, r3, #4
 8005184:	6713      	str	r3, [r2, #112]	@ 0x70
 8005186:	4b5c      	ldr	r3, [pc, #368]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 8005188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800518a:	4a5b      	ldr	r2, [pc, #364]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 800518c:	f043 0301 	orr.w	r3, r3, #1
 8005190:	6713      	str	r3, [r2, #112]	@ 0x70
 8005192:	e00b      	b.n	80051ac <HAL_RCC_OscConfig+0x324>
 8005194:	4b58      	ldr	r3, [pc, #352]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 8005196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005198:	4a57      	ldr	r2, [pc, #348]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 800519a:	f023 0301 	bic.w	r3, r3, #1
 800519e:	6713      	str	r3, [r2, #112]	@ 0x70
 80051a0:	4b55      	ldr	r3, [pc, #340]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 80051a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a4:	4a54      	ldr	r2, [pc, #336]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 80051a6:	f023 0304 	bic.w	r3, r3, #4
 80051aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d015      	beq.n	80051e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b4:	f7fd fe60 	bl	8002e78 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ba:	e00a      	b.n	80051d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051bc:	f7fd fe5c 	bl	8002e78 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e0cb      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d2:	4b49      	ldr	r3, [pc, #292]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 80051d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0ee      	beq.n	80051bc <HAL_RCC_OscConfig+0x334>
 80051de:	e014      	b.n	800520a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e0:	f7fd fe4a 	bl	8002e78 <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051e6:	e00a      	b.n	80051fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e8:	f7fd fe46 	bl	8002e78 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e0b5      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051fe:	4b3e      	ldr	r3, [pc, #248]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 8005200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1ee      	bne.n	80051e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800520a:	7dfb      	ldrb	r3, [r7, #23]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d105      	bne.n	800521c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005210:	4b39      	ldr	r3, [pc, #228]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 8005212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005214:	4a38      	ldr	r2, [pc, #224]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 8005216:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800521a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 80a1 	beq.w	8005368 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005226:	4b34      	ldr	r3, [pc, #208]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f003 030c 	and.w	r3, r3, #12
 800522e:	2b08      	cmp	r3, #8
 8005230:	d05c      	beq.n	80052ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	2b02      	cmp	r3, #2
 8005238:	d141      	bne.n	80052be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800523a:	4b31      	ldr	r3, [pc, #196]	@ (8005300 <HAL_RCC_OscConfig+0x478>)
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005240:	f7fd fe1a 	bl	8002e78 <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005246:	e008      	b.n	800525a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005248:	f7fd fe16 	bl	8002e78 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e087      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800525a:	4b27      	ldr	r3, [pc, #156]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f0      	bne.n	8005248 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	69da      	ldr	r2, [r3, #28]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	431a      	orrs	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005274:	019b      	lsls	r3, r3, #6
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527c:	085b      	lsrs	r3, r3, #1
 800527e:	3b01      	subs	r3, #1
 8005280:	041b      	lsls	r3, r3, #16
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005288:	061b      	lsls	r3, r3, #24
 800528a:	491b      	ldr	r1, [pc, #108]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 800528c:	4313      	orrs	r3, r2
 800528e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005290:	4b1b      	ldr	r3, [pc, #108]	@ (8005300 <HAL_RCC_OscConfig+0x478>)
 8005292:	2201      	movs	r2, #1
 8005294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005296:	f7fd fdef 	bl	8002e78 <HAL_GetTick>
 800529a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800529c:	e008      	b.n	80052b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800529e:	f7fd fdeb 	bl	8002e78 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e05c      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b0:	4b11      	ldr	r3, [pc, #68]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0f0      	beq.n	800529e <HAL_RCC_OscConfig+0x416>
 80052bc:	e054      	b.n	8005368 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052be:	4b10      	ldr	r3, [pc, #64]	@ (8005300 <HAL_RCC_OscConfig+0x478>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c4:	f7fd fdd8 	bl	8002e78 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052cc:	f7fd fdd4 	bl	8002e78 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e045      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052de:	4b06      	ldr	r3, [pc, #24]	@ (80052f8 <HAL_RCC_OscConfig+0x470>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1f0      	bne.n	80052cc <HAL_RCC_OscConfig+0x444>
 80052ea:	e03d      	b.n	8005368 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d107      	bne.n	8005304 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e038      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
 80052f8:	40023800 	.word	0x40023800
 80052fc:	40007000 	.word	0x40007000
 8005300:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005304:	4b1b      	ldr	r3, [pc, #108]	@ (8005374 <HAL_RCC_OscConfig+0x4ec>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d028      	beq.n	8005364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800531c:	429a      	cmp	r2, r3
 800531e:	d121      	bne.n	8005364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800532a:	429a      	cmp	r2, r3
 800532c:	d11a      	bne.n	8005364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005334:	4013      	ands	r3, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800533a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800533c:	4293      	cmp	r3, r2
 800533e:	d111      	bne.n	8005364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534a:	085b      	lsrs	r3, r3, #1
 800534c:	3b01      	subs	r3, #1
 800534e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005350:	429a      	cmp	r2, r3
 8005352:	d107      	bne.n	8005364 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005360:	429a      	cmp	r2, r3
 8005362:	d001      	beq.n	8005368 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e000      	b.n	800536a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	40023800 	.word	0x40023800

08005378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e0cc      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800538c:	4b68      	ldr	r3, [pc, #416]	@ (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d90c      	bls.n	80053b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539a:	4b65      	ldr	r3, [pc, #404]	@ (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a2:	4b63      	ldr	r3, [pc, #396]	@ (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d001      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e0b8      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d020      	beq.n	8005402 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d005      	beq.n	80053d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053cc:	4b59      	ldr	r3, [pc, #356]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	4a58      	ldr	r2, [pc, #352]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80053d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d005      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053e4:	4b53      	ldr	r3, [pc, #332]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	4a52      	ldr	r2, [pc, #328]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f0:	4b50      	ldr	r3, [pc, #320]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	494d      	ldr	r1, [pc, #308]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d044      	beq.n	8005498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d107      	bne.n	8005426 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005416:	4b47      	ldr	r3, [pc, #284]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d119      	bne.n	8005456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e07f      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b02      	cmp	r3, #2
 800542c:	d003      	beq.n	8005436 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005432:	2b03      	cmp	r3, #3
 8005434:	d107      	bne.n	8005446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005436:	4b3f      	ldr	r3, [pc, #252]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e06f      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005446:	4b3b      	ldr	r3, [pc, #236]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e067      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005456:	4b37      	ldr	r3, [pc, #220]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f023 0203 	bic.w	r2, r3, #3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	4934      	ldr	r1, [pc, #208]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005464:	4313      	orrs	r3, r2
 8005466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005468:	f7fd fd06 	bl	8002e78 <HAL_GetTick>
 800546c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546e:	e00a      	b.n	8005486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005470:	f7fd fd02 	bl	8002e78 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e04f      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005486:	4b2b      	ldr	r3, [pc, #172]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 020c 	and.w	r2, r3, #12
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	429a      	cmp	r2, r3
 8005496:	d1eb      	bne.n	8005470 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005498:	4b25      	ldr	r3, [pc, #148]	@ (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d20c      	bcs.n	80054c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a6:	4b22      	ldr	r3, [pc, #136]	@ (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ae:	4b20      	ldr	r3, [pc, #128]	@ (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d001      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e032      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d008      	beq.n	80054de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054cc:	4b19      	ldr	r3, [pc, #100]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	4916      	ldr	r1, [pc, #88]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d009      	beq.n	80054fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ea:	4b12      	ldr	r3, [pc, #72]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	490e      	ldr	r1, [pc, #56]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054fe:	f000 f821 	bl	8005544 <HAL_RCC_GetSysClockFreq>
 8005502:	4602      	mov	r2, r0
 8005504:	4b0b      	ldr	r3, [pc, #44]	@ (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	091b      	lsrs	r3, r3, #4
 800550a:	f003 030f 	and.w	r3, r3, #15
 800550e:	490a      	ldr	r1, [pc, #40]	@ (8005538 <HAL_RCC_ClockConfig+0x1c0>)
 8005510:	5ccb      	ldrb	r3, [r1, r3]
 8005512:	fa22 f303 	lsr.w	r3, r2, r3
 8005516:	4a09      	ldr	r2, [pc, #36]	@ (800553c <HAL_RCC_ClockConfig+0x1c4>)
 8005518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800551a:	4b09      	ldr	r3, [pc, #36]	@ (8005540 <HAL_RCC_ClockConfig+0x1c8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f7fd fc66 	bl	8002df0 <HAL_InitTick>

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	40023c00 	.word	0x40023c00
 8005534:	40023800 	.word	0x40023800
 8005538:	0800e780 	.word	0x0800e780
 800553c:	20000018 	.word	0x20000018
 8005540:	2000001c 	.word	0x2000001c

08005544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005548:	b090      	sub	sp, #64	@ 0x40
 800554a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800555c:	4b59      	ldr	r3, [pc, #356]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f003 030c 	and.w	r3, r3, #12
 8005564:	2b08      	cmp	r3, #8
 8005566:	d00d      	beq.n	8005584 <HAL_RCC_GetSysClockFreq+0x40>
 8005568:	2b08      	cmp	r3, #8
 800556a:	f200 80a1 	bhi.w	80056b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800556e:	2b00      	cmp	r3, #0
 8005570:	d002      	beq.n	8005578 <HAL_RCC_GetSysClockFreq+0x34>
 8005572:	2b04      	cmp	r3, #4
 8005574:	d003      	beq.n	800557e <HAL_RCC_GetSysClockFreq+0x3a>
 8005576:	e09b      	b.n	80056b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005578:	4b53      	ldr	r3, [pc, #332]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800557a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800557c:	e09b      	b.n	80056b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800557e:	4b53      	ldr	r3, [pc, #332]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x188>)
 8005580:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005582:	e098      	b.n	80056b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005584:	4b4f      	ldr	r3, [pc, #316]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800558c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800558e:	4b4d      	ldr	r3, [pc, #308]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d028      	beq.n	80055ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800559a:	4b4a      	ldr	r3, [pc, #296]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	099b      	lsrs	r3, r3, #6
 80055a0:	2200      	movs	r2, #0
 80055a2:	623b      	str	r3, [r7, #32]
 80055a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80055ac:	2100      	movs	r1, #0
 80055ae:	4b47      	ldr	r3, [pc, #284]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x188>)
 80055b0:	fb03 f201 	mul.w	r2, r3, r1
 80055b4:	2300      	movs	r3, #0
 80055b6:	fb00 f303 	mul.w	r3, r0, r3
 80055ba:	4413      	add	r3, r2
 80055bc:	4a43      	ldr	r2, [pc, #268]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x188>)
 80055be:	fba0 1202 	umull	r1, r2, r0, r2
 80055c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055c4:	460a      	mov	r2, r1
 80055c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80055c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055ca:	4413      	add	r3, r2
 80055cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d0:	2200      	movs	r2, #0
 80055d2:	61bb      	str	r3, [r7, #24]
 80055d4:	61fa      	str	r2, [r7, #28]
 80055d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80055de:	f7fb fb53 	bl	8000c88 <__aeabi_uldivmod>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4613      	mov	r3, r2
 80055e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055ea:	e053      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055ec:	4b35      	ldr	r3, [pc, #212]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	099b      	lsrs	r3, r3, #6
 80055f2:	2200      	movs	r2, #0
 80055f4:	613b      	str	r3, [r7, #16]
 80055f6:	617a      	str	r2, [r7, #20]
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80055fe:	f04f 0b00 	mov.w	fp, #0
 8005602:	4652      	mov	r2, sl
 8005604:	465b      	mov	r3, fp
 8005606:	f04f 0000 	mov.w	r0, #0
 800560a:	f04f 0100 	mov.w	r1, #0
 800560e:	0159      	lsls	r1, r3, #5
 8005610:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005614:	0150      	lsls	r0, r2, #5
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	ebb2 080a 	subs.w	r8, r2, sl
 800561e:	eb63 090b 	sbc.w	r9, r3, fp
 8005622:	f04f 0200 	mov.w	r2, #0
 8005626:	f04f 0300 	mov.w	r3, #0
 800562a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800562e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005632:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005636:	ebb2 0408 	subs.w	r4, r2, r8
 800563a:	eb63 0509 	sbc.w	r5, r3, r9
 800563e:	f04f 0200 	mov.w	r2, #0
 8005642:	f04f 0300 	mov.w	r3, #0
 8005646:	00eb      	lsls	r3, r5, #3
 8005648:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800564c:	00e2      	lsls	r2, r4, #3
 800564e:	4614      	mov	r4, r2
 8005650:	461d      	mov	r5, r3
 8005652:	eb14 030a 	adds.w	r3, r4, sl
 8005656:	603b      	str	r3, [r7, #0]
 8005658:	eb45 030b 	adc.w	r3, r5, fp
 800565c:	607b      	str	r3, [r7, #4]
 800565e:	f04f 0200 	mov.w	r2, #0
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	e9d7 4500 	ldrd	r4, r5, [r7]
 800566a:	4629      	mov	r1, r5
 800566c:	028b      	lsls	r3, r1, #10
 800566e:	4621      	mov	r1, r4
 8005670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005674:	4621      	mov	r1, r4
 8005676:	028a      	lsls	r2, r1, #10
 8005678:	4610      	mov	r0, r2
 800567a:	4619      	mov	r1, r3
 800567c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800567e:	2200      	movs	r2, #0
 8005680:	60bb      	str	r3, [r7, #8]
 8005682:	60fa      	str	r2, [r7, #12]
 8005684:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005688:	f7fb fafe 	bl	8000c88 <__aeabi_uldivmod>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4613      	mov	r3, r2
 8005692:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005694:	4b0b      	ldr	r3, [pc, #44]	@ (80056c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	0c1b      	lsrs	r3, r3, #16
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	3301      	adds	r3, #1
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80056a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056ae:	e002      	b.n	80056b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056b0:	4b05      	ldr	r3, [pc, #20]	@ (80056c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80056b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3740      	adds	r7, #64	@ 0x40
 80056bc:	46bd      	mov	sp, r7
 80056be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056c2:	bf00      	nop
 80056c4:	40023800 	.word	0x40023800
 80056c8:	00f42400 	.word	0x00f42400
 80056cc:	017d7840 	.word	0x017d7840

080056d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056d0:	b480      	push	{r7}
 80056d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056d4:	4b03      	ldr	r3, [pc, #12]	@ (80056e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80056d6:	681b      	ldr	r3, [r3, #0]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20000018 	.word	0x20000018

080056e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056ec:	f7ff fff0 	bl	80056d0 <HAL_RCC_GetHCLKFreq>
 80056f0:	4602      	mov	r2, r0
 80056f2:	4b05      	ldr	r3, [pc, #20]	@ (8005708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	0a9b      	lsrs	r3, r3, #10
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	4903      	ldr	r1, [pc, #12]	@ (800570c <HAL_RCC_GetPCLK1Freq+0x24>)
 80056fe:	5ccb      	ldrb	r3, [r1, r3]
 8005700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005704:	4618      	mov	r0, r3
 8005706:	bd80      	pop	{r7, pc}
 8005708:	40023800 	.word	0x40023800
 800570c:	0800e790 	.word	0x0800e790

08005710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005714:	f7ff ffdc 	bl	80056d0 <HAL_RCC_GetHCLKFreq>
 8005718:	4602      	mov	r2, r0
 800571a:	4b05      	ldr	r3, [pc, #20]	@ (8005730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	0b5b      	lsrs	r3, r3, #13
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	4903      	ldr	r1, [pc, #12]	@ (8005734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005726:	5ccb      	ldrb	r3, [r1, r3]
 8005728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800572c:	4618      	mov	r0, r3
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40023800 	.word	0x40023800
 8005734:	0800e790 	.word	0x0800e790

08005738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e041      	b.n	80057ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d106      	bne.n	8005764 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7fd f810 	bl	8002784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2202      	movs	r2, #2
 8005768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3304      	adds	r3, #4
 8005774:	4619      	mov	r1, r3
 8005776:	4610      	mov	r0, r2
 8005778:	f000 fff0 	bl	800675c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
	...

080057d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d001      	beq.n	80057f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e046      	b.n	800587e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a23      	ldr	r2, [pc, #140]	@ (800588c <HAL_TIM_Base_Start+0xb4>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d022      	beq.n	8005848 <HAL_TIM_Base_Start+0x70>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800580a:	d01d      	beq.n	8005848 <HAL_TIM_Base_Start+0x70>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a1f      	ldr	r2, [pc, #124]	@ (8005890 <HAL_TIM_Base_Start+0xb8>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d018      	beq.n	8005848 <HAL_TIM_Base_Start+0x70>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a1e      	ldr	r2, [pc, #120]	@ (8005894 <HAL_TIM_Base_Start+0xbc>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d013      	beq.n	8005848 <HAL_TIM_Base_Start+0x70>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a1c      	ldr	r2, [pc, #112]	@ (8005898 <HAL_TIM_Base_Start+0xc0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d00e      	beq.n	8005848 <HAL_TIM_Base_Start+0x70>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a1b      	ldr	r2, [pc, #108]	@ (800589c <HAL_TIM_Base_Start+0xc4>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d009      	beq.n	8005848 <HAL_TIM_Base_Start+0x70>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a19      	ldr	r2, [pc, #100]	@ (80058a0 <HAL_TIM_Base_Start+0xc8>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d004      	beq.n	8005848 <HAL_TIM_Base_Start+0x70>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a18      	ldr	r2, [pc, #96]	@ (80058a4 <HAL_TIM_Base_Start+0xcc>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d111      	bne.n	800586c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f003 0307 	and.w	r3, r3, #7
 8005852:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b06      	cmp	r3, #6
 8005858:	d010      	beq.n	800587c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f042 0201 	orr.w	r2, r2, #1
 8005868:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800586a:	e007      	b.n	800587c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0201 	orr.w	r2, r2, #1
 800587a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40010000 	.word	0x40010000
 8005890:	40000400 	.word	0x40000400
 8005894:	40000800 	.word	0x40000800
 8005898:	40000c00 	.word	0x40000c00
 800589c:	40010400 	.word	0x40010400
 80058a0:	40014000 	.word	0x40014000
 80058a4:	40001800 	.word	0x40001800

080058a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e041      	b.n	800593e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d106      	bne.n	80058d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f839 	bl	8005946 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3304      	adds	r3, #4
 80058e4:	4619      	mov	r1, r3
 80058e6:	4610      	mov	r0, r2
 80058e8:	f000 ff38 	bl	800675c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800594e:	bf00      	nop
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
	...

0800595c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d109      	bne.n	8005980 <HAL_TIM_PWM_Start+0x24>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b01      	cmp	r3, #1
 8005976:	bf14      	ite	ne
 8005978:	2301      	movne	r3, #1
 800597a:	2300      	moveq	r3, #0
 800597c:	b2db      	uxtb	r3, r3
 800597e:	e022      	b.n	80059c6 <HAL_TIM_PWM_Start+0x6a>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b04      	cmp	r3, #4
 8005984:	d109      	bne.n	800599a <HAL_TIM_PWM_Start+0x3e>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b01      	cmp	r3, #1
 8005990:	bf14      	ite	ne
 8005992:	2301      	movne	r3, #1
 8005994:	2300      	moveq	r3, #0
 8005996:	b2db      	uxtb	r3, r3
 8005998:	e015      	b.n	80059c6 <HAL_TIM_PWM_Start+0x6a>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b08      	cmp	r3, #8
 800599e:	d109      	bne.n	80059b4 <HAL_TIM_PWM_Start+0x58>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	bf14      	ite	ne
 80059ac:	2301      	movne	r3, #1
 80059ae:	2300      	moveq	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	e008      	b.n	80059c6 <HAL_TIM_PWM_Start+0x6a>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b01      	cmp	r3, #1
 80059be:	bf14      	ite	ne
 80059c0:	2301      	movne	r3, #1
 80059c2:	2300      	moveq	r3, #0
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e07c      	b.n	8005ac8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d104      	bne.n	80059de <HAL_TIM_PWM_Start+0x82>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059dc:	e013      	b.n	8005a06 <HAL_TIM_PWM_Start+0xaa>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b04      	cmp	r3, #4
 80059e2:	d104      	bne.n	80059ee <HAL_TIM_PWM_Start+0x92>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2202      	movs	r2, #2
 80059e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059ec:	e00b      	b.n	8005a06 <HAL_TIM_PWM_Start+0xaa>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d104      	bne.n	80059fe <HAL_TIM_PWM_Start+0xa2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059fc:	e003      	b.n	8005a06 <HAL_TIM_PWM_Start+0xaa>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2202      	movs	r2, #2
 8005a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	6839      	ldr	r1, [r7, #0]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f001 fac4 	bl	8006f9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a2d      	ldr	r2, [pc, #180]	@ (8005ad0 <HAL_TIM_PWM_Start+0x174>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d004      	beq.n	8005a28 <HAL_TIM_PWM_Start+0xcc>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a2c      	ldr	r2, [pc, #176]	@ (8005ad4 <HAL_TIM_PWM_Start+0x178>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d101      	bne.n	8005a2c <HAL_TIM_PWM_Start+0xd0>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e000      	b.n	8005a2e <HAL_TIM_PWM_Start+0xd2>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d007      	beq.n	8005a42 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a40:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a22      	ldr	r2, [pc, #136]	@ (8005ad0 <HAL_TIM_PWM_Start+0x174>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d022      	beq.n	8005a92 <HAL_TIM_PWM_Start+0x136>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a54:	d01d      	beq.n	8005a92 <HAL_TIM_PWM_Start+0x136>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ad8 <HAL_TIM_PWM_Start+0x17c>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d018      	beq.n	8005a92 <HAL_TIM_PWM_Start+0x136>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a1d      	ldr	r2, [pc, #116]	@ (8005adc <HAL_TIM_PWM_Start+0x180>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d013      	beq.n	8005a92 <HAL_TIM_PWM_Start+0x136>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ae0 <HAL_TIM_PWM_Start+0x184>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d00e      	beq.n	8005a92 <HAL_TIM_PWM_Start+0x136>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a16      	ldr	r2, [pc, #88]	@ (8005ad4 <HAL_TIM_PWM_Start+0x178>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d009      	beq.n	8005a92 <HAL_TIM_PWM_Start+0x136>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a18      	ldr	r2, [pc, #96]	@ (8005ae4 <HAL_TIM_PWM_Start+0x188>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d004      	beq.n	8005a92 <HAL_TIM_PWM_Start+0x136>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a16      	ldr	r2, [pc, #88]	@ (8005ae8 <HAL_TIM_PWM_Start+0x18c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d111      	bne.n	8005ab6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b06      	cmp	r3, #6
 8005aa2:	d010      	beq.n	8005ac6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f042 0201 	orr.w	r2, r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab4:	e007      	b.n	8005ac6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 0201 	orr.w	r2, r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40010000 	.word	0x40010000
 8005ad4:	40010400 	.word	0x40010400
 8005ad8:	40000400 	.word	0x40000400
 8005adc:	40000800 	.word	0x40000800
 8005ae0:	40000c00 	.word	0x40000c00
 8005ae4:	40014000 	.word	0x40014000
 8005ae8:	40001800 	.word	0x40001800

08005aec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e041      	b.n	8005b82 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f839 	bl	8005b8a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	3304      	adds	r3, #4
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	f000 fe16 	bl	800675c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
	...

08005ba0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d104      	bne.n	8005bbe <HAL_TIM_IC_Start_IT+0x1e>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	e013      	b.n	8005be6 <HAL_TIM_IC_Start_IT+0x46>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d104      	bne.n	8005bce <HAL_TIM_IC_Start_IT+0x2e>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	e00b      	b.n	8005be6 <HAL_TIM_IC_Start_IT+0x46>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d104      	bne.n	8005bde <HAL_TIM_IC_Start_IT+0x3e>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	e003      	b.n	8005be6 <HAL_TIM_IC_Start_IT+0x46>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d104      	bne.n	8005bf8 <HAL_TIM_IC_Start_IT+0x58>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	e013      	b.n	8005c20 <HAL_TIM_IC_Start_IT+0x80>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d104      	bne.n	8005c08 <HAL_TIM_IC_Start_IT+0x68>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	e00b      	b.n	8005c20 <HAL_TIM_IC_Start_IT+0x80>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b08      	cmp	r3, #8
 8005c0c:	d104      	bne.n	8005c18 <HAL_TIM_IC_Start_IT+0x78>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	e003      	b.n	8005c20 <HAL_TIM_IC_Start_IT+0x80>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c22:	7bbb      	ldrb	r3, [r7, #14]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d102      	bne.n	8005c2e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c28:	7b7b      	ldrb	r3, [r7, #13]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d001      	beq.n	8005c32 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e0cc      	b.n	8005dcc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d104      	bne.n	8005c42 <HAL_TIM_IC_Start_IT+0xa2>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c40:	e013      	b.n	8005c6a <HAL_TIM_IC_Start_IT+0xca>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d104      	bne.n	8005c52 <HAL_TIM_IC_Start_IT+0xb2>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c50:	e00b      	b.n	8005c6a <HAL_TIM_IC_Start_IT+0xca>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d104      	bne.n	8005c62 <HAL_TIM_IC_Start_IT+0xc2>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c60:	e003      	b.n	8005c6a <HAL_TIM_IC_Start_IT+0xca>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2202      	movs	r2, #2
 8005c66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d104      	bne.n	8005c7a <HAL_TIM_IC_Start_IT+0xda>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c78:	e013      	b.n	8005ca2 <HAL_TIM_IC_Start_IT+0x102>
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b04      	cmp	r3, #4
 8005c7e:	d104      	bne.n	8005c8a <HAL_TIM_IC_Start_IT+0xea>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c88:	e00b      	b.n	8005ca2 <HAL_TIM_IC_Start_IT+0x102>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b08      	cmp	r3, #8
 8005c8e:	d104      	bne.n	8005c9a <HAL_TIM_IC_Start_IT+0xfa>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c98:	e003      	b.n	8005ca2 <HAL_TIM_IC_Start_IT+0x102>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b0c      	cmp	r3, #12
 8005ca6:	d841      	bhi.n	8005d2c <HAL_TIM_IC_Start_IT+0x18c>
 8005ca8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb0 <HAL_TIM_IC_Start_IT+0x110>)
 8005caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cae:	bf00      	nop
 8005cb0:	08005ce5 	.word	0x08005ce5
 8005cb4:	08005d2d 	.word	0x08005d2d
 8005cb8:	08005d2d 	.word	0x08005d2d
 8005cbc:	08005d2d 	.word	0x08005d2d
 8005cc0:	08005cf7 	.word	0x08005cf7
 8005cc4:	08005d2d 	.word	0x08005d2d
 8005cc8:	08005d2d 	.word	0x08005d2d
 8005ccc:	08005d2d 	.word	0x08005d2d
 8005cd0:	08005d09 	.word	0x08005d09
 8005cd4:	08005d2d 	.word	0x08005d2d
 8005cd8:	08005d2d 	.word	0x08005d2d
 8005cdc:	08005d2d 	.word	0x08005d2d
 8005ce0:	08005d1b 	.word	0x08005d1b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0202 	orr.w	r2, r2, #2
 8005cf2:	60da      	str	r2, [r3, #12]
      break;
 8005cf4:	e01d      	b.n	8005d32 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68da      	ldr	r2, [r3, #12]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f042 0204 	orr.w	r2, r2, #4
 8005d04:	60da      	str	r2, [r3, #12]
      break;
 8005d06:	e014      	b.n	8005d32 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0208 	orr.w	r2, r2, #8
 8005d16:	60da      	str	r2, [r3, #12]
      break;
 8005d18:	e00b      	b.n	8005d32 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68da      	ldr	r2, [r3, #12]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f042 0210 	orr.w	r2, r2, #16
 8005d28:	60da      	str	r2, [r3, #12]
      break;
 8005d2a:	e002      	b.n	8005d32 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d30:	bf00      	nop
  }

  if (status == HAL_OK)
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d148      	bne.n	8005dca <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	6839      	ldr	r1, [r7, #0]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f001 f92b 	bl	8006f9c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a22      	ldr	r2, [pc, #136]	@ (8005dd4 <HAL_TIM_IC_Start_IT+0x234>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d022      	beq.n	8005d96 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d58:	d01d      	beq.n	8005d96 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8005dd8 <HAL_TIM_IC_Start_IT+0x238>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d018      	beq.n	8005d96 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a1c      	ldr	r2, [pc, #112]	@ (8005ddc <HAL_TIM_IC_Start_IT+0x23c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d013      	beq.n	8005d96 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a1b      	ldr	r2, [pc, #108]	@ (8005de0 <HAL_TIM_IC_Start_IT+0x240>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d00e      	beq.n	8005d96 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a19      	ldr	r2, [pc, #100]	@ (8005de4 <HAL_TIM_IC_Start_IT+0x244>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d009      	beq.n	8005d96 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a18      	ldr	r2, [pc, #96]	@ (8005de8 <HAL_TIM_IC_Start_IT+0x248>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d004      	beq.n	8005d96 <HAL_TIM_IC_Start_IT+0x1f6>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a16      	ldr	r2, [pc, #88]	@ (8005dec <HAL_TIM_IC_Start_IT+0x24c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d111      	bne.n	8005dba <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b06      	cmp	r3, #6
 8005da6:	d010      	beq.n	8005dca <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0201 	orr.w	r2, r2, #1
 8005db6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db8:	e007      	b.n	8005dca <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f042 0201 	orr.w	r2, r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	40010000 	.word	0x40010000
 8005dd8:	40000400 	.word	0x40000400
 8005ddc:	40000800 	.word	0x40000800
 8005de0:	40000c00 	.word	0x40000c00
 8005de4:	40010400 	.word	0x40010400
 8005de8:	40014000 	.word	0x40014000
 8005dec:	40001800 	.word	0x40001800

08005df0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e097      	b.n	8005f34 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d106      	bne.n	8005e1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7fc fd65 	bl	80028e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2202      	movs	r2, #2
 8005e22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6812      	ldr	r2, [r2, #0]
 8005e30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e34:	f023 0307 	bic.w	r3, r3, #7
 8005e38:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	3304      	adds	r3, #4
 8005e42:	4619      	mov	r1, r3
 8005e44:	4610      	mov	r0, r2
 8005e46:	f000 fc89 	bl	800675c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e72:	f023 0303 	bic.w	r3, r3, #3
 8005e76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	699b      	ldr	r3, [r3, #24]
 8005e80:	021b      	lsls	r3, r3, #8
 8005e82:	4313      	orrs	r3, r2
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005e90:	f023 030c 	bic.w	r3, r3, #12
 8005e94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	021b      	lsls	r3, r3, #8
 8005eac:	4313      	orrs	r3, r2
 8005eae:	693a      	ldr	r2, [r7, #16]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	011a      	lsls	r2, r3, #4
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	031b      	lsls	r3, r3, #12
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	693a      	ldr	r2, [r7, #16]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005ece:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005ed6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	697a      	ldr	r2, [r7, #20]
 8005ef0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3718      	adds	r7, #24
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f4c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f54:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f5c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f64:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d110      	bne.n	8005f8e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d102      	bne.n	8005f78 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f72:	7b7b      	ldrb	r3, [r7, #13]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d001      	beq.n	8005f7c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e069      	b.n	8006050 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f8c:	e031      	b.n	8005ff2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	d110      	bne.n	8005fb6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f94:	7bbb      	ldrb	r3, [r7, #14]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d102      	bne.n	8005fa0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f9a:	7b3b      	ldrb	r3, [r7, #12]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d001      	beq.n	8005fa4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e055      	b.n	8006050 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005fb4:	e01d      	b.n	8005ff2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d108      	bne.n	8005fce <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fbc:	7bbb      	ldrb	r3, [r7, #14]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d105      	bne.n	8005fce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fc2:	7b7b      	ldrb	r3, [r7, #13]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d102      	bne.n	8005fce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fc8:	7b3b      	ldrb	r3, [r7, #12]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d001      	beq.n	8005fd2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e03e      	b.n	8006050 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2202      	movs	r2, #2
 8005fde:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2202      	movs	r2, #2
 8005fee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <HAL_TIM_Encoder_Start+0xc4>
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d008      	beq.n	8006010 <HAL_TIM_Encoder_Start+0xd4>
 8005ffe:	e00f      	b.n	8006020 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2201      	movs	r2, #1
 8006006:	2100      	movs	r1, #0
 8006008:	4618      	mov	r0, r3
 800600a:	f000 ffc7 	bl	8006f9c <TIM_CCxChannelCmd>
      break;
 800600e:	e016      	b.n	800603e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2201      	movs	r2, #1
 8006016:	2104      	movs	r1, #4
 8006018:	4618      	mov	r0, r3
 800601a:	f000 ffbf 	bl	8006f9c <TIM_CCxChannelCmd>
      break;
 800601e:	e00e      	b.n	800603e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2201      	movs	r2, #1
 8006026:	2100      	movs	r1, #0
 8006028:	4618      	mov	r0, r3
 800602a:	f000 ffb7 	bl	8006f9c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2201      	movs	r2, #1
 8006034:	2104      	movs	r1, #4
 8006036:	4618      	mov	r0, r3
 8006038:	f000 ffb0 	bl	8006f9c <TIM_CCxChannelCmd>
      break;
 800603c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f042 0201 	orr.w	r2, r2, #1
 800604c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d020      	beq.n	80060bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f003 0302 	and.w	r3, r3, #2
 8006080:	2b00      	cmp	r3, #0
 8006082:	d01b      	beq.n	80060bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f06f 0202 	mvn.w	r2, #2
 800608c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7fb fe5c 	bl	8001d60 <HAL_TIM_IC_CaptureCallback>
 80060a8:	e005      	b.n	80060b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fb38 	bl	8006720 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fb3f 	bl	8006734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f003 0304 	and.w	r3, r3, #4
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d020      	beq.n	8006108 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01b      	beq.n	8006108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f06f 0204 	mvn.w	r2, #4
 80060d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2202      	movs	r2, #2
 80060de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7fb fe36 	bl	8001d60 <HAL_TIM_IC_CaptureCallback>
 80060f4:	e005      	b.n	8006102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fb12 	bl	8006720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fb19 	bl	8006734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f003 0308 	and.w	r3, r3, #8
 800610e:	2b00      	cmp	r3, #0
 8006110:	d020      	beq.n	8006154 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f003 0308 	and.w	r3, r3, #8
 8006118:	2b00      	cmp	r3, #0
 800611a:	d01b      	beq.n	8006154 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f06f 0208 	mvn.w	r2, #8
 8006124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2204      	movs	r2, #4
 800612a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7fb fe10 	bl	8001d60 <HAL_TIM_IC_CaptureCallback>
 8006140:	e005      	b.n	800614e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 faec 	bl	8006720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 faf3 	bl	8006734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	f003 0310 	and.w	r3, r3, #16
 800615a:	2b00      	cmp	r3, #0
 800615c:	d020      	beq.n	80061a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f003 0310 	and.w	r3, r3, #16
 8006164:	2b00      	cmp	r3, #0
 8006166:	d01b      	beq.n	80061a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f06f 0210 	mvn.w	r2, #16
 8006170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2208      	movs	r2, #8
 8006176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	69db      	ldr	r3, [r3, #28]
 800617e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006182:	2b00      	cmp	r3, #0
 8006184:	d003      	beq.n	800618e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fb fdea 	bl	8001d60 <HAL_TIM_IC_CaptureCallback>
 800618c:	e005      	b.n	800619a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fac6 	bl	8006720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 facd 	bl	8006734 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00c      	beq.n	80061c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d007      	beq.n	80061c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f06f 0201 	mvn.w	r2, #1
 80061bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 faa4 	bl	800670c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00c      	beq.n	80061e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d007      	beq.n	80061e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80061e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 ffd8 	bl	8007198 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00c      	beq.n	800620c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d007      	beq.n	800620c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fa9e 	bl	8006748 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00c      	beq.n	8006230 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f003 0320 	and.w	r3, r3, #32
 800621c:	2b00      	cmp	r3, #0
 800621e:	d007      	beq.n	8006230 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f06f 0220 	mvn.w	r2, #32
 8006228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 ffaa 	bl	8007184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006230:	bf00      	nop
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800624e:	2b01      	cmp	r3, #1
 8006250:	d101      	bne.n	8006256 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006252:	2302      	movs	r3, #2
 8006254:	e088      	b.n	8006368 <HAL_TIM_IC_ConfigChannel+0x130>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d11b      	bne.n	800629c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006274:	f000 fcce 	bl	8006c14 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	699a      	ldr	r2, [r3, #24]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 020c 	bic.w	r2, r2, #12
 8006286:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6999      	ldr	r1, [r3, #24]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	689a      	ldr	r2, [r3, #8]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	619a      	str	r2, [r3, #24]
 800629a:	e060      	b.n	800635e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b04      	cmp	r3, #4
 80062a0:	d11c      	bne.n	80062dc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80062b2:	f000 fd52 	bl	8006d5a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	699a      	ldr	r2, [r3, #24]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80062c4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6999      	ldr	r1, [r3, #24]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	021a      	lsls	r2, r3, #8
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	430a      	orrs	r2, r1
 80062d8:	619a      	str	r2, [r3, #24]
 80062da:	e040      	b.n	800635e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b08      	cmp	r3, #8
 80062e0:	d11b      	bne.n	800631a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80062f2:	f000 fd9f 	bl	8006e34 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69da      	ldr	r2, [r3, #28]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 020c 	bic.w	r2, r2, #12
 8006304:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69d9      	ldr	r1, [r3, #28]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	61da      	str	r2, [r3, #28]
 8006318:	e021      	b.n	800635e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b0c      	cmp	r3, #12
 800631e:	d11c      	bne.n	800635a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006330:	f000 fdbc 	bl	8006eac <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	69da      	ldr	r2, [r3, #28]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006342:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	69d9      	ldr	r1, [r3, #28]
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	021a      	lsls	r2, r3, #8
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	61da      	str	r2, [r3, #28]
 8006358:	e001      	b.n	800635e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006366:	7dfb      	ldrb	r3, [r7, #23]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3718      	adds	r7, #24
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800637c:	2300      	movs	r3, #0
 800637e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006386:	2b01      	cmp	r3, #1
 8006388:	d101      	bne.n	800638e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800638a:	2302      	movs	r3, #2
 800638c:	e0ae      	b.n	80064ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b0c      	cmp	r3, #12
 800639a:	f200 809f 	bhi.w	80064dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800639e:	a201      	add	r2, pc, #4	@ (adr r2, 80063a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a4:	080063d9 	.word	0x080063d9
 80063a8:	080064dd 	.word	0x080064dd
 80063ac:	080064dd 	.word	0x080064dd
 80063b0:	080064dd 	.word	0x080064dd
 80063b4:	08006419 	.word	0x08006419
 80063b8:	080064dd 	.word	0x080064dd
 80063bc:	080064dd 	.word	0x080064dd
 80063c0:	080064dd 	.word	0x080064dd
 80063c4:	0800645b 	.word	0x0800645b
 80063c8:	080064dd 	.word	0x080064dd
 80063cc:	080064dd 	.word	0x080064dd
 80063d0:	080064dd 	.word	0x080064dd
 80063d4:	0800649b 	.word	0x0800649b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68b9      	ldr	r1, [r7, #8]
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 fa68 	bl	80068b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699a      	ldr	r2, [r3, #24]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0208 	orr.w	r2, r2, #8
 80063f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	699a      	ldr	r2, [r3, #24]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0204 	bic.w	r2, r2, #4
 8006402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6999      	ldr	r1, [r3, #24]
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	691a      	ldr	r2, [r3, #16]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	619a      	str	r2, [r3, #24]
      break;
 8006416:	e064      	b.n	80064e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68b9      	ldr	r1, [r7, #8]
 800641e:	4618      	mov	r0, r3
 8006420:	f000 fab8 	bl	8006994 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	699a      	ldr	r2, [r3, #24]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	699a      	ldr	r2, [r3, #24]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6999      	ldr	r1, [r3, #24]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	021a      	lsls	r2, r3, #8
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	619a      	str	r2, [r3, #24]
      break;
 8006458:	e043      	b.n	80064e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68b9      	ldr	r1, [r7, #8]
 8006460:	4618      	mov	r0, r3
 8006462:	f000 fb0d 	bl	8006a80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	69da      	ldr	r2, [r3, #28]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f042 0208 	orr.w	r2, r2, #8
 8006474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	69da      	ldr	r2, [r3, #28]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 0204 	bic.w	r2, r2, #4
 8006484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69d9      	ldr	r1, [r3, #28]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	691a      	ldr	r2, [r3, #16]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	61da      	str	r2, [r3, #28]
      break;
 8006498:	e023      	b.n	80064e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68b9      	ldr	r1, [r7, #8]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 fb61 	bl	8006b68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	69da      	ldr	r2, [r3, #28]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	69da      	ldr	r2, [r3, #28]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69d9      	ldr	r1, [r3, #28]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	021a      	lsls	r2, r3, #8
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	61da      	str	r2, [r3, #28]
      break;
 80064da:	e002      	b.n	80064e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	75fb      	strb	r3, [r7, #23]
      break;
 80064e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006508:	2b01      	cmp	r3, #1
 800650a:	d101      	bne.n	8006510 <HAL_TIM_ConfigClockSource+0x1c>
 800650c:	2302      	movs	r3, #2
 800650e:	e0b4      	b.n	800667a <HAL_TIM_ConfigClockSource+0x186>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2202      	movs	r2, #2
 800651c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800652e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006536:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006548:	d03e      	beq.n	80065c8 <HAL_TIM_ConfigClockSource+0xd4>
 800654a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800654e:	f200 8087 	bhi.w	8006660 <HAL_TIM_ConfigClockSource+0x16c>
 8006552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006556:	f000 8086 	beq.w	8006666 <HAL_TIM_ConfigClockSource+0x172>
 800655a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800655e:	d87f      	bhi.n	8006660 <HAL_TIM_ConfigClockSource+0x16c>
 8006560:	2b70      	cmp	r3, #112	@ 0x70
 8006562:	d01a      	beq.n	800659a <HAL_TIM_ConfigClockSource+0xa6>
 8006564:	2b70      	cmp	r3, #112	@ 0x70
 8006566:	d87b      	bhi.n	8006660 <HAL_TIM_ConfigClockSource+0x16c>
 8006568:	2b60      	cmp	r3, #96	@ 0x60
 800656a:	d050      	beq.n	800660e <HAL_TIM_ConfigClockSource+0x11a>
 800656c:	2b60      	cmp	r3, #96	@ 0x60
 800656e:	d877      	bhi.n	8006660 <HAL_TIM_ConfigClockSource+0x16c>
 8006570:	2b50      	cmp	r3, #80	@ 0x50
 8006572:	d03c      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0xfa>
 8006574:	2b50      	cmp	r3, #80	@ 0x50
 8006576:	d873      	bhi.n	8006660 <HAL_TIM_ConfigClockSource+0x16c>
 8006578:	2b40      	cmp	r3, #64	@ 0x40
 800657a:	d058      	beq.n	800662e <HAL_TIM_ConfigClockSource+0x13a>
 800657c:	2b40      	cmp	r3, #64	@ 0x40
 800657e:	d86f      	bhi.n	8006660 <HAL_TIM_ConfigClockSource+0x16c>
 8006580:	2b30      	cmp	r3, #48	@ 0x30
 8006582:	d064      	beq.n	800664e <HAL_TIM_ConfigClockSource+0x15a>
 8006584:	2b30      	cmp	r3, #48	@ 0x30
 8006586:	d86b      	bhi.n	8006660 <HAL_TIM_ConfigClockSource+0x16c>
 8006588:	2b20      	cmp	r3, #32
 800658a:	d060      	beq.n	800664e <HAL_TIM_ConfigClockSource+0x15a>
 800658c:	2b20      	cmp	r3, #32
 800658e:	d867      	bhi.n	8006660 <HAL_TIM_ConfigClockSource+0x16c>
 8006590:	2b00      	cmp	r3, #0
 8006592:	d05c      	beq.n	800664e <HAL_TIM_ConfigClockSource+0x15a>
 8006594:	2b10      	cmp	r3, #16
 8006596:	d05a      	beq.n	800664e <HAL_TIM_ConfigClockSource+0x15a>
 8006598:	e062      	b.n	8006660 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065aa:	f000 fcd7 	bl	8006f5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80065bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	609a      	str	r2, [r3, #8]
      break;
 80065c6:	e04f      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065d8:	f000 fcc0 	bl	8006f5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689a      	ldr	r2, [r3, #8]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065ea:	609a      	str	r2, [r3, #8]
      break;
 80065ec:	e03c      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065fa:	461a      	mov	r2, r3
 80065fc:	f000 fb7e 	bl	8006cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2150      	movs	r1, #80	@ 0x50
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fc8d 	bl	8006f26 <TIM_ITRx_SetConfig>
      break;
 800660c:	e02c      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800661a:	461a      	mov	r2, r3
 800661c:	f000 fbda 	bl	8006dd4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2160      	movs	r1, #96	@ 0x60
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fc7d 	bl	8006f26 <TIM_ITRx_SetConfig>
      break;
 800662c:	e01c      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800663a:	461a      	mov	r2, r3
 800663c:	f000 fb5e 	bl	8006cfc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2140      	movs	r1, #64	@ 0x40
 8006646:	4618      	mov	r0, r3
 8006648:	f000 fc6d 	bl	8006f26 <TIM_ITRx_SetConfig>
      break;
 800664c:	e00c      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4619      	mov	r1, r3
 8006658:	4610      	mov	r0, r2
 800665a:	f000 fc64 	bl	8006f26 <TIM_ITRx_SetConfig>
      break;
 800665e:	e003      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	73fb      	strb	r3, [r7, #15]
      break;
 8006664:	e000      	b.n	8006668 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006666:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006678:	7bfb      	ldrb	r3, [r7, #15]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
	...

08006684 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	2b0c      	cmp	r3, #12
 8006696:	d831      	bhi.n	80066fc <HAL_TIM_ReadCapturedValue+0x78>
 8006698:	a201      	add	r2, pc, #4	@ (adr r2, 80066a0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800669a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669e:	bf00      	nop
 80066a0:	080066d5 	.word	0x080066d5
 80066a4:	080066fd 	.word	0x080066fd
 80066a8:	080066fd 	.word	0x080066fd
 80066ac:	080066fd 	.word	0x080066fd
 80066b0:	080066df 	.word	0x080066df
 80066b4:	080066fd 	.word	0x080066fd
 80066b8:	080066fd 	.word	0x080066fd
 80066bc:	080066fd 	.word	0x080066fd
 80066c0:	080066e9 	.word	0x080066e9
 80066c4:	080066fd 	.word	0x080066fd
 80066c8:	080066fd 	.word	0x080066fd
 80066cc:	080066fd 	.word	0x080066fd
 80066d0:	080066f3 	.word	0x080066f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066da:	60fb      	str	r3, [r7, #12]

      break;
 80066dc:	e00f      	b.n	80066fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e4:	60fb      	str	r3, [r7, #12]

      break;
 80066e6:	e00a      	b.n	80066fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ee:	60fb      	str	r3, [r7, #12]

      break;
 80066f0:	e005      	b.n	80066fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f8:	60fb      	str	r3, [r7, #12]

      break;
 80066fa:	e000      	b.n	80066fe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80066fc:	bf00      	nop
  }

  return tmpreg;
 80066fe:	68fb      	ldr	r3, [r7, #12]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a46      	ldr	r2, [pc, #280]	@ (8006888 <TIM_Base_SetConfig+0x12c>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d013      	beq.n	800679c <TIM_Base_SetConfig+0x40>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800677a:	d00f      	beq.n	800679c <TIM_Base_SetConfig+0x40>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a43      	ldr	r2, [pc, #268]	@ (800688c <TIM_Base_SetConfig+0x130>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d00b      	beq.n	800679c <TIM_Base_SetConfig+0x40>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a42      	ldr	r2, [pc, #264]	@ (8006890 <TIM_Base_SetConfig+0x134>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d007      	beq.n	800679c <TIM_Base_SetConfig+0x40>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a41      	ldr	r2, [pc, #260]	@ (8006894 <TIM_Base_SetConfig+0x138>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d003      	beq.n	800679c <TIM_Base_SetConfig+0x40>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a40      	ldr	r2, [pc, #256]	@ (8006898 <TIM_Base_SetConfig+0x13c>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d108      	bne.n	80067ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a35      	ldr	r2, [pc, #212]	@ (8006888 <TIM_Base_SetConfig+0x12c>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d02b      	beq.n	800680e <TIM_Base_SetConfig+0xb2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067bc:	d027      	beq.n	800680e <TIM_Base_SetConfig+0xb2>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a32      	ldr	r2, [pc, #200]	@ (800688c <TIM_Base_SetConfig+0x130>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d023      	beq.n	800680e <TIM_Base_SetConfig+0xb2>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a31      	ldr	r2, [pc, #196]	@ (8006890 <TIM_Base_SetConfig+0x134>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d01f      	beq.n	800680e <TIM_Base_SetConfig+0xb2>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4a30      	ldr	r2, [pc, #192]	@ (8006894 <TIM_Base_SetConfig+0x138>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d01b      	beq.n	800680e <TIM_Base_SetConfig+0xb2>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a2f      	ldr	r2, [pc, #188]	@ (8006898 <TIM_Base_SetConfig+0x13c>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d017      	beq.n	800680e <TIM_Base_SetConfig+0xb2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a2e      	ldr	r2, [pc, #184]	@ (800689c <TIM_Base_SetConfig+0x140>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d013      	beq.n	800680e <TIM_Base_SetConfig+0xb2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a2d      	ldr	r2, [pc, #180]	@ (80068a0 <TIM_Base_SetConfig+0x144>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d00f      	beq.n	800680e <TIM_Base_SetConfig+0xb2>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a2c      	ldr	r2, [pc, #176]	@ (80068a4 <TIM_Base_SetConfig+0x148>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d00b      	beq.n	800680e <TIM_Base_SetConfig+0xb2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a2b      	ldr	r2, [pc, #172]	@ (80068a8 <TIM_Base_SetConfig+0x14c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d007      	beq.n	800680e <TIM_Base_SetConfig+0xb2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a2a      	ldr	r2, [pc, #168]	@ (80068ac <TIM_Base_SetConfig+0x150>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d003      	beq.n	800680e <TIM_Base_SetConfig+0xb2>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a29      	ldr	r2, [pc, #164]	@ (80068b0 <TIM_Base_SetConfig+0x154>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d108      	bne.n	8006820 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	4313      	orrs	r3, r2
 800681e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	4313      	orrs	r3, r2
 800682c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	689a      	ldr	r2, [r3, #8]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a10      	ldr	r2, [pc, #64]	@ (8006888 <TIM_Base_SetConfig+0x12c>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d003      	beq.n	8006854 <TIM_Base_SetConfig+0xf8>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a12      	ldr	r2, [pc, #72]	@ (8006898 <TIM_Base_SetConfig+0x13c>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d103      	bne.n	800685c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	691a      	ldr	r2, [r3, #16]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b01      	cmp	r3, #1
 800686c:	d105      	bne.n	800687a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f023 0201 	bic.w	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	611a      	str	r2, [r3, #16]
  }
}
 800687a:	bf00      	nop
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	40010000 	.word	0x40010000
 800688c:	40000400 	.word	0x40000400
 8006890:	40000800 	.word	0x40000800
 8006894:	40000c00 	.word	0x40000c00
 8006898:	40010400 	.word	0x40010400
 800689c:	40014000 	.word	0x40014000
 80068a0:	40014400 	.word	0x40014400
 80068a4:	40014800 	.word	0x40014800
 80068a8:	40001800 	.word	0x40001800
 80068ac:	40001c00 	.word	0x40001c00
 80068b0:	40002000 	.word	0x40002000

080068b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	f023 0201 	bic.w	r2, r3, #1
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 0303 	bic.w	r3, r3, #3
 80068ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	f023 0302 	bic.w	r3, r3, #2
 80068fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	4313      	orrs	r3, r2
 8006906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a20      	ldr	r2, [pc, #128]	@ (800698c <TIM_OC1_SetConfig+0xd8>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d003      	beq.n	8006918 <TIM_OC1_SetConfig+0x64>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a1f      	ldr	r2, [pc, #124]	@ (8006990 <TIM_OC1_SetConfig+0xdc>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d10c      	bne.n	8006932 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f023 0308 	bic.w	r3, r3, #8
 800691e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	4313      	orrs	r3, r2
 8006928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f023 0304 	bic.w	r3, r3, #4
 8006930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a15      	ldr	r2, [pc, #84]	@ (800698c <TIM_OC1_SetConfig+0xd8>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d003      	beq.n	8006942 <TIM_OC1_SetConfig+0x8e>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a14      	ldr	r2, [pc, #80]	@ (8006990 <TIM_OC1_SetConfig+0xdc>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d111      	bne.n	8006966 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	4313      	orrs	r3, r2
 800695a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	4313      	orrs	r3, r2
 8006964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	685a      	ldr	r2, [r3, #4]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	621a      	str	r2, [r3, #32]
}
 8006980:	bf00      	nop
 8006982:	371c      	adds	r7, #28
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	40010000 	.word	0x40010000
 8006990:	40010400 	.word	0x40010400

08006994 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a1b      	ldr	r3, [r3, #32]
 80069a8:	f023 0210 	bic.w	r2, r3, #16
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	021b      	lsls	r3, r3, #8
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	f023 0320 	bic.w	r3, r3, #32
 80069de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	011b      	lsls	r3, r3, #4
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a22      	ldr	r2, [pc, #136]	@ (8006a78 <TIM_OC2_SetConfig+0xe4>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d003      	beq.n	80069fc <TIM_OC2_SetConfig+0x68>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a21      	ldr	r2, [pc, #132]	@ (8006a7c <TIM_OC2_SetConfig+0xe8>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d10d      	bne.n	8006a18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	011b      	lsls	r3, r3, #4
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a17      	ldr	r2, [pc, #92]	@ (8006a78 <TIM_OC2_SetConfig+0xe4>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d003      	beq.n	8006a28 <TIM_OC2_SetConfig+0x94>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a16      	ldr	r2, [pc, #88]	@ (8006a7c <TIM_OC2_SetConfig+0xe8>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d113      	bne.n	8006a50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	621a      	str	r2, [r3, #32]
}
 8006a6a:	bf00      	nop
 8006a6c:	371c      	adds	r7, #28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	40010000 	.word	0x40010000
 8006a7c:	40010400 	.word	0x40010400

08006a80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a1b      	ldr	r3, [r3, #32]
 8006a94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 0303 	bic.w	r3, r3, #3
 8006ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	021b      	lsls	r3, r3, #8
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a21      	ldr	r2, [pc, #132]	@ (8006b60 <TIM_OC3_SetConfig+0xe0>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d003      	beq.n	8006ae6 <TIM_OC3_SetConfig+0x66>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a20      	ldr	r2, [pc, #128]	@ (8006b64 <TIM_OC3_SetConfig+0xe4>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d10d      	bne.n	8006b02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006aec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	021b      	lsls	r3, r3, #8
 8006af4:	697a      	ldr	r2, [r7, #20]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a16      	ldr	r2, [pc, #88]	@ (8006b60 <TIM_OC3_SetConfig+0xe0>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d003      	beq.n	8006b12 <TIM_OC3_SetConfig+0x92>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a15      	ldr	r2, [pc, #84]	@ (8006b64 <TIM_OC3_SetConfig+0xe4>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d113      	bne.n	8006b3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	695b      	ldr	r3, [r3, #20]
 8006b26:	011b      	lsls	r3, r3, #4
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	621a      	str	r2, [r3, #32]
}
 8006b54:	bf00      	nop
 8006b56:	371c      	adds	r7, #28
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	40010000 	.word	0x40010000
 8006b64:	40010400 	.word	0x40010400

08006b68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a1b      	ldr	r3, [r3, #32]
 8006b7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	69db      	ldr	r3, [r3, #28]
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	021b      	lsls	r3, r3, #8
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006bb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	031b      	lsls	r3, r3, #12
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a12      	ldr	r2, [pc, #72]	@ (8006c0c <TIM_OC4_SetConfig+0xa4>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d003      	beq.n	8006bd0 <TIM_OC4_SetConfig+0x68>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a11      	ldr	r2, [pc, #68]	@ (8006c10 <TIM_OC4_SetConfig+0xa8>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d109      	bne.n	8006be4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	019b      	lsls	r3, r3, #6
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	621a      	str	r2, [r3, #32]
}
 8006bfe:	bf00      	nop
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	40010000 	.word	0x40010000
 8006c10:	40010400 	.word	0x40010400

08006c14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b087      	sub	sp, #28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
 8006c20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	f023 0201 	bic.w	r2, r3, #1
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	4a28      	ldr	r2, [pc, #160]	@ (8006ce0 <TIM_TI1_SetConfig+0xcc>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d01b      	beq.n	8006c7a <TIM_TI1_SetConfig+0x66>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c48:	d017      	beq.n	8006c7a <TIM_TI1_SetConfig+0x66>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4a25      	ldr	r2, [pc, #148]	@ (8006ce4 <TIM_TI1_SetConfig+0xd0>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d013      	beq.n	8006c7a <TIM_TI1_SetConfig+0x66>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4a24      	ldr	r2, [pc, #144]	@ (8006ce8 <TIM_TI1_SetConfig+0xd4>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d00f      	beq.n	8006c7a <TIM_TI1_SetConfig+0x66>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	4a23      	ldr	r2, [pc, #140]	@ (8006cec <TIM_TI1_SetConfig+0xd8>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d00b      	beq.n	8006c7a <TIM_TI1_SetConfig+0x66>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4a22      	ldr	r2, [pc, #136]	@ (8006cf0 <TIM_TI1_SetConfig+0xdc>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d007      	beq.n	8006c7a <TIM_TI1_SetConfig+0x66>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	4a21      	ldr	r2, [pc, #132]	@ (8006cf4 <TIM_TI1_SetConfig+0xe0>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d003      	beq.n	8006c7a <TIM_TI1_SetConfig+0x66>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4a20      	ldr	r2, [pc, #128]	@ (8006cf8 <TIM_TI1_SetConfig+0xe4>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d101      	bne.n	8006c7e <TIM_TI1_SetConfig+0x6a>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e000      	b.n	8006c80 <TIM_TI1_SetConfig+0x6c>
 8006c7e:	2300      	movs	r3, #0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d008      	beq.n	8006c96 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f023 0303 	bic.w	r3, r3, #3
 8006c8a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	617b      	str	r3, [r7, #20]
 8006c94:	e003      	b.n	8006c9e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f043 0301 	orr.w	r3, r3, #1
 8006c9c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ca4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	011b      	lsls	r3, r3, #4
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	f023 030a 	bic.w	r3, r3, #10
 8006cb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	f003 030a 	and.w	r3, r3, #10
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	621a      	str	r2, [r3, #32]
}
 8006cd2:	bf00      	nop
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	40010000 	.word	0x40010000
 8006ce4:	40000400 	.word	0x40000400
 8006ce8:	40000800 	.word	0x40000800
 8006cec:	40000c00 	.word	0x40000c00
 8006cf0:	40010400 	.word	0x40010400
 8006cf4:	40014000 	.word	0x40014000
 8006cf8:	40001800 	.word	0x40001800

08006cfc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	f023 0201 	bic.w	r2, r3, #1
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f023 030a 	bic.w	r3, r3, #10
 8006d38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	693a      	ldr	r2, [r7, #16]
 8006d46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	621a      	str	r2, [r3, #32]
}
 8006d4e:	bf00      	nop
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b087      	sub	sp, #28
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	60f8      	str	r0, [r7, #12]
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	607a      	str	r2, [r7, #4]
 8006d66:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	f023 0210 	bic.w	r2, r3, #16
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	021b      	lsls	r3, r3, #8
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	031b      	lsls	r3, r3, #12
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006dac:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	011b      	lsls	r3, r3, #4
 8006db2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	621a      	str	r2, [r3, #32]
}
 8006dc8:	bf00      	nop
 8006dca:	371c      	adds	r7, #28
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	f023 0210 	bic.w	r2, r3, #16
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	031b      	lsls	r3, r3, #12
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e10:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	011b      	lsls	r3, r3, #4
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	621a      	str	r2, [r3, #32]
}
 8006e28:	bf00      	nop
 8006e2a:	371c      	adds	r7, #28
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
 8006e40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6a1b      	ldr	r3, [r3, #32]
 8006e4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	69db      	ldr	r3, [r3, #28]
 8006e58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f023 0303 	bic.w	r3, r3, #3
 8006e60:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e70:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	011b      	lsls	r3, r3, #4
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006e84:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	021b      	lsls	r3, r3, #8
 8006e8a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	621a      	str	r2, [r3, #32]
}
 8006ea0:	bf00      	nop
 8006ea2:	371c      	adds	r7, #28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b087      	sub	sp, #28
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	69db      	ldr	r3, [r3, #28]
 8006ed0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ed8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	021b      	lsls	r3, r3, #8
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006eea:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	031b      	lsls	r3, r3, #12
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	693a      	ldr	r2, [r7, #16]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006efe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	031b      	lsls	r3, r3, #12
 8006f04:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	693a      	ldr	r2, [r7, #16]
 8006f12:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	697a      	ldr	r2, [r7, #20]
 8006f18:	621a      	str	r2, [r3, #32]
}
 8006f1a:	bf00      	nop
 8006f1c:	371c      	adds	r7, #28
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b085      	sub	sp, #20
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
 8006f2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f3e:	683a      	ldr	r2, [r7, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	f043 0307 	orr.w	r3, r3, #7
 8006f48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	609a      	str	r2, [r3, #8]
}
 8006f50:	bf00      	nop
 8006f52:	3714      	adds	r7, #20
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b087      	sub	sp, #28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	607a      	str	r2, [r7, #4]
 8006f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	021a      	lsls	r2, r3, #8
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	609a      	str	r2, [r3, #8]
}
 8006f90:	bf00      	nop
 8006f92:	371c      	adds	r7, #28
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b087      	sub	sp, #28
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	f003 031f 	and.w	r3, r3, #31
 8006fae:	2201      	movs	r2, #1
 8006fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6a1a      	ldr	r2, [r3, #32]
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	43db      	mvns	r3, r3
 8006fbe:	401a      	ands	r2, r3
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a1a      	ldr	r2, [r3, #32]
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f003 031f 	and.w	r3, r3, #31
 8006fce:	6879      	ldr	r1, [r7, #4]
 8006fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd4:	431a      	orrs	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	621a      	str	r2, [r3, #32]
}
 8006fda:	bf00      	nop
 8006fdc:	371c      	adds	r7, #28
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
	...

08006fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d101      	bne.n	8007000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	e05a      	b.n	80070b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a21      	ldr	r2, [pc, #132]	@ (80070c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d022      	beq.n	800708a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800704c:	d01d      	beq.n	800708a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a1d      	ldr	r2, [pc, #116]	@ (80070c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d018      	beq.n	800708a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a1b      	ldr	r2, [pc, #108]	@ (80070cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d013      	beq.n	800708a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a1a      	ldr	r2, [pc, #104]	@ (80070d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d00e      	beq.n	800708a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a18      	ldr	r2, [pc, #96]	@ (80070d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d009      	beq.n	800708a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a17      	ldr	r2, [pc, #92]	@ (80070d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d004      	beq.n	800708a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a15      	ldr	r2, [pc, #84]	@ (80070dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d10c      	bne.n	80070a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007090:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	4313      	orrs	r3, r2
 800709a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	40010000 	.word	0x40010000
 80070c8:	40000400 	.word	0x40000400
 80070cc:	40000800 	.word	0x40000800
 80070d0:	40000c00 	.word	0x40000c00
 80070d4:	40010400 	.word	0x40010400
 80070d8:	40014000 	.word	0x40014000
 80070dc:	40001800 	.word	0x40001800

080070e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d101      	bne.n	80070fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80070f8:	2302      	movs	r3, #2
 80070fa:	e03d      	b.n	8007178 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	4313      	orrs	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	4313      	orrs	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4313      	orrs	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	4313      	orrs	r3, r2
 8007148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	4313      	orrs	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	4313      	orrs	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071a0:	bf00      	nop
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e042      	b.n	8007244 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d106      	bne.n	80071d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7fb fc5c 	bl	8002a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2224      	movs	r2, #36	@ 0x24
 80071dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68da      	ldr	r2, [r3, #12]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80071ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fdbd 	bl	8007d70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	691a      	ldr	r2, [r3, #16]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007204:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	695a      	ldr	r2, [r3, #20]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007214:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68da      	ldr	r2, [r3, #12]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007224:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2220      	movs	r2, #32
 8007230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2220      	movs	r2, #32
 8007238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b08a      	sub	sp, #40	@ 0x28
 8007250:	af02      	add	r7, sp, #8
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	603b      	str	r3, [r7, #0]
 8007258:	4613      	mov	r3, r2
 800725a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800725c:	2300      	movs	r3, #0
 800725e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b20      	cmp	r3, #32
 800726a:	d175      	bne.n	8007358 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d002      	beq.n	8007278 <HAL_UART_Transmit+0x2c>
 8007272:	88fb      	ldrh	r3, [r7, #6]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d101      	bne.n	800727c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e06e      	b.n	800735a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2221      	movs	r2, #33	@ 0x21
 8007286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800728a:	f7fb fdf5 	bl	8002e78 <HAL_GetTick>
 800728e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	88fa      	ldrh	r2, [r7, #6]
 8007294:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	88fa      	ldrh	r2, [r7, #6]
 800729a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072a4:	d108      	bne.n	80072b8 <HAL_UART_Transmit+0x6c>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d104      	bne.n	80072b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80072ae:	2300      	movs	r3, #0
 80072b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	61bb      	str	r3, [r7, #24]
 80072b6:	e003      	b.n	80072c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072bc:	2300      	movs	r3, #0
 80072be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072c0:	e02e      	b.n	8007320 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2200      	movs	r2, #0
 80072ca:	2180      	movs	r1, #128	@ 0x80
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 fb1f 	bl	8007910 <UART_WaitOnFlagUntilTimeout>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d005      	beq.n	80072e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2220      	movs	r2, #32
 80072dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e03a      	b.n	800735a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10b      	bne.n	8007302 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	881b      	ldrh	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	3302      	adds	r3, #2
 80072fe:	61bb      	str	r3, [r7, #24]
 8007300:	e007      	b.n	8007312 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	781a      	ldrb	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	3301      	adds	r3, #1
 8007310:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007316:	b29b      	uxth	r3, r3
 8007318:	3b01      	subs	r3, #1
 800731a:	b29a      	uxth	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007324:	b29b      	uxth	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1cb      	bne.n	80072c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	2200      	movs	r2, #0
 8007332:	2140      	movs	r1, #64	@ 0x40
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 faeb 	bl	8007910 <UART_WaitOnFlagUntilTimeout>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d005      	beq.n	800734c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2220      	movs	r2, #32
 8007344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e006      	b.n	800735a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2220      	movs	r2, #32
 8007350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007354:	2300      	movs	r3, #0
 8007356:	e000      	b.n	800735a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007358:	2302      	movs	r3, #2
  }
}
 800735a:	4618      	mov	r0, r3
 800735c:	3720      	adds	r7, #32
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b084      	sub	sp, #16
 8007366:	af00      	add	r7, sp, #0
 8007368:	60f8      	str	r0, [r7, #12]
 800736a:	60b9      	str	r1, [r7, #8]
 800736c:	4613      	mov	r3, r2
 800736e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b20      	cmp	r3, #32
 800737a:	d112      	bne.n	80073a2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <HAL_UART_Receive_IT+0x26>
 8007382:	88fb      	ldrh	r3, [r7, #6]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d101      	bne.n	800738c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e00b      	b.n	80073a4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007392:	88fb      	ldrh	r3, [r7, #6]
 8007394:	461a      	mov	r2, r3
 8007396:	68b9      	ldr	r1, [r7, #8]
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 fb12 	bl	80079c2 <UART_Start_Receive_IT>
 800739e:	4603      	mov	r3, r0
 80073a0:	e000      	b.n	80073a4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80073a2:	2302      	movs	r3, #2
  }
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b0ba      	sub	sp, #232	@ 0xe8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80073d8:	2300      	movs	r3, #0
 80073da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80073de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073e2:	f003 030f 	and.w	r3, r3, #15
 80073e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80073ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10f      	bne.n	8007412 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073f6:	f003 0320 	and.w	r3, r3, #32
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d009      	beq.n	8007412 <HAL_UART_IRQHandler+0x66>
 80073fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007402:	f003 0320 	and.w	r3, r3, #32
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fbf2 	bl	8007bf4 <UART_Receive_IT>
      return;
 8007410:	e25b      	b.n	80078ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007412:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007416:	2b00      	cmp	r3, #0
 8007418:	f000 80de 	beq.w	80075d8 <HAL_UART_IRQHandler+0x22c>
 800741c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	2b00      	cmp	r3, #0
 8007426:	d106      	bne.n	8007436 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800742c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 80d1 	beq.w	80075d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00b      	beq.n	800745a <HAL_UART_IRQHandler+0xae>
 8007442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800744a:	2b00      	cmp	r3, #0
 800744c:	d005      	beq.n	800745a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007452:	f043 0201 	orr.w	r2, r3, #1
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800745a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800745e:	f003 0304 	and.w	r3, r3, #4
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00b      	beq.n	800747e <HAL_UART_IRQHandler+0xd2>
 8007466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b00      	cmp	r3, #0
 8007470:	d005      	beq.n	800747e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007476:	f043 0202 	orr.w	r2, r3, #2
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800747e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00b      	beq.n	80074a2 <HAL_UART_IRQHandler+0xf6>
 800748a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b00      	cmp	r3, #0
 8007494:	d005      	beq.n	80074a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800749a:	f043 0204 	orr.w	r2, r3, #4
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80074a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074a6:	f003 0308 	and.w	r3, r3, #8
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d011      	beq.n	80074d2 <HAL_UART_IRQHandler+0x126>
 80074ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074b2:	f003 0320 	and.w	r3, r3, #32
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d105      	bne.n	80074c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80074ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d005      	beq.n	80074d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ca:	f043 0208 	orr.w	r2, r3, #8
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	f000 81f2 	beq.w	80078c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074e0:	f003 0320 	and.w	r3, r3, #32
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d008      	beq.n	80074fa <HAL_UART_IRQHandler+0x14e>
 80074e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074ec:	f003 0320 	and.w	r3, r3, #32
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d002      	beq.n	80074fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fb7d 	bl	8007bf4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007504:	2b40      	cmp	r3, #64	@ 0x40
 8007506:	bf0c      	ite	eq
 8007508:	2301      	moveq	r3, #1
 800750a:	2300      	movne	r3, #0
 800750c:	b2db      	uxtb	r3, r3
 800750e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007516:	f003 0308 	and.w	r3, r3, #8
 800751a:	2b00      	cmp	r3, #0
 800751c:	d103      	bne.n	8007526 <HAL_UART_IRQHandler+0x17a>
 800751e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007522:	2b00      	cmp	r3, #0
 8007524:	d04f      	beq.n	80075c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fa85 	bl	8007a36 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007536:	2b40      	cmp	r3, #64	@ 0x40
 8007538:	d141      	bne.n	80075be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	3314      	adds	r3, #20
 8007540:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007544:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007550:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007554:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007558:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3314      	adds	r3, #20
 8007562:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007566:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800756a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007572:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007576:	e841 2300 	strex	r3, r2, [r1]
 800757a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800757e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1d9      	bne.n	800753a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800758a:	2b00      	cmp	r3, #0
 800758c:	d013      	beq.n	80075b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007592:	4a7e      	ldr	r2, [pc, #504]	@ (800778c <HAL_UART_IRQHandler+0x3e0>)
 8007594:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800759a:	4618      	mov	r0, r3
 800759c:	f7fc fa1d 	bl	80039da <HAL_DMA_Abort_IT>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d016      	beq.n	80075d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80075b0:	4610      	mov	r0, r2
 80075b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b4:	e00e      	b.n	80075d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f994 	bl	80078e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075bc:	e00a      	b.n	80075d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f990 	bl	80078e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c4:	e006      	b.n	80075d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f98c 	bl	80078e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80075d2:	e175      	b.n	80078c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d4:	bf00      	nop
    return;
 80075d6:	e173      	b.n	80078c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075dc:	2b01      	cmp	r3, #1
 80075de:	f040 814f 	bne.w	8007880 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80075e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075e6:	f003 0310 	and.w	r3, r3, #16
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 8148 	beq.w	8007880 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80075f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075f4:	f003 0310 	and.w	r3, r3, #16
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 8141 	beq.w	8007880 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075fe:	2300      	movs	r3, #0
 8007600:	60bb      	str	r3, [r7, #8]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	60bb      	str	r3, [r7, #8]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	60bb      	str	r3, [r7, #8]
 8007612:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800761e:	2b40      	cmp	r3, #64	@ 0x40
 8007620:	f040 80b6 	bne.w	8007790 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007630:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 8145 	beq.w	80078c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800763e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007642:	429a      	cmp	r2, r3
 8007644:	f080 813e 	bcs.w	80078c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800764e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800765a:	f000 8088 	beq.w	800776e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	330c      	adds	r3, #12
 8007664:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007668:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800766c:	e853 3f00 	ldrex	r3, [r3]
 8007670:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007674:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007678:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800767c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	330c      	adds	r3, #12
 8007686:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800768a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800768e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007696:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800769a:	e841 2300 	strex	r3, r2, [r1]
 800769e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80076a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1d9      	bne.n	800765e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	3314      	adds	r3, #20
 80076b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076b4:	e853 3f00 	ldrex	r3, [r3]
 80076b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80076ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076bc:	f023 0301 	bic.w	r3, r3, #1
 80076c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3314      	adds	r3, #20
 80076ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80076ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80076d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80076d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80076da:	e841 2300 	strex	r3, r2, [r1]
 80076de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80076e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1e1      	bne.n	80076aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	3314      	adds	r3, #20
 80076ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80076f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3314      	adds	r3, #20
 8007706:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800770a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800770c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007710:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007712:	e841 2300 	strex	r3, r2, [r1]
 8007716:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007718:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1e3      	bne.n	80076e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2220      	movs	r2, #32
 8007722:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	330c      	adds	r3, #12
 8007732:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800773c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800773e:	f023 0310 	bic.w	r3, r3, #16
 8007742:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	330c      	adds	r3, #12
 800774c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007750:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007752:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007754:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007756:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007758:	e841 2300 	strex	r3, r2, [r1]
 800775c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800775e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1e3      	bne.n	800772c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007768:	4618      	mov	r0, r3
 800776a:	f7fc f8c6 	bl	80038fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2202      	movs	r2, #2
 8007772:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800777c:	b29b      	uxth	r3, r3
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	b29b      	uxth	r3, r3
 8007782:	4619      	mov	r1, r3
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f8b7 	bl	80078f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800778a:	e09b      	b.n	80078c4 <HAL_UART_IRQHandler+0x518>
 800778c:	08007afd 	.word	0x08007afd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007798:	b29b      	uxth	r3, r3
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 808e 	beq.w	80078c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80077ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 8089 	beq.w	80078c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	330c      	adds	r3, #12
 80077bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c0:	e853 3f00 	ldrex	r3, [r3]
 80077c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	330c      	adds	r3, #12
 80077d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80077da:	647a      	str	r2, [r7, #68]	@ 0x44
 80077dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e3      	bne.n	80077b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	3314      	adds	r3, #20
 80077f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f8:	e853 3f00 	ldrex	r3, [r3]
 80077fc:	623b      	str	r3, [r7, #32]
   return(result);
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	f023 0301 	bic.w	r3, r3, #1
 8007804:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3314      	adds	r3, #20
 800780e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007812:	633a      	str	r2, [r7, #48]	@ 0x30
 8007814:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007816:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800781a:	e841 2300 	strex	r3, r2, [r1]
 800781e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1e3      	bne.n	80077ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2220      	movs	r2, #32
 800782a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	330c      	adds	r3, #12
 800783a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	e853 3f00 	ldrex	r3, [r3]
 8007842:	60fb      	str	r3, [r7, #12]
   return(result);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f023 0310 	bic.w	r3, r3, #16
 800784a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	330c      	adds	r3, #12
 8007854:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007858:	61fa      	str	r2, [r7, #28]
 800785a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	69b9      	ldr	r1, [r7, #24]
 800785e:	69fa      	ldr	r2, [r7, #28]
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	617b      	str	r3, [r7, #20]
   return(result);
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e3      	bne.n	8007834 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2202      	movs	r2, #2
 8007870:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007872:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f83d 	bl	80078f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800787e:	e023      	b.n	80078c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007888:	2b00      	cmp	r3, #0
 800788a:	d009      	beq.n	80078a0 <HAL_UART_IRQHandler+0x4f4>
 800788c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f943 	bl	8007b24 <UART_Transmit_IT>
    return;
 800789e:	e014      	b.n	80078ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80078a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00e      	beq.n	80078ca <HAL_UART_IRQHandler+0x51e>
 80078ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d008      	beq.n	80078ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f983 	bl	8007bc4 <UART_EndTransmit_IT>
    return;
 80078be:	e004      	b.n	80078ca <HAL_UART_IRQHandler+0x51e>
    return;
 80078c0:	bf00      	nop
 80078c2:	e002      	b.n	80078ca <HAL_UART_IRQHandler+0x51e>
      return;
 80078c4:	bf00      	nop
 80078c6:	e000      	b.n	80078ca <HAL_UART_IRQHandler+0x51e>
      return;
 80078c8:	bf00      	nop
  }
}
 80078ca:	37e8      	adds	r7, #232	@ 0xe8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	460b      	mov	r3, r1
 8007902:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	603b      	str	r3, [r7, #0]
 800791c:	4613      	mov	r3, r2
 800791e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007920:	e03b      	b.n	800799a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007928:	d037      	beq.n	800799a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800792a:	f7fb faa5 	bl	8002e78 <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	6a3a      	ldr	r2, [r7, #32]
 8007936:	429a      	cmp	r2, r3
 8007938:	d302      	bcc.n	8007940 <UART_WaitOnFlagUntilTimeout+0x30>
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e03a      	b.n	80079ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	f003 0304 	and.w	r3, r3, #4
 800794e:	2b00      	cmp	r3, #0
 8007950:	d023      	beq.n	800799a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	2b80      	cmp	r3, #128	@ 0x80
 8007956:	d020      	beq.n	800799a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	2b40      	cmp	r3, #64	@ 0x40
 800795c:	d01d      	beq.n	800799a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 0308 	and.w	r3, r3, #8
 8007968:	2b08      	cmp	r3, #8
 800796a:	d116      	bne.n	800799a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800796c:	2300      	movs	r3, #0
 800796e:	617b      	str	r3, [r7, #20]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	617b      	str	r3, [r7, #20]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	617b      	str	r3, [r7, #20]
 8007980:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 f857 	bl	8007a36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2208      	movs	r2, #8
 800798c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e00f      	b.n	80079ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	4013      	ands	r3, r2
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	bf0c      	ite	eq
 80079aa:	2301      	moveq	r3, #1
 80079ac:	2300      	movne	r3, #0
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	461a      	mov	r2, r3
 80079b2:	79fb      	ldrb	r3, [r7, #7]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d0b4      	beq.n	8007922 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3718      	adds	r7, #24
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b085      	sub	sp, #20
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	60f8      	str	r0, [r7, #12]
 80079ca:	60b9      	str	r1, [r7, #8]
 80079cc:	4613      	mov	r3, r2
 80079ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	88fa      	ldrh	r2, [r7, #6]
 80079da:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	88fa      	ldrh	r2, [r7, #6]
 80079e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2222      	movs	r2, #34	@ 0x22
 80079ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d007      	beq.n	8007a08 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a06:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	695a      	ldr	r2, [r3, #20]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f042 0201 	orr.w	r2, r2, #1
 8007a16:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68da      	ldr	r2, [r3, #12]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f042 0220 	orr.w	r2, r2, #32
 8007a26:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr

08007a36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a36:	b480      	push	{r7}
 8007a38:	b095      	sub	sp, #84	@ 0x54
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	330c      	adds	r3, #12
 8007a44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a48:	e853 3f00 	ldrex	r3, [r3]
 8007a4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	330c      	adds	r3, #12
 8007a5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a5e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a66:	e841 2300 	strex	r3, r2, [r1]
 8007a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1e5      	bne.n	8007a3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3314      	adds	r3, #20
 8007a78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	e853 3f00 	ldrex	r3, [r3]
 8007a80:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	f023 0301 	bic.w	r3, r3, #1
 8007a88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3314      	adds	r3, #20
 8007a90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a9a:	e841 2300 	strex	r3, r2, [r1]
 8007a9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1e5      	bne.n	8007a72 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d119      	bne.n	8007ae2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	330c      	adds	r3, #12
 8007ab4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	e853 3f00 	ldrex	r3, [r3]
 8007abc:	60bb      	str	r3, [r7, #8]
   return(result);
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	f023 0310 	bic.w	r3, r3, #16
 8007ac4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	330c      	adds	r3, #12
 8007acc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ace:	61ba      	str	r2, [r7, #24]
 8007ad0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad2:	6979      	ldr	r1, [r7, #20]
 8007ad4:	69ba      	ldr	r2, [r7, #24]
 8007ad6:	e841 2300 	strex	r3, r2, [r1]
 8007ada:	613b      	str	r3, [r7, #16]
   return(result);
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1e5      	bne.n	8007aae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2220      	movs	r2, #32
 8007ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007af0:	bf00      	nop
 8007af2:	3754      	adds	r7, #84	@ 0x54
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f7ff fee4 	bl	80078e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b1c:	bf00      	nop
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	2b21      	cmp	r3, #33	@ 0x21
 8007b36:	d13e      	bne.n	8007bb6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b40:	d114      	bne.n	8007b6c <UART_Transmit_IT+0x48>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d110      	bne.n	8007b6c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	461a      	mov	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b5e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	1c9a      	adds	r2, r3, #2
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	621a      	str	r2, [r3, #32]
 8007b6a:	e008      	b.n	8007b7e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a1b      	ldr	r3, [r3, #32]
 8007b70:	1c59      	adds	r1, r3, #1
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	6211      	str	r1, [r2, #32]
 8007b76:	781a      	ldrb	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	3b01      	subs	r3, #1
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d10f      	bne.n	8007bb2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68da      	ldr	r2, [r3, #12]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007ba0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68da      	ldr	r2, [r3, #12]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bb0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	e000      	b.n	8007bb8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007bb6:	2302      	movs	r3, #2
  }
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68da      	ldr	r2, [r3, #12]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2220      	movs	r2, #32
 8007be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7ff fe73 	bl	80078d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b08c      	sub	sp, #48	@ 0x30
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	2b22      	cmp	r3, #34	@ 0x22
 8007c06:	f040 80ae 	bne.w	8007d66 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c12:	d117      	bne.n	8007c44 <UART_Receive_IT+0x50>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d113      	bne.n	8007c44 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c24:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c3c:	1c9a      	adds	r2, r3, #2
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c42:	e026      	b.n	8007c92 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c56:	d007      	beq.n	8007c68 <UART_Receive_IT+0x74>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10a      	bne.n	8007c76 <UART_Receive_IT+0x82>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d106      	bne.n	8007c76 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	b2da      	uxtb	r2, r3
 8007c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c72:	701a      	strb	r2, [r3, #0]
 8007c74:	e008      	b.n	8007c88 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c82:	b2da      	uxtb	r2, r3
 8007c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c8c:	1c5a      	adds	r2, r3, #1
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d15d      	bne.n	8007d62 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68da      	ldr	r2, [r3, #12]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f022 0220 	bic.w	r2, r2, #32
 8007cb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68da      	ldr	r2, [r3, #12]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007cc4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	695a      	ldr	r2, [r3, #20]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f022 0201 	bic.w	r2, r2, #1
 8007cd4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2220      	movs	r2, #32
 8007cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d135      	bne.n	8007d58 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	330c      	adds	r3, #12
 8007cf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	e853 3f00 	ldrex	r3, [r3]
 8007d00:	613b      	str	r3, [r7, #16]
   return(result);
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	f023 0310 	bic.w	r3, r3, #16
 8007d08:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	330c      	adds	r3, #12
 8007d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d12:	623a      	str	r2, [r7, #32]
 8007d14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d16:	69f9      	ldr	r1, [r7, #28]
 8007d18:	6a3a      	ldr	r2, [r7, #32]
 8007d1a:	e841 2300 	strex	r3, r2, [r1]
 8007d1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1e5      	bne.n	8007cf2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 0310 	and.w	r3, r3, #16
 8007d30:	2b10      	cmp	r3, #16
 8007d32:	d10a      	bne.n	8007d4a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d34:	2300      	movs	r3, #0
 8007d36:	60fb      	str	r3, [r7, #12]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	60fb      	str	r3, [r7, #12]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7ff fdd1 	bl	80078f8 <HAL_UARTEx_RxEventCallback>
 8007d56:	e002      	b.n	8007d5e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7f9 ffe3 	bl	8001d24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	e002      	b.n	8007d68 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	e000      	b.n	8007d68 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007d66:	2302      	movs	r3, #2
  }
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3730      	adds	r7, #48	@ 0x30
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d74:	b0c0      	sub	sp, #256	@ 0x100
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	691b      	ldr	r3, [r3, #16]
 8007d84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d8c:	68d9      	ldr	r1, [r3, #12]
 8007d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	ea40 0301 	orr.w	r3, r0, r1
 8007d98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d9e:	689a      	ldr	r2, [r3, #8]
 8007da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	431a      	orrs	r2, r3
 8007da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	431a      	orrs	r2, r3
 8007db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007db4:	69db      	ldr	r3, [r3, #28]
 8007db6:	4313      	orrs	r3, r2
 8007db8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007dc8:	f021 010c 	bic.w	r1, r1, #12
 8007dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007dd6:	430b      	orrs	r3, r1
 8007dd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dea:	6999      	ldr	r1, [r3, #24]
 8007dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	ea40 0301 	orr.w	r3, r0, r1
 8007df6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	4b8f      	ldr	r3, [pc, #572]	@ (800803c <UART_SetConfig+0x2cc>)
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d005      	beq.n	8007e10 <UART_SetConfig+0xa0>
 8007e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	4b8d      	ldr	r3, [pc, #564]	@ (8008040 <UART_SetConfig+0x2d0>)
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d104      	bne.n	8007e1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e10:	f7fd fc7e 	bl	8005710 <HAL_RCC_GetPCLK2Freq>
 8007e14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007e18:	e003      	b.n	8007e22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e1a:	f7fd fc65 	bl	80056e8 <HAL_RCC_GetPCLK1Freq>
 8007e1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e26:	69db      	ldr	r3, [r3, #28]
 8007e28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e2c:	f040 810c 	bne.w	8008048 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e34:	2200      	movs	r2, #0
 8007e36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007e3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007e3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007e42:	4622      	mov	r2, r4
 8007e44:	462b      	mov	r3, r5
 8007e46:	1891      	adds	r1, r2, r2
 8007e48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007e4a:	415b      	adcs	r3, r3
 8007e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007e52:	4621      	mov	r1, r4
 8007e54:	eb12 0801 	adds.w	r8, r2, r1
 8007e58:	4629      	mov	r1, r5
 8007e5a:	eb43 0901 	adc.w	r9, r3, r1
 8007e5e:	f04f 0200 	mov.w	r2, #0
 8007e62:	f04f 0300 	mov.w	r3, #0
 8007e66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e72:	4690      	mov	r8, r2
 8007e74:	4699      	mov	r9, r3
 8007e76:	4623      	mov	r3, r4
 8007e78:	eb18 0303 	adds.w	r3, r8, r3
 8007e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007e80:	462b      	mov	r3, r5
 8007e82:	eb49 0303 	adc.w	r3, r9, r3
 8007e86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007e96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007e9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	18db      	adds	r3, r3, r3
 8007ea2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	eb42 0303 	adc.w	r3, r2, r3
 8007eaa:	657b      	str	r3, [r7, #84]	@ 0x54
 8007eac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007eb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007eb4:	f7f8 fee8 	bl	8000c88 <__aeabi_uldivmod>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	460b      	mov	r3, r1
 8007ebc:	4b61      	ldr	r3, [pc, #388]	@ (8008044 <UART_SetConfig+0x2d4>)
 8007ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8007ec2:	095b      	lsrs	r3, r3, #5
 8007ec4:	011c      	lsls	r4, r3, #4
 8007ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ed0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007ed4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007ed8:	4642      	mov	r2, r8
 8007eda:	464b      	mov	r3, r9
 8007edc:	1891      	adds	r1, r2, r2
 8007ede:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007ee0:	415b      	adcs	r3, r3
 8007ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ee4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007ee8:	4641      	mov	r1, r8
 8007eea:	eb12 0a01 	adds.w	sl, r2, r1
 8007eee:	4649      	mov	r1, r9
 8007ef0:	eb43 0b01 	adc.w	fp, r3, r1
 8007ef4:	f04f 0200 	mov.w	r2, #0
 8007ef8:	f04f 0300 	mov.w	r3, #0
 8007efc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f08:	4692      	mov	sl, r2
 8007f0a:	469b      	mov	fp, r3
 8007f0c:	4643      	mov	r3, r8
 8007f0e:	eb1a 0303 	adds.w	r3, sl, r3
 8007f12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f16:	464b      	mov	r3, r9
 8007f18:	eb4b 0303 	adc.w	r3, fp, r3
 8007f1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007f30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007f34:	460b      	mov	r3, r1
 8007f36:	18db      	adds	r3, r3, r3
 8007f38:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	eb42 0303 	adc.w	r3, r2, r3
 8007f40:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007f46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007f4a:	f7f8 fe9d 	bl	8000c88 <__aeabi_uldivmod>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	460b      	mov	r3, r1
 8007f52:	4611      	mov	r1, r2
 8007f54:	4b3b      	ldr	r3, [pc, #236]	@ (8008044 <UART_SetConfig+0x2d4>)
 8007f56:	fba3 2301 	umull	r2, r3, r3, r1
 8007f5a:	095b      	lsrs	r3, r3, #5
 8007f5c:	2264      	movs	r2, #100	@ 0x64
 8007f5e:	fb02 f303 	mul.w	r3, r2, r3
 8007f62:	1acb      	subs	r3, r1, r3
 8007f64:	00db      	lsls	r3, r3, #3
 8007f66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007f6a:	4b36      	ldr	r3, [pc, #216]	@ (8008044 <UART_SetConfig+0x2d4>)
 8007f6c:	fba3 2302 	umull	r2, r3, r3, r2
 8007f70:	095b      	lsrs	r3, r3, #5
 8007f72:	005b      	lsls	r3, r3, #1
 8007f74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007f78:	441c      	add	r4, r3
 8007f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007f88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007f8c:	4642      	mov	r2, r8
 8007f8e:	464b      	mov	r3, r9
 8007f90:	1891      	adds	r1, r2, r2
 8007f92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007f94:	415b      	adcs	r3, r3
 8007f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007f9c:	4641      	mov	r1, r8
 8007f9e:	1851      	adds	r1, r2, r1
 8007fa0:	6339      	str	r1, [r7, #48]	@ 0x30
 8007fa2:	4649      	mov	r1, r9
 8007fa4:	414b      	adcs	r3, r1
 8007fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fa8:	f04f 0200 	mov.w	r2, #0
 8007fac:	f04f 0300 	mov.w	r3, #0
 8007fb0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007fb4:	4659      	mov	r1, fp
 8007fb6:	00cb      	lsls	r3, r1, #3
 8007fb8:	4651      	mov	r1, sl
 8007fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fbe:	4651      	mov	r1, sl
 8007fc0:	00ca      	lsls	r2, r1, #3
 8007fc2:	4610      	mov	r0, r2
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	4642      	mov	r2, r8
 8007fca:	189b      	adds	r3, r3, r2
 8007fcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007fd0:	464b      	mov	r3, r9
 8007fd2:	460a      	mov	r2, r1
 8007fd4:	eb42 0303 	adc.w	r3, r2, r3
 8007fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007fe8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007fec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	18db      	adds	r3, r3, r3
 8007ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ff6:	4613      	mov	r3, r2
 8007ff8:	eb42 0303 	adc.w	r3, r2, r3
 8007ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ffe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008002:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008006:	f7f8 fe3f 	bl	8000c88 <__aeabi_uldivmod>
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	4b0d      	ldr	r3, [pc, #52]	@ (8008044 <UART_SetConfig+0x2d4>)
 8008010:	fba3 1302 	umull	r1, r3, r3, r2
 8008014:	095b      	lsrs	r3, r3, #5
 8008016:	2164      	movs	r1, #100	@ 0x64
 8008018:	fb01 f303 	mul.w	r3, r1, r3
 800801c:	1ad3      	subs	r3, r2, r3
 800801e:	00db      	lsls	r3, r3, #3
 8008020:	3332      	adds	r3, #50	@ 0x32
 8008022:	4a08      	ldr	r2, [pc, #32]	@ (8008044 <UART_SetConfig+0x2d4>)
 8008024:	fba2 2303 	umull	r2, r3, r2, r3
 8008028:	095b      	lsrs	r3, r3, #5
 800802a:	f003 0207 	and.w	r2, r3, #7
 800802e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4422      	add	r2, r4
 8008036:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008038:	e106      	b.n	8008248 <UART_SetConfig+0x4d8>
 800803a:	bf00      	nop
 800803c:	40011000 	.word	0x40011000
 8008040:	40011400 	.word	0x40011400
 8008044:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800804c:	2200      	movs	r2, #0
 800804e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008052:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008056:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800805a:	4642      	mov	r2, r8
 800805c:	464b      	mov	r3, r9
 800805e:	1891      	adds	r1, r2, r2
 8008060:	6239      	str	r1, [r7, #32]
 8008062:	415b      	adcs	r3, r3
 8008064:	627b      	str	r3, [r7, #36]	@ 0x24
 8008066:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800806a:	4641      	mov	r1, r8
 800806c:	1854      	adds	r4, r2, r1
 800806e:	4649      	mov	r1, r9
 8008070:	eb43 0501 	adc.w	r5, r3, r1
 8008074:	f04f 0200 	mov.w	r2, #0
 8008078:	f04f 0300 	mov.w	r3, #0
 800807c:	00eb      	lsls	r3, r5, #3
 800807e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008082:	00e2      	lsls	r2, r4, #3
 8008084:	4614      	mov	r4, r2
 8008086:	461d      	mov	r5, r3
 8008088:	4643      	mov	r3, r8
 800808a:	18e3      	adds	r3, r4, r3
 800808c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008090:	464b      	mov	r3, r9
 8008092:	eb45 0303 	adc.w	r3, r5, r3
 8008096:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800809a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80080a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80080aa:	f04f 0200 	mov.w	r2, #0
 80080ae:	f04f 0300 	mov.w	r3, #0
 80080b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80080b6:	4629      	mov	r1, r5
 80080b8:	008b      	lsls	r3, r1, #2
 80080ba:	4621      	mov	r1, r4
 80080bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080c0:	4621      	mov	r1, r4
 80080c2:	008a      	lsls	r2, r1, #2
 80080c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80080c8:	f7f8 fdde 	bl	8000c88 <__aeabi_uldivmod>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	4b60      	ldr	r3, [pc, #384]	@ (8008254 <UART_SetConfig+0x4e4>)
 80080d2:	fba3 2302 	umull	r2, r3, r3, r2
 80080d6:	095b      	lsrs	r3, r3, #5
 80080d8:	011c      	lsls	r4, r3, #4
 80080da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080de:	2200      	movs	r2, #0
 80080e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80080e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80080e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80080ec:	4642      	mov	r2, r8
 80080ee:	464b      	mov	r3, r9
 80080f0:	1891      	adds	r1, r2, r2
 80080f2:	61b9      	str	r1, [r7, #24]
 80080f4:	415b      	adcs	r3, r3
 80080f6:	61fb      	str	r3, [r7, #28]
 80080f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080fc:	4641      	mov	r1, r8
 80080fe:	1851      	adds	r1, r2, r1
 8008100:	6139      	str	r1, [r7, #16]
 8008102:	4649      	mov	r1, r9
 8008104:	414b      	adcs	r3, r1
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	f04f 0200 	mov.w	r2, #0
 800810c:	f04f 0300 	mov.w	r3, #0
 8008110:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008114:	4659      	mov	r1, fp
 8008116:	00cb      	lsls	r3, r1, #3
 8008118:	4651      	mov	r1, sl
 800811a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800811e:	4651      	mov	r1, sl
 8008120:	00ca      	lsls	r2, r1, #3
 8008122:	4610      	mov	r0, r2
 8008124:	4619      	mov	r1, r3
 8008126:	4603      	mov	r3, r0
 8008128:	4642      	mov	r2, r8
 800812a:	189b      	adds	r3, r3, r2
 800812c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008130:	464b      	mov	r3, r9
 8008132:	460a      	mov	r2, r1
 8008134:	eb42 0303 	adc.w	r3, r2, r3
 8008138:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800813c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008146:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008148:	f04f 0200 	mov.w	r2, #0
 800814c:	f04f 0300 	mov.w	r3, #0
 8008150:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008154:	4649      	mov	r1, r9
 8008156:	008b      	lsls	r3, r1, #2
 8008158:	4641      	mov	r1, r8
 800815a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800815e:	4641      	mov	r1, r8
 8008160:	008a      	lsls	r2, r1, #2
 8008162:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008166:	f7f8 fd8f 	bl	8000c88 <__aeabi_uldivmod>
 800816a:	4602      	mov	r2, r0
 800816c:	460b      	mov	r3, r1
 800816e:	4611      	mov	r1, r2
 8008170:	4b38      	ldr	r3, [pc, #224]	@ (8008254 <UART_SetConfig+0x4e4>)
 8008172:	fba3 2301 	umull	r2, r3, r3, r1
 8008176:	095b      	lsrs	r3, r3, #5
 8008178:	2264      	movs	r2, #100	@ 0x64
 800817a:	fb02 f303 	mul.w	r3, r2, r3
 800817e:	1acb      	subs	r3, r1, r3
 8008180:	011b      	lsls	r3, r3, #4
 8008182:	3332      	adds	r3, #50	@ 0x32
 8008184:	4a33      	ldr	r2, [pc, #204]	@ (8008254 <UART_SetConfig+0x4e4>)
 8008186:	fba2 2303 	umull	r2, r3, r2, r3
 800818a:	095b      	lsrs	r3, r3, #5
 800818c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008190:	441c      	add	r4, r3
 8008192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008196:	2200      	movs	r2, #0
 8008198:	673b      	str	r3, [r7, #112]	@ 0x70
 800819a:	677a      	str	r2, [r7, #116]	@ 0x74
 800819c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80081a0:	4642      	mov	r2, r8
 80081a2:	464b      	mov	r3, r9
 80081a4:	1891      	adds	r1, r2, r2
 80081a6:	60b9      	str	r1, [r7, #8]
 80081a8:	415b      	adcs	r3, r3
 80081aa:	60fb      	str	r3, [r7, #12]
 80081ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081b0:	4641      	mov	r1, r8
 80081b2:	1851      	adds	r1, r2, r1
 80081b4:	6039      	str	r1, [r7, #0]
 80081b6:	4649      	mov	r1, r9
 80081b8:	414b      	adcs	r3, r1
 80081ba:	607b      	str	r3, [r7, #4]
 80081bc:	f04f 0200 	mov.w	r2, #0
 80081c0:	f04f 0300 	mov.w	r3, #0
 80081c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80081c8:	4659      	mov	r1, fp
 80081ca:	00cb      	lsls	r3, r1, #3
 80081cc:	4651      	mov	r1, sl
 80081ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081d2:	4651      	mov	r1, sl
 80081d4:	00ca      	lsls	r2, r1, #3
 80081d6:	4610      	mov	r0, r2
 80081d8:	4619      	mov	r1, r3
 80081da:	4603      	mov	r3, r0
 80081dc:	4642      	mov	r2, r8
 80081de:	189b      	adds	r3, r3, r2
 80081e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80081e2:	464b      	mov	r3, r9
 80081e4:	460a      	mov	r2, r1
 80081e6:	eb42 0303 	adc.w	r3, r2, r3
 80081ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80081ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80081f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80081f8:	f04f 0200 	mov.w	r2, #0
 80081fc:	f04f 0300 	mov.w	r3, #0
 8008200:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008204:	4649      	mov	r1, r9
 8008206:	008b      	lsls	r3, r1, #2
 8008208:	4641      	mov	r1, r8
 800820a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800820e:	4641      	mov	r1, r8
 8008210:	008a      	lsls	r2, r1, #2
 8008212:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008216:	f7f8 fd37 	bl	8000c88 <__aeabi_uldivmod>
 800821a:	4602      	mov	r2, r0
 800821c:	460b      	mov	r3, r1
 800821e:	4b0d      	ldr	r3, [pc, #52]	@ (8008254 <UART_SetConfig+0x4e4>)
 8008220:	fba3 1302 	umull	r1, r3, r3, r2
 8008224:	095b      	lsrs	r3, r3, #5
 8008226:	2164      	movs	r1, #100	@ 0x64
 8008228:	fb01 f303 	mul.w	r3, r1, r3
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	011b      	lsls	r3, r3, #4
 8008230:	3332      	adds	r3, #50	@ 0x32
 8008232:	4a08      	ldr	r2, [pc, #32]	@ (8008254 <UART_SetConfig+0x4e4>)
 8008234:	fba2 2303 	umull	r2, r3, r2, r3
 8008238:	095b      	lsrs	r3, r3, #5
 800823a:	f003 020f 	and.w	r2, r3, #15
 800823e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4422      	add	r2, r4
 8008246:	609a      	str	r2, [r3, #8]
}
 8008248:	bf00      	nop
 800824a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800824e:	46bd      	mov	sp, r7
 8008250:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008254:	51eb851f 	.word	0x51eb851f

08008258 <_ICM20948_SelectUserBank>:

#include "ICM20948.h"


HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 8008258:	b580      	push	{r7, lr}
 800825a:	b08a      	sub	sp, #40	@ 0x28
 800825c:	af04      	add	r7, sp, #16
 800825e:	60f8      	str	r0, [r7, #12]
 8008260:	460b      	mov	r3, r1
 8008262:	607a      	str	r2, [r7, #4]
 8008264:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	b2db      	uxtb	r3, r3
 800826e:	011b      	lsls	r3, r3, #4
 8008270:	b2db      	uxtb	r3, r3
 8008272:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8008274:	7afb      	ldrb	r3, [r7, #11]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <_ICM20948_SelectUserBank+0x26>
 800827a:	2368      	movs	r3, #104	@ 0x68
 800827c:	e000      	b.n	8008280 <_ICM20948_SelectUserBank+0x28>
 800827e:	2369      	movs	r3, #105	@ 0x69
 8008280:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 8008282:	7dbb      	ldrb	r3, [r7, #22]
 8008284:	b29b      	uxth	r3, r3
 8008286:	005b      	lsls	r3, r3, #1
 8008288:	b299      	uxth	r1, r3
 800828a:	230a      	movs	r3, #10
 800828c:	9302      	str	r3, [sp, #8]
 800828e:	2301      	movs	r3, #1
 8008290:	9301      	str	r3, [sp, #4]
 8008292:	f107 0315 	add.w	r3, r7, #21
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	2301      	movs	r3, #1
 800829a:	227f      	movs	r2, #127	@ 0x7f
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f7fb feeb 	bl	8004078 <HAL_I2C_Mem_Write>
 80082a2:	4603      	mov	r3, r0
 80082a4:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80082a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3718      	adds	r7, #24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b088      	sub	sp, #32
 80082b4:	af04      	add	r7, sp, #16
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	4608      	mov	r0, r1
 80082ba:	4611      	mov	r1, r2
 80082bc:	461a      	mov	r2, r3
 80082be:	4603      	mov	r3, r0
 80082c0:	70fb      	strb	r3, [r7, #3]
 80082c2:	460b      	mov	r3, r1
 80082c4:	70bb      	strb	r3, [r7, #2]
 80082c6:	4613      	mov	r3, r2
 80082c8:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 80082ce:	78fb      	ldrb	r3, [r7, #3]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d101      	bne.n	80082d8 <_ICM20948_WriteByte+0x28>
 80082d4:	2368      	movs	r3, #104	@ 0x68
 80082d6:	e000      	b.n	80082da <_ICM20948_WriteByte+0x2a>
 80082d8:	2369      	movs	r3, #105	@ 0x69
 80082da:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 80082dc:	7bbb      	ldrb	r3, [r7, #14]
 80082de:	b29b      	uxth	r3, r3
 80082e0:	005b      	lsls	r3, r3, #1
 80082e2:	b299      	uxth	r1, r3
 80082e4:	78bb      	ldrb	r3, [r7, #2]
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	230a      	movs	r3, #10
 80082ea:	9302      	str	r3, [sp, #8]
 80082ec:	2301      	movs	r3, #1
 80082ee:	9301      	str	r3, [sp, #4]
 80082f0:	1c7b      	adds	r3, r7, #1
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	2301      	movs	r3, #1
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7fb febe 	bl	8004078 <HAL_I2C_Mem_Write>
 80082fc:	4603      	mov	r3, r0
 80082fe:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8008300:	7bfb      	ldrb	r3, [r7, #15]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <_ICM20948_BrustRead>:
			10);

	return status;
}

HAL_StatusTypeDef _ICM20948_BrustRead(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const startAddress, uint16_t const amountOfRegistersToRead, uint8_t * readData) {
 800830a:	b580      	push	{r7, lr}
 800830c:	b088      	sub	sp, #32
 800830e:	af04      	add	r7, sp, #16
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	4608      	mov	r0, r1
 8008314:	4611      	mov	r1, r2
 8008316:	461a      	mov	r2, r3
 8008318:	4603      	mov	r3, r0
 800831a:	70fb      	strb	r3, [r7, #3]
 800831c:	460b      	mov	r3, r1
 800831e:	70bb      	strb	r3, [r7, #2]
 8008320:	4613      	mov	r3, r2
 8008322:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8008324:	2300      	movs	r3, #0
 8008326:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8008328:	78fb      	ldrb	r3, [r7, #3]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d101      	bne.n	8008332 <_ICM20948_BrustRead+0x28>
 800832e:	2368      	movs	r3, #104	@ 0x68
 8008330:	e000      	b.n	8008334 <_ICM20948_BrustRead+0x2a>
 8008332:	2369      	movs	r3, #105	@ 0x69
 8008334:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(
 8008336:	7bbb      	ldrb	r3, [r7, #14]
 8008338:	b29b      	uxth	r3, r3
 800833a:	005b      	lsls	r3, r3, #1
 800833c:	b299      	uxth	r1, r3
 800833e:	78bb      	ldrb	r3, [r7, #2]
 8008340:	b29a      	uxth	r2, r3
 8008342:	230a      	movs	r3, #10
 8008344:	9302      	str	r3, [sp, #8]
 8008346:	883b      	ldrh	r3, [r7, #0]
 8008348:	9301      	str	r3, [sp, #4]
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	2301      	movs	r3, #1
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7fb ff8b 	bl	800426c <HAL_I2C_Mem_Read>
 8008356:	4603      	mov	r3, r0
 8008358:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			amountOfRegistersToRead * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800835a:	7bfb      	ldrb	r3, [r7, #15]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <_ICM20948_BurstWrite>:

HAL_StatusTypeDef _ICM20948_BurstWrite(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const startAddress, uint16_t const amountOfRegistersToWrite, uint8_t * writeData) {
 8008364:	b580      	push	{r7, lr}
 8008366:	b088      	sub	sp, #32
 8008368:	af04      	add	r7, sp, #16
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	4608      	mov	r0, r1
 800836e:	4611      	mov	r1, r2
 8008370:	461a      	mov	r2, r3
 8008372:	4603      	mov	r3, r0
 8008374:	70fb      	strb	r3, [r7, #3]
 8008376:	460b      	mov	r3, r1
 8008378:	70bb      	strb	r3, [r7, #2]
 800837a:	4613      	mov	r3, r2
 800837c:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800837e:	2300      	movs	r3, #0
 8008380:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8008382:	78fb      	ldrb	r3, [r7, #3]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d101      	bne.n	800838c <_ICM20948_BurstWrite+0x28>
 8008388:	2368      	movs	r3, #104	@ 0x68
 800838a:	e000      	b.n	800838e <_ICM20948_BurstWrite+0x2a>
 800838c:	2369      	movs	r3, #105	@ 0x69
 800838e:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8008390:	7bbb      	ldrb	r3, [r7, #14]
 8008392:	b29b      	uxth	r3, r3
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	b299      	uxth	r1, r3
 8008398:	78bb      	ldrb	r3, [r7, #2]
 800839a:	b29a      	uxth	r2, r3
 800839c:	230a      	movs	r3, #10
 800839e:	9302      	str	r3, [sp, #8]
 80083a0:	883b      	ldrh	r3, [r7, #0]
 80083a2:	9301      	str	r3, [sp, #4]
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	9300      	str	r3, [sp, #0]
 80083a8:	2301      	movs	r3, #1
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7fb fe64 	bl	8004078 <HAL_I2C_Mem_Write>
 80083b0:	4603      	mov	r3, r0
 80083b2:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			writeData,
			amountOfRegistersToWrite * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <_AK09916_WriteByte>:

HAL_StatusTypeDef _AK09916_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const registerAddress, uint8_t writeData) {
 80083be:	b580      	push	{r7, lr}
 80083c0:	b088      	sub	sp, #32
 80083c2:	af04      	add	r7, sp, #16
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	460b      	mov	r3, r1
 80083c8:	70fb      	strb	r3, [r7, #3]
 80083ca:	4613      	mov	r3, r2
 80083cc:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 80083ce:	2300      	movs	r3, #0
 80083d0:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 80083d2:	78fb      	ldrb	r3, [r7, #3]
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	230a      	movs	r3, #10
 80083d8:	9302      	str	r3, [sp, #8]
 80083da:	2301      	movs	r3, #1
 80083dc:	9301      	str	r3, [sp, #4]
 80083de:	1cbb      	adds	r3, r7, #2
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	2301      	movs	r3, #1
 80083e4:	2118      	movs	r1, #24
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7fb fe46 	bl	8004078 <HAL_I2C_Mem_Write>
 80083ec:	4603      	mov	r3, r0
 80083ee:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <ICM20948_init>:
	}
	
	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity) {
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b084      	sub	sp, #16
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	4608      	mov	r0, r1
 8008404:	4611      	mov	r1, r2
 8008406:	461a      	mov	r2, r3
 8008408:	4603      	mov	r3, r0
 800840a:	70fb      	strb	r3, [r7, #3]
 800840c:	460b      	mov	r3, r1
 800840e:	70bb      	strb	r3, [r7, #2]
 8008410:	4613      	mov	r3, r2
 8008412:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8008418:	78fb      	ldrb	r3, [r7, #3]
 800841a:	2200      	movs	r2, #0
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7ff ff1a 	bl	8008258 <_ICM20948_SelectUserBank>
 8008424:	4603      	mov	r3, r0
 8008426:	73fb      	strb	r3, [r7, #15]

	do{
	status = _ICM20948_WriteByte(
 8008428:	78f9      	ldrb	r1, [r7, #3]
 800842a:	2380      	movs	r3, #128	@ 0x80
 800842c:	2206      	movs	r2, #6
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f7ff ff3e 	bl	80082b0 <_ICM20948_WriteByte>
 8008434:	4603      	mov	r3, r0
 8008436:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);
	}
	while(status!=HAL_OK);
 8008438:	7bfb      	ldrb	r3, [r7, #15]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1f4      	bne.n	8008428 <ICM20948_init+0x2e>


	HAL_Delay(200);
 800843e:	20c8      	movs	r0, #200	@ 0xc8
 8008440:	f7fa fd26 	bl	8002e90 <HAL_Delay>

	status = _ICM20948_WriteByte(
 8008444:	78f9      	ldrb	r1, [r7, #3]
 8008446:	2301      	movs	r3, #1
 8008448:	2206      	movs	r2, #6
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7ff ff30 	bl	80082b0 <_ICM20948_WriteByte>
 8008450:	4603      	mov	r3, r0
 8008452:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_AUTO_SELECT_CLOCK);

	//enable both gyroscope and accelerometer
	status = _ICM20948_WriteByte(
 8008454:	78f9      	ldrb	r1, [r7, #3]
 8008456:	2300      	movs	r3, #0
 8008458:	2207      	movs	r2, #7
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f7ff ff28 	bl	80082b0 <_ICM20948_WriteByte>
 8008460:	4603      	mov	r3, r0
 8008462:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); // For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 8008464:	78fb      	ldrb	r3, [r7, #3]
 8008466:	2202      	movs	r2, #2
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7ff fef4 	bl	8008258 <_ICM20948_SelectUserBank>
 8008470:	4603      	mov	r3, r0
 8008472:	73fb      	strb	r3, [r7, #15]
	//gyroscope sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			0 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << GYRO_FS_SEL_BIT|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 8008474:	78bb      	ldrb	r3, [r7, #2]
 8008476:	005b      	lsls	r3, r3, #1
 8008478:	b25b      	sxtb	r3, r3
 800847a:	f043 0301 	orr.w	r3, r3, #1
 800847e:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 8008480:	b2db      	uxtb	r3, r3
 8008482:	78f9      	ldrb	r1, [r7, #3]
 8008484:	2201      	movs	r2, #1
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f7ff ff12 	bl	80082b0 <_ICM20948_WriteByte>
 800848c:	4603      	mov	r3, r0
 800848e:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 8008490:	78f9      	ldrb	r1, [r7, #3]
 8008492:	2304      	movs	r3, #4
 8008494:	2200      	movs	r2, #0
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f7ff ff0a 	bl	80082b0 <_ICM20948_WriteByte>
 800849c:	4603      	mov	r3, r0
 800849e:	73fb      	strb	r3, [r7, #15]
	//accelerometer sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
			1 << ACCEL_DLPFCFG_BIT|selectAccelSensitivity << ACCEL_FS_SEL_BIT|0x01 << ACCEL_FCHOICE_BIT);
 80084a0:	787b      	ldrb	r3, [r7, #1]
 80084a2:	005b      	lsls	r3, r3, #1
 80084a4:	b25b      	sxtb	r3, r3
 80084a6:	f043 0309 	orr.w	r3, r3, #9
 80084aa:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	78f9      	ldrb	r1, [r7, #3]
 80084b0:	2214      	movs	r2, #20
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7ff fefc 	bl	80082b0 <_ICM20948_WriteByte>
 80084b8:	4603      	mov	r3, r0
 80084ba:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 80084bc:	78f9      	ldrb	r1, [r7, #3]
 80084be:	2304      	movs	r3, #4
 80084c0:	2211      	movs	r2, #17
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7ff fef4 	bl	80082b0 <_ICM20948_WriteByte>
 80084c8:	4603      	mov	r3, r0
 80084ca:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
			4);


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 80084cc:	78fb      	ldrb	r3, [r7, #3]
 80084ce:	2200      	movs	r2, #0
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7ff fec0 	bl	8008258 <_ICM20948_SelectUserBank>
 80084d8:	4603      	mov	r3, r0
 80084da:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 80084dc:	78f9      	ldrb	r1, [r7, #3]
 80084de:	2302      	movs	r3, #2
 80084e0:	220f      	movs	r2, #15
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f7ff fee4 	bl	80082b0 <_ICM20948_WriteByte>
 80084e8:	4603      	mov	r3, r0
 80084ea:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

	status = _AK09916_WriteByte(
 80084ec:	2208      	movs	r2, #8
 80084ee:	2131      	movs	r1, #49	@ 0x31
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f7ff ff64 	bl	80083be <_AK09916_WriteByte>
 80084f6:	4603      	mov	r3, r0
 80084f8:	73fb      	strb	r3, [r7, #15]
			hi2c,
			AK09916__CNTL2__REGISTER,
			0x08);
}
 80084fa:	bf00      	nop
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	0000      	movs	r0, r0
 8008504:	0000      	movs	r0, r0
	...

08008508 <ICM20948_readGyroscope_all>:
			break;
	}

}

void ICM20948_readGyroscope_all(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, float reading[3]) {
 8008508:	b590      	push	{r4, r7, lr}
 800850a:	b08f      	sub	sp, #60	@ 0x3c
 800850c:	af02      	add	r7, sp, #8
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	607b      	str	r3, [r7, #4]
 8008512:	460b      	mov	r3, r1
 8008514:	72fb      	strb	r3, [r7, #11]
 8008516:	4613      	mov	r3, r2
 8008518:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[6];

	//_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__GYRO_XOUT_H__REGISTER, 6, readData);
 800851a:	7af9      	ldrb	r1, [r7, #11]
 800851c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008520:	9300      	str	r3, [sp, #0]
 8008522:	2306      	movs	r3, #6
 8008524:	2233      	movs	r2, #51	@ 0x33
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f7ff feef 	bl	800830a <_ICM20948_BrustRead>

	int16_t rD_int[3];
		rD_int[X] = readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE];
 800852c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008530:	021b      	lsls	r3, r3, #8
 8008532:	b21a      	sxth	r2, r3
 8008534:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008538:	b21b      	sxth	r3, r3
 800853a:	4313      	orrs	r3, r2
 800853c:	b21b      	sxth	r3, r3
 800853e:	843b      	strh	r3, [r7, #32]
		rD_int[Y] = readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE];
 8008540:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008544:	021b      	lsls	r3, r3, #8
 8008546:	b21a      	sxth	r2, r3
 8008548:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800854c:	b21b      	sxth	r3, r3
 800854e:	4313      	orrs	r3, r2
 8008550:	b21b      	sxth	r3, r3
 8008552:	847b      	strh	r3, [r7, #34]	@ 0x22
		rD_int[Z] = readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE];
 8008554:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008558:	021b      	lsls	r3, r3, #8
 800855a:	b21a      	sxth	r2, r3
 800855c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8008560:	b21b      	sxth	r3, r3
 8008562:	4313      	orrs	r3, r2
 8008564:	b21b      	sxth	r3, r3
 8008566:	84bb      	strh	r3, [r7, #36]	@ 0x24

		float rD[3];
		rD[X] = (float) rD_int[X];
 8008568:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800856c:	ee07 3a90 	vmov	s15, r3
 8008570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008574:	edc7 7a05 	vstr	s15, [r7, #20]
		rD[Y] = (float) rD_int[Y];
 8008578:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800857c:	ee07 3a90 	vmov	s15, r3
 8008580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008584:	edc7 7a06 	vstr	s15, [r7, #24]
		rD[Z] = (float) rD_int[Z];
 8008588:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800858c:	ee07 3a90 	vmov	s15, r3
 8008590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008594:	edc7 7a07 	vstr	s15, [r7, #28]

	//*gyroZ = (float) -reading;
	switch (selectGyroSensitivity) {
 8008598:	7abb      	ldrb	r3, [r7, #10]
 800859a:	2b03      	cmp	r3, #3
 800859c:	f200 80bc 	bhi.w	8008718 <ICM20948_readGyroscope_all+0x210>
 80085a0:	a201      	add	r2, pc, #4	@ (adr r2, 80085a8 <ICM20948_readGyroscope_all+0xa0>)
 80085a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a6:	bf00      	nop
 80085a8:	080085b9 	.word	0x080085b9
 80085ac:	080085f5 	.word	0x080085f5
 80085b0:	08008631 	.word	0x08008631
 80085b4:	080086a5 	.word	0x080086a5
		case GYRO_FULL_SCALE_250DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 80085b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80085bc:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 8008730 <ICM20948_readGyroscope_all+0x228>
 80085c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	edc3 7a00 	vstr	s15, [r3]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 80085ca:	ed97 7a06 	vldr	s14, [r7, #24]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	3304      	adds	r3, #4
 80085d2:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8008730 <ICM20948_readGyroscope_all+0x228>
 80085d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80085da:	edc3 7a00 	vstr	s15, [r3]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 80085de:	ed97 7a07 	vldr	s14, [r7, #28]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	3308      	adds	r3, #8
 80085e6:	eddf 6a52 	vldr	s13, [pc, #328]	@ 8008730 <ICM20948_readGyroscope_all+0x228>
 80085ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80085ee:	edc3 7a00 	vstr	s15, [r3]
			break;
 80085f2:	e091      	b.n	8008718 <ICM20948_readGyroscope_all+0x210>
		case GYRO_FULL_SCALE_500DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 80085f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80085f8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8008734 <ICM20948_readGyroscope_all+0x22c>
 80085fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	edc3 7a00 	vstr	s15, [r3]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 8008606:	ed97 7a06 	vldr	s14, [r7, #24]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	3304      	adds	r3, #4
 800860e:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8008734 <ICM20948_readGyroscope_all+0x22c>
 8008612:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008616:	edc3 7a00 	vstr	s15, [r3]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 800861a:	ed97 7a07 	vldr	s14, [r7, #28]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	3308      	adds	r3, #8
 8008622:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8008734 <ICM20948_readGyroscope_all+0x22c>
 8008626:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800862a:	edc3 7a00 	vstr	s15, [r3]
			break;
 800862e:	e073      	b.n	8008718 <ICM20948_readGyroscope_all+0x210>
		case GYRO_FULL_SCALE_1000DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	4618      	mov	r0, r3
 8008634:	f7f7 ff88 	bl	8000548 <__aeabi_f2d>
 8008638:	a339      	add	r3, pc, #228	@ (adr r3, 8008720 <ICM20948_readGyroscope_all+0x218>)
 800863a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863e:	f7f8 f905 	bl	800084c <__aeabi_ddiv>
 8008642:	4602      	mov	r2, r0
 8008644:	460b      	mov	r3, r1
 8008646:	4610      	mov	r0, r2
 8008648:	4619      	mov	r1, r3
 800864a:	f7f8 facd 	bl	8000be8 <__aeabi_d2f>
 800864e:	4602      	mov	r2, r0
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	601a      	str	r2, [r3, #0]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	4618      	mov	r0, r3
 8008658:	f7f7 ff76 	bl	8000548 <__aeabi_f2d>
 800865c:	a330      	add	r3, pc, #192	@ (adr r3, 8008720 <ICM20948_readGyroscope_all+0x218>)
 800865e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008662:	f7f8 f8f3 	bl	800084c <__aeabi_ddiv>
 8008666:	4602      	mov	r2, r0
 8008668:	460b      	mov	r3, r1
 800866a:	4610      	mov	r0, r2
 800866c:	4619      	mov	r1, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	1d1c      	adds	r4, r3, #4
 8008672:	f7f8 fab9 	bl	8000be8 <__aeabi_d2f>
 8008676:	4603      	mov	r3, r0
 8008678:	6023      	str	r3, [r4, #0]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	4618      	mov	r0, r3
 800867e:	f7f7 ff63 	bl	8000548 <__aeabi_f2d>
 8008682:	a327      	add	r3, pc, #156	@ (adr r3, 8008720 <ICM20948_readGyroscope_all+0x218>)
 8008684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008688:	f7f8 f8e0 	bl	800084c <__aeabi_ddiv>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	4610      	mov	r0, r2
 8008692:	4619      	mov	r1, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f103 0408 	add.w	r4, r3, #8
 800869a:	f7f8 faa5 	bl	8000be8 <__aeabi_d2f>
 800869e:	4603      	mov	r3, r0
 80086a0:	6023      	str	r3, [r4, #0]
			break;
 80086a2:	e039      	b.n	8008718 <ICM20948_readGyroscope_all+0x210>
		case GYRO_FULL_SCALE_2000DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7f7 ff4e 	bl	8000548 <__aeabi_f2d>
 80086ac:	a31e      	add	r3, pc, #120	@ (adr r3, 8008728 <ICM20948_readGyroscope_all+0x220>)
 80086ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b2:	f7f8 f8cb 	bl	800084c <__aeabi_ddiv>
 80086b6:	4602      	mov	r2, r0
 80086b8:	460b      	mov	r3, r1
 80086ba:	4610      	mov	r0, r2
 80086bc:	4619      	mov	r1, r3
 80086be:	f7f8 fa93 	bl	8000be8 <__aeabi_d2f>
 80086c2:	4602      	mov	r2, r0
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	601a      	str	r2, [r3, #0]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	4618      	mov	r0, r3
 80086cc:	f7f7 ff3c 	bl	8000548 <__aeabi_f2d>
 80086d0:	a315      	add	r3, pc, #84	@ (adr r3, 8008728 <ICM20948_readGyroscope_all+0x220>)
 80086d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d6:	f7f8 f8b9 	bl	800084c <__aeabi_ddiv>
 80086da:	4602      	mov	r2, r0
 80086dc:	460b      	mov	r3, r1
 80086de:	4610      	mov	r0, r2
 80086e0:	4619      	mov	r1, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	1d1c      	adds	r4, r3, #4
 80086e6:	f7f8 fa7f 	bl	8000be8 <__aeabi_d2f>
 80086ea:	4603      	mov	r3, r0
 80086ec:	6023      	str	r3, [r4, #0]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7f7 ff29 	bl	8000548 <__aeabi_f2d>
 80086f6:	a30c      	add	r3, pc, #48	@ (adr r3, 8008728 <ICM20948_readGyroscope_all+0x220>)
 80086f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fc:	f7f8 f8a6 	bl	800084c <__aeabi_ddiv>
 8008700:	4602      	mov	r2, r0
 8008702:	460b      	mov	r3, r1
 8008704:	4610      	mov	r0, r2
 8008706:	4619      	mov	r1, r3
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f103 0408 	add.w	r4, r3, #8
 800870e:	f7f8 fa6b 	bl	8000be8 <__aeabi_d2f>
 8008712:	4603      	mov	r3, r0
 8008714:	6023      	str	r3, [r4, #0]
			break;
 8008716:	bf00      	nop
	}

}
 8008718:	bf00      	nop
 800871a:	3734      	adds	r7, #52	@ 0x34
 800871c:	46bd      	mov	sp, r7
 800871e:	bd90      	pop	{r4, r7, pc}
 8008720:	66666666 	.word	0x66666666
 8008724:	40406666 	.word	0x40406666
 8008728:	66666666 	.word	0x66666666
 800872c:	40306666 	.word	0x40306666
 8008730:	43030000 	.word	0x43030000
 8008734:	42830000 	.word	0x42830000

08008738 <ICM20948_CalibrateGyro>:
			mag[i] = reading * MAG_SENSITIVITY_SCALE_FACTOR;
		}
	}

void ICM20948_CalibrateGyro(I2C_HandleTypeDef * hi2c,const uint8_t sensitivity,int samples)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b090      	sub	sp, #64	@ 0x40
 800873c:	af02      	add	r7, sp, #8
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	460b      	mov	r3, r1
 8008742:	607a      	str	r2, [r7, #4]
 8008744:	72fb      	strb	r3, [r7, #11]
	//float temp[3]={};
	int32_t gyro_bias[3] = {0};
 8008746:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800874a:	2200      	movs	r2, #0
 800874c:	601a      	str	r2, [r3, #0]
 800874e:	605a      	str	r2, [r3, #4]
 8008750:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 8008752:	2300      	movs	r3, #0
 8008754:	623b      	str	r3, [r7, #32]
 8008756:	2300      	movs	r3, #0
 8008758:	84bb      	strh	r3, [r7, #36]	@ 0x24

		for(int i = 0; i < samples; i++)
 800875a:	2300      	movs	r3, #0
 800875c:	637b      	str	r3, [r7, #52]	@ 0x34
 800875e:	e032      	b.n	80087c6 <ICM20948_CalibrateGyro+0x8e>
		{
			uint8_t readData[6];
			//_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
			_ICM20948_BrustRead(hi2c, 0, ICM20948__USER_BANK_0__GYRO_XOUT_H__REGISTER, 6, readData);
 8008760:	f107 0318 	add.w	r3, r7, #24
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	2306      	movs	r3, #6
 8008768:	2233      	movs	r2, #51	@ 0x33
 800876a:	2100      	movs	r1, #0
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f7ff fdcc 	bl	800830a <_ICM20948_BrustRead>

			int16_t temp[3];
			temp[X] = readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE];
 8008772:	7e3b      	ldrb	r3, [r7, #24]
 8008774:	021b      	lsls	r3, r3, #8
 8008776:	b21a      	sxth	r2, r3
 8008778:	7e7b      	ldrb	r3, [r7, #25]
 800877a:	b21b      	sxth	r3, r3
 800877c:	4313      	orrs	r3, r2
 800877e:	b21b      	sxth	r3, r3
 8008780:	823b      	strh	r3, [r7, #16]
			temp[Y] = readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE];
 8008782:	7ebb      	ldrb	r3, [r7, #26]
 8008784:	021b      	lsls	r3, r3, #8
 8008786:	b21a      	sxth	r2, r3
 8008788:	7efb      	ldrb	r3, [r7, #27]
 800878a:	b21b      	sxth	r3, r3
 800878c:	4313      	orrs	r3, r2
 800878e:	b21b      	sxth	r3, r3
 8008790:	827b      	strh	r3, [r7, #18]
			temp[Z] = readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE];
 8008792:	7f3b      	ldrb	r3, [r7, #28]
 8008794:	021b      	lsls	r3, r3, #8
 8008796:	b21a      	sxth	r2, r3
 8008798:	7f7b      	ldrb	r3, [r7, #29]
 800879a:	b21b      	sxth	r3, r3
 800879c:	4313      	orrs	r3, r2
 800879e:	b21b      	sxth	r3, r3
 80087a0:	82bb      	strh	r3, [r7, #20]

			gyro_bias[0] += temp[0];
 80087a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80087a8:	4413      	add	r3, r2
 80087aa:	62bb      	str	r3, [r7, #40]	@ 0x28
			gyro_bias[1] += temp[1];
 80087ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087ae:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80087b2:	4413      	add	r3, r2
 80087b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			gyro_bias[2] += temp[2];
 80087b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80087bc:	4413      	add	r3, r2
 80087be:	633b      	str	r3, [r7, #48]	@ 0x30
		for(int i = 0; i < samples; i++)
 80087c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087c2:	3301      	adds	r3, #1
 80087c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80087c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	dbc8      	blt.n	8008760 <ICM20948_CalibrateGyro+0x28>
		}

		gyro_bias[0] /= samples;
 80087ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80087d6:	62bb      	str	r3, [r7, #40]	@ 0x28
		gyro_bias[1] /= samples;
 80087d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	fb92 f3f3 	sdiv	r3, r2, r3
 80087e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		gyro_bias[2] /= samples;
 80087e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80087ea:	633b      	str	r3, [r7, #48]	@ 0x30

		// Construct the gyro biases for push to the hardware gyro bias registers,
		// which are reset to zero upon device startup.
		// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
		// Biases are additive, so change sign on calculated average gyro biases
		gyro_offset[0] = (-gyro_bias[0] * 2  >> 8) & 0xFF;
 80087ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80087ee:	4613      	mov	r3, r2
 80087f0:	07db      	lsls	r3, r3, #31
 80087f2:	1a9b      	subs	r3, r3, r2
 80087f4:	005b      	lsls	r3, r3, #1
 80087f6:	121b      	asrs	r3, r3, #8
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	f887 3020 	strb.w	r3, [r7, #32]
		gyro_offset[1] = (-gyro_bias[0] * 2)       & 0xFF;
 80087fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008800:	b2db      	uxtb	r3, r3
 8008802:	461a      	mov	r2, r3
 8008804:	01d2      	lsls	r2, r2, #7
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	005b      	lsls	r3, r3, #1
 800880a:	b2db      	uxtb	r3, r3
 800880c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		gyro_offset[2] = (-gyro_bias[1] * 2  >> 8) & 0xFF;
 8008810:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008812:	4613      	mov	r3, r2
 8008814:	07db      	lsls	r3, r3, #31
 8008816:	1a9b      	subs	r3, r3, r2
 8008818:	005b      	lsls	r3, r3, #1
 800881a:	121b      	asrs	r3, r3, #8
 800881c:	b2db      	uxtb	r3, r3
 800881e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		gyro_offset[3] = (-gyro_bias[1] * 2)       & 0xFF;
 8008822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008824:	b2db      	uxtb	r3, r3
 8008826:	461a      	mov	r2, r3
 8008828:	01d2      	lsls	r2, r2, #7
 800882a:	1ad3      	subs	r3, r2, r3
 800882c:	005b      	lsls	r3, r3, #1
 800882e:	b2db      	uxtb	r3, r3
 8008830:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		gyro_offset[4] = (-gyro_bias[2] * 2  >> 8) & 0xFF;
 8008834:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008836:	4613      	mov	r3, r2
 8008838:	07db      	lsls	r3, r3, #31
 800883a:	1a9b      	subs	r3, r3, r2
 800883c:	005b      	lsls	r3, r3, #1
 800883e:	121b      	asrs	r3, r3, #8
 8008840:	b2db      	uxtb	r3, r3
 8008842:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		gyro_offset[5] = (-gyro_bias[2] * 2)       & 0xFF;
 8008846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008848:	b2db      	uxtb	r3, r3
 800884a:	461a      	mov	r2, r3
 800884c:	01d2      	lsls	r2, r2, #7
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	005b      	lsls	r3, r3, #1
 8008852:	b2db      	uxtb	r3, r3
 8008854:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		_ICM20948_SelectUserBank(hi2c,0, USER_BANK_2);
 8008858:	2202      	movs	r2, #2
 800885a:	2100      	movs	r1, #0
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f7ff fcfb 	bl	8008258 <_ICM20948_SelectUserBank>
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+2,gyro_offset[2]);
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+3,gyro_offset[3]);
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+4,gyro_offset[4]);
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+5,gyro_offset[5]);

		_ICM20948_BurstWrite(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER,6,gyro_offset);
 8008862:	f107 0320 	add.w	r3, r7, #32
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	2306      	movs	r3, #6
 800886a:	2203      	movs	r2, #3
 800886c:	2100      	movs	r1, #0
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f7ff fd78 	bl	8008364 <_ICM20948_BurstWrite>
		_ICM20948_SelectUserBank(hi2c,0, USER_BANK_0);
 8008874:	2200      	movs	r2, #0
 8008876:	2100      	movs	r1, #0
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f7ff fced 	bl	8008258 <_ICM20948_SelectUserBank>
	}
 800887e:	bf00      	nop
 8008880:	3738      	adds	r7, #56	@ 0x38
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
	...

08008888 <__NVIC_SetPriority>:
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	4603      	mov	r3, r0
 8008890:	6039      	str	r1, [r7, #0]
 8008892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008898:	2b00      	cmp	r3, #0
 800889a:	db0a      	blt.n	80088b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	b2da      	uxtb	r2, r3
 80088a0:	490c      	ldr	r1, [pc, #48]	@ (80088d4 <__NVIC_SetPriority+0x4c>)
 80088a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088a6:	0112      	lsls	r2, r2, #4
 80088a8:	b2d2      	uxtb	r2, r2
 80088aa:	440b      	add	r3, r1
 80088ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80088b0:	e00a      	b.n	80088c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	b2da      	uxtb	r2, r3
 80088b6:	4908      	ldr	r1, [pc, #32]	@ (80088d8 <__NVIC_SetPriority+0x50>)
 80088b8:	79fb      	ldrb	r3, [r7, #7]
 80088ba:	f003 030f 	and.w	r3, r3, #15
 80088be:	3b04      	subs	r3, #4
 80088c0:	0112      	lsls	r2, r2, #4
 80088c2:	b2d2      	uxtb	r2, r2
 80088c4:	440b      	add	r3, r1
 80088c6:	761a      	strb	r2, [r3, #24]
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr
 80088d4:	e000e100 	.word	0xe000e100
 80088d8:	e000ed00 	.word	0xe000ed00

080088dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80088dc:	b580      	push	{r7, lr}
 80088de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80088e0:	2100      	movs	r1, #0
 80088e2:	f06f 0004 	mvn.w	r0, #4
 80088e6:	f7ff ffcf 	bl	8008888 <__NVIC_SetPriority>
#endif
}
 80088ea:	bf00      	nop
 80088ec:	bd80      	pop	{r7, pc}
	...

080088f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088f6:	f3ef 8305 	mrs	r3, IPSR
 80088fa:	603b      	str	r3, [r7, #0]
  return(result);
 80088fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d003      	beq.n	800890a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008902:	f06f 0305 	mvn.w	r3, #5
 8008906:	607b      	str	r3, [r7, #4]
 8008908:	e00c      	b.n	8008924 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800890a:	4b0a      	ldr	r3, [pc, #40]	@ (8008934 <osKernelInitialize+0x44>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d105      	bne.n	800891e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008912:	4b08      	ldr	r3, [pc, #32]	@ (8008934 <osKernelInitialize+0x44>)
 8008914:	2201      	movs	r2, #1
 8008916:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008918:	2300      	movs	r3, #0
 800891a:	607b      	str	r3, [r7, #4]
 800891c:	e002      	b.n	8008924 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800891e:	f04f 33ff 	mov.w	r3, #4294967295
 8008922:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008924:	687b      	ldr	r3, [r7, #4]
}
 8008926:	4618      	mov	r0, r3
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr
 8008932:	bf00      	nop
 8008934:	20000584 	.word	0x20000584

08008938 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800893e:	f3ef 8305 	mrs	r3, IPSR
 8008942:	603b      	str	r3, [r7, #0]
  return(result);
 8008944:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008946:	2b00      	cmp	r3, #0
 8008948:	d003      	beq.n	8008952 <osKernelStart+0x1a>
    stat = osErrorISR;
 800894a:	f06f 0305 	mvn.w	r3, #5
 800894e:	607b      	str	r3, [r7, #4]
 8008950:	e010      	b.n	8008974 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008952:	4b0b      	ldr	r3, [pc, #44]	@ (8008980 <osKernelStart+0x48>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d109      	bne.n	800896e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800895a:	f7ff ffbf 	bl	80088dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800895e:	4b08      	ldr	r3, [pc, #32]	@ (8008980 <osKernelStart+0x48>)
 8008960:	2202      	movs	r2, #2
 8008962:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008964:	f001 f87a 	bl	8009a5c <vTaskStartScheduler>
      stat = osOK;
 8008968:	2300      	movs	r3, #0
 800896a:	607b      	str	r3, [r7, #4]
 800896c:	e002      	b.n	8008974 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800896e:	f04f 33ff 	mov.w	r3, #4294967295
 8008972:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008974:	687b      	ldr	r3, [r7, #4]
}
 8008976:	4618      	mov	r0, r3
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	20000584 	.word	0x20000584

08008984 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008984:	b580      	push	{r7, lr}
 8008986:	b08e      	sub	sp, #56	@ 0x38
 8008988:	af04      	add	r7, sp, #16
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008990:	2300      	movs	r3, #0
 8008992:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008994:	f3ef 8305 	mrs	r3, IPSR
 8008998:	617b      	str	r3, [r7, #20]
  return(result);
 800899a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800899c:	2b00      	cmp	r3, #0
 800899e:	d17e      	bne.n	8008a9e <osThreadNew+0x11a>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d07b      	beq.n	8008a9e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80089a6:	2380      	movs	r3, #128	@ 0x80
 80089a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80089aa:	2318      	movs	r3, #24
 80089ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80089ae:	2300      	movs	r3, #0
 80089b0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80089b2:	f04f 33ff 	mov.w	r3, #4294967295
 80089b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d045      	beq.n	8008a4a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d002      	beq.n	80089cc <osThreadNew+0x48>
        name = attr->name;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	699b      	ldr	r3, [r3, #24]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d002      	beq.n	80089da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d008      	beq.n	80089f2 <osThreadNew+0x6e>
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	2b38      	cmp	r3, #56	@ 0x38
 80089e4:	d805      	bhi.n	80089f2 <osThreadNew+0x6e>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <osThreadNew+0x72>
        return (NULL);
 80089f2:	2300      	movs	r3, #0
 80089f4:	e054      	b.n	8008aa0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d003      	beq.n	8008a06 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	089b      	lsrs	r3, r3, #2
 8008a04:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00e      	beq.n	8008a2c <osThreadNew+0xa8>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	2b5b      	cmp	r3, #91	@ 0x5b
 8008a14:	d90a      	bls.n	8008a2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d006      	beq.n	8008a2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d002      	beq.n	8008a2c <osThreadNew+0xa8>
        mem = 1;
 8008a26:	2301      	movs	r3, #1
 8008a28:	61bb      	str	r3, [r7, #24]
 8008a2a:	e010      	b.n	8008a4e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10c      	bne.n	8008a4e <osThreadNew+0xca>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d108      	bne.n	8008a4e <osThreadNew+0xca>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d104      	bne.n	8008a4e <osThreadNew+0xca>
          mem = 0;
 8008a44:	2300      	movs	r3, #0
 8008a46:	61bb      	str	r3, [r7, #24]
 8008a48:	e001      	b.n	8008a4e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d110      	bne.n	8008a76 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a5c:	9202      	str	r2, [sp, #8]
 8008a5e:	9301      	str	r3, [sp, #4]
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	6a3a      	ldr	r2, [r7, #32]
 8008a68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a6a:	68f8      	ldr	r0, [r7, #12]
 8008a6c:	f000 fe1a 	bl	80096a4 <xTaskCreateStatic>
 8008a70:	4603      	mov	r3, r0
 8008a72:	613b      	str	r3, [r7, #16]
 8008a74:	e013      	b.n	8008a9e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d110      	bne.n	8008a9e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008a7c:	6a3b      	ldr	r3, [r7, #32]
 8008a7e:	b29a      	uxth	r2, r3
 8008a80:	f107 0310 	add.w	r3, r7, #16
 8008a84:	9301      	str	r3, [sp, #4]
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	9300      	str	r3, [sp, #0]
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f000 fe68 	bl	8009764 <xTaskCreate>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d001      	beq.n	8008a9e <osThreadNew+0x11a>
            hTask = NULL;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008a9e:	693b      	ldr	r3, [r7, #16]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3728      	adds	r7, #40	@ 0x28
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ab0:	f3ef 8305 	mrs	r3, IPSR
 8008ab4:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ab6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d003      	beq.n	8008ac4 <osDelay+0x1c>
    stat = osErrorISR;
 8008abc:	f06f 0305 	mvn.w	r3, #5
 8008ac0:	60fb      	str	r3, [r7, #12]
 8008ac2:	e007      	b.n	8008ad4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d002      	beq.n	8008ad4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 ff8e 	bl	80099f0 <vTaskDelay>
    }
  }

  return (stat);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3710      	adds	r7, #16
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
	...

08008ae0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	4a07      	ldr	r2, [pc, #28]	@ (8008b0c <vApplicationGetIdleTaskMemory+0x2c>)
 8008af0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	4a06      	ldr	r2, [pc, #24]	@ (8008b10 <vApplicationGetIdleTaskMemory+0x30>)
 8008af6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2280      	movs	r2, #128	@ 0x80
 8008afc:	601a      	str	r2, [r3, #0]
}
 8008afe:	bf00      	nop
 8008b00:	3714      	adds	r7, #20
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	20000588 	.word	0x20000588
 8008b10:	200005e4 	.word	0x200005e4

08008b14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	4a07      	ldr	r2, [pc, #28]	@ (8008b40 <vApplicationGetTimerTaskMemory+0x2c>)
 8008b24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	4a06      	ldr	r2, [pc, #24]	@ (8008b44 <vApplicationGetTimerTaskMemory+0x30>)
 8008b2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b32:	601a      	str	r2, [r3, #0]
}
 8008b34:	bf00      	nop
 8008b36:	3714      	adds	r7, #20
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	200007e4 	.word	0x200007e4
 8008b44:	20000840 	.word	0x20000840

08008b48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f103 0208 	add.w	r2, r3, #8
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f103 0208 	add.w	r2, r3, #8
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f103 0208 	add.w	r2, r3, #8
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b96:	bf00      	nop
 8008b98:	370c      	adds	r7, #12
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	b085      	sub	sp, #20
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	68fa      	ldr	r2, [r7, #12]
 8008bb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	689a      	ldr	r2, [r3, #8]
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	683a      	ldr	r2, [r7, #0]
 8008bc6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	1c5a      	adds	r2, r3, #1
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	601a      	str	r2, [r3, #0]
}
 8008bde:	bf00      	nop
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bea:	b480      	push	{r7}
 8008bec:	b085      	sub	sp, #20
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c00:	d103      	bne.n	8008c0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	60fb      	str	r3, [r7, #12]
 8008c08:	e00c      	b.n	8008c24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	3308      	adds	r3, #8
 8008c0e:	60fb      	str	r3, [r7, #12]
 8008c10:	e002      	b.n	8008c18 <vListInsert+0x2e>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	60fb      	str	r3, [r7, #12]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d2f6      	bcs.n	8008c12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	685a      	ldr	r2, [r3, #4]
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	683a      	ldr	r2, [r7, #0]
 8008c32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	683a      	ldr	r2, [r7, #0]
 8008c3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	1c5a      	adds	r2, r3, #1
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	601a      	str	r2, [r3, #0]
}
 8008c50:	bf00      	nop
 8008c52:	3714      	adds	r7, #20
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	6892      	ldr	r2, [r2, #8]
 8008c72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	6852      	ldr	r2, [r2, #4]
 8008c7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d103      	bne.n	8008c90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	689a      	ldr	r2, [r3, #8]
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	1e5a      	subs	r2, r3, #1
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10b      	bne.n	8008cdc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc8:	f383 8811 	msr	BASEPRI, r3
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008cd6:	bf00      	nop
 8008cd8:	bf00      	nop
 8008cda:	e7fd      	b.n	8008cd8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008cdc:	f002 f87c 	bl	800add8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ce8:	68f9      	ldr	r1, [r7, #12]
 8008cea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008cec:	fb01 f303 	mul.w	r3, r1, r3
 8008cf0:	441a      	add	r2, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	68f9      	ldr	r1, [r7, #12]
 8008d10:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008d12:	fb01 f303 	mul.w	r3, r1, r3
 8008d16:	441a      	add	r2, r3
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	22ff      	movs	r2, #255	@ 0xff
 8008d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	22ff      	movs	r2, #255	@ 0xff
 8008d28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d114      	bne.n	8008d5c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d01a      	beq.n	8008d70 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	3310      	adds	r3, #16
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f001 f91a 	bl	8009f78 <xTaskRemoveFromEventList>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d012      	beq.n	8008d70 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008d80 <xQueueGenericReset+0xd0>)
 8008d4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d50:	601a      	str	r2, [r3, #0]
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	e009      	b.n	8008d70 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	3310      	adds	r3, #16
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7ff fef1 	bl	8008b48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	3324      	adds	r3, #36	@ 0x24
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7ff feec 	bl	8008b48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d70:	f002 f864 	bl	800ae3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d74:	2301      	movs	r3, #1
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	e000ed04 	.word	0xe000ed04

08008d84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b08e      	sub	sp, #56	@ 0x38
 8008d88:	af02      	add	r7, sp, #8
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	607a      	str	r2, [r7, #4]
 8008d90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10b      	bne.n	8008db0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d9c:	f383 8811 	msr	BASEPRI, r3
 8008da0:	f3bf 8f6f 	isb	sy
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008daa:	bf00      	nop
 8008dac:	bf00      	nop
 8008dae:	e7fd      	b.n	8008dac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10b      	bne.n	8008dce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008dc8:	bf00      	nop
 8008dca:	bf00      	nop
 8008dcc:	e7fd      	b.n	8008dca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d002      	beq.n	8008dda <xQueueGenericCreateStatic+0x56>
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d001      	beq.n	8008dde <xQueueGenericCreateStatic+0x5a>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e000      	b.n	8008de0 <xQueueGenericCreateStatic+0x5c>
 8008dde:	2300      	movs	r3, #0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10b      	bne.n	8008dfc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	623b      	str	r3, [r7, #32]
}
 8008df6:	bf00      	nop
 8008df8:	bf00      	nop
 8008dfa:	e7fd      	b.n	8008df8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d102      	bne.n	8008e08 <xQueueGenericCreateStatic+0x84>
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d101      	bne.n	8008e0c <xQueueGenericCreateStatic+0x88>
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e000      	b.n	8008e0e <xQueueGenericCreateStatic+0x8a>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d10b      	bne.n	8008e2a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e16:	f383 8811 	msr	BASEPRI, r3
 8008e1a:	f3bf 8f6f 	isb	sy
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	61fb      	str	r3, [r7, #28]
}
 8008e24:	bf00      	nop
 8008e26:	bf00      	nop
 8008e28:	e7fd      	b.n	8008e26 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008e2a:	2350      	movs	r3, #80	@ 0x50
 8008e2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	2b50      	cmp	r3, #80	@ 0x50
 8008e32:	d00b      	beq.n	8008e4c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e38:	f383 8811 	msr	BASEPRI, r3
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	61bb      	str	r3, [r7, #24]
}
 8008e46:	bf00      	nop
 8008e48:	bf00      	nop
 8008e4a:	e7fd      	b.n	8008e48 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e4c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00d      	beq.n	8008e74 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e60:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	4613      	mov	r3, r2
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	68b9      	ldr	r1, [r7, #8]
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	f000 f805 	bl	8008e7e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3730      	adds	r7, #48	@ 0x30
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b084      	sub	sp, #16
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	60f8      	str	r0, [r7, #12]
 8008e86:	60b9      	str	r1, [r7, #8]
 8008e88:	607a      	str	r2, [r7, #4]
 8008e8a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d103      	bne.n	8008e9a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	69ba      	ldr	r2, [r7, #24]
 8008e96:	601a      	str	r2, [r3, #0]
 8008e98:	e002      	b.n	8008ea0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	68ba      	ldr	r2, [r7, #8]
 8008eaa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008eac:	2101      	movs	r1, #1
 8008eae:	69b8      	ldr	r0, [r7, #24]
 8008eb0:	f7ff fefe 	bl	8008cb0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	78fa      	ldrb	r2, [r7, #3]
 8008eb8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ebc:	bf00      	nop
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b08e      	sub	sp, #56	@ 0x38
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
 8008ed0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d10b      	bne.n	8008ef8 <xQueueGenericSend+0x34>
	__asm volatile
 8008ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008ef2:	bf00      	nop
 8008ef4:	bf00      	nop
 8008ef6:	e7fd      	b.n	8008ef4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d103      	bne.n	8008f06 <xQueueGenericSend+0x42>
 8008efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d101      	bne.n	8008f0a <xQueueGenericSend+0x46>
 8008f06:	2301      	movs	r3, #1
 8008f08:	e000      	b.n	8008f0c <xQueueGenericSend+0x48>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d10b      	bne.n	8008f28 <xQueueGenericSend+0x64>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008f22:	bf00      	nop
 8008f24:	bf00      	nop
 8008f26:	e7fd      	b.n	8008f24 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d103      	bne.n	8008f36 <xQueueGenericSend+0x72>
 8008f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d101      	bne.n	8008f3a <xQueueGenericSend+0x76>
 8008f36:	2301      	movs	r3, #1
 8008f38:	e000      	b.n	8008f3c <xQueueGenericSend+0x78>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d10b      	bne.n	8008f58 <xQueueGenericSend+0x94>
	__asm volatile
 8008f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f44:	f383 8811 	msr	BASEPRI, r3
 8008f48:	f3bf 8f6f 	isb	sy
 8008f4c:	f3bf 8f4f 	dsb	sy
 8008f50:	623b      	str	r3, [r7, #32]
}
 8008f52:	bf00      	nop
 8008f54:	bf00      	nop
 8008f56:	e7fd      	b.n	8008f54 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f58:	f001 f9ce 	bl	800a2f8 <xTaskGetSchedulerState>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d102      	bne.n	8008f68 <xQueueGenericSend+0xa4>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d101      	bne.n	8008f6c <xQueueGenericSend+0xa8>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e000      	b.n	8008f6e <xQueueGenericSend+0xaa>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d10b      	bne.n	8008f8a <xQueueGenericSend+0xc6>
	__asm volatile
 8008f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f76:	f383 8811 	msr	BASEPRI, r3
 8008f7a:	f3bf 8f6f 	isb	sy
 8008f7e:	f3bf 8f4f 	dsb	sy
 8008f82:	61fb      	str	r3, [r7, #28]
}
 8008f84:	bf00      	nop
 8008f86:	bf00      	nop
 8008f88:	e7fd      	b.n	8008f86 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f8a:	f001 ff25 	bl	800add8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d302      	bcc.n	8008fa0 <xQueueGenericSend+0xdc>
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d129      	bne.n	8008ff4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fa0:	683a      	ldr	r2, [r7, #0]
 8008fa2:	68b9      	ldr	r1, [r7, #8]
 8008fa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008fa6:	f000 fa0f 	bl	80093c8 <prvCopyDataToQueue>
 8008faa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d010      	beq.n	8008fd6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb6:	3324      	adds	r3, #36	@ 0x24
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f000 ffdd 	bl	8009f78 <xTaskRemoveFromEventList>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d013      	beq.n	8008fec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008fc4:	4b3f      	ldr	r3, [pc, #252]	@ (80090c4 <xQueueGenericSend+0x200>)
 8008fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fca:	601a      	str	r2, [r3, #0]
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	e00a      	b.n	8008fec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d007      	beq.n	8008fec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008fdc:	4b39      	ldr	r3, [pc, #228]	@ (80090c4 <xQueueGenericSend+0x200>)
 8008fde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fe2:	601a      	str	r2, [r3, #0]
 8008fe4:	f3bf 8f4f 	dsb	sy
 8008fe8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008fec:	f001 ff26 	bl	800ae3c <vPortExitCritical>
				return pdPASS;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e063      	b.n	80090bc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d103      	bne.n	8009002 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ffa:	f001 ff1f 	bl	800ae3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008ffe:	2300      	movs	r3, #0
 8009000:	e05c      	b.n	80090bc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009004:	2b00      	cmp	r3, #0
 8009006:	d106      	bne.n	8009016 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009008:	f107 0314 	add.w	r3, r7, #20
 800900c:	4618      	mov	r0, r3
 800900e:	f001 f817 	bl	800a040 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009012:	2301      	movs	r3, #1
 8009014:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009016:	f001 ff11 	bl	800ae3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800901a:	f000 fd87 	bl	8009b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800901e:	f001 fedb 	bl	800add8 <vPortEnterCritical>
 8009022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009024:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009028:	b25b      	sxtb	r3, r3
 800902a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800902e:	d103      	bne.n	8009038 <xQueueGenericSend+0x174>
 8009030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009032:	2200      	movs	r2, #0
 8009034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800903a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800903e:	b25b      	sxtb	r3, r3
 8009040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009044:	d103      	bne.n	800904e <xQueueGenericSend+0x18a>
 8009046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009048:	2200      	movs	r2, #0
 800904a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800904e:	f001 fef5 	bl	800ae3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009052:	1d3a      	adds	r2, r7, #4
 8009054:	f107 0314 	add.w	r3, r7, #20
 8009058:	4611      	mov	r1, r2
 800905a:	4618      	mov	r0, r3
 800905c:	f001 f806 	bl	800a06c <xTaskCheckForTimeOut>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d124      	bne.n	80090b0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009066:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009068:	f000 faa6 	bl	80095b8 <prvIsQueueFull>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d018      	beq.n	80090a4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009074:	3310      	adds	r3, #16
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	4611      	mov	r1, r2
 800907a:	4618      	mov	r0, r3
 800907c:	f000 ff2a 	bl	8009ed4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009080:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009082:	f000 fa31 	bl	80094e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009086:	f000 fd5f 	bl	8009b48 <xTaskResumeAll>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	f47f af7c 	bne.w	8008f8a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009092:	4b0c      	ldr	r3, [pc, #48]	@ (80090c4 <xQueueGenericSend+0x200>)
 8009094:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009098:	601a      	str	r2, [r3, #0]
 800909a:	f3bf 8f4f 	dsb	sy
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	e772      	b.n	8008f8a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80090a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090a6:	f000 fa1f 	bl	80094e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090aa:	f000 fd4d 	bl	8009b48 <xTaskResumeAll>
 80090ae:	e76c      	b.n	8008f8a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80090b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090b2:	f000 fa19 	bl	80094e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090b6:	f000 fd47 	bl	8009b48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80090ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3738      	adds	r7, #56	@ 0x38
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	e000ed04 	.word	0xe000ed04

080090c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b090      	sub	sp, #64	@ 0x40
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
 80090d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80090da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d10b      	bne.n	80090f8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80090e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e4:	f383 8811 	msr	BASEPRI, r3
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80090f2:	bf00      	nop
 80090f4:	bf00      	nop
 80090f6:	e7fd      	b.n	80090f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d103      	bne.n	8009106 <xQueueGenericSendFromISR+0x3e>
 80090fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <xQueueGenericSendFromISR+0x42>
 8009106:	2301      	movs	r3, #1
 8009108:	e000      	b.n	800910c <xQueueGenericSendFromISR+0x44>
 800910a:	2300      	movs	r3, #0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10b      	bne.n	8009128 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009122:	bf00      	nop
 8009124:	bf00      	nop
 8009126:	e7fd      	b.n	8009124 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	2b02      	cmp	r3, #2
 800912c:	d103      	bne.n	8009136 <xQueueGenericSendFromISR+0x6e>
 800912e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009132:	2b01      	cmp	r3, #1
 8009134:	d101      	bne.n	800913a <xQueueGenericSendFromISR+0x72>
 8009136:	2301      	movs	r3, #1
 8009138:	e000      	b.n	800913c <xQueueGenericSendFromISR+0x74>
 800913a:	2300      	movs	r3, #0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10b      	bne.n	8009158 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009144:	f383 8811 	msr	BASEPRI, r3
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	623b      	str	r3, [r7, #32]
}
 8009152:	bf00      	nop
 8009154:	bf00      	nop
 8009156:	e7fd      	b.n	8009154 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009158:	f001 ff1e 	bl	800af98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800915c:	f3ef 8211 	mrs	r2, BASEPRI
 8009160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009164:	f383 8811 	msr	BASEPRI, r3
 8009168:	f3bf 8f6f 	isb	sy
 800916c:	f3bf 8f4f 	dsb	sy
 8009170:	61fa      	str	r2, [r7, #28]
 8009172:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009174:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009176:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800917c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009180:	429a      	cmp	r2, r3
 8009182:	d302      	bcc.n	800918a <xQueueGenericSendFromISR+0xc2>
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	2b02      	cmp	r3, #2
 8009188:	d12f      	bne.n	80091ea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800918a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009190:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009198:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	68b9      	ldr	r1, [r7, #8]
 800919e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80091a0:	f000 f912 	bl	80093c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80091a4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80091a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ac:	d112      	bne.n	80091d4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d016      	beq.n	80091e4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b8:	3324      	adds	r3, #36	@ 0x24
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 fedc 	bl	8009f78 <xTaskRemoveFromEventList>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d00e      	beq.n	80091e4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00b      	beq.n	80091e4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	601a      	str	r2, [r3, #0]
 80091d2:	e007      	b.n	80091e4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80091d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80091d8:	3301      	adds	r3, #1
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	b25a      	sxtb	r2, r3
 80091de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80091e4:	2301      	movs	r3, #1
 80091e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80091e8:	e001      	b.n	80091ee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80091ea:	2300      	movs	r3, #0
 80091ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091f0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80091f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3740      	adds	r7, #64	@ 0x40
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b08c      	sub	sp, #48	@ 0x30
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009210:	2300      	movs	r3, #0
 8009212:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921a:	2b00      	cmp	r3, #0
 800921c:	d10b      	bne.n	8009236 <xQueueReceive+0x32>
	__asm volatile
 800921e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009222:	f383 8811 	msr	BASEPRI, r3
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	f3bf 8f4f 	dsb	sy
 800922e:	623b      	str	r3, [r7, #32]
}
 8009230:	bf00      	nop
 8009232:	bf00      	nop
 8009234:	e7fd      	b.n	8009232 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d103      	bne.n	8009244 <xQueueReceive+0x40>
 800923c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800923e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009240:	2b00      	cmp	r3, #0
 8009242:	d101      	bne.n	8009248 <xQueueReceive+0x44>
 8009244:	2301      	movs	r3, #1
 8009246:	e000      	b.n	800924a <xQueueReceive+0x46>
 8009248:	2300      	movs	r3, #0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10b      	bne.n	8009266 <xQueueReceive+0x62>
	__asm volatile
 800924e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009252:	f383 8811 	msr	BASEPRI, r3
 8009256:	f3bf 8f6f 	isb	sy
 800925a:	f3bf 8f4f 	dsb	sy
 800925e:	61fb      	str	r3, [r7, #28]
}
 8009260:	bf00      	nop
 8009262:	bf00      	nop
 8009264:	e7fd      	b.n	8009262 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009266:	f001 f847 	bl	800a2f8 <xTaskGetSchedulerState>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d102      	bne.n	8009276 <xQueueReceive+0x72>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d101      	bne.n	800927a <xQueueReceive+0x76>
 8009276:	2301      	movs	r3, #1
 8009278:	e000      	b.n	800927c <xQueueReceive+0x78>
 800927a:	2300      	movs	r3, #0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10b      	bne.n	8009298 <xQueueReceive+0x94>
	__asm volatile
 8009280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009284:	f383 8811 	msr	BASEPRI, r3
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	61bb      	str	r3, [r7, #24]
}
 8009292:	bf00      	nop
 8009294:	bf00      	nop
 8009296:	e7fd      	b.n	8009294 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009298:	f001 fd9e 	bl	800add8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800929c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800929e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d01f      	beq.n	80092e8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80092a8:	68b9      	ldr	r1, [r7, #8]
 80092aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092ac:	f000 f8f6 	bl	800949c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80092b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b2:	1e5a      	subs	r2, r3, #1
 80092b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d00f      	beq.n	80092e0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c2:	3310      	adds	r3, #16
 80092c4:	4618      	mov	r0, r3
 80092c6:	f000 fe57 	bl	8009f78 <xTaskRemoveFromEventList>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d007      	beq.n	80092e0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80092d0:	4b3c      	ldr	r3, [pc, #240]	@ (80093c4 <xQueueReceive+0x1c0>)
 80092d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092d6:	601a      	str	r2, [r3, #0]
 80092d8:	f3bf 8f4f 	dsb	sy
 80092dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80092e0:	f001 fdac 	bl	800ae3c <vPortExitCritical>
				return pdPASS;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e069      	b.n	80093bc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d103      	bne.n	80092f6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80092ee:	f001 fda5 	bl	800ae3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80092f2:	2300      	movs	r3, #0
 80092f4:	e062      	b.n	80093bc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80092f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d106      	bne.n	800930a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092fc:	f107 0310 	add.w	r3, r7, #16
 8009300:	4618      	mov	r0, r3
 8009302:	f000 fe9d 	bl	800a040 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009306:	2301      	movs	r3, #1
 8009308:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800930a:	f001 fd97 	bl	800ae3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800930e:	f000 fc0d 	bl	8009b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009312:	f001 fd61 	bl	800add8 <vPortEnterCritical>
 8009316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009318:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800931c:	b25b      	sxtb	r3, r3
 800931e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009322:	d103      	bne.n	800932c <xQueueReceive+0x128>
 8009324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009326:	2200      	movs	r2, #0
 8009328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800932c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800932e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009332:	b25b      	sxtb	r3, r3
 8009334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009338:	d103      	bne.n	8009342 <xQueueReceive+0x13e>
 800933a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800933c:	2200      	movs	r2, #0
 800933e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009342:	f001 fd7b 	bl	800ae3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009346:	1d3a      	adds	r2, r7, #4
 8009348:	f107 0310 	add.w	r3, r7, #16
 800934c:	4611      	mov	r1, r2
 800934e:	4618      	mov	r0, r3
 8009350:	f000 fe8c 	bl	800a06c <xTaskCheckForTimeOut>
 8009354:	4603      	mov	r3, r0
 8009356:	2b00      	cmp	r3, #0
 8009358:	d123      	bne.n	80093a2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800935a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800935c:	f000 f916 	bl	800958c <prvIsQueueEmpty>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d017      	beq.n	8009396 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009368:	3324      	adds	r3, #36	@ 0x24
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	4611      	mov	r1, r2
 800936e:	4618      	mov	r0, r3
 8009370:	f000 fdb0 	bl	8009ed4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009374:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009376:	f000 f8b7 	bl	80094e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800937a:	f000 fbe5 	bl	8009b48 <xTaskResumeAll>
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d189      	bne.n	8009298 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009384:	4b0f      	ldr	r3, [pc, #60]	@ (80093c4 <xQueueReceive+0x1c0>)
 8009386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800938a:	601a      	str	r2, [r3, #0]
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	f3bf 8f6f 	isb	sy
 8009394:	e780      	b.n	8009298 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009396:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009398:	f000 f8a6 	bl	80094e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800939c:	f000 fbd4 	bl	8009b48 <xTaskResumeAll>
 80093a0:	e77a      	b.n	8009298 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80093a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093a4:	f000 f8a0 	bl	80094e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093a8:	f000 fbce 	bl	8009b48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093ae:	f000 f8ed 	bl	800958c <prvIsQueueEmpty>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f43f af6f 	beq.w	8009298 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80093ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3730      	adds	r7, #48	@ 0x30
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	e000ed04 	.word	0xe000ed04

080093c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80093d4:	2300      	movs	r3, #0
 80093d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10d      	bne.n	8009402 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d14d      	bne.n	800948a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	4618      	mov	r0, r3
 80093f4:	f000 ff9e 	bl	800a334 <xTaskPriorityDisinherit>
 80093f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	609a      	str	r2, [r3, #8]
 8009400:	e043      	b.n	800948a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d119      	bne.n	800943c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6858      	ldr	r0, [r3, #4]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009410:	461a      	mov	r2, r3
 8009412:	68b9      	ldr	r1, [r7, #8]
 8009414:	f003 f833 	bl	800c47e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009420:	441a      	add	r2, r3
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	685a      	ldr	r2, [r3, #4]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	429a      	cmp	r2, r3
 8009430:	d32b      	bcc.n	800948a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	605a      	str	r2, [r3, #4]
 800943a:	e026      	b.n	800948a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	68d8      	ldr	r0, [r3, #12]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009444:	461a      	mov	r2, r3
 8009446:	68b9      	ldr	r1, [r7, #8]
 8009448:	f003 f819 	bl	800c47e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	68da      	ldr	r2, [r3, #12]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009454:	425b      	negs	r3, r3
 8009456:	441a      	add	r2, r3
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	68da      	ldr	r2, [r3, #12]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	429a      	cmp	r2, r3
 8009466:	d207      	bcs.n	8009478 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	689a      	ldr	r2, [r3, #8]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009470:	425b      	negs	r3, r3
 8009472:	441a      	add	r2, r3
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b02      	cmp	r3, #2
 800947c:	d105      	bne.n	800948a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d002      	beq.n	800948a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	3b01      	subs	r3, #1
 8009488:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	1c5a      	adds	r2, r3, #1
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009492:	697b      	ldr	r3, [r7, #20]
}
 8009494:	4618      	mov	r0, r3
 8009496:	3718      	adds	r7, #24
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d018      	beq.n	80094e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	68da      	ldr	r2, [r3, #12]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094b6:	441a      	add	r2, r3
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	68da      	ldr	r2, [r3, #12]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d303      	bcc.n	80094d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	68d9      	ldr	r1, [r3, #12]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094d8:	461a      	mov	r2, r3
 80094da:	6838      	ldr	r0, [r7, #0]
 80094dc:	f002 ffcf 	bl	800c47e <memcpy>
	}
}
 80094e0:	bf00      	nop
 80094e2:	3708      	adds	r7, #8
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80094f0:	f001 fc72 	bl	800add8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80094fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094fc:	e011      	b.n	8009522 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009502:	2b00      	cmp	r3, #0
 8009504:	d012      	beq.n	800952c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	3324      	adds	r3, #36	@ 0x24
 800950a:	4618      	mov	r0, r3
 800950c:	f000 fd34 	bl	8009f78 <xTaskRemoveFromEventList>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009516:	f000 fe0d 	bl	800a134 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800951a:	7bfb      	ldrb	r3, [r7, #15]
 800951c:	3b01      	subs	r3, #1
 800951e:	b2db      	uxtb	r3, r3
 8009520:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009526:	2b00      	cmp	r3, #0
 8009528:	dce9      	bgt.n	80094fe <prvUnlockQueue+0x16>
 800952a:	e000      	b.n	800952e <prvUnlockQueue+0x46>
					break;
 800952c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	22ff      	movs	r2, #255	@ 0xff
 8009532:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009536:	f001 fc81 	bl	800ae3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800953a:	f001 fc4d 	bl	800add8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009544:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009546:	e011      	b.n	800956c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d012      	beq.n	8009576 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	3310      	adds	r3, #16
 8009554:	4618      	mov	r0, r3
 8009556:	f000 fd0f 	bl	8009f78 <xTaskRemoveFromEventList>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d001      	beq.n	8009564 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009560:	f000 fde8 	bl	800a134 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009564:	7bbb      	ldrb	r3, [r7, #14]
 8009566:	3b01      	subs	r3, #1
 8009568:	b2db      	uxtb	r3, r3
 800956a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800956c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009570:	2b00      	cmp	r3, #0
 8009572:	dce9      	bgt.n	8009548 <prvUnlockQueue+0x60>
 8009574:	e000      	b.n	8009578 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009576:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	22ff      	movs	r2, #255	@ 0xff
 800957c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009580:	f001 fc5c 	bl	800ae3c <vPortExitCritical>
}
 8009584:	bf00      	nop
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009594:	f001 fc20 	bl	800add8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800959c:	2b00      	cmp	r3, #0
 800959e:	d102      	bne.n	80095a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80095a0:	2301      	movs	r3, #1
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	e001      	b.n	80095aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80095a6:	2300      	movs	r3, #0
 80095a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095aa:	f001 fc47 	bl	800ae3c <vPortExitCritical>

	return xReturn;
 80095ae:	68fb      	ldr	r3, [r7, #12]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80095c0:	f001 fc0a 	bl	800add8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d102      	bne.n	80095d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80095d0:	2301      	movs	r3, #1
 80095d2:	60fb      	str	r3, [r7, #12]
 80095d4:	e001      	b.n	80095da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80095d6:	2300      	movs	r3, #0
 80095d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095da:	f001 fc2f 	bl	800ae3c <vPortExitCritical>

	return xReturn;
 80095de:	68fb      	ldr	r3, [r7, #12]
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
 80095f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095f2:	2300      	movs	r3, #0
 80095f4:	60fb      	str	r3, [r7, #12]
 80095f6:	e014      	b.n	8009622 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80095f8:	4a0f      	ldr	r2, [pc, #60]	@ (8009638 <vQueueAddToRegistry+0x50>)
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10b      	bne.n	800961c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009604:	490c      	ldr	r1, [pc, #48]	@ (8009638 <vQueueAddToRegistry+0x50>)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	683a      	ldr	r2, [r7, #0]
 800960a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800960e:	4a0a      	ldr	r2, [pc, #40]	@ (8009638 <vQueueAddToRegistry+0x50>)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	00db      	lsls	r3, r3, #3
 8009614:	4413      	add	r3, r2
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800961a:	e006      	b.n	800962a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	3301      	adds	r3, #1
 8009620:	60fb      	str	r3, [r7, #12]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2b07      	cmp	r3, #7
 8009626:	d9e7      	bls.n	80095f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009628:	bf00      	nop
 800962a:	bf00      	nop
 800962c:	3714      	adds	r7, #20
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	20000c40 	.word	0x20000c40

0800963c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800963c:	b580      	push	{r7, lr}
 800963e:	b086      	sub	sp, #24
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800964c:	f001 fbc4 	bl	800add8 <vPortEnterCritical>
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009656:	b25b      	sxtb	r3, r3
 8009658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800965c:	d103      	bne.n	8009666 <vQueueWaitForMessageRestricted+0x2a>
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800966c:	b25b      	sxtb	r3, r3
 800966e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009672:	d103      	bne.n	800967c <vQueueWaitForMessageRestricted+0x40>
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800967c:	f001 fbde 	bl	800ae3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009684:	2b00      	cmp	r3, #0
 8009686:	d106      	bne.n	8009696 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	3324      	adds	r3, #36	@ 0x24
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	68b9      	ldr	r1, [r7, #8]
 8009690:	4618      	mov	r0, r3
 8009692:	f000 fc45 	bl	8009f20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009696:	6978      	ldr	r0, [r7, #20]
 8009698:	f7ff ff26 	bl	80094e8 <prvUnlockQueue>
	}
 800969c:	bf00      	nop
 800969e:	3718      	adds	r7, #24
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b08e      	sub	sp, #56	@ 0x38
 80096a8:	af04      	add	r7, sp, #16
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
 80096b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80096b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d10b      	bne.n	80096d0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80096b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096bc:	f383 8811 	msr	BASEPRI, r3
 80096c0:	f3bf 8f6f 	isb	sy
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	623b      	str	r3, [r7, #32]
}
 80096ca:	bf00      	nop
 80096cc:	bf00      	nop
 80096ce:	e7fd      	b.n	80096cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80096d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d10b      	bne.n	80096ee <xTaskCreateStatic+0x4a>
	__asm volatile
 80096d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096da:	f383 8811 	msr	BASEPRI, r3
 80096de:	f3bf 8f6f 	isb	sy
 80096e2:	f3bf 8f4f 	dsb	sy
 80096e6:	61fb      	str	r3, [r7, #28]
}
 80096e8:	bf00      	nop
 80096ea:	bf00      	nop
 80096ec:	e7fd      	b.n	80096ea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80096ee:	235c      	movs	r3, #92	@ 0x5c
 80096f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	2b5c      	cmp	r3, #92	@ 0x5c
 80096f6:	d00b      	beq.n	8009710 <xTaskCreateStatic+0x6c>
	__asm volatile
 80096f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fc:	f383 8811 	msr	BASEPRI, r3
 8009700:	f3bf 8f6f 	isb	sy
 8009704:	f3bf 8f4f 	dsb	sy
 8009708:	61bb      	str	r3, [r7, #24]
}
 800970a:	bf00      	nop
 800970c:	bf00      	nop
 800970e:	e7fd      	b.n	800970c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009710:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009714:	2b00      	cmp	r3, #0
 8009716:	d01e      	beq.n	8009756 <xTaskCreateStatic+0xb2>
 8009718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800971a:	2b00      	cmp	r3, #0
 800971c:	d01b      	beq.n	8009756 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800971e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009720:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009724:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009726:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800972a:	2202      	movs	r2, #2
 800972c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009730:	2300      	movs	r3, #0
 8009732:	9303      	str	r3, [sp, #12]
 8009734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009736:	9302      	str	r3, [sp, #8]
 8009738:	f107 0314 	add.w	r3, r7, #20
 800973c:	9301      	str	r3, [sp, #4]
 800973e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009740:	9300      	str	r3, [sp, #0]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	68b9      	ldr	r1, [r7, #8]
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f000 f850 	bl	80097ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800974e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009750:	f000 f8de 	bl	8009910 <prvAddNewTaskToReadyList>
 8009754:	e001      	b.n	800975a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009756:	2300      	movs	r3, #0
 8009758:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800975a:	697b      	ldr	r3, [r7, #20]
	}
 800975c:	4618      	mov	r0, r3
 800975e:	3728      	adds	r7, #40	@ 0x28
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009764:	b580      	push	{r7, lr}
 8009766:	b08c      	sub	sp, #48	@ 0x30
 8009768:	af04      	add	r7, sp, #16
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	603b      	str	r3, [r7, #0]
 8009770:	4613      	mov	r3, r2
 8009772:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009774:	88fb      	ldrh	r3, [r7, #6]
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4618      	mov	r0, r3
 800977a:	f001 fc4f 	bl	800b01c <pvPortMalloc>
 800977e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00e      	beq.n	80097a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009786:	205c      	movs	r0, #92	@ 0x5c
 8009788:	f001 fc48 	bl	800b01c <pvPortMalloc>
 800978c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d003      	beq.n	800979c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	697a      	ldr	r2, [r7, #20]
 8009798:	631a      	str	r2, [r3, #48]	@ 0x30
 800979a:	e005      	b.n	80097a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800979c:	6978      	ldr	r0, [r7, #20]
 800979e:	f001 fd0b 	bl	800b1b8 <vPortFree>
 80097a2:	e001      	b.n	80097a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80097a4:	2300      	movs	r3, #0
 80097a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d017      	beq.n	80097de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	2200      	movs	r2, #0
 80097b2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80097b6:	88fa      	ldrh	r2, [r7, #6]
 80097b8:	2300      	movs	r3, #0
 80097ba:	9303      	str	r3, [sp, #12]
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	9302      	str	r3, [sp, #8]
 80097c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097c2:	9301      	str	r3, [sp, #4]
 80097c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	68b9      	ldr	r1, [r7, #8]
 80097cc:	68f8      	ldr	r0, [r7, #12]
 80097ce:	f000 f80e 	bl	80097ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80097d2:	69f8      	ldr	r0, [r7, #28]
 80097d4:	f000 f89c 	bl	8009910 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80097d8:	2301      	movs	r3, #1
 80097da:	61bb      	str	r3, [r7, #24]
 80097dc:	e002      	b.n	80097e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80097de:	f04f 33ff 	mov.w	r3, #4294967295
 80097e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80097e4:	69bb      	ldr	r3, [r7, #24]
	}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3720      	adds	r7, #32
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b088      	sub	sp, #32
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	60f8      	str	r0, [r7, #12]
 80097f6:	60b9      	str	r1, [r7, #8]
 80097f8:	607a      	str	r2, [r7, #4]
 80097fa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80097fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097fe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	461a      	mov	r2, r3
 8009806:	21a5      	movs	r1, #165	@ 0xa5
 8009808:	f002 fdb9 	bl	800c37e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800980c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800980e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009816:	3b01      	subs	r3, #1
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	f023 0307 	bic.w	r3, r3, #7
 8009824:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	f003 0307 	and.w	r3, r3, #7
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00b      	beq.n	8009848 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	617b      	str	r3, [r7, #20]
}
 8009842:	bf00      	nop
 8009844:	bf00      	nop
 8009846:	e7fd      	b.n	8009844 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d01f      	beq.n	800988e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800984e:	2300      	movs	r3, #0
 8009850:	61fb      	str	r3, [r7, #28]
 8009852:	e012      	b.n	800987a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009854:	68ba      	ldr	r2, [r7, #8]
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	4413      	add	r3, r2
 800985a:	7819      	ldrb	r1, [r3, #0]
 800985c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	4413      	add	r3, r2
 8009862:	3334      	adds	r3, #52	@ 0x34
 8009864:	460a      	mov	r2, r1
 8009866:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009868:	68ba      	ldr	r2, [r7, #8]
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	4413      	add	r3, r2
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d006      	beq.n	8009882 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	3301      	adds	r3, #1
 8009878:	61fb      	str	r3, [r7, #28]
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	2b0f      	cmp	r3, #15
 800987e:	d9e9      	bls.n	8009854 <prvInitialiseNewTask+0x66>
 8009880:	e000      	b.n	8009884 <prvInitialiseNewTask+0x96>
			{
				break;
 8009882:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009886:	2200      	movs	r2, #0
 8009888:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800988c:	e003      	b.n	8009896 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800988e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009890:	2200      	movs	r2, #0
 8009892:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009898:	2b37      	cmp	r3, #55	@ 0x37
 800989a:	d901      	bls.n	80098a0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800989c:	2337      	movs	r3, #55	@ 0x37
 800989e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80098a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098a4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80098a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098aa:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80098ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ae:	2200      	movs	r2, #0
 80098b0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80098b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b4:	3304      	adds	r3, #4
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7ff f966 	bl	8008b88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80098bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098be:	3318      	adds	r3, #24
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7ff f961 	bl	8008b88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80098c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80098d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80098d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098da:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80098dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098de:	2200      	movs	r2, #0
 80098e0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80098e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	68f9      	ldr	r1, [r7, #12]
 80098ee:	69b8      	ldr	r0, [r7, #24]
 80098f0:	f001 f93e 	bl	800ab70 <pxPortInitialiseStack>
 80098f4:	4602      	mov	r2, r0
 80098f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80098fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d002      	beq.n	8009906 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009906:	bf00      	nop
 8009908:	3720      	adds	r7, #32
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
	...

08009910 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009918:	f001 fa5e 	bl	800add8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800991c:	4b2d      	ldr	r3, [pc, #180]	@ (80099d4 <prvAddNewTaskToReadyList+0xc4>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	3301      	adds	r3, #1
 8009922:	4a2c      	ldr	r2, [pc, #176]	@ (80099d4 <prvAddNewTaskToReadyList+0xc4>)
 8009924:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009926:	4b2c      	ldr	r3, [pc, #176]	@ (80099d8 <prvAddNewTaskToReadyList+0xc8>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d109      	bne.n	8009942 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800992e:	4a2a      	ldr	r2, [pc, #168]	@ (80099d8 <prvAddNewTaskToReadyList+0xc8>)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009934:	4b27      	ldr	r3, [pc, #156]	@ (80099d4 <prvAddNewTaskToReadyList+0xc4>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d110      	bne.n	800995e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800993c:	f000 fc1e 	bl	800a17c <prvInitialiseTaskLists>
 8009940:	e00d      	b.n	800995e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009942:	4b26      	ldr	r3, [pc, #152]	@ (80099dc <prvAddNewTaskToReadyList+0xcc>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d109      	bne.n	800995e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800994a:	4b23      	ldr	r3, [pc, #140]	@ (80099d8 <prvAddNewTaskToReadyList+0xc8>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009954:	429a      	cmp	r2, r3
 8009956:	d802      	bhi.n	800995e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009958:	4a1f      	ldr	r2, [pc, #124]	@ (80099d8 <prvAddNewTaskToReadyList+0xc8>)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800995e:	4b20      	ldr	r3, [pc, #128]	@ (80099e0 <prvAddNewTaskToReadyList+0xd0>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3301      	adds	r3, #1
 8009964:	4a1e      	ldr	r2, [pc, #120]	@ (80099e0 <prvAddNewTaskToReadyList+0xd0>)
 8009966:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009968:	4b1d      	ldr	r3, [pc, #116]	@ (80099e0 <prvAddNewTaskToReadyList+0xd0>)
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009974:	4b1b      	ldr	r3, [pc, #108]	@ (80099e4 <prvAddNewTaskToReadyList+0xd4>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	429a      	cmp	r2, r3
 800997a:	d903      	bls.n	8009984 <prvAddNewTaskToReadyList+0x74>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009980:	4a18      	ldr	r2, [pc, #96]	@ (80099e4 <prvAddNewTaskToReadyList+0xd4>)
 8009982:	6013      	str	r3, [r2, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009988:	4613      	mov	r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	4413      	add	r3, r2
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	4a15      	ldr	r2, [pc, #84]	@ (80099e8 <prvAddNewTaskToReadyList+0xd8>)
 8009992:	441a      	add	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	3304      	adds	r3, #4
 8009998:	4619      	mov	r1, r3
 800999a:	4610      	mov	r0, r2
 800999c:	f7ff f901 	bl	8008ba2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80099a0:	f001 fa4c 	bl	800ae3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80099a4:	4b0d      	ldr	r3, [pc, #52]	@ (80099dc <prvAddNewTaskToReadyList+0xcc>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00e      	beq.n	80099ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80099ac:	4b0a      	ldr	r3, [pc, #40]	@ (80099d8 <prvAddNewTaskToReadyList+0xc8>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d207      	bcs.n	80099ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80099ba:	4b0c      	ldr	r3, [pc, #48]	@ (80099ec <prvAddNewTaskToReadyList+0xdc>)
 80099bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099c0:	601a      	str	r2, [r3, #0]
 80099c2:	f3bf 8f4f 	dsb	sy
 80099c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099ca:	bf00      	nop
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20001154 	.word	0x20001154
 80099d8:	20000c80 	.word	0x20000c80
 80099dc:	20001160 	.word	0x20001160
 80099e0:	20001170 	.word	0x20001170
 80099e4:	2000115c 	.word	0x2000115c
 80099e8:	20000c84 	.word	0x20000c84
 80099ec:	e000ed04 	.word	0xe000ed04

080099f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80099f8:	2300      	movs	r3, #0
 80099fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d018      	beq.n	8009a34 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009a02:	4b14      	ldr	r3, [pc, #80]	@ (8009a54 <vTaskDelay+0x64>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00b      	beq.n	8009a22 <vTaskDelay+0x32>
	__asm volatile
 8009a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	60bb      	str	r3, [r7, #8]
}
 8009a1c:	bf00      	nop
 8009a1e:	bf00      	nop
 8009a20:	e7fd      	b.n	8009a1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009a22:	f000 f883 	bl	8009b2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009a26:	2100      	movs	r1, #0
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 fcf3 	bl	800a414 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009a2e:	f000 f88b 	bl	8009b48 <xTaskResumeAll>
 8009a32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d107      	bne.n	8009a4a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009a3a:	4b07      	ldr	r3, [pc, #28]	@ (8009a58 <vTaskDelay+0x68>)
 8009a3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a40:	601a      	str	r2, [r3, #0]
 8009a42:	f3bf 8f4f 	dsb	sy
 8009a46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a4a:	bf00      	nop
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	2000117c 	.word	0x2000117c
 8009a58:	e000ed04 	.word	0xe000ed04

08009a5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b08a      	sub	sp, #40	@ 0x28
 8009a60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009a62:	2300      	movs	r3, #0
 8009a64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009a66:	2300      	movs	r3, #0
 8009a68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009a6a:	463a      	mov	r2, r7
 8009a6c:	1d39      	adds	r1, r7, #4
 8009a6e:	f107 0308 	add.w	r3, r7, #8
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7ff f834 	bl	8008ae0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009a78:	6839      	ldr	r1, [r7, #0]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	9202      	str	r2, [sp, #8]
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	2300      	movs	r3, #0
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	2300      	movs	r3, #0
 8009a88:	460a      	mov	r2, r1
 8009a8a:	4922      	ldr	r1, [pc, #136]	@ (8009b14 <vTaskStartScheduler+0xb8>)
 8009a8c:	4822      	ldr	r0, [pc, #136]	@ (8009b18 <vTaskStartScheduler+0xbc>)
 8009a8e:	f7ff fe09 	bl	80096a4 <xTaskCreateStatic>
 8009a92:	4603      	mov	r3, r0
 8009a94:	4a21      	ldr	r2, [pc, #132]	@ (8009b1c <vTaskStartScheduler+0xc0>)
 8009a96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009a98:	4b20      	ldr	r3, [pc, #128]	@ (8009b1c <vTaskStartScheduler+0xc0>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d002      	beq.n	8009aa6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	617b      	str	r3, [r7, #20]
 8009aa4:	e001      	b.n	8009aaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d102      	bne.n	8009ab6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009ab0:	f000 fd04 	bl	800a4bc <xTimerCreateTimerTask>
 8009ab4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d116      	bne.n	8009aea <vTaskStartScheduler+0x8e>
	__asm volatile
 8009abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	613b      	str	r3, [r7, #16]
}
 8009ace:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009ad0:	4b13      	ldr	r3, [pc, #76]	@ (8009b20 <vTaskStartScheduler+0xc4>)
 8009ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009ad8:	4b12      	ldr	r3, [pc, #72]	@ (8009b24 <vTaskStartScheduler+0xc8>)
 8009ada:	2201      	movs	r2, #1
 8009adc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009ade:	4b12      	ldr	r3, [pc, #72]	@ (8009b28 <vTaskStartScheduler+0xcc>)
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009ae4:	f001 f8d4 	bl	800ac90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009ae8:	e00f      	b.n	8009b0a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009af0:	d10b      	bne.n	8009b0a <vTaskStartScheduler+0xae>
	__asm volatile
 8009af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	60fb      	str	r3, [r7, #12]
}
 8009b04:	bf00      	nop
 8009b06:	bf00      	nop
 8009b08:	e7fd      	b.n	8009b06 <vTaskStartScheduler+0xaa>
}
 8009b0a:	bf00      	nop
 8009b0c:	3718      	adds	r7, #24
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	0800e66c 	.word	0x0800e66c
 8009b18:	0800a14d 	.word	0x0800a14d
 8009b1c:	20001178 	.word	0x20001178
 8009b20:	20001174 	.word	0x20001174
 8009b24:	20001160 	.word	0x20001160
 8009b28:	20001158 	.word	0x20001158

08009b2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009b30:	4b04      	ldr	r3, [pc, #16]	@ (8009b44 <vTaskSuspendAll+0x18>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	3301      	adds	r3, #1
 8009b36:	4a03      	ldr	r2, [pc, #12]	@ (8009b44 <vTaskSuspendAll+0x18>)
 8009b38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009b3a:	bf00      	nop
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr
 8009b44:	2000117c 	.word	0x2000117c

08009b48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009b52:	2300      	movs	r3, #0
 8009b54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009b56:	4b42      	ldr	r3, [pc, #264]	@ (8009c60 <xTaskResumeAll+0x118>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10b      	bne.n	8009b76 <xTaskResumeAll+0x2e>
	__asm volatile
 8009b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	603b      	str	r3, [r7, #0]
}
 8009b70:	bf00      	nop
 8009b72:	bf00      	nop
 8009b74:	e7fd      	b.n	8009b72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009b76:	f001 f92f 	bl	800add8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009b7a:	4b39      	ldr	r3, [pc, #228]	@ (8009c60 <xTaskResumeAll+0x118>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	4a37      	ldr	r2, [pc, #220]	@ (8009c60 <xTaskResumeAll+0x118>)
 8009b82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b84:	4b36      	ldr	r3, [pc, #216]	@ (8009c60 <xTaskResumeAll+0x118>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d162      	bne.n	8009c52 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009b8c:	4b35      	ldr	r3, [pc, #212]	@ (8009c64 <xTaskResumeAll+0x11c>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d05e      	beq.n	8009c52 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009b94:	e02f      	b.n	8009bf6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b96:	4b34      	ldr	r3, [pc, #208]	@ (8009c68 <xTaskResumeAll+0x120>)
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	3318      	adds	r3, #24
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7ff f85a 	bl	8008c5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	3304      	adds	r3, #4
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7ff f855 	bl	8008c5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8009c6c <xTaskResumeAll+0x124>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d903      	bls.n	8009bc6 <xTaskResumeAll+0x7e>
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bc2:	4a2a      	ldr	r2, [pc, #168]	@ (8009c6c <xTaskResumeAll+0x124>)
 8009bc4:	6013      	str	r3, [r2, #0]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bca:	4613      	mov	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	4413      	add	r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4a27      	ldr	r2, [pc, #156]	@ (8009c70 <xTaskResumeAll+0x128>)
 8009bd4:	441a      	add	r2, r3
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	3304      	adds	r3, #4
 8009bda:	4619      	mov	r1, r3
 8009bdc:	4610      	mov	r0, r2
 8009bde:	f7fe ffe0 	bl	8008ba2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009be6:	4b23      	ldr	r3, [pc, #140]	@ (8009c74 <xTaskResumeAll+0x12c>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d302      	bcc.n	8009bf6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009bf0:	4b21      	ldr	r3, [pc, #132]	@ (8009c78 <xTaskResumeAll+0x130>)
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8009c68 <xTaskResumeAll+0x120>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d1cb      	bne.n	8009b96 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d001      	beq.n	8009c08 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009c04:	f000 fb58 	bl	800a2b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009c08:	4b1c      	ldr	r3, [pc, #112]	@ (8009c7c <xTaskResumeAll+0x134>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d010      	beq.n	8009c36 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009c14:	f000 f846 	bl	8009ca4 <xTaskIncrementTick>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d002      	beq.n	8009c24 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009c1e:	4b16      	ldr	r3, [pc, #88]	@ (8009c78 <xTaskResumeAll+0x130>)
 8009c20:	2201      	movs	r2, #1
 8009c22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	3b01      	subs	r3, #1
 8009c28:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d1f1      	bne.n	8009c14 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009c30:	4b12      	ldr	r3, [pc, #72]	@ (8009c7c <xTaskResumeAll+0x134>)
 8009c32:	2200      	movs	r2, #0
 8009c34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009c36:	4b10      	ldr	r3, [pc, #64]	@ (8009c78 <xTaskResumeAll+0x130>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d009      	beq.n	8009c52 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009c42:	4b0f      	ldr	r3, [pc, #60]	@ (8009c80 <xTaskResumeAll+0x138>)
 8009c44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c48:	601a      	str	r2, [r3, #0]
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c52:	f001 f8f3 	bl	800ae3c <vPortExitCritical>

	return xAlreadyYielded;
 8009c56:	68bb      	ldr	r3, [r7, #8]
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	2000117c 	.word	0x2000117c
 8009c64:	20001154 	.word	0x20001154
 8009c68:	20001114 	.word	0x20001114
 8009c6c:	2000115c 	.word	0x2000115c
 8009c70:	20000c84 	.word	0x20000c84
 8009c74:	20000c80 	.word	0x20000c80
 8009c78:	20001168 	.word	0x20001168
 8009c7c:	20001164 	.word	0x20001164
 8009c80:	e000ed04 	.word	0xe000ed04

08009c84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009c8a:	4b05      	ldr	r3, [pc, #20]	@ (8009ca0 <xTaskGetTickCount+0x1c>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009c90:	687b      	ldr	r3, [r7, #4]
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	370c      	adds	r7, #12
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	20001158 	.word	0x20001158

08009ca4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b086      	sub	sp, #24
 8009ca8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009caa:	2300      	movs	r3, #0
 8009cac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cae:	4b4f      	ldr	r3, [pc, #316]	@ (8009dec <xTaskIncrementTick+0x148>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	f040 8090 	bne.w	8009dd8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009cb8:	4b4d      	ldr	r3, [pc, #308]	@ (8009df0 <xTaskIncrementTick+0x14c>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009cc0:	4a4b      	ldr	r2, [pc, #300]	@ (8009df0 <xTaskIncrementTick+0x14c>)
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d121      	bne.n	8009d10 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009ccc:	4b49      	ldr	r3, [pc, #292]	@ (8009df4 <xTaskIncrementTick+0x150>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d00b      	beq.n	8009cee <xTaskIncrementTick+0x4a>
	__asm volatile
 8009cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cda:	f383 8811 	msr	BASEPRI, r3
 8009cde:	f3bf 8f6f 	isb	sy
 8009ce2:	f3bf 8f4f 	dsb	sy
 8009ce6:	603b      	str	r3, [r7, #0]
}
 8009ce8:	bf00      	nop
 8009cea:	bf00      	nop
 8009cec:	e7fd      	b.n	8009cea <xTaskIncrementTick+0x46>
 8009cee:	4b41      	ldr	r3, [pc, #260]	@ (8009df4 <xTaskIncrementTick+0x150>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	60fb      	str	r3, [r7, #12]
 8009cf4:	4b40      	ldr	r3, [pc, #256]	@ (8009df8 <xTaskIncrementTick+0x154>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a3e      	ldr	r2, [pc, #248]	@ (8009df4 <xTaskIncrementTick+0x150>)
 8009cfa:	6013      	str	r3, [r2, #0]
 8009cfc:	4a3e      	ldr	r2, [pc, #248]	@ (8009df8 <xTaskIncrementTick+0x154>)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6013      	str	r3, [r2, #0]
 8009d02:	4b3e      	ldr	r3, [pc, #248]	@ (8009dfc <xTaskIncrementTick+0x158>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	3301      	adds	r3, #1
 8009d08:	4a3c      	ldr	r2, [pc, #240]	@ (8009dfc <xTaskIncrementTick+0x158>)
 8009d0a:	6013      	str	r3, [r2, #0]
 8009d0c:	f000 fad4 	bl	800a2b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d10:	4b3b      	ldr	r3, [pc, #236]	@ (8009e00 <xTaskIncrementTick+0x15c>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d349      	bcc.n	8009dae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d1a:	4b36      	ldr	r3, [pc, #216]	@ (8009df4 <xTaskIncrementTick+0x150>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d104      	bne.n	8009d2e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d24:	4b36      	ldr	r3, [pc, #216]	@ (8009e00 <xTaskIncrementTick+0x15c>)
 8009d26:	f04f 32ff 	mov.w	r2, #4294967295
 8009d2a:	601a      	str	r2, [r3, #0]
					break;
 8009d2c:	e03f      	b.n	8009dae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d2e:	4b31      	ldr	r3, [pc, #196]	@ (8009df4 <xTaskIncrementTick+0x150>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009d3e:	693a      	ldr	r2, [r7, #16]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d203      	bcs.n	8009d4e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009d46:	4a2e      	ldr	r2, [pc, #184]	@ (8009e00 <xTaskIncrementTick+0x15c>)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009d4c:	e02f      	b.n	8009dae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	3304      	adds	r3, #4
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7fe ff82 	bl	8008c5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d004      	beq.n	8009d6a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	3318      	adds	r3, #24
 8009d64:	4618      	mov	r0, r3
 8009d66:	f7fe ff79 	bl	8008c5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d6e:	4b25      	ldr	r3, [pc, #148]	@ (8009e04 <xTaskIncrementTick+0x160>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d903      	bls.n	8009d7e <xTaskIncrementTick+0xda>
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d7a:	4a22      	ldr	r2, [pc, #136]	@ (8009e04 <xTaskIncrementTick+0x160>)
 8009d7c:	6013      	str	r3, [r2, #0]
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d82:	4613      	mov	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	4413      	add	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8009e08 <xTaskIncrementTick+0x164>)
 8009d8c:	441a      	add	r2, r3
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	3304      	adds	r3, #4
 8009d92:	4619      	mov	r1, r3
 8009d94:	4610      	mov	r0, r2
 8009d96:	f7fe ff04 	bl	8008ba2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8009e0c <xTaskIncrementTick+0x168>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d3b8      	bcc.n	8009d1a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009da8:	2301      	movs	r3, #1
 8009daa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dac:	e7b5      	b.n	8009d1a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009dae:	4b17      	ldr	r3, [pc, #92]	@ (8009e0c <xTaskIncrementTick+0x168>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009db4:	4914      	ldr	r1, [pc, #80]	@ (8009e08 <xTaskIncrementTick+0x164>)
 8009db6:	4613      	mov	r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	4413      	add	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	440b      	add	r3, r1
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d901      	bls.n	8009dca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009dca:	4b11      	ldr	r3, [pc, #68]	@ (8009e10 <xTaskIncrementTick+0x16c>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d007      	beq.n	8009de2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	617b      	str	r3, [r7, #20]
 8009dd6:	e004      	b.n	8009de2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8009e14 <xTaskIncrementTick+0x170>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	3301      	adds	r3, #1
 8009dde:	4a0d      	ldr	r2, [pc, #52]	@ (8009e14 <xTaskIncrementTick+0x170>)
 8009de0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009de2:	697b      	ldr	r3, [r7, #20]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3718      	adds	r7, #24
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	2000117c 	.word	0x2000117c
 8009df0:	20001158 	.word	0x20001158
 8009df4:	2000110c 	.word	0x2000110c
 8009df8:	20001110 	.word	0x20001110
 8009dfc:	2000116c 	.word	0x2000116c
 8009e00:	20001174 	.word	0x20001174
 8009e04:	2000115c 	.word	0x2000115c
 8009e08:	20000c84 	.word	0x20000c84
 8009e0c:	20000c80 	.word	0x20000c80
 8009e10:	20001168 	.word	0x20001168
 8009e14:	20001164 	.word	0x20001164

08009e18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009e1e:	4b28      	ldr	r3, [pc, #160]	@ (8009ec0 <vTaskSwitchContext+0xa8>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d003      	beq.n	8009e2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009e26:	4b27      	ldr	r3, [pc, #156]	@ (8009ec4 <vTaskSwitchContext+0xac>)
 8009e28:	2201      	movs	r2, #1
 8009e2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009e2c:	e042      	b.n	8009eb4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009e2e:	4b25      	ldr	r3, [pc, #148]	@ (8009ec4 <vTaskSwitchContext+0xac>)
 8009e30:	2200      	movs	r2, #0
 8009e32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e34:	4b24      	ldr	r3, [pc, #144]	@ (8009ec8 <vTaskSwitchContext+0xb0>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	60fb      	str	r3, [r7, #12]
 8009e3a:	e011      	b.n	8009e60 <vTaskSwitchContext+0x48>
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d10b      	bne.n	8009e5a <vTaskSwitchContext+0x42>
	__asm volatile
 8009e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e46:	f383 8811 	msr	BASEPRI, r3
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	f3bf 8f4f 	dsb	sy
 8009e52:	607b      	str	r3, [r7, #4]
}
 8009e54:	bf00      	nop
 8009e56:	bf00      	nop
 8009e58:	e7fd      	b.n	8009e56 <vTaskSwitchContext+0x3e>
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	3b01      	subs	r3, #1
 8009e5e:	60fb      	str	r3, [r7, #12]
 8009e60:	491a      	ldr	r1, [pc, #104]	@ (8009ecc <vTaskSwitchContext+0xb4>)
 8009e62:	68fa      	ldr	r2, [r7, #12]
 8009e64:	4613      	mov	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	4413      	add	r3, r2
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	440b      	add	r3, r1
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d0e3      	beq.n	8009e3c <vTaskSwitchContext+0x24>
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	4613      	mov	r3, r2
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	4413      	add	r3, r2
 8009e7c:	009b      	lsls	r3, r3, #2
 8009e7e:	4a13      	ldr	r2, [pc, #76]	@ (8009ecc <vTaskSwitchContext+0xb4>)
 8009e80:	4413      	add	r3, r2
 8009e82:	60bb      	str	r3, [r7, #8]
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	685a      	ldr	r2, [r3, #4]
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	605a      	str	r2, [r3, #4]
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	685a      	ldr	r2, [r3, #4]
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	3308      	adds	r3, #8
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d104      	bne.n	8009ea4 <vTaskSwitchContext+0x8c>
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	685a      	ldr	r2, [r3, #4]
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	605a      	str	r2, [r3, #4]
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	4a09      	ldr	r2, [pc, #36]	@ (8009ed0 <vTaskSwitchContext+0xb8>)
 8009eac:	6013      	str	r3, [r2, #0]
 8009eae:	4a06      	ldr	r2, [pc, #24]	@ (8009ec8 <vTaskSwitchContext+0xb0>)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6013      	str	r3, [r2, #0]
}
 8009eb4:	bf00      	nop
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr
 8009ec0:	2000117c 	.word	0x2000117c
 8009ec4:	20001168 	.word	0x20001168
 8009ec8:	2000115c 	.word	0x2000115c
 8009ecc:	20000c84 	.word	0x20000c84
 8009ed0:	20000c80 	.word	0x20000c80

08009ed4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10b      	bne.n	8009efc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee8:	f383 8811 	msr	BASEPRI, r3
 8009eec:	f3bf 8f6f 	isb	sy
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	60fb      	str	r3, [r7, #12]
}
 8009ef6:	bf00      	nop
 8009ef8:	bf00      	nop
 8009efa:	e7fd      	b.n	8009ef8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009efc:	4b07      	ldr	r3, [pc, #28]	@ (8009f1c <vTaskPlaceOnEventList+0x48>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	3318      	adds	r3, #24
 8009f02:	4619      	mov	r1, r3
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f7fe fe70 	bl	8008bea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f0a:	2101      	movs	r1, #1
 8009f0c:	6838      	ldr	r0, [r7, #0]
 8009f0e:	f000 fa81 	bl	800a414 <prvAddCurrentTaskToDelayedList>
}
 8009f12:	bf00      	nop
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	20000c80 	.word	0x20000c80

08009f20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b086      	sub	sp, #24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10b      	bne.n	8009f4a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f36:	f383 8811 	msr	BASEPRI, r3
 8009f3a:	f3bf 8f6f 	isb	sy
 8009f3e:	f3bf 8f4f 	dsb	sy
 8009f42:	617b      	str	r3, [r7, #20]
}
 8009f44:	bf00      	nop
 8009f46:	bf00      	nop
 8009f48:	e7fd      	b.n	8009f46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8009f74 <vTaskPlaceOnEventListRestricted+0x54>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	3318      	adds	r3, #24
 8009f50:	4619      	mov	r1, r3
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f7fe fe25 	bl	8008ba2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d002      	beq.n	8009f64 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f62:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009f64:	6879      	ldr	r1, [r7, #4]
 8009f66:	68b8      	ldr	r0, [r7, #8]
 8009f68:	f000 fa54 	bl	800a414 <prvAddCurrentTaskToDelayedList>
	}
 8009f6c:	bf00      	nop
 8009f6e:	3718      	adds	r7, #24
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	20000c80 	.word	0x20000c80

08009f78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b086      	sub	sp, #24
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10b      	bne.n	8009fa6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	60fb      	str	r3, [r7, #12]
}
 8009fa0:	bf00      	nop
 8009fa2:	bf00      	nop
 8009fa4:	e7fd      	b.n	8009fa2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	3318      	adds	r3, #24
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fe fe56 	bl	8008c5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fb0:	4b1d      	ldr	r3, [pc, #116]	@ (800a028 <xTaskRemoveFromEventList+0xb0>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d11d      	bne.n	8009ff4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	3304      	adds	r3, #4
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7fe fe4d 	bl	8008c5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fc6:	4b19      	ldr	r3, [pc, #100]	@ (800a02c <xTaskRemoveFromEventList+0xb4>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d903      	bls.n	8009fd6 <xTaskRemoveFromEventList+0x5e>
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd2:	4a16      	ldr	r2, [pc, #88]	@ (800a02c <xTaskRemoveFromEventList+0xb4>)
 8009fd4:	6013      	str	r3, [r2, #0]
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fda:	4613      	mov	r3, r2
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	4413      	add	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4a13      	ldr	r2, [pc, #76]	@ (800a030 <xTaskRemoveFromEventList+0xb8>)
 8009fe4:	441a      	add	r2, r3
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	3304      	adds	r3, #4
 8009fea:	4619      	mov	r1, r3
 8009fec:	4610      	mov	r0, r2
 8009fee:	f7fe fdd8 	bl	8008ba2 <vListInsertEnd>
 8009ff2:	e005      	b.n	800a000 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	3318      	adds	r3, #24
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	480e      	ldr	r0, [pc, #56]	@ (800a034 <xTaskRemoveFromEventList+0xbc>)
 8009ffc:	f7fe fdd1 	bl	8008ba2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a004:	4b0c      	ldr	r3, [pc, #48]	@ (800a038 <xTaskRemoveFromEventList+0xc0>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d905      	bls.n	800a01a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a00e:	2301      	movs	r3, #1
 800a010:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a012:	4b0a      	ldr	r3, [pc, #40]	@ (800a03c <xTaskRemoveFromEventList+0xc4>)
 800a014:	2201      	movs	r2, #1
 800a016:	601a      	str	r2, [r3, #0]
 800a018:	e001      	b.n	800a01e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a01a:	2300      	movs	r3, #0
 800a01c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a01e:	697b      	ldr	r3, [r7, #20]
}
 800a020:	4618      	mov	r0, r3
 800a022:	3718      	adds	r7, #24
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	2000117c 	.word	0x2000117c
 800a02c:	2000115c 	.word	0x2000115c
 800a030:	20000c84 	.word	0x20000c84
 800a034:	20001114 	.word	0x20001114
 800a038:	20000c80 	.word	0x20000c80
 800a03c:	20001168 	.word	0x20001168

0800a040 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a040:	b480      	push	{r7}
 800a042:	b083      	sub	sp, #12
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a048:	4b06      	ldr	r3, [pc, #24]	@ (800a064 <vTaskInternalSetTimeOutState+0x24>)
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a050:	4b05      	ldr	r3, [pc, #20]	@ (800a068 <vTaskInternalSetTimeOutState+0x28>)
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	605a      	str	r2, [r3, #4]
}
 800a058:	bf00      	nop
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr
 800a064:	2000116c 	.word	0x2000116c
 800a068:	20001158 	.word	0x20001158

0800a06c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b088      	sub	sp, #32
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d10b      	bne.n	800a094 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a07c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	613b      	str	r3, [r7, #16]
}
 800a08e:	bf00      	nop
 800a090:	bf00      	nop
 800a092:	e7fd      	b.n	800a090 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d10b      	bne.n	800a0b2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a09a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a09e:	f383 8811 	msr	BASEPRI, r3
 800a0a2:	f3bf 8f6f 	isb	sy
 800a0a6:	f3bf 8f4f 	dsb	sy
 800a0aa:	60fb      	str	r3, [r7, #12]
}
 800a0ac:	bf00      	nop
 800a0ae:	bf00      	nop
 800a0b0:	e7fd      	b.n	800a0ae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a0b2:	f000 fe91 	bl	800add8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a0b6:	4b1d      	ldr	r3, [pc, #116]	@ (800a12c <xTaskCheckForTimeOut+0xc0>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	69ba      	ldr	r2, [r7, #24]
 800a0c2:	1ad3      	subs	r3, r2, r3
 800a0c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ce:	d102      	bne.n	800a0d6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	61fb      	str	r3, [r7, #28]
 800a0d4:	e023      	b.n	800a11e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	4b15      	ldr	r3, [pc, #84]	@ (800a130 <xTaskCheckForTimeOut+0xc4>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d007      	beq.n	800a0f2 <xTaskCheckForTimeOut+0x86>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	69ba      	ldr	r2, [r7, #24]
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d302      	bcc.n	800a0f2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	61fb      	str	r3, [r7, #28]
 800a0f0:	e015      	b.n	800a11e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	697a      	ldr	r2, [r7, #20]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d20b      	bcs.n	800a114 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	1ad2      	subs	r2, r2, r3
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f7ff ff99 	bl	800a040 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a10e:	2300      	movs	r3, #0
 800a110:	61fb      	str	r3, [r7, #28]
 800a112:	e004      	b.n	800a11e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	2200      	movs	r2, #0
 800a118:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a11a:	2301      	movs	r3, #1
 800a11c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a11e:	f000 fe8d 	bl	800ae3c <vPortExitCritical>

	return xReturn;
 800a122:	69fb      	ldr	r3, [r7, #28]
}
 800a124:	4618      	mov	r0, r3
 800a126:	3720      	adds	r7, #32
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	20001158 	.word	0x20001158
 800a130:	2000116c 	.word	0x2000116c

0800a134 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a134:	b480      	push	{r7}
 800a136:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a138:	4b03      	ldr	r3, [pc, #12]	@ (800a148 <vTaskMissedYield+0x14>)
 800a13a:	2201      	movs	r2, #1
 800a13c:	601a      	str	r2, [r3, #0]
}
 800a13e:	bf00      	nop
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr
 800a148:	20001168 	.word	0x20001168

0800a14c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a154:	f000 f852 	bl	800a1fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a158:	4b06      	ldr	r3, [pc, #24]	@ (800a174 <prvIdleTask+0x28>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d9f9      	bls.n	800a154 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a160:	4b05      	ldr	r3, [pc, #20]	@ (800a178 <prvIdleTask+0x2c>)
 800a162:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a166:	601a      	str	r2, [r3, #0]
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a170:	e7f0      	b.n	800a154 <prvIdleTask+0x8>
 800a172:	bf00      	nop
 800a174:	20000c84 	.word	0x20000c84
 800a178:	e000ed04 	.word	0xe000ed04

0800a17c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a182:	2300      	movs	r3, #0
 800a184:	607b      	str	r3, [r7, #4]
 800a186:	e00c      	b.n	800a1a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a188:	687a      	ldr	r2, [r7, #4]
 800a18a:	4613      	mov	r3, r2
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	4413      	add	r3, r2
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	4a12      	ldr	r2, [pc, #72]	@ (800a1dc <prvInitialiseTaskLists+0x60>)
 800a194:	4413      	add	r3, r2
 800a196:	4618      	mov	r0, r3
 800a198:	f7fe fcd6 	bl	8008b48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	607b      	str	r3, [r7, #4]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2b37      	cmp	r3, #55	@ 0x37
 800a1a6:	d9ef      	bls.n	800a188 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a1a8:	480d      	ldr	r0, [pc, #52]	@ (800a1e0 <prvInitialiseTaskLists+0x64>)
 800a1aa:	f7fe fccd 	bl	8008b48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a1ae:	480d      	ldr	r0, [pc, #52]	@ (800a1e4 <prvInitialiseTaskLists+0x68>)
 800a1b0:	f7fe fcca 	bl	8008b48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a1b4:	480c      	ldr	r0, [pc, #48]	@ (800a1e8 <prvInitialiseTaskLists+0x6c>)
 800a1b6:	f7fe fcc7 	bl	8008b48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a1ba:	480c      	ldr	r0, [pc, #48]	@ (800a1ec <prvInitialiseTaskLists+0x70>)
 800a1bc:	f7fe fcc4 	bl	8008b48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a1c0:	480b      	ldr	r0, [pc, #44]	@ (800a1f0 <prvInitialiseTaskLists+0x74>)
 800a1c2:	f7fe fcc1 	bl	8008b48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a1c6:	4b0b      	ldr	r3, [pc, #44]	@ (800a1f4 <prvInitialiseTaskLists+0x78>)
 800a1c8:	4a05      	ldr	r2, [pc, #20]	@ (800a1e0 <prvInitialiseTaskLists+0x64>)
 800a1ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a1cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a1f8 <prvInitialiseTaskLists+0x7c>)
 800a1ce:	4a05      	ldr	r2, [pc, #20]	@ (800a1e4 <prvInitialiseTaskLists+0x68>)
 800a1d0:	601a      	str	r2, [r3, #0]
}
 800a1d2:	bf00      	nop
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	20000c84 	.word	0x20000c84
 800a1e0:	200010e4 	.word	0x200010e4
 800a1e4:	200010f8 	.word	0x200010f8
 800a1e8:	20001114 	.word	0x20001114
 800a1ec:	20001128 	.word	0x20001128
 800a1f0:	20001140 	.word	0x20001140
 800a1f4:	2000110c 	.word	0x2000110c
 800a1f8:	20001110 	.word	0x20001110

0800a1fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a202:	e019      	b.n	800a238 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a204:	f000 fde8 	bl	800add8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a208:	4b10      	ldr	r3, [pc, #64]	@ (800a24c <prvCheckTasksWaitingTermination+0x50>)
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	3304      	adds	r3, #4
 800a214:	4618      	mov	r0, r3
 800a216:	f7fe fd21 	bl	8008c5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a21a:	4b0d      	ldr	r3, [pc, #52]	@ (800a250 <prvCheckTasksWaitingTermination+0x54>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	3b01      	subs	r3, #1
 800a220:	4a0b      	ldr	r2, [pc, #44]	@ (800a250 <prvCheckTasksWaitingTermination+0x54>)
 800a222:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a224:	4b0b      	ldr	r3, [pc, #44]	@ (800a254 <prvCheckTasksWaitingTermination+0x58>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	3b01      	subs	r3, #1
 800a22a:	4a0a      	ldr	r2, [pc, #40]	@ (800a254 <prvCheckTasksWaitingTermination+0x58>)
 800a22c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a22e:	f000 fe05 	bl	800ae3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 f810 	bl	800a258 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a238:	4b06      	ldr	r3, [pc, #24]	@ (800a254 <prvCheckTasksWaitingTermination+0x58>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d1e1      	bne.n	800a204 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a240:	bf00      	nop
 800a242:	bf00      	nop
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	20001128 	.word	0x20001128
 800a250:	20001154 	.word	0x20001154
 800a254:	2000113c 	.word	0x2000113c

0800a258 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a266:	2b00      	cmp	r3, #0
 800a268:	d108      	bne.n	800a27c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a26e:	4618      	mov	r0, r3
 800a270:	f000 ffa2 	bl	800b1b8 <vPortFree>
				vPortFree( pxTCB );
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 ff9f 	bl	800b1b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a27a:	e019      	b.n	800a2b0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a282:	2b01      	cmp	r3, #1
 800a284:	d103      	bne.n	800a28e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 ff96 	bl	800b1b8 <vPortFree>
	}
 800a28c:	e010      	b.n	800a2b0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a294:	2b02      	cmp	r3, #2
 800a296:	d00b      	beq.n	800a2b0 <prvDeleteTCB+0x58>
	__asm volatile
 800a298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a29c:	f383 8811 	msr	BASEPRI, r3
 800a2a0:	f3bf 8f6f 	isb	sy
 800a2a4:	f3bf 8f4f 	dsb	sy
 800a2a8:	60fb      	str	r3, [r7, #12]
}
 800a2aa:	bf00      	nop
 800a2ac:	bf00      	nop
 800a2ae:	e7fd      	b.n	800a2ac <prvDeleteTCB+0x54>
	}
 800a2b0:	bf00      	nop
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2be:	4b0c      	ldr	r3, [pc, #48]	@ (800a2f0 <prvResetNextTaskUnblockTime+0x38>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d104      	bne.n	800a2d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a2c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a2f4 <prvResetNextTaskUnblockTime+0x3c>)
 800a2ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a2ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a2d0:	e008      	b.n	800a2e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2d2:	4b07      	ldr	r3, [pc, #28]	@ (800a2f0 <prvResetNextTaskUnblockTime+0x38>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	4a04      	ldr	r2, [pc, #16]	@ (800a2f4 <prvResetNextTaskUnblockTime+0x3c>)
 800a2e2:	6013      	str	r3, [r2, #0]
}
 800a2e4:	bf00      	nop
 800a2e6:	370c      	adds	r7, #12
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr
 800a2f0:	2000110c 	.word	0x2000110c
 800a2f4:	20001174 	.word	0x20001174

0800a2f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a2fe:	4b0b      	ldr	r3, [pc, #44]	@ (800a32c <xTaskGetSchedulerState+0x34>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d102      	bne.n	800a30c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a306:	2301      	movs	r3, #1
 800a308:	607b      	str	r3, [r7, #4]
 800a30a:	e008      	b.n	800a31e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a30c:	4b08      	ldr	r3, [pc, #32]	@ (800a330 <xTaskGetSchedulerState+0x38>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d102      	bne.n	800a31a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a314:	2302      	movs	r3, #2
 800a316:	607b      	str	r3, [r7, #4]
 800a318:	e001      	b.n	800a31e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a31a:	2300      	movs	r3, #0
 800a31c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a31e:	687b      	ldr	r3, [r7, #4]
	}
 800a320:	4618      	mov	r0, r3
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr
 800a32c:	20001160 	.word	0x20001160
 800a330:	2000117c 	.word	0x2000117c

0800a334 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a334:	b580      	push	{r7, lr}
 800a336:	b086      	sub	sp, #24
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a340:	2300      	movs	r3, #0
 800a342:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d058      	beq.n	800a3fc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a34a:	4b2f      	ldr	r3, [pc, #188]	@ (800a408 <xTaskPriorityDisinherit+0xd4>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	693a      	ldr	r2, [r7, #16]
 800a350:	429a      	cmp	r2, r3
 800a352:	d00b      	beq.n	800a36c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	60fb      	str	r3, [r7, #12]
}
 800a366:	bf00      	nop
 800a368:	bf00      	nop
 800a36a:	e7fd      	b.n	800a368 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a370:	2b00      	cmp	r3, #0
 800a372:	d10b      	bne.n	800a38c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a378:	f383 8811 	msr	BASEPRI, r3
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	60bb      	str	r3, [r7, #8]
}
 800a386:	bf00      	nop
 800a388:	bf00      	nop
 800a38a:	e7fd      	b.n	800a388 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a390:	1e5a      	subs	r2, r3, #1
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d02c      	beq.n	800a3fc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d128      	bne.n	800a3fc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	3304      	adds	r3, #4
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f7fe fc54 	bl	8008c5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3cc:	4b0f      	ldr	r3, [pc, #60]	@ (800a40c <xTaskPriorityDisinherit+0xd8>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d903      	bls.n	800a3dc <xTaskPriorityDisinherit+0xa8>
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3d8:	4a0c      	ldr	r2, [pc, #48]	@ (800a40c <xTaskPriorityDisinherit+0xd8>)
 800a3da:	6013      	str	r3, [r2, #0]
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3e0:	4613      	mov	r3, r2
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	4413      	add	r3, r2
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	4a09      	ldr	r2, [pc, #36]	@ (800a410 <xTaskPriorityDisinherit+0xdc>)
 800a3ea:	441a      	add	r2, r3
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	3304      	adds	r3, #4
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	4610      	mov	r0, r2
 800a3f4:	f7fe fbd5 	bl	8008ba2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a3fc:	697b      	ldr	r3, [r7, #20]
	}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3718      	adds	r7, #24
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	20000c80 	.word	0x20000c80
 800a40c:	2000115c 	.word	0x2000115c
 800a410:	20000c84 	.word	0x20000c84

0800a414 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b084      	sub	sp, #16
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a41e:	4b21      	ldr	r3, [pc, #132]	@ (800a4a4 <prvAddCurrentTaskToDelayedList+0x90>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a424:	4b20      	ldr	r3, [pc, #128]	@ (800a4a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	3304      	adds	r3, #4
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fe fc16 	bl	8008c5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a436:	d10a      	bne.n	800a44e <prvAddCurrentTaskToDelayedList+0x3a>
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d007      	beq.n	800a44e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a43e:	4b1a      	ldr	r3, [pc, #104]	@ (800a4a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	3304      	adds	r3, #4
 800a444:	4619      	mov	r1, r3
 800a446:	4819      	ldr	r0, [pc, #100]	@ (800a4ac <prvAddCurrentTaskToDelayedList+0x98>)
 800a448:	f7fe fbab 	bl	8008ba2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a44c:	e026      	b.n	800a49c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4413      	add	r3, r2
 800a454:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a456:	4b14      	ldr	r3, [pc, #80]	@ (800a4a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	429a      	cmp	r2, r3
 800a464:	d209      	bcs.n	800a47a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a466:	4b12      	ldr	r3, [pc, #72]	@ (800a4b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	4b0f      	ldr	r3, [pc, #60]	@ (800a4a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	3304      	adds	r3, #4
 800a470:	4619      	mov	r1, r3
 800a472:	4610      	mov	r0, r2
 800a474:	f7fe fbb9 	bl	8008bea <vListInsert>
}
 800a478:	e010      	b.n	800a49c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a47a:	4b0e      	ldr	r3, [pc, #56]	@ (800a4b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	4b0a      	ldr	r3, [pc, #40]	@ (800a4a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	3304      	adds	r3, #4
 800a484:	4619      	mov	r1, r3
 800a486:	4610      	mov	r0, r2
 800a488:	f7fe fbaf 	bl	8008bea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a48c:	4b0a      	ldr	r3, [pc, #40]	@ (800a4b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	68ba      	ldr	r2, [r7, #8]
 800a492:	429a      	cmp	r2, r3
 800a494:	d202      	bcs.n	800a49c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a496:	4a08      	ldr	r2, [pc, #32]	@ (800a4b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	6013      	str	r3, [r2, #0]
}
 800a49c:	bf00      	nop
 800a49e:	3710      	adds	r7, #16
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	20001158 	.word	0x20001158
 800a4a8:	20000c80 	.word	0x20000c80
 800a4ac:	20001140 	.word	0x20001140
 800a4b0:	20001110 	.word	0x20001110
 800a4b4:	2000110c 	.word	0x2000110c
 800a4b8:	20001174 	.word	0x20001174

0800a4bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b08a      	sub	sp, #40	@ 0x28
 800a4c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a4c6:	f000 fb13 	bl	800aaf0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a4ca:	4b1d      	ldr	r3, [pc, #116]	@ (800a540 <xTimerCreateTimerTask+0x84>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d021      	beq.n	800a516 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a4da:	1d3a      	adds	r2, r7, #4
 800a4dc:	f107 0108 	add.w	r1, r7, #8
 800a4e0:	f107 030c 	add.w	r3, r7, #12
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f7fe fb15 	bl	8008b14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a4ea:	6879      	ldr	r1, [r7, #4]
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	9202      	str	r2, [sp, #8]
 800a4f2:	9301      	str	r3, [sp, #4]
 800a4f4:	2302      	movs	r3, #2
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	460a      	mov	r2, r1
 800a4fc:	4911      	ldr	r1, [pc, #68]	@ (800a544 <xTimerCreateTimerTask+0x88>)
 800a4fe:	4812      	ldr	r0, [pc, #72]	@ (800a548 <xTimerCreateTimerTask+0x8c>)
 800a500:	f7ff f8d0 	bl	80096a4 <xTaskCreateStatic>
 800a504:	4603      	mov	r3, r0
 800a506:	4a11      	ldr	r2, [pc, #68]	@ (800a54c <xTimerCreateTimerTask+0x90>)
 800a508:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a50a:	4b10      	ldr	r3, [pc, #64]	@ (800a54c <xTimerCreateTimerTask+0x90>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d001      	beq.n	800a516 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a512:	2301      	movs	r3, #1
 800a514:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10b      	bne.n	800a534 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a520:	f383 8811 	msr	BASEPRI, r3
 800a524:	f3bf 8f6f 	isb	sy
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	613b      	str	r3, [r7, #16]
}
 800a52e:	bf00      	nop
 800a530:	bf00      	nop
 800a532:	e7fd      	b.n	800a530 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a534:	697b      	ldr	r3, [r7, #20]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3718      	adds	r7, #24
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	200011b0 	.word	0x200011b0
 800a544:	0800e674 	.word	0x0800e674
 800a548:	0800a689 	.word	0x0800a689
 800a54c:	200011b4 	.word	0x200011b4

0800a550 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b08a      	sub	sp, #40	@ 0x28
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
 800a55c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a55e:	2300      	movs	r3, #0
 800a560:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d10b      	bne.n	800a580 <xTimerGenericCommand+0x30>
	__asm volatile
 800a568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a56c:	f383 8811 	msr	BASEPRI, r3
 800a570:	f3bf 8f6f 	isb	sy
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	623b      	str	r3, [r7, #32]
}
 800a57a:	bf00      	nop
 800a57c:	bf00      	nop
 800a57e:	e7fd      	b.n	800a57c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a580:	4b19      	ldr	r3, [pc, #100]	@ (800a5e8 <xTimerGenericCommand+0x98>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d02a      	beq.n	800a5de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	2b05      	cmp	r3, #5
 800a598:	dc18      	bgt.n	800a5cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a59a:	f7ff fead 	bl	800a2f8 <xTaskGetSchedulerState>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b02      	cmp	r3, #2
 800a5a2:	d109      	bne.n	800a5b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a5a4:	4b10      	ldr	r3, [pc, #64]	@ (800a5e8 <xTimerGenericCommand+0x98>)
 800a5a6:	6818      	ldr	r0, [r3, #0]
 800a5a8:	f107 0110 	add.w	r1, r7, #16
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5b0:	f7fe fc88 	bl	8008ec4 <xQueueGenericSend>
 800a5b4:	6278      	str	r0, [r7, #36]	@ 0x24
 800a5b6:	e012      	b.n	800a5de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a5b8:	4b0b      	ldr	r3, [pc, #44]	@ (800a5e8 <xTimerGenericCommand+0x98>)
 800a5ba:	6818      	ldr	r0, [r3, #0]
 800a5bc:	f107 0110 	add.w	r1, r7, #16
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f7fe fc7e 	bl	8008ec4 <xQueueGenericSend>
 800a5c8:	6278      	str	r0, [r7, #36]	@ 0x24
 800a5ca:	e008      	b.n	800a5de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a5cc:	4b06      	ldr	r3, [pc, #24]	@ (800a5e8 <xTimerGenericCommand+0x98>)
 800a5ce:	6818      	ldr	r0, [r3, #0]
 800a5d0:	f107 0110 	add.w	r1, r7, #16
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	683a      	ldr	r2, [r7, #0]
 800a5d8:	f7fe fd76 	bl	80090c8 <xQueueGenericSendFromISR>
 800a5dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3728      	adds	r7, #40	@ 0x28
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	200011b0 	.word	0x200011b0

0800a5ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b088      	sub	sp, #32
 800a5f0:	af02      	add	r7, sp, #8
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5f6:	4b23      	ldr	r3, [pc, #140]	@ (800a684 <prvProcessExpiredTimer+0x98>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	68db      	ldr	r3, [r3, #12]
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	3304      	adds	r3, #4
 800a604:	4618      	mov	r0, r3
 800a606:	f7fe fb29 	bl	8008c5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a610:	f003 0304 	and.w	r3, r3, #4
 800a614:	2b00      	cmp	r3, #0
 800a616:	d023      	beq.n	800a660 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	699a      	ldr	r2, [r3, #24]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	18d1      	adds	r1, r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	683a      	ldr	r2, [r7, #0]
 800a624:	6978      	ldr	r0, [r7, #20]
 800a626:	f000 f8d5 	bl	800a7d4 <prvInsertTimerInActiveList>
 800a62a:	4603      	mov	r3, r0
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d020      	beq.n	800a672 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a630:	2300      	movs	r3, #0
 800a632:	9300      	str	r3, [sp, #0]
 800a634:	2300      	movs	r3, #0
 800a636:	687a      	ldr	r2, [r7, #4]
 800a638:	2100      	movs	r1, #0
 800a63a:	6978      	ldr	r0, [r7, #20]
 800a63c:	f7ff ff88 	bl	800a550 <xTimerGenericCommand>
 800a640:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d114      	bne.n	800a672 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a64c:	f383 8811 	msr	BASEPRI, r3
 800a650:	f3bf 8f6f 	isb	sy
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	60fb      	str	r3, [r7, #12]
}
 800a65a:	bf00      	nop
 800a65c:	bf00      	nop
 800a65e:	e7fd      	b.n	800a65c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a666:	f023 0301 	bic.w	r3, r3, #1
 800a66a:	b2da      	uxtb	r2, r3
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	6a1b      	ldr	r3, [r3, #32]
 800a676:	6978      	ldr	r0, [r7, #20]
 800a678:	4798      	blx	r3
}
 800a67a:	bf00      	nop
 800a67c:	3718      	adds	r7, #24
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	200011a8 	.word	0x200011a8

0800a688 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a690:	f107 0308 	add.w	r3, r7, #8
 800a694:	4618      	mov	r0, r3
 800a696:	f000 f859 	bl	800a74c <prvGetNextExpireTime>
 800a69a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	4619      	mov	r1, r3
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	f000 f805 	bl	800a6b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a6a6:	f000 f8d7 	bl	800a858 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a6aa:	bf00      	nop
 800a6ac:	e7f0      	b.n	800a690 <prvTimerTask+0x8>
	...

0800a6b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a6ba:	f7ff fa37 	bl	8009b2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a6be:	f107 0308 	add.w	r3, r7, #8
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f000 f866 	bl	800a794 <prvSampleTimeNow>
 800a6c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d130      	bne.n	800a732 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d10a      	bne.n	800a6ec <prvProcessTimerOrBlockTask+0x3c>
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d806      	bhi.n	800a6ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a6de:	f7ff fa33 	bl	8009b48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a6e2:	68f9      	ldr	r1, [r7, #12]
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f7ff ff81 	bl	800a5ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a6ea:	e024      	b.n	800a736 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d008      	beq.n	800a704 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a6f2:	4b13      	ldr	r3, [pc, #76]	@ (800a740 <prvProcessTimerOrBlockTask+0x90>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d101      	bne.n	800a700 <prvProcessTimerOrBlockTask+0x50>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e000      	b.n	800a702 <prvProcessTimerOrBlockTask+0x52>
 800a700:	2300      	movs	r3, #0
 800a702:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a704:	4b0f      	ldr	r3, [pc, #60]	@ (800a744 <prvProcessTimerOrBlockTask+0x94>)
 800a706:	6818      	ldr	r0, [r3, #0]
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	1ad3      	subs	r3, r2, r3
 800a70e:	683a      	ldr	r2, [r7, #0]
 800a710:	4619      	mov	r1, r3
 800a712:	f7fe ff93 	bl	800963c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a716:	f7ff fa17 	bl	8009b48 <xTaskResumeAll>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d10a      	bne.n	800a736 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a720:	4b09      	ldr	r3, [pc, #36]	@ (800a748 <prvProcessTimerOrBlockTask+0x98>)
 800a722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a726:	601a      	str	r2, [r3, #0]
 800a728:	f3bf 8f4f 	dsb	sy
 800a72c:	f3bf 8f6f 	isb	sy
}
 800a730:	e001      	b.n	800a736 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a732:	f7ff fa09 	bl	8009b48 <xTaskResumeAll>
}
 800a736:	bf00      	nop
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	200011ac 	.word	0x200011ac
 800a744:	200011b0 	.word	0x200011b0
 800a748:	e000ed04 	.word	0xe000ed04

0800a74c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a754:	4b0e      	ldr	r3, [pc, #56]	@ (800a790 <prvGetNextExpireTime+0x44>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d101      	bne.n	800a762 <prvGetNextExpireTime+0x16>
 800a75e:	2201      	movs	r2, #1
 800a760:	e000      	b.n	800a764 <prvGetNextExpireTime+0x18>
 800a762:	2200      	movs	r2, #0
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d105      	bne.n	800a77c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a770:	4b07      	ldr	r3, [pc, #28]	@ (800a790 <prvGetNextExpireTime+0x44>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	60fb      	str	r3, [r7, #12]
 800a77a:	e001      	b.n	800a780 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a77c:	2300      	movs	r3, #0
 800a77e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a780:	68fb      	ldr	r3, [r7, #12]
}
 800a782:	4618      	mov	r0, r3
 800a784:	3714      	adds	r7, #20
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	200011a8 	.word	0x200011a8

0800a794 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a79c:	f7ff fa72 	bl	8009c84 <xTaskGetTickCount>
 800a7a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a7a2:	4b0b      	ldr	r3, [pc, #44]	@ (800a7d0 <prvSampleTimeNow+0x3c>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	429a      	cmp	r2, r3
 800a7aa:	d205      	bcs.n	800a7b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a7ac:	f000 f93a 	bl	800aa24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	601a      	str	r2, [r3, #0]
 800a7b6:	e002      	b.n	800a7be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a7be:	4a04      	ldr	r2, [pc, #16]	@ (800a7d0 <prvSampleTimeNow+0x3c>)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	200011b8 	.word	0x200011b8

0800a7d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
 800a7e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	68ba      	ldr	r2, [r7, #8]
 800a7ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a7f2:	68ba      	ldr	r2, [r7, #8]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d812      	bhi.n	800a820 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	1ad2      	subs	r2, r2, r3
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	699b      	ldr	r3, [r3, #24]
 800a804:	429a      	cmp	r2, r3
 800a806:	d302      	bcc.n	800a80e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a808:	2301      	movs	r3, #1
 800a80a:	617b      	str	r3, [r7, #20]
 800a80c:	e01b      	b.n	800a846 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a80e:	4b10      	ldr	r3, [pc, #64]	@ (800a850 <prvInsertTimerInActiveList+0x7c>)
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	3304      	adds	r3, #4
 800a816:	4619      	mov	r1, r3
 800a818:	4610      	mov	r0, r2
 800a81a:	f7fe f9e6 	bl	8008bea <vListInsert>
 800a81e:	e012      	b.n	800a846 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	429a      	cmp	r2, r3
 800a826:	d206      	bcs.n	800a836 <prvInsertTimerInActiveList+0x62>
 800a828:	68ba      	ldr	r2, [r7, #8]
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d302      	bcc.n	800a836 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a830:	2301      	movs	r3, #1
 800a832:	617b      	str	r3, [r7, #20]
 800a834:	e007      	b.n	800a846 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a836:	4b07      	ldr	r3, [pc, #28]	@ (800a854 <prvInsertTimerInActiveList+0x80>)
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	3304      	adds	r3, #4
 800a83e:	4619      	mov	r1, r3
 800a840:	4610      	mov	r0, r2
 800a842:	f7fe f9d2 	bl	8008bea <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a846:	697b      	ldr	r3, [r7, #20]
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3718      	adds	r7, #24
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	200011ac 	.word	0x200011ac
 800a854:	200011a8 	.word	0x200011a8

0800a858 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b08e      	sub	sp, #56	@ 0x38
 800a85c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a85e:	e0ce      	b.n	800a9fe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	da19      	bge.n	800a89a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a866:	1d3b      	adds	r3, r7, #4
 800a868:	3304      	adds	r3, #4
 800a86a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d10b      	bne.n	800a88a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a876:	f383 8811 	msr	BASEPRI, r3
 800a87a:	f3bf 8f6f 	isb	sy
 800a87e:	f3bf 8f4f 	dsb	sy
 800a882:	61fb      	str	r3, [r7, #28]
}
 800a884:	bf00      	nop
 800a886:	bf00      	nop
 800a888:	e7fd      	b.n	800a886 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a890:	6850      	ldr	r0, [r2, #4]
 800a892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a894:	6892      	ldr	r2, [r2, #8]
 800a896:	4611      	mov	r1, r2
 800a898:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f2c0 80ae 	blt.w	800a9fe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a8a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8a8:	695b      	ldr	r3, [r3, #20]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d004      	beq.n	800a8b8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8b0:	3304      	adds	r3, #4
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7fe f9d2 	bl	8008c5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a8b8:	463b      	mov	r3, r7
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7ff ff6a 	bl	800a794 <prvSampleTimeNow>
 800a8c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2b09      	cmp	r3, #9
 800a8c6:	f200 8097 	bhi.w	800a9f8 <prvProcessReceivedCommands+0x1a0>
 800a8ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a8d0 <prvProcessReceivedCommands+0x78>)
 800a8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d0:	0800a8f9 	.word	0x0800a8f9
 800a8d4:	0800a8f9 	.word	0x0800a8f9
 800a8d8:	0800a8f9 	.word	0x0800a8f9
 800a8dc:	0800a96f 	.word	0x0800a96f
 800a8e0:	0800a983 	.word	0x0800a983
 800a8e4:	0800a9cf 	.word	0x0800a9cf
 800a8e8:	0800a8f9 	.word	0x0800a8f9
 800a8ec:	0800a8f9 	.word	0x0800a8f9
 800a8f0:	0800a96f 	.word	0x0800a96f
 800a8f4:	0800a983 	.word	0x0800a983
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8fe:	f043 0301 	orr.w	r3, r3, #1
 800a902:	b2da      	uxtb	r2, r3
 800a904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a906:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a90a:	68ba      	ldr	r2, [r7, #8]
 800a90c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a90e:	699b      	ldr	r3, [r3, #24]
 800a910:	18d1      	adds	r1, r2, r3
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a916:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a918:	f7ff ff5c 	bl	800a7d4 <prvInsertTimerInActiveList>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d06c      	beq.n	800a9fc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a924:	6a1b      	ldr	r3, [r3, #32]
 800a926:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a928:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a92a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a92c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a930:	f003 0304 	and.w	r3, r3, #4
 800a934:	2b00      	cmp	r3, #0
 800a936:	d061      	beq.n	800a9fc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a938:	68ba      	ldr	r2, [r7, #8]
 800a93a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	441a      	add	r2, r3
 800a940:	2300      	movs	r3, #0
 800a942:	9300      	str	r3, [sp, #0]
 800a944:	2300      	movs	r3, #0
 800a946:	2100      	movs	r1, #0
 800a948:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a94a:	f7ff fe01 	bl	800a550 <xTimerGenericCommand>
 800a94e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a950:	6a3b      	ldr	r3, [r7, #32]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d152      	bne.n	800a9fc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a95a:	f383 8811 	msr	BASEPRI, r3
 800a95e:	f3bf 8f6f 	isb	sy
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	61bb      	str	r3, [r7, #24]
}
 800a968:	bf00      	nop
 800a96a:	bf00      	nop
 800a96c:	e7fd      	b.n	800a96a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a96e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a970:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a974:	f023 0301 	bic.w	r3, r3, #1
 800a978:	b2da      	uxtb	r2, r3
 800a97a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a97c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a980:	e03d      	b.n	800a9fe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a984:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a988:	f043 0301 	orr.w	r3, r3, #1
 800a98c:	b2da      	uxtb	r2, r3
 800a98e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a990:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a994:	68ba      	ldr	r2, [r7, #8]
 800a996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a998:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a99a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a99c:	699b      	ldr	r3, [r3, #24]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10b      	bne.n	800a9ba <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a9a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a6:	f383 8811 	msr	BASEPRI, r3
 800a9aa:	f3bf 8f6f 	isb	sy
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	617b      	str	r3, [r7, #20]
}
 800a9b4:	bf00      	nop
 800a9b6:	bf00      	nop
 800a9b8:	e7fd      	b.n	800a9b6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a9ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9bc:	699a      	ldr	r2, [r3, #24]
 800a9be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c0:	18d1      	adds	r1, r2, r3
 800a9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9c8:	f7ff ff04 	bl	800a7d4 <prvInsertTimerInActiveList>
					break;
 800a9cc:	e017      	b.n	800a9fe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a9ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a9d4:	f003 0302 	and.w	r3, r3, #2
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d103      	bne.n	800a9e4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a9dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9de:	f000 fbeb 	bl	800b1b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a9e2:	e00c      	b.n	800a9fe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a9ea:	f023 0301 	bic.w	r3, r3, #1
 800a9ee:	b2da      	uxtb	r2, r3
 800a9f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a9f6:	e002      	b.n	800a9fe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a9f8:	bf00      	nop
 800a9fa:	e000      	b.n	800a9fe <prvProcessReceivedCommands+0x1a6>
					break;
 800a9fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a9fe:	4b08      	ldr	r3, [pc, #32]	@ (800aa20 <prvProcessReceivedCommands+0x1c8>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	1d39      	adds	r1, r7, #4
 800aa04:	2200      	movs	r2, #0
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7fe fbfc 	bl	8009204 <xQueueReceive>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	f47f af26 	bne.w	800a860 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800aa14:	bf00      	nop
 800aa16:	bf00      	nop
 800aa18:	3730      	adds	r7, #48	@ 0x30
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	200011b0 	.word	0x200011b0

0800aa24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b088      	sub	sp, #32
 800aa28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa2a:	e049      	b.n	800aac0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa2c:	4b2e      	ldr	r3, [pc, #184]	@ (800aae8 <prvSwitchTimerLists+0xc4>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa36:	4b2c      	ldr	r3, [pc, #176]	@ (800aae8 <prvSwitchTimerLists+0xc4>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	3304      	adds	r3, #4
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7fe f909 	bl	8008c5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	68f8      	ldr	r0, [r7, #12]
 800aa50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aa58:	f003 0304 	and.w	r3, r3, #4
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d02f      	beq.n	800aac0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	699b      	ldr	r3, [r3, #24]
 800aa64:	693a      	ldr	r2, [r7, #16]
 800aa66:	4413      	add	r3, r2
 800aa68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aa6a:	68ba      	ldr	r2, [r7, #8]
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d90e      	bls.n	800aa90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	68ba      	ldr	r2, [r7, #8]
 800aa76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa7e:	4b1a      	ldr	r3, [pc, #104]	@ (800aae8 <prvSwitchTimerLists+0xc4>)
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	3304      	adds	r3, #4
 800aa86:	4619      	mov	r1, r3
 800aa88:	4610      	mov	r0, r2
 800aa8a:	f7fe f8ae 	bl	8008bea <vListInsert>
 800aa8e:	e017      	b.n	800aac0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa90:	2300      	movs	r3, #0
 800aa92:	9300      	str	r3, [sp, #0]
 800aa94:	2300      	movs	r3, #0
 800aa96:	693a      	ldr	r2, [r7, #16]
 800aa98:	2100      	movs	r1, #0
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f7ff fd58 	bl	800a550 <xTimerGenericCommand>
 800aaa0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d10b      	bne.n	800aac0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800aaa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaac:	f383 8811 	msr	BASEPRI, r3
 800aab0:	f3bf 8f6f 	isb	sy
 800aab4:	f3bf 8f4f 	dsb	sy
 800aab8:	603b      	str	r3, [r7, #0]
}
 800aaba:	bf00      	nop
 800aabc:	bf00      	nop
 800aabe:	e7fd      	b.n	800aabc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aac0:	4b09      	ldr	r3, [pc, #36]	@ (800aae8 <prvSwitchTimerLists+0xc4>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1b0      	bne.n	800aa2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aaca:	4b07      	ldr	r3, [pc, #28]	@ (800aae8 <prvSwitchTimerLists+0xc4>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aad0:	4b06      	ldr	r3, [pc, #24]	@ (800aaec <prvSwitchTimerLists+0xc8>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a04      	ldr	r2, [pc, #16]	@ (800aae8 <prvSwitchTimerLists+0xc4>)
 800aad6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aad8:	4a04      	ldr	r2, [pc, #16]	@ (800aaec <prvSwitchTimerLists+0xc8>)
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	6013      	str	r3, [r2, #0]
}
 800aade:	bf00      	nop
 800aae0:	3718      	adds	r7, #24
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	200011a8 	.word	0x200011a8
 800aaec:	200011ac 	.word	0x200011ac

0800aaf0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aaf6:	f000 f96f 	bl	800add8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aafa:	4b15      	ldr	r3, [pc, #84]	@ (800ab50 <prvCheckForValidListAndQueue+0x60>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d120      	bne.n	800ab44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ab02:	4814      	ldr	r0, [pc, #80]	@ (800ab54 <prvCheckForValidListAndQueue+0x64>)
 800ab04:	f7fe f820 	bl	8008b48 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ab08:	4813      	ldr	r0, [pc, #76]	@ (800ab58 <prvCheckForValidListAndQueue+0x68>)
 800ab0a:	f7fe f81d 	bl	8008b48 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ab0e:	4b13      	ldr	r3, [pc, #76]	@ (800ab5c <prvCheckForValidListAndQueue+0x6c>)
 800ab10:	4a10      	ldr	r2, [pc, #64]	@ (800ab54 <prvCheckForValidListAndQueue+0x64>)
 800ab12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ab14:	4b12      	ldr	r3, [pc, #72]	@ (800ab60 <prvCheckForValidListAndQueue+0x70>)
 800ab16:	4a10      	ldr	r2, [pc, #64]	@ (800ab58 <prvCheckForValidListAndQueue+0x68>)
 800ab18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	4b11      	ldr	r3, [pc, #68]	@ (800ab64 <prvCheckForValidListAndQueue+0x74>)
 800ab20:	4a11      	ldr	r2, [pc, #68]	@ (800ab68 <prvCheckForValidListAndQueue+0x78>)
 800ab22:	2110      	movs	r1, #16
 800ab24:	200a      	movs	r0, #10
 800ab26:	f7fe f92d 	bl	8008d84 <xQueueGenericCreateStatic>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	4a08      	ldr	r2, [pc, #32]	@ (800ab50 <prvCheckForValidListAndQueue+0x60>)
 800ab2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ab30:	4b07      	ldr	r3, [pc, #28]	@ (800ab50 <prvCheckForValidListAndQueue+0x60>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d005      	beq.n	800ab44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ab38:	4b05      	ldr	r3, [pc, #20]	@ (800ab50 <prvCheckForValidListAndQueue+0x60>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	490b      	ldr	r1, [pc, #44]	@ (800ab6c <prvCheckForValidListAndQueue+0x7c>)
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7fe fd52 	bl	80095e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab44:	f000 f97a 	bl	800ae3c <vPortExitCritical>
}
 800ab48:	bf00      	nop
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	200011b0 	.word	0x200011b0
 800ab54:	20001180 	.word	0x20001180
 800ab58:	20001194 	.word	0x20001194
 800ab5c:	200011a8 	.word	0x200011a8
 800ab60:	200011ac 	.word	0x200011ac
 800ab64:	2000125c 	.word	0x2000125c
 800ab68:	200011bc 	.word	0x200011bc
 800ab6c:	0800e67c 	.word	0x0800e67c

0800ab70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ab70:	b480      	push	{r7}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	3b04      	subs	r3, #4
 800ab80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ab88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	3b04      	subs	r3, #4
 800ab8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	f023 0201 	bic.w	r2, r3, #1
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	3b04      	subs	r3, #4
 800ab9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aba0:	4a0c      	ldr	r2, [pc, #48]	@ (800abd4 <pxPortInitialiseStack+0x64>)
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	3b14      	subs	r3, #20
 800abaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800abac:	687a      	ldr	r2, [r7, #4]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	3b04      	subs	r3, #4
 800abb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f06f 0202 	mvn.w	r2, #2
 800abbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	3b20      	subs	r3, #32
 800abc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800abc6:	68fb      	ldr	r3, [r7, #12]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3714      	adds	r7, #20
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr
 800abd4:	0800abd9 	.word	0x0800abd9

0800abd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800abd8:	b480      	push	{r7}
 800abda:	b085      	sub	sp, #20
 800abdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800abde:	2300      	movs	r3, #0
 800abe0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800abe2:	4b13      	ldr	r3, [pc, #76]	@ (800ac30 <prvTaskExitError+0x58>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abea:	d00b      	beq.n	800ac04 <prvTaskExitError+0x2c>
	__asm volatile
 800abec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abf0:	f383 8811 	msr	BASEPRI, r3
 800abf4:	f3bf 8f6f 	isb	sy
 800abf8:	f3bf 8f4f 	dsb	sy
 800abfc:	60fb      	str	r3, [r7, #12]
}
 800abfe:	bf00      	nop
 800ac00:	bf00      	nop
 800ac02:	e7fd      	b.n	800ac00 <prvTaskExitError+0x28>
	__asm volatile
 800ac04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac08:	f383 8811 	msr	BASEPRI, r3
 800ac0c:	f3bf 8f6f 	isb	sy
 800ac10:	f3bf 8f4f 	dsb	sy
 800ac14:	60bb      	str	r3, [r7, #8]
}
 800ac16:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac18:	bf00      	nop
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d0fc      	beq.n	800ac1a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac20:	bf00      	nop
 800ac22:	bf00      	nop
 800ac24:	3714      	adds	r7, #20
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	20000024 	.word	0x20000024
	...

0800ac40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac40:	4b07      	ldr	r3, [pc, #28]	@ (800ac60 <pxCurrentTCBConst2>)
 800ac42:	6819      	ldr	r1, [r3, #0]
 800ac44:	6808      	ldr	r0, [r1, #0]
 800ac46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac4a:	f380 8809 	msr	PSP, r0
 800ac4e:	f3bf 8f6f 	isb	sy
 800ac52:	f04f 0000 	mov.w	r0, #0
 800ac56:	f380 8811 	msr	BASEPRI, r0
 800ac5a:	4770      	bx	lr
 800ac5c:	f3af 8000 	nop.w

0800ac60 <pxCurrentTCBConst2>:
 800ac60:	20000c80 	.word	0x20000c80
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ac64:	bf00      	nop
 800ac66:	bf00      	nop

0800ac68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ac68:	4808      	ldr	r0, [pc, #32]	@ (800ac8c <prvPortStartFirstTask+0x24>)
 800ac6a:	6800      	ldr	r0, [r0, #0]
 800ac6c:	6800      	ldr	r0, [r0, #0]
 800ac6e:	f380 8808 	msr	MSP, r0
 800ac72:	f04f 0000 	mov.w	r0, #0
 800ac76:	f380 8814 	msr	CONTROL, r0
 800ac7a:	b662      	cpsie	i
 800ac7c:	b661      	cpsie	f
 800ac7e:	f3bf 8f4f 	dsb	sy
 800ac82:	f3bf 8f6f 	isb	sy
 800ac86:	df00      	svc	0
 800ac88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ac8a:	bf00      	nop
 800ac8c:	e000ed08 	.word	0xe000ed08

0800ac90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b086      	sub	sp, #24
 800ac94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ac96:	4b47      	ldr	r3, [pc, #284]	@ (800adb4 <xPortStartScheduler+0x124>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a47      	ldr	r2, [pc, #284]	@ (800adb8 <xPortStartScheduler+0x128>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d10b      	bne.n	800acb8 <xPortStartScheduler+0x28>
	__asm volatile
 800aca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca4:	f383 8811 	msr	BASEPRI, r3
 800aca8:	f3bf 8f6f 	isb	sy
 800acac:	f3bf 8f4f 	dsb	sy
 800acb0:	613b      	str	r3, [r7, #16]
}
 800acb2:	bf00      	nop
 800acb4:	bf00      	nop
 800acb6:	e7fd      	b.n	800acb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800acb8:	4b3e      	ldr	r3, [pc, #248]	@ (800adb4 <xPortStartScheduler+0x124>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a3f      	ldr	r2, [pc, #252]	@ (800adbc <xPortStartScheduler+0x12c>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d10b      	bne.n	800acda <xPortStartScheduler+0x4a>
	__asm volatile
 800acc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc6:	f383 8811 	msr	BASEPRI, r3
 800acca:	f3bf 8f6f 	isb	sy
 800acce:	f3bf 8f4f 	dsb	sy
 800acd2:	60fb      	str	r3, [r7, #12]
}
 800acd4:	bf00      	nop
 800acd6:	bf00      	nop
 800acd8:	e7fd      	b.n	800acd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800acda:	4b39      	ldr	r3, [pc, #228]	@ (800adc0 <xPortStartScheduler+0x130>)
 800acdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	22ff      	movs	r2, #255	@ 0xff
 800acea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800acf4:	78fb      	ldrb	r3, [r7, #3]
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800acfc:	b2da      	uxtb	r2, r3
 800acfe:	4b31      	ldr	r3, [pc, #196]	@ (800adc4 <xPortStartScheduler+0x134>)
 800ad00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad02:	4b31      	ldr	r3, [pc, #196]	@ (800adc8 <xPortStartScheduler+0x138>)
 800ad04:	2207      	movs	r2, #7
 800ad06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad08:	e009      	b.n	800ad1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ad0a:	4b2f      	ldr	r3, [pc, #188]	@ (800adc8 <xPortStartScheduler+0x138>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	3b01      	subs	r3, #1
 800ad10:	4a2d      	ldr	r2, [pc, #180]	@ (800adc8 <xPortStartScheduler+0x138>)
 800ad12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad14:	78fb      	ldrb	r3, [r7, #3]
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	005b      	lsls	r3, r3, #1
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad1e:	78fb      	ldrb	r3, [r7, #3]
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad26:	2b80      	cmp	r3, #128	@ 0x80
 800ad28:	d0ef      	beq.n	800ad0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad2a:	4b27      	ldr	r3, [pc, #156]	@ (800adc8 <xPortStartScheduler+0x138>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f1c3 0307 	rsb	r3, r3, #7
 800ad32:	2b04      	cmp	r3, #4
 800ad34:	d00b      	beq.n	800ad4e <xPortStartScheduler+0xbe>
	__asm volatile
 800ad36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad3a:	f383 8811 	msr	BASEPRI, r3
 800ad3e:	f3bf 8f6f 	isb	sy
 800ad42:	f3bf 8f4f 	dsb	sy
 800ad46:	60bb      	str	r3, [r7, #8]
}
 800ad48:	bf00      	nop
 800ad4a:	bf00      	nop
 800ad4c:	e7fd      	b.n	800ad4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad4e:	4b1e      	ldr	r3, [pc, #120]	@ (800adc8 <xPortStartScheduler+0x138>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	021b      	lsls	r3, r3, #8
 800ad54:	4a1c      	ldr	r2, [pc, #112]	@ (800adc8 <xPortStartScheduler+0x138>)
 800ad56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad58:	4b1b      	ldr	r3, [pc, #108]	@ (800adc8 <xPortStartScheduler+0x138>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ad60:	4a19      	ldr	r2, [pc, #100]	@ (800adc8 <xPortStartScheduler+0x138>)
 800ad62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	b2da      	uxtb	r2, r3
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad6c:	4b17      	ldr	r3, [pc, #92]	@ (800adcc <xPortStartScheduler+0x13c>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a16      	ldr	r2, [pc, #88]	@ (800adcc <xPortStartScheduler+0x13c>)
 800ad72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ad76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ad78:	4b14      	ldr	r3, [pc, #80]	@ (800adcc <xPortStartScheduler+0x13c>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a13      	ldr	r2, [pc, #76]	@ (800adcc <xPortStartScheduler+0x13c>)
 800ad7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ad82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ad84:	f000 f8da 	bl	800af3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ad88:	4b11      	ldr	r3, [pc, #68]	@ (800add0 <xPortStartScheduler+0x140>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ad8e:	f000 f8f9 	bl	800af84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ad92:	4b10      	ldr	r3, [pc, #64]	@ (800add4 <xPortStartScheduler+0x144>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a0f      	ldr	r2, [pc, #60]	@ (800add4 <xPortStartScheduler+0x144>)
 800ad98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ad9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ad9e:	f7ff ff63 	bl	800ac68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ada2:	f7ff f839 	bl	8009e18 <vTaskSwitchContext>
	prvTaskExitError();
 800ada6:	f7ff ff17 	bl	800abd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800adaa:	2300      	movs	r3, #0
}
 800adac:	4618      	mov	r0, r3
 800adae:	3718      	adds	r7, #24
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	e000ed00 	.word	0xe000ed00
 800adb8:	410fc271 	.word	0x410fc271
 800adbc:	410fc270 	.word	0x410fc270
 800adc0:	e000e400 	.word	0xe000e400
 800adc4:	200012ac 	.word	0x200012ac
 800adc8:	200012b0 	.word	0x200012b0
 800adcc:	e000ed20 	.word	0xe000ed20
 800add0:	20000024 	.word	0x20000024
 800add4:	e000ef34 	.word	0xe000ef34

0800add8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
	__asm volatile
 800adde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade2:	f383 8811 	msr	BASEPRI, r3
 800ade6:	f3bf 8f6f 	isb	sy
 800adea:	f3bf 8f4f 	dsb	sy
 800adee:	607b      	str	r3, [r7, #4]
}
 800adf0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800adf2:	4b10      	ldr	r3, [pc, #64]	@ (800ae34 <vPortEnterCritical+0x5c>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	3301      	adds	r3, #1
 800adf8:	4a0e      	ldr	r2, [pc, #56]	@ (800ae34 <vPortEnterCritical+0x5c>)
 800adfa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800adfc:	4b0d      	ldr	r3, [pc, #52]	@ (800ae34 <vPortEnterCritical+0x5c>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d110      	bne.n	800ae26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae04:	4b0c      	ldr	r3, [pc, #48]	@ (800ae38 <vPortEnterCritical+0x60>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d00b      	beq.n	800ae26 <vPortEnterCritical+0x4e>
	__asm volatile
 800ae0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae12:	f383 8811 	msr	BASEPRI, r3
 800ae16:	f3bf 8f6f 	isb	sy
 800ae1a:	f3bf 8f4f 	dsb	sy
 800ae1e:	603b      	str	r3, [r7, #0]
}
 800ae20:	bf00      	nop
 800ae22:	bf00      	nop
 800ae24:	e7fd      	b.n	800ae22 <vPortEnterCritical+0x4a>
	}
}
 800ae26:	bf00      	nop
 800ae28:	370c      	adds	r7, #12
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop
 800ae34:	20000024 	.word	0x20000024
 800ae38:	e000ed04 	.word	0xe000ed04

0800ae3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae42:	4b12      	ldr	r3, [pc, #72]	@ (800ae8c <vPortExitCritical+0x50>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d10b      	bne.n	800ae62 <vPortExitCritical+0x26>
	__asm volatile
 800ae4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae4e:	f383 8811 	msr	BASEPRI, r3
 800ae52:	f3bf 8f6f 	isb	sy
 800ae56:	f3bf 8f4f 	dsb	sy
 800ae5a:	607b      	str	r3, [r7, #4]
}
 800ae5c:	bf00      	nop
 800ae5e:	bf00      	nop
 800ae60:	e7fd      	b.n	800ae5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ae62:	4b0a      	ldr	r3, [pc, #40]	@ (800ae8c <vPortExitCritical+0x50>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	3b01      	subs	r3, #1
 800ae68:	4a08      	ldr	r2, [pc, #32]	@ (800ae8c <vPortExitCritical+0x50>)
 800ae6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae6c:	4b07      	ldr	r3, [pc, #28]	@ (800ae8c <vPortExitCritical+0x50>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d105      	bne.n	800ae80 <vPortExitCritical+0x44>
 800ae74:	2300      	movs	r3, #0
 800ae76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	f383 8811 	msr	BASEPRI, r3
}
 800ae7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ae80:	bf00      	nop
 800ae82:	370c      	adds	r7, #12
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr
 800ae8c:	20000024 	.word	0x20000024

0800ae90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ae90:	f3ef 8009 	mrs	r0, PSP
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	4b15      	ldr	r3, [pc, #84]	@ (800aef0 <pxCurrentTCBConst>)
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	f01e 0f10 	tst.w	lr, #16
 800aea0:	bf08      	it	eq
 800aea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeaa:	6010      	str	r0, [r2, #0]
 800aeac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aeb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800aeb4:	f380 8811 	msr	BASEPRI, r0
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	f3bf 8f6f 	isb	sy
 800aec0:	f7fe ffaa 	bl	8009e18 <vTaskSwitchContext>
 800aec4:	f04f 0000 	mov.w	r0, #0
 800aec8:	f380 8811 	msr	BASEPRI, r0
 800aecc:	bc09      	pop	{r0, r3}
 800aece:	6819      	ldr	r1, [r3, #0]
 800aed0:	6808      	ldr	r0, [r1, #0]
 800aed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed6:	f01e 0f10 	tst.w	lr, #16
 800aeda:	bf08      	it	eq
 800aedc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aee0:	f380 8809 	msr	PSP, r0
 800aee4:	f3bf 8f6f 	isb	sy
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	f3af 8000 	nop.w

0800aef0 <pxCurrentTCBConst>:
 800aef0:	20000c80 	.word	0x20000c80
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aef4:	bf00      	nop
 800aef6:	bf00      	nop

0800aef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
	__asm volatile
 800aefe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af02:	f383 8811 	msr	BASEPRI, r3
 800af06:	f3bf 8f6f 	isb	sy
 800af0a:	f3bf 8f4f 	dsb	sy
 800af0e:	607b      	str	r3, [r7, #4]
}
 800af10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af12:	f7fe fec7 	bl	8009ca4 <xTaskIncrementTick>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d003      	beq.n	800af24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af1c:	4b06      	ldr	r3, [pc, #24]	@ (800af38 <xPortSysTickHandler+0x40>)
 800af1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af22:	601a      	str	r2, [r3, #0]
 800af24:	2300      	movs	r3, #0
 800af26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	f383 8811 	msr	BASEPRI, r3
}
 800af2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800af30:	bf00      	nop
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	e000ed04 	.word	0xe000ed04

0800af3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af3c:	b480      	push	{r7}
 800af3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af40:	4b0b      	ldr	r3, [pc, #44]	@ (800af70 <vPortSetupTimerInterrupt+0x34>)
 800af42:	2200      	movs	r2, #0
 800af44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af46:	4b0b      	ldr	r3, [pc, #44]	@ (800af74 <vPortSetupTimerInterrupt+0x38>)
 800af48:	2200      	movs	r2, #0
 800af4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af4c:	4b0a      	ldr	r3, [pc, #40]	@ (800af78 <vPortSetupTimerInterrupt+0x3c>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a0a      	ldr	r2, [pc, #40]	@ (800af7c <vPortSetupTimerInterrupt+0x40>)
 800af52:	fba2 2303 	umull	r2, r3, r2, r3
 800af56:	099b      	lsrs	r3, r3, #6
 800af58:	4a09      	ldr	r2, [pc, #36]	@ (800af80 <vPortSetupTimerInterrupt+0x44>)
 800af5a:	3b01      	subs	r3, #1
 800af5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af5e:	4b04      	ldr	r3, [pc, #16]	@ (800af70 <vPortSetupTimerInterrupt+0x34>)
 800af60:	2207      	movs	r2, #7
 800af62:	601a      	str	r2, [r3, #0]
}
 800af64:	bf00      	nop
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop
 800af70:	e000e010 	.word	0xe000e010
 800af74:	e000e018 	.word	0xe000e018
 800af78:	20000018 	.word	0x20000018
 800af7c:	10624dd3 	.word	0x10624dd3
 800af80:	e000e014 	.word	0xe000e014

0800af84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800af84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800af94 <vPortEnableVFP+0x10>
 800af88:	6801      	ldr	r1, [r0, #0]
 800af8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800af8e:	6001      	str	r1, [r0, #0]
 800af90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800af92:	bf00      	nop
 800af94:	e000ed88 	.word	0xe000ed88

0800af98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800af98:	b480      	push	{r7}
 800af9a:	b085      	sub	sp, #20
 800af9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800af9e:	f3ef 8305 	mrs	r3, IPSR
 800afa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2b0f      	cmp	r3, #15
 800afa8:	d915      	bls.n	800afd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800afaa:	4a18      	ldr	r2, [pc, #96]	@ (800b00c <vPortValidateInterruptPriority+0x74>)
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	4413      	add	r3, r2
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800afb4:	4b16      	ldr	r3, [pc, #88]	@ (800b010 <vPortValidateInterruptPriority+0x78>)
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	7afa      	ldrb	r2, [r7, #11]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d20b      	bcs.n	800afd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800afbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	607b      	str	r3, [r7, #4]
}
 800afd0:	bf00      	nop
 800afd2:	bf00      	nop
 800afd4:	e7fd      	b.n	800afd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800afd6:	4b0f      	ldr	r3, [pc, #60]	@ (800b014 <vPortValidateInterruptPriority+0x7c>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800afde:	4b0e      	ldr	r3, [pc, #56]	@ (800b018 <vPortValidateInterruptPriority+0x80>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d90b      	bls.n	800affe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800afe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afea:	f383 8811 	msr	BASEPRI, r3
 800afee:	f3bf 8f6f 	isb	sy
 800aff2:	f3bf 8f4f 	dsb	sy
 800aff6:	603b      	str	r3, [r7, #0]
}
 800aff8:	bf00      	nop
 800affa:	bf00      	nop
 800affc:	e7fd      	b.n	800affa <vPortValidateInterruptPriority+0x62>
	}
 800affe:	bf00      	nop
 800b000:	3714      	adds	r7, #20
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	e000e3f0 	.word	0xe000e3f0
 800b010:	200012ac 	.word	0x200012ac
 800b014:	e000ed0c 	.word	0xe000ed0c
 800b018:	200012b0 	.word	0x200012b0

0800b01c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b08a      	sub	sp, #40	@ 0x28
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b024:	2300      	movs	r3, #0
 800b026:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b028:	f7fe fd80 	bl	8009b2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b02c:	4b5c      	ldr	r3, [pc, #368]	@ (800b1a0 <pvPortMalloc+0x184>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d101      	bne.n	800b038 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b034:	f000 f924 	bl	800b280 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b038:	4b5a      	ldr	r3, [pc, #360]	@ (800b1a4 <pvPortMalloc+0x188>)
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4013      	ands	r3, r2
 800b040:	2b00      	cmp	r3, #0
 800b042:	f040 8095 	bne.w	800b170 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d01e      	beq.n	800b08a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b04c:	2208      	movs	r2, #8
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	4413      	add	r3, r2
 800b052:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	f003 0307 	and.w	r3, r3, #7
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d015      	beq.n	800b08a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f023 0307 	bic.w	r3, r3, #7
 800b064:	3308      	adds	r3, #8
 800b066:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f003 0307 	and.w	r3, r3, #7
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d00b      	beq.n	800b08a <pvPortMalloc+0x6e>
	__asm volatile
 800b072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b076:	f383 8811 	msr	BASEPRI, r3
 800b07a:	f3bf 8f6f 	isb	sy
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	617b      	str	r3, [r7, #20]
}
 800b084:	bf00      	nop
 800b086:	bf00      	nop
 800b088:	e7fd      	b.n	800b086 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d06f      	beq.n	800b170 <pvPortMalloc+0x154>
 800b090:	4b45      	ldr	r3, [pc, #276]	@ (800b1a8 <pvPortMalloc+0x18c>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	429a      	cmp	r2, r3
 800b098:	d86a      	bhi.n	800b170 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b09a:	4b44      	ldr	r3, [pc, #272]	@ (800b1ac <pvPortMalloc+0x190>)
 800b09c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b09e:	4b43      	ldr	r3, [pc, #268]	@ (800b1ac <pvPortMalloc+0x190>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0a4:	e004      	b.n	800b0b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d903      	bls.n	800b0c2 <pvPortMalloc+0xa6>
 800b0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d1f1      	bne.n	800b0a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b0c2:	4b37      	ldr	r3, [pc, #220]	@ (800b1a0 <pvPortMalloc+0x184>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d051      	beq.n	800b170 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b0cc:	6a3b      	ldr	r3, [r7, #32]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2208      	movs	r2, #8
 800b0d2:	4413      	add	r3, r2
 800b0d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	6a3b      	ldr	r3, [r7, #32]
 800b0dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e0:	685a      	ldr	r2, [r3, #4]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	1ad2      	subs	r2, r2, r3
 800b0e6:	2308      	movs	r3, #8
 800b0e8:	005b      	lsls	r3, r3, #1
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d920      	bls.n	800b130 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b0ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	f003 0307 	and.w	r3, r3, #7
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00b      	beq.n	800b118 <pvPortMalloc+0xfc>
	__asm volatile
 800b100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b104:	f383 8811 	msr	BASEPRI, r3
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	613b      	str	r3, [r7, #16]
}
 800b112:	bf00      	nop
 800b114:	bf00      	nop
 800b116:	e7fd      	b.n	800b114 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11a:	685a      	ldr	r2, [r3, #4]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	1ad2      	subs	r2, r2, r3
 800b120:	69bb      	ldr	r3, [r7, #24]
 800b122:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b12a:	69b8      	ldr	r0, [r7, #24]
 800b12c:	f000 f90a 	bl	800b344 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b130:	4b1d      	ldr	r3, [pc, #116]	@ (800b1a8 <pvPortMalloc+0x18c>)
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	1ad3      	subs	r3, r2, r3
 800b13a:	4a1b      	ldr	r2, [pc, #108]	@ (800b1a8 <pvPortMalloc+0x18c>)
 800b13c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b13e:	4b1a      	ldr	r3, [pc, #104]	@ (800b1a8 <pvPortMalloc+0x18c>)
 800b140:	681a      	ldr	r2, [r3, #0]
 800b142:	4b1b      	ldr	r3, [pc, #108]	@ (800b1b0 <pvPortMalloc+0x194>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	429a      	cmp	r2, r3
 800b148:	d203      	bcs.n	800b152 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b14a:	4b17      	ldr	r3, [pc, #92]	@ (800b1a8 <pvPortMalloc+0x18c>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4a18      	ldr	r2, [pc, #96]	@ (800b1b0 <pvPortMalloc+0x194>)
 800b150:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b154:	685a      	ldr	r2, [r3, #4]
 800b156:	4b13      	ldr	r3, [pc, #76]	@ (800b1a4 <pvPortMalloc+0x188>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	431a      	orrs	r2, r3
 800b15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b15e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b162:	2200      	movs	r2, #0
 800b164:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b166:	4b13      	ldr	r3, [pc, #76]	@ (800b1b4 <pvPortMalloc+0x198>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	3301      	adds	r3, #1
 800b16c:	4a11      	ldr	r2, [pc, #68]	@ (800b1b4 <pvPortMalloc+0x198>)
 800b16e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b170:	f7fe fcea 	bl	8009b48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	f003 0307 	and.w	r3, r3, #7
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00b      	beq.n	800b196 <pvPortMalloc+0x17a>
	__asm volatile
 800b17e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b182:	f383 8811 	msr	BASEPRI, r3
 800b186:	f3bf 8f6f 	isb	sy
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	60fb      	str	r3, [r7, #12]
}
 800b190:	bf00      	nop
 800b192:	bf00      	nop
 800b194:	e7fd      	b.n	800b192 <pvPortMalloc+0x176>
	return pvReturn;
 800b196:	69fb      	ldr	r3, [r7, #28]
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3728      	adds	r7, #40	@ 0x28
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	20004ebc 	.word	0x20004ebc
 800b1a4:	20004ed0 	.word	0x20004ed0
 800b1a8:	20004ec0 	.word	0x20004ec0
 800b1ac:	20004eb4 	.word	0x20004eb4
 800b1b0:	20004ec4 	.word	0x20004ec4
 800b1b4:	20004ec8 	.word	0x20004ec8

0800b1b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b086      	sub	sp, #24
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d04f      	beq.n	800b26a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b1ca:	2308      	movs	r3, #8
 800b1cc:	425b      	negs	r3, r3
 800b1ce:	697a      	ldr	r2, [r7, #20]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	685a      	ldr	r2, [r3, #4]
 800b1dc:	4b25      	ldr	r3, [pc, #148]	@ (800b274 <vPortFree+0xbc>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d10b      	bne.n	800b1fe <vPortFree+0x46>
	__asm volatile
 800b1e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ea:	f383 8811 	msr	BASEPRI, r3
 800b1ee:	f3bf 8f6f 	isb	sy
 800b1f2:	f3bf 8f4f 	dsb	sy
 800b1f6:	60fb      	str	r3, [r7, #12]
}
 800b1f8:	bf00      	nop
 800b1fa:	bf00      	nop
 800b1fc:	e7fd      	b.n	800b1fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d00b      	beq.n	800b21e <vPortFree+0x66>
	__asm volatile
 800b206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b20a:	f383 8811 	msr	BASEPRI, r3
 800b20e:	f3bf 8f6f 	isb	sy
 800b212:	f3bf 8f4f 	dsb	sy
 800b216:	60bb      	str	r3, [r7, #8]
}
 800b218:	bf00      	nop
 800b21a:	bf00      	nop
 800b21c:	e7fd      	b.n	800b21a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	685a      	ldr	r2, [r3, #4]
 800b222:	4b14      	ldr	r3, [pc, #80]	@ (800b274 <vPortFree+0xbc>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4013      	ands	r3, r2
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d01e      	beq.n	800b26a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d11a      	bne.n	800b26a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	685a      	ldr	r2, [r3, #4]
 800b238:	4b0e      	ldr	r3, [pc, #56]	@ (800b274 <vPortFree+0xbc>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	43db      	mvns	r3, r3
 800b23e:	401a      	ands	r2, r3
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b244:	f7fe fc72 	bl	8009b2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	685a      	ldr	r2, [r3, #4]
 800b24c:	4b0a      	ldr	r3, [pc, #40]	@ (800b278 <vPortFree+0xc0>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4413      	add	r3, r2
 800b252:	4a09      	ldr	r2, [pc, #36]	@ (800b278 <vPortFree+0xc0>)
 800b254:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b256:	6938      	ldr	r0, [r7, #16]
 800b258:	f000 f874 	bl	800b344 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b25c:	4b07      	ldr	r3, [pc, #28]	@ (800b27c <vPortFree+0xc4>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	3301      	adds	r3, #1
 800b262:	4a06      	ldr	r2, [pc, #24]	@ (800b27c <vPortFree+0xc4>)
 800b264:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b266:	f7fe fc6f 	bl	8009b48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b26a:	bf00      	nop
 800b26c:	3718      	adds	r7, #24
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	20004ed0 	.word	0x20004ed0
 800b278:	20004ec0 	.word	0x20004ec0
 800b27c:	20004ecc 	.word	0x20004ecc

0800b280 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b280:	b480      	push	{r7}
 800b282:	b085      	sub	sp, #20
 800b284:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b286:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b28a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b28c:	4b27      	ldr	r3, [pc, #156]	@ (800b32c <prvHeapInit+0xac>)
 800b28e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f003 0307 	and.w	r3, r3, #7
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00c      	beq.n	800b2b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	3307      	adds	r3, #7
 800b29e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f023 0307 	bic.w	r3, r3, #7
 800b2a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b2a8:	68ba      	ldr	r2, [r7, #8]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	1ad3      	subs	r3, r2, r3
 800b2ae:	4a1f      	ldr	r2, [pc, #124]	@ (800b32c <prvHeapInit+0xac>)
 800b2b0:	4413      	add	r3, r2
 800b2b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b2b8:	4a1d      	ldr	r2, [pc, #116]	@ (800b330 <prvHeapInit+0xb0>)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b2be:	4b1c      	ldr	r3, [pc, #112]	@ (800b330 <prvHeapInit+0xb0>)
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	68ba      	ldr	r2, [r7, #8]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b2cc:	2208      	movs	r2, #8
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	1a9b      	subs	r3, r3, r2
 800b2d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f023 0307 	bic.w	r3, r3, #7
 800b2da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	4a15      	ldr	r2, [pc, #84]	@ (800b334 <prvHeapInit+0xb4>)
 800b2e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b2e2:	4b14      	ldr	r3, [pc, #80]	@ (800b334 <prvHeapInit+0xb4>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b2ea:	4b12      	ldr	r3, [pc, #72]	@ (800b334 <prvHeapInit+0xb4>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	1ad2      	subs	r2, r2, r3
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b300:	4b0c      	ldr	r3, [pc, #48]	@ (800b334 <prvHeapInit+0xb4>)
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	4a0a      	ldr	r2, [pc, #40]	@ (800b338 <prvHeapInit+0xb8>)
 800b30e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	4a09      	ldr	r2, [pc, #36]	@ (800b33c <prvHeapInit+0xbc>)
 800b316:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b318:	4b09      	ldr	r3, [pc, #36]	@ (800b340 <prvHeapInit+0xc0>)
 800b31a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b31e:	601a      	str	r2, [r3, #0]
}
 800b320:	bf00      	nop
 800b322:	3714      	adds	r7, #20
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr
 800b32c:	200012b4 	.word	0x200012b4
 800b330:	20004eb4 	.word	0x20004eb4
 800b334:	20004ebc 	.word	0x20004ebc
 800b338:	20004ec4 	.word	0x20004ec4
 800b33c:	20004ec0 	.word	0x20004ec0
 800b340:	20004ed0 	.word	0x20004ed0

0800b344 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b344:	b480      	push	{r7}
 800b346:	b085      	sub	sp, #20
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b34c:	4b28      	ldr	r3, [pc, #160]	@ (800b3f0 <prvInsertBlockIntoFreeList+0xac>)
 800b34e:	60fb      	str	r3, [r7, #12]
 800b350:	e002      	b.n	800b358 <prvInsertBlockIntoFreeList+0x14>
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	60fb      	str	r3, [r7, #12]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	429a      	cmp	r2, r3
 800b360:	d8f7      	bhi.n	800b352 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	68ba      	ldr	r2, [r7, #8]
 800b36c:	4413      	add	r3, r2
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	429a      	cmp	r2, r3
 800b372:	d108      	bne.n	800b386 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	685a      	ldr	r2, [r3, #4]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	441a      	add	r2, r3
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	68ba      	ldr	r2, [r7, #8]
 800b390:	441a      	add	r2, r3
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	429a      	cmp	r2, r3
 800b398:	d118      	bne.n	800b3cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	4b15      	ldr	r3, [pc, #84]	@ (800b3f4 <prvInsertBlockIntoFreeList+0xb0>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d00d      	beq.n	800b3c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	685a      	ldr	r2, [r3, #4]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	441a      	add	r2, r3
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	601a      	str	r2, [r3, #0]
 800b3c0:	e008      	b.n	800b3d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b3c2:	4b0c      	ldr	r3, [pc, #48]	@ (800b3f4 <prvInsertBlockIntoFreeList+0xb0>)
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	601a      	str	r2, [r3, #0]
 800b3ca:	e003      	b.n	800b3d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b3d4:	68fa      	ldr	r2, [r7, #12]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d002      	beq.n	800b3e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3e2:	bf00      	nop
 800b3e4:	3714      	adds	r7, #20
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	20004eb4 	.word	0x20004eb4
 800b3f4:	20004ebc 	.word	0x20004ebc

0800b3f8 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800b3fe:	2300      	movs	r3, #0
 800b400:	71fb      	strb	r3, [r7, #7]
 800b402:	e026      	b.n	800b452 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800b404:	79fb      	ldrb	r3, [r7, #7]
 800b406:	3b50      	subs	r3, #80	@ 0x50
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	2100      	movs	r1, #0
 800b40c:	4618      	mov	r0, r3
 800b40e:	f000 f82b 	bl	800b468 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800b412:	2100      	movs	r1, #0
 800b414:	2000      	movs	r0, #0
 800b416:	f000 f827 	bl	800b468 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800b41a:	2100      	movs	r1, #0
 800b41c:	2010      	movs	r0, #16
 800b41e:	f000 f823 	bl	800b468 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800b422:	2300      	movs	r3, #0
 800b424:	71bb      	strb	r3, [r7, #6]
 800b426:	e00d      	b.n	800b444 <OLED_Refresh_Gram+0x4c>
 800b428:	79ba      	ldrb	r2, [r7, #6]
 800b42a:	79fb      	ldrb	r3, [r7, #7]
 800b42c:	490d      	ldr	r1, [pc, #52]	@ (800b464 <OLED_Refresh_Gram+0x6c>)
 800b42e:	00d2      	lsls	r2, r2, #3
 800b430:	440a      	add	r2, r1
 800b432:	4413      	add	r3, r2
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	2101      	movs	r1, #1
 800b438:	4618      	mov	r0, r3
 800b43a:	f000 f815 	bl	800b468 <OLED_WR_Byte>
 800b43e:	79bb      	ldrb	r3, [r7, #6]
 800b440:	3301      	adds	r3, #1
 800b442:	71bb      	strb	r3, [r7, #6]
 800b444:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	daed      	bge.n	800b428 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800b44c:	79fb      	ldrb	r3, [r7, #7]
 800b44e:	3301      	adds	r3, #1
 800b450:	71fb      	strb	r3, [r7, #7]
 800b452:	79fb      	ldrb	r3, [r7, #7]
 800b454:	2b07      	cmp	r3, #7
 800b456:	d9d5      	bls.n	800b404 <OLED_Refresh_Gram+0xc>
	}   
}
 800b458:	bf00      	nop
 800b45a:	bf00      	nop
 800b45c:	3708      	adds	r7, #8
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	20004ed4 	.word	0x20004ed4

0800b468 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800b468:	b580      	push	{r7, lr}
 800b46a:	b084      	sub	sp, #16
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	4603      	mov	r3, r0
 800b470:	460a      	mov	r2, r1
 800b472:	71fb      	strb	r3, [r7, #7]
 800b474:	4613      	mov	r3, r2
 800b476:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800b478:	79bb      	ldrb	r3, [r7, #6]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d006      	beq.n	800b48c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800b47e:	2201      	movs	r2, #1
 800b480:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b484:	481c      	ldr	r0, [pc, #112]	@ (800b4f8 <OLED_WR_Byte+0x90>)
 800b486:	f7f8 fc7f 	bl	8003d88 <HAL_GPIO_WritePin>
 800b48a:	e005      	b.n	800b498 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800b48c:	2200      	movs	r2, #0
 800b48e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b492:	4819      	ldr	r0, [pc, #100]	@ (800b4f8 <OLED_WR_Byte+0x90>)
 800b494:	f7f8 fc78 	bl	8003d88 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800b498:	2300      	movs	r3, #0
 800b49a:	73fb      	strb	r3, [r7, #15]
 800b49c:	e01e      	b.n	800b4dc <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800b49e:	2200      	movs	r2, #0
 800b4a0:	2120      	movs	r1, #32
 800b4a2:	4815      	ldr	r0, [pc, #84]	@ (800b4f8 <OLED_WR_Byte+0x90>)
 800b4a4:	f7f8 fc70 	bl	8003d88 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800b4a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	da05      	bge.n	800b4bc <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	2140      	movs	r1, #64	@ 0x40
 800b4b4:	4810      	ldr	r0, [pc, #64]	@ (800b4f8 <OLED_WR_Byte+0x90>)
 800b4b6:	f7f8 fc67 	bl	8003d88 <HAL_GPIO_WritePin>
 800b4ba:	e004      	b.n	800b4c6 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800b4bc:	2200      	movs	r2, #0
 800b4be:	2140      	movs	r1, #64	@ 0x40
 800b4c0:	480d      	ldr	r0, [pc, #52]	@ (800b4f8 <OLED_WR_Byte+0x90>)
 800b4c2:	f7f8 fc61 	bl	8003d88 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	2120      	movs	r1, #32
 800b4ca:	480b      	ldr	r0, [pc, #44]	@ (800b4f8 <OLED_WR_Byte+0x90>)
 800b4cc:	f7f8 fc5c 	bl	8003d88 <HAL_GPIO_WritePin>
		dat<<=1;   
 800b4d0:	79fb      	ldrb	r3, [r7, #7]
 800b4d2:	005b      	lsls	r3, r3, #1
 800b4d4:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800b4d6:	7bfb      	ldrb	r3, [r7, #15]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	73fb      	strb	r3, [r7, #15]
 800b4dc:	7bfb      	ldrb	r3, [r7, #15]
 800b4de:	2b07      	cmp	r3, #7
 800b4e0:	d9dd      	bls.n	800b49e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b4e8:	4803      	ldr	r0, [pc, #12]	@ (800b4f8 <OLED_WR_Byte+0x90>)
 800b4ea:	f7f8 fc4d 	bl	8003d88 <HAL_GPIO_WritePin>
} 
 800b4ee:	bf00      	nop
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	40021000 	.word	0x40021000

0800b4fc <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800b502:	2300      	movs	r3, #0
 800b504:	71fb      	strb	r3, [r7, #7]
 800b506:	e014      	b.n	800b532 <OLED_Clear+0x36>
 800b508:	2300      	movs	r3, #0
 800b50a:	71bb      	strb	r3, [r7, #6]
 800b50c:	e00a      	b.n	800b524 <OLED_Clear+0x28>
 800b50e:	79ba      	ldrb	r2, [r7, #6]
 800b510:	79fb      	ldrb	r3, [r7, #7]
 800b512:	490c      	ldr	r1, [pc, #48]	@ (800b544 <OLED_Clear+0x48>)
 800b514:	00d2      	lsls	r2, r2, #3
 800b516:	440a      	add	r2, r1
 800b518:	4413      	add	r3, r2
 800b51a:	2200      	movs	r2, #0
 800b51c:	701a      	strb	r2, [r3, #0]
 800b51e:	79bb      	ldrb	r3, [r7, #6]
 800b520:	3301      	adds	r3, #1
 800b522:	71bb      	strb	r3, [r7, #6]
 800b524:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	daf0      	bge.n	800b50e <OLED_Clear+0x12>
 800b52c:	79fb      	ldrb	r3, [r7, #7]
 800b52e:	3301      	adds	r3, #1
 800b530:	71fb      	strb	r3, [r7, #7]
 800b532:	79fb      	ldrb	r3, [r7, #7]
 800b534:	2b07      	cmp	r3, #7
 800b536:	d9e7      	bls.n	800b508 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800b538:	f7ff ff5e 	bl	800b3f8 <OLED_Refresh_Gram>
}
 800b53c:	bf00      	nop
 800b53e:	3708      	adds	r7, #8
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}
 800b544:	20004ed4 	.word	0x20004ed4

0800b548 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	4603      	mov	r3, r0
 800b550:	71fb      	strb	r3, [r7, #7]
 800b552:	460b      	mov	r3, r1
 800b554:	71bb      	strb	r3, [r7, #6]
 800b556:	4613      	mov	r3, r2
 800b558:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800b55a:	2300      	movs	r3, #0
 800b55c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800b55e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b562:	2b00      	cmp	r3, #0
 800b564:	db41      	blt.n	800b5ea <OLED_DrawPoint+0xa2>
 800b566:	79bb      	ldrb	r3, [r7, #6]
 800b568:	2b3f      	cmp	r3, #63	@ 0x3f
 800b56a:	d83e      	bhi.n	800b5ea <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800b56c:	79bb      	ldrb	r3, [r7, #6]
 800b56e:	08db      	lsrs	r3, r3, #3
 800b570:	b2db      	uxtb	r3, r3
 800b572:	f1c3 0307 	rsb	r3, r3, #7
 800b576:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800b578:	79bb      	ldrb	r3, [r7, #6]
 800b57a:	f003 0307 	and.w	r3, r3, #7
 800b57e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800b580:	7b7b      	ldrb	r3, [r7, #13]
 800b582:	f1c3 0307 	rsb	r3, r3, #7
 800b586:	2201      	movs	r2, #1
 800b588:	fa02 f303 	lsl.w	r3, r2, r3
 800b58c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800b58e:	797b      	ldrb	r3, [r7, #5]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d012      	beq.n	800b5ba <OLED_DrawPoint+0x72>
 800b594:	79fa      	ldrb	r2, [r7, #7]
 800b596:	7bbb      	ldrb	r3, [r7, #14]
 800b598:	4917      	ldr	r1, [pc, #92]	@ (800b5f8 <OLED_DrawPoint+0xb0>)
 800b59a:	00d2      	lsls	r2, r2, #3
 800b59c:	440a      	add	r2, r1
 800b59e:	4413      	add	r3, r2
 800b5a0:	7818      	ldrb	r0, [r3, #0]
 800b5a2:	79fa      	ldrb	r2, [r7, #7]
 800b5a4:	7bbb      	ldrb	r3, [r7, #14]
 800b5a6:	7bf9      	ldrb	r1, [r7, #15]
 800b5a8:	4301      	orrs	r1, r0
 800b5aa:	b2c8      	uxtb	r0, r1
 800b5ac:	4912      	ldr	r1, [pc, #72]	@ (800b5f8 <OLED_DrawPoint+0xb0>)
 800b5ae:	00d2      	lsls	r2, r2, #3
 800b5b0:	440a      	add	r2, r1
 800b5b2:	4413      	add	r3, r2
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	701a      	strb	r2, [r3, #0]
 800b5b8:	e018      	b.n	800b5ec <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800b5ba:	79fa      	ldrb	r2, [r7, #7]
 800b5bc:	7bbb      	ldrb	r3, [r7, #14]
 800b5be:	490e      	ldr	r1, [pc, #56]	@ (800b5f8 <OLED_DrawPoint+0xb0>)
 800b5c0:	00d2      	lsls	r2, r2, #3
 800b5c2:	440a      	add	r2, r1
 800b5c4:	4413      	add	r3, r2
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	b25a      	sxtb	r2, r3
 800b5ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b5ce:	43db      	mvns	r3, r3
 800b5d0:	b25b      	sxtb	r3, r3
 800b5d2:	4013      	ands	r3, r2
 800b5d4:	b259      	sxtb	r1, r3
 800b5d6:	79fa      	ldrb	r2, [r7, #7]
 800b5d8:	7bbb      	ldrb	r3, [r7, #14]
 800b5da:	b2c8      	uxtb	r0, r1
 800b5dc:	4906      	ldr	r1, [pc, #24]	@ (800b5f8 <OLED_DrawPoint+0xb0>)
 800b5de:	00d2      	lsls	r2, r2, #3
 800b5e0:	440a      	add	r2, r1
 800b5e2:	4413      	add	r3, r2
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	701a      	strb	r2, [r3, #0]
 800b5e8:	e000      	b.n	800b5ec <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800b5ea:	bf00      	nop
}
 800b5ec:	3714      	adds	r7, #20
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop
 800b5f8:	20004ed4 	.word	0x20004ed4

0800b5fc <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800b5fc:	b590      	push	{r4, r7, lr}
 800b5fe:	b085      	sub	sp, #20
 800b600:	af00      	add	r7, sp, #0
 800b602:	4604      	mov	r4, r0
 800b604:	4608      	mov	r0, r1
 800b606:	4611      	mov	r1, r2
 800b608:	461a      	mov	r2, r3
 800b60a:	4623      	mov	r3, r4
 800b60c:	71fb      	strb	r3, [r7, #7]
 800b60e:	4603      	mov	r3, r0
 800b610:	71bb      	strb	r3, [r7, #6]
 800b612:	460b      	mov	r3, r1
 800b614:	717b      	strb	r3, [r7, #5]
 800b616:	4613      	mov	r3, r2
 800b618:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800b61a:	79bb      	ldrb	r3, [r7, #6]
 800b61c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800b61e:	797b      	ldrb	r3, [r7, #5]
 800b620:	3b20      	subs	r3, #32
 800b622:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800b624:	2300      	movs	r3, #0
 800b626:	73bb      	strb	r3, [r7, #14]
 800b628:	e04d      	b.n	800b6c6 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800b62a:	793b      	ldrb	r3, [r7, #4]
 800b62c:	2b0c      	cmp	r3, #12
 800b62e:	d10b      	bne.n	800b648 <OLED_ShowChar+0x4c>
 800b630:	797a      	ldrb	r2, [r7, #5]
 800b632:	7bb9      	ldrb	r1, [r7, #14]
 800b634:	4828      	ldr	r0, [pc, #160]	@ (800b6d8 <OLED_ShowChar+0xdc>)
 800b636:	4613      	mov	r3, r2
 800b638:	005b      	lsls	r3, r3, #1
 800b63a:	4413      	add	r3, r2
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	4403      	add	r3, r0
 800b640:	440b      	add	r3, r1
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	73fb      	strb	r3, [r7, #15]
 800b646:	e007      	b.n	800b658 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800b648:	797a      	ldrb	r2, [r7, #5]
 800b64a:	7bbb      	ldrb	r3, [r7, #14]
 800b64c:	4923      	ldr	r1, [pc, #140]	@ (800b6dc <OLED_ShowChar+0xe0>)
 800b64e:	0112      	lsls	r2, r2, #4
 800b650:	440a      	add	r2, r1
 800b652:	4413      	add	r3, r2
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800b658:	2300      	movs	r3, #0
 800b65a:	737b      	strb	r3, [r7, #13]
 800b65c:	e02d      	b.n	800b6ba <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800b65e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b662:	2b00      	cmp	r3, #0
 800b664:	da07      	bge.n	800b676 <OLED_ShowChar+0x7a>
 800b666:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b66a:	79b9      	ldrb	r1, [r7, #6]
 800b66c:	79fb      	ldrb	r3, [r7, #7]
 800b66e:	4618      	mov	r0, r3
 800b670:	f7ff ff6a 	bl	800b548 <OLED_DrawPoint>
 800b674:	e00c      	b.n	800b690 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800b676:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	bf0c      	ite	eq
 800b67e:	2301      	moveq	r3, #1
 800b680:	2300      	movne	r3, #0
 800b682:	b2db      	uxtb	r3, r3
 800b684:	461a      	mov	r2, r3
 800b686:	79b9      	ldrb	r1, [r7, #6]
 800b688:	79fb      	ldrb	r3, [r7, #7]
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7ff ff5c 	bl	800b548 <OLED_DrawPoint>
			temp<<=1;
 800b690:	7bfb      	ldrb	r3, [r7, #15]
 800b692:	005b      	lsls	r3, r3, #1
 800b694:	73fb      	strb	r3, [r7, #15]
			y++;
 800b696:	79bb      	ldrb	r3, [r7, #6]
 800b698:	3301      	adds	r3, #1
 800b69a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800b69c:	79ba      	ldrb	r2, [r7, #6]
 800b69e:	7b3b      	ldrb	r3, [r7, #12]
 800b6a0:	1ad2      	subs	r2, r2, r3
 800b6a2:	793b      	ldrb	r3, [r7, #4]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d105      	bne.n	800b6b4 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800b6a8:	7b3b      	ldrb	r3, [r7, #12]
 800b6aa:	71bb      	strb	r3, [r7, #6]
				x++;
 800b6ac:	79fb      	ldrb	r3, [r7, #7]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	71fb      	strb	r3, [r7, #7]
				break;
 800b6b2:	e005      	b.n	800b6c0 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800b6b4:	7b7b      	ldrb	r3, [r7, #13]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	737b      	strb	r3, [r7, #13]
 800b6ba:	7b7b      	ldrb	r3, [r7, #13]
 800b6bc:	2b07      	cmp	r3, #7
 800b6be:	d9ce      	bls.n	800b65e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800b6c0:	7bbb      	ldrb	r3, [r7, #14]
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	73bb      	strb	r3, [r7, #14]
 800b6c6:	7bba      	ldrb	r2, [r7, #14]
 800b6c8:	793b      	ldrb	r3, [r7, #4]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d3ad      	bcc.n	800b62a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800b6ce:	bf00      	nop
 800b6d0:	bf00      	nop
 800b6d2:	3714      	adds	r7, #20
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd90      	pop	{r4, r7, pc}
 800b6d8:	0800e798 	.word	0x0800e798
 800b6dc:	0800ec0c 	.word	0x0800ec0c

0800b6e0 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af02      	add	r7, sp, #8
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	603a      	str	r2, [r7, #0]
 800b6ea:	71fb      	strb	r3, [r7, #7]
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800b6f0:	e01f      	b.n	800b732 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800b6f2:	79fb      	ldrb	r3, [r7, #7]
 800b6f4:	2b7a      	cmp	r3, #122	@ 0x7a
 800b6f6:	d904      	bls.n	800b702 <OLED_ShowString+0x22>
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	71fb      	strb	r3, [r7, #7]
 800b6fc:	79bb      	ldrb	r3, [r7, #6]
 800b6fe:	3310      	adds	r3, #16
 800b700:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800b702:	79bb      	ldrb	r3, [r7, #6]
 800b704:	2b3a      	cmp	r3, #58	@ 0x3a
 800b706:	d905      	bls.n	800b714 <OLED_ShowString+0x34>
 800b708:	2300      	movs	r3, #0
 800b70a:	71fb      	strb	r3, [r7, #7]
 800b70c:	79fb      	ldrb	r3, [r7, #7]
 800b70e:	71bb      	strb	r3, [r7, #6]
 800b710:	f7ff fef4 	bl	800b4fc <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	781a      	ldrb	r2, [r3, #0]
 800b718:	79b9      	ldrb	r1, [r7, #6]
 800b71a:	79f8      	ldrb	r0, [r7, #7]
 800b71c:	2301      	movs	r3, #1
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	230c      	movs	r3, #12
 800b722:	f7ff ff6b 	bl	800b5fc <OLED_ShowChar>
        x+=8;
 800b726:	79fb      	ldrb	r3, [r7, #7]
 800b728:	3308      	adds	r3, #8
 800b72a:	71fb      	strb	r3, [r7, #7]
        p++;
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	3301      	adds	r3, #1
 800b730:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d1db      	bne.n	800b6f2 <OLED_ShowString+0x12>
    }  
}	 
 800b73a:	bf00      	nop
 800b73c:	bf00      	nop
 800b73e:	3708      	adds	r7, #8
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <OLED_Init>:

void OLED_Init(void)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800b748:	f7f9 fb76 	bl	8004e38 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800b74c:	4b41      	ldr	r3, [pc, #260]	@ (800b854 <OLED_Init+0x110>)
 800b74e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b750:	4a40      	ldr	r2, [pc, #256]	@ (800b854 <OLED_Init+0x110>)
 800b752:	f023 0301 	bic.w	r3, r3, #1
 800b756:	6713      	str	r3, [r2, #112]	@ 0x70
 800b758:	4b3e      	ldr	r3, [pc, #248]	@ (800b854 <OLED_Init+0x110>)
 800b75a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b75c:	4a3d      	ldr	r2, [pc, #244]	@ (800b854 <OLED_Init+0x110>)
 800b75e:	f023 0304 	bic.w	r3, r3, #4
 800b762:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800b764:	f7f9 fb7c 	bl	8004e60 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800b768:	2200      	movs	r2, #0
 800b76a:	2180      	movs	r1, #128	@ 0x80
 800b76c:	483a      	ldr	r0, [pc, #232]	@ (800b858 <OLED_Init+0x114>)
 800b76e:	f7f8 fb0b 	bl	8003d88 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800b772:	2064      	movs	r0, #100	@ 0x64
 800b774:	f7f7 fb8c 	bl	8002e90 <HAL_Delay>
	OLED_RST_Set();
 800b778:	2201      	movs	r2, #1
 800b77a:	2180      	movs	r1, #128	@ 0x80
 800b77c:	4836      	ldr	r0, [pc, #216]	@ (800b858 <OLED_Init+0x114>)
 800b77e:	f7f8 fb03 	bl	8003d88 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800b782:	2100      	movs	r1, #0
 800b784:	20ae      	movs	r0, #174	@ 0xae
 800b786:	f7ff fe6f 	bl	800b468 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800b78a:	2100      	movs	r1, #0
 800b78c:	20d5      	movs	r0, #213	@ 0xd5
 800b78e:	f7ff fe6b 	bl	800b468 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800b792:	2100      	movs	r1, #0
 800b794:	2050      	movs	r0, #80	@ 0x50
 800b796:	f7ff fe67 	bl	800b468 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800b79a:	2100      	movs	r1, #0
 800b79c:	20a8      	movs	r0, #168	@ 0xa8
 800b79e:	f7ff fe63 	bl	800b468 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800b7a2:	2100      	movs	r1, #0
 800b7a4:	203f      	movs	r0, #63	@ 0x3f
 800b7a6:	f7ff fe5f 	bl	800b468 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800b7aa:	2100      	movs	r1, #0
 800b7ac:	20d3      	movs	r0, #211	@ 0xd3
 800b7ae:	f7ff fe5b 	bl	800b468 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800b7b2:	2100      	movs	r1, #0
 800b7b4:	2000      	movs	r0, #0
 800b7b6:	f7ff fe57 	bl	800b468 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800b7ba:	2100      	movs	r1, #0
 800b7bc:	2040      	movs	r0, #64	@ 0x40
 800b7be:	f7ff fe53 	bl	800b468 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	208d      	movs	r0, #141	@ 0x8d
 800b7c6:	f7ff fe4f 	bl	800b468 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800b7ca:	2100      	movs	r1, #0
 800b7cc:	2014      	movs	r0, #20
 800b7ce:	f7ff fe4b 	bl	800b468 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	2020      	movs	r0, #32
 800b7d6:	f7ff fe47 	bl	800b468 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800b7da:	2100      	movs	r1, #0
 800b7dc:	2002      	movs	r0, #2
 800b7de:	f7ff fe43 	bl	800b468 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800b7e2:	2100      	movs	r1, #0
 800b7e4:	20a1      	movs	r0, #161	@ 0xa1
 800b7e6:	f7ff fe3f 	bl	800b468 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	20c0      	movs	r0, #192	@ 0xc0
 800b7ee:	f7ff fe3b 	bl	800b468 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	20da      	movs	r0, #218	@ 0xda
 800b7f6:	f7ff fe37 	bl	800b468 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800b7fa:	2100      	movs	r1, #0
 800b7fc:	2012      	movs	r0, #18
 800b7fe:	f7ff fe33 	bl	800b468 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800b802:	2100      	movs	r1, #0
 800b804:	2081      	movs	r0, #129	@ 0x81
 800b806:	f7ff fe2f 	bl	800b468 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800b80a:	2100      	movs	r1, #0
 800b80c:	20ef      	movs	r0, #239	@ 0xef
 800b80e:	f7ff fe2b 	bl	800b468 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800b812:	2100      	movs	r1, #0
 800b814:	20d9      	movs	r0, #217	@ 0xd9
 800b816:	f7ff fe27 	bl	800b468 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800b81a:	2100      	movs	r1, #0
 800b81c:	20f1      	movs	r0, #241	@ 0xf1
 800b81e:	f7ff fe23 	bl	800b468 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800b822:	2100      	movs	r1, #0
 800b824:	20db      	movs	r0, #219	@ 0xdb
 800b826:	f7ff fe1f 	bl	800b468 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800b82a:	2100      	movs	r1, #0
 800b82c:	2030      	movs	r0, #48	@ 0x30
 800b82e:	f7ff fe1b 	bl	800b468 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800b832:	2100      	movs	r1, #0
 800b834:	20a4      	movs	r0, #164	@ 0xa4
 800b836:	f7ff fe17 	bl	800b468 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800b83a:	2100      	movs	r1, #0
 800b83c:	20a6      	movs	r0, #166	@ 0xa6
 800b83e:	f7ff fe13 	bl	800b468 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800b842:	2100      	movs	r1, #0
 800b844:	20af      	movs	r0, #175	@ 0xaf
 800b846:	f7ff fe0f 	bl	800b468 <OLED_WR_Byte>
	OLED_Clear(); 
 800b84a:	f7ff fe57 	bl	800b4fc <OLED_Clear>
 800b84e:	bf00      	nop
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	40023800 	.word	0x40023800
 800b858:	40021000 	.word	0x40021000

0800b85c <__cvt>:
 800b85c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b860:	ec57 6b10 	vmov	r6, r7, d0
 800b864:	2f00      	cmp	r7, #0
 800b866:	460c      	mov	r4, r1
 800b868:	4619      	mov	r1, r3
 800b86a:	463b      	mov	r3, r7
 800b86c:	bfbb      	ittet	lt
 800b86e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b872:	461f      	movlt	r7, r3
 800b874:	2300      	movge	r3, #0
 800b876:	232d      	movlt	r3, #45	@ 0x2d
 800b878:	700b      	strb	r3, [r1, #0]
 800b87a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b87c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b880:	4691      	mov	r9, r2
 800b882:	f023 0820 	bic.w	r8, r3, #32
 800b886:	bfbc      	itt	lt
 800b888:	4632      	movlt	r2, r6
 800b88a:	4616      	movlt	r6, r2
 800b88c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b890:	d005      	beq.n	800b89e <__cvt+0x42>
 800b892:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b896:	d100      	bne.n	800b89a <__cvt+0x3e>
 800b898:	3401      	adds	r4, #1
 800b89a:	2102      	movs	r1, #2
 800b89c:	e000      	b.n	800b8a0 <__cvt+0x44>
 800b89e:	2103      	movs	r1, #3
 800b8a0:	ab03      	add	r3, sp, #12
 800b8a2:	9301      	str	r3, [sp, #4]
 800b8a4:	ab02      	add	r3, sp, #8
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	ec47 6b10 	vmov	d0, r6, r7
 800b8ac:	4653      	mov	r3, sl
 800b8ae:	4622      	mov	r2, r4
 800b8b0:	f000 fe7e 	bl	800c5b0 <_dtoa_r>
 800b8b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b8b8:	4605      	mov	r5, r0
 800b8ba:	d119      	bne.n	800b8f0 <__cvt+0x94>
 800b8bc:	f019 0f01 	tst.w	r9, #1
 800b8c0:	d00e      	beq.n	800b8e0 <__cvt+0x84>
 800b8c2:	eb00 0904 	add.w	r9, r0, r4
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	4639      	mov	r1, r7
 800b8ce:	f7f5 f8fb 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8d2:	b108      	cbz	r0, 800b8d8 <__cvt+0x7c>
 800b8d4:	f8cd 900c 	str.w	r9, [sp, #12]
 800b8d8:	2230      	movs	r2, #48	@ 0x30
 800b8da:	9b03      	ldr	r3, [sp, #12]
 800b8dc:	454b      	cmp	r3, r9
 800b8de:	d31e      	bcc.n	800b91e <__cvt+0xc2>
 800b8e0:	9b03      	ldr	r3, [sp, #12]
 800b8e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b8e4:	1b5b      	subs	r3, r3, r5
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	6013      	str	r3, [r2, #0]
 800b8ea:	b004      	add	sp, #16
 800b8ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b8f4:	eb00 0904 	add.w	r9, r0, r4
 800b8f8:	d1e5      	bne.n	800b8c6 <__cvt+0x6a>
 800b8fa:	7803      	ldrb	r3, [r0, #0]
 800b8fc:	2b30      	cmp	r3, #48	@ 0x30
 800b8fe:	d10a      	bne.n	800b916 <__cvt+0xba>
 800b900:	2200      	movs	r2, #0
 800b902:	2300      	movs	r3, #0
 800b904:	4630      	mov	r0, r6
 800b906:	4639      	mov	r1, r7
 800b908:	f7f5 f8de 	bl	8000ac8 <__aeabi_dcmpeq>
 800b90c:	b918      	cbnz	r0, 800b916 <__cvt+0xba>
 800b90e:	f1c4 0401 	rsb	r4, r4, #1
 800b912:	f8ca 4000 	str.w	r4, [sl]
 800b916:	f8da 3000 	ldr.w	r3, [sl]
 800b91a:	4499      	add	r9, r3
 800b91c:	e7d3      	b.n	800b8c6 <__cvt+0x6a>
 800b91e:	1c59      	adds	r1, r3, #1
 800b920:	9103      	str	r1, [sp, #12]
 800b922:	701a      	strb	r2, [r3, #0]
 800b924:	e7d9      	b.n	800b8da <__cvt+0x7e>

0800b926 <__exponent>:
 800b926:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b928:	2900      	cmp	r1, #0
 800b92a:	bfba      	itte	lt
 800b92c:	4249      	neglt	r1, r1
 800b92e:	232d      	movlt	r3, #45	@ 0x2d
 800b930:	232b      	movge	r3, #43	@ 0x2b
 800b932:	2909      	cmp	r1, #9
 800b934:	7002      	strb	r2, [r0, #0]
 800b936:	7043      	strb	r3, [r0, #1]
 800b938:	dd29      	ble.n	800b98e <__exponent+0x68>
 800b93a:	f10d 0307 	add.w	r3, sp, #7
 800b93e:	461d      	mov	r5, r3
 800b940:	270a      	movs	r7, #10
 800b942:	461a      	mov	r2, r3
 800b944:	fbb1 f6f7 	udiv	r6, r1, r7
 800b948:	fb07 1416 	mls	r4, r7, r6, r1
 800b94c:	3430      	adds	r4, #48	@ 0x30
 800b94e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b952:	460c      	mov	r4, r1
 800b954:	2c63      	cmp	r4, #99	@ 0x63
 800b956:	f103 33ff 	add.w	r3, r3, #4294967295
 800b95a:	4631      	mov	r1, r6
 800b95c:	dcf1      	bgt.n	800b942 <__exponent+0x1c>
 800b95e:	3130      	adds	r1, #48	@ 0x30
 800b960:	1e94      	subs	r4, r2, #2
 800b962:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b966:	1c41      	adds	r1, r0, #1
 800b968:	4623      	mov	r3, r4
 800b96a:	42ab      	cmp	r3, r5
 800b96c:	d30a      	bcc.n	800b984 <__exponent+0x5e>
 800b96e:	f10d 0309 	add.w	r3, sp, #9
 800b972:	1a9b      	subs	r3, r3, r2
 800b974:	42ac      	cmp	r4, r5
 800b976:	bf88      	it	hi
 800b978:	2300      	movhi	r3, #0
 800b97a:	3302      	adds	r3, #2
 800b97c:	4403      	add	r3, r0
 800b97e:	1a18      	subs	r0, r3, r0
 800b980:	b003      	add	sp, #12
 800b982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b984:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b988:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b98c:	e7ed      	b.n	800b96a <__exponent+0x44>
 800b98e:	2330      	movs	r3, #48	@ 0x30
 800b990:	3130      	adds	r1, #48	@ 0x30
 800b992:	7083      	strb	r3, [r0, #2]
 800b994:	70c1      	strb	r1, [r0, #3]
 800b996:	1d03      	adds	r3, r0, #4
 800b998:	e7f1      	b.n	800b97e <__exponent+0x58>
	...

0800b99c <_printf_float>:
 800b99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a0:	b08d      	sub	sp, #52	@ 0x34
 800b9a2:	460c      	mov	r4, r1
 800b9a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b9a8:	4616      	mov	r6, r2
 800b9aa:	461f      	mov	r7, r3
 800b9ac:	4605      	mov	r5, r0
 800b9ae:	f000 fcef 	bl	800c390 <_localeconv_r>
 800b9b2:	6803      	ldr	r3, [r0, #0]
 800b9b4:	9304      	str	r3, [sp, #16]
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7f4 fc5a 	bl	8000270 <strlen>
 800b9bc:	2300      	movs	r3, #0
 800b9be:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9c0:	f8d8 3000 	ldr.w	r3, [r8]
 800b9c4:	9005      	str	r0, [sp, #20]
 800b9c6:	3307      	adds	r3, #7
 800b9c8:	f023 0307 	bic.w	r3, r3, #7
 800b9cc:	f103 0208 	add.w	r2, r3, #8
 800b9d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b9d4:	f8d4 b000 	ldr.w	fp, [r4]
 800b9d8:	f8c8 2000 	str.w	r2, [r8]
 800b9dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b9e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b9e4:	9307      	str	r3, [sp, #28]
 800b9e6:	f8cd 8018 	str.w	r8, [sp, #24]
 800b9ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b9ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9f2:	4b9c      	ldr	r3, [pc, #624]	@ (800bc64 <_printf_float+0x2c8>)
 800b9f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9f8:	f7f5 f898 	bl	8000b2c <__aeabi_dcmpun>
 800b9fc:	bb70      	cbnz	r0, 800ba5c <_printf_float+0xc0>
 800b9fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba02:	4b98      	ldr	r3, [pc, #608]	@ (800bc64 <_printf_float+0x2c8>)
 800ba04:	f04f 32ff 	mov.w	r2, #4294967295
 800ba08:	f7f5 f872 	bl	8000af0 <__aeabi_dcmple>
 800ba0c:	bb30      	cbnz	r0, 800ba5c <_printf_float+0xc0>
 800ba0e:	2200      	movs	r2, #0
 800ba10:	2300      	movs	r3, #0
 800ba12:	4640      	mov	r0, r8
 800ba14:	4649      	mov	r1, r9
 800ba16:	f7f5 f861 	bl	8000adc <__aeabi_dcmplt>
 800ba1a:	b110      	cbz	r0, 800ba22 <_printf_float+0x86>
 800ba1c:	232d      	movs	r3, #45	@ 0x2d
 800ba1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba22:	4a91      	ldr	r2, [pc, #580]	@ (800bc68 <_printf_float+0x2cc>)
 800ba24:	4b91      	ldr	r3, [pc, #580]	@ (800bc6c <_printf_float+0x2d0>)
 800ba26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ba2a:	bf94      	ite	ls
 800ba2c:	4690      	movls	r8, r2
 800ba2e:	4698      	movhi	r8, r3
 800ba30:	2303      	movs	r3, #3
 800ba32:	6123      	str	r3, [r4, #16]
 800ba34:	f02b 0304 	bic.w	r3, fp, #4
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	f04f 0900 	mov.w	r9, #0
 800ba3e:	9700      	str	r7, [sp, #0]
 800ba40:	4633      	mov	r3, r6
 800ba42:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ba44:	4621      	mov	r1, r4
 800ba46:	4628      	mov	r0, r5
 800ba48:	f000 f9d2 	bl	800bdf0 <_printf_common>
 800ba4c:	3001      	adds	r0, #1
 800ba4e:	f040 808d 	bne.w	800bb6c <_printf_float+0x1d0>
 800ba52:	f04f 30ff 	mov.w	r0, #4294967295
 800ba56:	b00d      	add	sp, #52	@ 0x34
 800ba58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba5c:	4642      	mov	r2, r8
 800ba5e:	464b      	mov	r3, r9
 800ba60:	4640      	mov	r0, r8
 800ba62:	4649      	mov	r1, r9
 800ba64:	f7f5 f862 	bl	8000b2c <__aeabi_dcmpun>
 800ba68:	b140      	cbz	r0, 800ba7c <_printf_float+0xe0>
 800ba6a:	464b      	mov	r3, r9
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	bfbc      	itt	lt
 800ba70:	232d      	movlt	r3, #45	@ 0x2d
 800ba72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ba76:	4a7e      	ldr	r2, [pc, #504]	@ (800bc70 <_printf_float+0x2d4>)
 800ba78:	4b7e      	ldr	r3, [pc, #504]	@ (800bc74 <_printf_float+0x2d8>)
 800ba7a:	e7d4      	b.n	800ba26 <_printf_float+0x8a>
 800ba7c:	6863      	ldr	r3, [r4, #4]
 800ba7e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ba82:	9206      	str	r2, [sp, #24]
 800ba84:	1c5a      	adds	r2, r3, #1
 800ba86:	d13b      	bne.n	800bb00 <_printf_float+0x164>
 800ba88:	2306      	movs	r3, #6
 800ba8a:	6063      	str	r3, [r4, #4]
 800ba8c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ba90:	2300      	movs	r3, #0
 800ba92:	6022      	str	r2, [r4, #0]
 800ba94:	9303      	str	r3, [sp, #12]
 800ba96:	ab0a      	add	r3, sp, #40	@ 0x28
 800ba98:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ba9c:	ab09      	add	r3, sp, #36	@ 0x24
 800ba9e:	9300      	str	r3, [sp, #0]
 800baa0:	6861      	ldr	r1, [r4, #4]
 800baa2:	ec49 8b10 	vmov	d0, r8, r9
 800baa6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800baaa:	4628      	mov	r0, r5
 800baac:	f7ff fed6 	bl	800b85c <__cvt>
 800bab0:	9b06      	ldr	r3, [sp, #24]
 800bab2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bab4:	2b47      	cmp	r3, #71	@ 0x47
 800bab6:	4680      	mov	r8, r0
 800bab8:	d129      	bne.n	800bb0e <_printf_float+0x172>
 800baba:	1cc8      	adds	r0, r1, #3
 800babc:	db02      	blt.n	800bac4 <_printf_float+0x128>
 800babe:	6863      	ldr	r3, [r4, #4]
 800bac0:	4299      	cmp	r1, r3
 800bac2:	dd41      	ble.n	800bb48 <_printf_float+0x1ac>
 800bac4:	f1aa 0a02 	sub.w	sl, sl, #2
 800bac8:	fa5f fa8a 	uxtb.w	sl, sl
 800bacc:	3901      	subs	r1, #1
 800bace:	4652      	mov	r2, sl
 800bad0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bad4:	9109      	str	r1, [sp, #36]	@ 0x24
 800bad6:	f7ff ff26 	bl	800b926 <__exponent>
 800bada:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800badc:	1813      	adds	r3, r2, r0
 800bade:	2a01      	cmp	r2, #1
 800bae0:	4681      	mov	r9, r0
 800bae2:	6123      	str	r3, [r4, #16]
 800bae4:	dc02      	bgt.n	800baec <_printf_float+0x150>
 800bae6:	6822      	ldr	r2, [r4, #0]
 800bae8:	07d2      	lsls	r2, r2, #31
 800baea:	d501      	bpl.n	800baf0 <_printf_float+0x154>
 800baec:	3301      	adds	r3, #1
 800baee:	6123      	str	r3, [r4, #16]
 800baf0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d0a2      	beq.n	800ba3e <_printf_float+0xa2>
 800baf8:	232d      	movs	r3, #45	@ 0x2d
 800bafa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bafe:	e79e      	b.n	800ba3e <_printf_float+0xa2>
 800bb00:	9a06      	ldr	r2, [sp, #24]
 800bb02:	2a47      	cmp	r2, #71	@ 0x47
 800bb04:	d1c2      	bne.n	800ba8c <_printf_float+0xf0>
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d1c0      	bne.n	800ba8c <_printf_float+0xf0>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e7bd      	b.n	800ba8a <_printf_float+0xee>
 800bb0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bb12:	d9db      	bls.n	800bacc <_printf_float+0x130>
 800bb14:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bb18:	d118      	bne.n	800bb4c <_printf_float+0x1b0>
 800bb1a:	2900      	cmp	r1, #0
 800bb1c:	6863      	ldr	r3, [r4, #4]
 800bb1e:	dd0b      	ble.n	800bb38 <_printf_float+0x19c>
 800bb20:	6121      	str	r1, [r4, #16]
 800bb22:	b913      	cbnz	r3, 800bb2a <_printf_float+0x18e>
 800bb24:	6822      	ldr	r2, [r4, #0]
 800bb26:	07d0      	lsls	r0, r2, #31
 800bb28:	d502      	bpl.n	800bb30 <_printf_float+0x194>
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	440b      	add	r3, r1
 800bb2e:	6123      	str	r3, [r4, #16]
 800bb30:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bb32:	f04f 0900 	mov.w	r9, #0
 800bb36:	e7db      	b.n	800baf0 <_printf_float+0x154>
 800bb38:	b913      	cbnz	r3, 800bb40 <_printf_float+0x1a4>
 800bb3a:	6822      	ldr	r2, [r4, #0]
 800bb3c:	07d2      	lsls	r2, r2, #31
 800bb3e:	d501      	bpl.n	800bb44 <_printf_float+0x1a8>
 800bb40:	3302      	adds	r3, #2
 800bb42:	e7f4      	b.n	800bb2e <_printf_float+0x192>
 800bb44:	2301      	movs	r3, #1
 800bb46:	e7f2      	b.n	800bb2e <_printf_float+0x192>
 800bb48:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bb4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb4e:	4299      	cmp	r1, r3
 800bb50:	db05      	blt.n	800bb5e <_printf_float+0x1c2>
 800bb52:	6823      	ldr	r3, [r4, #0]
 800bb54:	6121      	str	r1, [r4, #16]
 800bb56:	07d8      	lsls	r0, r3, #31
 800bb58:	d5ea      	bpl.n	800bb30 <_printf_float+0x194>
 800bb5a:	1c4b      	adds	r3, r1, #1
 800bb5c:	e7e7      	b.n	800bb2e <_printf_float+0x192>
 800bb5e:	2900      	cmp	r1, #0
 800bb60:	bfd4      	ite	le
 800bb62:	f1c1 0202 	rsble	r2, r1, #2
 800bb66:	2201      	movgt	r2, #1
 800bb68:	4413      	add	r3, r2
 800bb6a:	e7e0      	b.n	800bb2e <_printf_float+0x192>
 800bb6c:	6823      	ldr	r3, [r4, #0]
 800bb6e:	055a      	lsls	r2, r3, #21
 800bb70:	d407      	bmi.n	800bb82 <_printf_float+0x1e6>
 800bb72:	6923      	ldr	r3, [r4, #16]
 800bb74:	4642      	mov	r2, r8
 800bb76:	4631      	mov	r1, r6
 800bb78:	4628      	mov	r0, r5
 800bb7a:	47b8      	blx	r7
 800bb7c:	3001      	adds	r0, #1
 800bb7e:	d12b      	bne.n	800bbd8 <_printf_float+0x23c>
 800bb80:	e767      	b.n	800ba52 <_printf_float+0xb6>
 800bb82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bb86:	f240 80dd 	bls.w	800bd44 <_printf_float+0x3a8>
 800bb8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bb8e:	2200      	movs	r2, #0
 800bb90:	2300      	movs	r3, #0
 800bb92:	f7f4 ff99 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb96:	2800      	cmp	r0, #0
 800bb98:	d033      	beq.n	800bc02 <_printf_float+0x266>
 800bb9a:	4a37      	ldr	r2, [pc, #220]	@ (800bc78 <_printf_float+0x2dc>)
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	4631      	mov	r1, r6
 800bba0:	4628      	mov	r0, r5
 800bba2:	47b8      	blx	r7
 800bba4:	3001      	adds	r0, #1
 800bba6:	f43f af54 	beq.w	800ba52 <_printf_float+0xb6>
 800bbaa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bbae:	4543      	cmp	r3, r8
 800bbb0:	db02      	blt.n	800bbb8 <_printf_float+0x21c>
 800bbb2:	6823      	ldr	r3, [r4, #0]
 800bbb4:	07d8      	lsls	r0, r3, #31
 800bbb6:	d50f      	bpl.n	800bbd8 <_printf_float+0x23c>
 800bbb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbbc:	4631      	mov	r1, r6
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	47b8      	blx	r7
 800bbc2:	3001      	adds	r0, #1
 800bbc4:	f43f af45 	beq.w	800ba52 <_printf_float+0xb6>
 800bbc8:	f04f 0900 	mov.w	r9, #0
 800bbcc:	f108 38ff 	add.w	r8, r8, #4294967295
 800bbd0:	f104 0a1a 	add.w	sl, r4, #26
 800bbd4:	45c8      	cmp	r8, r9
 800bbd6:	dc09      	bgt.n	800bbec <_printf_float+0x250>
 800bbd8:	6823      	ldr	r3, [r4, #0]
 800bbda:	079b      	lsls	r3, r3, #30
 800bbdc:	f100 8103 	bmi.w	800bde6 <_printf_float+0x44a>
 800bbe0:	68e0      	ldr	r0, [r4, #12]
 800bbe2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bbe4:	4298      	cmp	r0, r3
 800bbe6:	bfb8      	it	lt
 800bbe8:	4618      	movlt	r0, r3
 800bbea:	e734      	b.n	800ba56 <_printf_float+0xba>
 800bbec:	2301      	movs	r3, #1
 800bbee:	4652      	mov	r2, sl
 800bbf0:	4631      	mov	r1, r6
 800bbf2:	4628      	mov	r0, r5
 800bbf4:	47b8      	blx	r7
 800bbf6:	3001      	adds	r0, #1
 800bbf8:	f43f af2b 	beq.w	800ba52 <_printf_float+0xb6>
 800bbfc:	f109 0901 	add.w	r9, r9, #1
 800bc00:	e7e8      	b.n	800bbd4 <_printf_float+0x238>
 800bc02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	dc39      	bgt.n	800bc7c <_printf_float+0x2e0>
 800bc08:	4a1b      	ldr	r2, [pc, #108]	@ (800bc78 <_printf_float+0x2dc>)
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	4631      	mov	r1, r6
 800bc0e:	4628      	mov	r0, r5
 800bc10:	47b8      	blx	r7
 800bc12:	3001      	adds	r0, #1
 800bc14:	f43f af1d 	beq.w	800ba52 <_printf_float+0xb6>
 800bc18:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bc1c:	ea59 0303 	orrs.w	r3, r9, r3
 800bc20:	d102      	bne.n	800bc28 <_printf_float+0x28c>
 800bc22:	6823      	ldr	r3, [r4, #0]
 800bc24:	07d9      	lsls	r1, r3, #31
 800bc26:	d5d7      	bpl.n	800bbd8 <_printf_float+0x23c>
 800bc28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc2c:	4631      	mov	r1, r6
 800bc2e:	4628      	mov	r0, r5
 800bc30:	47b8      	blx	r7
 800bc32:	3001      	adds	r0, #1
 800bc34:	f43f af0d 	beq.w	800ba52 <_printf_float+0xb6>
 800bc38:	f04f 0a00 	mov.w	sl, #0
 800bc3c:	f104 0b1a 	add.w	fp, r4, #26
 800bc40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc42:	425b      	negs	r3, r3
 800bc44:	4553      	cmp	r3, sl
 800bc46:	dc01      	bgt.n	800bc4c <_printf_float+0x2b0>
 800bc48:	464b      	mov	r3, r9
 800bc4a:	e793      	b.n	800bb74 <_printf_float+0x1d8>
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	465a      	mov	r2, fp
 800bc50:	4631      	mov	r1, r6
 800bc52:	4628      	mov	r0, r5
 800bc54:	47b8      	blx	r7
 800bc56:	3001      	adds	r0, #1
 800bc58:	f43f aefb 	beq.w	800ba52 <_printf_float+0xb6>
 800bc5c:	f10a 0a01 	add.w	sl, sl, #1
 800bc60:	e7ee      	b.n	800bc40 <_printf_float+0x2a4>
 800bc62:	bf00      	nop
 800bc64:	7fefffff 	.word	0x7fefffff
 800bc68:	0800f1fc 	.word	0x0800f1fc
 800bc6c:	0800f200 	.word	0x0800f200
 800bc70:	0800f204 	.word	0x0800f204
 800bc74:	0800f208 	.word	0x0800f208
 800bc78:	0800f20c 	.word	0x0800f20c
 800bc7c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bc7e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bc82:	4553      	cmp	r3, sl
 800bc84:	bfa8      	it	ge
 800bc86:	4653      	movge	r3, sl
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	4699      	mov	r9, r3
 800bc8c:	dc36      	bgt.n	800bcfc <_printf_float+0x360>
 800bc8e:	f04f 0b00 	mov.w	fp, #0
 800bc92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc96:	f104 021a 	add.w	r2, r4, #26
 800bc9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bc9c:	9306      	str	r3, [sp, #24]
 800bc9e:	eba3 0309 	sub.w	r3, r3, r9
 800bca2:	455b      	cmp	r3, fp
 800bca4:	dc31      	bgt.n	800bd0a <_printf_float+0x36e>
 800bca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bca8:	459a      	cmp	sl, r3
 800bcaa:	dc3a      	bgt.n	800bd22 <_printf_float+0x386>
 800bcac:	6823      	ldr	r3, [r4, #0]
 800bcae:	07da      	lsls	r2, r3, #31
 800bcb0:	d437      	bmi.n	800bd22 <_printf_float+0x386>
 800bcb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcb4:	ebaa 0903 	sub.w	r9, sl, r3
 800bcb8:	9b06      	ldr	r3, [sp, #24]
 800bcba:	ebaa 0303 	sub.w	r3, sl, r3
 800bcbe:	4599      	cmp	r9, r3
 800bcc0:	bfa8      	it	ge
 800bcc2:	4699      	movge	r9, r3
 800bcc4:	f1b9 0f00 	cmp.w	r9, #0
 800bcc8:	dc33      	bgt.n	800bd32 <_printf_float+0x396>
 800bcca:	f04f 0800 	mov.w	r8, #0
 800bcce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bcd2:	f104 0b1a 	add.w	fp, r4, #26
 800bcd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcd8:	ebaa 0303 	sub.w	r3, sl, r3
 800bcdc:	eba3 0309 	sub.w	r3, r3, r9
 800bce0:	4543      	cmp	r3, r8
 800bce2:	f77f af79 	ble.w	800bbd8 <_printf_float+0x23c>
 800bce6:	2301      	movs	r3, #1
 800bce8:	465a      	mov	r2, fp
 800bcea:	4631      	mov	r1, r6
 800bcec:	4628      	mov	r0, r5
 800bcee:	47b8      	blx	r7
 800bcf0:	3001      	adds	r0, #1
 800bcf2:	f43f aeae 	beq.w	800ba52 <_printf_float+0xb6>
 800bcf6:	f108 0801 	add.w	r8, r8, #1
 800bcfa:	e7ec      	b.n	800bcd6 <_printf_float+0x33a>
 800bcfc:	4642      	mov	r2, r8
 800bcfe:	4631      	mov	r1, r6
 800bd00:	4628      	mov	r0, r5
 800bd02:	47b8      	blx	r7
 800bd04:	3001      	adds	r0, #1
 800bd06:	d1c2      	bne.n	800bc8e <_printf_float+0x2f2>
 800bd08:	e6a3      	b.n	800ba52 <_printf_float+0xb6>
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	4631      	mov	r1, r6
 800bd0e:	4628      	mov	r0, r5
 800bd10:	9206      	str	r2, [sp, #24]
 800bd12:	47b8      	blx	r7
 800bd14:	3001      	adds	r0, #1
 800bd16:	f43f ae9c 	beq.w	800ba52 <_printf_float+0xb6>
 800bd1a:	9a06      	ldr	r2, [sp, #24]
 800bd1c:	f10b 0b01 	add.w	fp, fp, #1
 800bd20:	e7bb      	b.n	800bc9a <_printf_float+0x2fe>
 800bd22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd26:	4631      	mov	r1, r6
 800bd28:	4628      	mov	r0, r5
 800bd2a:	47b8      	blx	r7
 800bd2c:	3001      	adds	r0, #1
 800bd2e:	d1c0      	bne.n	800bcb2 <_printf_float+0x316>
 800bd30:	e68f      	b.n	800ba52 <_printf_float+0xb6>
 800bd32:	9a06      	ldr	r2, [sp, #24]
 800bd34:	464b      	mov	r3, r9
 800bd36:	4442      	add	r2, r8
 800bd38:	4631      	mov	r1, r6
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	47b8      	blx	r7
 800bd3e:	3001      	adds	r0, #1
 800bd40:	d1c3      	bne.n	800bcca <_printf_float+0x32e>
 800bd42:	e686      	b.n	800ba52 <_printf_float+0xb6>
 800bd44:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bd48:	f1ba 0f01 	cmp.w	sl, #1
 800bd4c:	dc01      	bgt.n	800bd52 <_printf_float+0x3b6>
 800bd4e:	07db      	lsls	r3, r3, #31
 800bd50:	d536      	bpl.n	800bdc0 <_printf_float+0x424>
 800bd52:	2301      	movs	r3, #1
 800bd54:	4642      	mov	r2, r8
 800bd56:	4631      	mov	r1, r6
 800bd58:	4628      	mov	r0, r5
 800bd5a:	47b8      	blx	r7
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	f43f ae78 	beq.w	800ba52 <_printf_float+0xb6>
 800bd62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd66:	4631      	mov	r1, r6
 800bd68:	4628      	mov	r0, r5
 800bd6a:	47b8      	blx	r7
 800bd6c:	3001      	adds	r0, #1
 800bd6e:	f43f ae70 	beq.w	800ba52 <_printf_float+0xb6>
 800bd72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bd76:	2200      	movs	r2, #0
 800bd78:	2300      	movs	r3, #0
 800bd7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd7e:	f7f4 fea3 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd82:	b9c0      	cbnz	r0, 800bdb6 <_printf_float+0x41a>
 800bd84:	4653      	mov	r3, sl
 800bd86:	f108 0201 	add.w	r2, r8, #1
 800bd8a:	4631      	mov	r1, r6
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	47b8      	blx	r7
 800bd90:	3001      	adds	r0, #1
 800bd92:	d10c      	bne.n	800bdae <_printf_float+0x412>
 800bd94:	e65d      	b.n	800ba52 <_printf_float+0xb6>
 800bd96:	2301      	movs	r3, #1
 800bd98:	465a      	mov	r2, fp
 800bd9a:	4631      	mov	r1, r6
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	47b8      	blx	r7
 800bda0:	3001      	adds	r0, #1
 800bda2:	f43f ae56 	beq.w	800ba52 <_printf_float+0xb6>
 800bda6:	f108 0801 	add.w	r8, r8, #1
 800bdaa:	45d0      	cmp	r8, sl
 800bdac:	dbf3      	blt.n	800bd96 <_printf_float+0x3fa>
 800bdae:	464b      	mov	r3, r9
 800bdb0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bdb4:	e6df      	b.n	800bb76 <_printf_float+0x1da>
 800bdb6:	f04f 0800 	mov.w	r8, #0
 800bdba:	f104 0b1a 	add.w	fp, r4, #26
 800bdbe:	e7f4      	b.n	800bdaa <_printf_float+0x40e>
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	4642      	mov	r2, r8
 800bdc4:	e7e1      	b.n	800bd8a <_printf_float+0x3ee>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	464a      	mov	r2, r9
 800bdca:	4631      	mov	r1, r6
 800bdcc:	4628      	mov	r0, r5
 800bdce:	47b8      	blx	r7
 800bdd0:	3001      	adds	r0, #1
 800bdd2:	f43f ae3e 	beq.w	800ba52 <_printf_float+0xb6>
 800bdd6:	f108 0801 	add.w	r8, r8, #1
 800bdda:	68e3      	ldr	r3, [r4, #12]
 800bddc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bdde:	1a5b      	subs	r3, r3, r1
 800bde0:	4543      	cmp	r3, r8
 800bde2:	dcf0      	bgt.n	800bdc6 <_printf_float+0x42a>
 800bde4:	e6fc      	b.n	800bbe0 <_printf_float+0x244>
 800bde6:	f04f 0800 	mov.w	r8, #0
 800bdea:	f104 0919 	add.w	r9, r4, #25
 800bdee:	e7f4      	b.n	800bdda <_printf_float+0x43e>

0800bdf0 <_printf_common>:
 800bdf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdf4:	4616      	mov	r6, r2
 800bdf6:	4698      	mov	r8, r3
 800bdf8:	688a      	ldr	r2, [r1, #8]
 800bdfa:	690b      	ldr	r3, [r1, #16]
 800bdfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be00:	4293      	cmp	r3, r2
 800be02:	bfb8      	it	lt
 800be04:	4613      	movlt	r3, r2
 800be06:	6033      	str	r3, [r6, #0]
 800be08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be0c:	4607      	mov	r7, r0
 800be0e:	460c      	mov	r4, r1
 800be10:	b10a      	cbz	r2, 800be16 <_printf_common+0x26>
 800be12:	3301      	adds	r3, #1
 800be14:	6033      	str	r3, [r6, #0]
 800be16:	6823      	ldr	r3, [r4, #0]
 800be18:	0699      	lsls	r1, r3, #26
 800be1a:	bf42      	ittt	mi
 800be1c:	6833      	ldrmi	r3, [r6, #0]
 800be1e:	3302      	addmi	r3, #2
 800be20:	6033      	strmi	r3, [r6, #0]
 800be22:	6825      	ldr	r5, [r4, #0]
 800be24:	f015 0506 	ands.w	r5, r5, #6
 800be28:	d106      	bne.n	800be38 <_printf_common+0x48>
 800be2a:	f104 0a19 	add.w	sl, r4, #25
 800be2e:	68e3      	ldr	r3, [r4, #12]
 800be30:	6832      	ldr	r2, [r6, #0]
 800be32:	1a9b      	subs	r3, r3, r2
 800be34:	42ab      	cmp	r3, r5
 800be36:	dc26      	bgt.n	800be86 <_printf_common+0x96>
 800be38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800be3c:	6822      	ldr	r2, [r4, #0]
 800be3e:	3b00      	subs	r3, #0
 800be40:	bf18      	it	ne
 800be42:	2301      	movne	r3, #1
 800be44:	0692      	lsls	r2, r2, #26
 800be46:	d42b      	bmi.n	800bea0 <_printf_common+0xb0>
 800be48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800be4c:	4641      	mov	r1, r8
 800be4e:	4638      	mov	r0, r7
 800be50:	47c8      	blx	r9
 800be52:	3001      	adds	r0, #1
 800be54:	d01e      	beq.n	800be94 <_printf_common+0xa4>
 800be56:	6823      	ldr	r3, [r4, #0]
 800be58:	6922      	ldr	r2, [r4, #16]
 800be5a:	f003 0306 	and.w	r3, r3, #6
 800be5e:	2b04      	cmp	r3, #4
 800be60:	bf02      	ittt	eq
 800be62:	68e5      	ldreq	r5, [r4, #12]
 800be64:	6833      	ldreq	r3, [r6, #0]
 800be66:	1aed      	subeq	r5, r5, r3
 800be68:	68a3      	ldr	r3, [r4, #8]
 800be6a:	bf0c      	ite	eq
 800be6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be70:	2500      	movne	r5, #0
 800be72:	4293      	cmp	r3, r2
 800be74:	bfc4      	itt	gt
 800be76:	1a9b      	subgt	r3, r3, r2
 800be78:	18ed      	addgt	r5, r5, r3
 800be7a:	2600      	movs	r6, #0
 800be7c:	341a      	adds	r4, #26
 800be7e:	42b5      	cmp	r5, r6
 800be80:	d11a      	bne.n	800beb8 <_printf_common+0xc8>
 800be82:	2000      	movs	r0, #0
 800be84:	e008      	b.n	800be98 <_printf_common+0xa8>
 800be86:	2301      	movs	r3, #1
 800be88:	4652      	mov	r2, sl
 800be8a:	4641      	mov	r1, r8
 800be8c:	4638      	mov	r0, r7
 800be8e:	47c8      	blx	r9
 800be90:	3001      	adds	r0, #1
 800be92:	d103      	bne.n	800be9c <_printf_common+0xac>
 800be94:	f04f 30ff 	mov.w	r0, #4294967295
 800be98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be9c:	3501      	adds	r5, #1
 800be9e:	e7c6      	b.n	800be2e <_printf_common+0x3e>
 800bea0:	18e1      	adds	r1, r4, r3
 800bea2:	1c5a      	adds	r2, r3, #1
 800bea4:	2030      	movs	r0, #48	@ 0x30
 800bea6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800beaa:	4422      	add	r2, r4
 800beac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800beb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800beb4:	3302      	adds	r3, #2
 800beb6:	e7c7      	b.n	800be48 <_printf_common+0x58>
 800beb8:	2301      	movs	r3, #1
 800beba:	4622      	mov	r2, r4
 800bebc:	4641      	mov	r1, r8
 800bebe:	4638      	mov	r0, r7
 800bec0:	47c8      	blx	r9
 800bec2:	3001      	adds	r0, #1
 800bec4:	d0e6      	beq.n	800be94 <_printf_common+0xa4>
 800bec6:	3601      	adds	r6, #1
 800bec8:	e7d9      	b.n	800be7e <_printf_common+0x8e>
	...

0800becc <_printf_i>:
 800becc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bed0:	7e0f      	ldrb	r7, [r1, #24]
 800bed2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bed4:	2f78      	cmp	r7, #120	@ 0x78
 800bed6:	4691      	mov	r9, r2
 800bed8:	4680      	mov	r8, r0
 800beda:	460c      	mov	r4, r1
 800bedc:	469a      	mov	sl, r3
 800bede:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bee2:	d807      	bhi.n	800bef4 <_printf_i+0x28>
 800bee4:	2f62      	cmp	r7, #98	@ 0x62
 800bee6:	d80a      	bhi.n	800befe <_printf_i+0x32>
 800bee8:	2f00      	cmp	r7, #0
 800beea:	f000 80d2 	beq.w	800c092 <_printf_i+0x1c6>
 800beee:	2f58      	cmp	r7, #88	@ 0x58
 800bef0:	f000 80b9 	beq.w	800c066 <_printf_i+0x19a>
 800bef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bef8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800befc:	e03a      	b.n	800bf74 <_printf_i+0xa8>
 800befe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bf02:	2b15      	cmp	r3, #21
 800bf04:	d8f6      	bhi.n	800bef4 <_printf_i+0x28>
 800bf06:	a101      	add	r1, pc, #4	@ (adr r1, 800bf0c <_printf_i+0x40>)
 800bf08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf0c:	0800bf65 	.word	0x0800bf65
 800bf10:	0800bf79 	.word	0x0800bf79
 800bf14:	0800bef5 	.word	0x0800bef5
 800bf18:	0800bef5 	.word	0x0800bef5
 800bf1c:	0800bef5 	.word	0x0800bef5
 800bf20:	0800bef5 	.word	0x0800bef5
 800bf24:	0800bf79 	.word	0x0800bf79
 800bf28:	0800bef5 	.word	0x0800bef5
 800bf2c:	0800bef5 	.word	0x0800bef5
 800bf30:	0800bef5 	.word	0x0800bef5
 800bf34:	0800bef5 	.word	0x0800bef5
 800bf38:	0800c079 	.word	0x0800c079
 800bf3c:	0800bfa3 	.word	0x0800bfa3
 800bf40:	0800c033 	.word	0x0800c033
 800bf44:	0800bef5 	.word	0x0800bef5
 800bf48:	0800bef5 	.word	0x0800bef5
 800bf4c:	0800c09b 	.word	0x0800c09b
 800bf50:	0800bef5 	.word	0x0800bef5
 800bf54:	0800bfa3 	.word	0x0800bfa3
 800bf58:	0800bef5 	.word	0x0800bef5
 800bf5c:	0800bef5 	.word	0x0800bef5
 800bf60:	0800c03b 	.word	0x0800c03b
 800bf64:	6833      	ldr	r3, [r6, #0]
 800bf66:	1d1a      	adds	r2, r3, #4
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	6032      	str	r2, [r6, #0]
 800bf6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bf74:	2301      	movs	r3, #1
 800bf76:	e09d      	b.n	800c0b4 <_printf_i+0x1e8>
 800bf78:	6833      	ldr	r3, [r6, #0]
 800bf7a:	6820      	ldr	r0, [r4, #0]
 800bf7c:	1d19      	adds	r1, r3, #4
 800bf7e:	6031      	str	r1, [r6, #0]
 800bf80:	0606      	lsls	r6, r0, #24
 800bf82:	d501      	bpl.n	800bf88 <_printf_i+0xbc>
 800bf84:	681d      	ldr	r5, [r3, #0]
 800bf86:	e003      	b.n	800bf90 <_printf_i+0xc4>
 800bf88:	0645      	lsls	r5, r0, #25
 800bf8a:	d5fb      	bpl.n	800bf84 <_printf_i+0xb8>
 800bf8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bf90:	2d00      	cmp	r5, #0
 800bf92:	da03      	bge.n	800bf9c <_printf_i+0xd0>
 800bf94:	232d      	movs	r3, #45	@ 0x2d
 800bf96:	426d      	negs	r5, r5
 800bf98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf9c:	4859      	ldr	r0, [pc, #356]	@ (800c104 <_printf_i+0x238>)
 800bf9e:	230a      	movs	r3, #10
 800bfa0:	e011      	b.n	800bfc6 <_printf_i+0xfa>
 800bfa2:	6821      	ldr	r1, [r4, #0]
 800bfa4:	6833      	ldr	r3, [r6, #0]
 800bfa6:	0608      	lsls	r0, r1, #24
 800bfa8:	f853 5b04 	ldr.w	r5, [r3], #4
 800bfac:	d402      	bmi.n	800bfb4 <_printf_i+0xe8>
 800bfae:	0649      	lsls	r1, r1, #25
 800bfb0:	bf48      	it	mi
 800bfb2:	b2ad      	uxthmi	r5, r5
 800bfb4:	2f6f      	cmp	r7, #111	@ 0x6f
 800bfb6:	4853      	ldr	r0, [pc, #332]	@ (800c104 <_printf_i+0x238>)
 800bfb8:	6033      	str	r3, [r6, #0]
 800bfba:	bf14      	ite	ne
 800bfbc:	230a      	movne	r3, #10
 800bfbe:	2308      	moveq	r3, #8
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bfc6:	6866      	ldr	r6, [r4, #4]
 800bfc8:	60a6      	str	r6, [r4, #8]
 800bfca:	2e00      	cmp	r6, #0
 800bfcc:	bfa2      	ittt	ge
 800bfce:	6821      	ldrge	r1, [r4, #0]
 800bfd0:	f021 0104 	bicge.w	r1, r1, #4
 800bfd4:	6021      	strge	r1, [r4, #0]
 800bfd6:	b90d      	cbnz	r5, 800bfdc <_printf_i+0x110>
 800bfd8:	2e00      	cmp	r6, #0
 800bfda:	d04b      	beq.n	800c074 <_printf_i+0x1a8>
 800bfdc:	4616      	mov	r6, r2
 800bfde:	fbb5 f1f3 	udiv	r1, r5, r3
 800bfe2:	fb03 5711 	mls	r7, r3, r1, r5
 800bfe6:	5dc7      	ldrb	r7, [r0, r7]
 800bfe8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bfec:	462f      	mov	r7, r5
 800bfee:	42bb      	cmp	r3, r7
 800bff0:	460d      	mov	r5, r1
 800bff2:	d9f4      	bls.n	800bfde <_printf_i+0x112>
 800bff4:	2b08      	cmp	r3, #8
 800bff6:	d10b      	bne.n	800c010 <_printf_i+0x144>
 800bff8:	6823      	ldr	r3, [r4, #0]
 800bffa:	07df      	lsls	r7, r3, #31
 800bffc:	d508      	bpl.n	800c010 <_printf_i+0x144>
 800bffe:	6923      	ldr	r3, [r4, #16]
 800c000:	6861      	ldr	r1, [r4, #4]
 800c002:	4299      	cmp	r1, r3
 800c004:	bfde      	ittt	le
 800c006:	2330      	movle	r3, #48	@ 0x30
 800c008:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c00c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c010:	1b92      	subs	r2, r2, r6
 800c012:	6122      	str	r2, [r4, #16]
 800c014:	f8cd a000 	str.w	sl, [sp]
 800c018:	464b      	mov	r3, r9
 800c01a:	aa03      	add	r2, sp, #12
 800c01c:	4621      	mov	r1, r4
 800c01e:	4640      	mov	r0, r8
 800c020:	f7ff fee6 	bl	800bdf0 <_printf_common>
 800c024:	3001      	adds	r0, #1
 800c026:	d14a      	bne.n	800c0be <_printf_i+0x1f2>
 800c028:	f04f 30ff 	mov.w	r0, #4294967295
 800c02c:	b004      	add	sp, #16
 800c02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c032:	6823      	ldr	r3, [r4, #0]
 800c034:	f043 0320 	orr.w	r3, r3, #32
 800c038:	6023      	str	r3, [r4, #0]
 800c03a:	4833      	ldr	r0, [pc, #204]	@ (800c108 <_printf_i+0x23c>)
 800c03c:	2778      	movs	r7, #120	@ 0x78
 800c03e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c042:	6823      	ldr	r3, [r4, #0]
 800c044:	6831      	ldr	r1, [r6, #0]
 800c046:	061f      	lsls	r7, r3, #24
 800c048:	f851 5b04 	ldr.w	r5, [r1], #4
 800c04c:	d402      	bmi.n	800c054 <_printf_i+0x188>
 800c04e:	065f      	lsls	r7, r3, #25
 800c050:	bf48      	it	mi
 800c052:	b2ad      	uxthmi	r5, r5
 800c054:	6031      	str	r1, [r6, #0]
 800c056:	07d9      	lsls	r1, r3, #31
 800c058:	bf44      	itt	mi
 800c05a:	f043 0320 	orrmi.w	r3, r3, #32
 800c05e:	6023      	strmi	r3, [r4, #0]
 800c060:	b11d      	cbz	r5, 800c06a <_printf_i+0x19e>
 800c062:	2310      	movs	r3, #16
 800c064:	e7ac      	b.n	800bfc0 <_printf_i+0xf4>
 800c066:	4827      	ldr	r0, [pc, #156]	@ (800c104 <_printf_i+0x238>)
 800c068:	e7e9      	b.n	800c03e <_printf_i+0x172>
 800c06a:	6823      	ldr	r3, [r4, #0]
 800c06c:	f023 0320 	bic.w	r3, r3, #32
 800c070:	6023      	str	r3, [r4, #0]
 800c072:	e7f6      	b.n	800c062 <_printf_i+0x196>
 800c074:	4616      	mov	r6, r2
 800c076:	e7bd      	b.n	800bff4 <_printf_i+0x128>
 800c078:	6833      	ldr	r3, [r6, #0]
 800c07a:	6825      	ldr	r5, [r4, #0]
 800c07c:	6961      	ldr	r1, [r4, #20]
 800c07e:	1d18      	adds	r0, r3, #4
 800c080:	6030      	str	r0, [r6, #0]
 800c082:	062e      	lsls	r6, r5, #24
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	d501      	bpl.n	800c08c <_printf_i+0x1c0>
 800c088:	6019      	str	r1, [r3, #0]
 800c08a:	e002      	b.n	800c092 <_printf_i+0x1c6>
 800c08c:	0668      	lsls	r0, r5, #25
 800c08e:	d5fb      	bpl.n	800c088 <_printf_i+0x1bc>
 800c090:	8019      	strh	r1, [r3, #0]
 800c092:	2300      	movs	r3, #0
 800c094:	6123      	str	r3, [r4, #16]
 800c096:	4616      	mov	r6, r2
 800c098:	e7bc      	b.n	800c014 <_printf_i+0x148>
 800c09a:	6833      	ldr	r3, [r6, #0]
 800c09c:	1d1a      	adds	r2, r3, #4
 800c09e:	6032      	str	r2, [r6, #0]
 800c0a0:	681e      	ldr	r6, [r3, #0]
 800c0a2:	6862      	ldr	r2, [r4, #4]
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	f7f4 f892 	bl	80001d0 <memchr>
 800c0ac:	b108      	cbz	r0, 800c0b2 <_printf_i+0x1e6>
 800c0ae:	1b80      	subs	r0, r0, r6
 800c0b0:	6060      	str	r0, [r4, #4]
 800c0b2:	6863      	ldr	r3, [r4, #4]
 800c0b4:	6123      	str	r3, [r4, #16]
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0bc:	e7aa      	b.n	800c014 <_printf_i+0x148>
 800c0be:	6923      	ldr	r3, [r4, #16]
 800c0c0:	4632      	mov	r2, r6
 800c0c2:	4649      	mov	r1, r9
 800c0c4:	4640      	mov	r0, r8
 800c0c6:	47d0      	blx	sl
 800c0c8:	3001      	adds	r0, #1
 800c0ca:	d0ad      	beq.n	800c028 <_printf_i+0x15c>
 800c0cc:	6823      	ldr	r3, [r4, #0]
 800c0ce:	079b      	lsls	r3, r3, #30
 800c0d0:	d413      	bmi.n	800c0fa <_printf_i+0x22e>
 800c0d2:	68e0      	ldr	r0, [r4, #12]
 800c0d4:	9b03      	ldr	r3, [sp, #12]
 800c0d6:	4298      	cmp	r0, r3
 800c0d8:	bfb8      	it	lt
 800c0da:	4618      	movlt	r0, r3
 800c0dc:	e7a6      	b.n	800c02c <_printf_i+0x160>
 800c0de:	2301      	movs	r3, #1
 800c0e0:	4632      	mov	r2, r6
 800c0e2:	4649      	mov	r1, r9
 800c0e4:	4640      	mov	r0, r8
 800c0e6:	47d0      	blx	sl
 800c0e8:	3001      	adds	r0, #1
 800c0ea:	d09d      	beq.n	800c028 <_printf_i+0x15c>
 800c0ec:	3501      	adds	r5, #1
 800c0ee:	68e3      	ldr	r3, [r4, #12]
 800c0f0:	9903      	ldr	r1, [sp, #12]
 800c0f2:	1a5b      	subs	r3, r3, r1
 800c0f4:	42ab      	cmp	r3, r5
 800c0f6:	dcf2      	bgt.n	800c0de <_printf_i+0x212>
 800c0f8:	e7eb      	b.n	800c0d2 <_printf_i+0x206>
 800c0fa:	2500      	movs	r5, #0
 800c0fc:	f104 0619 	add.w	r6, r4, #25
 800c100:	e7f5      	b.n	800c0ee <_printf_i+0x222>
 800c102:	bf00      	nop
 800c104:	0800f20e 	.word	0x0800f20e
 800c108:	0800f21f 	.word	0x0800f21f

0800c10c <std>:
 800c10c:	2300      	movs	r3, #0
 800c10e:	b510      	push	{r4, lr}
 800c110:	4604      	mov	r4, r0
 800c112:	e9c0 3300 	strd	r3, r3, [r0]
 800c116:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c11a:	6083      	str	r3, [r0, #8]
 800c11c:	8181      	strh	r1, [r0, #12]
 800c11e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c120:	81c2      	strh	r2, [r0, #14]
 800c122:	6183      	str	r3, [r0, #24]
 800c124:	4619      	mov	r1, r3
 800c126:	2208      	movs	r2, #8
 800c128:	305c      	adds	r0, #92	@ 0x5c
 800c12a:	f000 f928 	bl	800c37e <memset>
 800c12e:	4b0d      	ldr	r3, [pc, #52]	@ (800c164 <std+0x58>)
 800c130:	6263      	str	r3, [r4, #36]	@ 0x24
 800c132:	4b0d      	ldr	r3, [pc, #52]	@ (800c168 <std+0x5c>)
 800c134:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c136:	4b0d      	ldr	r3, [pc, #52]	@ (800c16c <std+0x60>)
 800c138:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c13a:	4b0d      	ldr	r3, [pc, #52]	@ (800c170 <std+0x64>)
 800c13c:	6323      	str	r3, [r4, #48]	@ 0x30
 800c13e:	4b0d      	ldr	r3, [pc, #52]	@ (800c174 <std+0x68>)
 800c140:	6224      	str	r4, [r4, #32]
 800c142:	429c      	cmp	r4, r3
 800c144:	d006      	beq.n	800c154 <std+0x48>
 800c146:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c14a:	4294      	cmp	r4, r2
 800c14c:	d002      	beq.n	800c154 <std+0x48>
 800c14e:	33d0      	adds	r3, #208	@ 0xd0
 800c150:	429c      	cmp	r4, r3
 800c152:	d105      	bne.n	800c160 <std+0x54>
 800c154:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c15c:	f000 b98c 	b.w	800c478 <__retarget_lock_init_recursive>
 800c160:	bd10      	pop	{r4, pc}
 800c162:	bf00      	nop
 800c164:	0800c2f9 	.word	0x0800c2f9
 800c168:	0800c31b 	.word	0x0800c31b
 800c16c:	0800c353 	.word	0x0800c353
 800c170:	0800c377 	.word	0x0800c377
 800c174:	200052d4 	.word	0x200052d4

0800c178 <stdio_exit_handler>:
 800c178:	4a02      	ldr	r2, [pc, #8]	@ (800c184 <stdio_exit_handler+0xc>)
 800c17a:	4903      	ldr	r1, [pc, #12]	@ (800c188 <stdio_exit_handler+0x10>)
 800c17c:	4803      	ldr	r0, [pc, #12]	@ (800c18c <stdio_exit_handler+0x14>)
 800c17e:	f000 b869 	b.w	800c254 <_fwalk_sglue>
 800c182:	bf00      	nop
 800c184:	20000028 	.word	0x20000028
 800c188:	0800ddf5 	.word	0x0800ddf5
 800c18c:	20000038 	.word	0x20000038

0800c190 <cleanup_stdio>:
 800c190:	6841      	ldr	r1, [r0, #4]
 800c192:	4b0c      	ldr	r3, [pc, #48]	@ (800c1c4 <cleanup_stdio+0x34>)
 800c194:	4299      	cmp	r1, r3
 800c196:	b510      	push	{r4, lr}
 800c198:	4604      	mov	r4, r0
 800c19a:	d001      	beq.n	800c1a0 <cleanup_stdio+0x10>
 800c19c:	f001 fe2a 	bl	800ddf4 <_fflush_r>
 800c1a0:	68a1      	ldr	r1, [r4, #8]
 800c1a2:	4b09      	ldr	r3, [pc, #36]	@ (800c1c8 <cleanup_stdio+0x38>)
 800c1a4:	4299      	cmp	r1, r3
 800c1a6:	d002      	beq.n	800c1ae <cleanup_stdio+0x1e>
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	f001 fe23 	bl	800ddf4 <_fflush_r>
 800c1ae:	68e1      	ldr	r1, [r4, #12]
 800c1b0:	4b06      	ldr	r3, [pc, #24]	@ (800c1cc <cleanup_stdio+0x3c>)
 800c1b2:	4299      	cmp	r1, r3
 800c1b4:	d004      	beq.n	800c1c0 <cleanup_stdio+0x30>
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1bc:	f001 be1a 	b.w	800ddf4 <_fflush_r>
 800c1c0:	bd10      	pop	{r4, pc}
 800c1c2:	bf00      	nop
 800c1c4:	200052d4 	.word	0x200052d4
 800c1c8:	2000533c 	.word	0x2000533c
 800c1cc:	200053a4 	.word	0x200053a4

0800c1d0 <global_stdio_init.part.0>:
 800c1d0:	b510      	push	{r4, lr}
 800c1d2:	4b0b      	ldr	r3, [pc, #44]	@ (800c200 <global_stdio_init.part.0+0x30>)
 800c1d4:	4c0b      	ldr	r4, [pc, #44]	@ (800c204 <global_stdio_init.part.0+0x34>)
 800c1d6:	4a0c      	ldr	r2, [pc, #48]	@ (800c208 <global_stdio_init.part.0+0x38>)
 800c1d8:	601a      	str	r2, [r3, #0]
 800c1da:	4620      	mov	r0, r4
 800c1dc:	2200      	movs	r2, #0
 800c1de:	2104      	movs	r1, #4
 800c1e0:	f7ff ff94 	bl	800c10c <std>
 800c1e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	2109      	movs	r1, #9
 800c1ec:	f7ff ff8e 	bl	800c10c <std>
 800c1f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c1f4:	2202      	movs	r2, #2
 800c1f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1fa:	2112      	movs	r1, #18
 800c1fc:	f7ff bf86 	b.w	800c10c <std>
 800c200:	2000540c 	.word	0x2000540c
 800c204:	200052d4 	.word	0x200052d4
 800c208:	0800c179 	.word	0x0800c179

0800c20c <__sfp_lock_acquire>:
 800c20c:	4801      	ldr	r0, [pc, #4]	@ (800c214 <__sfp_lock_acquire+0x8>)
 800c20e:	f000 b934 	b.w	800c47a <__retarget_lock_acquire_recursive>
 800c212:	bf00      	nop
 800c214:	20005415 	.word	0x20005415

0800c218 <__sfp_lock_release>:
 800c218:	4801      	ldr	r0, [pc, #4]	@ (800c220 <__sfp_lock_release+0x8>)
 800c21a:	f000 b92f 	b.w	800c47c <__retarget_lock_release_recursive>
 800c21e:	bf00      	nop
 800c220:	20005415 	.word	0x20005415

0800c224 <__sinit>:
 800c224:	b510      	push	{r4, lr}
 800c226:	4604      	mov	r4, r0
 800c228:	f7ff fff0 	bl	800c20c <__sfp_lock_acquire>
 800c22c:	6a23      	ldr	r3, [r4, #32]
 800c22e:	b11b      	cbz	r3, 800c238 <__sinit+0x14>
 800c230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c234:	f7ff bff0 	b.w	800c218 <__sfp_lock_release>
 800c238:	4b04      	ldr	r3, [pc, #16]	@ (800c24c <__sinit+0x28>)
 800c23a:	6223      	str	r3, [r4, #32]
 800c23c:	4b04      	ldr	r3, [pc, #16]	@ (800c250 <__sinit+0x2c>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d1f5      	bne.n	800c230 <__sinit+0xc>
 800c244:	f7ff ffc4 	bl	800c1d0 <global_stdio_init.part.0>
 800c248:	e7f2      	b.n	800c230 <__sinit+0xc>
 800c24a:	bf00      	nop
 800c24c:	0800c191 	.word	0x0800c191
 800c250:	2000540c 	.word	0x2000540c

0800c254 <_fwalk_sglue>:
 800c254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c258:	4607      	mov	r7, r0
 800c25a:	4688      	mov	r8, r1
 800c25c:	4614      	mov	r4, r2
 800c25e:	2600      	movs	r6, #0
 800c260:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c264:	f1b9 0901 	subs.w	r9, r9, #1
 800c268:	d505      	bpl.n	800c276 <_fwalk_sglue+0x22>
 800c26a:	6824      	ldr	r4, [r4, #0]
 800c26c:	2c00      	cmp	r4, #0
 800c26e:	d1f7      	bne.n	800c260 <_fwalk_sglue+0xc>
 800c270:	4630      	mov	r0, r6
 800c272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c276:	89ab      	ldrh	r3, [r5, #12]
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d907      	bls.n	800c28c <_fwalk_sglue+0x38>
 800c27c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c280:	3301      	adds	r3, #1
 800c282:	d003      	beq.n	800c28c <_fwalk_sglue+0x38>
 800c284:	4629      	mov	r1, r5
 800c286:	4638      	mov	r0, r7
 800c288:	47c0      	blx	r8
 800c28a:	4306      	orrs	r6, r0
 800c28c:	3568      	adds	r5, #104	@ 0x68
 800c28e:	e7e9      	b.n	800c264 <_fwalk_sglue+0x10>

0800c290 <sniprintf>:
 800c290:	b40c      	push	{r2, r3}
 800c292:	b530      	push	{r4, r5, lr}
 800c294:	4b17      	ldr	r3, [pc, #92]	@ (800c2f4 <sniprintf+0x64>)
 800c296:	1e0c      	subs	r4, r1, #0
 800c298:	681d      	ldr	r5, [r3, #0]
 800c29a:	b09d      	sub	sp, #116	@ 0x74
 800c29c:	da08      	bge.n	800c2b0 <sniprintf+0x20>
 800c29e:	238b      	movs	r3, #139	@ 0x8b
 800c2a0:	602b      	str	r3, [r5, #0]
 800c2a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a6:	b01d      	add	sp, #116	@ 0x74
 800c2a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2ac:	b002      	add	sp, #8
 800c2ae:	4770      	bx	lr
 800c2b0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c2b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c2b8:	bf14      	ite	ne
 800c2ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c2be:	4623      	moveq	r3, r4
 800c2c0:	9304      	str	r3, [sp, #16]
 800c2c2:	9307      	str	r3, [sp, #28]
 800c2c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c2c8:	9002      	str	r0, [sp, #8]
 800c2ca:	9006      	str	r0, [sp, #24]
 800c2cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c2d0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c2d2:	ab21      	add	r3, sp, #132	@ 0x84
 800c2d4:	a902      	add	r1, sp, #8
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	9301      	str	r3, [sp, #4]
 800c2da:	f001 fc0b 	bl	800daf4 <_svfiprintf_r>
 800c2de:	1c43      	adds	r3, r0, #1
 800c2e0:	bfbc      	itt	lt
 800c2e2:	238b      	movlt	r3, #139	@ 0x8b
 800c2e4:	602b      	strlt	r3, [r5, #0]
 800c2e6:	2c00      	cmp	r4, #0
 800c2e8:	d0dd      	beq.n	800c2a6 <sniprintf+0x16>
 800c2ea:	9b02      	ldr	r3, [sp, #8]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	701a      	strb	r2, [r3, #0]
 800c2f0:	e7d9      	b.n	800c2a6 <sniprintf+0x16>
 800c2f2:	bf00      	nop
 800c2f4:	20000034 	.word	0x20000034

0800c2f8 <__sread>:
 800c2f8:	b510      	push	{r4, lr}
 800c2fa:	460c      	mov	r4, r1
 800c2fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c300:	f000 f86c 	bl	800c3dc <_read_r>
 800c304:	2800      	cmp	r0, #0
 800c306:	bfab      	itete	ge
 800c308:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c30a:	89a3      	ldrhlt	r3, [r4, #12]
 800c30c:	181b      	addge	r3, r3, r0
 800c30e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c312:	bfac      	ite	ge
 800c314:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c316:	81a3      	strhlt	r3, [r4, #12]
 800c318:	bd10      	pop	{r4, pc}

0800c31a <__swrite>:
 800c31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c31e:	461f      	mov	r7, r3
 800c320:	898b      	ldrh	r3, [r1, #12]
 800c322:	05db      	lsls	r3, r3, #23
 800c324:	4605      	mov	r5, r0
 800c326:	460c      	mov	r4, r1
 800c328:	4616      	mov	r6, r2
 800c32a:	d505      	bpl.n	800c338 <__swrite+0x1e>
 800c32c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c330:	2302      	movs	r3, #2
 800c332:	2200      	movs	r2, #0
 800c334:	f000 f840 	bl	800c3b8 <_lseek_r>
 800c338:	89a3      	ldrh	r3, [r4, #12]
 800c33a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c33e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c342:	81a3      	strh	r3, [r4, #12]
 800c344:	4632      	mov	r2, r6
 800c346:	463b      	mov	r3, r7
 800c348:	4628      	mov	r0, r5
 800c34a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c34e:	f000 b857 	b.w	800c400 <_write_r>

0800c352 <__sseek>:
 800c352:	b510      	push	{r4, lr}
 800c354:	460c      	mov	r4, r1
 800c356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c35a:	f000 f82d 	bl	800c3b8 <_lseek_r>
 800c35e:	1c43      	adds	r3, r0, #1
 800c360:	89a3      	ldrh	r3, [r4, #12]
 800c362:	bf15      	itete	ne
 800c364:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c366:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c36a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c36e:	81a3      	strheq	r3, [r4, #12]
 800c370:	bf18      	it	ne
 800c372:	81a3      	strhne	r3, [r4, #12]
 800c374:	bd10      	pop	{r4, pc}

0800c376 <__sclose>:
 800c376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c37a:	f000 b80d 	b.w	800c398 <_close_r>

0800c37e <memset>:
 800c37e:	4402      	add	r2, r0
 800c380:	4603      	mov	r3, r0
 800c382:	4293      	cmp	r3, r2
 800c384:	d100      	bne.n	800c388 <memset+0xa>
 800c386:	4770      	bx	lr
 800c388:	f803 1b01 	strb.w	r1, [r3], #1
 800c38c:	e7f9      	b.n	800c382 <memset+0x4>
	...

0800c390 <_localeconv_r>:
 800c390:	4800      	ldr	r0, [pc, #0]	@ (800c394 <_localeconv_r+0x4>)
 800c392:	4770      	bx	lr
 800c394:	20000174 	.word	0x20000174

0800c398 <_close_r>:
 800c398:	b538      	push	{r3, r4, r5, lr}
 800c39a:	4d06      	ldr	r5, [pc, #24]	@ (800c3b4 <_close_r+0x1c>)
 800c39c:	2300      	movs	r3, #0
 800c39e:	4604      	mov	r4, r0
 800c3a0:	4608      	mov	r0, r1
 800c3a2:	602b      	str	r3, [r5, #0]
 800c3a4:	f7f6 fc5c 	bl	8002c60 <_close>
 800c3a8:	1c43      	adds	r3, r0, #1
 800c3aa:	d102      	bne.n	800c3b2 <_close_r+0x1a>
 800c3ac:	682b      	ldr	r3, [r5, #0]
 800c3ae:	b103      	cbz	r3, 800c3b2 <_close_r+0x1a>
 800c3b0:	6023      	str	r3, [r4, #0]
 800c3b2:	bd38      	pop	{r3, r4, r5, pc}
 800c3b4:	20005410 	.word	0x20005410

0800c3b8 <_lseek_r>:
 800c3b8:	b538      	push	{r3, r4, r5, lr}
 800c3ba:	4d07      	ldr	r5, [pc, #28]	@ (800c3d8 <_lseek_r+0x20>)
 800c3bc:	4604      	mov	r4, r0
 800c3be:	4608      	mov	r0, r1
 800c3c0:	4611      	mov	r1, r2
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	602a      	str	r2, [r5, #0]
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	f7f6 fc71 	bl	8002cae <_lseek>
 800c3cc:	1c43      	adds	r3, r0, #1
 800c3ce:	d102      	bne.n	800c3d6 <_lseek_r+0x1e>
 800c3d0:	682b      	ldr	r3, [r5, #0]
 800c3d2:	b103      	cbz	r3, 800c3d6 <_lseek_r+0x1e>
 800c3d4:	6023      	str	r3, [r4, #0]
 800c3d6:	bd38      	pop	{r3, r4, r5, pc}
 800c3d8:	20005410 	.word	0x20005410

0800c3dc <_read_r>:
 800c3dc:	b538      	push	{r3, r4, r5, lr}
 800c3de:	4d07      	ldr	r5, [pc, #28]	@ (800c3fc <_read_r+0x20>)
 800c3e0:	4604      	mov	r4, r0
 800c3e2:	4608      	mov	r0, r1
 800c3e4:	4611      	mov	r1, r2
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	602a      	str	r2, [r5, #0]
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	f7f6 fbff 	bl	8002bee <_read>
 800c3f0:	1c43      	adds	r3, r0, #1
 800c3f2:	d102      	bne.n	800c3fa <_read_r+0x1e>
 800c3f4:	682b      	ldr	r3, [r5, #0]
 800c3f6:	b103      	cbz	r3, 800c3fa <_read_r+0x1e>
 800c3f8:	6023      	str	r3, [r4, #0]
 800c3fa:	bd38      	pop	{r3, r4, r5, pc}
 800c3fc:	20005410 	.word	0x20005410

0800c400 <_write_r>:
 800c400:	b538      	push	{r3, r4, r5, lr}
 800c402:	4d07      	ldr	r5, [pc, #28]	@ (800c420 <_write_r+0x20>)
 800c404:	4604      	mov	r4, r0
 800c406:	4608      	mov	r0, r1
 800c408:	4611      	mov	r1, r2
 800c40a:	2200      	movs	r2, #0
 800c40c:	602a      	str	r2, [r5, #0]
 800c40e:	461a      	mov	r2, r3
 800c410:	f7f6 fc0a 	bl	8002c28 <_write>
 800c414:	1c43      	adds	r3, r0, #1
 800c416:	d102      	bne.n	800c41e <_write_r+0x1e>
 800c418:	682b      	ldr	r3, [r5, #0]
 800c41a:	b103      	cbz	r3, 800c41e <_write_r+0x1e>
 800c41c:	6023      	str	r3, [r4, #0]
 800c41e:	bd38      	pop	{r3, r4, r5, pc}
 800c420:	20005410 	.word	0x20005410

0800c424 <__errno>:
 800c424:	4b01      	ldr	r3, [pc, #4]	@ (800c42c <__errno+0x8>)
 800c426:	6818      	ldr	r0, [r3, #0]
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	20000034 	.word	0x20000034

0800c430 <__libc_init_array>:
 800c430:	b570      	push	{r4, r5, r6, lr}
 800c432:	4d0d      	ldr	r5, [pc, #52]	@ (800c468 <__libc_init_array+0x38>)
 800c434:	4c0d      	ldr	r4, [pc, #52]	@ (800c46c <__libc_init_array+0x3c>)
 800c436:	1b64      	subs	r4, r4, r5
 800c438:	10a4      	asrs	r4, r4, #2
 800c43a:	2600      	movs	r6, #0
 800c43c:	42a6      	cmp	r6, r4
 800c43e:	d109      	bne.n	800c454 <__libc_init_array+0x24>
 800c440:	4d0b      	ldr	r5, [pc, #44]	@ (800c470 <__libc_init_array+0x40>)
 800c442:	4c0c      	ldr	r4, [pc, #48]	@ (800c474 <__libc_init_array+0x44>)
 800c444:	f002 f866 	bl	800e514 <_init>
 800c448:	1b64      	subs	r4, r4, r5
 800c44a:	10a4      	asrs	r4, r4, #2
 800c44c:	2600      	movs	r6, #0
 800c44e:	42a6      	cmp	r6, r4
 800c450:	d105      	bne.n	800c45e <__libc_init_array+0x2e>
 800c452:	bd70      	pop	{r4, r5, r6, pc}
 800c454:	f855 3b04 	ldr.w	r3, [r5], #4
 800c458:	4798      	blx	r3
 800c45a:	3601      	adds	r6, #1
 800c45c:	e7ee      	b.n	800c43c <__libc_init_array+0xc>
 800c45e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c462:	4798      	blx	r3
 800c464:	3601      	adds	r6, #1
 800c466:	e7f2      	b.n	800c44e <__libc_init_array+0x1e>
 800c468:	0800f578 	.word	0x0800f578
 800c46c:	0800f578 	.word	0x0800f578
 800c470:	0800f578 	.word	0x0800f578
 800c474:	0800f57c 	.word	0x0800f57c

0800c478 <__retarget_lock_init_recursive>:
 800c478:	4770      	bx	lr

0800c47a <__retarget_lock_acquire_recursive>:
 800c47a:	4770      	bx	lr

0800c47c <__retarget_lock_release_recursive>:
 800c47c:	4770      	bx	lr

0800c47e <memcpy>:
 800c47e:	440a      	add	r2, r1
 800c480:	4291      	cmp	r1, r2
 800c482:	f100 33ff 	add.w	r3, r0, #4294967295
 800c486:	d100      	bne.n	800c48a <memcpy+0xc>
 800c488:	4770      	bx	lr
 800c48a:	b510      	push	{r4, lr}
 800c48c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c490:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c494:	4291      	cmp	r1, r2
 800c496:	d1f9      	bne.n	800c48c <memcpy+0xe>
 800c498:	bd10      	pop	{r4, pc}

0800c49a <quorem>:
 800c49a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49e:	6903      	ldr	r3, [r0, #16]
 800c4a0:	690c      	ldr	r4, [r1, #16]
 800c4a2:	42a3      	cmp	r3, r4
 800c4a4:	4607      	mov	r7, r0
 800c4a6:	db7e      	blt.n	800c5a6 <quorem+0x10c>
 800c4a8:	3c01      	subs	r4, #1
 800c4aa:	f101 0814 	add.w	r8, r1, #20
 800c4ae:	00a3      	lsls	r3, r4, #2
 800c4b0:	f100 0514 	add.w	r5, r0, #20
 800c4b4:	9300      	str	r3, [sp, #0]
 800c4b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c4ba:	9301      	str	r3, [sp, #4]
 800c4bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c4c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c4c4:	3301      	adds	r3, #1
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c4cc:	fbb2 f6f3 	udiv	r6, r2, r3
 800c4d0:	d32e      	bcc.n	800c530 <quorem+0x96>
 800c4d2:	f04f 0a00 	mov.w	sl, #0
 800c4d6:	46c4      	mov	ip, r8
 800c4d8:	46ae      	mov	lr, r5
 800c4da:	46d3      	mov	fp, sl
 800c4dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c4e0:	b298      	uxth	r0, r3
 800c4e2:	fb06 a000 	mla	r0, r6, r0, sl
 800c4e6:	0c02      	lsrs	r2, r0, #16
 800c4e8:	0c1b      	lsrs	r3, r3, #16
 800c4ea:	fb06 2303 	mla	r3, r6, r3, r2
 800c4ee:	f8de 2000 	ldr.w	r2, [lr]
 800c4f2:	b280      	uxth	r0, r0
 800c4f4:	b292      	uxth	r2, r2
 800c4f6:	1a12      	subs	r2, r2, r0
 800c4f8:	445a      	add	r2, fp
 800c4fa:	f8de 0000 	ldr.w	r0, [lr]
 800c4fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c502:	b29b      	uxth	r3, r3
 800c504:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c508:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c50c:	b292      	uxth	r2, r2
 800c50e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c512:	45e1      	cmp	r9, ip
 800c514:	f84e 2b04 	str.w	r2, [lr], #4
 800c518:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c51c:	d2de      	bcs.n	800c4dc <quorem+0x42>
 800c51e:	9b00      	ldr	r3, [sp, #0]
 800c520:	58eb      	ldr	r3, [r5, r3]
 800c522:	b92b      	cbnz	r3, 800c530 <quorem+0x96>
 800c524:	9b01      	ldr	r3, [sp, #4]
 800c526:	3b04      	subs	r3, #4
 800c528:	429d      	cmp	r5, r3
 800c52a:	461a      	mov	r2, r3
 800c52c:	d32f      	bcc.n	800c58e <quorem+0xf4>
 800c52e:	613c      	str	r4, [r7, #16]
 800c530:	4638      	mov	r0, r7
 800c532:	f001 f97b 	bl	800d82c <__mcmp>
 800c536:	2800      	cmp	r0, #0
 800c538:	db25      	blt.n	800c586 <quorem+0xec>
 800c53a:	4629      	mov	r1, r5
 800c53c:	2000      	movs	r0, #0
 800c53e:	f858 2b04 	ldr.w	r2, [r8], #4
 800c542:	f8d1 c000 	ldr.w	ip, [r1]
 800c546:	fa1f fe82 	uxth.w	lr, r2
 800c54a:	fa1f f38c 	uxth.w	r3, ip
 800c54e:	eba3 030e 	sub.w	r3, r3, lr
 800c552:	4403      	add	r3, r0
 800c554:	0c12      	lsrs	r2, r2, #16
 800c556:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c55a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c55e:	b29b      	uxth	r3, r3
 800c560:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c564:	45c1      	cmp	r9, r8
 800c566:	f841 3b04 	str.w	r3, [r1], #4
 800c56a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c56e:	d2e6      	bcs.n	800c53e <quorem+0xa4>
 800c570:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c574:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c578:	b922      	cbnz	r2, 800c584 <quorem+0xea>
 800c57a:	3b04      	subs	r3, #4
 800c57c:	429d      	cmp	r5, r3
 800c57e:	461a      	mov	r2, r3
 800c580:	d30b      	bcc.n	800c59a <quorem+0x100>
 800c582:	613c      	str	r4, [r7, #16]
 800c584:	3601      	adds	r6, #1
 800c586:	4630      	mov	r0, r6
 800c588:	b003      	add	sp, #12
 800c58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c58e:	6812      	ldr	r2, [r2, #0]
 800c590:	3b04      	subs	r3, #4
 800c592:	2a00      	cmp	r2, #0
 800c594:	d1cb      	bne.n	800c52e <quorem+0x94>
 800c596:	3c01      	subs	r4, #1
 800c598:	e7c6      	b.n	800c528 <quorem+0x8e>
 800c59a:	6812      	ldr	r2, [r2, #0]
 800c59c:	3b04      	subs	r3, #4
 800c59e:	2a00      	cmp	r2, #0
 800c5a0:	d1ef      	bne.n	800c582 <quorem+0xe8>
 800c5a2:	3c01      	subs	r4, #1
 800c5a4:	e7ea      	b.n	800c57c <quorem+0xe2>
 800c5a6:	2000      	movs	r0, #0
 800c5a8:	e7ee      	b.n	800c588 <quorem+0xee>
 800c5aa:	0000      	movs	r0, r0
 800c5ac:	0000      	movs	r0, r0
	...

0800c5b0 <_dtoa_r>:
 800c5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b4:	69c7      	ldr	r7, [r0, #28]
 800c5b6:	b099      	sub	sp, #100	@ 0x64
 800c5b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c5bc:	ec55 4b10 	vmov	r4, r5, d0
 800c5c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c5c2:	9109      	str	r1, [sp, #36]	@ 0x24
 800c5c4:	4683      	mov	fp, r0
 800c5c6:	920e      	str	r2, [sp, #56]	@ 0x38
 800c5c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c5ca:	b97f      	cbnz	r7, 800c5ec <_dtoa_r+0x3c>
 800c5cc:	2010      	movs	r0, #16
 800c5ce:	f000 fdfd 	bl	800d1cc <malloc>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	f8cb 001c 	str.w	r0, [fp, #28]
 800c5d8:	b920      	cbnz	r0, 800c5e4 <_dtoa_r+0x34>
 800c5da:	4ba7      	ldr	r3, [pc, #668]	@ (800c878 <_dtoa_r+0x2c8>)
 800c5dc:	21ef      	movs	r1, #239	@ 0xef
 800c5de:	48a7      	ldr	r0, [pc, #668]	@ (800c87c <_dtoa_r+0x2cc>)
 800c5e0:	f001 fc5a 	bl	800de98 <__assert_func>
 800c5e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c5e8:	6007      	str	r7, [r0, #0]
 800c5ea:	60c7      	str	r7, [r0, #12]
 800c5ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c5f0:	6819      	ldr	r1, [r3, #0]
 800c5f2:	b159      	cbz	r1, 800c60c <_dtoa_r+0x5c>
 800c5f4:	685a      	ldr	r2, [r3, #4]
 800c5f6:	604a      	str	r2, [r1, #4]
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	4093      	lsls	r3, r2
 800c5fc:	608b      	str	r3, [r1, #8]
 800c5fe:	4658      	mov	r0, fp
 800c600:	f000 feda 	bl	800d3b8 <_Bfree>
 800c604:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c608:	2200      	movs	r2, #0
 800c60a:	601a      	str	r2, [r3, #0]
 800c60c:	1e2b      	subs	r3, r5, #0
 800c60e:	bfb9      	ittee	lt
 800c610:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c614:	9303      	strlt	r3, [sp, #12]
 800c616:	2300      	movge	r3, #0
 800c618:	6033      	strge	r3, [r6, #0]
 800c61a:	9f03      	ldr	r7, [sp, #12]
 800c61c:	4b98      	ldr	r3, [pc, #608]	@ (800c880 <_dtoa_r+0x2d0>)
 800c61e:	bfbc      	itt	lt
 800c620:	2201      	movlt	r2, #1
 800c622:	6032      	strlt	r2, [r6, #0]
 800c624:	43bb      	bics	r3, r7
 800c626:	d112      	bne.n	800c64e <_dtoa_r+0x9e>
 800c628:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c62a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c62e:	6013      	str	r3, [r2, #0]
 800c630:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c634:	4323      	orrs	r3, r4
 800c636:	f000 854d 	beq.w	800d0d4 <_dtoa_r+0xb24>
 800c63a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c63c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c894 <_dtoa_r+0x2e4>
 800c640:	2b00      	cmp	r3, #0
 800c642:	f000 854f 	beq.w	800d0e4 <_dtoa_r+0xb34>
 800c646:	f10a 0303 	add.w	r3, sl, #3
 800c64a:	f000 bd49 	b.w	800d0e0 <_dtoa_r+0xb30>
 800c64e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c652:	2200      	movs	r2, #0
 800c654:	ec51 0b17 	vmov	r0, r1, d7
 800c658:	2300      	movs	r3, #0
 800c65a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c65e:	f7f4 fa33 	bl	8000ac8 <__aeabi_dcmpeq>
 800c662:	4680      	mov	r8, r0
 800c664:	b158      	cbz	r0, 800c67e <_dtoa_r+0xce>
 800c666:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c668:	2301      	movs	r3, #1
 800c66a:	6013      	str	r3, [r2, #0]
 800c66c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c66e:	b113      	cbz	r3, 800c676 <_dtoa_r+0xc6>
 800c670:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c672:	4b84      	ldr	r3, [pc, #528]	@ (800c884 <_dtoa_r+0x2d4>)
 800c674:	6013      	str	r3, [r2, #0]
 800c676:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c898 <_dtoa_r+0x2e8>
 800c67a:	f000 bd33 	b.w	800d0e4 <_dtoa_r+0xb34>
 800c67e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c682:	aa16      	add	r2, sp, #88	@ 0x58
 800c684:	a917      	add	r1, sp, #92	@ 0x5c
 800c686:	4658      	mov	r0, fp
 800c688:	f001 f980 	bl	800d98c <__d2b>
 800c68c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c690:	4681      	mov	r9, r0
 800c692:	2e00      	cmp	r6, #0
 800c694:	d077      	beq.n	800c786 <_dtoa_r+0x1d6>
 800c696:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c698:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c69c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c6a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c6a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c6ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	4b74      	ldr	r3, [pc, #464]	@ (800c888 <_dtoa_r+0x2d8>)
 800c6b6:	f7f3 fde7 	bl	8000288 <__aeabi_dsub>
 800c6ba:	a369      	add	r3, pc, #420	@ (adr r3, 800c860 <_dtoa_r+0x2b0>)
 800c6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c0:	f7f3 ff9a 	bl	80005f8 <__aeabi_dmul>
 800c6c4:	a368      	add	r3, pc, #416	@ (adr r3, 800c868 <_dtoa_r+0x2b8>)
 800c6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ca:	f7f3 fddf 	bl	800028c <__adddf3>
 800c6ce:	4604      	mov	r4, r0
 800c6d0:	4630      	mov	r0, r6
 800c6d2:	460d      	mov	r5, r1
 800c6d4:	f7f3 ff26 	bl	8000524 <__aeabi_i2d>
 800c6d8:	a365      	add	r3, pc, #404	@ (adr r3, 800c870 <_dtoa_r+0x2c0>)
 800c6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6de:	f7f3 ff8b 	bl	80005f8 <__aeabi_dmul>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	4629      	mov	r1, r5
 800c6ea:	f7f3 fdcf 	bl	800028c <__adddf3>
 800c6ee:	4604      	mov	r4, r0
 800c6f0:	460d      	mov	r5, r1
 800c6f2:	f7f4 fa31 	bl	8000b58 <__aeabi_d2iz>
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	4607      	mov	r7, r0
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	4620      	mov	r0, r4
 800c6fe:	4629      	mov	r1, r5
 800c700:	f7f4 f9ec 	bl	8000adc <__aeabi_dcmplt>
 800c704:	b140      	cbz	r0, 800c718 <_dtoa_r+0x168>
 800c706:	4638      	mov	r0, r7
 800c708:	f7f3 ff0c 	bl	8000524 <__aeabi_i2d>
 800c70c:	4622      	mov	r2, r4
 800c70e:	462b      	mov	r3, r5
 800c710:	f7f4 f9da 	bl	8000ac8 <__aeabi_dcmpeq>
 800c714:	b900      	cbnz	r0, 800c718 <_dtoa_r+0x168>
 800c716:	3f01      	subs	r7, #1
 800c718:	2f16      	cmp	r7, #22
 800c71a:	d851      	bhi.n	800c7c0 <_dtoa_r+0x210>
 800c71c:	4b5b      	ldr	r3, [pc, #364]	@ (800c88c <_dtoa_r+0x2dc>)
 800c71e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c72a:	f7f4 f9d7 	bl	8000adc <__aeabi_dcmplt>
 800c72e:	2800      	cmp	r0, #0
 800c730:	d048      	beq.n	800c7c4 <_dtoa_r+0x214>
 800c732:	3f01      	subs	r7, #1
 800c734:	2300      	movs	r3, #0
 800c736:	9312      	str	r3, [sp, #72]	@ 0x48
 800c738:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c73a:	1b9b      	subs	r3, r3, r6
 800c73c:	1e5a      	subs	r2, r3, #1
 800c73e:	bf44      	itt	mi
 800c740:	f1c3 0801 	rsbmi	r8, r3, #1
 800c744:	2300      	movmi	r3, #0
 800c746:	9208      	str	r2, [sp, #32]
 800c748:	bf54      	ite	pl
 800c74a:	f04f 0800 	movpl.w	r8, #0
 800c74e:	9308      	strmi	r3, [sp, #32]
 800c750:	2f00      	cmp	r7, #0
 800c752:	db39      	blt.n	800c7c8 <_dtoa_r+0x218>
 800c754:	9b08      	ldr	r3, [sp, #32]
 800c756:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c758:	443b      	add	r3, r7
 800c75a:	9308      	str	r3, [sp, #32]
 800c75c:	2300      	movs	r3, #0
 800c75e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c762:	2b09      	cmp	r3, #9
 800c764:	d864      	bhi.n	800c830 <_dtoa_r+0x280>
 800c766:	2b05      	cmp	r3, #5
 800c768:	bfc4      	itt	gt
 800c76a:	3b04      	subgt	r3, #4
 800c76c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c76e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c770:	f1a3 0302 	sub.w	r3, r3, #2
 800c774:	bfcc      	ite	gt
 800c776:	2400      	movgt	r4, #0
 800c778:	2401      	movle	r4, #1
 800c77a:	2b03      	cmp	r3, #3
 800c77c:	d863      	bhi.n	800c846 <_dtoa_r+0x296>
 800c77e:	e8df f003 	tbb	[pc, r3]
 800c782:	372a      	.short	0x372a
 800c784:	5535      	.short	0x5535
 800c786:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c78a:	441e      	add	r6, r3
 800c78c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c790:	2b20      	cmp	r3, #32
 800c792:	bfc1      	itttt	gt
 800c794:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c798:	409f      	lslgt	r7, r3
 800c79a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c79e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c7a2:	bfd6      	itet	le
 800c7a4:	f1c3 0320 	rsble	r3, r3, #32
 800c7a8:	ea47 0003 	orrgt.w	r0, r7, r3
 800c7ac:	fa04 f003 	lslle.w	r0, r4, r3
 800c7b0:	f7f3 fea8 	bl	8000504 <__aeabi_ui2d>
 800c7b4:	2201      	movs	r2, #1
 800c7b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c7ba:	3e01      	subs	r6, #1
 800c7bc:	9214      	str	r2, [sp, #80]	@ 0x50
 800c7be:	e777      	b.n	800c6b0 <_dtoa_r+0x100>
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	e7b8      	b.n	800c736 <_dtoa_r+0x186>
 800c7c4:	9012      	str	r0, [sp, #72]	@ 0x48
 800c7c6:	e7b7      	b.n	800c738 <_dtoa_r+0x188>
 800c7c8:	427b      	negs	r3, r7
 800c7ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	eba8 0807 	sub.w	r8, r8, r7
 800c7d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c7d4:	e7c4      	b.n	800c760 <_dtoa_r+0x1b0>
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	dc35      	bgt.n	800c84c <_dtoa_r+0x29c>
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	9300      	str	r3, [sp, #0]
 800c7e4:	9307      	str	r3, [sp, #28]
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c7ea:	e00b      	b.n	800c804 <_dtoa_r+0x254>
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	e7f3      	b.n	800c7d8 <_dtoa_r+0x228>
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c7f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7f6:	18fb      	adds	r3, r7, r3
 800c7f8:	9300      	str	r3, [sp, #0]
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	9307      	str	r3, [sp, #28]
 800c800:	bfb8      	it	lt
 800c802:	2301      	movlt	r3, #1
 800c804:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c808:	2100      	movs	r1, #0
 800c80a:	2204      	movs	r2, #4
 800c80c:	f102 0514 	add.w	r5, r2, #20
 800c810:	429d      	cmp	r5, r3
 800c812:	d91f      	bls.n	800c854 <_dtoa_r+0x2a4>
 800c814:	6041      	str	r1, [r0, #4]
 800c816:	4658      	mov	r0, fp
 800c818:	f000 fd8e 	bl	800d338 <_Balloc>
 800c81c:	4682      	mov	sl, r0
 800c81e:	2800      	cmp	r0, #0
 800c820:	d13c      	bne.n	800c89c <_dtoa_r+0x2ec>
 800c822:	4b1b      	ldr	r3, [pc, #108]	@ (800c890 <_dtoa_r+0x2e0>)
 800c824:	4602      	mov	r2, r0
 800c826:	f240 11af 	movw	r1, #431	@ 0x1af
 800c82a:	e6d8      	b.n	800c5de <_dtoa_r+0x2e>
 800c82c:	2301      	movs	r3, #1
 800c82e:	e7e0      	b.n	800c7f2 <_dtoa_r+0x242>
 800c830:	2401      	movs	r4, #1
 800c832:	2300      	movs	r3, #0
 800c834:	9309      	str	r3, [sp, #36]	@ 0x24
 800c836:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c838:	f04f 33ff 	mov.w	r3, #4294967295
 800c83c:	9300      	str	r3, [sp, #0]
 800c83e:	9307      	str	r3, [sp, #28]
 800c840:	2200      	movs	r2, #0
 800c842:	2312      	movs	r3, #18
 800c844:	e7d0      	b.n	800c7e8 <_dtoa_r+0x238>
 800c846:	2301      	movs	r3, #1
 800c848:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c84a:	e7f5      	b.n	800c838 <_dtoa_r+0x288>
 800c84c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c84e:	9300      	str	r3, [sp, #0]
 800c850:	9307      	str	r3, [sp, #28]
 800c852:	e7d7      	b.n	800c804 <_dtoa_r+0x254>
 800c854:	3101      	adds	r1, #1
 800c856:	0052      	lsls	r2, r2, #1
 800c858:	e7d8      	b.n	800c80c <_dtoa_r+0x25c>
 800c85a:	bf00      	nop
 800c85c:	f3af 8000 	nop.w
 800c860:	636f4361 	.word	0x636f4361
 800c864:	3fd287a7 	.word	0x3fd287a7
 800c868:	8b60c8b3 	.word	0x8b60c8b3
 800c86c:	3fc68a28 	.word	0x3fc68a28
 800c870:	509f79fb 	.word	0x509f79fb
 800c874:	3fd34413 	.word	0x3fd34413
 800c878:	0800f23d 	.word	0x0800f23d
 800c87c:	0800f254 	.word	0x0800f254
 800c880:	7ff00000 	.word	0x7ff00000
 800c884:	0800f20d 	.word	0x0800f20d
 800c888:	3ff80000 	.word	0x3ff80000
 800c88c:	0800f350 	.word	0x0800f350
 800c890:	0800f2ac 	.word	0x0800f2ac
 800c894:	0800f239 	.word	0x0800f239
 800c898:	0800f20c 	.word	0x0800f20c
 800c89c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c8a0:	6018      	str	r0, [r3, #0]
 800c8a2:	9b07      	ldr	r3, [sp, #28]
 800c8a4:	2b0e      	cmp	r3, #14
 800c8a6:	f200 80a4 	bhi.w	800c9f2 <_dtoa_r+0x442>
 800c8aa:	2c00      	cmp	r4, #0
 800c8ac:	f000 80a1 	beq.w	800c9f2 <_dtoa_r+0x442>
 800c8b0:	2f00      	cmp	r7, #0
 800c8b2:	dd33      	ble.n	800c91c <_dtoa_r+0x36c>
 800c8b4:	4bad      	ldr	r3, [pc, #692]	@ (800cb6c <_dtoa_r+0x5bc>)
 800c8b6:	f007 020f 	and.w	r2, r7, #15
 800c8ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8be:	ed93 7b00 	vldr	d7, [r3]
 800c8c2:	05f8      	lsls	r0, r7, #23
 800c8c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c8c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c8cc:	d516      	bpl.n	800c8fc <_dtoa_r+0x34c>
 800c8ce:	4ba8      	ldr	r3, [pc, #672]	@ (800cb70 <_dtoa_r+0x5c0>)
 800c8d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c8d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c8d8:	f7f3 ffb8 	bl	800084c <__aeabi_ddiv>
 800c8dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8e0:	f004 040f 	and.w	r4, r4, #15
 800c8e4:	2603      	movs	r6, #3
 800c8e6:	4da2      	ldr	r5, [pc, #648]	@ (800cb70 <_dtoa_r+0x5c0>)
 800c8e8:	b954      	cbnz	r4, 800c900 <_dtoa_r+0x350>
 800c8ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8f2:	f7f3 ffab 	bl	800084c <__aeabi_ddiv>
 800c8f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c8fa:	e028      	b.n	800c94e <_dtoa_r+0x39e>
 800c8fc:	2602      	movs	r6, #2
 800c8fe:	e7f2      	b.n	800c8e6 <_dtoa_r+0x336>
 800c900:	07e1      	lsls	r1, r4, #31
 800c902:	d508      	bpl.n	800c916 <_dtoa_r+0x366>
 800c904:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c908:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c90c:	f7f3 fe74 	bl	80005f8 <__aeabi_dmul>
 800c910:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c914:	3601      	adds	r6, #1
 800c916:	1064      	asrs	r4, r4, #1
 800c918:	3508      	adds	r5, #8
 800c91a:	e7e5      	b.n	800c8e8 <_dtoa_r+0x338>
 800c91c:	f000 80d2 	beq.w	800cac4 <_dtoa_r+0x514>
 800c920:	427c      	negs	r4, r7
 800c922:	4b92      	ldr	r3, [pc, #584]	@ (800cb6c <_dtoa_r+0x5bc>)
 800c924:	4d92      	ldr	r5, [pc, #584]	@ (800cb70 <_dtoa_r+0x5c0>)
 800c926:	f004 020f 	and.w	r2, r4, #15
 800c92a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c932:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c936:	f7f3 fe5f 	bl	80005f8 <__aeabi_dmul>
 800c93a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c93e:	1124      	asrs	r4, r4, #4
 800c940:	2300      	movs	r3, #0
 800c942:	2602      	movs	r6, #2
 800c944:	2c00      	cmp	r4, #0
 800c946:	f040 80b2 	bne.w	800caae <_dtoa_r+0x4fe>
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d1d3      	bne.n	800c8f6 <_dtoa_r+0x346>
 800c94e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c950:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c954:	2b00      	cmp	r3, #0
 800c956:	f000 80b7 	beq.w	800cac8 <_dtoa_r+0x518>
 800c95a:	4b86      	ldr	r3, [pc, #536]	@ (800cb74 <_dtoa_r+0x5c4>)
 800c95c:	2200      	movs	r2, #0
 800c95e:	4620      	mov	r0, r4
 800c960:	4629      	mov	r1, r5
 800c962:	f7f4 f8bb 	bl	8000adc <__aeabi_dcmplt>
 800c966:	2800      	cmp	r0, #0
 800c968:	f000 80ae 	beq.w	800cac8 <_dtoa_r+0x518>
 800c96c:	9b07      	ldr	r3, [sp, #28]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	f000 80aa 	beq.w	800cac8 <_dtoa_r+0x518>
 800c974:	9b00      	ldr	r3, [sp, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	dd37      	ble.n	800c9ea <_dtoa_r+0x43a>
 800c97a:	1e7b      	subs	r3, r7, #1
 800c97c:	9304      	str	r3, [sp, #16]
 800c97e:	4620      	mov	r0, r4
 800c980:	4b7d      	ldr	r3, [pc, #500]	@ (800cb78 <_dtoa_r+0x5c8>)
 800c982:	2200      	movs	r2, #0
 800c984:	4629      	mov	r1, r5
 800c986:	f7f3 fe37 	bl	80005f8 <__aeabi_dmul>
 800c98a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c98e:	9c00      	ldr	r4, [sp, #0]
 800c990:	3601      	adds	r6, #1
 800c992:	4630      	mov	r0, r6
 800c994:	f7f3 fdc6 	bl	8000524 <__aeabi_i2d>
 800c998:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c99c:	f7f3 fe2c 	bl	80005f8 <__aeabi_dmul>
 800c9a0:	4b76      	ldr	r3, [pc, #472]	@ (800cb7c <_dtoa_r+0x5cc>)
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	f7f3 fc72 	bl	800028c <__adddf3>
 800c9a8:	4605      	mov	r5, r0
 800c9aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c9ae:	2c00      	cmp	r4, #0
 800c9b0:	f040 808d 	bne.w	800cace <_dtoa_r+0x51e>
 800c9b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9b8:	4b71      	ldr	r3, [pc, #452]	@ (800cb80 <_dtoa_r+0x5d0>)
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	f7f3 fc64 	bl	8000288 <__aeabi_dsub>
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	460b      	mov	r3, r1
 800c9c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c9c8:	462a      	mov	r2, r5
 800c9ca:	4633      	mov	r3, r6
 800c9cc:	f7f4 f8a4 	bl	8000b18 <__aeabi_dcmpgt>
 800c9d0:	2800      	cmp	r0, #0
 800c9d2:	f040 828b 	bne.w	800ceec <_dtoa_r+0x93c>
 800c9d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9da:	462a      	mov	r2, r5
 800c9dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c9e0:	f7f4 f87c 	bl	8000adc <__aeabi_dcmplt>
 800c9e4:	2800      	cmp	r0, #0
 800c9e6:	f040 8128 	bne.w	800cc3a <_dtoa_r+0x68a>
 800c9ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c9ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c9f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	f2c0 815a 	blt.w	800ccae <_dtoa_r+0x6fe>
 800c9fa:	2f0e      	cmp	r7, #14
 800c9fc:	f300 8157 	bgt.w	800ccae <_dtoa_r+0x6fe>
 800ca00:	4b5a      	ldr	r3, [pc, #360]	@ (800cb6c <_dtoa_r+0x5bc>)
 800ca02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ca06:	ed93 7b00 	vldr	d7, [r3]
 800ca0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	ed8d 7b00 	vstr	d7, [sp]
 800ca12:	da03      	bge.n	800ca1c <_dtoa_r+0x46c>
 800ca14:	9b07      	ldr	r3, [sp, #28]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	f340 8101 	ble.w	800cc1e <_dtoa_r+0x66e>
 800ca1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ca20:	4656      	mov	r6, sl
 800ca22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca26:	4620      	mov	r0, r4
 800ca28:	4629      	mov	r1, r5
 800ca2a:	f7f3 ff0f 	bl	800084c <__aeabi_ddiv>
 800ca2e:	f7f4 f893 	bl	8000b58 <__aeabi_d2iz>
 800ca32:	4680      	mov	r8, r0
 800ca34:	f7f3 fd76 	bl	8000524 <__aeabi_i2d>
 800ca38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca3c:	f7f3 fddc 	bl	80005f8 <__aeabi_dmul>
 800ca40:	4602      	mov	r2, r0
 800ca42:	460b      	mov	r3, r1
 800ca44:	4620      	mov	r0, r4
 800ca46:	4629      	mov	r1, r5
 800ca48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ca4c:	f7f3 fc1c 	bl	8000288 <__aeabi_dsub>
 800ca50:	f806 4b01 	strb.w	r4, [r6], #1
 800ca54:	9d07      	ldr	r5, [sp, #28]
 800ca56:	eba6 040a 	sub.w	r4, r6, sl
 800ca5a:	42a5      	cmp	r5, r4
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	460b      	mov	r3, r1
 800ca60:	f040 8117 	bne.w	800cc92 <_dtoa_r+0x6e2>
 800ca64:	f7f3 fc12 	bl	800028c <__adddf3>
 800ca68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca6c:	4604      	mov	r4, r0
 800ca6e:	460d      	mov	r5, r1
 800ca70:	f7f4 f852 	bl	8000b18 <__aeabi_dcmpgt>
 800ca74:	2800      	cmp	r0, #0
 800ca76:	f040 80f9 	bne.w	800cc6c <_dtoa_r+0x6bc>
 800ca7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca7e:	4620      	mov	r0, r4
 800ca80:	4629      	mov	r1, r5
 800ca82:	f7f4 f821 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca86:	b118      	cbz	r0, 800ca90 <_dtoa_r+0x4e0>
 800ca88:	f018 0f01 	tst.w	r8, #1
 800ca8c:	f040 80ee 	bne.w	800cc6c <_dtoa_r+0x6bc>
 800ca90:	4649      	mov	r1, r9
 800ca92:	4658      	mov	r0, fp
 800ca94:	f000 fc90 	bl	800d3b8 <_Bfree>
 800ca98:	2300      	movs	r3, #0
 800ca9a:	7033      	strb	r3, [r6, #0]
 800ca9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ca9e:	3701      	adds	r7, #1
 800caa0:	601f      	str	r7, [r3, #0]
 800caa2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	f000 831d 	beq.w	800d0e4 <_dtoa_r+0xb34>
 800caaa:	601e      	str	r6, [r3, #0]
 800caac:	e31a      	b.n	800d0e4 <_dtoa_r+0xb34>
 800caae:	07e2      	lsls	r2, r4, #31
 800cab0:	d505      	bpl.n	800cabe <_dtoa_r+0x50e>
 800cab2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cab6:	f7f3 fd9f 	bl	80005f8 <__aeabi_dmul>
 800caba:	3601      	adds	r6, #1
 800cabc:	2301      	movs	r3, #1
 800cabe:	1064      	asrs	r4, r4, #1
 800cac0:	3508      	adds	r5, #8
 800cac2:	e73f      	b.n	800c944 <_dtoa_r+0x394>
 800cac4:	2602      	movs	r6, #2
 800cac6:	e742      	b.n	800c94e <_dtoa_r+0x39e>
 800cac8:	9c07      	ldr	r4, [sp, #28]
 800caca:	9704      	str	r7, [sp, #16]
 800cacc:	e761      	b.n	800c992 <_dtoa_r+0x3e2>
 800cace:	4b27      	ldr	r3, [pc, #156]	@ (800cb6c <_dtoa_r+0x5bc>)
 800cad0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cad2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cad6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cada:	4454      	add	r4, sl
 800cadc:	2900      	cmp	r1, #0
 800cade:	d053      	beq.n	800cb88 <_dtoa_r+0x5d8>
 800cae0:	4928      	ldr	r1, [pc, #160]	@ (800cb84 <_dtoa_r+0x5d4>)
 800cae2:	2000      	movs	r0, #0
 800cae4:	f7f3 feb2 	bl	800084c <__aeabi_ddiv>
 800cae8:	4633      	mov	r3, r6
 800caea:	462a      	mov	r2, r5
 800caec:	f7f3 fbcc 	bl	8000288 <__aeabi_dsub>
 800caf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800caf4:	4656      	mov	r6, sl
 800caf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cafa:	f7f4 f82d 	bl	8000b58 <__aeabi_d2iz>
 800cafe:	4605      	mov	r5, r0
 800cb00:	f7f3 fd10 	bl	8000524 <__aeabi_i2d>
 800cb04:	4602      	mov	r2, r0
 800cb06:	460b      	mov	r3, r1
 800cb08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb0c:	f7f3 fbbc 	bl	8000288 <__aeabi_dsub>
 800cb10:	3530      	adds	r5, #48	@ 0x30
 800cb12:	4602      	mov	r2, r0
 800cb14:	460b      	mov	r3, r1
 800cb16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cb1a:	f806 5b01 	strb.w	r5, [r6], #1
 800cb1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cb22:	f7f3 ffdb 	bl	8000adc <__aeabi_dcmplt>
 800cb26:	2800      	cmp	r0, #0
 800cb28:	d171      	bne.n	800cc0e <_dtoa_r+0x65e>
 800cb2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb2e:	4911      	ldr	r1, [pc, #68]	@ (800cb74 <_dtoa_r+0x5c4>)
 800cb30:	2000      	movs	r0, #0
 800cb32:	f7f3 fba9 	bl	8000288 <__aeabi_dsub>
 800cb36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cb3a:	f7f3 ffcf 	bl	8000adc <__aeabi_dcmplt>
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	f040 8095 	bne.w	800cc6e <_dtoa_r+0x6be>
 800cb44:	42a6      	cmp	r6, r4
 800cb46:	f43f af50 	beq.w	800c9ea <_dtoa_r+0x43a>
 800cb4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cb4e:	4b0a      	ldr	r3, [pc, #40]	@ (800cb78 <_dtoa_r+0x5c8>)
 800cb50:	2200      	movs	r2, #0
 800cb52:	f7f3 fd51 	bl	80005f8 <__aeabi_dmul>
 800cb56:	4b08      	ldr	r3, [pc, #32]	@ (800cb78 <_dtoa_r+0x5c8>)
 800cb58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb62:	f7f3 fd49 	bl	80005f8 <__aeabi_dmul>
 800cb66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb6a:	e7c4      	b.n	800caf6 <_dtoa_r+0x546>
 800cb6c:	0800f350 	.word	0x0800f350
 800cb70:	0800f328 	.word	0x0800f328
 800cb74:	3ff00000 	.word	0x3ff00000
 800cb78:	40240000 	.word	0x40240000
 800cb7c:	401c0000 	.word	0x401c0000
 800cb80:	40140000 	.word	0x40140000
 800cb84:	3fe00000 	.word	0x3fe00000
 800cb88:	4631      	mov	r1, r6
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	f7f3 fd34 	bl	80005f8 <__aeabi_dmul>
 800cb90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cb94:	9415      	str	r4, [sp, #84]	@ 0x54
 800cb96:	4656      	mov	r6, sl
 800cb98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb9c:	f7f3 ffdc 	bl	8000b58 <__aeabi_d2iz>
 800cba0:	4605      	mov	r5, r0
 800cba2:	f7f3 fcbf 	bl	8000524 <__aeabi_i2d>
 800cba6:	4602      	mov	r2, r0
 800cba8:	460b      	mov	r3, r1
 800cbaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbae:	f7f3 fb6b 	bl	8000288 <__aeabi_dsub>
 800cbb2:	3530      	adds	r5, #48	@ 0x30
 800cbb4:	f806 5b01 	strb.w	r5, [r6], #1
 800cbb8:	4602      	mov	r2, r0
 800cbba:	460b      	mov	r3, r1
 800cbbc:	42a6      	cmp	r6, r4
 800cbbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cbc2:	f04f 0200 	mov.w	r2, #0
 800cbc6:	d124      	bne.n	800cc12 <_dtoa_r+0x662>
 800cbc8:	4bac      	ldr	r3, [pc, #688]	@ (800ce7c <_dtoa_r+0x8cc>)
 800cbca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cbce:	f7f3 fb5d 	bl	800028c <__adddf3>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbda:	f7f3 ff9d 	bl	8000b18 <__aeabi_dcmpgt>
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	d145      	bne.n	800cc6e <_dtoa_r+0x6be>
 800cbe2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cbe6:	49a5      	ldr	r1, [pc, #660]	@ (800ce7c <_dtoa_r+0x8cc>)
 800cbe8:	2000      	movs	r0, #0
 800cbea:	f7f3 fb4d 	bl	8000288 <__aeabi_dsub>
 800cbee:	4602      	mov	r2, r0
 800cbf0:	460b      	mov	r3, r1
 800cbf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbf6:	f7f3 ff71 	bl	8000adc <__aeabi_dcmplt>
 800cbfa:	2800      	cmp	r0, #0
 800cbfc:	f43f aef5 	beq.w	800c9ea <_dtoa_r+0x43a>
 800cc00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cc02:	1e73      	subs	r3, r6, #1
 800cc04:	9315      	str	r3, [sp, #84]	@ 0x54
 800cc06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cc0a:	2b30      	cmp	r3, #48	@ 0x30
 800cc0c:	d0f8      	beq.n	800cc00 <_dtoa_r+0x650>
 800cc0e:	9f04      	ldr	r7, [sp, #16]
 800cc10:	e73e      	b.n	800ca90 <_dtoa_r+0x4e0>
 800cc12:	4b9b      	ldr	r3, [pc, #620]	@ (800ce80 <_dtoa_r+0x8d0>)
 800cc14:	f7f3 fcf0 	bl	80005f8 <__aeabi_dmul>
 800cc18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc1c:	e7bc      	b.n	800cb98 <_dtoa_r+0x5e8>
 800cc1e:	d10c      	bne.n	800cc3a <_dtoa_r+0x68a>
 800cc20:	4b98      	ldr	r3, [pc, #608]	@ (800ce84 <_dtoa_r+0x8d4>)
 800cc22:	2200      	movs	r2, #0
 800cc24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc28:	f7f3 fce6 	bl	80005f8 <__aeabi_dmul>
 800cc2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc30:	f7f3 ff68 	bl	8000b04 <__aeabi_dcmpge>
 800cc34:	2800      	cmp	r0, #0
 800cc36:	f000 8157 	beq.w	800cee8 <_dtoa_r+0x938>
 800cc3a:	2400      	movs	r4, #0
 800cc3c:	4625      	mov	r5, r4
 800cc3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc40:	43db      	mvns	r3, r3
 800cc42:	9304      	str	r3, [sp, #16]
 800cc44:	4656      	mov	r6, sl
 800cc46:	2700      	movs	r7, #0
 800cc48:	4621      	mov	r1, r4
 800cc4a:	4658      	mov	r0, fp
 800cc4c:	f000 fbb4 	bl	800d3b8 <_Bfree>
 800cc50:	2d00      	cmp	r5, #0
 800cc52:	d0dc      	beq.n	800cc0e <_dtoa_r+0x65e>
 800cc54:	b12f      	cbz	r7, 800cc62 <_dtoa_r+0x6b2>
 800cc56:	42af      	cmp	r7, r5
 800cc58:	d003      	beq.n	800cc62 <_dtoa_r+0x6b2>
 800cc5a:	4639      	mov	r1, r7
 800cc5c:	4658      	mov	r0, fp
 800cc5e:	f000 fbab 	bl	800d3b8 <_Bfree>
 800cc62:	4629      	mov	r1, r5
 800cc64:	4658      	mov	r0, fp
 800cc66:	f000 fba7 	bl	800d3b8 <_Bfree>
 800cc6a:	e7d0      	b.n	800cc0e <_dtoa_r+0x65e>
 800cc6c:	9704      	str	r7, [sp, #16]
 800cc6e:	4633      	mov	r3, r6
 800cc70:	461e      	mov	r6, r3
 800cc72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc76:	2a39      	cmp	r2, #57	@ 0x39
 800cc78:	d107      	bne.n	800cc8a <_dtoa_r+0x6da>
 800cc7a:	459a      	cmp	sl, r3
 800cc7c:	d1f8      	bne.n	800cc70 <_dtoa_r+0x6c0>
 800cc7e:	9a04      	ldr	r2, [sp, #16]
 800cc80:	3201      	adds	r2, #1
 800cc82:	9204      	str	r2, [sp, #16]
 800cc84:	2230      	movs	r2, #48	@ 0x30
 800cc86:	f88a 2000 	strb.w	r2, [sl]
 800cc8a:	781a      	ldrb	r2, [r3, #0]
 800cc8c:	3201      	adds	r2, #1
 800cc8e:	701a      	strb	r2, [r3, #0]
 800cc90:	e7bd      	b.n	800cc0e <_dtoa_r+0x65e>
 800cc92:	4b7b      	ldr	r3, [pc, #492]	@ (800ce80 <_dtoa_r+0x8d0>)
 800cc94:	2200      	movs	r2, #0
 800cc96:	f7f3 fcaf 	bl	80005f8 <__aeabi_dmul>
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	4604      	mov	r4, r0
 800cca0:	460d      	mov	r5, r1
 800cca2:	f7f3 ff11 	bl	8000ac8 <__aeabi_dcmpeq>
 800cca6:	2800      	cmp	r0, #0
 800cca8:	f43f aebb 	beq.w	800ca22 <_dtoa_r+0x472>
 800ccac:	e6f0      	b.n	800ca90 <_dtoa_r+0x4e0>
 800ccae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ccb0:	2a00      	cmp	r2, #0
 800ccb2:	f000 80db 	beq.w	800ce6c <_dtoa_r+0x8bc>
 800ccb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccb8:	2a01      	cmp	r2, #1
 800ccba:	f300 80bf 	bgt.w	800ce3c <_dtoa_r+0x88c>
 800ccbe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ccc0:	2a00      	cmp	r2, #0
 800ccc2:	f000 80b7 	beq.w	800ce34 <_dtoa_r+0x884>
 800ccc6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ccca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cccc:	4646      	mov	r6, r8
 800ccce:	9a08      	ldr	r2, [sp, #32]
 800ccd0:	2101      	movs	r1, #1
 800ccd2:	441a      	add	r2, r3
 800ccd4:	4658      	mov	r0, fp
 800ccd6:	4498      	add	r8, r3
 800ccd8:	9208      	str	r2, [sp, #32]
 800ccda:	f000 fc21 	bl	800d520 <__i2b>
 800ccde:	4605      	mov	r5, r0
 800cce0:	b15e      	cbz	r6, 800ccfa <_dtoa_r+0x74a>
 800cce2:	9b08      	ldr	r3, [sp, #32]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	dd08      	ble.n	800ccfa <_dtoa_r+0x74a>
 800cce8:	42b3      	cmp	r3, r6
 800ccea:	9a08      	ldr	r2, [sp, #32]
 800ccec:	bfa8      	it	ge
 800ccee:	4633      	movge	r3, r6
 800ccf0:	eba8 0803 	sub.w	r8, r8, r3
 800ccf4:	1af6      	subs	r6, r6, r3
 800ccf6:	1ad3      	subs	r3, r2, r3
 800ccf8:	9308      	str	r3, [sp, #32]
 800ccfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccfc:	b1f3      	cbz	r3, 800cd3c <_dtoa_r+0x78c>
 800ccfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	f000 80b7 	beq.w	800ce74 <_dtoa_r+0x8c4>
 800cd06:	b18c      	cbz	r4, 800cd2c <_dtoa_r+0x77c>
 800cd08:	4629      	mov	r1, r5
 800cd0a:	4622      	mov	r2, r4
 800cd0c:	4658      	mov	r0, fp
 800cd0e:	f000 fcc7 	bl	800d6a0 <__pow5mult>
 800cd12:	464a      	mov	r2, r9
 800cd14:	4601      	mov	r1, r0
 800cd16:	4605      	mov	r5, r0
 800cd18:	4658      	mov	r0, fp
 800cd1a:	f000 fc17 	bl	800d54c <__multiply>
 800cd1e:	4649      	mov	r1, r9
 800cd20:	9004      	str	r0, [sp, #16]
 800cd22:	4658      	mov	r0, fp
 800cd24:	f000 fb48 	bl	800d3b8 <_Bfree>
 800cd28:	9b04      	ldr	r3, [sp, #16]
 800cd2a:	4699      	mov	r9, r3
 800cd2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd2e:	1b1a      	subs	r2, r3, r4
 800cd30:	d004      	beq.n	800cd3c <_dtoa_r+0x78c>
 800cd32:	4649      	mov	r1, r9
 800cd34:	4658      	mov	r0, fp
 800cd36:	f000 fcb3 	bl	800d6a0 <__pow5mult>
 800cd3a:	4681      	mov	r9, r0
 800cd3c:	2101      	movs	r1, #1
 800cd3e:	4658      	mov	r0, fp
 800cd40:	f000 fbee 	bl	800d520 <__i2b>
 800cd44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd46:	4604      	mov	r4, r0
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	f000 81cf 	beq.w	800d0ec <_dtoa_r+0xb3c>
 800cd4e:	461a      	mov	r2, r3
 800cd50:	4601      	mov	r1, r0
 800cd52:	4658      	mov	r0, fp
 800cd54:	f000 fca4 	bl	800d6a0 <__pow5mult>
 800cd58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	4604      	mov	r4, r0
 800cd5e:	f300 8095 	bgt.w	800ce8c <_dtoa_r+0x8dc>
 800cd62:	9b02      	ldr	r3, [sp, #8]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	f040 8087 	bne.w	800ce78 <_dtoa_r+0x8c8>
 800cd6a:	9b03      	ldr	r3, [sp, #12]
 800cd6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	f040 8089 	bne.w	800ce88 <_dtoa_r+0x8d8>
 800cd76:	9b03      	ldr	r3, [sp, #12]
 800cd78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cd7c:	0d1b      	lsrs	r3, r3, #20
 800cd7e:	051b      	lsls	r3, r3, #20
 800cd80:	b12b      	cbz	r3, 800cd8e <_dtoa_r+0x7de>
 800cd82:	9b08      	ldr	r3, [sp, #32]
 800cd84:	3301      	adds	r3, #1
 800cd86:	9308      	str	r3, [sp, #32]
 800cd88:	f108 0801 	add.w	r8, r8, #1
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	f000 81b0 	beq.w	800d0f8 <_dtoa_r+0xb48>
 800cd98:	6923      	ldr	r3, [r4, #16]
 800cd9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cd9e:	6918      	ldr	r0, [r3, #16]
 800cda0:	f000 fb72 	bl	800d488 <__hi0bits>
 800cda4:	f1c0 0020 	rsb	r0, r0, #32
 800cda8:	9b08      	ldr	r3, [sp, #32]
 800cdaa:	4418      	add	r0, r3
 800cdac:	f010 001f 	ands.w	r0, r0, #31
 800cdb0:	d077      	beq.n	800cea2 <_dtoa_r+0x8f2>
 800cdb2:	f1c0 0320 	rsb	r3, r0, #32
 800cdb6:	2b04      	cmp	r3, #4
 800cdb8:	dd6b      	ble.n	800ce92 <_dtoa_r+0x8e2>
 800cdba:	9b08      	ldr	r3, [sp, #32]
 800cdbc:	f1c0 001c 	rsb	r0, r0, #28
 800cdc0:	4403      	add	r3, r0
 800cdc2:	4480      	add	r8, r0
 800cdc4:	4406      	add	r6, r0
 800cdc6:	9308      	str	r3, [sp, #32]
 800cdc8:	f1b8 0f00 	cmp.w	r8, #0
 800cdcc:	dd05      	ble.n	800cdda <_dtoa_r+0x82a>
 800cdce:	4649      	mov	r1, r9
 800cdd0:	4642      	mov	r2, r8
 800cdd2:	4658      	mov	r0, fp
 800cdd4:	f000 fcbe 	bl	800d754 <__lshift>
 800cdd8:	4681      	mov	r9, r0
 800cdda:	9b08      	ldr	r3, [sp, #32]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	dd05      	ble.n	800cdec <_dtoa_r+0x83c>
 800cde0:	4621      	mov	r1, r4
 800cde2:	461a      	mov	r2, r3
 800cde4:	4658      	mov	r0, fp
 800cde6:	f000 fcb5 	bl	800d754 <__lshift>
 800cdea:	4604      	mov	r4, r0
 800cdec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d059      	beq.n	800cea6 <_dtoa_r+0x8f6>
 800cdf2:	4621      	mov	r1, r4
 800cdf4:	4648      	mov	r0, r9
 800cdf6:	f000 fd19 	bl	800d82c <__mcmp>
 800cdfa:	2800      	cmp	r0, #0
 800cdfc:	da53      	bge.n	800cea6 <_dtoa_r+0x8f6>
 800cdfe:	1e7b      	subs	r3, r7, #1
 800ce00:	9304      	str	r3, [sp, #16]
 800ce02:	4649      	mov	r1, r9
 800ce04:	2300      	movs	r3, #0
 800ce06:	220a      	movs	r2, #10
 800ce08:	4658      	mov	r0, fp
 800ce0a:	f000 faf7 	bl	800d3fc <__multadd>
 800ce0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce10:	4681      	mov	r9, r0
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	f000 8172 	beq.w	800d0fc <_dtoa_r+0xb4c>
 800ce18:	2300      	movs	r3, #0
 800ce1a:	4629      	mov	r1, r5
 800ce1c:	220a      	movs	r2, #10
 800ce1e:	4658      	mov	r0, fp
 800ce20:	f000 faec 	bl	800d3fc <__multadd>
 800ce24:	9b00      	ldr	r3, [sp, #0]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	4605      	mov	r5, r0
 800ce2a:	dc67      	bgt.n	800cefc <_dtoa_r+0x94c>
 800ce2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce2e:	2b02      	cmp	r3, #2
 800ce30:	dc41      	bgt.n	800ceb6 <_dtoa_r+0x906>
 800ce32:	e063      	b.n	800cefc <_dtoa_r+0x94c>
 800ce34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ce36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ce3a:	e746      	b.n	800ccca <_dtoa_r+0x71a>
 800ce3c:	9b07      	ldr	r3, [sp, #28]
 800ce3e:	1e5c      	subs	r4, r3, #1
 800ce40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce42:	42a3      	cmp	r3, r4
 800ce44:	bfbf      	itttt	lt
 800ce46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ce48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ce4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ce4c:	1ae3      	sublt	r3, r4, r3
 800ce4e:	bfb4      	ite	lt
 800ce50:	18d2      	addlt	r2, r2, r3
 800ce52:	1b1c      	subge	r4, r3, r4
 800ce54:	9b07      	ldr	r3, [sp, #28]
 800ce56:	bfbc      	itt	lt
 800ce58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ce5a:	2400      	movlt	r4, #0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	bfb5      	itete	lt
 800ce60:	eba8 0603 	sublt.w	r6, r8, r3
 800ce64:	9b07      	ldrge	r3, [sp, #28]
 800ce66:	2300      	movlt	r3, #0
 800ce68:	4646      	movge	r6, r8
 800ce6a:	e730      	b.n	800ccce <_dtoa_r+0x71e>
 800ce6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ce6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ce70:	4646      	mov	r6, r8
 800ce72:	e735      	b.n	800cce0 <_dtoa_r+0x730>
 800ce74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce76:	e75c      	b.n	800cd32 <_dtoa_r+0x782>
 800ce78:	2300      	movs	r3, #0
 800ce7a:	e788      	b.n	800cd8e <_dtoa_r+0x7de>
 800ce7c:	3fe00000 	.word	0x3fe00000
 800ce80:	40240000 	.word	0x40240000
 800ce84:	40140000 	.word	0x40140000
 800ce88:	9b02      	ldr	r3, [sp, #8]
 800ce8a:	e780      	b.n	800cd8e <_dtoa_r+0x7de>
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce90:	e782      	b.n	800cd98 <_dtoa_r+0x7e8>
 800ce92:	d099      	beq.n	800cdc8 <_dtoa_r+0x818>
 800ce94:	9a08      	ldr	r2, [sp, #32]
 800ce96:	331c      	adds	r3, #28
 800ce98:	441a      	add	r2, r3
 800ce9a:	4498      	add	r8, r3
 800ce9c:	441e      	add	r6, r3
 800ce9e:	9208      	str	r2, [sp, #32]
 800cea0:	e792      	b.n	800cdc8 <_dtoa_r+0x818>
 800cea2:	4603      	mov	r3, r0
 800cea4:	e7f6      	b.n	800ce94 <_dtoa_r+0x8e4>
 800cea6:	9b07      	ldr	r3, [sp, #28]
 800cea8:	9704      	str	r7, [sp, #16]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	dc20      	bgt.n	800cef0 <_dtoa_r+0x940>
 800ceae:	9300      	str	r3, [sp, #0]
 800ceb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceb2:	2b02      	cmp	r3, #2
 800ceb4:	dd1e      	ble.n	800cef4 <_dtoa_r+0x944>
 800ceb6:	9b00      	ldr	r3, [sp, #0]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	f47f aec0 	bne.w	800cc3e <_dtoa_r+0x68e>
 800cebe:	4621      	mov	r1, r4
 800cec0:	2205      	movs	r2, #5
 800cec2:	4658      	mov	r0, fp
 800cec4:	f000 fa9a 	bl	800d3fc <__multadd>
 800cec8:	4601      	mov	r1, r0
 800ceca:	4604      	mov	r4, r0
 800cecc:	4648      	mov	r0, r9
 800cece:	f000 fcad 	bl	800d82c <__mcmp>
 800ced2:	2800      	cmp	r0, #0
 800ced4:	f77f aeb3 	ble.w	800cc3e <_dtoa_r+0x68e>
 800ced8:	4656      	mov	r6, sl
 800ceda:	2331      	movs	r3, #49	@ 0x31
 800cedc:	f806 3b01 	strb.w	r3, [r6], #1
 800cee0:	9b04      	ldr	r3, [sp, #16]
 800cee2:	3301      	adds	r3, #1
 800cee4:	9304      	str	r3, [sp, #16]
 800cee6:	e6ae      	b.n	800cc46 <_dtoa_r+0x696>
 800cee8:	9c07      	ldr	r4, [sp, #28]
 800ceea:	9704      	str	r7, [sp, #16]
 800ceec:	4625      	mov	r5, r4
 800ceee:	e7f3      	b.n	800ced8 <_dtoa_r+0x928>
 800cef0:	9b07      	ldr	r3, [sp, #28]
 800cef2:	9300      	str	r3, [sp, #0]
 800cef4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	f000 8104 	beq.w	800d104 <_dtoa_r+0xb54>
 800cefc:	2e00      	cmp	r6, #0
 800cefe:	dd05      	ble.n	800cf0c <_dtoa_r+0x95c>
 800cf00:	4629      	mov	r1, r5
 800cf02:	4632      	mov	r2, r6
 800cf04:	4658      	mov	r0, fp
 800cf06:	f000 fc25 	bl	800d754 <__lshift>
 800cf0a:	4605      	mov	r5, r0
 800cf0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d05a      	beq.n	800cfc8 <_dtoa_r+0xa18>
 800cf12:	6869      	ldr	r1, [r5, #4]
 800cf14:	4658      	mov	r0, fp
 800cf16:	f000 fa0f 	bl	800d338 <_Balloc>
 800cf1a:	4606      	mov	r6, r0
 800cf1c:	b928      	cbnz	r0, 800cf2a <_dtoa_r+0x97a>
 800cf1e:	4b84      	ldr	r3, [pc, #528]	@ (800d130 <_dtoa_r+0xb80>)
 800cf20:	4602      	mov	r2, r0
 800cf22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cf26:	f7ff bb5a 	b.w	800c5de <_dtoa_r+0x2e>
 800cf2a:	692a      	ldr	r2, [r5, #16]
 800cf2c:	3202      	adds	r2, #2
 800cf2e:	0092      	lsls	r2, r2, #2
 800cf30:	f105 010c 	add.w	r1, r5, #12
 800cf34:	300c      	adds	r0, #12
 800cf36:	f7ff faa2 	bl	800c47e <memcpy>
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	4631      	mov	r1, r6
 800cf3e:	4658      	mov	r0, fp
 800cf40:	f000 fc08 	bl	800d754 <__lshift>
 800cf44:	f10a 0301 	add.w	r3, sl, #1
 800cf48:	9307      	str	r3, [sp, #28]
 800cf4a:	9b00      	ldr	r3, [sp, #0]
 800cf4c:	4453      	add	r3, sl
 800cf4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf50:	9b02      	ldr	r3, [sp, #8]
 800cf52:	f003 0301 	and.w	r3, r3, #1
 800cf56:	462f      	mov	r7, r5
 800cf58:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf5a:	4605      	mov	r5, r0
 800cf5c:	9b07      	ldr	r3, [sp, #28]
 800cf5e:	4621      	mov	r1, r4
 800cf60:	3b01      	subs	r3, #1
 800cf62:	4648      	mov	r0, r9
 800cf64:	9300      	str	r3, [sp, #0]
 800cf66:	f7ff fa98 	bl	800c49a <quorem>
 800cf6a:	4639      	mov	r1, r7
 800cf6c:	9002      	str	r0, [sp, #8]
 800cf6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cf72:	4648      	mov	r0, r9
 800cf74:	f000 fc5a 	bl	800d82c <__mcmp>
 800cf78:	462a      	mov	r2, r5
 800cf7a:	9008      	str	r0, [sp, #32]
 800cf7c:	4621      	mov	r1, r4
 800cf7e:	4658      	mov	r0, fp
 800cf80:	f000 fc70 	bl	800d864 <__mdiff>
 800cf84:	68c2      	ldr	r2, [r0, #12]
 800cf86:	4606      	mov	r6, r0
 800cf88:	bb02      	cbnz	r2, 800cfcc <_dtoa_r+0xa1c>
 800cf8a:	4601      	mov	r1, r0
 800cf8c:	4648      	mov	r0, r9
 800cf8e:	f000 fc4d 	bl	800d82c <__mcmp>
 800cf92:	4602      	mov	r2, r0
 800cf94:	4631      	mov	r1, r6
 800cf96:	4658      	mov	r0, fp
 800cf98:	920e      	str	r2, [sp, #56]	@ 0x38
 800cf9a:	f000 fa0d 	bl	800d3b8 <_Bfree>
 800cf9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfa0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cfa2:	9e07      	ldr	r6, [sp, #28]
 800cfa4:	ea43 0102 	orr.w	r1, r3, r2
 800cfa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfaa:	4319      	orrs	r1, r3
 800cfac:	d110      	bne.n	800cfd0 <_dtoa_r+0xa20>
 800cfae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cfb2:	d029      	beq.n	800d008 <_dtoa_r+0xa58>
 800cfb4:	9b08      	ldr	r3, [sp, #32]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	dd02      	ble.n	800cfc0 <_dtoa_r+0xa10>
 800cfba:	9b02      	ldr	r3, [sp, #8]
 800cfbc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cfc0:	9b00      	ldr	r3, [sp, #0]
 800cfc2:	f883 8000 	strb.w	r8, [r3]
 800cfc6:	e63f      	b.n	800cc48 <_dtoa_r+0x698>
 800cfc8:	4628      	mov	r0, r5
 800cfca:	e7bb      	b.n	800cf44 <_dtoa_r+0x994>
 800cfcc:	2201      	movs	r2, #1
 800cfce:	e7e1      	b.n	800cf94 <_dtoa_r+0x9e4>
 800cfd0:	9b08      	ldr	r3, [sp, #32]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	db04      	blt.n	800cfe0 <_dtoa_r+0xa30>
 800cfd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cfd8:	430b      	orrs	r3, r1
 800cfda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cfdc:	430b      	orrs	r3, r1
 800cfde:	d120      	bne.n	800d022 <_dtoa_r+0xa72>
 800cfe0:	2a00      	cmp	r2, #0
 800cfe2:	dded      	ble.n	800cfc0 <_dtoa_r+0xa10>
 800cfe4:	4649      	mov	r1, r9
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	4658      	mov	r0, fp
 800cfea:	f000 fbb3 	bl	800d754 <__lshift>
 800cfee:	4621      	mov	r1, r4
 800cff0:	4681      	mov	r9, r0
 800cff2:	f000 fc1b 	bl	800d82c <__mcmp>
 800cff6:	2800      	cmp	r0, #0
 800cff8:	dc03      	bgt.n	800d002 <_dtoa_r+0xa52>
 800cffa:	d1e1      	bne.n	800cfc0 <_dtoa_r+0xa10>
 800cffc:	f018 0f01 	tst.w	r8, #1
 800d000:	d0de      	beq.n	800cfc0 <_dtoa_r+0xa10>
 800d002:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d006:	d1d8      	bne.n	800cfba <_dtoa_r+0xa0a>
 800d008:	9a00      	ldr	r2, [sp, #0]
 800d00a:	2339      	movs	r3, #57	@ 0x39
 800d00c:	7013      	strb	r3, [r2, #0]
 800d00e:	4633      	mov	r3, r6
 800d010:	461e      	mov	r6, r3
 800d012:	3b01      	subs	r3, #1
 800d014:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d018:	2a39      	cmp	r2, #57	@ 0x39
 800d01a:	d052      	beq.n	800d0c2 <_dtoa_r+0xb12>
 800d01c:	3201      	adds	r2, #1
 800d01e:	701a      	strb	r2, [r3, #0]
 800d020:	e612      	b.n	800cc48 <_dtoa_r+0x698>
 800d022:	2a00      	cmp	r2, #0
 800d024:	dd07      	ble.n	800d036 <_dtoa_r+0xa86>
 800d026:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d02a:	d0ed      	beq.n	800d008 <_dtoa_r+0xa58>
 800d02c:	9a00      	ldr	r2, [sp, #0]
 800d02e:	f108 0301 	add.w	r3, r8, #1
 800d032:	7013      	strb	r3, [r2, #0]
 800d034:	e608      	b.n	800cc48 <_dtoa_r+0x698>
 800d036:	9b07      	ldr	r3, [sp, #28]
 800d038:	9a07      	ldr	r2, [sp, #28]
 800d03a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d03e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d040:	4293      	cmp	r3, r2
 800d042:	d028      	beq.n	800d096 <_dtoa_r+0xae6>
 800d044:	4649      	mov	r1, r9
 800d046:	2300      	movs	r3, #0
 800d048:	220a      	movs	r2, #10
 800d04a:	4658      	mov	r0, fp
 800d04c:	f000 f9d6 	bl	800d3fc <__multadd>
 800d050:	42af      	cmp	r7, r5
 800d052:	4681      	mov	r9, r0
 800d054:	f04f 0300 	mov.w	r3, #0
 800d058:	f04f 020a 	mov.w	r2, #10
 800d05c:	4639      	mov	r1, r7
 800d05e:	4658      	mov	r0, fp
 800d060:	d107      	bne.n	800d072 <_dtoa_r+0xac2>
 800d062:	f000 f9cb 	bl	800d3fc <__multadd>
 800d066:	4607      	mov	r7, r0
 800d068:	4605      	mov	r5, r0
 800d06a:	9b07      	ldr	r3, [sp, #28]
 800d06c:	3301      	adds	r3, #1
 800d06e:	9307      	str	r3, [sp, #28]
 800d070:	e774      	b.n	800cf5c <_dtoa_r+0x9ac>
 800d072:	f000 f9c3 	bl	800d3fc <__multadd>
 800d076:	4629      	mov	r1, r5
 800d078:	4607      	mov	r7, r0
 800d07a:	2300      	movs	r3, #0
 800d07c:	220a      	movs	r2, #10
 800d07e:	4658      	mov	r0, fp
 800d080:	f000 f9bc 	bl	800d3fc <__multadd>
 800d084:	4605      	mov	r5, r0
 800d086:	e7f0      	b.n	800d06a <_dtoa_r+0xaba>
 800d088:	9b00      	ldr	r3, [sp, #0]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	bfcc      	ite	gt
 800d08e:	461e      	movgt	r6, r3
 800d090:	2601      	movle	r6, #1
 800d092:	4456      	add	r6, sl
 800d094:	2700      	movs	r7, #0
 800d096:	4649      	mov	r1, r9
 800d098:	2201      	movs	r2, #1
 800d09a:	4658      	mov	r0, fp
 800d09c:	f000 fb5a 	bl	800d754 <__lshift>
 800d0a0:	4621      	mov	r1, r4
 800d0a2:	4681      	mov	r9, r0
 800d0a4:	f000 fbc2 	bl	800d82c <__mcmp>
 800d0a8:	2800      	cmp	r0, #0
 800d0aa:	dcb0      	bgt.n	800d00e <_dtoa_r+0xa5e>
 800d0ac:	d102      	bne.n	800d0b4 <_dtoa_r+0xb04>
 800d0ae:	f018 0f01 	tst.w	r8, #1
 800d0b2:	d1ac      	bne.n	800d00e <_dtoa_r+0xa5e>
 800d0b4:	4633      	mov	r3, r6
 800d0b6:	461e      	mov	r6, r3
 800d0b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d0bc:	2a30      	cmp	r2, #48	@ 0x30
 800d0be:	d0fa      	beq.n	800d0b6 <_dtoa_r+0xb06>
 800d0c0:	e5c2      	b.n	800cc48 <_dtoa_r+0x698>
 800d0c2:	459a      	cmp	sl, r3
 800d0c4:	d1a4      	bne.n	800d010 <_dtoa_r+0xa60>
 800d0c6:	9b04      	ldr	r3, [sp, #16]
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	9304      	str	r3, [sp, #16]
 800d0cc:	2331      	movs	r3, #49	@ 0x31
 800d0ce:	f88a 3000 	strb.w	r3, [sl]
 800d0d2:	e5b9      	b.n	800cc48 <_dtoa_r+0x698>
 800d0d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d0d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d134 <_dtoa_r+0xb84>
 800d0da:	b11b      	cbz	r3, 800d0e4 <_dtoa_r+0xb34>
 800d0dc:	f10a 0308 	add.w	r3, sl, #8
 800d0e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d0e2:	6013      	str	r3, [r2, #0]
 800d0e4:	4650      	mov	r0, sl
 800d0e6:	b019      	add	sp, #100	@ 0x64
 800d0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0ee:	2b01      	cmp	r3, #1
 800d0f0:	f77f ae37 	ble.w	800cd62 <_dtoa_r+0x7b2>
 800d0f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0f6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d0f8:	2001      	movs	r0, #1
 800d0fa:	e655      	b.n	800cda8 <_dtoa_r+0x7f8>
 800d0fc:	9b00      	ldr	r3, [sp, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	f77f aed6 	ble.w	800ceb0 <_dtoa_r+0x900>
 800d104:	4656      	mov	r6, sl
 800d106:	4621      	mov	r1, r4
 800d108:	4648      	mov	r0, r9
 800d10a:	f7ff f9c6 	bl	800c49a <quorem>
 800d10e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d112:	f806 8b01 	strb.w	r8, [r6], #1
 800d116:	9b00      	ldr	r3, [sp, #0]
 800d118:	eba6 020a 	sub.w	r2, r6, sl
 800d11c:	4293      	cmp	r3, r2
 800d11e:	ddb3      	ble.n	800d088 <_dtoa_r+0xad8>
 800d120:	4649      	mov	r1, r9
 800d122:	2300      	movs	r3, #0
 800d124:	220a      	movs	r2, #10
 800d126:	4658      	mov	r0, fp
 800d128:	f000 f968 	bl	800d3fc <__multadd>
 800d12c:	4681      	mov	r9, r0
 800d12e:	e7ea      	b.n	800d106 <_dtoa_r+0xb56>
 800d130:	0800f2ac 	.word	0x0800f2ac
 800d134:	0800f230 	.word	0x0800f230

0800d138 <_free_r>:
 800d138:	b538      	push	{r3, r4, r5, lr}
 800d13a:	4605      	mov	r5, r0
 800d13c:	2900      	cmp	r1, #0
 800d13e:	d041      	beq.n	800d1c4 <_free_r+0x8c>
 800d140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d144:	1f0c      	subs	r4, r1, #4
 800d146:	2b00      	cmp	r3, #0
 800d148:	bfb8      	it	lt
 800d14a:	18e4      	addlt	r4, r4, r3
 800d14c:	f000 f8e8 	bl	800d320 <__malloc_lock>
 800d150:	4a1d      	ldr	r2, [pc, #116]	@ (800d1c8 <_free_r+0x90>)
 800d152:	6813      	ldr	r3, [r2, #0]
 800d154:	b933      	cbnz	r3, 800d164 <_free_r+0x2c>
 800d156:	6063      	str	r3, [r4, #4]
 800d158:	6014      	str	r4, [r2, #0]
 800d15a:	4628      	mov	r0, r5
 800d15c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d160:	f000 b8e4 	b.w	800d32c <__malloc_unlock>
 800d164:	42a3      	cmp	r3, r4
 800d166:	d908      	bls.n	800d17a <_free_r+0x42>
 800d168:	6820      	ldr	r0, [r4, #0]
 800d16a:	1821      	adds	r1, r4, r0
 800d16c:	428b      	cmp	r3, r1
 800d16e:	bf01      	itttt	eq
 800d170:	6819      	ldreq	r1, [r3, #0]
 800d172:	685b      	ldreq	r3, [r3, #4]
 800d174:	1809      	addeq	r1, r1, r0
 800d176:	6021      	streq	r1, [r4, #0]
 800d178:	e7ed      	b.n	800d156 <_free_r+0x1e>
 800d17a:	461a      	mov	r2, r3
 800d17c:	685b      	ldr	r3, [r3, #4]
 800d17e:	b10b      	cbz	r3, 800d184 <_free_r+0x4c>
 800d180:	42a3      	cmp	r3, r4
 800d182:	d9fa      	bls.n	800d17a <_free_r+0x42>
 800d184:	6811      	ldr	r1, [r2, #0]
 800d186:	1850      	adds	r0, r2, r1
 800d188:	42a0      	cmp	r0, r4
 800d18a:	d10b      	bne.n	800d1a4 <_free_r+0x6c>
 800d18c:	6820      	ldr	r0, [r4, #0]
 800d18e:	4401      	add	r1, r0
 800d190:	1850      	adds	r0, r2, r1
 800d192:	4283      	cmp	r3, r0
 800d194:	6011      	str	r1, [r2, #0]
 800d196:	d1e0      	bne.n	800d15a <_free_r+0x22>
 800d198:	6818      	ldr	r0, [r3, #0]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	6053      	str	r3, [r2, #4]
 800d19e:	4408      	add	r0, r1
 800d1a0:	6010      	str	r0, [r2, #0]
 800d1a2:	e7da      	b.n	800d15a <_free_r+0x22>
 800d1a4:	d902      	bls.n	800d1ac <_free_r+0x74>
 800d1a6:	230c      	movs	r3, #12
 800d1a8:	602b      	str	r3, [r5, #0]
 800d1aa:	e7d6      	b.n	800d15a <_free_r+0x22>
 800d1ac:	6820      	ldr	r0, [r4, #0]
 800d1ae:	1821      	adds	r1, r4, r0
 800d1b0:	428b      	cmp	r3, r1
 800d1b2:	bf04      	itt	eq
 800d1b4:	6819      	ldreq	r1, [r3, #0]
 800d1b6:	685b      	ldreq	r3, [r3, #4]
 800d1b8:	6063      	str	r3, [r4, #4]
 800d1ba:	bf04      	itt	eq
 800d1bc:	1809      	addeq	r1, r1, r0
 800d1be:	6021      	streq	r1, [r4, #0]
 800d1c0:	6054      	str	r4, [r2, #4]
 800d1c2:	e7ca      	b.n	800d15a <_free_r+0x22>
 800d1c4:	bd38      	pop	{r3, r4, r5, pc}
 800d1c6:	bf00      	nop
 800d1c8:	2000541c 	.word	0x2000541c

0800d1cc <malloc>:
 800d1cc:	4b02      	ldr	r3, [pc, #8]	@ (800d1d8 <malloc+0xc>)
 800d1ce:	4601      	mov	r1, r0
 800d1d0:	6818      	ldr	r0, [r3, #0]
 800d1d2:	f000 b825 	b.w	800d220 <_malloc_r>
 800d1d6:	bf00      	nop
 800d1d8:	20000034 	.word	0x20000034

0800d1dc <sbrk_aligned>:
 800d1dc:	b570      	push	{r4, r5, r6, lr}
 800d1de:	4e0f      	ldr	r6, [pc, #60]	@ (800d21c <sbrk_aligned+0x40>)
 800d1e0:	460c      	mov	r4, r1
 800d1e2:	6831      	ldr	r1, [r6, #0]
 800d1e4:	4605      	mov	r5, r0
 800d1e6:	b911      	cbnz	r1, 800d1ee <sbrk_aligned+0x12>
 800d1e8:	f000 fe46 	bl	800de78 <_sbrk_r>
 800d1ec:	6030      	str	r0, [r6, #0]
 800d1ee:	4621      	mov	r1, r4
 800d1f0:	4628      	mov	r0, r5
 800d1f2:	f000 fe41 	bl	800de78 <_sbrk_r>
 800d1f6:	1c43      	adds	r3, r0, #1
 800d1f8:	d103      	bne.n	800d202 <sbrk_aligned+0x26>
 800d1fa:	f04f 34ff 	mov.w	r4, #4294967295
 800d1fe:	4620      	mov	r0, r4
 800d200:	bd70      	pop	{r4, r5, r6, pc}
 800d202:	1cc4      	adds	r4, r0, #3
 800d204:	f024 0403 	bic.w	r4, r4, #3
 800d208:	42a0      	cmp	r0, r4
 800d20a:	d0f8      	beq.n	800d1fe <sbrk_aligned+0x22>
 800d20c:	1a21      	subs	r1, r4, r0
 800d20e:	4628      	mov	r0, r5
 800d210:	f000 fe32 	bl	800de78 <_sbrk_r>
 800d214:	3001      	adds	r0, #1
 800d216:	d1f2      	bne.n	800d1fe <sbrk_aligned+0x22>
 800d218:	e7ef      	b.n	800d1fa <sbrk_aligned+0x1e>
 800d21a:	bf00      	nop
 800d21c:	20005418 	.word	0x20005418

0800d220 <_malloc_r>:
 800d220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d224:	1ccd      	adds	r5, r1, #3
 800d226:	f025 0503 	bic.w	r5, r5, #3
 800d22a:	3508      	adds	r5, #8
 800d22c:	2d0c      	cmp	r5, #12
 800d22e:	bf38      	it	cc
 800d230:	250c      	movcc	r5, #12
 800d232:	2d00      	cmp	r5, #0
 800d234:	4606      	mov	r6, r0
 800d236:	db01      	blt.n	800d23c <_malloc_r+0x1c>
 800d238:	42a9      	cmp	r1, r5
 800d23a:	d904      	bls.n	800d246 <_malloc_r+0x26>
 800d23c:	230c      	movs	r3, #12
 800d23e:	6033      	str	r3, [r6, #0]
 800d240:	2000      	movs	r0, #0
 800d242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d246:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d31c <_malloc_r+0xfc>
 800d24a:	f000 f869 	bl	800d320 <__malloc_lock>
 800d24e:	f8d8 3000 	ldr.w	r3, [r8]
 800d252:	461c      	mov	r4, r3
 800d254:	bb44      	cbnz	r4, 800d2a8 <_malloc_r+0x88>
 800d256:	4629      	mov	r1, r5
 800d258:	4630      	mov	r0, r6
 800d25a:	f7ff ffbf 	bl	800d1dc <sbrk_aligned>
 800d25e:	1c43      	adds	r3, r0, #1
 800d260:	4604      	mov	r4, r0
 800d262:	d158      	bne.n	800d316 <_malloc_r+0xf6>
 800d264:	f8d8 4000 	ldr.w	r4, [r8]
 800d268:	4627      	mov	r7, r4
 800d26a:	2f00      	cmp	r7, #0
 800d26c:	d143      	bne.n	800d2f6 <_malloc_r+0xd6>
 800d26e:	2c00      	cmp	r4, #0
 800d270:	d04b      	beq.n	800d30a <_malloc_r+0xea>
 800d272:	6823      	ldr	r3, [r4, #0]
 800d274:	4639      	mov	r1, r7
 800d276:	4630      	mov	r0, r6
 800d278:	eb04 0903 	add.w	r9, r4, r3
 800d27c:	f000 fdfc 	bl	800de78 <_sbrk_r>
 800d280:	4581      	cmp	r9, r0
 800d282:	d142      	bne.n	800d30a <_malloc_r+0xea>
 800d284:	6821      	ldr	r1, [r4, #0]
 800d286:	1a6d      	subs	r5, r5, r1
 800d288:	4629      	mov	r1, r5
 800d28a:	4630      	mov	r0, r6
 800d28c:	f7ff ffa6 	bl	800d1dc <sbrk_aligned>
 800d290:	3001      	adds	r0, #1
 800d292:	d03a      	beq.n	800d30a <_malloc_r+0xea>
 800d294:	6823      	ldr	r3, [r4, #0]
 800d296:	442b      	add	r3, r5
 800d298:	6023      	str	r3, [r4, #0]
 800d29a:	f8d8 3000 	ldr.w	r3, [r8]
 800d29e:	685a      	ldr	r2, [r3, #4]
 800d2a0:	bb62      	cbnz	r2, 800d2fc <_malloc_r+0xdc>
 800d2a2:	f8c8 7000 	str.w	r7, [r8]
 800d2a6:	e00f      	b.n	800d2c8 <_malloc_r+0xa8>
 800d2a8:	6822      	ldr	r2, [r4, #0]
 800d2aa:	1b52      	subs	r2, r2, r5
 800d2ac:	d420      	bmi.n	800d2f0 <_malloc_r+0xd0>
 800d2ae:	2a0b      	cmp	r2, #11
 800d2b0:	d917      	bls.n	800d2e2 <_malloc_r+0xc2>
 800d2b2:	1961      	adds	r1, r4, r5
 800d2b4:	42a3      	cmp	r3, r4
 800d2b6:	6025      	str	r5, [r4, #0]
 800d2b8:	bf18      	it	ne
 800d2ba:	6059      	strne	r1, [r3, #4]
 800d2bc:	6863      	ldr	r3, [r4, #4]
 800d2be:	bf08      	it	eq
 800d2c0:	f8c8 1000 	streq.w	r1, [r8]
 800d2c4:	5162      	str	r2, [r4, r5]
 800d2c6:	604b      	str	r3, [r1, #4]
 800d2c8:	4630      	mov	r0, r6
 800d2ca:	f000 f82f 	bl	800d32c <__malloc_unlock>
 800d2ce:	f104 000b 	add.w	r0, r4, #11
 800d2d2:	1d23      	adds	r3, r4, #4
 800d2d4:	f020 0007 	bic.w	r0, r0, #7
 800d2d8:	1ac2      	subs	r2, r0, r3
 800d2da:	bf1c      	itt	ne
 800d2dc:	1a1b      	subne	r3, r3, r0
 800d2de:	50a3      	strne	r3, [r4, r2]
 800d2e0:	e7af      	b.n	800d242 <_malloc_r+0x22>
 800d2e2:	6862      	ldr	r2, [r4, #4]
 800d2e4:	42a3      	cmp	r3, r4
 800d2e6:	bf0c      	ite	eq
 800d2e8:	f8c8 2000 	streq.w	r2, [r8]
 800d2ec:	605a      	strne	r2, [r3, #4]
 800d2ee:	e7eb      	b.n	800d2c8 <_malloc_r+0xa8>
 800d2f0:	4623      	mov	r3, r4
 800d2f2:	6864      	ldr	r4, [r4, #4]
 800d2f4:	e7ae      	b.n	800d254 <_malloc_r+0x34>
 800d2f6:	463c      	mov	r4, r7
 800d2f8:	687f      	ldr	r7, [r7, #4]
 800d2fa:	e7b6      	b.n	800d26a <_malloc_r+0x4a>
 800d2fc:	461a      	mov	r2, r3
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	42a3      	cmp	r3, r4
 800d302:	d1fb      	bne.n	800d2fc <_malloc_r+0xdc>
 800d304:	2300      	movs	r3, #0
 800d306:	6053      	str	r3, [r2, #4]
 800d308:	e7de      	b.n	800d2c8 <_malloc_r+0xa8>
 800d30a:	230c      	movs	r3, #12
 800d30c:	6033      	str	r3, [r6, #0]
 800d30e:	4630      	mov	r0, r6
 800d310:	f000 f80c 	bl	800d32c <__malloc_unlock>
 800d314:	e794      	b.n	800d240 <_malloc_r+0x20>
 800d316:	6005      	str	r5, [r0, #0]
 800d318:	e7d6      	b.n	800d2c8 <_malloc_r+0xa8>
 800d31a:	bf00      	nop
 800d31c:	2000541c 	.word	0x2000541c

0800d320 <__malloc_lock>:
 800d320:	4801      	ldr	r0, [pc, #4]	@ (800d328 <__malloc_lock+0x8>)
 800d322:	f7ff b8aa 	b.w	800c47a <__retarget_lock_acquire_recursive>
 800d326:	bf00      	nop
 800d328:	20005414 	.word	0x20005414

0800d32c <__malloc_unlock>:
 800d32c:	4801      	ldr	r0, [pc, #4]	@ (800d334 <__malloc_unlock+0x8>)
 800d32e:	f7ff b8a5 	b.w	800c47c <__retarget_lock_release_recursive>
 800d332:	bf00      	nop
 800d334:	20005414 	.word	0x20005414

0800d338 <_Balloc>:
 800d338:	b570      	push	{r4, r5, r6, lr}
 800d33a:	69c6      	ldr	r6, [r0, #28]
 800d33c:	4604      	mov	r4, r0
 800d33e:	460d      	mov	r5, r1
 800d340:	b976      	cbnz	r6, 800d360 <_Balloc+0x28>
 800d342:	2010      	movs	r0, #16
 800d344:	f7ff ff42 	bl	800d1cc <malloc>
 800d348:	4602      	mov	r2, r0
 800d34a:	61e0      	str	r0, [r4, #28]
 800d34c:	b920      	cbnz	r0, 800d358 <_Balloc+0x20>
 800d34e:	4b18      	ldr	r3, [pc, #96]	@ (800d3b0 <_Balloc+0x78>)
 800d350:	4818      	ldr	r0, [pc, #96]	@ (800d3b4 <_Balloc+0x7c>)
 800d352:	216b      	movs	r1, #107	@ 0x6b
 800d354:	f000 fda0 	bl	800de98 <__assert_func>
 800d358:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d35c:	6006      	str	r6, [r0, #0]
 800d35e:	60c6      	str	r6, [r0, #12]
 800d360:	69e6      	ldr	r6, [r4, #28]
 800d362:	68f3      	ldr	r3, [r6, #12]
 800d364:	b183      	cbz	r3, 800d388 <_Balloc+0x50>
 800d366:	69e3      	ldr	r3, [r4, #28]
 800d368:	68db      	ldr	r3, [r3, #12]
 800d36a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d36e:	b9b8      	cbnz	r0, 800d3a0 <_Balloc+0x68>
 800d370:	2101      	movs	r1, #1
 800d372:	fa01 f605 	lsl.w	r6, r1, r5
 800d376:	1d72      	adds	r2, r6, #5
 800d378:	0092      	lsls	r2, r2, #2
 800d37a:	4620      	mov	r0, r4
 800d37c:	f000 fdaa 	bl	800ded4 <_calloc_r>
 800d380:	b160      	cbz	r0, 800d39c <_Balloc+0x64>
 800d382:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d386:	e00e      	b.n	800d3a6 <_Balloc+0x6e>
 800d388:	2221      	movs	r2, #33	@ 0x21
 800d38a:	2104      	movs	r1, #4
 800d38c:	4620      	mov	r0, r4
 800d38e:	f000 fda1 	bl	800ded4 <_calloc_r>
 800d392:	69e3      	ldr	r3, [r4, #28]
 800d394:	60f0      	str	r0, [r6, #12]
 800d396:	68db      	ldr	r3, [r3, #12]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d1e4      	bne.n	800d366 <_Balloc+0x2e>
 800d39c:	2000      	movs	r0, #0
 800d39e:	bd70      	pop	{r4, r5, r6, pc}
 800d3a0:	6802      	ldr	r2, [r0, #0]
 800d3a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d3ac:	e7f7      	b.n	800d39e <_Balloc+0x66>
 800d3ae:	bf00      	nop
 800d3b0:	0800f23d 	.word	0x0800f23d
 800d3b4:	0800f2bd 	.word	0x0800f2bd

0800d3b8 <_Bfree>:
 800d3b8:	b570      	push	{r4, r5, r6, lr}
 800d3ba:	69c6      	ldr	r6, [r0, #28]
 800d3bc:	4605      	mov	r5, r0
 800d3be:	460c      	mov	r4, r1
 800d3c0:	b976      	cbnz	r6, 800d3e0 <_Bfree+0x28>
 800d3c2:	2010      	movs	r0, #16
 800d3c4:	f7ff ff02 	bl	800d1cc <malloc>
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	61e8      	str	r0, [r5, #28]
 800d3cc:	b920      	cbnz	r0, 800d3d8 <_Bfree+0x20>
 800d3ce:	4b09      	ldr	r3, [pc, #36]	@ (800d3f4 <_Bfree+0x3c>)
 800d3d0:	4809      	ldr	r0, [pc, #36]	@ (800d3f8 <_Bfree+0x40>)
 800d3d2:	218f      	movs	r1, #143	@ 0x8f
 800d3d4:	f000 fd60 	bl	800de98 <__assert_func>
 800d3d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3dc:	6006      	str	r6, [r0, #0]
 800d3de:	60c6      	str	r6, [r0, #12]
 800d3e0:	b13c      	cbz	r4, 800d3f2 <_Bfree+0x3a>
 800d3e2:	69eb      	ldr	r3, [r5, #28]
 800d3e4:	6862      	ldr	r2, [r4, #4]
 800d3e6:	68db      	ldr	r3, [r3, #12]
 800d3e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d3ec:	6021      	str	r1, [r4, #0]
 800d3ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d3f2:	bd70      	pop	{r4, r5, r6, pc}
 800d3f4:	0800f23d 	.word	0x0800f23d
 800d3f8:	0800f2bd 	.word	0x0800f2bd

0800d3fc <__multadd>:
 800d3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d400:	690d      	ldr	r5, [r1, #16]
 800d402:	4607      	mov	r7, r0
 800d404:	460c      	mov	r4, r1
 800d406:	461e      	mov	r6, r3
 800d408:	f101 0c14 	add.w	ip, r1, #20
 800d40c:	2000      	movs	r0, #0
 800d40e:	f8dc 3000 	ldr.w	r3, [ip]
 800d412:	b299      	uxth	r1, r3
 800d414:	fb02 6101 	mla	r1, r2, r1, r6
 800d418:	0c1e      	lsrs	r6, r3, #16
 800d41a:	0c0b      	lsrs	r3, r1, #16
 800d41c:	fb02 3306 	mla	r3, r2, r6, r3
 800d420:	b289      	uxth	r1, r1
 800d422:	3001      	adds	r0, #1
 800d424:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d428:	4285      	cmp	r5, r0
 800d42a:	f84c 1b04 	str.w	r1, [ip], #4
 800d42e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d432:	dcec      	bgt.n	800d40e <__multadd+0x12>
 800d434:	b30e      	cbz	r6, 800d47a <__multadd+0x7e>
 800d436:	68a3      	ldr	r3, [r4, #8]
 800d438:	42ab      	cmp	r3, r5
 800d43a:	dc19      	bgt.n	800d470 <__multadd+0x74>
 800d43c:	6861      	ldr	r1, [r4, #4]
 800d43e:	4638      	mov	r0, r7
 800d440:	3101      	adds	r1, #1
 800d442:	f7ff ff79 	bl	800d338 <_Balloc>
 800d446:	4680      	mov	r8, r0
 800d448:	b928      	cbnz	r0, 800d456 <__multadd+0x5a>
 800d44a:	4602      	mov	r2, r0
 800d44c:	4b0c      	ldr	r3, [pc, #48]	@ (800d480 <__multadd+0x84>)
 800d44e:	480d      	ldr	r0, [pc, #52]	@ (800d484 <__multadd+0x88>)
 800d450:	21ba      	movs	r1, #186	@ 0xba
 800d452:	f000 fd21 	bl	800de98 <__assert_func>
 800d456:	6922      	ldr	r2, [r4, #16]
 800d458:	3202      	adds	r2, #2
 800d45a:	f104 010c 	add.w	r1, r4, #12
 800d45e:	0092      	lsls	r2, r2, #2
 800d460:	300c      	adds	r0, #12
 800d462:	f7ff f80c 	bl	800c47e <memcpy>
 800d466:	4621      	mov	r1, r4
 800d468:	4638      	mov	r0, r7
 800d46a:	f7ff ffa5 	bl	800d3b8 <_Bfree>
 800d46e:	4644      	mov	r4, r8
 800d470:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d474:	3501      	adds	r5, #1
 800d476:	615e      	str	r6, [r3, #20]
 800d478:	6125      	str	r5, [r4, #16]
 800d47a:	4620      	mov	r0, r4
 800d47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d480:	0800f2ac 	.word	0x0800f2ac
 800d484:	0800f2bd 	.word	0x0800f2bd

0800d488 <__hi0bits>:
 800d488:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d48c:	4603      	mov	r3, r0
 800d48e:	bf36      	itet	cc
 800d490:	0403      	lslcc	r3, r0, #16
 800d492:	2000      	movcs	r0, #0
 800d494:	2010      	movcc	r0, #16
 800d496:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d49a:	bf3c      	itt	cc
 800d49c:	021b      	lslcc	r3, r3, #8
 800d49e:	3008      	addcc	r0, #8
 800d4a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d4a4:	bf3c      	itt	cc
 800d4a6:	011b      	lslcc	r3, r3, #4
 800d4a8:	3004      	addcc	r0, #4
 800d4aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d4ae:	bf3c      	itt	cc
 800d4b0:	009b      	lslcc	r3, r3, #2
 800d4b2:	3002      	addcc	r0, #2
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	db05      	blt.n	800d4c4 <__hi0bits+0x3c>
 800d4b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d4bc:	f100 0001 	add.w	r0, r0, #1
 800d4c0:	bf08      	it	eq
 800d4c2:	2020      	moveq	r0, #32
 800d4c4:	4770      	bx	lr

0800d4c6 <__lo0bits>:
 800d4c6:	6803      	ldr	r3, [r0, #0]
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	f013 0007 	ands.w	r0, r3, #7
 800d4ce:	d00b      	beq.n	800d4e8 <__lo0bits+0x22>
 800d4d0:	07d9      	lsls	r1, r3, #31
 800d4d2:	d421      	bmi.n	800d518 <__lo0bits+0x52>
 800d4d4:	0798      	lsls	r0, r3, #30
 800d4d6:	bf49      	itett	mi
 800d4d8:	085b      	lsrmi	r3, r3, #1
 800d4da:	089b      	lsrpl	r3, r3, #2
 800d4dc:	2001      	movmi	r0, #1
 800d4de:	6013      	strmi	r3, [r2, #0]
 800d4e0:	bf5c      	itt	pl
 800d4e2:	6013      	strpl	r3, [r2, #0]
 800d4e4:	2002      	movpl	r0, #2
 800d4e6:	4770      	bx	lr
 800d4e8:	b299      	uxth	r1, r3
 800d4ea:	b909      	cbnz	r1, 800d4f0 <__lo0bits+0x2a>
 800d4ec:	0c1b      	lsrs	r3, r3, #16
 800d4ee:	2010      	movs	r0, #16
 800d4f0:	b2d9      	uxtb	r1, r3
 800d4f2:	b909      	cbnz	r1, 800d4f8 <__lo0bits+0x32>
 800d4f4:	3008      	adds	r0, #8
 800d4f6:	0a1b      	lsrs	r3, r3, #8
 800d4f8:	0719      	lsls	r1, r3, #28
 800d4fa:	bf04      	itt	eq
 800d4fc:	091b      	lsreq	r3, r3, #4
 800d4fe:	3004      	addeq	r0, #4
 800d500:	0799      	lsls	r1, r3, #30
 800d502:	bf04      	itt	eq
 800d504:	089b      	lsreq	r3, r3, #2
 800d506:	3002      	addeq	r0, #2
 800d508:	07d9      	lsls	r1, r3, #31
 800d50a:	d403      	bmi.n	800d514 <__lo0bits+0x4e>
 800d50c:	085b      	lsrs	r3, r3, #1
 800d50e:	f100 0001 	add.w	r0, r0, #1
 800d512:	d003      	beq.n	800d51c <__lo0bits+0x56>
 800d514:	6013      	str	r3, [r2, #0]
 800d516:	4770      	bx	lr
 800d518:	2000      	movs	r0, #0
 800d51a:	4770      	bx	lr
 800d51c:	2020      	movs	r0, #32
 800d51e:	4770      	bx	lr

0800d520 <__i2b>:
 800d520:	b510      	push	{r4, lr}
 800d522:	460c      	mov	r4, r1
 800d524:	2101      	movs	r1, #1
 800d526:	f7ff ff07 	bl	800d338 <_Balloc>
 800d52a:	4602      	mov	r2, r0
 800d52c:	b928      	cbnz	r0, 800d53a <__i2b+0x1a>
 800d52e:	4b05      	ldr	r3, [pc, #20]	@ (800d544 <__i2b+0x24>)
 800d530:	4805      	ldr	r0, [pc, #20]	@ (800d548 <__i2b+0x28>)
 800d532:	f240 1145 	movw	r1, #325	@ 0x145
 800d536:	f000 fcaf 	bl	800de98 <__assert_func>
 800d53a:	2301      	movs	r3, #1
 800d53c:	6144      	str	r4, [r0, #20]
 800d53e:	6103      	str	r3, [r0, #16]
 800d540:	bd10      	pop	{r4, pc}
 800d542:	bf00      	nop
 800d544:	0800f2ac 	.word	0x0800f2ac
 800d548:	0800f2bd 	.word	0x0800f2bd

0800d54c <__multiply>:
 800d54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d550:	4614      	mov	r4, r2
 800d552:	690a      	ldr	r2, [r1, #16]
 800d554:	6923      	ldr	r3, [r4, #16]
 800d556:	429a      	cmp	r2, r3
 800d558:	bfa8      	it	ge
 800d55a:	4623      	movge	r3, r4
 800d55c:	460f      	mov	r7, r1
 800d55e:	bfa4      	itt	ge
 800d560:	460c      	movge	r4, r1
 800d562:	461f      	movge	r7, r3
 800d564:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d568:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d56c:	68a3      	ldr	r3, [r4, #8]
 800d56e:	6861      	ldr	r1, [r4, #4]
 800d570:	eb0a 0609 	add.w	r6, sl, r9
 800d574:	42b3      	cmp	r3, r6
 800d576:	b085      	sub	sp, #20
 800d578:	bfb8      	it	lt
 800d57a:	3101      	addlt	r1, #1
 800d57c:	f7ff fedc 	bl	800d338 <_Balloc>
 800d580:	b930      	cbnz	r0, 800d590 <__multiply+0x44>
 800d582:	4602      	mov	r2, r0
 800d584:	4b44      	ldr	r3, [pc, #272]	@ (800d698 <__multiply+0x14c>)
 800d586:	4845      	ldr	r0, [pc, #276]	@ (800d69c <__multiply+0x150>)
 800d588:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d58c:	f000 fc84 	bl	800de98 <__assert_func>
 800d590:	f100 0514 	add.w	r5, r0, #20
 800d594:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d598:	462b      	mov	r3, r5
 800d59a:	2200      	movs	r2, #0
 800d59c:	4543      	cmp	r3, r8
 800d59e:	d321      	bcc.n	800d5e4 <__multiply+0x98>
 800d5a0:	f107 0114 	add.w	r1, r7, #20
 800d5a4:	f104 0214 	add.w	r2, r4, #20
 800d5a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d5ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d5b0:	9302      	str	r3, [sp, #8]
 800d5b2:	1b13      	subs	r3, r2, r4
 800d5b4:	3b15      	subs	r3, #21
 800d5b6:	f023 0303 	bic.w	r3, r3, #3
 800d5ba:	3304      	adds	r3, #4
 800d5bc:	f104 0715 	add.w	r7, r4, #21
 800d5c0:	42ba      	cmp	r2, r7
 800d5c2:	bf38      	it	cc
 800d5c4:	2304      	movcc	r3, #4
 800d5c6:	9301      	str	r3, [sp, #4]
 800d5c8:	9b02      	ldr	r3, [sp, #8]
 800d5ca:	9103      	str	r1, [sp, #12]
 800d5cc:	428b      	cmp	r3, r1
 800d5ce:	d80c      	bhi.n	800d5ea <__multiply+0x9e>
 800d5d0:	2e00      	cmp	r6, #0
 800d5d2:	dd03      	ble.n	800d5dc <__multiply+0x90>
 800d5d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d05b      	beq.n	800d694 <__multiply+0x148>
 800d5dc:	6106      	str	r6, [r0, #16]
 800d5de:	b005      	add	sp, #20
 800d5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e4:	f843 2b04 	str.w	r2, [r3], #4
 800d5e8:	e7d8      	b.n	800d59c <__multiply+0x50>
 800d5ea:	f8b1 a000 	ldrh.w	sl, [r1]
 800d5ee:	f1ba 0f00 	cmp.w	sl, #0
 800d5f2:	d024      	beq.n	800d63e <__multiply+0xf2>
 800d5f4:	f104 0e14 	add.w	lr, r4, #20
 800d5f8:	46a9      	mov	r9, r5
 800d5fa:	f04f 0c00 	mov.w	ip, #0
 800d5fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d602:	f8d9 3000 	ldr.w	r3, [r9]
 800d606:	fa1f fb87 	uxth.w	fp, r7
 800d60a:	b29b      	uxth	r3, r3
 800d60c:	fb0a 330b 	mla	r3, sl, fp, r3
 800d610:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d614:	f8d9 7000 	ldr.w	r7, [r9]
 800d618:	4463      	add	r3, ip
 800d61a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d61e:	fb0a c70b 	mla	r7, sl, fp, ip
 800d622:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d626:	b29b      	uxth	r3, r3
 800d628:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d62c:	4572      	cmp	r2, lr
 800d62e:	f849 3b04 	str.w	r3, [r9], #4
 800d632:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d636:	d8e2      	bhi.n	800d5fe <__multiply+0xb2>
 800d638:	9b01      	ldr	r3, [sp, #4]
 800d63a:	f845 c003 	str.w	ip, [r5, r3]
 800d63e:	9b03      	ldr	r3, [sp, #12]
 800d640:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d644:	3104      	adds	r1, #4
 800d646:	f1b9 0f00 	cmp.w	r9, #0
 800d64a:	d021      	beq.n	800d690 <__multiply+0x144>
 800d64c:	682b      	ldr	r3, [r5, #0]
 800d64e:	f104 0c14 	add.w	ip, r4, #20
 800d652:	46ae      	mov	lr, r5
 800d654:	f04f 0a00 	mov.w	sl, #0
 800d658:	f8bc b000 	ldrh.w	fp, [ip]
 800d65c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d660:	fb09 770b 	mla	r7, r9, fp, r7
 800d664:	4457      	add	r7, sl
 800d666:	b29b      	uxth	r3, r3
 800d668:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d66c:	f84e 3b04 	str.w	r3, [lr], #4
 800d670:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d674:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d678:	f8be 3000 	ldrh.w	r3, [lr]
 800d67c:	fb09 330a 	mla	r3, r9, sl, r3
 800d680:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d684:	4562      	cmp	r2, ip
 800d686:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d68a:	d8e5      	bhi.n	800d658 <__multiply+0x10c>
 800d68c:	9f01      	ldr	r7, [sp, #4]
 800d68e:	51eb      	str	r3, [r5, r7]
 800d690:	3504      	adds	r5, #4
 800d692:	e799      	b.n	800d5c8 <__multiply+0x7c>
 800d694:	3e01      	subs	r6, #1
 800d696:	e79b      	b.n	800d5d0 <__multiply+0x84>
 800d698:	0800f2ac 	.word	0x0800f2ac
 800d69c:	0800f2bd 	.word	0x0800f2bd

0800d6a0 <__pow5mult>:
 800d6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6a4:	4615      	mov	r5, r2
 800d6a6:	f012 0203 	ands.w	r2, r2, #3
 800d6aa:	4607      	mov	r7, r0
 800d6ac:	460e      	mov	r6, r1
 800d6ae:	d007      	beq.n	800d6c0 <__pow5mult+0x20>
 800d6b0:	4c25      	ldr	r4, [pc, #148]	@ (800d748 <__pow5mult+0xa8>)
 800d6b2:	3a01      	subs	r2, #1
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d6ba:	f7ff fe9f 	bl	800d3fc <__multadd>
 800d6be:	4606      	mov	r6, r0
 800d6c0:	10ad      	asrs	r5, r5, #2
 800d6c2:	d03d      	beq.n	800d740 <__pow5mult+0xa0>
 800d6c4:	69fc      	ldr	r4, [r7, #28]
 800d6c6:	b97c      	cbnz	r4, 800d6e8 <__pow5mult+0x48>
 800d6c8:	2010      	movs	r0, #16
 800d6ca:	f7ff fd7f 	bl	800d1cc <malloc>
 800d6ce:	4602      	mov	r2, r0
 800d6d0:	61f8      	str	r0, [r7, #28]
 800d6d2:	b928      	cbnz	r0, 800d6e0 <__pow5mult+0x40>
 800d6d4:	4b1d      	ldr	r3, [pc, #116]	@ (800d74c <__pow5mult+0xac>)
 800d6d6:	481e      	ldr	r0, [pc, #120]	@ (800d750 <__pow5mult+0xb0>)
 800d6d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d6dc:	f000 fbdc 	bl	800de98 <__assert_func>
 800d6e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d6e4:	6004      	str	r4, [r0, #0]
 800d6e6:	60c4      	str	r4, [r0, #12]
 800d6e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d6ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d6f0:	b94c      	cbnz	r4, 800d706 <__pow5mult+0x66>
 800d6f2:	f240 2171 	movw	r1, #625	@ 0x271
 800d6f6:	4638      	mov	r0, r7
 800d6f8:	f7ff ff12 	bl	800d520 <__i2b>
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800d702:	4604      	mov	r4, r0
 800d704:	6003      	str	r3, [r0, #0]
 800d706:	f04f 0900 	mov.w	r9, #0
 800d70a:	07eb      	lsls	r3, r5, #31
 800d70c:	d50a      	bpl.n	800d724 <__pow5mult+0x84>
 800d70e:	4631      	mov	r1, r6
 800d710:	4622      	mov	r2, r4
 800d712:	4638      	mov	r0, r7
 800d714:	f7ff ff1a 	bl	800d54c <__multiply>
 800d718:	4631      	mov	r1, r6
 800d71a:	4680      	mov	r8, r0
 800d71c:	4638      	mov	r0, r7
 800d71e:	f7ff fe4b 	bl	800d3b8 <_Bfree>
 800d722:	4646      	mov	r6, r8
 800d724:	106d      	asrs	r5, r5, #1
 800d726:	d00b      	beq.n	800d740 <__pow5mult+0xa0>
 800d728:	6820      	ldr	r0, [r4, #0]
 800d72a:	b938      	cbnz	r0, 800d73c <__pow5mult+0x9c>
 800d72c:	4622      	mov	r2, r4
 800d72e:	4621      	mov	r1, r4
 800d730:	4638      	mov	r0, r7
 800d732:	f7ff ff0b 	bl	800d54c <__multiply>
 800d736:	6020      	str	r0, [r4, #0]
 800d738:	f8c0 9000 	str.w	r9, [r0]
 800d73c:	4604      	mov	r4, r0
 800d73e:	e7e4      	b.n	800d70a <__pow5mult+0x6a>
 800d740:	4630      	mov	r0, r6
 800d742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d746:	bf00      	nop
 800d748:	0800f318 	.word	0x0800f318
 800d74c:	0800f23d 	.word	0x0800f23d
 800d750:	0800f2bd 	.word	0x0800f2bd

0800d754 <__lshift>:
 800d754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d758:	460c      	mov	r4, r1
 800d75a:	6849      	ldr	r1, [r1, #4]
 800d75c:	6923      	ldr	r3, [r4, #16]
 800d75e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d762:	68a3      	ldr	r3, [r4, #8]
 800d764:	4607      	mov	r7, r0
 800d766:	4691      	mov	r9, r2
 800d768:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d76c:	f108 0601 	add.w	r6, r8, #1
 800d770:	42b3      	cmp	r3, r6
 800d772:	db0b      	blt.n	800d78c <__lshift+0x38>
 800d774:	4638      	mov	r0, r7
 800d776:	f7ff fddf 	bl	800d338 <_Balloc>
 800d77a:	4605      	mov	r5, r0
 800d77c:	b948      	cbnz	r0, 800d792 <__lshift+0x3e>
 800d77e:	4602      	mov	r2, r0
 800d780:	4b28      	ldr	r3, [pc, #160]	@ (800d824 <__lshift+0xd0>)
 800d782:	4829      	ldr	r0, [pc, #164]	@ (800d828 <__lshift+0xd4>)
 800d784:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d788:	f000 fb86 	bl	800de98 <__assert_func>
 800d78c:	3101      	adds	r1, #1
 800d78e:	005b      	lsls	r3, r3, #1
 800d790:	e7ee      	b.n	800d770 <__lshift+0x1c>
 800d792:	2300      	movs	r3, #0
 800d794:	f100 0114 	add.w	r1, r0, #20
 800d798:	f100 0210 	add.w	r2, r0, #16
 800d79c:	4618      	mov	r0, r3
 800d79e:	4553      	cmp	r3, sl
 800d7a0:	db33      	blt.n	800d80a <__lshift+0xb6>
 800d7a2:	6920      	ldr	r0, [r4, #16]
 800d7a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d7a8:	f104 0314 	add.w	r3, r4, #20
 800d7ac:	f019 091f 	ands.w	r9, r9, #31
 800d7b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d7b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d7b8:	d02b      	beq.n	800d812 <__lshift+0xbe>
 800d7ba:	f1c9 0e20 	rsb	lr, r9, #32
 800d7be:	468a      	mov	sl, r1
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	6818      	ldr	r0, [r3, #0]
 800d7c4:	fa00 f009 	lsl.w	r0, r0, r9
 800d7c8:	4310      	orrs	r0, r2
 800d7ca:	f84a 0b04 	str.w	r0, [sl], #4
 800d7ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7d2:	459c      	cmp	ip, r3
 800d7d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d7d8:	d8f3      	bhi.n	800d7c2 <__lshift+0x6e>
 800d7da:	ebac 0304 	sub.w	r3, ip, r4
 800d7de:	3b15      	subs	r3, #21
 800d7e0:	f023 0303 	bic.w	r3, r3, #3
 800d7e4:	3304      	adds	r3, #4
 800d7e6:	f104 0015 	add.w	r0, r4, #21
 800d7ea:	4584      	cmp	ip, r0
 800d7ec:	bf38      	it	cc
 800d7ee:	2304      	movcc	r3, #4
 800d7f0:	50ca      	str	r2, [r1, r3]
 800d7f2:	b10a      	cbz	r2, 800d7f8 <__lshift+0xa4>
 800d7f4:	f108 0602 	add.w	r6, r8, #2
 800d7f8:	3e01      	subs	r6, #1
 800d7fa:	4638      	mov	r0, r7
 800d7fc:	612e      	str	r6, [r5, #16]
 800d7fe:	4621      	mov	r1, r4
 800d800:	f7ff fdda 	bl	800d3b8 <_Bfree>
 800d804:	4628      	mov	r0, r5
 800d806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d80a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d80e:	3301      	adds	r3, #1
 800d810:	e7c5      	b.n	800d79e <__lshift+0x4a>
 800d812:	3904      	subs	r1, #4
 800d814:	f853 2b04 	ldr.w	r2, [r3], #4
 800d818:	f841 2f04 	str.w	r2, [r1, #4]!
 800d81c:	459c      	cmp	ip, r3
 800d81e:	d8f9      	bhi.n	800d814 <__lshift+0xc0>
 800d820:	e7ea      	b.n	800d7f8 <__lshift+0xa4>
 800d822:	bf00      	nop
 800d824:	0800f2ac 	.word	0x0800f2ac
 800d828:	0800f2bd 	.word	0x0800f2bd

0800d82c <__mcmp>:
 800d82c:	690a      	ldr	r2, [r1, #16]
 800d82e:	4603      	mov	r3, r0
 800d830:	6900      	ldr	r0, [r0, #16]
 800d832:	1a80      	subs	r0, r0, r2
 800d834:	b530      	push	{r4, r5, lr}
 800d836:	d10e      	bne.n	800d856 <__mcmp+0x2a>
 800d838:	3314      	adds	r3, #20
 800d83a:	3114      	adds	r1, #20
 800d83c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d840:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d844:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d848:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d84c:	4295      	cmp	r5, r2
 800d84e:	d003      	beq.n	800d858 <__mcmp+0x2c>
 800d850:	d205      	bcs.n	800d85e <__mcmp+0x32>
 800d852:	f04f 30ff 	mov.w	r0, #4294967295
 800d856:	bd30      	pop	{r4, r5, pc}
 800d858:	42a3      	cmp	r3, r4
 800d85a:	d3f3      	bcc.n	800d844 <__mcmp+0x18>
 800d85c:	e7fb      	b.n	800d856 <__mcmp+0x2a>
 800d85e:	2001      	movs	r0, #1
 800d860:	e7f9      	b.n	800d856 <__mcmp+0x2a>
	...

0800d864 <__mdiff>:
 800d864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d868:	4689      	mov	r9, r1
 800d86a:	4606      	mov	r6, r0
 800d86c:	4611      	mov	r1, r2
 800d86e:	4648      	mov	r0, r9
 800d870:	4614      	mov	r4, r2
 800d872:	f7ff ffdb 	bl	800d82c <__mcmp>
 800d876:	1e05      	subs	r5, r0, #0
 800d878:	d112      	bne.n	800d8a0 <__mdiff+0x3c>
 800d87a:	4629      	mov	r1, r5
 800d87c:	4630      	mov	r0, r6
 800d87e:	f7ff fd5b 	bl	800d338 <_Balloc>
 800d882:	4602      	mov	r2, r0
 800d884:	b928      	cbnz	r0, 800d892 <__mdiff+0x2e>
 800d886:	4b3f      	ldr	r3, [pc, #252]	@ (800d984 <__mdiff+0x120>)
 800d888:	f240 2137 	movw	r1, #567	@ 0x237
 800d88c:	483e      	ldr	r0, [pc, #248]	@ (800d988 <__mdiff+0x124>)
 800d88e:	f000 fb03 	bl	800de98 <__assert_func>
 800d892:	2301      	movs	r3, #1
 800d894:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d898:	4610      	mov	r0, r2
 800d89a:	b003      	add	sp, #12
 800d89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8a0:	bfbc      	itt	lt
 800d8a2:	464b      	movlt	r3, r9
 800d8a4:	46a1      	movlt	r9, r4
 800d8a6:	4630      	mov	r0, r6
 800d8a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d8ac:	bfba      	itte	lt
 800d8ae:	461c      	movlt	r4, r3
 800d8b0:	2501      	movlt	r5, #1
 800d8b2:	2500      	movge	r5, #0
 800d8b4:	f7ff fd40 	bl	800d338 <_Balloc>
 800d8b8:	4602      	mov	r2, r0
 800d8ba:	b918      	cbnz	r0, 800d8c4 <__mdiff+0x60>
 800d8bc:	4b31      	ldr	r3, [pc, #196]	@ (800d984 <__mdiff+0x120>)
 800d8be:	f240 2145 	movw	r1, #581	@ 0x245
 800d8c2:	e7e3      	b.n	800d88c <__mdiff+0x28>
 800d8c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d8c8:	6926      	ldr	r6, [r4, #16]
 800d8ca:	60c5      	str	r5, [r0, #12]
 800d8cc:	f109 0310 	add.w	r3, r9, #16
 800d8d0:	f109 0514 	add.w	r5, r9, #20
 800d8d4:	f104 0e14 	add.w	lr, r4, #20
 800d8d8:	f100 0b14 	add.w	fp, r0, #20
 800d8dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d8e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d8e4:	9301      	str	r3, [sp, #4]
 800d8e6:	46d9      	mov	r9, fp
 800d8e8:	f04f 0c00 	mov.w	ip, #0
 800d8ec:	9b01      	ldr	r3, [sp, #4]
 800d8ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d8f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d8f6:	9301      	str	r3, [sp, #4]
 800d8f8:	fa1f f38a 	uxth.w	r3, sl
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	b283      	uxth	r3, r0
 800d900:	1acb      	subs	r3, r1, r3
 800d902:	0c00      	lsrs	r0, r0, #16
 800d904:	4463      	add	r3, ip
 800d906:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d90a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d90e:	b29b      	uxth	r3, r3
 800d910:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d914:	4576      	cmp	r6, lr
 800d916:	f849 3b04 	str.w	r3, [r9], #4
 800d91a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d91e:	d8e5      	bhi.n	800d8ec <__mdiff+0x88>
 800d920:	1b33      	subs	r3, r6, r4
 800d922:	3b15      	subs	r3, #21
 800d924:	f023 0303 	bic.w	r3, r3, #3
 800d928:	3415      	adds	r4, #21
 800d92a:	3304      	adds	r3, #4
 800d92c:	42a6      	cmp	r6, r4
 800d92e:	bf38      	it	cc
 800d930:	2304      	movcc	r3, #4
 800d932:	441d      	add	r5, r3
 800d934:	445b      	add	r3, fp
 800d936:	461e      	mov	r6, r3
 800d938:	462c      	mov	r4, r5
 800d93a:	4544      	cmp	r4, r8
 800d93c:	d30e      	bcc.n	800d95c <__mdiff+0xf8>
 800d93e:	f108 0103 	add.w	r1, r8, #3
 800d942:	1b49      	subs	r1, r1, r5
 800d944:	f021 0103 	bic.w	r1, r1, #3
 800d948:	3d03      	subs	r5, #3
 800d94a:	45a8      	cmp	r8, r5
 800d94c:	bf38      	it	cc
 800d94e:	2100      	movcc	r1, #0
 800d950:	440b      	add	r3, r1
 800d952:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d956:	b191      	cbz	r1, 800d97e <__mdiff+0x11a>
 800d958:	6117      	str	r7, [r2, #16]
 800d95a:	e79d      	b.n	800d898 <__mdiff+0x34>
 800d95c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d960:	46e6      	mov	lr, ip
 800d962:	0c08      	lsrs	r0, r1, #16
 800d964:	fa1c fc81 	uxtah	ip, ip, r1
 800d968:	4471      	add	r1, lr
 800d96a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d96e:	b289      	uxth	r1, r1
 800d970:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d974:	f846 1b04 	str.w	r1, [r6], #4
 800d978:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d97c:	e7dd      	b.n	800d93a <__mdiff+0xd6>
 800d97e:	3f01      	subs	r7, #1
 800d980:	e7e7      	b.n	800d952 <__mdiff+0xee>
 800d982:	bf00      	nop
 800d984:	0800f2ac 	.word	0x0800f2ac
 800d988:	0800f2bd 	.word	0x0800f2bd

0800d98c <__d2b>:
 800d98c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d990:	460f      	mov	r7, r1
 800d992:	2101      	movs	r1, #1
 800d994:	ec59 8b10 	vmov	r8, r9, d0
 800d998:	4616      	mov	r6, r2
 800d99a:	f7ff fccd 	bl	800d338 <_Balloc>
 800d99e:	4604      	mov	r4, r0
 800d9a0:	b930      	cbnz	r0, 800d9b0 <__d2b+0x24>
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	4b23      	ldr	r3, [pc, #140]	@ (800da34 <__d2b+0xa8>)
 800d9a6:	4824      	ldr	r0, [pc, #144]	@ (800da38 <__d2b+0xac>)
 800d9a8:	f240 310f 	movw	r1, #783	@ 0x30f
 800d9ac:	f000 fa74 	bl	800de98 <__assert_func>
 800d9b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d9b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d9b8:	b10d      	cbz	r5, 800d9be <__d2b+0x32>
 800d9ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d9be:	9301      	str	r3, [sp, #4]
 800d9c0:	f1b8 0300 	subs.w	r3, r8, #0
 800d9c4:	d023      	beq.n	800da0e <__d2b+0x82>
 800d9c6:	4668      	mov	r0, sp
 800d9c8:	9300      	str	r3, [sp, #0]
 800d9ca:	f7ff fd7c 	bl	800d4c6 <__lo0bits>
 800d9ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d9d2:	b1d0      	cbz	r0, 800da0a <__d2b+0x7e>
 800d9d4:	f1c0 0320 	rsb	r3, r0, #32
 800d9d8:	fa02 f303 	lsl.w	r3, r2, r3
 800d9dc:	430b      	orrs	r3, r1
 800d9de:	40c2      	lsrs	r2, r0
 800d9e0:	6163      	str	r3, [r4, #20]
 800d9e2:	9201      	str	r2, [sp, #4]
 800d9e4:	9b01      	ldr	r3, [sp, #4]
 800d9e6:	61a3      	str	r3, [r4, #24]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	bf0c      	ite	eq
 800d9ec:	2201      	moveq	r2, #1
 800d9ee:	2202      	movne	r2, #2
 800d9f0:	6122      	str	r2, [r4, #16]
 800d9f2:	b1a5      	cbz	r5, 800da1e <__d2b+0x92>
 800d9f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d9f8:	4405      	add	r5, r0
 800d9fa:	603d      	str	r5, [r7, #0]
 800d9fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800da00:	6030      	str	r0, [r6, #0]
 800da02:	4620      	mov	r0, r4
 800da04:	b003      	add	sp, #12
 800da06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da0a:	6161      	str	r1, [r4, #20]
 800da0c:	e7ea      	b.n	800d9e4 <__d2b+0x58>
 800da0e:	a801      	add	r0, sp, #4
 800da10:	f7ff fd59 	bl	800d4c6 <__lo0bits>
 800da14:	9b01      	ldr	r3, [sp, #4]
 800da16:	6163      	str	r3, [r4, #20]
 800da18:	3020      	adds	r0, #32
 800da1a:	2201      	movs	r2, #1
 800da1c:	e7e8      	b.n	800d9f0 <__d2b+0x64>
 800da1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800da22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800da26:	6038      	str	r0, [r7, #0]
 800da28:	6918      	ldr	r0, [r3, #16]
 800da2a:	f7ff fd2d 	bl	800d488 <__hi0bits>
 800da2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800da32:	e7e5      	b.n	800da00 <__d2b+0x74>
 800da34:	0800f2ac 	.word	0x0800f2ac
 800da38:	0800f2bd 	.word	0x0800f2bd

0800da3c <__ssputs_r>:
 800da3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da40:	688e      	ldr	r6, [r1, #8]
 800da42:	461f      	mov	r7, r3
 800da44:	42be      	cmp	r6, r7
 800da46:	680b      	ldr	r3, [r1, #0]
 800da48:	4682      	mov	sl, r0
 800da4a:	460c      	mov	r4, r1
 800da4c:	4690      	mov	r8, r2
 800da4e:	d82d      	bhi.n	800daac <__ssputs_r+0x70>
 800da50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800da54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800da58:	d026      	beq.n	800daa8 <__ssputs_r+0x6c>
 800da5a:	6965      	ldr	r5, [r4, #20]
 800da5c:	6909      	ldr	r1, [r1, #16]
 800da5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da62:	eba3 0901 	sub.w	r9, r3, r1
 800da66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da6a:	1c7b      	adds	r3, r7, #1
 800da6c:	444b      	add	r3, r9
 800da6e:	106d      	asrs	r5, r5, #1
 800da70:	429d      	cmp	r5, r3
 800da72:	bf38      	it	cc
 800da74:	461d      	movcc	r5, r3
 800da76:	0553      	lsls	r3, r2, #21
 800da78:	d527      	bpl.n	800daca <__ssputs_r+0x8e>
 800da7a:	4629      	mov	r1, r5
 800da7c:	f7ff fbd0 	bl	800d220 <_malloc_r>
 800da80:	4606      	mov	r6, r0
 800da82:	b360      	cbz	r0, 800dade <__ssputs_r+0xa2>
 800da84:	6921      	ldr	r1, [r4, #16]
 800da86:	464a      	mov	r2, r9
 800da88:	f7fe fcf9 	bl	800c47e <memcpy>
 800da8c:	89a3      	ldrh	r3, [r4, #12]
 800da8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800da92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da96:	81a3      	strh	r3, [r4, #12]
 800da98:	6126      	str	r6, [r4, #16]
 800da9a:	6165      	str	r5, [r4, #20]
 800da9c:	444e      	add	r6, r9
 800da9e:	eba5 0509 	sub.w	r5, r5, r9
 800daa2:	6026      	str	r6, [r4, #0]
 800daa4:	60a5      	str	r5, [r4, #8]
 800daa6:	463e      	mov	r6, r7
 800daa8:	42be      	cmp	r6, r7
 800daaa:	d900      	bls.n	800daae <__ssputs_r+0x72>
 800daac:	463e      	mov	r6, r7
 800daae:	6820      	ldr	r0, [r4, #0]
 800dab0:	4632      	mov	r2, r6
 800dab2:	4641      	mov	r1, r8
 800dab4:	f000 f9c6 	bl	800de44 <memmove>
 800dab8:	68a3      	ldr	r3, [r4, #8]
 800daba:	1b9b      	subs	r3, r3, r6
 800dabc:	60a3      	str	r3, [r4, #8]
 800dabe:	6823      	ldr	r3, [r4, #0]
 800dac0:	4433      	add	r3, r6
 800dac2:	6023      	str	r3, [r4, #0]
 800dac4:	2000      	movs	r0, #0
 800dac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daca:	462a      	mov	r2, r5
 800dacc:	f000 fa28 	bl	800df20 <_realloc_r>
 800dad0:	4606      	mov	r6, r0
 800dad2:	2800      	cmp	r0, #0
 800dad4:	d1e0      	bne.n	800da98 <__ssputs_r+0x5c>
 800dad6:	6921      	ldr	r1, [r4, #16]
 800dad8:	4650      	mov	r0, sl
 800dada:	f7ff fb2d 	bl	800d138 <_free_r>
 800dade:	230c      	movs	r3, #12
 800dae0:	f8ca 3000 	str.w	r3, [sl]
 800dae4:	89a3      	ldrh	r3, [r4, #12]
 800dae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800daea:	81a3      	strh	r3, [r4, #12]
 800daec:	f04f 30ff 	mov.w	r0, #4294967295
 800daf0:	e7e9      	b.n	800dac6 <__ssputs_r+0x8a>
	...

0800daf4 <_svfiprintf_r>:
 800daf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf8:	4698      	mov	r8, r3
 800dafa:	898b      	ldrh	r3, [r1, #12]
 800dafc:	061b      	lsls	r3, r3, #24
 800dafe:	b09d      	sub	sp, #116	@ 0x74
 800db00:	4607      	mov	r7, r0
 800db02:	460d      	mov	r5, r1
 800db04:	4614      	mov	r4, r2
 800db06:	d510      	bpl.n	800db2a <_svfiprintf_r+0x36>
 800db08:	690b      	ldr	r3, [r1, #16]
 800db0a:	b973      	cbnz	r3, 800db2a <_svfiprintf_r+0x36>
 800db0c:	2140      	movs	r1, #64	@ 0x40
 800db0e:	f7ff fb87 	bl	800d220 <_malloc_r>
 800db12:	6028      	str	r0, [r5, #0]
 800db14:	6128      	str	r0, [r5, #16]
 800db16:	b930      	cbnz	r0, 800db26 <_svfiprintf_r+0x32>
 800db18:	230c      	movs	r3, #12
 800db1a:	603b      	str	r3, [r7, #0]
 800db1c:	f04f 30ff 	mov.w	r0, #4294967295
 800db20:	b01d      	add	sp, #116	@ 0x74
 800db22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db26:	2340      	movs	r3, #64	@ 0x40
 800db28:	616b      	str	r3, [r5, #20]
 800db2a:	2300      	movs	r3, #0
 800db2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800db2e:	2320      	movs	r3, #32
 800db30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db34:	f8cd 800c 	str.w	r8, [sp, #12]
 800db38:	2330      	movs	r3, #48	@ 0x30
 800db3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dcd8 <_svfiprintf_r+0x1e4>
 800db3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db42:	f04f 0901 	mov.w	r9, #1
 800db46:	4623      	mov	r3, r4
 800db48:	469a      	mov	sl, r3
 800db4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db4e:	b10a      	cbz	r2, 800db54 <_svfiprintf_r+0x60>
 800db50:	2a25      	cmp	r2, #37	@ 0x25
 800db52:	d1f9      	bne.n	800db48 <_svfiprintf_r+0x54>
 800db54:	ebba 0b04 	subs.w	fp, sl, r4
 800db58:	d00b      	beq.n	800db72 <_svfiprintf_r+0x7e>
 800db5a:	465b      	mov	r3, fp
 800db5c:	4622      	mov	r2, r4
 800db5e:	4629      	mov	r1, r5
 800db60:	4638      	mov	r0, r7
 800db62:	f7ff ff6b 	bl	800da3c <__ssputs_r>
 800db66:	3001      	adds	r0, #1
 800db68:	f000 80a7 	beq.w	800dcba <_svfiprintf_r+0x1c6>
 800db6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db6e:	445a      	add	r2, fp
 800db70:	9209      	str	r2, [sp, #36]	@ 0x24
 800db72:	f89a 3000 	ldrb.w	r3, [sl]
 800db76:	2b00      	cmp	r3, #0
 800db78:	f000 809f 	beq.w	800dcba <_svfiprintf_r+0x1c6>
 800db7c:	2300      	movs	r3, #0
 800db7e:	f04f 32ff 	mov.w	r2, #4294967295
 800db82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db86:	f10a 0a01 	add.w	sl, sl, #1
 800db8a:	9304      	str	r3, [sp, #16]
 800db8c:	9307      	str	r3, [sp, #28]
 800db8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db92:	931a      	str	r3, [sp, #104]	@ 0x68
 800db94:	4654      	mov	r4, sl
 800db96:	2205      	movs	r2, #5
 800db98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db9c:	484e      	ldr	r0, [pc, #312]	@ (800dcd8 <_svfiprintf_r+0x1e4>)
 800db9e:	f7f2 fb17 	bl	80001d0 <memchr>
 800dba2:	9a04      	ldr	r2, [sp, #16]
 800dba4:	b9d8      	cbnz	r0, 800dbde <_svfiprintf_r+0xea>
 800dba6:	06d0      	lsls	r0, r2, #27
 800dba8:	bf44      	itt	mi
 800dbaa:	2320      	movmi	r3, #32
 800dbac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbb0:	0711      	lsls	r1, r2, #28
 800dbb2:	bf44      	itt	mi
 800dbb4:	232b      	movmi	r3, #43	@ 0x2b
 800dbb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbba:	f89a 3000 	ldrb.w	r3, [sl]
 800dbbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbc0:	d015      	beq.n	800dbee <_svfiprintf_r+0xfa>
 800dbc2:	9a07      	ldr	r2, [sp, #28]
 800dbc4:	4654      	mov	r4, sl
 800dbc6:	2000      	movs	r0, #0
 800dbc8:	f04f 0c0a 	mov.w	ip, #10
 800dbcc:	4621      	mov	r1, r4
 800dbce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbd2:	3b30      	subs	r3, #48	@ 0x30
 800dbd4:	2b09      	cmp	r3, #9
 800dbd6:	d94b      	bls.n	800dc70 <_svfiprintf_r+0x17c>
 800dbd8:	b1b0      	cbz	r0, 800dc08 <_svfiprintf_r+0x114>
 800dbda:	9207      	str	r2, [sp, #28]
 800dbdc:	e014      	b.n	800dc08 <_svfiprintf_r+0x114>
 800dbde:	eba0 0308 	sub.w	r3, r0, r8
 800dbe2:	fa09 f303 	lsl.w	r3, r9, r3
 800dbe6:	4313      	orrs	r3, r2
 800dbe8:	9304      	str	r3, [sp, #16]
 800dbea:	46a2      	mov	sl, r4
 800dbec:	e7d2      	b.n	800db94 <_svfiprintf_r+0xa0>
 800dbee:	9b03      	ldr	r3, [sp, #12]
 800dbf0:	1d19      	adds	r1, r3, #4
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	9103      	str	r1, [sp, #12]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	bfbb      	ittet	lt
 800dbfa:	425b      	neglt	r3, r3
 800dbfc:	f042 0202 	orrlt.w	r2, r2, #2
 800dc00:	9307      	strge	r3, [sp, #28]
 800dc02:	9307      	strlt	r3, [sp, #28]
 800dc04:	bfb8      	it	lt
 800dc06:	9204      	strlt	r2, [sp, #16]
 800dc08:	7823      	ldrb	r3, [r4, #0]
 800dc0a:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc0c:	d10a      	bne.n	800dc24 <_svfiprintf_r+0x130>
 800dc0e:	7863      	ldrb	r3, [r4, #1]
 800dc10:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc12:	d132      	bne.n	800dc7a <_svfiprintf_r+0x186>
 800dc14:	9b03      	ldr	r3, [sp, #12]
 800dc16:	1d1a      	adds	r2, r3, #4
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	9203      	str	r2, [sp, #12]
 800dc1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc20:	3402      	adds	r4, #2
 800dc22:	9305      	str	r3, [sp, #20]
 800dc24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800dce8 <_svfiprintf_r+0x1f4>
 800dc28:	7821      	ldrb	r1, [r4, #0]
 800dc2a:	2203      	movs	r2, #3
 800dc2c:	4650      	mov	r0, sl
 800dc2e:	f7f2 facf 	bl	80001d0 <memchr>
 800dc32:	b138      	cbz	r0, 800dc44 <_svfiprintf_r+0x150>
 800dc34:	9b04      	ldr	r3, [sp, #16]
 800dc36:	eba0 000a 	sub.w	r0, r0, sl
 800dc3a:	2240      	movs	r2, #64	@ 0x40
 800dc3c:	4082      	lsls	r2, r0
 800dc3e:	4313      	orrs	r3, r2
 800dc40:	3401      	adds	r4, #1
 800dc42:	9304      	str	r3, [sp, #16]
 800dc44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc48:	4824      	ldr	r0, [pc, #144]	@ (800dcdc <_svfiprintf_r+0x1e8>)
 800dc4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc4e:	2206      	movs	r2, #6
 800dc50:	f7f2 fabe 	bl	80001d0 <memchr>
 800dc54:	2800      	cmp	r0, #0
 800dc56:	d036      	beq.n	800dcc6 <_svfiprintf_r+0x1d2>
 800dc58:	4b21      	ldr	r3, [pc, #132]	@ (800dce0 <_svfiprintf_r+0x1ec>)
 800dc5a:	bb1b      	cbnz	r3, 800dca4 <_svfiprintf_r+0x1b0>
 800dc5c:	9b03      	ldr	r3, [sp, #12]
 800dc5e:	3307      	adds	r3, #7
 800dc60:	f023 0307 	bic.w	r3, r3, #7
 800dc64:	3308      	adds	r3, #8
 800dc66:	9303      	str	r3, [sp, #12]
 800dc68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc6a:	4433      	add	r3, r6
 800dc6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc6e:	e76a      	b.n	800db46 <_svfiprintf_r+0x52>
 800dc70:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc74:	460c      	mov	r4, r1
 800dc76:	2001      	movs	r0, #1
 800dc78:	e7a8      	b.n	800dbcc <_svfiprintf_r+0xd8>
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	3401      	adds	r4, #1
 800dc7e:	9305      	str	r3, [sp, #20]
 800dc80:	4619      	mov	r1, r3
 800dc82:	f04f 0c0a 	mov.w	ip, #10
 800dc86:	4620      	mov	r0, r4
 800dc88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc8c:	3a30      	subs	r2, #48	@ 0x30
 800dc8e:	2a09      	cmp	r2, #9
 800dc90:	d903      	bls.n	800dc9a <_svfiprintf_r+0x1a6>
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d0c6      	beq.n	800dc24 <_svfiprintf_r+0x130>
 800dc96:	9105      	str	r1, [sp, #20]
 800dc98:	e7c4      	b.n	800dc24 <_svfiprintf_r+0x130>
 800dc9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc9e:	4604      	mov	r4, r0
 800dca0:	2301      	movs	r3, #1
 800dca2:	e7f0      	b.n	800dc86 <_svfiprintf_r+0x192>
 800dca4:	ab03      	add	r3, sp, #12
 800dca6:	9300      	str	r3, [sp, #0]
 800dca8:	462a      	mov	r2, r5
 800dcaa:	4b0e      	ldr	r3, [pc, #56]	@ (800dce4 <_svfiprintf_r+0x1f0>)
 800dcac:	a904      	add	r1, sp, #16
 800dcae:	4638      	mov	r0, r7
 800dcb0:	f7fd fe74 	bl	800b99c <_printf_float>
 800dcb4:	1c42      	adds	r2, r0, #1
 800dcb6:	4606      	mov	r6, r0
 800dcb8:	d1d6      	bne.n	800dc68 <_svfiprintf_r+0x174>
 800dcba:	89ab      	ldrh	r3, [r5, #12]
 800dcbc:	065b      	lsls	r3, r3, #25
 800dcbe:	f53f af2d 	bmi.w	800db1c <_svfiprintf_r+0x28>
 800dcc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dcc4:	e72c      	b.n	800db20 <_svfiprintf_r+0x2c>
 800dcc6:	ab03      	add	r3, sp, #12
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	462a      	mov	r2, r5
 800dccc:	4b05      	ldr	r3, [pc, #20]	@ (800dce4 <_svfiprintf_r+0x1f0>)
 800dcce:	a904      	add	r1, sp, #16
 800dcd0:	4638      	mov	r0, r7
 800dcd2:	f7fe f8fb 	bl	800becc <_printf_i>
 800dcd6:	e7ed      	b.n	800dcb4 <_svfiprintf_r+0x1c0>
 800dcd8:	0800f418 	.word	0x0800f418
 800dcdc:	0800f422 	.word	0x0800f422
 800dce0:	0800b99d 	.word	0x0800b99d
 800dce4:	0800da3d 	.word	0x0800da3d
 800dce8:	0800f41e 	.word	0x0800f41e

0800dcec <__sflush_r>:
 800dcec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dcf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcf4:	0716      	lsls	r6, r2, #28
 800dcf6:	4605      	mov	r5, r0
 800dcf8:	460c      	mov	r4, r1
 800dcfa:	d454      	bmi.n	800dda6 <__sflush_r+0xba>
 800dcfc:	684b      	ldr	r3, [r1, #4]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	dc02      	bgt.n	800dd08 <__sflush_r+0x1c>
 800dd02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	dd48      	ble.n	800dd9a <__sflush_r+0xae>
 800dd08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dd0a:	2e00      	cmp	r6, #0
 800dd0c:	d045      	beq.n	800dd9a <__sflush_r+0xae>
 800dd0e:	2300      	movs	r3, #0
 800dd10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dd14:	682f      	ldr	r7, [r5, #0]
 800dd16:	6a21      	ldr	r1, [r4, #32]
 800dd18:	602b      	str	r3, [r5, #0]
 800dd1a:	d030      	beq.n	800dd7e <__sflush_r+0x92>
 800dd1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dd1e:	89a3      	ldrh	r3, [r4, #12]
 800dd20:	0759      	lsls	r1, r3, #29
 800dd22:	d505      	bpl.n	800dd30 <__sflush_r+0x44>
 800dd24:	6863      	ldr	r3, [r4, #4]
 800dd26:	1ad2      	subs	r2, r2, r3
 800dd28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dd2a:	b10b      	cbz	r3, 800dd30 <__sflush_r+0x44>
 800dd2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dd2e:	1ad2      	subs	r2, r2, r3
 800dd30:	2300      	movs	r3, #0
 800dd32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dd34:	6a21      	ldr	r1, [r4, #32]
 800dd36:	4628      	mov	r0, r5
 800dd38:	47b0      	blx	r6
 800dd3a:	1c43      	adds	r3, r0, #1
 800dd3c:	89a3      	ldrh	r3, [r4, #12]
 800dd3e:	d106      	bne.n	800dd4e <__sflush_r+0x62>
 800dd40:	6829      	ldr	r1, [r5, #0]
 800dd42:	291d      	cmp	r1, #29
 800dd44:	d82b      	bhi.n	800dd9e <__sflush_r+0xb2>
 800dd46:	4a2a      	ldr	r2, [pc, #168]	@ (800ddf0 <__sflush_r+0x104>)
 800dd48:	410a      	asrs	r2, r1
 800dd4a:	07d6      	lsls	r6, r2, #31
 800dd4c:	d427      	bmi.n	800dd9e <__sflush_r+0xb2>
 800dd4e:	2200      	movs	r2, #0
 800dd50:	6062      	str	r2, [r4, #4]
 800dd52:	04d9      	lsls	r1, r3, #19
 800dd54:	6922      	ldr	r2, [r4, #16]
 800dd56:	6022      	str	r2, [r4, #0]
 800dd58:	d504      	bpl.n	800dd64 <__sflush_r+0x78>
 800dd5a:	1c42      	adds	r2, r0, #1
 800dd5c:	d101      	bne.n	800dd62 <__sflush_r+0x76>
 800dd5e:	682b      	ldr	r3, [r5, #0]
 800dd60:	b903      	cbnz	r3, 800dd64 <__sflush_r+0x78>
 800dd62:	6560      	str	r0, [r4, #84]	@ 0x54
 800dd64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dd66:	602f      	str	r7, [r5, #0]
 800dd68:	b1b9      	cbz	r1, 800dd9a <__sflush_r+0xae>
 800dd6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dd6e:	4299      	cmp	r1, r3
 800dd70:	d002      	beq.n	800dd78 <__sflush_r+0x8c>
 800dd72:	4628      	mov	r0, r5
 800dd74:	f7ff f9e0 	bl	800d138 <_free_r>
 800dd78:	2300      	movs	r3, #0
 800dd7a:	6363      	str	r3, [r4, #52]	@ 0x34
 800dd7c:	e00d      	b.n	800dd9a <__sflush_r+0xae>
 800dd7e:	2301      	movs	r3, #1
 800dd80:	4628      	mov	r0, r5
 800dd82:	47b0      	blx	r6
 800dd84:	4602      	mov	r2, r0
 800dd86:	1c50      	adds	r0, r2, #1
 800dd88:	d1c9      	bne.n	800dd1e <__sflush_r+0x32>
 800dd8a:	682b      	ldr	r3, [r5, #0]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d0c6      	beq.n	800dd1e <__sflush_r+0x32>
 800dd90:	2b1d      	cmp	r3, #29
 800dd92:	d001      	beq.n	800dd98 <__sflush_r+0xac>
 800dd94:	2b16      	cmp	r3, #22
 800dd96:	d11e      	bne.n	800ddd6 <__sflush_r+0xea>
 800dd98:	602f      	str	r7, [r5, #0]
 800dd9a:	2000      	movs	r0, #0
 800dd9c:	e022      	b.n	800dde4 <__sflush_r+0xf8>
 800dd9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dda2:	b21b      	sxth	r3, r3
 800dda4:	e01b      	b.n	800ddde <__sflush_r+0xf2>
 800dda6:	690f      	ldr	r7, [r1, #16]
 800dda8:	2f00      	cmp	r7, #0
 800ddaa:	d0f6      	beq.n	800dd9a <__sflush_r+0xae>
 800ddac:	0793      	lsls	r3, r2, #30
 800ddae:	680e      	ldr	r6, [r1, #0]
 800ddb0:	bf08      	it	eq
 800ddb2:	694b      	ldreq	r3, [r1, #20]
 800ddb4:	600f      	str	r7, [r1, #0]
 800ddb6:	bf18      	it	ne
 800ddb8:	2300      	movne	r3, #0
 800ddba:	eba6 0807 	sub.w	r8, r6, r7
 800ddbe:	608b      	str	r3, [r1, #8]
 800ddc0:	f1b8 0f00 	cmp.w	r8, #0
 800ddc4:	dde9      	ble.n	800dd9a <__sflush_r+0xae>
 800ddc6:	6a21      	ldr	r1, [r4, #32]
 800ddc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ddca:	4643      	mov	r3, r8
 800ddcc:	463a      	mov	r2, r7
 800ddce:	4628      	mov	r0, r5
 800ddd0:	47b0      	blx	r6
 800ddd2:	2800      	cmp	r0, #0
 800ddd4:	dc08      	bgt.n	800dde8 <__sflush_r+0xfc>
 800ddd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ddde:	81a3      	strh	r3, [r4, #12]
 800dde0:	f04f 30ff 	mov.w	r0, #4294967295
 800dde4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dde8:	4407      	add	r7, r0
 800ddea:	eba8 0800 	sub.w	r8, r8, r0
 800ddee:	e7e7      	b.n	800ddc0 <__sflush_r+0xd4>
 800ddf0:	dfbffffe 	.word	0xdfbffffe

0800ddf4 <_fflush_r>:
 800ddf4:	b538      	push	{r3, r4, r5, lr}
 800ddf6:	690b      	ldr	r3, [r1, #16]
 800ddf8:	4605      	mov	r5, r0
 800ddfa:	460c      	mov	r4, r1
 800ddfc:	b913      	cbnz	r3, 800de04 <_fflush_r+0x10>
 800ddfe:	2500      	movs	r5, #0
 800de00:	4628      	mov	r0, r5
 800de02:	bd38      	pop	{r3, r4, r5, pc}
 800de04:	b118      	cbz	r0, 800de0e <_fflush_r+0x1a>
 800de06:	6a03      	ldr	r3, [r0, #32]
 800de08:	b90b      	cbnz	r3, 800de0e <_fflush_r+0x1a>
 800de0a:	f7fe fa0b 	bl	800c224 <__sinit>
 800de0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d0f3      	beq.n	800ddfe <_fflush_r+0xa>
 800de16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800de18:	07d0      	lsls	r0, r2, #31
 800de1a:	d404      	bmi.n	800de26 <_fflush_r+0x32>
 800de1c:	0599      	lsls	r1, r3, #22
 800de1e:	d402      	bmi.n	800de26 <_fflush_r+0x32>
 800de20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de22:	f7fe fb2a 	bl	800c47a <__retarget_lock_acquire_recursive>
 800de26:	4628      	mov	r0, r5
 800de28:	4621      	mov	r1, r4
 800de2a:	f7ff ff5f 	bl	800dcec <__sflush_r>
 800de2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800de30:	07da      	lsls	r2, r3, #31
 800de32:	4605      	mov	r5, r0
 800de34:	d4e4      	bmi.n	800de00 <_fflush_r+0xc>
 800de36:	89a3      	ldrh	r3, [r4, #12]
 800de38:	059b      	lsls	r3, r3, #22
 800de3a:	d4e1      	bmi.n	800de00 <_fflush_r+0xc>
 800de3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de3e:	f7fe fb1d 	bl	800c47c <__retarget_lock_release_recursive>
 800de42:	e7dd      	b.n	800de00 <_fflush_r+0xc>

0800de44 <memmove>:
 800de44:	4288      	cmp	r0, r1
 800de46:	b510      	push	{r4, lr}
 800de48:	eb01 0402 	add.w	r4, r1, r2
 800de4c:	d902      	bls.n	800de54 <memmove+0x10>
 800de4e:	4284      	cmp	r4, r0
 800de50:	4623      	mov	r3, r4
 800de52:	d807      	bhi.n	800de64 <memmove+0x20>
 800de54:	1e43      	subs	r3, r0, #1
 800de56:	42a1      	cmp	r1, r4
 800de58:	d008      	beq.n	800de6c <memmove+0x28>
 800de5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de62:	e7f8      	b.n	800de56 <memmove+0x12>
 800de64:	4402      	add	r2, r0
 800de66:	4601      	mov	r1, r0
 800de68:	428a      	cmp	r2, r1
 800de6a:	d100      	bne.n	800de6e <memmove+0x2a>
 800de6c:	bd10      	pop	{r4, pc}
 800de6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de76:	e7f7      	b.n	800de68 <memmove+0x24>

0800de78 <_sbrk_r>:
 800de78:	b538      	push	{r3, r4, r5, lr}
 800de7a:	4d06      	ldr	r5, [pc, #24]	@ (800de94 <_sbrk_r+0x1c>)
 800de7c:	2300      	movs	r3, #0
 800de7e:	4604      	mov	r4, r0
 800de80:	4608      	mov	r0, r1
 800de82:	602b      	str	r3, [r5, #0]
 800de84:	f7f4 ff20 	bl	8002cc8 <_sbrk>
 800de88:	1c43      	adds	r3, r0, #1
 800de8a:	d102      	bne.n	800de92 <_sbrk_r+0x1a>
 800de8c:	682b      	ldr	r3, [r5, #0]
 800de8e:	b103      	cbz	r3, 800de92 <_sbrk_r+0x1a>
 800de90:	6023      	str	r3, [r4, #0]
 800de92:	bd38      	pop	{r3, r4, r5, pc}
 800de94:	20005410 	.word	0x20005410

0800de98 <__assert_func>:
 800de98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de9a:	4614      	mov	r4, r2
 800de9c:	461a      	mov	r2, r3
 800de9e:	4b09      	ldr	r3, [pc, #36]	@ (800dec4 <__assert_func+0x2c>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	4605      	mov	r5, r0
 800dea4:	68d8      	ldr	r0, [r3, #12]
 800dea6:	b954      	cbnz	r4, 800debe <__assert_func+0x26>
 800dea8:	4b07      	ldr	r3, [pc, #28]	@ (800dec8 <__assert_func+0x30>)
 800deaa:	461c      	mov	r4, r3
 800deac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800deb0:	9100      	str	r1, [sp, #0]
 800deb2:	462b      	mov	r3, r5
 800deb4:	4905      	ldr	r1, [pc, #20]	@ (800decc <__assert_func+0x34>)
 800deb6:	f000 f86f 	bl	800df98 <fiprintf>
 800deba:	f000 f87f 	bl	800dfbc <abort>
 800debe:	4b04      	ldr	r3, [pc, #16]	@ (800ded0 <__assert_func+0x38>)
 800dec0:	e7f4      	b.n	800deac <__assert_func+0x14>
 800dec2:	bf00      	nop
 800dec4:	20000034 	.word	0x20000034
 800dec8:	0800f46e 	.word	0x0800f46e
 800decc:	0800f440 	.word	0x0800f440
 800ded0:	0800f433 	.word	0x0800f433

0800ded4 <_calloc_r>:
 800ded4:	b570      	push	{r4, r5, r6, lr}
 800ded6:	fba1 5402 	umull	r5, r4, r1, r2
 800deda:	b93c      	cbnz	r4, 800deec <_calloc_r+0x18>
 800dedc:	4629      	mov	r1, r5
 800dede:	f7ff f99f 	bl	800d220 <_malloc_r>
 800dee2:	4606      	mov	r6, r0
 800dee4:	b928      	cbnz	r0, 800def2 <_calloc_r+0x1e>
 800dee6:	2600      	movs	r6, #0
 800dee8:	4630      	mov	r0, r6
 800deea:	bd70      	pop	{r4, r5, r6, pc}
 800deec:	220c      	movs	r2, #12
 800deee:	6002      	str	r2, [r0, #0]
 800def0:	e7f9      	b.n	800dee6 <_calloc_r+0x12>
 800def2:	462a      	mov	r2, r5
 800def4:	4621      	mov	r1, r4
 800def6:	f7fe fa42 	bl	800c37e <memset>
 800defa:	e7f5      	b.n	800dee8 <_calloc_r+0x14>

0800defc <__ascii_mbtowc>:
 800defc:	b082      	sub	sp, #8
 800defe:	b901      	cbnz	r1, 800df02 <__ascii_mbtowc+0x6>
 800df00:	a901      	add	r1, sp, #4
 800df02:	b142      	cbz	r2, 800df16 <__ascii_mbtowc+0x1a>
 800df04:	b14b      	cbz	r3, 800df1a <__ascii_mbtowc+0x1e>
 800df06:	7813      	ldrb	r3, [r2, #0]
 800df08:	600b      	str	r3, [r1, #0]
 800df0a:	7812      	ldrb	r2, [r2, #0]
 800df0c:	1e10      	subs	r0, r2, #0
 800df0e:	bf18      	it	ne
 800df10:	2001      	movne	r0, #1
 800df12:	b002      	add	sp, #8
 800df14:	4770      	bx	lr
 800df16:	4610      	mov	r0, r2
 800df18:	e7fb      	b.n	800df12 <__ascii_mbtowc+0x16>
 800df1a:	f06f 0001 	mvn.w	r0, #1
 800df1e:	e7f8      	b.n	800df12 <__ascii_mbtowc+0x16>

0800df20 <_realloc_r>:
 800df20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df24:	4680      	mov	r8, r0
 800df26:	4615      	mov	r5, r2
 800df28:	460c      	mov	r4, r1
 800df2a:	b921      	cbnz	r1, 800df36 <_realloc_r+0x16>
 800df2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df30:	4611      	mov	r1, r2
 800df32:	f7ff b975 	b.w	800d220 <_malloc_r>
 800df36:	b92a      	cbnz	r2, 800df44 <_realloc_r+0x24>
 800df38:	f7ff f8fe 	bl	800d138 <_free_r>
 800df3c:	2400      	movs	r4, #0
 800df3e:	4620      	mov	r0, r4
 800df40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df44:	f000 f841 	bl	800dfca <_malloc_usable_size_r>
 800df48:	4285      	cmp	r5, r0
 800df4a:	4606      	mov	r6, r0
 800df4c:	d802      	bhi.n	800df54 <_realloc_r+0x34>
 800df4e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800df52:	d8f4      	bhi.n	800df3e <_realloc_r+0x1e>
 800df54:	4629      	mov	r1, r5
 800df56:	4640      	mov	r0, r8
 800df58:	f7ff f962 	bl	800d220 <_malloc_r>
 800df5c:	4607      	mov	r7, r0
 800df5e:	2800      	cmp	r0, #0
 800df60:	d0ec      	beq.n	800df3c <_realloc_r+0x1c>
 800df62:	42b5      	cmp	r5, r6
 800df64:	462a      	mov	r2, r5
 800df66:	4621      	mov	r1, r4
 800df68:	bf28      	it	cs
 800df6a:	4632      	movcs	r2, r6
 800df6c:	f7fe fa87 	bl	800c47e <memcpy>
 800df70:	4621      	mov	r1, r4
 800df72:	4640      	mov	r0, r8
 800df74:	f7ff f8e0 	bl	800d138 <_free_r>
 800df78:	463c      	mov	r4, r7
 800df7a:	e7e0      	b.n	800df3e <_realloc_r+0x1e>

0800df7c <__ascii_wctomb>:
 800df7c:	4603      	mov	r3, r0
 800df7e:	4608      	mov	r0, r1
 800df80:	b141      	cbz	r1, 800df94 <__ascii_wctomb+0x18>
 800df82:	2aff      	cmp	r2, #255	@ 0xff
 800df84:	d904      	bls.n	800df90 <__ascii_wctomb+0x14>
 800df86:	228a      	movs	r2, #138	@ 0x8a
 800df88:	601a      	str	r2, [r3, #0]
 800df8a:	f04f 30ff 	mov.w	r0, #4294967295
 800df8e:	4770      	bx	lr
 800df90:	700a      	strb	r2, [r1, #0]
 800df92:	2001      	movs	r0, #1
 800df94:	4770      	bx	lr
	...

0800df98 <fiprintf>:
 800df98:	b40e      	push	{r1, r2, r3}
 800df9a:	b503      	push	{r0, r1, lr}
 800df9c:	4601      	mov	r1, r0
 800df9e:	ab03      	add	r3, sp, #12
 800dfa0:	4805      	ldr	r0, [pc, #20]	@ (800dfb8 <fiprintf+0x20>)
 800dfa2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfa6:	6800      	ldr	r0, [r0, #0]
 800dfa8:	9301      	str	r3, [sp, #4]
 800dfaa:	f000 f83f 	bl	800e02c <_vfiprintf_r>
 800dfae:	b002      	add	sp, #8
 800dfb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfb4:	b003      	add	sp, #12
 800dfb6:	4770      	bx	lr
 800dfb8:	20000034 	.word	0x20000034

0800dfbc <abort>:
 800dfbc:	b508      	push	{r3, lr}
 800dfbe:	2006      	movs	r0, #6
 800dfc0:	f000 fa08 	bl	800e3d4 <raise>
 800dfc4:	2001      	movs	r0, #1
 800dfc6:	f7f4 fe07 	bl	8002bd8 <_exit>

0800dfca <_malloc_usable_size_r>:
 800dfca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dfce:	1f18      	subs	r0, r3, #4
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	bfbc      	itt	lt
 800dfd4:	580b      	ldrlt	r3, [r1, r0]
 800dfd6:	18c0      	addlt	r0, r0, r3
 800dfd8:	4770      	bx	lr

0800dfda <__sfputc_r>:
 800dfda:	6893      	ldr	r3, [r2, #8]
 800dfdc:	3b01      	subs	r3, #1
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	b410      	push	{r4}
 800dfe2:	6093      	str	r3, [r2, #8]
 800dfe4:	da08      	bge.n	800dff8 <__sfputc_r+0x1e>
 800dfe6:	6994      	ldr	r4, [r2, #24]
 800dfe8:	42a3      	cmp	r3, r4
 800dfea:	db01      	blt.n	800dff0 <__sfputc_r+0x16>
 800dfec:	290a      	cmp	r1, #10
 800dfee:	d103      	bne.n	800dff8 <__sfputc_r+0x1e>
 800dff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dff4:	f000 b932 	b.w	800e25c <__swbuf_r>
 800dff8:	6813      	ldr	r3, [r2, #0]
 800dffa:	1c58      	adds	r0, r3, #1
 800dffc:	6010      	str	r0, [r2, #0]
 800dffe:	7019      	strb	r1, [r3, #0]
 800e000:	4608      	mov	r0, r1
 800e002:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e006:	4770      	bx	lr

0800e008 <__sfputs_r>:
 800e008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e00a:	4606      	mov	r6, r0
 800e00c:	460f      	mov	r7, r1
 800e00e:	4614      	mov	r4, r2
 800e010:	18d5      	adds	r5, r2, r3
 800e012:	42ac      	cmp	r4, r5
 800e014:	d101      	bne.n	800e01a <__sfputs_r+0x12>
 800e016:	2000      	movs	r0, #0
 800e018:	e007      	b.n	800e02a <__sfputs_r+0x22>
 800e01a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e01e:	463a      	mov	r2, r7
 800e020:	4630      	mov	r0, r6
 800e022:	f7ff ffda 	bl	800dfda <__sfputc_r>
 800e026:	1c43      	adds	r3, r0, #1
 800e028:	d1f3      	bne.n	800e012 <__sfputs_r+0xa>
 800e02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e02c <_vfiprintf_r>:
 800e02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e030:	460d      	mov	r5, r1
 800e032:	b09d      	sub	sp, #116	@ 0x74
 800e034:	4614      	mov	r4, r2
 800e036:	4698      	mov	r8, r3
 800e038:	4606      	mov	r6, r0
 800e03a:	b118      	cbz	r0, 800e044 <_vfiprintf_r+0x18>
 800e03c:	6a03      	ldr	r3, [r0, #32]
 800e03e:	b90b      	cbnz	r3, 800e044 <_vfiprintf_r+0x18>
 800e040:	f7fe f8f0 	bl	800c224 <__sinit>
 800e044:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e046:	07d9      	lsls	r1, r3, #31
 800e048:	d405      	bmi.n	800e056 <_vfiprintf_r+0x2a>
 800e04a:	89ab      	ldrh	r3, [r5, #12]
 800e04c:	059a      	lsls	r2, r3, #22
 800e04e:	d402      	bmi.n	800e056 <_vfiprintf_r+0x2a>
 800e050:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e052:	f7fe fa12 	bl	800c47a <__retarget_lock_acquire_recursive>
 800e056:	89ab      	ldrh	r3, [r5, #12]
 800e058:	071b      	lsls	r3, r3, #28
 800e05a:	d501      	bpl.n	800e060 <_vfiprintf_r+0x34>
 800e05c:	692b      	ldr	r3, [r5, #16]
 800e05e:	b99b      	cbnz	r3, 800e088 <_vfiprintf_r+0x5c>
 800e060:	4629      	mov	r1, r5
 800e062:	4630      	mov	r0, r6
 800e064:	f000 f938 	bl	800e2d8 <__swsetup_r>
 800e068:	b170      	cbz	r0, 800e088 <_vfiprintf_r+0x5c>
 800e06a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e06c:	07dc      	lsls	r4, r3, #31
 800e06e:	d504      	bpl.n	800e07a <_vfiprintf_r+0x4e>
 800e070:	f04f 30ff 	mov.w	r0, #4294967295
 800e074:	b01d      	add	sp, #116	@ 0x74
 800e076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e07a:	89ab      	ldrh	r3, [r5, #12]
 800e07c:	0598      	lsls	r0, r3, #22
 800e07e:	d4f7      	bmi.n	800e070 <_vfiprintf_r+0x44>
 800e080:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e082:	f7fe f9fb 	bl	800c47c <__retarget_lock_release_recursive>
 800e086:	e7f3      	b.n	800e070 <_vfiprintf_r+0x44>
 800e088:	2300      	movs	r3, #0
 800e08a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e08c:	2320      	movs	r3, #32
 800e08e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e092:	f8cd 800c 	str.w	r8, [sp, #12]
 800e096:	2330      	movs	r3, #48	@ 0x30
 800e098:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e248 <_vfiprintf_r+0x21c>
 800e09c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e0a0:	f04f 0901 	mov.w	r9, #1
 800e0a4:	4623      	mov	r3, r4
 800e0a6:	469a      	mov	sl, r3
 800e0a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0ac:	b10a      	cbz	r2, 800e0b2 <_vfiprintf_r+0x86>
 800e0ae:	2a25      	cmp	r2, #37	@ 0x25
 800e0b0:	d1f9      	bne.n	800e0a6 <_vfiprintf_r+0x7a>
 800e0b2:	ebba 0b04 	subs.w	fp, sl, r4
 800e0b6:	d00b      	beq.n	800e0d0 <_vfiprintf_r+0xa4>
 800e0b8:	465b      	mov	r3, fp
 800e0ba:	4622      	mov	r2, r4
 800e0bc:	4629      	mov	r1, r5
 800e0be:	4630      	mov	r0, r6
 800e0c0:	f7ff ffa2 	bl	800e008 <__sfputs_r>
 800e0c4:	3001      	adds	r0, #1
 800e0c6:	f000 80a7 	beq.w	800e218 <_vfiprintf_r+0x1ec>
 800e0ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0cc:	445a      	add	r2, fp
 800e0ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800e0d0:	f89a 3000 	ldrb.w	r3, [sl]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	f000 809f 	beq.w	800e218 <_vfiprintf_r+0x1ec>
 800e0da:	2300      	movs	r3, #0
 800e0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800e0e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0e4:	f10a 0a01 	add.w	sl, sl, #1
 800e0e8:	9304      	str	r3, [sp, #16]
 800e0ea:	9307      	str	r3, [sp, #28]
 800e0ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e0f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e0f2:	4654      	mov	r4, sl
 800e0f4:	2205      	movs	r2, #5
 800e0f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0fa:	4853      	ldr	r0, [pc, #332]	@ (800e248 <_vfiprintf_r+0x21c>)
 800e0fc:	f7f2 f868 	bl	80001d0 <memchr>
 800e100:	9a04      	ldr	r2, [sp, #16]
 800e102:	b9d8      	cbnz	r0, 800e13c <_vfiprintf_r+0x110>
 800e104:	06d1      	lsls	r1, r2, #27
 800e106:	bf44      	itt	mi
 800e108:	2320      	movmi	r3, #32
 800e10a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e10e:	0713      	lsls	r3, r2, #28
 800e110:	bf44      	itt	mi
 800e112:	232b      	movmi	r3, #43	@ 0x2b
 800e114:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e118:	f89a 3000 	ldrb.w	r3, [sl]
 800e11c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e11e:	d015      	beq.n	800e14c <_vfiprintf_r+0x120>
 800e120:	9a07      	ldr	r2, [sp, #28]
 800e122:	4654      	mov	r4, sl
 800e124:	2000      	movs	r0, #0
 800e126:	f04f 0c0a 	mov.w	ip, #10
 800e12a:	4621      	mov	r1, r4
 800e12c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e130:	3b30      	subs	r3, #48	@ 0x30
 800e132:	2b09      	cmp	r3, #9
 800e134:	d94b      	bls.n	800e1ce <_vfiprintf_r+0x1a2>
 800e136:	b1b0      	cbz	r0, 800e166 <_vfiprintf_r+0x13a>
 800e138:	9207      	str	r2, [sp, #28]
 800e13a:	e014      	b.n	800e166 <_vfiprintf_r+0x13a>
 800e13c:	eba0 0308 	sub.w	r3, r0, r8
 800e140:	fa09 f303 	lsl.w	r3, r9, r3
 800e144:	4313      	orrs	r3, r2
 800e146:	9304      	str	r3, [sp, #16]
 800e148:	46a2      	mov	sl, r4
 800e14a:	e7d2      	b.n	800e0f2 <_vfiprintf_r+0xc6>
 800e14c:	9b03      	ldr	r3, [sp, #12]
 800e14e:	1d19      	adds	r1, r3, #4
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	9103      	str	r1, [sp, #12]
 800e154:	2b00      	cmp	r3, #0
 800e156:	bfbb      	ittet	lt
 800e158:	425b      	neglt	r3, r3
 800e15a:	f042 0202 	orrlt.w	r2, r2, #2
 800e15e:	9307      	strge	r3, [sp, #28]
 800e160:	9307      	strlt	r3, [sp, #28]
 800e162:	bfb8      	it	lt
 800e164:	9204      	strlt	r2, [sp, #16]
 800e166:	7823      	ldrb	r3, [r4, #0]
 800e168:	2b2e      	cmp	r3, #46	@ 0x2e
 800e16a:	d10a      	bne.n	800e182 <_vfiprintf_r+0x156>
 800e16c:	7863      	ldrb	r3, [r4, #1]
 800e16e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e170:	d132      	bne.n	800e1d8 <_vfiprintf_r+0x1ac>
 800e172:	9b03      	ldr	r3, [sp, #12]
 800e174:	1d1a      	adds	r2, r3, #4
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	9203      	str	r2, [sp, #12]
 800e17a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e17e:	3402      	adds	r4, #2
 800e180:	9305      	str	r3, [sp, #20]
 800e182:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e258 <_vfiprintf_r+0x22c>
 800e186:	7821      	ldrb	r1, [r4, #0]
 800e188:	2203      	movs	r2, #3
 800e18a:	4650      	mov	r0, sl
 800e18c:	f7f2 f820 	bl	80001d0 <memchr>
 800e190:	b138      	cbz	r0, 800e1a2 <_vfiprintf_r+0x176>
 800e192:	9b04      	ldr	r3, [sp, #16]
 800e194:	eba0 000a 	sub.w	r0, r0, sl
 800e198:	2240      	movs	r2, #64	@ 0x40
 800e19a:	4082      	lsls	r2, r0
 800e19c:	4313      	orrs	r3, r2
 800e19e:	3401      	adds	r4, #1
 800e1a0:	9304      	str	r3, [sp, #16]
 800e1a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1a6:	4829      	ldr	r0, [pc, #164]	@ (800e24c <_vfiprintf_r+0x220>)
 800e1a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e1ac:	2206      	movs	r2, #6
 800e1ae:	f7f2 f80f 	bl	80001d0 <memchr>
 800e1b2:	2800      	cmp	r0, #0
 800e1b4:	d03f      	beq.n	800e236 <_vfiprintf_r+0x20a>
 800e1b6:	4b26      	ldr	r3, [pc, #152]	@ (800e250 <_vfiprintf_r+0x224>)
 800e1b8:	bb1b      	cbnz	r3, 800e202 <_vfiprintf_r+0x1d6>
 800e1ba:	9b03      	ldr	r3, [sp, #12]
 800e1bc:	3307      	adds	r3, #7
 800e1be:	f023 0307 	bic.w	r3, r3, #7
 800e1c2:	3308      	adds	r3, #8
 800e1c4:	9303      	str	r3, [sp, #12]
 800e1c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1c8:	443b      	add	r3, r7
 800e1ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800e1cc:	e76a      	b.n	800e0a4 <_vfiprintf_r+0x78>
 800e1ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1d2:	460c      	mov	r4, r1
 800e1d4:	2001      	movs	r0, #1
 800e1d6:	e7a8      	b.n	800e12a <_vfiprintf_r+0xfe>
 800e1d8:	2300      	movs	r3, #0
 800e1da:	3401      	adds	r4, #1
 800e1dc:	9305      	str	r3, [sp, #20]
 800e1de:	4619      	mov	r1, r3
 800e1e0:	f04f 0c0a 	mov.w	ip, #10
 800e1e4:	4620      	mov	r0, r4
 800e1e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1ea:	3a30      	subs	r2, #48	@ 0x30
 800e1ec:	2a09      	cmp	r2, #9
 800e1ee:	d903      	bls.n	800e1f8 <_vfiprintf_r+0x1cc>
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d0c6      	beq.n	800e182 <_vfiprintf_r+0x156>
 800e1f4:	9105      	str	r1, [sp, #20]
 800e1f6:	e7c4      	b.n	800e182 <_vfiprintf_r+0x156>
 800e1f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1fc:	4604      	mov	r4, r0
 800e1fe:	2301      	movs	r3, #1
 800e200:	e7f0      	b.n	800e1e4 <_vfiprintf_r+0x1b8>
 800e202:	ab03      	add	r3, sp, #12
 800e204:	9300      	str	r3, [sp, #0]
 800e206:	462a      	mov	r2, r5
 800e208:	4b12      	ldr	r3, [pc, #72]	@ (800e254 <_vfiprintf_r+0x228>)
 800e20a:	a904      	add	r1, sp, #16
 800e20c:	4630      	mov	r0, r6
 800e20e:	f7fd fbc5 	bl	800b99c <_printf_float>
 800e212:	4607      	mov	r7, r0
 800e214:	1c78      	adds	r0, r7, #1
 800e216:	d1d6      	bne.n	800e1c6 <_vfiprintf_r+0x19a>
 800e218:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e21a:	07d9      	lsls	r1, r3, #31
 800e21c:	d405      	bmi.n	800e22a <_vfiprintf_r+0x1fe>
 800e21e:	89ab      	ldrh	r3, [r5, #12]
 800e220:	059a      	lsls	r2, r3, #22
 800e222:	d402      	bmi.n	800e22a <_vfiprintf_r+0x1fe>
 800e224:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e226:	f7fe f929 	bl	800c47c <__retarget_lock_release_recursive>
 800e22a:	89ab      	ldrh	r3, [r5, #12]
 800e22c:	065b      	lsls	r3, r3, #25
 800e22e:	f53f af1f 	bmi.w	800e070 <_vfiprintf_r+0x44>
 800e232:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e234:	e71e      	b.n	800e074 <_vfiprintf_r+0x48>
 800e236:	ab03      	add	r3, sp, #12
 800e238:	9300      	str	r3, [sp, #0]
 800e23a:	462a      	mov	r2, r5
 800e23c:	4b05      	ldr	r3, [pc, #20]	@ (800e254 <_vfiprintf_r+0x228>)
 800e23e:	a904      	add	r1, sp, #16
 800e240:	4630      	mov	r0, r6
 800e242:	f7fd fe43 	bl	800becc <_printf_i>
 800e246:	e7e4      	b.n	800e212 <_vfiprintf_r+0x1e6>
 800e248:	0800f418 	.word	0x0800f418
 800e24c:	0800f422 	.word	0x0800f422
 800e250:	0800b99d 	.word	0x0800b99d
 800e254:	0800e009 	.word	0x0800e009
 800e258:	0800f41e 	.word	0x0800f41e

0800e25c <__swbuf_r>:
 800e25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e25e:	460e      	mov	r6, r1
 800e260:	4614      	mov	r4, r2
 800e262:	4605      	mov	r5, r0
 800e264:	b118      	cbz	r0, 800e26e <__swbuf_r+0x12>
 800e266:	6a03      	ldr	r3, [r0, #32]
 800e268:	b90b      	cbnz	r3, 800e26e <__swbuf_r+0x12>
 800e26a:	f7fd ffdb 	bl	800c224 <__sinit>
 800e26e:	69a3      	ldr	r3, [r4, #24]
 800e270:	60a3      	str	r3, [r4, #8]
 800e272:	89a3      	ldrh	r3, [r4, #12]
 800e274:	071a      	lsls	r2, r3, #28
 800e276:	d501      	bpl.n	800e27c <__swbuf_r+0x20>
 800e278:	6923      	ldr	r3, [r4, #16]
 800e27a:	b943      	cbnz	r3, 800e28e <__swbuf_r+0x32>
 800e27c:	4621      	mov	r1, r4
 800e27e:	4628      	mov	r0, r5
 800e280:	f000 f82a 	bl	800e2d8 <__swsetup_r>
 800e284:	b118      	cbz	r0, 800e28e <__swbuf_r+0x32>
 800e286:	f04f 37ff 	mov.w	r7, #4294967295
 800e28a:	4638      	mov	r0, r7
 800e28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e28e:	6823      	ldr	r3, [r4, #0]
 800e290:	6922      	ldr	r2, [r4, #16]
 800e292:	1a98      	subs	r0, r3, r2
 800e294:	6963      	ldr	r3, [r4, #20]
 800e296:	b2f6      	uxtb	r6, r6
 800e298:	4283      	cmp	r3, r0
 800e29a:	4637      	mov	r7, r6
 800e29c:	dc05      	bgt.n	800e2aa <__swbuf_r+0x4e>
 800e29e:	4621      	mov	r1, r4
 800e2a0:	4628      	mov	r0, r5
 800e2a2:	f7ff fda7 	bl	800ddf4 <_fflush_r>
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	d1ed      	bne.n	800e286 <__swbuf_r+0x2a>
 800e2aa:	68a3      	ldr	r3, [r4, #8]
 800e2ac:	3b01      	subs	r3, #1
 800e2ae:	60a3      	str	r3, [r4, #8]
 800e2b0:	6823      	ldr	r3, [r4, #0]
 800e2b2:	1c5a      	adds	r2, r3, #1
 800e2b4:	6022      	str	r2, [r4, #0]
 800e2b6:	701e      	strb	r6, [r3, #0]
 800e2b8:	6962      	ldr	r2, [r4, #20]
 800e2ba:	1c43      	adds	r3, r0, #1
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d004      	beq.n	800e2ca <__swbuf_r+0x6e>
 800e2c0:	89a3      	ldrh	r3, [r4, #12]
 800e2c2:	07db      	lsls	r3, r3, #31
 800e2c4:	d5e1      	bpl.n	800e28a <__swbuf_r+0x2e>
 800e2c6:	2e0a      	cmp	r6, #10
 800e2c8:	d1df      	bne.n	800e28a <__swbuf_r+0x2e>
 800e2ca:	4621      	mov	r1, r4
 800e2cc:	4628      	mov	r0, r5
 800e2ce:	f7ff fd91 	bl	800ddf4 <_fflush_r>
 800e2d2:	2800      	cmp	r0, #0
 800e2d4:	d0d9      	beq.n	800e28a <__swbuf_r+0x2e>
 800e2d6:	e7d6      	b.n	800e286 <__swbuf_r+0x2a>

0800e2d8 <__swsetup_r>:
 800e2d8:	b538      	push	{r3, r4, r5, lr}
 800e2da:	4b29      	ldr	r3, [pc, #164]	@ (800e380 <__swsetup_r+0xa8>)
 800e2dc:	4605      	mov	r5, r0
 800e2de:	6818      	ldr	r0, [r3, #0]
 800e2e0:	460c      	mov	r4, r1
 800e2e2:	b118      	cbz	r0, 800e2ec <__swsetup_r+0x14>
 800e2e4:	6a03      	ldr	r3, [r0, #32]
 800e2e6:	b90b      	cbnz	r3, 800e2ec <__swsetup_r+0x14>
 800e2e8:	f7fd ff9c 	bl	800c224 <__sinit>
 800e2ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2f0:	0719      	lsls	r1, r3, #28
 800e2f2:	d422      	bmi.n	800e33a <__swsetup_r+0x62>
 800e2f4:	06da      	lsls	r2, r3, #27
 800e2f6:	d407      	bmi.n	800e308 <__swsetup_r+0x30>
 800e2f8:	2209      	movs	r2, #9
 800e2fa:	602a      	str	r2, [r5, #0]
 800e2fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e300:	81a3      	strh	r3, [r4, #12]
 800e302:	f04f 30ff 	mov.w	r0, #4294967295
 800e306:	e033      	b.n	800e370 <__swsetup_r+0x98>
 800e308:	0758      	lsls	r0, r3, #29
 800e30a:	d512      	bpl.n	800e332 <__swsetup_r+0x5a>
 800e30c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e30e:	b141      	cbz	r1, 800e322 <__swsetup_r+0x4a>
 800e310:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e314:	4299      	cmp	r1, r3
 800e316:	d002      	beq.n	800e31e <__swsetup_r+0x46>
 800e318:	4628      	mov	r0, r5
 800e31a:	f7fe ff0d 	bl	800d138 <_free_r>
 800e31e:	2300      	movs	r3, #0
 800e320:	6363      	str	r3, [r4, #52]	@ 0x34
 800e322:	89a3      	ldrh	r3, [r4, #12]
 800e324:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e328:	81a3      	strh	r3, [r4, #12]
 800e32a:	2300      	movs	r3, #0
 800e32c:	6063      	str	r3, [r4, #4]
 800e32e:	6923      	ldr	r3, [r4, #16]
 800e330:	6023      	str	r3, [r4, #0]
 800e332:	89a3      	ldrh	r3, [r4, #12]
 800e334:	f043 0308 	orr.w	r3, r3, #8
 800e338:	81a3      	strh	r3, [r4, #12]
 800e33a:	6923      	ldr	r3, [r4, #16]
 800e33c:	b94b      	cbnz	r3, 800e352 <__swsetup_r+0x7a>
 800e33e:	89a3      	ldrh	r3, [r4, #12]
 800e340:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e348:	d003      	beq.n	800e352 <__swsetup_r+0x7a>
 800e34a:	4621      	mov	r1, r4
 800e34c:	4628      	mov	r0, r5
 800e34e:	f000 f883 	bl	800e458 <__smakebuf_r>
 800e352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e356:	f013 0201 	ands.w	r2, r3, #1
 800e35a:	d00a      	beq.n	800e372 <__swsetup_r+0x9a>
 800e35c:	2200      	movs	r2, #0
 800e35e:	60a2      	str	r2, [r4, #8]
 800e360:	6962      	ldr	r2, [r4, #20]
 800e362:	4252      	negs	r2, r2
 800e364:	61a2      	str	r2, [r4, #24]
 800e366:	6922      	ldr	r2, [r4, #16]
 800e368:	b942      	cbnz	r2, 800e37c <__swsetup_r+0xa4>
 800e36a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e36e:	d1c5      	bne.n	800e2fc <__swsetup_r+0x24>
 800e370:	bd38      	pop	{r3, r4, r5, pc}
 800e372:	0799      	lsls	r1, r3, #30
 800e374:	bf58      	it	pl
 800e376:	6962      	ldrpl	r2, [r4, #20]
 800e378:	60a2      	str	r2, [r4, #8]
 800e37a:	e7f4      	b.n	800e366 <__swsetup_r+0x8e>
 800e37c:	2000      	movs	r0, #0
 800e37e:	e7f7      	b.n	800e370 <__swsetup_r+0x98>
 800e380:	20000034 	.word	0x20000034

0800e384 <_raise_r>:
 800e384:	291f      	cmp	r1, #31
 800e386:	b538      	push	{r3, r4, r5, lr}
 800e388:	4605      	mov	r5, r0
 800e38a:	460c      	mov	r4, r1
 800e38c:	d904      	bls.n	800e398 <_raise_r+0x14>
 800e38e:	2316      	movs	r3, #22
 800e390:	6003      	str	r3, [r0, #0]
 800e392:	f04f 30ff 	mov.w	r0, #4294967295
 800e396:	bd38      	pop	{r3, r4, r5, pc}
 800e398:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e39a:	b112      	cbz	r2, 800e3a2 <_raise_r+0x1e>
 800e39c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e3a0:	b94b      	cbnz	r3, 800e3b6 <_raise_r+0x32>
 800e3a2:	4628      	mov	r0, r5
 800e3a4:	f000 f830 	bl	800e408 <_getpid_r>
 800e3a8:	4622      	mov	r2, r4
 800e3aa:	4601      	mov	r1, r0
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e3b2:	f000 b817 	b.w	800e3e4 <_kill_r>
 800e3b6:	2b01      	cmp	r3, #1
 800e3b8:	d00a      	beq.n	800e3d0 <_raise_r+0x4c>
 800e3ba:	1c59      	adds	r1, r3, #1
 800e3bc:	d103      	bne.n	800e3c6 <_raise_r+0x42>
 800e3be:	2316      	movs	r3, #22
 800e3c0:	6003      	str	r3, [r0, #0]
 800e3c2:	2001      	movs	r0, #1
 800e3c4:	e7e7      	b.n	800e396 <_raise_r+0x12>
 800e3c6:	2100      	movs	r1, #0
 800e3c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	4798      	blx	r3
 800e3d0:	2000      	movs	r0, #0
 800e3d2:	e7e0      	b.n	800e396 <_raise_r+0x12>

0800e3d4 <raise>:
 800e3d4:	4b02      	ldr	r3, [pc, #8]	@ (800e3e0 <raise+0xc>)
 800e3d6:	4601      	mov	r1, r0
 800e3d8:	6818      	ldr	r0, [r3, #0]
 800e3da:	f7ff bfd3 	b.w	800e384 <_raise_r>
 800e3de:	bf00      	nop
 800e3e0:	20000034 	.word	0x20000034

0800e3e4 <_kill_r>:
 800e3e4:	b538      	push	{r3, r4, r5, lr}
 800e3e6:	4d07      	ldr	r5, [pc, #28]	@ (800e404 <_kill_r+0x20>)
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	4604      	mov	r4, r0
 800e3ec:	4608      	mov	r0, r1
 800e3ee:	4611      	mov	r1, r2
 800e3f0:	602b      	str	r3, [r5, #0]
 800e3f2:	f7f4 fbe1 	bl	8002bb8 <_kill>
 800e3f6:	1c43      	adds	r3, r0, #1
 800e3f8:	d102      	bne.n	800e400 <_kill_r+0x1c>
 800e3fa:	682b      	ldr	r3, [r5, #0]
 800e3fc:	b103      	cbz	r3, 800e400 <_kill_r+0x1c>
 800e3fe:	6023      	str	r3, [r4, #0]
 800e400:	bd38      	pop	{r3, r4, r5, pc}
 800e402:	bf00      	nop
 800e404:	20005410 	.word	0x20005410

0800e408 <_getpid_r>:
 800e408:	f7f4 bbce 	b.w	8002ba8 <_getpid>

0800e40c <__swhatbuf_r>:
 800e40c:	b570      	push	{r4, r5, r6, lr}
 800e40e:	460c      	mov	r4, r1
 800e410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e414:	2900      	cmp	r1, #0
 800e416:	b096      	sub	sp, #88	@ 0x58
 800e418:	4615      	mov	r5, r2
 800e41a:	461e      	mov	r6, r3
 800e41c:	da0d      	bge.n	800e43a <__swhatbuf_r+0x2e>
 800e41e:	89a3      	ldrh	r3, [r4, #12]
 800e420:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e424:	f04f 0100 	mov.w	r1, #0
 800e428:	bf14      	ite	ne
 800e42a:	2340      	movne	r3, #64	@ 0x40
 800e42c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e430:	2000      	movs	r0, #0
 800e432:	6031      	str	r1, [r6, #0]
 800e434:	602b      	str	r3, [r5, #0]
 800e436:	b016      	add	sp, #88	@ 0x58
 800e438:	bd70      	pop	{r4, r5, r6, pc}
 800e43a:	466a      	mov	r2, sp
 800e43c:	f000 f848 	bl	800e4d0 <_fstat_r>
 800e440:	2800      	cmp	r0, #0
 800e442:	dbec      	blt.n	800e41e <__swhatbuf_r+0x12>
 800e444:	9901      	ldr	r1, [sp, #4]
 800e446:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e44a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e44e:	4259      	negs	r1, r3
 800e450:	4159      	adcs	r1, r3
 800e452:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e456:	e7eb      	b.n	800e430 <__swhatbuf_r+0x24>

0800e458 <__smakebuf_r>:
 800e458:	898b      	ldrh	r3, [r1, #12]
 800e45a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e45c:	079d      	lsls	r5, r3, #30
 800e45e:	4606      	mov	r6, r0
 800e460:	460c      	mov	r4, r1
 800e462:	d507      	bpl.n	800e474 <__smakebuf_r+0x1c>
 800e464:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e468:	6023      	str	r3, [r4, #0]
 800e46a:	6123      	str	r3, [r4, #16]
 800e46c:	2301      	movs	r3, #1
 800e46e:	6163      	str	r3, [r4, #20]
 800e470:	b003      	add	sp, #12
 800e472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e474:	ab01      	add	r3, sp, #4
 800e476:	466a      	mov	r2, sp
 800e478:	f7ff ffc8 	bl	800e40c <__swhatbuf_r>
 800e47c:	9f00      	ldr	r7, [sp, #0]
 800e47e:	4605      	mov	r5, r0
 800e480:	4639      	mov	r1, r7
 800e482:	4630      	mov	r0, r6
 800e484:	f7fe fecc 	bl	800d220 <_malloc_r>
 800e488:	b948      	cbnz	r0, 800e49e <__smakebuf_r+0x46>
 800e48a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e48e:	059a      	lsls	r2, r3, #22
 800e490:	d4ee      	bmi.n	800e470 <__smakebuf_r+0x18>
 800e492:	f023 0303 	bic.w	r3, r3, #3
 800e496:	f043 0302 	orr.w	r3, r3, #2
 800e49a:	81a3      	strh	r3, [r4, #12]
 800e49c:	e7e2      	b.n	800e464 <__smakebuf_r+0xc>
 800e49e:	89a3      	ldrh	r3, [r4, #12]
 800e4a0:	6020      	str	r0, [r4, #0]
 800e4a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4a6:	81a3      	strh	r3, [r4, #12]
 800e4a8:	9b01      	ldr	r3, [sp, #4]
 800e4aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e4ae:	b15b      	cbz	r3, 800e4c8 <__smakebuf_r+0x70>
 800e4b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4b4:	4630      	mov	r0, r6
 800e4b6:	f000 f81d 	bl	800e4f4 <_isatty_r>
 800e4ba:	b128      	cbz	r0, 800e4c8 <__smakebuf_r+0x70>
 800e4bc:	89a3      	ldrh	r3, [r4, #12]
 800e4be:	f023 0303 	bic.w	r3, r3, #3
 800e4c2:	f043 0301 	orr.w	r3, r3, #1
 800e4c6:	81a3      	strh	r3, [r4, #12]
 800e4c8:	89a3      	ldrh	r3, [r4, #12]
 800e4ca:	431d      	orrs	r5, r3
 800e4cc:	81a5      	strh	r5, [r4, #12]
 800e4ce:	e7cf      	b.n	800e470 <__smakebuf_r+0x18>

0800e4d0 <_fstat_r>:
 800e4d0:	b538      	push	{r3, r4, r5, lr}
 800e4d2:	4d07      	ldr	r5, [pc, #28]	@ (800e4f0 <_fstat_r+0x20>)
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	4604      	mov	r4, r0
 800e4d8:	4608      	mov	r0, r1
 800e4da:	4611      	mov	r1, r2
 800e4dc:	602b      	str	r3, [r5, #0]
 800e4de:	f7f4 fbcb 	bl	8002c78 <_fstat>
 800e4e2:	1c43      	adds	r3, r0, #1
 800e4e4:	d102      	bne.n	800e4ec <_fstat_r+0x1c>
 800e4e6:	682b      	ldr	r3, [r5, #0]
 800e4e8:	b103      	cbz	r3, 800e4ec <_fstat_r+0x1c>
 800e4ea:	6023      	str	r3, [r4, #0]
 800e4ec:	bd38      	pop	{r3, r4, r5, pc}
 800e4ee:	bf00      	nop
 800e4f0:	20005410 	.word	0x20005410

0800e4f4 <_isatty_r>:
 800e4f4:	b538      	push	{r3, r4, r5, lr}
 800e4f6:	4d06      	ldr	r5, [pc, #24]	@ (800e510 <_isatty_r+0x1c>)
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	4604      	mov	r4, r0
 800e4fc:	4608      	mov	r0, r1
 800e4fe:	602b      	str	r3, [r5, #0]
 800e500:	f7f4 fbca 	bl	8002c98 <_isatty>
 800e504:	1c43      	adds	r3, r0, #1
 800e506:	d102      	bne.n	800e50e <_isatty_r+0x1a>
 800e508:	682b      	ldr	r3, [r5, #0]
 800e50a:	b103      	cbz	r3, 800e50e <_isatty_r+0x1a>
 800e50c:	6023      	str	r3, [r4, #0]
 800e50e:	bd38      	pop	{r3, r4, r5, pc}
 800e510:	20005410 	.word	0x20005410

0800e514 <_init>:
 800e514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e516:	bf00      	nop
 800e518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e51a:	bc08      	pop	{r3}
 800e51c:	469e      	mov	lr, r3
 800e51e:	4770      	bx	lr

0800e520 <_fini>:
 800e520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e522:	bf00      	nop
 800e524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e526:	bc08      	pop	{r3}
 800e528:	469e      	mov	lr, r3
 800e52a:	4770      	bx	lr
