
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010008  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001098  08010198  08010198  00011198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011230  08011230  000131fc  2**0
                  CONTENTS
  4 .ARM          00000008  08011230  08011230  00012230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011238  08011238  000131fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011238  08011238  00012238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801123c  0801123c  0001223c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08011240  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000131fc  2**0
                  CONTENTS
 10 .bss          000052a0  20000200  20000200  00013200  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200054a0  200054a0  00013200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000131fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e82e  00000000  00000000  0001322c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004078  00000000  00000000  00031a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bf0  00000000  00000000  00035ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015fc  00000000  00000000  000376c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006270  00000000  00000000  00038cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020864  00000000  00000000  0003ef34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea010  00000000  00000000  0005f798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001497a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008ac0  00000000  00000000  001497ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  001522ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010180 	.word	0x08010180

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	08010180 	.word	0x08010180

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <MadgwickQuaternionUpdate>:
  q[3] = q4 * norm;
}
*/

void MadgwickQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz,float deltat,float q[4])
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b0a2      	sub	sp, #136	@ 0x88
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	ed87 0a07 	vstr	s0, [r7, #28]
 8000f82:	edc7 0a06 	vstr	s1, [r7, #24]
 8000f86:	ed87 1a05 	vstr	s2, [r7, #20]
 8000f8a:	edc7 1a04 	vstr	s3, [r7, #16]
 8000f8e:	ed87 2a03 	vstr	s4, [r7, #12]
 8000f92:	edc7 2a02 	vstr	s5, [r7, #8]
 8000f96:	ed87 3a01 	vstr	s6, [r7, #4]
 8000f9a:	6038      	str	r0, [r7, #0]
	float q0 = q[0], q1 = q[1], q2 = q[2], q3 = q[3];
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	677b      	str	r3, [r7, #116]	@ 0x74
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	673b      	str	r3, [r7, #112]	@ 0x70
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	66bb      	str	r3, [r7, #104]	@ 0x68
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8000fb4:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8000fb8:	eeb1 7a67 	vneg.f32	s14, s15
 8000fbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc4:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8000fc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fd4:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8000fd8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000fe8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fec:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8000ff0:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8000ff4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ff8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ffc:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001000:	edd7 7a02 	vldr	s15, [r7, #8]
 8001004:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001008:	ee37 7a27 	vadd.f32	s14, s14, s15
 800100c:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8001010:	edd7 7a03 	vldr	s15, [r7, #12]
 8001014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800101c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001020:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001024:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001028:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 800102c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001030:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001034:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 8001038:	edd7 7a02 	vldr	s15, [r7, #8]
 800103c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001040:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001044:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8001048:	edd7 7a04 	vldr	s15, [r7, #16]
 800104c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001054:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001058:	ee67 7a87 	vmul.f32	s15, s15, s14
 800105c:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001060:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001064:	edd7 7a02 	vldr	s15, [r7, #8]
 8001068:	ee27 7a27 	vmul.f32	s14, s14, s15
 800106c:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 8001070:	edd7 7a03 	vldr	s15, [r7, #12]
 8001074:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001078:	ee37 7a27 	vadd.f32	s14, s14, s15
 800107c:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8001080:	edd7 7a04 	vldr	s15, [r7, #16]
 8001084:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800108c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001090:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001094:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001098:	edd7 7a07 	vldr	s15, [r7, #28]
 800109c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a4:	d10e      	bne.n	80010c4 <MadgwickQuaternionUpdate+0x14c>
 80010a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80010aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	d107      	bne.n	80010c4 <MadgwickQuaternionUpdate+0x14c>
 80010b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80010b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c0:	f000 81be 	beq.w	8001440 <MadgwickQuaternionUpdate+0x4c8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80010c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80010c8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80010cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80010d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80010dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e4:	eeb0 0a67 	vmov.f32	s0, s15
 80010e8:	f000 fa9a 	bl	8001620 <invSqrt>
 80010ec:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
		ax *= recipNorm;
 80010f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80010f4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80010f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fc:	edc7 7a07 	vstr	s15, [r7, #28]
		ay *= recipNorm;
 8001100:	ed97 7a06 	vldr	s14, [r7, #24]
 8001104:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800110c:	edc7 7a06 	vstr	s15, [r7, #24]
		az *= recipNorm;
 8001110:	ed97 7a05 	vldr	s14, [r7, #20]
 8001114:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800111c:	edc7 7a05 	vstr	s15, [r7, #20]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 8001120:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001124:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001128:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		_2q1 = 2.0f * q1;
 800112c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001130:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001134:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		_2q2 = 2.0f * q2;
 8001138:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800113c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001140:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		_2q3 = 2.0f * q3;
 8001144:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001148:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800114c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		_4q0 = 4.0f * q0;
 8001150:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001154:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800115c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		_4q1 = 4.0f * q1;
 8001160:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001164:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		_4q2 = 4.0f * q2;
 8001170:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001174:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001178:	ee67 7a87 	vmul.f32	s15, s15, s14
 800117c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		_8q1 = 8.0f * q1;
 8001180:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001184:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001188:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		_8q2 = 8.0f * q2;
 8001190:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001194:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8001198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800119c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		q0q0 = q0 * q0;
 80011a0:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80011a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011a8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		q1q1 = q1 * q1;
 80011ac:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80011b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011b4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		q2q2 = q2 * q2;
 80011b8:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80011bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011c0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		q3q3 = q3 * q3;
 80011c4:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80011c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011cc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80011d0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80011d4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80011d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011dc:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 80011e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80011e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011ec:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80011f0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80011f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011fc:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 8001200:	edd7 7a06 	vldr	s15, [r7, #24]
 8001204:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 8001210:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001214:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001218:	ee27 7a27 	vmul.f32	s14, s14, s15
 800121c:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001220:	edd7 7a07 	vldr	s15, [r7, #28]
 8001224:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001228:	ee37 7a67 	vsub.f32	s14, s14, s15
 800122c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001230:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001234:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001238:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800123c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001240:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001244:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8001248:	edd7 7a06 	vldr	s15, [r7, #24]
 800124c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001250:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001254:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001258:	ee37 7a67 	vsub.f32	s14, s14, s15
 800125c:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8001260:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001264:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001268:	ee37 7a27 	vadd.f32	s14, s14, s15
 800126c:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8001270:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001274:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001278:	ee37 7a27 	vadd.f32	s14, s14, s15
 800127c:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8001280:	edd7 7a05 	vldr	s15, [r7, #20]
 8001284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800128c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8001290:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001294:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001298:	ee27 7a87 	vmul.f32	s14, s15, s14
 800129c:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80012a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012a4:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 80012a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80012ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012b4:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80012b8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80012bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012c4:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 80012c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80012cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012d4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80012d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012dc:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80012e0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80012e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ec:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80012f0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80012f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012fc:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001300:	edd7 7a05 	vldr	s15, [r7, #20]
 8001304:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8001310:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001314:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001318:	ee27 7a87 	vmul.f32	s14, s15, s14
 800131c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001320:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001324:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 8001328:	edd7 7a07 	vldr	s15, [r7, #28]
 800132c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001330:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001334:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001338:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800133c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001340:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001344:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001348:	ee37 7a27 	vadd.f32	s14, s14, s15
 800134c:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001350:	edd7 7a06 	vldr	s15, [r7, #24]
 8001354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800135c:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001360:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001364:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001368:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800136c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001370:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001374:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001378:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800137c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001380:	edd7 7a08 	vldr	s15, [r7, #32]
 8001384:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800138c:	eeb0 0a67 	vmov.f32	s0, s15
 8001390:	f000 f946 	bl	8001620 <invSqrt>
 8001394:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
		s0 *= recipNorm;
 8001398:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800139c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80013a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		s1 *= recipNorm;
 80013a8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80013ac:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80013b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		s2 *= recipNorm;
 80013b8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80013bc:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80013c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s3 *= recipNorm;
 80013c8:	ed97 7a08 	vldr	s14, [r7, #32]
 80013cc:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80013d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d4:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 80013d8:	4b55      	ldr	r3, [pc, #340]	@ (8001530 <MadgwickQuaternionUpdate+0x5b8>)
 80013da:	ed93 7a00 	vldr	s14, [r3]
 80013de:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80013e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e6:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 80013ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ee:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
		qDot2 -= beta * s1;
 80013f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001530 <MadgwickQuaternionUpdate+0x5b8>)
 80013f4:	ed93 7a00 	vldr	s14, [r3]
 80013f8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80013fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001400:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8001404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001408:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
		qDot3 -= beta * s2;
 800140c:	4b48      	ldr	r3, [pc, #288]	@ (8001530 <MadgwickQuaternionUpdate+0x5b8>)
 800140e:	ed93 7a00 	vldr	s14, [r3]
 8001412:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141a:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 800141e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001422:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
		qDot4 -= beta * s3;
 8001426:	4b42      	ldr	r3, [pc, #264]	@ (8001530 <MadgwickQuaternionUpdate+0x5b8>)
 8001428:	ed93 7a00 	vldr	s14, [r3]
 800142c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001434:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 8001438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143c:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * deltat;
 8001440:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8001444:	edd7 7a01 	vldr	s15, [r7, #4]
 8001448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144c:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8001450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001454:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	q1 += qDot2 * deltat;
 8001458:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800145c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001464:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8001468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146c:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
	q2 += qDot3 * deltat;
 8001470:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001474:	edd7 7a01 	vldr	s15, [r7, #4]
 8001478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147c:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001484:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	q3 += qDot4 * deltat;
 8001488:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 800148c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001494:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800149c:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80014a0:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80014a4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80014a8:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80014ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014b4:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80014b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014c0:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80014c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80014c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014cc:	eeb0 0a67 	vmov.f32	s0, s15
 80014d0:	f000 f8a6 	bl	8001620 <invSqrt>
 80014d4:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64

	q[0]=q0 * recipNorm;
 80014d8:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80014dc:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80014e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	edc3 7a00 	vstr	s15, [r3]
	q[1]=q1 * recipNorm;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	3304      	adds	r3, #4
 80014ee:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80014f2:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80014f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014fa:	edc3 7a00 	vstr	s15, [r3]
	q[2]=q2 * recipNorm;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	3308      	adds	r3, #8
 8001502:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8001506:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800150a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800150e:	edc3 7a00 	vstr	s15, [r3]
	q[3]=q3 * recipNorm;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	330c      	adds	r3, #12
 8001516:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 800151a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800151e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001522:	edc3 7a00 	vstr	s15, [r3]
	}
 8001526:	bf00      	nop
 8001528:	3788      	adds	r7, #136	@ 0x88
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000000 	.word	0x20000000
 8001534:	00000000 	.word	0x00000000

08001538 <GetYawFromQ>:
	q[1]=q1 * recipNorm;
	q[2]=q2 * recipNorm;
	q[3]=q3 * recipNorm;
	}
float GetYawFromQ(float q[4])
{
 8001538:	b5b0      	push	{r4, r5, r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	return atan2(2.0f * (q[1] * q[2] + q[0] * q[3]),
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3304      	adds	r3, #4
 8001544:	ed93 7a00 	vldr	s14, [r3]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3308      	adds	r3, #8
 800154c:	edd3 7a00 	vldr	s15, [r3]
 8001550:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	edd3 6a00 	vldr	s13, [r3]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	330c      	adds	r3, #12
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800156e:	ee17 0a90 	vmov	r0, s15
 8001572:	f7fe ffe9 	bl	8000548 <__aeabi_f2d>
 8001576:	4604      	mov	r4, r0
 8001578:	460d      	mov	r5, r1
	       q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3])*(180.0f/3.14159265359);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	ed93 7a00 	vldr	s14, [r3]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	edd3 7a00 	vldr	s15, [r3]
 8001586:	ee27 7a27 	vmul.f32	s14, s14, s15
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3304      	adds	r3, #4
 800158e:	edd3 6a00 	vldr	s13, [r3]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3304      	adds	r3, #4
 8001596:	edd3 7a00 	vldr	s15, [r3]
 800159a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800159e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3308      	adds	r3, #8
 80015a6:	edd3 6a00 	vldr	s13, [r3]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3308      	adds	r3, #8
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	330c      	adds	r3, #12
 80015be:	edd3 6a00 	vldr	s13, [r3]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	330c      	adds	r3, #12
 80015c6:	edd3 7a00 	vldr	s15, [r3]
 80015ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ce:	ee77 7a67 	vsub.f32	s15, s14, s15
	return atan2(2.0f * (q[1] * q[2] + q[0] * q[3]),
 80015d2:	ee17 0a90 	vmov	r0, s15
 80015d6:	f7fe ffb7 	bl	8000548 <__aeabi_f2d>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	ec43 2b11 	vmov	d1, r2, r3
 80015e2:	ec45 4b10 	vmov	d0, r4, r5
 80015e6:	f00e fb61 	bl	800fcac <atan2>
 80015ea:	ec51 0b10 	vmov	r0, r1, d0
	       q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3])*(180.0f/3.14159265359);
 80015ee:	a30a      	add	r3, pc, #40	@ (adr r3, 8001618 <GetYawFromQ+0xe0>)
 80015f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f4:	f7ff f800 	bl	80005f8 <__aeabi_dmul>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff faf2 	bl	8000be8 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	ee07 3a90 	vmov	s15, r3
	}
 800160a:	eeb0 0a67 	vmov.f32	s0, s15
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bdb0      	pop	{r4, r5, r7, pc}
 8001614:	f3af 8000 	nop.w
 8001618:	1a63bfe5 	.word	0x1a63bfe5
 800161c:	404ca5dc 	.word	0x404ca5dc

08001620 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8001620:	b480      	push	{r7}
 8001622:	b087      	sub	sp, #28
 8001624:	af00      	add	r7, sp, #0
 8001626:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800162a:	edd7 7a01 	vldr	s15, [r7, #4]
 800162e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001632:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001636:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	105a      	asrs	r2, r3, #1
 800164a:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <invSqrt+0x74>)
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001658:	ed97 7a04 	vldr	s14, [r7, #16]
 800165c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001660:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001664:	edd7 7a04 	vldr	s15, [r7, #16]
 8001668:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001670:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001674:	edd7 7a04 	vldr	s15, [r7, #16]
 8001678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167c:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	ee07 3a90 	vmov	s15, r3
}
 8001686:	eeb0 0a67 	vmov.f32	s0, s15
 800168a:	371c      	adds	r7, #28
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	5f3759df 	.word	0x5f3759df

08001698 <PID_Init>:
    float output_max;   // Maximum output value
    uint32_t prevtick;
} PIDController;

// Initialize PID controller
void PID_Init(PIDController *pid, float Kp, float Ki, float Kd, float setpoint, float output_min, float output_max) {
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	@ 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	61f8      	str	r0, [r7, #28]
 80016a0:	ed87 0a06 	vstr	s0, [r7, #24]
 80016a4:	edc7 0a05 	vstr	s1, [r7, #20]
 80016a8:	ed87 1a04 	vstr	s2, [r7, #16]
 80016ac:	edc7 1a03 	vstr	s3, [r7, #12]
 80016b0:	ed87 2a02 	vstr	s4, [r7, #8]
 80016b4:	edc7 2a01 	vstr	s5, [r7, #4]
    pid->Kp = Kp;
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	609a      	str	r2, [r3, #8]
    pid->setpoint = setpoint;
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
    pid->prev_error = 0.0f;
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
    pid->output_min = output_min;
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	61da      	str	r2, [r3, #28]
    pid->output_max = output_max;
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	621a      	str	r2, [r3, #32]
    pid->prevtick=0;
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2200      	movs	r2, #0
 80016f0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80016f2:	bf00      	nop
 80016f4:	3724      	adds	r7, #36	@ 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <PID_Update>:

// Update PID controller
float PID_Update(PIDController *pid, float measured_value) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	ed87 0a00 	vstr	s0, [r7]
	if(pid->prevtick==0)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001710:	2b00      	cmp	r3, #0
 8001712:	d104      	bne.n	800171e <PID_Update+0x1e>
		pid->prevtick=HAL_GetTick();
 8001714:	f002 fd6c 	bl	80041f0 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	625a      	str	r2, [r3, #36]	@ 0x24

	float dt  = (HAL_GetTick() - pid->prevtick) *0.001f;
 800171e:	f002 fd67 	bl	80041f0 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	ee07 3a90 	vmov	s15, r3
 800172e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001732:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001868 <PID_Update+0x168>
 8001736:	ee67 7a87 	vmul.f32	s15, s15, s14
 800173a:	edc7 7a06 	vstr	s15, [r7, #24]
    float error = pid->setpoint - measured_value;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	ed93 7a03 	vldr	s14, [r3, #12]
 8001744:	edd7 7a00 	vldr	s15, [r7]
 8001748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800174c:	edc7 7a05 	vstr	s15, [r7, #20]
    float proportional = pid->Kp * error;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	edd3 7a00 	vldr	s15, [r3]
 8001756:	ed97 7a05 	vldr	s14, [r7, #20]
 800175a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800175e:	edc7 7a04 	vstr	s15, [r7, #16]

    // Integral term with anti-windup
    pid->integral += pid->Ki * error * dt;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	ed93 7a04 	vldr	s14, [r3, #16]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	edd3 6a01 	vldr	s13, [r3, #4]
 800176e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001772:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001776:	edd7 7a06 	vldr	s15, [r7, #24]
 800177a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800177e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	edc3 7a04 	vstr	s15, [r3, #16]

    float derivative = pid->Kd * (error - pid->prev_error) / dt;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	ed93 7a02 	vldr	s14, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	edd3 7a06 	vldr	s15, [r3, #24]
 8001794:	edd7 6a05 	vldr	s13, [r7, #20]
 8001798:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800179c:	ee67 6a27 	vmul.f32	s13, s14, s15
 80017a0:	ed97 7a06 	vldr	s14, [r7, #24]
 80017a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017a8:	edc7 7a03 	vstr	s15, [r7, #12]

    float output = proportional + pid->integral + derivative;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	ed93 7a04 	vldr	s14, [r3, #16]
 80017b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80017b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80017be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c2:	edc7 7a07 	vstr	s15, [r7, #28]

    // Apply output limits
    if (output > pid->output_max) {
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	edd3 7a08 	vldr	s15, [r3, #32]
 80017cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80017d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d8:	dd16      	ble.n	8001808 <PID_Update+0x108>
        output = pid->output_max;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	61fb      	str	r3, [r7, #28]
        // Anti-windup: Limit integral term
        pid->integral -= pid->Ki * error * dt;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	ed93 7a04 	vldr	s14, [r3, #16]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	edd3 6a01 	vldr	s13, [r3, #4]
 80017ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80017f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80017f4:	edd7 7a06 	vldr	s15, [r7, #24]
 80017f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	edc3 7a04 	vstr	s15, [r3, #16]
 8001806:	e01f      	b.n	8001848 <PID_Update+0x148>
    } else if (output < pid->output_min) {
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	edd3 7a07 	vldr	s15, [r3, #28]
 800180e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001812:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181a:	d515      	bpl.n	8001848 <PID_Update+0x148>
        output = pid->output_min;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69db      	ldr	r3, [r3, #28]
 8001820:	61fb      	str	r3, [r7, #28]
        // Anti-windup: Limit integral term
        pid->integral -= pid->Ki * error * dt;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	ed93 7a04 	vldr	s14, [r3, #16]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	edd3 6a01 	vldr	s13, [r3, #4]
 800182e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001832:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001836:	edd7 7a06 	vldr	s15, [r7, #24]
 800183a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800183e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	edc3 7a04 	vstr	s15, [r3, #16]
    }

    pid->prev_error = error;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	619a      	str	r2, [r3, #24]
    pid->prevtick =HAL_GetTick();
 800184e:	f002 fccf 	bl	80041f0 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	625a      	str	r2, [r3, #36]	@ 0x24
    return output;
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	ee07 3a90 	vmov	s15, r3
}
 800185e:	eeb0 0a67 	vmov.f32	s0, s15
 8001862:	3720      	adds	r7, #32
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	3a83126f 	.word	0x3a83126f

0800186c <PID_Reset>:

void PID_Reset(PIDController* pid) {
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	pid->setpoint=0;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
    pid->prev_error = 0.0f;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
    pid->prevtick = 0;//HAL_GetTick();
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <Set_Motor_Direction>:
/* USER CODE BEGIN 0 */
uint8_t aRxBuffer[3]={0};
uint8_t buf[5]={0};

//SET both wheel direction
void Set_Motor_Direction(int foward_flag) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, //AIn1 is forward AIn2 is backward
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	bf14      	ite	ne
 80018ae:	2301      	movne	r3, #1
 80018b0:	2300      	moveq	r3, #0
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	461a      	mov	r2, r3
 80018b6:	2108      	movs	r1, #8
 80018b8:	4813      	ldr	r0, [pc, #76]	@ (8001908 <Set_Motor_Direction+0x68>)
 80018ba:	f003 fc21 	bl	8005100 <HAL_GPIO_WritePin>
            ((foward_flag) ? GPIO_PIN_SET : GPIO_PIN_RESET));
    HAL_GPIO_WritePin(GPIOA, AIN2_Pin,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf0c      	ite	eq
 80018c4:	2301      	moveq	r3, #1
 80018c6:	2300      	movne	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	2104      	movs	r1, #4
 80018ce:	480e      	ldr	r0, [pc, #56]	@ (8001908 <Set_Motor_Direction+0x68>)
 80018d0:	f003 fc16 	bl	8005100 <HAL_GPIO_WritePin>
            ((foward_flag) ? GPIO_PIN_RESET : GPIO_PIN_SET));
    HAL_GPIO_WritePin(GPIOA, BIN2_Pin, //BIn1 is forward BIn2 is backward
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	bf0c      	ite	eq
 80018da:	2301      	moveq	r3, #1
 80018dc:	2300      	movne	r3, #0
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	461a      	mov	r2, r3
 80018e2:	2120      	movs	r1, #32
 80018e4:	4808      	ldr	r0, [pc, #32]	@ (8001908 <Set_Motor_Direction+0x68>)
 80018e6:	f003 fc0b 	bl	8005100 <HAL_GPIO_WritePin>
            ((foward_flag) ? GPIO_PIN_RESET : GPIO_PIN_SET));
    HAL_GPIO_WritePin(GPIOA, BIN1_Pin,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	bf14      	ite	ne
 80018f0:	2301      	movne	r3, #1
 80018f2:	2300      	moveq	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	2110      	movs	r1, #16
 80018fa:	4803      	ldr	r0, [pc, #12]	@ (8001908 <Set_Motor_Direction+0x68>)
 80018fc:	f003 fc00 	bl	8005100 <HAL_GPIO_WritePin>
            ((foward_flag) ? GPIO_PIN_SET : GPIO_PIN_RESET));
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40020000 	.word	0x40020000

0800190c <Set_Motor_DirectionTest>:
void Set_Motor_DirectionTest(int foward_flag,int backward_flag) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(GPIOA, AIN1_Pin, //AIn1 is forward AIn2 is backward
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	bf14      	ite	ne
 800191c:	2301      	movne	r3, #1
 800191e:	2300      	moveq	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	461a      	mov	r2, r3
 8001924:	2108      	movs	r1, #8
 8001926:	4814      	ldr	r0, [pc, #80]	@ (8001978 <Set_Motor_DirectionTest+0x6c>)
 8001928:	f003 fbea 	bl	8005100 <HAL_GPIO_WritePin>
            ((foward_flag) ? GPIO_PIN_SET : GPIO_PIN_RESET));
    HAL_GPIO_WritePin(GPIOA, AIN2_Pin,
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	bf0c      	ite	eq
 8001932:	2301      	moveq	r3, #1
 8001934:	2300      	movne	r3, #0
 8001936:	b2db      	uxtb	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	2104      	movs	r1, #4
 800193c:	480e      	ldr	r0, [pc, #56]	@ (8001978 <Set_Motor_DirectionTest+0x6c>)
 800193e:	f003 fbdf 	bl	8005100 <HAL_GPIO_WritePin>
            ((foward_flag) ? GPIO_PIN_RESET : GPIO_PIN_SET));
    HAL_GPIO_WritePin(GPIOA, BIN2_Pin, //BIn1 is forward BIn2 is backward
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	bf0c      	ite	eq
 8001948:	2301      	moveq	r3, #1
 800194a:	2300      	movne	r3, #0
 800194c:	b2db      	uxtb	r3, r3
 800194e:	461a      	mov	r2, r3
 8001950:	2120      	movs	r1, #32
 8001952:	4809      	ldr	r0, [pc, #36]	@ (8001978 <Set_Motor_DirectionTest+0x6c>)
 8001954:	f003 fbd4 	bl	8005100 <HAL_GPIO_WritePin>
            ((backward_flag) ? GPIO_PIN_RESET : GPIO_PIN_SET));
    HAL_GPIO_WritePin(GPIOA, BIN1_Pin,
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	bf14      	ite	ne
 800195e:	2301      	movne	r3, #1
 8001960:	2300      	moveq	r3, #0
 8001962:	b2db      	uxtb	r3, r3
 8001964:	461a      	mov	r2, r3
 8001966:	2110      	movs	r1, #16
 8001968:	4803      	ldr	r0, [pc, #12]	@ (8001978 <Set_Motor_DirectionTest+0x6c>)
 800196a:	f003 fbc9 	bl	8005100 <HAL_GPIO_WritePin>
            ((backward_flag) ? GPIO_PIN_SET : GPIO_PIN_RESET));
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40020000 	.word	0x40020000

0800197c <delay_us>:
void delay_us(uint16_t us)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6,0);
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <delay_us+0x30>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2200      	movs	r2, #0
 800198c:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6)<us);
 800198e:	bf00      	nop
 8001990:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <delay_us+0x30>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	429a      	cmp	r2, r3
 800199a:	d3f9      	bcc.n	8001990 <delay_us+0x14>

}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	2000043c 	.word	0x2000043c

080019b0 <resetYaw>:
void resetYaw()
{	q[0]=1; q[1]=0; q[2]=0; q[3]=0;
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4b0d      	ldr	r3, [pc, #52]	@ (80019ec <resetYaw+0x3c>)
 80019b6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <resetYaw+0x3c>)
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <resetYaw+0x3c>)
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	4b07      	ldr	r3, [pc, #28]	@ (80019ec <resetYaw+0x3c>)
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	60da      	str	r2, [r3, #12]
	yaw=0;
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <resetYaw+0x40>)
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
	PID_Reset(&LMotorPID);
 80019dc:	4805      	ldr	r0, [pc, #20]	@ (80019f4 <resetYaw+0x44>)
 80019de:	f7ff ff45 	bl	800186c <PID_Reset>
	PID_Reset(&RMotorPID);
 80019e2:	4805      	ldr	r0, [pc, #20]	@ (80019f8 <resetYaw+0x48>)
 80019e4:	f7ff ff42 	bl	800186c <PID_Reset>
}
 80019e8:	bf00      	nop
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	20000008 	.word	0x20000008
 80019f0:	20000578 	.word	0x20000578
 80019f4:	2000057c 	.word	0x2000057c
 80019f8:	200005a4 	.word	0x200005a4
 80019fc:	00000000 	.word	0x00000000

08001a00 <updateYaw>:
void updateYaw()//update yaw reading using filter
{
 8001a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a02:	ed2d 8b04 	vpush	{d8-d9}
 8001a06:	af00      	add	r7, sp, #0
	static uint32_t prevtick=0;

	if(HAL_GetTick()-prevtick>1000L)//RST if never update for more than 1 second
 8001a08:	f002 fbf2 	bl	80041f0 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	4b4c      	ldr	r3, [pc, #304]	@ (8001b40 <updateYaw+0x140>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a18:	d905      	bls.n	8001a26 <updateYaw+0x26>
		{prevtick=HAL_GetTick();return;}
 8001a1a:	f002 fbe9 	bl	80041f0 <HAL_GetTick>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4a47      	ldr	r2, [pc, #284]	@ (8001b40 <updateYaw+0x140>)
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	e084      	b.n	8001b30 <updateYaw+0x130>
	ICM20948_readAccelerometer_all(&hi2c1,0,ACCEL_SENS,&accel);
 8001a26:	4b47      	ldr	r3, [pc, #284]	@ (8001b44 <updateYaw+0x144>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4846      	ldr	r0, [pc, #280]	@ (8001b48 <updateYaw+0x148>)
 8001a2e:	f008 f83f 	bl	8009ab0 <ICM20948_readAccelerometer_all>
	ICM20948_readGyroscope_all(&hi2c1, 0, GYRO_SENS, &gyro);
 8001a32:	4b46      	ldr	r3, [pc, #280]	@ (8001b4c <updateYaw+0x14c>)
 8001a34:	2203      	movs	r2, #3
 8001a36:	2100      	movs	r1, #0
 8001a38:	4843      	ldr	r0, [pc, #268]	@ (8001b48 <updateYaw+0x148>)
 8001a3a:	f007 ff21 	bl	8009880 <ICM20948_readGyroscope_all>
		  	  //ICM20948_readMagnetometer_all(&hi2c1,&mag);
		  	  //magcal_adjust(&mag,&mag_params);

		  	  //Madgwick Mahony
	MadgwickQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 8001a3e:	4b41      	ldr	r3, [pc, #260]	@ (8001b44 <updateYaw+0x144>)
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001b50 <updateYaw+0x150>
 8001a48:	ee27 8a87 	vmul.f32	s16, s15, s14
 8001a4c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b44 <updateYaw+0x144>)
 8001a4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a52:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001b50 <updateYaw+0x150>
 8001a56:	ee67 8a87 	vmul.f32	s17, s15, s14
 8001a5a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b44 <updateYaw+0x144>)
 8001a5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a60:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001b50 <updateYaw+0x150>
 8001a64:	ee27 9a87 	vmul.f32	s18, s15, s14
		  			  gyro.x*DEG_TO_RAD,-gyro.y*DEG_TO_RAD,gyro.z*DEG_TO_RAD,
 8001a68:	4b38      	ldr	r3, [pc, #224]	@ (8001b4c <updateYaw+0x14c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fd6b 	bl	8000548 <__aeabi_f2d>
 8001a72:	a331      	add	r3, pc, #196	@ (adr r3, 8001b38 <updateYaw+0x138>)
 8001a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a78:	f7fe fdbe 	bl	80005f8 <__aeabi_dmul>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
	MadgwickQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	f7ff f8b0 	bl	8000be8 <__aeabi_d2f>
 8001a88:	4604      	mov	r4, r0
		  			  gyro.x*DEG_TO_RAD,-gyro.y*DEG_TO_RAD,gyro.z*DEG_TO_RAD,
 8001a8a:	4b30      	ldr	r3, [pc, #192]	@ (8001b4c <updateYaw+0x14c>)
 8001a8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a90:	eef1 7a67 	vneg.f32	s15, s15
 8001a94:	ee17 3a90 	vmov	r3, s15
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fd55 	bl	8000548 <__aeabi_f2d>
 8001a9e:	a326      	add	r3, pc, #152	@ (adr r3, 8001b38 <updateYaw+0x138>)
 8001aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa4:	f7fe fda8 	bl	80005f8 <__aeabi_dmul>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
	MadgwickQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f7ff f89a 	bl	8000be8 <__aeabi_d2f>
 8001ab4:	4605      	mov	r5, r0
		  			  gyro.x*DEG_TO_RAD,-gyro.y*DEG_TO_RAD,gyro.z*DEG_TO_RAD,
 8001ab6:	4b25      	ldr	r3, [pc, #148]	@ (8001b4c <updateYaw+0x14c>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fd44 	bl	8000548 <__aeabi_f2d>
 8001ac0:	a31d      	add	r3, pc, #116	@ (adr r3, 8001b38 <updateYaw+0x138>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fd97 	bl	80005f8 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
	MadgwickQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f7ff f889 	bl	8000be8 <__aeabi_d2f>
 8001ad6:	4606      	mov	r6, r0
					  (HAL_GetTick()-prevtick)*0.001f,q);
 8001ad8:	f002 fb8a 	bl	80041f0 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <updateYaw+0x140>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	1ad3      	subs	r3, r2, r3
	MadgwickQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 8001ae4:	ee07 3a90 	vmov	s15, r3
 8001ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aec:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001b54 <updateYaw+0x154>
 8001af0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001af4:	4818      	ldr	r0, [pc, #96]	@ (8001b58 <updateYaw+0x158>)
 8001af6:	eeb0 3a67 	vmov.f32	s6, s15
 8001afa:	ee02 6a90 	vmov	s5, r6
 8001afe:	ee02 5a10 	vmov	s4, r5
 8001b02:	ee01 4a90 	vmov	s3, r4
 8001b06:	eeb0 1a49 	vmov.f32	s2, s18
 8001b0a:	eef0 0a68 	vmov.f32	s1, s17
 8001b0e:	eeb0 0a48 	vmov.f32	s0, s16
 8001b12:	f7ff fa31 	bl	8000f78 <MadgwickQuaternionUpdate>

		  	  prevtick=HAL_GetTick();
 8001b16:	f002 fb6b 	bl	80041f0 <HAL_GetTick>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4a08      	ldr	r2, [pc, #32]	@ (8001b40 <updateYaw+0x140>)
 8001b1e:	6013      	str	r3, [r2, #0]
		  	  yaw = GetYawFromQ(q);
 8001b20:	480d      	ldr	r0, [pc, #52]	@ (8001b58 <updateYaw+0x158>)
 8001b22:	f7ff fd09 	bl	8001538 <GetYawFromQ>
 8001b26:	eef0 7a40 	vmov.f32	s15, s0
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b5c <updateYaw+0x15c>)
 8001b2c:	edc3 7a00 	vstr	s15, [r3]
	}
 8001b30:	46bd      	mov	sp, r7
 8001b32:	ecbd 8b04 	vpop	{d8-d9}
 8001b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b38:	a2529e84 	.word	0xa2529e84
 8001b3c:	3f91df46 	.word	0x3f91df46
 8001b40:	200005ec 	.word	0x200005ec
 8001b44:	20000560 	.word	0x20000560
 8001b48:	200002c8 	.word	0x200002c8
 8001b4c:	2000056c 	.word	0x2000056c
 8001b50:	411cf5c3 	.word	0x411cf5c3
 8001b54:	3a83126f 	.word	0x3a83126f
 8001b58:	20000008 	.word	0x20000008
 8001b5c:	20000578 	.word	0x20000578

08001b60 <Backward>:
void Backward(int target)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]

	//Ensure yaw is reseted before turning
	//int target=-85;//90
	//int target=25;//360
	static uint8_t bTurn=1;
	if(bTurn&& target == 0)
 8001b68:	4b3a      	ldr	r3, [pc, #232]	@ (8001c54 <Backward+0xf4>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00e      	beq.n	8001b8e <Backward+0x2e>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10b      	bne.n	8001b8e <Backward+0x2e>
	{
		set_servo_angle(Center);
 8001b76:	205f      	movs	r0, #95	@ 0x5f
 8001b78:	f000 fc54 	bl	8002424 <set_servo_angle>
		osDelay(750);
 8001b7c:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001b80:	f008 fab6 	bl	800a0f0 <osDelay>
		resetYaw();
 8001b84:	f7ff ff14 	bl	80019b0 <resetYaw>
		bTurn=0;
 8001b88:	4b32      	ldr	r3, [pc, #200]	@ (8001c54 <Backward+0xf4>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
	}
	updateYaw();
 8001b8e:	f7ff ff37 	bl	8001a00 <updateYaw>
	//osDelay(10);
	LMotorPID.setpoint=2;
 8001b92:	4b31      	ldr	r3, [pc, #196]	@ (8001c58 <Backward+0xf8>)
 8001b94:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b98:	60da      	str	r2, [r3, #12]
	RMotorPID.setpoint=2;
 8001b9a:	4b30      	ldr	r3, [pc, #192]	@ (8001c5c <Backward+0xfc>)
 8001b9c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ba0:	60da      	str	r2, [r3, #12]

	if (yaw > target - 1.0f )
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	ee07 3a90 	vmov	s15, r3
 8001ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001bb0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c60 <Backward+0x100>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc2:	d503      	bpl.n	8001bcc <Backward+0x6c>
			  {
				  set_servo_angle(Slight_Left);
 8001bc4:	2064      	movs	r0, #100	@ 0x64
 8001bc6:	f000 fc2d 	bl	8002424 <set_servo_angle>
 8001bca:	e013      	b.n	8001bf4 <Backward+0x94>
			  }
	else if(yaw < target + 1.0f)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	ee07 3a90 	vmov	s15, r3
 8001bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001bda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001bde:	4b20      	ldr	r3, [pc, #128]	@ (8001c60 <Backward+0x100>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bec:	dd02      	ble.n	8001bf4 <Backward+0x94>
	{
		set_servo_angle(Slight_Right);
 8001bee:	205a      	movs	r0, #90	@ 0x5a
 8001bf0:	f000 fc18 	bl	8002424 <set_servo_angle>
//	else if (yaw > target - 20.0f && yaw < target + 20.0f)
//	{
//	  LMotorPID.setpoint=0.5;
//	  RMotorPID.setpoint=0.35;
//	}
	int32_t L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c64 <Backward+0x104>)
 8001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f7fe fff3 	bl	8000be8 <__aeabi_d2f>
 8001c02:	4603      	mov	r3, r0
 8001c04:	ee00 3a10 	vmov	s0, r3
 8001c08:	4813      	ldr	r0, [pc, #76]	@ (8001c58 <Backward+0xf8>)
 8001c0a:	f7ff fd79 	bl	8001700 <PID_Update>
 8001c0e:	eef0 7a40 	vmov.f32	s15, s0
 8001c12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c16:	ee17 3a90 	vmov	r3, s15
 8001c1a:	60fb      	str	r3, [r7, #12]
	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8001c1c:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <Backward+0x108>)
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	4610      	mov	r0, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	f7fe ffdf 	bl	8000be8 <__aeabi_d2f>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	ee00 3a10 	vmov	s0, r3
 8001c30:	480a      	ldr	r0, [pc, #40]	@ (8001c5c <Backward+0xfc>)
 8001c32:	f7ff fd65 	bl	8001700 <PID_Update>
 8001c36:	eef0 7a40 	vmov.f32	s15, s0
 8001c3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c3e:	ee17 3a90 	vmov	r3, s15
 8001c42:	60bb      	str	r3, [r7, #8]
	set_motor_pwm(L, R);
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 fba6 	bl	8002398 <set_motor_pwm>

}
 8001c4c:	bf00      	nop
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	2000001c 	.word	0x2000001c
 8001c58:	2000057c 	.word	0x2000057c
 8001c5c:	200005a4 	.word	0x200005a4
 8001c60:	20000578 	.word	0x20000578
 8001c64:	20000550 	.word	0x20000550
 8001c68:	20000558 	.word	0x20000558

08001c6c <Forward>:
void Forward(int target)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

	//Ensure yaw is reseted before turning
	//int target=-85;//90
	//int target=25;//360
	static uint8_t bTurn=1;
	if(bTurn&&target==0)
 8001c74:	4b3a      	ldr	r3, [pc, #232]	@ (8001d60 <Forward+0xf4>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00e      	beq.n	8001c9a <Forward+0x2e>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10b      	bne.n	8001c9a <Forward+0x2e>
	{
		set_servo_angle(Center);
 8001c82:	205f      	movs	r0, #95	@ 0x5f
 8001c84:	f000 fbce 	bl	8002424 <set_servo_angle>
		osDelay(750);
 8001c88:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001c8c:	f008 fa30 	bl	800a0f0 <osDelay>
		resetYaw();
 8001c90:	f7ff fe8e 	bl	80019b0 <resetYaw>
		bTurn=0;
 8001c94:	4b32      	ldr	r3, [pc, #200]	@ (8001d60 <Forward+0xf4>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
	}
	updateYaw();
 8001c9a:	f7ff feb1 	bl	8001a00 <updateYaw>
	//osDelay(10);
	LMotorPID.setpoint=2;
 8001c9e:	4b31      	ldr	r3, [pc, #196]	@ (8001d64 <Forward+0xf8>)
 8001ca0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ca4:	60da      	str	r2, [r3, #12]
	RMotorPID.setpoint=2;
 8001ca6:	4b30      	ldr	r3, [pc, #192]	@ (8001d68 <Forward+0xfc>)
 8001ca8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cac:	60da      	str	r2, [r3, #12]

	if (yaw > target - 1.0f )
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	ee07 3a90 	vmov	s15, r3
 8001cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001cbc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d6c <Forward+0x100>)
 8001cc2:	edd3 7a00 	vldr	s15, [r3]
 8001cc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cce:	d503      	bpl.n	8001cd8 <Forward+0x6c>
	  {
		  set_servo_angle(Slight_Right);
 8001cd0:	205a      	movs	r0, #90	@ 0x5a
 8001cd2:	f000 fba7 	bl	8002424 <set_servo_angle>
 8001cd6:	e013      	b.n	8001d00 <Forward+0x94>
	  }
	else if(yaw < target + 1.0f)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	ee07 3a90 	vmov	s15, r3
 8001cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ce6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001cea:	4b20      	ldr	r3, [pc, #128]	@ (8001d6c <Forward+0x100>)
 8001cec:	edd3 7a00 	vldr	s15, [r3]
 8001cf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf8:	dd02      	ble.n	8001d00 <Forward+0x94>
	{
		set_servo_angle(Slight_Left);
 8001cfa:	2064      	movs	r0, #100	@ 0x64
 8001cfc:	f000 fb92 	bl	8002424 <set_servo_angle>
//	else if (yaw > target - 20.0f && yaw < target + 20.0f)
//	{
//	  LMotorPID.setpoint=0.5;
//	  RMotorPID.setpoint=0.35;
//	}
	int32_t L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8001d00:	4b1b      	ldr	r3, [pc, #108]	@ (8001d70 <Forward+0x104>)
 8001d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d06:	4610      	mov	r0, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f7fe ff6d 	bl	8000be8 <__aeabi_d2f>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	ee00 3a10 	vmov	s0, r3
 8001d14:	4813      	ldr	r0, [pc, #76]	@ (8001d64 <Forward+0xf8>)
 8001d16:	f7ff fcf3 	bl	8001700 <PID_Update>
 8001d1a:	eef0 7a40 	vmov.f32	s15, s0
 8001d1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d22:	ee17 3a90 	vmov	r3, s15
 8001d26:	60fb      	str	r3, [r7, #12]
	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8001d28:	4b12      	ldr	r3, [pc, #72]	@ (8001d74 <Forward+0x108>)
 8001d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	f7fe ff59 	bl	8000be8 <__aeabi_d2f>
 8001d36:	4603      	mov	r3, r0
 8001d38:	ee00 3a10 	vmov	s0, r3
 8001d3c:	480a      	ldr	r0, [pc, #40]	@ (8001d68 <Forward+0xfc>)
 8001d3e:	f7ff fcdf 	bl	8001700 <PID_Update>
 8001d42:	eef0 7a40 	vmov.f32	s15, s0
 8001d46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d4a:	ee17 3a90 	vmov	r3, s15
 8001d4e:	60bb      	str	r3, [r7, #8]
	set_motor_pwm(L, R);
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 fb20 	bl	8002398 <set_motor_pwm>

}
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	2000001d 	.word	0x2000001d
 8001d64:	2000057c 	.word	0x2000057c
 8001d68:	200005a4 	.word	0x200005a4
 8001d6c:	20000578 	.word	0x20000578
 8001d70:	20000550 	.word	0x20000550
 8001d74:	20000558 	.word	0x20000558

08001d78 <BackRightTest>:
	int32_t L=(int32_t)PID_Update(&LMotorPID, RPS_L);
	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
	set_motor_pwm(L, R);
}
void BackRightTest(int target)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

	//Ensure yaw is reseted before turning
	//int target=-85;//90
	//int target=25;//360
	static uint8_t bTurn=1;
	if(bTurn&& target != 0)
 8001d80:	4b57      	ldr	r3, [pc, #348]	@ (8001ee0 <BackRightTest+0x168>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00e      	beq.n	8001da6 <BackRightTest+0x2e>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00b      	beq.n	8001da6 <BackRightTest+0x2e>
	{
		set_servo_angle(Right);
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f000 fb48 	bl	8002424 <set_servo_angle>
		osDelay(750);
 8001d94:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001d98:	f008 f9aa 	bl	800a0f0 <osDelay>
		resetYaw();
 8001d9c:	f7ff fe08 	bl	80019b0 <resetYaw>
		bTurn=0;
 8001da0:	4b4f      	ldr	r3, [pc, #316]	@ (8001ee0 <BackRightTest+0x168>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
	}
	updateYaw();
 8001da6:	f7ff fe2b 	bl	8001a00 <updateYaw>
	//osDelay(10);
	LMotorPID.setpoint=4;
 8001daa:	4b4e      	ldr	r3, [pc, #312]	@ (8001ee4 <BackRightTest+0x16c>)
 8001dac:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8001db0:	60da      	str	r2, [r3, #12]
	RMotorPID.setpoint=0.5;
 8001db2:	4b4d      	ldr	r3, [pc, #308]	@ (8001ee8 <BackRightTest+0x170>)
 8001db4:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001db8:	60da      	str	r2, [r3, #12]

	if (yaw > target - 2.0f && yaw < target + 2.0f)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	ee07 3a90 	vmov	s15, r3
 8001dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001dc8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001dcc:	4b47      	ldr	r3, [pc, #284]	@ (8001eec <BackRightTest+0x174>)
 8001dce:	edd3 7a00 	vldr	s15, [r3]
 8001dd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dda:	d527      	bpl.n	8001e2c <BackRightTest+0xb4>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	ee07 3a90 	vmov	s15, r3
 8001de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001dea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001dee:	4b3f      	ldr	r3, [pc, #252]	@ (8001eec <BackRightTest+0x174>)
 8001df0:	edd3 7a00 	vldr	s15, [r3]
 8001df4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfc:	dd16      	ble.n	8001e2c <BackRightTest+0xb4>
			  {
				  set_motor_pwm(0, 0);
 8001dfe:	2100      	movs	r1, #0
 8001e00:	2000      	movs	r0, #0
 8001e02:	f000 fac9 	bl	8002398 <set_motor_pwm>
				  PID_Reset(&LMotorPID);
 8001e06:	4837      	ldr	r0, [pc, #220]	@ (8001ee4 <BackRightTest+0x16c>)
 8001e08:	f7ff fd30 	bl	800186c <PID_Reset>
				  PID_Reset(&RMotorPID);
 8001e0c:	4836      	ldr	r0, [pc, #216]	@ (8001ee8 <BackRightTest+0x170>)
 8001e0e:	f7ff fd2d 	bl	800186c <PID_Reset>
				  set_servo_angle(Center);
 8001e12:	205f      	movs	r0, #95	@ 0x5f
 8001e14:	f000 fb06 	bl	8002424 <set_servo_angle>
				  bTurn=1;
 8001e18:	4b31      	ldr	r3, [pc, #196]	@ (8001ee0 <BackRightTest+0x168>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	701a      	strb	r2, [r3, #0]
				  flagDone=1;
 8001e1e:	4b34      	ldr	r3, [pc, #208]	@ (8001ef0 <BackRightTest+0x178>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]
				  tempflag=0;
 8001e24:	4b33      	ldr	r3, [pc, #204]	@ (8001ef4 <BackRightTest+0x17c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
				  return;
 8001e2a:	e055      	b.n	8001ed8 <BackRightTest+0x160>
			  }
	else if (yaw > target - 25.0f && yaw < target + 25.0f)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	ee07 3a90 	vmov	s15, r3
 8001e32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e36:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001e3a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001e3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001eec <BackRightTest+0x174>)
 8001e40:	edd3 7a00 	vldr	s15, [r3]
 8001e44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e4c:	d518      	bpl.n	8001e80 <BackRightTest+0x108>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	ee07 3a90 	vmov	s15, r3
 8001e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e58:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001e5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001e60:	4b22      	ldr	r3, [pc, #136]	@ (8001eec <BackRightTest+0x174>)
 8001e62:	edd3 7a00 	vldr	s15, [r3]
 8001e66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6e:	dd07      	ble.n	8001e80 <BackRightTest+0x108>
	{
	  LMotorPID.setpoint=0.5;
 8001e70:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee4 <BackRightTest+0x16c>)
 8001e72:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001e76:	60da      	str	r2, [r3, #12]
	  RMotorPID.setpoint=0.5;//0.35
 8001e78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee8 <BackRightTest+0x170>)
 8001e7a:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001e7e:	60da      	str	r2, [r3, #12]
	}
	int32_t L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8001e80:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef8 <BackRightTest+0x180>)
 8001e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f7fe fead 	bl	8000be8 <__aeabi_d2f>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	ee00 3a10 	vmov	s0, r3
 8001e94:	4813      	ldr	r0, [pc, #76]	@ (8001ee4 <BackRightTest+0x16c>)
 8001e96:	f7ff fc33 	bl	8001700 <PID_Update>
 8001e9a:	eef0 7a40 	vmov.f32	s15, s0
 8001e9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ea2:	ee17 3a90 	vmov	r3, s15
 8001ea6:	60fb      	str	r3, [r7, #12]
	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8001ea8:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <BackRightTest+0x184>)
 8001eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f7fe fe99 	bl	8000be8 <__aeabi_d2f>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	ee00 3a10 	vmov	s0, r3
 8001ebc:	480a      	ldr	r0, [pc, #40]	@ (8001ee8 <BackRightTest+0x170>)
 8001ebe:	f7ff fc1f 	bl	8001700 <PID_Update>
 8001ec2:	eef0 7a40 	vmov.f32	s15, s0
 8001ec6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eca:	ee17 3a90 	vmov	r3, s15
 8001ece:	60bb      	str	r3, [r7, #8]
	set_motor_pwm(L, R);
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 fa60 	bl	8002398 <set_motor_pwm>
}
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	2000001e 	.word	0x2000001e
 8001ee4:	2000057c 	.word	0x2000057c
 8001ee8:	200005a4 	.word	0x200005a4
 8001eec:	20000578 	.word	0x20000578
 8001ef0:	20000228 	.word	0x20000228
 8001ef4:	20000004 	.word	0x20000004
 8001ef8:	20000550 	.word	0x20000550
 8001efc:	20000558 	.word	0x20000558

08001f00 <BackLeftTest>:
void BackLeftTest(int target)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]

	//Ensure yaw is reseted before turning
	//int target=-85;//90
	//int target=25;//360
	static uint8_t bTurn=1;
	if(bTurn&& target != 0)
 8001f08:	4b57      	ldr	r3, [pc, #348]	@ (8002068 <BackLeftTest+0x168>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00e      	beq.n	8001f2e <BackLeftTest+0x2e>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00b      	beq.n	8001f2e <BackLeftTest+0x2e>
	{
		set_servo_angle(Left);
 8001f16:	208c      	movs	r0, #140	@ 0x8c
 8001f18:	f000 fa84 	bl	8002424 <set_servo_angle>
		osDelay(750);
 8001f1c:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8001f20:	f008 f8e6 	bl	800a0f0 <osDelay>
		resetYaw();
 8001f24:	f7ff fd44 	bl	80019b0 <resetYaw>
		bTurn=0;
 8001f28:	4b4f      	ldr	r3, [pc, #316]	@ (8002068 <BackLeftTest+0x168>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
	}
	updateYaw();
 8001f2e:	f7ff fd67 	bl	8001a00 <updateYaw>
	//osDelay(10);
	LMotorPID.setpoint=0.5;
 8001f32:	4b4e      	ldr	r3, [pc, #312]	@ (800206c <BackLeftTest+0x16c>)
 8001f34:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001f38:	60da      	str	r2, [r3, #12]
	RMotorPID.setpoint=4;
 8001f3a:	4b4d      	ldr	r3, [pc, #308]	@ (8002070 <BackLeftTest+0x170>)
 8001f3c:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8001f40:	60da      	str	r2, [r3, #12]

	if (yaw > target - 2.0f && yaw < target + 2.0f)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	ee07 3a90 	vmov	s15, r3
 8001f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f4c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001f50:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001f54:	4b47      	ldr	r3, [pc, #284]	@ (8002074 <BackLeftTest+0x174>)
 8001f56:	edd3 7a00 	vldr	s15, [r3]
 8001f5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f62:	d527      	bpl.n	8001fb4 <BackLeftTest+0xb4>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f6e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001f72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001f76:	4b3f      	ldr	r3, [pc, #252]	@ (8002074 <BackLeftTest+0x174>)
 8001f78:	edd3 7a00 	vldr	s15, [r3]
 8001f7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f84:	dd16      	ble.n	8001fb4 <BackLeftTest+0xb4>
			  {
				  set_motor_pwm(0, 0);
 8001f86:	2100      	movs	r1, #0
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f000 fa05 	bl	8002398 <set_motor_pwm>
				  PID_Reset(&LMotorPID);
 8001f8e:	4837      	ldr	r0, [pc, #220]	@ (800206c <BackLeftTest+0x16c>)
 8001f90:	f7ff fc6c 	bl	800186c <PID_Reset>
				  PID_Reset(&RMotorPID);
 8001f94:	4836      	ldr	r0, [pc, #216]	@ (8002070 <BackLeftTest+0x170>)
 8001f96:	f7ff fc69 	bl	800186c <PID_Reset>
				  set_servo_angle(Center);
 8001f9a:	205f      	movs	r0, #95	@ 0x5f
 8001f9c:	f000 fa42 	bl	8002424 <set_servo_angle>
				  bTurn=1;
 8001fa0:	4b31      	ldr	r3, [pc, #196]	@ (8002068 <BackLeftTest+0x168>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	701a      	strb	r2, [r3, #0]
				  flagDone=1;
 8001fa6:	4b34      	ldr	r3, [pc, #208]	@ (8002078 <BackLeftTest+0x178>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	601a      	str	r2, [r3, #0]
				  tempflag=0;
 8001fac:	4b33      	ldr	r3, [pc, #204]	@ (800207c <BackLeftTest+0x17c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
				  return;
 8001fb2:	e055      	b.n	8002060 <BackLeftTest+0x160>
			  }
	else if (yaw > target - 25.0f && yaw < target + 25.0f)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	ee07 3a90 	vmov	s15, r3
 8001fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fbe:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001fc2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8002074 <BackLeftTest+0x174>)
 8001fc8:	edd3 7a00 	vldr	s15, [r3]
 8001fcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd4:	d518      	bpl.n	8002008 <BackLeftTest+0x108>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	ee07 3a90 	vmov	s15, r3
 8001fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe0:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001fe4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001fe8:	4b22      	ldr	r3, [pc, #136]	@ (8002074 <BackLeftTest+0x174>)
 8001fea:	edd3 7a00 	vldr	s15, [r3]
 8001fee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff6:	dd07      	ble.n	8002008 <BackLeftTest+0x108>
	{
	  LMotorPID.setpoint=0.5;
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800206c <BackLeftTest+0x16c>)
 8001ffa:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001ffe:	60da      	str	r2, [r3, #12]
	  RMotorPID.setpoint=0.5;//0.35
 8002000:	4b1b      	ldr	r3, [pc, #108]	@ (8002070 <BackLeftTest+0x170>)
 8002002:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002006:	60da      	str	r2, [r3, #12]
	}
	int32_t L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8002008:	4b1d      	ldr	r3, [pc, #116]	@ (8002080 <BackLeftTest+0x180>)
 800200a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200e:	4610      	mov	r0, r2
 8002010:	4619      	mov	r1, r3
 8002012:	f7fe fde9 	bl	8000be8 <__aeabi_d2f>
 8002016:	4603      	mov	r3, r0
 8002018:	ee00 3a10 	vmov	s0, r3
 800201c:	4813      	ldr	r0, [pc, #76]	@ (800206c <BackLeftTest+0x16c>)
 800201e:	f7ff fb6f 	bl	8001700 <PID_Update>
 8002022:	eef0 7a40 	vmov.f32	s15, s0
 8002026:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800202a:	ee17 3a90 	vmov	r3, s15
 800202e:	60fb      	str	r3, [r7, #12]
	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8002030:	4b14      	ldr	r3, [pc, #80]	@ (8002084 <BackLeftTest+0x184>)
 8002032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	f7fe fdd5 	bl	8000be8 <__aeabi_d2f>
 800203e:	4603      	mov	r3, r0
 8002040:	ee00 3a10 	vmov	s0, r3
 8002044:	480a      	ldr	r0, [pc, #40]	@ (8002070 <BackLeftTest+0x170>)
 8002046:	f7ff fb5b 	bl	8001700 <PID_Update>
 800204a:	eef0 7a40 	vmov.f32	s15, s0
 800204e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002052:	ee17 3a90 	vmov	r3, s15
 8002056:	60bb      	str	r3, [r7, #8]
	set_motor_pwm(L, R);
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 f99c 	bl	8002398 <set_motor_pwm>
}
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000001f 	.word	0x2000001f
 800206c:	2000057c 	.word	0x2000057c
 8002070:	200005a4 	.word	0x200005a4
 8002074:	20000578 	.word	0x20000578
 8002078:	20000228 	.word	0x20000228
 800207c:	20000004 	.word	0x20000004
 8002080:	20000550 	.word	0x20000550
 8002084:	20000558 	.word	0x20000558

08002088 <ForwardLeftTest>:
void ForwardLeftTest(int target)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

	//Ensure yaw is reseted before turning
	//int target=-85;//90
	//int target=25;//360
	static uint8_t bTurn=1;
	if(bTurn&& target != 0)
 8002090:	4b57      	ldr	r3, [pc, #348]	@ (80021f0 <ForwardLeftTest+0x168>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00e      	beq.n	80020b6 <ForwardLeftTest+0x2e>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00b      	beq.n	80020b6 <ForwardLeftTest+0x2e>
	{
		set_servo_angle(Left);
 800209e:	208c      	movs	r0, #140	@ 0x8c
 80020a0:	f000 f9c0 	bl	8002424 <set_servo_angle>
		osDelay(750);
 80020a4:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80020a8:	f008 f822 	bl	800a0f0 <osDelay>
		resetYaw();
 80020ac:	f7ff fc80 	bl	80019b0 <resetYaw>
		bTurn=0;
 80020b0:	4b4f      	ldr	r3, [pc, #316]	@ (80021f0 <ForwardLeftTest+0x168>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
	}
	updateYaw();
 80020b6:	f7ff fca3 	bl	8001a00 <updateYaw>
	//osDelay(10);
	LMotorPID.setpoint=0.5;
 80020ba:	4b4e      	ldr	r3, [pc, #312]	@ (80021f4 <ForwardLeftTest+0x16c>)
 80020bc:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80020c0:	60da      	str	r2, [r3, #12]
	RMotorPID.setpoint=4;
 80020c2:	4b4d      	ldr	r3, [pc, #308]	@ (80021f8 <ForwardLeftTest+0x170>)
 80020c4:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80020c8:	60da      	str	r2, [r3, #12]

	if (yaw > target - 2.0f && yaw < target + 2.0f)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	ee07 3a90 	vmov	s15, r3
 80020d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80020d8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80020dc:	4b47      	ldr	r3, [pc, #284]	@ (80021fc <ForwardLeftTest+0x174>)
 80020de:	edd3 7a00 	vldr	s15, [r3]
 80020e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ea:	d527      	bpl.n	800213c <ForwardLeftTest+0xb4>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	ee07 3a90 	vmov	s15, r3
 80020f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80020fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80020fe:	4b3f      	ldr	r3, [pc, #252]	@ (80021fc <ForwardLeftTest+0x174>)
 8002100:	edd3 7a00 	vldr	s15, [r3]
 8002104:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210c:	dd16      	ble.n	800213c <ForwardLeftTest+0xb4>
			  {
				  set_motor_pwm(0, 0);
 800210e:	2100      	movs	r1, #0
 8002110:	2000      	movs	r0, #0
 8002112:	f000 f941 	bl	8002398 <set_motor_pwm>
				  PID_Reset(&LMotorPID);
 8002116:	4837      	ldr	r0, [pc, #220]	@ (80021f4 <ForwardLeftTest+0x16c>)
 8002118:	f7ff fba8 	bl	800186c <PID_Reset>
				  PID_Reset(&RMotorPID);
 800211c:	4836      	ldr	r0, [pc, #216]	@ (80021f8 <ForwardLeftTest+0x170>)
 800211e:	f7ff fba5 	bl	800186c <PID_Reset>
				  set_servo_angle(Center);
 8002122:	205f      	movs	r0, #95	@ 0x5f
 8002124:	f000 f97e 	bl	8002424 <set_servo_angle>
				  bTurn=1;
 8002128:	4b31      	ldr	r3, [pc, #196]	@ (80021f0 <ForwardLeftTest+0x168>)
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
				  flagDone=1;
 800212e:	4b34      	ldr	r3, [pc, #208]	@ (8002200 <ForwardLeftTest+0x178>)
 8002130:	2201      	movs	r2, #1
 8002132:	601a      	str	r2, [r3, #0]
				  tempflag=0;
 8002134:	4b33      	ldr	r3, [pc, #204]	@ (8002204 <ForwardLeftTest+0x17c>)
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
				  return;
 800213a:	e055      	b.n	80021e8 <ForwardLeftTest+0x160>
			  }
	else if (yaw > target - 25.0f && yaw < target + 25.0f)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	ee07 3a90 	vmov	s15, r3
 8002142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002146:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800214a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800214e:	4b2b      	ldr	r3, [pc, #172]	@ (80021fc <ForwardLeftTest+0x174>)
 8002150:	edd3 7a00 	vldr	s15, [r3]
 8002154:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215c:	d518      	bpl.n	8002190 <ForwardLeftTest+0x108>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	ee07 3a90 	vmov	s15, r3
 8002164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002168:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800216c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002170:	4b22      	ldr	r3, [pc, #136]	@ (80021fc <ForwardLeftTest+0x174>)
 8002172:	edd3 7a00 	vldr	s15, [r3]
 8002176:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217e:	dd07      	ble.n	8002190 <ForwardLeftTest+0x108>
	{
	  LMotorPID.setpoint=0.5;
 8002180:	4b1c      	ldr	r3, [pc, #112]	@ (80021f4 <ForwardLeftTest+0x16c>)
 8002182:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002186:	60da      	str	r2, [r3, #12]
	  RMotorPID.setpoint=0.5;//0.35
 8002188:	4b1b      	ldr	r3, [pc, #108]	@ (80021f8 <ForwardLeftTest+0x170>)
 800218a:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800218e:	60da      	str	r2, [r3, #12]
	}
	int32_t L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8002190:	4b1d      	ldr	r3, [pc, #116]	@ (8002208 <ForwardLeftTest+0x180>)
 8002192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	f7fe fd25 	bl	8000be8 <__aeabi_d2f>
 800219e:	4603      	mov	r3, r0
 80021a0:	ee00 3a10 	vmov	s0, r3
 80021a4:	4813      	ldr	r0, [pc, #76]	@ (80021f4 <ForwardLeftTest+0x16c>)
 80021a6:	f7ff faab 	bl	8001700 <PID_Update>
 80021aa:	eef0 7a40 	vmov.f32	s15, s0
 80021ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021b2:	ee17 3a90 	vmov	r3, s15
 80021b6:	60fb      	str	r3, [r7, #12]
	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 80021b8:	4b14      	ldr	r3, [pc, #80]	@ (800220c <ForwardLeftTest+0x184>)
 80021ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	f7fe fd11 	bl	8000be8 <__aeabi_d2f>
 80021c6:	4603      	mov	r3, r0
 80021c8:	ee00 3a10 	vmov	s0, r3
 80021cc:	480a      	ldr	r0, [pc, #40]	@ (80021f8 <ForwardLeftTest+0x170>)
 80021ce:	f7ff fa97 	bl	8001700 <PID_Update>
 80021d2:	eef0 7a40 	vmov.f32	s15, s0
 80021d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021da:	ee17 3a90 	vmov	r3, s15
 80021de:	60bb      	str	r3, [r7, #8]
	set_motor_pwm(L, R);
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 f8d8 	bl	8002398 <set_motor_pwm>
}
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000020 	.word	0x20000020
 80021f4:	2000057c 	.word	0x2000057c
 80021f8:	200005a4 	.word	0x200005a4
 80021fc:	20000578 	.word	0x20000578
 8002200:	20000228 	.word	0x20000228
 8002204:	20000004 	.word	0x20000004
 8002208:	20000550 	.word	0x20000550
 800220c:	20000558 	.word	0x20000558

08002210 <ForwardRightTest>:
void ForwardRightTest(int target)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

	//Ensure yaw is reseted before turning
	//int target=-85;//90
	//int target=25;//360
	static uint8_t bTurn=1;
	if(bTurn&& target != 0)
 8002218:	4b57      	ldr	r3, [pc, #348]	@ (8002378 <ForwardRightTest+0x168>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00e      	beq.n	800223e <ForwardRightTest+0x2e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00b      	beq.n	800223e <ForwardRightTest+0x2e>
	{
		set_servo_angle(Right);
 8002226:	2000      	movs	r0, #0
 8002228:	f000 f8fc 	bl	8002424 <set_servo_angle>
		osDelay(750);
 800222c:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8002230:	f007 ff5e 	bl	800a0f0 <osDelay>
		resetYaw();
 8002234:	f7ff fbbc 	bl	80019b0 <resetYaw>
		bTurn=0;
 8002238:	4b4f      	ldr	r3, [pc, #316]	@ (8002378 <ForwardRightTest+0x168>)
 800223a:	2200      	movs	r2, #0
 800223c:	701a      	strb	r2, [r3, #0]
	}
	updateYaw();
 800223e:	f7ff fbdf 	bl	8001a00 <updateYaw>
	//osDelay(10);
	LMotorPID.setpoint=4;
 8002242:	4b4e      	ldr	r3, [pc, #312]	@ (800237c <ForwardRightTest+0x16c>)
 8002244:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8002248:	60da      	str	r2, [r3, #12]
	RMotorPID.setpoint=0.5;
 800224a:	4b4d      	ldr	r3, [pc, #308]	@ (8002380 <ForwardRightTest+0x170>)
 800224c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002250:	60da      	str	r2, [r3, #12]

	if (yaw > target - 2.0f && yaw < target + 2.0f)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	ee07 3a90 	vmov	s15, r3
 8002258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800225c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002260:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002264:	4b47      	ldr	r3, [pc, #284]	@ (8002384 <ForwardRightTest+0x174>)
 8002266:	edd3 7a00 	vldr	s15, [r3]
 800226a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800226e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002272:	d527      	bpl.n	80022c4 <ForwardRightTest+0xb4>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	ee07 3a90 	vmov	s15, r3
 800227a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800227e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002282:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002286:	4b3f      	ldr	r3, [pc, #252]	@ (8002384 <ForwardRightTest+0x174>)
 8002288:	edd3 7a00 	vldr	s15, [r3]
 800228c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002294:	dd16      	ble.n	80022c4 <ForwardRightTest+0xb4>
			  {
				  set_motor_pwm(0, 0);
 8002296:	2100      	movs	r1, #0
 8002298:	2000      	movs	r0, #0
 800229a:	f000 f87d 	bl	8002398 <set_motor_pwm>
				  PID_Reset(&LMotorPID);
 800229e:	4837      	ldr	r0, [pc, #220]	@ (800237c <ForwardRightTest+0x16c>)
 80022a0:	f7ff fae4 	bl	800186c <PID_Reset>
				  PID_Reset(&RMotorPID);
 80022a4:	4836      	ldr	r0, [pc, #216]	@ (8002380 <ForwardRightTest+0x170>)
 80022a6:	f7ff fae1 	bl	800186c <PID_Reset>
				  set_servo_angle(Center);
 80022aa:	205f      	movs	r0, #95	@ 0x5f
 80022ac:	f000 f8ba 	bl	8002424 <set_servo_angle>
				  bTurn=1;
 80022b0:	4b31      	ldr	r3, [pc, #196]	@ (8002378 <ForwardRightTest+0x168>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	701a      	strb	r2, [r3, #0]
				  flagDone=1;
 80022b6:	4b34      	ldr	r3, [pc, #208]	@ (8002388 <ForwardRightTest+0x178>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
				  tempflag=0;
 80022bc:	4b33      	ldr	r3, [pc, #204]	@ (800238c <ForwardRightTest+0x17c>)
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
				  return;
 80022c2:	e055      	b.n	8002370 <ForwardRightTest+0x160>
			  }
	else if (yaw > target - 25.0f && yaw < target + 25.0f)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	ee07 3a90 	vmov	s15, r3
 80022ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ce:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80022d2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80022d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002384 <ForwardRightTest+0x174>)
 80022d8:	edd3 7a00 	vldr	s15, [r3]
 80022dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e4:	d518      	bpl.n	8002318 <ForwardRightTest+0x108>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	ee07 3a90 	vmov	s15, r3
 80022ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022f0:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80022f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80022f8:	4b22      	ldr	r3, [pc, #136]	@ (8002384 <ForwardRightTest+0x174>)
 80022fa:	edd3 7a00 	vldr	s15, [r3]
 80022fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002306:	dd07      	ble.n	8002318 <ForwardRightTest+0x108>
	{
	  LMotorPID.setpoint=0.5;
 8002308:	4b1c      	ldr	r3, [pc, #112]	@ (800237c <ForwardRightTest+0x16c>)
 800230a:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800230e:	60da      	str	r2, [r3, #12]
	  RMotorPID.setpoint=0.5;//0.35
 8002310:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <ForwardRightTest+0x170>)
 8002312:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002316:	60da      	str	r2, [r3, #12]
	}
	int32_t L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8002318:	4b1d      	ldr	r3, [pc, #116]	@ (8002390 <ForwardRightTest+0x180>)
 800231a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231e:	4610      	mov	r0, r2
 8002320:	4619      	mov	r1, r3
 8002322:	f7fe fc61 	bl	8000be8 <__aeabi_d2f>
 8002326:	4603      	mov	r3, r0
 8002328:	ee00 3a10 	vmov	s0, r3
 800232c:	4813      	ldr	r0, [pc, #76]	@ (800237c <ForwardRightTest+0x16c>)
 800232e:	f7ff f9e7 	bl	8001700 <PID_Update>
 8002332:	eef0 7a40 	vmov.f32	s15, s0
 8002336:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800233a:	ee17 3a90 	vmov	r3, s15
 800233e:	60fb      	str	r3, [r7, #12]
	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8002340:	4b14      	ldr	r3, [pc, #80]	@ (8002394 <ForwardRightTest+0x184>)
 8002342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002346:	4610      	mov	r0, r2
 8002348:	4619      	mov	r1, r3
 800234a:	f7fe fc4d 	bl	8000be8 <__aeabi_d2f>
 800234e:	4603      	mov	r3, r0
 8002350:	ee00 3a10 	vmov	s0, r3
 8002354:	480a      	ldr	r0, [pc, #40]	@ (8002380 <ForwardRightTest+0x170>)
 8002356:	f7ff f9d3 	bl	8001700 <PID_Update>
 800235a:	eef0 7a40 	vmov.f32	s15, s0
 800235e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002362:	ee17 3a90 	vmov	r3, s15
 8002366:	60bb      	str	r3, [r7, #8]
	set_motor_pwm(L, R);
 8002368:	68b9      	ldr	r1, [r7, #8]
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 f814 	bl	8002398 <set_motor_pwm>
}
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000021 	.word	0x20000021
 800237c:	2000057c 	.word	0x2000057c
 8002380:	200005a4 	.word	0x200005a4
 8002384:	20000578 	.word	0x20000578
 8002388:	20000228 	.word	0x20000228
 800238c:	20000004 	.word	0x20000004
 8002390:	20000550 	.word	0x20000550
 8002394:	20000558 	.word	0x20000558

08002398 <set_motor_pwm>:
	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
	set_motor_pwm(L, R);

}
void set_motor_pwm(int32_t L,int32_t R)
{	//4k max pwm
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]

	pwmValL=L;
 80023a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002418 <set_motor_pwm+0x80>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6013      	str	r3, [r2, #0]
	pwmValR=R;
 80023a8:	4a1c      	ldr	r2, [pc, #112]	@ (800241c <set_motor_pwm+0x84>)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	6013      	str	r3, [r2, #0]
	 if(pwmValL<0)
 80023ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002418 <set_motor_pwm+0x80>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	da04      	bge.n	80023c0 <set_motor_pwm+0x28>
		 pwmValL=500;
 80023b6:	4b18      	ldr	r3, [pc, #96]	@ (8002418 <set_motor_pwm+0x80>)
 80023b8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	e008      	b.n	80023d2 <set_motor_pwm+0x3a>
	 else if(pwmValL>4000)
 80023c0:	4b15      	ldr	r3, [pc, #84]	@ (8002418 <set_motor_pwm+0x80>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80023c8:	dd03      	ble.n	80023d2 <set_motor_pwm+0x3a>
		 pwmValL=4000;
 80023ca:	4b13      	ldr	r3, [pc, #76]	@ (8002418 <set_motor_pwm+0x80>)
 80023cc:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80023d0:	601a      	str	r2, [r3, #0]

	 if(pwmValR<0)
 80023d2:	4b12      	ldr	r3, [pc, #72]	@ (800241c <set_motor_pwm+0x84>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	da04      	bge.n	80023e4 <set_motor_pwm+0x4c>
		  pwmValR=500;
 80023da:	4b10      	ldr	r3, [pc, #64]	@ (800241c <set_motor_pwm+0x84>)
 80023dc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	e008      	b.n	80023f6 <set_motor_pwm+0x5e>
	 else if(pwmValL>4000)
 80023e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <set_motor_pwm+0x80>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80023ec:	dd03      	ble.n	80023f6 <set_motor_pwm+0x5e>
		  pwmValR=4000;
 80023ee:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <set_motor_pwm+0x84>)
 80023f0:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80023f4:	601a      	str	r2, [r3, #0]

	 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValL);
 80023f6:	4b08      	ldr	r3, [pc, #32]	@ (8002418 <set_motor_pwm+0x80>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	4b09      	ldr	r3, [pc, #36]	@ (8002420 <set_motor_pwm+0x88>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	635a      	str	r2, [r3, #52]	@ 0x34
	 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmValR);
 8002400:	4b06      	ldr	r3, [pc, #24]	@ (800241c <set_motor_pwm+0x84>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b06      	ldr	r3, [pc, #24]	@ (8002420 <set_motor_pwm+0x88>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	639a      	str	r2, [r3, #56]	@ 0x38

	}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	200005cc 	.word	0x200005cc
 800241c:	200005d0 	.word	0x200005d0
 8002420:	20000484 	.word	0x20000484

08002424 <set_servo_angle>:
    	servo_pwm = MAX_SERVO;
    }
    htim1.Instance->CCR4 = servo_pwm;
}
void set_servo_angle(uint8_t value)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
    if (value > 180) value = 180;
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	2bb4      	cmp	r3, #180	@ 0xb4
 8002432:	d901      	bls.n	8002438 <set_servo_angle+0x14>
 8002434:	23b4      	movs	r3, #180	@ 0xb4
 8002436:	71fb      	strb	r3, [r7, #7]
    if (value < 0) value = 0;

	 servo_pwm = 240 - ((value * (240 - 60)) / 180);
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800243e:	4a08      	ldr	r2, [pc, #32]	@ (8002460 <set_servo_angle+0x3c>)
 8002440:	6013      	str	r3, [r2, #0]
    if(servo_pwm > MAX_SERVO)
    {
    	servo_pwm = MAX_SERVO;

    }*/
	 angle=value;
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	4a07      	ldr	r2, [pc, #28]	@ (8002464 <set_servo_angle+0x40>)
 8002446:	6013      	str	r3, [r2, #0]
    htim1.Instance->CCR4 = servo_pwm;
 8002448:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <set_servo_angle+0x3c>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b06      	ldr	r3, [pc, #24]	@ (8002468 <set_servo_angle+0x44>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000018 	.word	0x20000018
 8002464:	200005d8 	.word	0x200005d8
 8002468:	2000031c 	.word	0x2000031c

0800246c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002470:	f001 fe58 	bl	8004124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002474:	f000 f8bc 	bl	80025f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002478:	f000 fcaa 	bl	8002dd0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800247c:	f000 fc7e 	bl	8002d7c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002480:	f000 fad8 	bl	8002a34 <MX_TIM3_Init>
  MX_TIM6_Init();
 8002484:	f000 fb9a 	bl	8002bbc <MX_TIM6_Init>
  MX_TIM1_Init();
 8002488:	f000 f9e2 	bl	8002850 <MX_TIM1_Init>
  MX_TIM8_Init();
 800248c:	f000 fbcc 	bl	8002c28 <MX_TIM8_Init>
  MX_I2C1_Init();
 8002490:	f000 f9b0 	bl	80027f4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002494:	f000 fa7a 	bl	800298c <MX_TIM2_Init>
  MX_TIM4_Init();
 8002498:	f000 fb20 	bl	8002adc <MX_TIM4_Init>
  MX_ADC1_Init();
 800249c:	f000 f906 	bl	80026ac <MX_ADC1_Init>
  MX_ADC2_Init();
 80024a0:	f000 f956 	bl	8002750 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 80024a4:	f00a fc6e 	bl	800cd84 <OLED_Init>
  ICM20948_init(&hi2c1,0,GYRO_SENS,ACCEL_SENS);
 80024a8:	2300      	movs	r3, #0
 80024aa:	2203      	movs	r2, #3
 80024ac:	2100      	movs	r1, #0
 80024ae:	4835      	ldr	r0, [pc, #212]	@ (8002584 <main+0x118>)
 80024b0:	f007 f95f 	bl	8009772 <ICM20948_init>

  HAL_Delay(200);
 80024b4:	20c8      	movs	r0, #200	@ 0xc8
 80024b6:	f001 fea7 	bl	8004208 <HAL_Delay>
  ICM20948_CalibrateAccel(&hi2c1, ACCEL_SENS, 250);
 80024ba:	22fa      	movs	r2, #250	@ 0xfa
 80024bc:	2100      	movs	r1, #0
 80024be:	4831      	ldr	r0, [pc, #196]	@ (8002584 <main+0x118>)
 80024c0:	f007 fca2 	bl	8009e08 <ICM20948_CalibrateAccel>
  ICM20948_CalibrateGyro(&hi2c1,GYRO_SENS, 250);
 80024c4:	22fa      	movs	r2, #250	@ 0xfa
 80024c6:	2103      	movs	r1, #3
 80024c8:	482e      	ldr	r0, [pc, #184]	@ (8002584 <main+0x118>)
 80024ca:	f007 fbf5 	bl	8009cb8 <ICM20948_CalibrateGyro>

  HAL_TIM_Base_Start(&htim6);// for microseond delay
 80024ce:	482e      	ldr	r0, [pc, #184]	@ (8002588 <main+0x11c>)
 80024d0:	f004 fb3e 	bl	8006b50 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);//Timer for ultra sonic
 80024d4:	2100      	movs	r1, #0
 80024d6:	482d      	ldr	r0, [pc, #180]	@ (800258c <main+0x120>)
 80024d8:	f004 fd1e 	bl	8006f18 <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart3,(uint8_t *)aRxBuffer,RECEIVE_BUFFER_SIZE);//Receive data from uart
 80024dc:	2204      	movs	r2, #4
 80024de:	492c      	ldr	r1, [pc, #176]	@ (8002590 <main+0x124>)
 80024e0:	482c      	ldr	r0, [pc, #176]	@ (8002594 <main+0x128>)
 80024e2:	f006 f8fa 	bl	80086da <HAL_UART_Receive_IT>


  PID_Init(&LMotorPID, 5*100.0f, 15 *100.0f,0 , 0, -1000, 4000);
 80024e6:	eddf 2a2c 	vldr	s5, [pc, #176]	@ 8002598 <main+0x12c>
 80024ea:	ed9f 2a2c 	vldr	s4, [pc, #176]	@ 800259c <main+0x130>
 80024ee:	eddf 1a2c 	vldr	s3, [pc, #176]	@ 80025a0 <main+0x134>
 80024f2:	ed9f 1a2b 	vldr	s2, [pc, #172]	@ 80025a0 <main+0x134>
 80024f6:	eddf 0a2b 	vldr	s1, [pc, #172]	@ 80025a4 <main+0x138>
 80024fa:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 80025a8 <main+0x13c>
 80024fe:	482b      	ldr	r0, [pc, #172]	@ (80025ac <main+0x140>)
 8002500:	f7ff f8ca 	bl	8001698 <PID_Init>
  PID_Init(&RMotorPID, 5*100.0f, 15 *100.0f,0 , 0, -1000, 4000);
 8002504:	eddf 2a24 	vldr	s5, [pc, #144]	@ 8002598 <main+0x12c>
 8002508:	ed9f 2a24 	vldr	s4, [pc, #144]	@ 800259c <main+0x130>
 800250c:	eddf 1a24 	vldr	s3, [pc, #144]	@ 80025a0 <main+0x134>
 8002510:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 80025a0 <main+0x134>
 8002514:	eddf 0a23 	vldr	s1, [pc, #140]	@ 80025a4 <main+0x138>
 8002518:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 80025a8 <main+0x13c>
 800251c:	4824      	ldr	r0, [pc, #144]	@ (80025b0 <main+0x144>)
 800251e:	f7ff f8bb 	bl	8001698 <PID_Init>
  Set_Motor_Direction(1);//Keep forget put lmao
 8002522:	2001      	movs	r0, #1
 8002524:	f7ff f9bc 	bl	80018a0 <Set_Motor_Direction>
  functionCheck();
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002528:	f007 fd06 	bl	8009f38 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800252c:	4a21      	ldr	r2, [pc, #132]	@ (80025b4 <main+0x148>)
 800252e:	2100      	movs	r1, #0
 8002530:	4821      	ldr	r0, [pc, #132]	@ (80025b8 <main+0x14c>)
 8002532:	f007 fd4b 	bl	8009fcc <osThreadNew>
 8002536:	4603      	mov	r3, r0
 8002538:	4a20      	ldr	r2, [pc, #128]	@ (80025bc <main+0x150>)
 800253a:	6013      	str	r3, [r2, #0]

  /* creation of oledTask */
  oledTaskHandle = osThreadNew(StartOledTask, NULL, &oledTask_attributes);
 800253c:	4a20      	ldr	r2, [pc, #128]	@ (80025c0 <main+0x154>)
 800253e:	2100      	movs	r1, #0
 8002540:	4820      	ldr	r0, [pc, #128]	@ (80025c4 <main+0x158>)
 8002542:	f007 fd43 	bl	8009fcc <osThreadNew>
 8002546:	4603      	mov	r3, r0
 8002548:	4a1f      	ldr	r2, [pc, #124]	@ (80025c8 <main+0x15c>)
 800254a:	6013      	str	r3, [r2, #0]

  /* creation of sensorTask */
  sensorTaskHandle = osThreadNew(Startsensor, NULL, &sensorTask_attributes);
 800254c:	4a1f      	ldr	r2, [pc, #124]	@ (80025cc <main+0x160>)
 800254e:	2100      	movs	r1, #0
 8002550:	481f      	ldr	r0, [pc, #124]	@ (80025d0 <main+0x164>)
 8002552:	f007 fd3b 	bl	8009fcc <osThreadNew>
 8002556:	4603      	mov	r3, r0
 8002558:	4a1e      	ldr	r2, [pc, #120]	@ (80025d4 <main+0x168>)
 800255a:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 800255c:	4a1e      	ldr	r2, [pc, #120]	@ (80025d8 <main+0x16c>)
 800255e:	2100      	movs	r1, #0
 8002560:	481e      	ldr	r0, [pc, #120]	@ (80025dc <main+0x170>)
 8002562:	f007 fd33 	bl	8009fcc <osThreadNew>
 8002566:	4603      	mov	r3, r0
 8002568:	4a1d      	ldr	r2, [pc, #116]	@ (80025e0 <main+0x174>)
 800256a:	6013      	str	r3, [r2, #0]

  /* creation of robotTask */
  robotTaskHandle = osThreadNew(startrobotTask, NULL, &robotTask_attributes);
 800256c:	4a1d      	ldr	r2, [pc, #116]	@ (80025e4 <main+0x178>)
 800256e:	2100      	movs	r1, #0
 8002570:	481d      	ldr	r0, [pc, #116]	@ (80025e8 <main+0x17c>)
 8002572:	f007 fd2b 	bl	8009fcc <osThreadNew>
 8002576:	4603      	mov	r3, r0
 8002578:	4a1c      	ldr	r2, [pc, #112]	@ (80025ec <main+0x180>)
 800257a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800257c:	f007 fd00 	bl	8009f80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002580:	bf00      	nop
 8002582:	e7fd      	b.n	8002580 <main+0x114>
 8002584:	200002c8 	.word	0x200002c8
 8002588:	2000043c 	.word	0x2000043c
 800258c:	200003f4 	.word	0x200003f4
 8002590:	200005dc 	.word	0x200005dc
 8002594:	200004cc 	.word	0x200004cc
 8002598:	457a0000 	.word	0x457a0000
 800259c:	c47a0000 	.word	0xc47a0000
 80025a0:	00000000 	.word	0x00000000
 80025a4:	44bb8000 	.word	0x44bb8000
 80025a8:	43fa0000 	.word	0x43fa0000
 80025ac:	2000057c 	.word	0x2000057c
 80025b0:	200005a4 	.word	0x200005a4
 80025b4:	0801031c 	.word	0x0801031c
 80025b8:	0800322d 	.word	0x0800322d
 80025bc:	20000514 	.word	0x20000514
 80025c0:	08010340 	.word	0x08010340
 80025c4:	0800324d 	.word	0x0800324d
 80025c8:	20000518 	.word	0x20000518
 80025cc:	08010364 	.word	0x08010364
 80025d0:	08003381 	.word	0x08003381
 80025d4:	2000051c 	.word	0x2000051c
 80025d8:	08010388 	.word	0x08010388
 80025dc:	080033d1 	.word	0x080033d1
 80025e0:	20000520 	.word	0x20000520
 80025e4:	080103ac 	.word	0x080103ac
 80025e8:	08003689 	.word	0x08003689
 80025ec:	20000524 	.word	0x20000524

080025f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b094      	sub	sp, #80	@ 0x50
 80025f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025f6:	f107 0320 	add.w	r3, r7, #32
 80025fa:	2230      	movs	r2, #48	@ 0x30
 80025fc:	2100      	movs	r1, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	f00b fa65 	bl	800dace <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002604:	f107 030c 	add.w	r3, r7, #12
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	4b22      	ldr	r3, [pc, #136]	@ (80026a4 <SystemClock_Config+0xb4>)
 800261a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261c:	4a21      	ldr	r2, [pc, #132]	@ (80026a4 <SystemClock_Config+0xb4>)
 800261e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002622:	6413      	str	r3, [r2, #64]	@ 0x40
 8002624:	4b1f      	ldr	r3, [pc, #124]	@ (80026a4 <SystemClock_Config+0xb4>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002630:	2300      	movs	r3, #0
 8002632:	607b      	str	r3, [r7, #4]
 8002634:	4b1c      	ldr	r3, [pc, #112]	@ (80026a8 <SystemClock_Config+0xb8>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a1b      	ldr	r2, [pc, #108]	@ (80026a8 <SystemClock_Config+0xb8>)
 800263a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b19      	ldr	r3, [pc, #100]	@ (80026a8 <SystemClock_Config+0xb8>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800264c:	2302      	movs	r3, #2
 800264e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002650:	2301      	movs	r3, #1
 8002652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002654:	2310      	movs	r3, #16
 8002656:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002658:	2300      	movs	r3, #0
 800265a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800265c:	f107 0320 	add.w	r3, r7, #32
 8002660:	4618      	mov	r0, r3
 8002662:	f003 fdcd 	bl	8006200 <HAL_RCC_OscConfig>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800266c:	f001 f958 	bl	8003920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002670:	230f      	movs	r3, #15
 8002672:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002674:	2300      	movs	r3, #0
 8002676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800267c:	2300      	movs	r3, #0
 800267e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002680:	2300      	movs	r3, #0
 8002682:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002684:	f107 030c 	add.w	r3, r7, #12
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f004 f830 	bl	80066f0 <HAL_RCC_ClockConfig>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002696:	f001 f943 	bl	8003920 <Error_Handler>
  }
}
 800269a:	bf00      	nop
 800269c:	3750      	adds	r7, #80	@ 0x50
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40007000 	.word	0x40007000

080026ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80026b2:	463b      	mov	r3, r7
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80026be:	4b21      	ldr	r3, [pc, #132]	@ (8002744 <MX_ADC1_Init+0x98>)
 80026c0:	4a21      	ldr	r2, [pc, #132]	@ (8002748 <MX_ADC1_Init+0x9c>)
 80026c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80026c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002744 <MX_ADC1_Init+0x98>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002744 <MX_ADC1_Init+0x98>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80026d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002744 <MX_ADC1_Init+0x98>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80026d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002744 <MX_ADC1_Init+0x98>)
 80026d8:	2200      	movs	r2, #0
 80026da:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026dc:	4b19      	ldr	r3, [pc, #100]	@ (8002744 <MX_ADC1_Init+0x98>)
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026e4:	4b17      	ldr	r3, [pc, #92]	@ (8002744 <MX_ADC1_Init+0x98>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026ea:	4b16      	ldr	r3, [pc, #88]	@ (8002744 <MX_ADC1_Init+0x98>)
 80026ec:	4a17      	ldr	r2, [pc, #92]	@ (800274c <MX_ADC1_Init+0xa0>)
 80026ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026f0:	4b14      	ldr	r3, [pc, #80]	@ (8002744 <MX_ADC1_Init+0x98>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80026f6:	4b13      	ldr	r3, [pc, #76]	@ (8002744 <MX_ADC1_Init+0x98>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80026fc:	4b11      	ldr	r3, [pc, #68]	@ (8002744 <MX_ADC1_Init+0x98>)
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002704:	4b0f      	ldr	r3, [pc, #60]	@ (8002744 <MX_ADC1_Init+0x98>)
 8002706:	2201      	movs	r2, #1
 8002708:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800270a:	480e      	ldr	r0, [pc, #56]	@ (8002744 <MX_ADC1_Init+0x98>)
 800270c:	f001 fda0 	bl	8004250 <HAL_ADC_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002716:	f001 f903 	bl	8003920 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800271a:	2300      	movs	r3, #0
 800271c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800271e:	2301      	movs	r3, #1
 8002720:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002726:	463b      	mov	r3, r7
 8002728:	4619      	mov	r1, r3
 800272a:	4806      	ldr	r0, [pc, #24]	@ (8002744 <MX_ADC1_Init+0x98>)
 800272c:	f001 ff72 	bl	8004614 <HAL_ADC_ConfigChannel>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002736:	f001 f8f3 	bl	8003920 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800273a:	bf00      	nop
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000238 	.word	0x20000238
 8002748:	40012000 	.word	0x40012000
 800274c:	0f000001 	.word	0x0f000001

08002750 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002756:	463b      	mov	r3, r7
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002762:	4b21      	ldr	r3, [pc, #132]	@ (80027e8 <MX_ADC2_Init+0x98>)
 8002764:	4a21      	ldr	r2, [pc, #132]	@ (80027ec <MX_ADC2_Init+0x9c>)
 8002766:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002768:	4b1f      	ldr	r3, [pc, #124]	@ (80027e8 <MX_ADC2_Init+0x98>)
 800276a:	2200      	movs	r2, #0
 800276c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800276e:	4b1e      	ldr	r3, [pc, #120]	@ (80027e8 <MX_ADC2_Init+0x98>)
 8002770:	2200      	movs	r2, #0
 8002772:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002774:	4b1c      	ldr	r3, [pc, #112]	@ (80027e8 <MX_ADC2_Init+0x98>)
 8002776:	2200      	movs	r2, #0
 8002778:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800277a:	4b1b      	ldr	r3, [pc, #108]	@ (80027e8 <MX_ADC2_Init+0x98>)
 800277c:	2200      	movs	r2, #0
 800277e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002780:	4b19      	ldr	r3, [pc, #100]	@ (80027e8 <MX_ADC2_Init+0x98>)
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002788:	4b17      	ldr	r3, [pc, #92]	@ (80027e8 <MX_ADC2_Init+0x98>)
 800278a:	2200      	movs	r2, #0
 800278c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800278e:	4b16      	ldr	r3, [pc, #88]	@ (80027e8 <MX_ADC2_Init+0x98>)
 8002790:	4a17      	ldr	r2, [pc, #92]	@ (80027f0 <MX_ADC2_Init+0xa0>)
 8002792:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002794:	4b14      	ldr	r3, [pc, #80]	@ (80027e8 <MX_ADC2_Init+0x98>)
 8002796:	2200      	movs	r2, #0
 8002798:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800279a:	4b13      	ldr	r3, [pc, #76]	@ (80027e8 <MX_ADC2_Init+0x98>)
 800279c:	2201      	movs	r2, #1
 800279e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80027a0:	4b11      	ldr	r3, [pc, #68]	@ (80027e8 <MX_ADC2_Init+0x98>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027a8:	4b0f      	ldr	r3, [pc, #60]	@ (80027e8 <MX_ADC2_Init+0x98>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80027ae:	480e      	ldr	r0, [pc, #56]	@ (80027e8 <MX_ADC2_Init+0x98>)
 80027b0:	f001 fd4e 	bl	8004250 <HAL_ADC_Init>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80027ba:	f001 f8b1 	bl	8003920 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80027be:	2301      	movs	r3, #1
 80027c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80027c2:	2301      	movs	r3, #1
 80027c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80027ca:	463b      	mov	r3, r7
 80027cc:	4619      	mov	r1, r3
 80027ce:	4806      	ldr	r0, [pc, #24]	@ (80027e8 <MX_ADC2_Init+0x98>)
 80027d0:	f001 ff20 	bl	8004614 <HAL_ADC_ConfigChannel>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80027da:	f001 f8a1 	bl	8003920 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000280 	.word	0x20000280
 80027ec:	40012100 	.word	0x40012100
 80027f0:	0f000001 	.word	0x0f000001

080027f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027f8:	4b12      	ldr	r3, [pc, #72]	@ (8002844 <MX_I2C1_Init+0x50>)
 80027fa:	4a13      	ldr	r2, [pc, #76]	@ (8002848 <MX_I2C1_Init+0x54>)
 80027fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80027fe:	4b11      	ldr	r3, [pc, #68]	@ (8002844 <MX_I2C1_Init+0x50>)
 8002800:	4a12      	ldr	r2, [pc, #72]	@ (800284c <MX_I2C1_Init+0x58>)
 8002802:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002804:	4b0f      	ldr	r3, [pc, #60]	@ (8002844 <MX_I2C1_Init+0x50>)
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800280a:	4b0e      	ldr	r3, [pc, #56]	@ (8002844 <MX_I2C1_Init+0x50>)
 800280c:	2200      	movs	r2, #0
 800280e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002810:	4b0c      	ldr	r3, [pc, #48]	@ (8002844 <MX_I2C1_Init+0x50>)
 8002812:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002816:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002818:	4b0a      	ldr	r3, [pc, #40]	@ (8002844 <MX_I2C1_Init+0x50>)
 800281a:	2200      	movs	r2, #0
 800281c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800281e:	4b09      	ldr	r3, [pc, #36]	@ (8002844 <MX_I2C1_Init+0x50>)
 8002820:	2200      	movs	r2, #0
 8002822:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002824:	4b07      	ldr	r3, [pc, #28]	@ (8002844 <MX_I2C1_Init+0x50>)
 8002826:	2200      	movs	r2, #0
 8002828:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800282a:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <MX_I2C1_Init+0x50>)
 800282c:	2200      	movs	r2, #0
 800282e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002830:	4804      	ldr	r0, [pc, #16]	@ (8002844 <MX_I2C1_Init+0x50>)
 8002832:	f002 fc99 	bl	8005168 <HAL_I2C_Init>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800283c:	f001 f870 	bl	8003920 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}
 8002844:	200002c8 	.word	0x200002c8
 8002848:	40005400 	.word	0x40005400
 800284c:	000186a0 	.word	0x000186a0

08002850 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b096      	sub	sp, #88	@ 0x58
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002856:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	605a      	str	r2, [r3, #4]
 8002860:	609a      	str	r2, [r3, #8]
 8002862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002864:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800286e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	605a      	str	r2, [r3, #4]
 8002878:	609a      	str	r2, [r3, #8]
 800287a:	60da      	str	r2, [r3, #12]
 800287c:	611a      	str	r2, [r3, #16]
 800287e:	615a      	str	r2, [r3, #20]
 8002880:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	2220      	movs	r2, #32
 8002886:	2100      	movs	r1, #0
 8002888:	4618      	mov	r0, r3
 800288a:	f00b f920 	bl	800dace <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800288e:	4b3d      	ldr	r3, [pc, #244]	@ (8002984 <MX_TIM1_Init+0x134>)
 8002890:	4a3d      	ldr	r2, [pc, #244]	@ (8002988 <MX_TIM1_Init+0x138>)
 8002892:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8002894:	4b3b      	ldr	r3, [pc, #236]	@ (8002984 <MX_TIM1_Init+0x134>)
 8002896:	22a0      	movs	r2, #160	@ 0xa0
 8002898:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800289a:	4b3a      	ldr	r3, [pc, #232]	@ (8002984 <MX_TIM1_Init+0x134>)
 800289c:	2200      	movs	r2, #0
 800289e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80028a0:	4b38      	ldr	r3, [pc, #224]	@ (8002984 <MX_TIM1_Init+0x134>)
 80028a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a8:	4b36      	ldr	r3, [pc, #216]	@ (8002984 <MX_TIM1_Init+0x134>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028ae:	4b35      	ldr	r3, [pc, #212]	@ (8002984 <MX_TIM1_Init+0x134>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028b4:	4b33      	ldr	r3, [pc, #204]	@ (8002984 <MX_TIM1_Init+0x134>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028ba:	4832      	ldr	r0, [pc, #200]	@ (8002984 <MX_TIM1_Init+0x134>)
 80028bc:	f004 f8f8 	bl	8006ab0 <HAL_TIM_Base_Init>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80028c6:	f001 f82b 	bl	8003920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028d0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80028d4:	4619      	mov	r1, r3
 80028d6:	482b      	ldr	r0, [pc, #172]	@ (8002984 <MX_TIM1_Init+0x134>)
 80028d8:	f004 ffc8 	bl	800786c <HAL_TIM_ConfigClockSource>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80028e2:	f001 f81d 	bl	8003920 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80028e6:	4827      	ldr	r0, [pc, #156]	@ (8002984 <MX_TIM1_Init+0x134>)
 80028e8:	f004 f99a 	bl	8006c20 <HAL_TIM_PWM_Init>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80028f2:	f001 f815 	bl	8003920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f6:	2300      	movs	r3, #0
 80028f8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002902:	4619      	mov	r1, r3
 8002904:	481f      	ldr	r0, [pc, #124]	@ (8002984 <MX_TIM1_Init+0x134>)
 8002906:	f005 fd2b 	bl	8008360 <HAL_TIMEx_MasterConfigSynchronization>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002910:	f001 f806 	bl	8003920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002914:	2360      	movs	r3, #96	@ 0x60
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800291c:	2300      	movs	r3, #0
 800291e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002920:	2300      	movs	r3, #0
 8002922:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002924:	2300      	movs	r3, #0
 8002926:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002928:	2300      	movs	r3, #0
 800292a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800292c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002930:	220c      	movs	r2, #12
 8002932:	4619      	mov	r1, r3
 8002934:	4813      	ldr	r0, [pc, #76]	@ (8002984 <MX_TIM1_Init+0x134>)
 8002936:	f004 fed7 	bl	80076e8 <HAL_TIM_PWM_ConfigChannel>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002940:	f000 ffee 	bl	8003920 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002944:	2300      	movs	r3, #0
 8002946:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002948:	2300      	movs	r3, #0
 800294a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800294c:	2300      	movs	r3, #0
 800294e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002958:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800295c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800295e:	2300      	movs	r3, #0
 8002960:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	4619      	mov	r1, r3
 8002966:	4807      	ldr	r0, [pc, #28]	@ (8002984 <MX_TIM1_Init+0x134>)
 8002968:	f005 fd76 	bl	8008458 <HAL_TIMEx_ConfigBreakDeadTime>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8002972:	f000 ffd5 	bl	8003920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002976:	4803      	ldr	r0, [pc, #12]	@ (8002984 <MX_TIM1_Init+0x134>)
 8002978:	f001 fa0c 	bl	8003d94 <HAL_TIM_MspPostInit>

}
 800297c:	bf00      	nop
 800297e:	3758      	adds	r7, #88	@ 0x58
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	2000031c 	.word	0x2000031c
 8002988:	40010000 	.word	0x40010000

0800298c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08c      	sub	sp, #48	@ 0x30
 8002990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002992:	f107 030c 	add.w	r3, r7, #12
 8002996:	2224      	movs	r2, #36	@ 0x24
 8002998:	2100      	movs	r1, #0
 800299a:	4618      	mov	r0, r3
 800299c:	f00b f897 	bl	800dace <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029a0:	1d3b      	adds	r3, r7, #4
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029a8:	4b21      	ldr	r3, [pc, #132]	@ (8002a30 <MX_TIM2_Init+0xa4>)
 80029aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80029ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80029b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a30 <MX_TIM2_Init+0xa4>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a30 <MX_TIM2_Init+0xa4>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80029bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002a30 <MX_TIM2_Init+0xa4>)
 80029be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a30 <MX_TIM2_Init+0xa4>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ca:	4b19      	ldr	r3, [pc, #100]	@ (8002a30 <MX_TIM2_Init+0xa4>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029d0:	2303      	movs	r3, #3
 80029d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029d4:	2300      	movs	r3, #0
 80029d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029d8:	2301      	movs	r3, #1
 80029da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029dc:	2300      	movs	r3, #0
 80029de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80029e0:	230a      	movs	r3, #10
 80029e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029e4:	2300      	movs	r3, #0
 80029e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029e8:	2301      	movs	r3, #1
 80029ea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029ec:	2300      	movs	r3, #0
 80029ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80029f0:	230a      	movs	r3, #10
 80029f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80029f4:	f107 030c 	add.w	r3, r7, #12
 80029f8:	4619      	mov	r1, r3
 80029fa:	480d      	ldr	r0, [pc, #52]	@ (8002a30 <MX_TIM2_Init+0xa4>)
 80029fc:	f004 fbb4 	bl	8007168 <HAL_TIM_Encoder_Init>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002a06:	f000 ff8b 	bl	8003920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	4619      	mov	r1, r3
 8002a16:	4806      	ldr	r0, [pc, #24]	@ (8002a30 <MX_TIM2_Init+0xa4>)
 8002a18:	f005 fca2 	bl	8008360 <HAL_TIMEx_MasterConfigSynchronization>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002a22:	f000 ff7d 	bl	8003920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a26:	bf00      	nop
 8002a28:	3730      	adds	r7, #48	@ 0x30
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000364 	.word	0x20000364

08002a34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08c      	sub	sp, #48	@ 0x30
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a3a:	f107 030c 	add.w	r3, r7, #12
 8002a3e:	2224      	movs	r2, #36	@ 0x24
 8002a40:	2100      	movs	r1, #0
 8002a42:	4618      	mov	r0, r3
 8002a44:	f00b f843 	bl	800dace <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a48:	1d3b      	adds	r3, r7, #4
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a50:	4b20      	ldr	r3, [pc, #128]	@ (8002ad4 <MX_TIM3_Init+0xa0>)
 8002a52:	4a21      	ldr	r2, [pc, #132]	@ (8002ad8 <MX_TIM3_Init+0xa4>)
 8002a54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a56:	4b1f      	ldr	r3, [pc, #124]	@ (8002ad4 <MX_TIM3_Init+0xa0>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad4 <MX_TIM3_Init+0xa0>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a62:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad4 <MX_TIM3_Init+0xa0>)
 8002a64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad4 <MX_TIM3_Init+0xa0>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a70:	4b18      	ldr	r3, [pc, #96]	@ (8002ad4 <MX_TIM3_Init+0xa0>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a76:	2303      	movs	r3, #3
 8002a78:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002a86:	230a      	movs	r3, #10
 8002a88:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a92:	2300      	movs	r3, #0
 8002a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 8002a96:	230a      	movs	r3, #10
 8002a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002a9a:	f107 030c 	add.w	r3, r7, #12
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	480c      	ldr	r0, [pc, #48]	@ (8002ad4 <MX_TIM3_Init+0xa0>)
 8002aa2:	f004 fb61 	bl	8007168 <HAL_TIM_Encoder_Init>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002aac:	f000 ff38 	bl	8003920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	4619      	mov	r1, r3
 8002abc:	4805      	ldr	r0, [pc, #20]	@ (8002ad4 <MX_TIM3_Init+0xa0>)
 8002abe:	f005 fc4f 	bl	8008360 <HAL_TIMEx_MasterConfigSynchronization>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002ac8:	f000 ff2a 	bl	8003920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002acc:	bf00      	nop
 8002ace:	3730      	adds	r7, #48	@ 0x30
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	200003ac 	.word	0x200003ac
 8002ad8:	40000400 	.word	0x40000400

08002adc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	@ 0x28
 8002ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ae2:	f107 0318 	add.w	r3, r7, #24
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	605a      	str	r2, [r3, #4]
 8002aec:	609a      	str	r2, [r3, #8]
 8002aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002af0:	f107 0310 	add.w	r3, r7, #16
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002afa:	463b      	mov	r3, r7
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b06:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb4 <MX_TIM4_Init+0xd8>)
 8002b08:	4a2b      	ldr	r2, [pc, #172]	@ (8002bb8 <MX_TIM4_Init+0xdc>)
 8002b0a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 8002b0c:	4b29      	ldr	r3, [pc, #164]	@ (8002bb4 <MX_TIM4_Init+0xd8>)
 8002b0e:	220f      	movs	r2, #15
 8002b10:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b12:	4b28      	ldr	r3, [pc, #160]	@ (8002bb4 <MX_TIM4_Init+0xd8>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002b18:	4b26      	ldr	r3, [pc, #152]	@ (8002bb4 <MX_TIM4_Init+0xd8>)
 8002b1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b1e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b20:	4b24      	ldr	r3, [pc, #144]	@ (8002bb4 <MX_TIM4_Init+0xd8>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b26:	4b23      	ldr	r3, [pc, #140]	@ (8002bb4 <MX_TIM4_Init+0xd8>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b2c:	4821      	ldr	r0, [pc, #132]	@ (8002bb4 <MX_TIM4_Init+0xd8>)
 8002b2e:	f003 ffbf 	bl	8006ab0 <HAL_TIM_Base_Init>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8002b38:	f000 fef2 	bl	8003920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b40:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b42:	f107 0318 	add.w	r3, r7, #24
 8002b46:	4619      	mov	r1, r3
 8002b48:	481a      	ldr	r0, [pc, #104]	@ (8002bb4 <MX_TIM4_Init+0xd8>)
 8002b4a:	f004 fe8f 	bl	800786c <HAL_TIM_ConfigClockSource>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002b54:	f000 fee4 	bl	8003920 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002b58:	4816      	ldr	r0, [pc, #88]	@ (8002bb4 <MX_TIM4_Init+0xd8>)
 8002b5a:	f004 f983 	bl	8006e64 <HAL_TIM_IC_Init>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002b64:	f000 fedc 	bl	8003920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b70:	f107 0310 	add.w	r3, r7, #16
 8002b74:	4619      	mov	r1, r3
 8002b76:	480f      	ldr	r0, [pc, #60]	@ (8002bb4 <MX_TIM4_Init+0xd8>)
 8002b78:	f005 fbf2 	bl	8008360 <HAL_TIMEx_MasterConfigSynchronization>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8002b82:	f000 fecd 	bl	8003920 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002b86:	230a      	movs	r3, #10
 8002b88:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002b96:	463b      	mov	r3, r7
 8002b98:	2200      	movs	r2, #0
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4805      	ldr	r0, [pc, #20]	@ (8002bb4 <MX_TIM4_Init+0xd8>)
 8002b9e:	f004 fd07 	bl	80075b0 <HAL_TIM_IC_ConfigChannel>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8002ba8:	f000 feba 	bl	8003920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002bac:	bf00      	nop
 8002bae:	3728      	adds	r7, #40	@ 0x28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	200003f4 	.word	0x200003f4
 8002bb8:	40000800 	.word	0x40000800

08002bbc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc2:	463b      	mov	r3, r7
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002bca:	4b15      	ldr	r3, [pc, #84]	@ (8002c20 <MX_TIM6_Init+0x64>)
 8002bcc:	4a15      	ldr	r2, [pc, #84]	@ (8002c24 <MX_TIM6_Init+0x68>)
 8002bce:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 8002bd0:	4b13      	ldr	r3, [pc, #76]	@ (8002c20 <MX_TIM6_Init+0x64>)
 8002bd2:	220f      	movs	r2, #15
 8002bd4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd6:	4b12      	ldr	r3, [pc, #72]	@ (8002c20 <MX_TIM6_Init+0x64>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002bdc:	4b10      	ldr	r3, [pc, #64]	@ (8002c20 <MX_TIM6_Init+0x64>)
 8002bde:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002be2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002be4:	4b0e      	ldr	r3, [pc, #56]	@ (8002c20 <MX_TIM6_Init+0x64>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002bea:	480d      	ldr	r0, [pc, #52]	@ (8002c20 <MX_TIM6_Init+0x64>)
 8002bec:	f003 ff60 	bl	8006ab0 <HAL_TIM_Base_Init>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002bf6:	f000 fe93 	bl	8003920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c02:	463b      	mov	r3, r7
 8002c04:	4619      	mov	r1, r3
 8002c06:	4806      	ldr	r0, [pc, #24]	@ (8002c20 <MX_TIM6_Init+0x64>)
 8002c08:	f005 fbaa 	bl	8008360 <HAL_TIMEx_MasterConfigSynchronization>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002c12:	f000 fe85 	bl	8003920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	2000043c 	.word	0x2000043c
 8002c24:	40001000 	.word	0x40001000

08002c28 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b096      	sub	sp, #88	@ 0x58
 8002c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c2e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	605a      	str	r2, [r3, #4]
 8002c38:	609a      	str	r2, [r3, #8]
 8002c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c3c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	609a      	str	r2, [r3, #8]
 8002c52:	60da      	str	r2, [r3, #12]
 8002c54:	611a      	str	r2, [r3, #16]
 8002c56:	615a      	str	r2, [r3, #20]
 8002c58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	2100      	movs	r1, #0
 8002c60:	4618      	mov	r0, r3
 8002c62:	f00a ff34 	bl	800dace <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002c66:	4b43      	ldr	r3, [pc, #268]	@ (8002d74 <MX_TIM8_Init+0x14c>)
 8002c68:	4a43      	ldr	r2, [pc, #268]	@ (8002d78 <MX_TIM8_Init+0x150>)
 8002c6a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002c6c:	4b41      	ldr	r3, [pc, #260]	@ (8002d74 <MX_TIM8_Init+0x14c>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c72:	4b40      	ldr	r3, [pc, #256]	@ (8002d74 <MX_TIM8_Init+0x14c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8002c78:	4b3e      	ldr	r3, [pc, #248]	@ (8002d74 <MX_TIM8_Init+0x14c>)
 8002c7a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002c7e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c80:	4b3c      	ldr	r3, [pc, #240]	@ (8002d74 <MX_TIM8_Init+0x14c>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002c86:	4b3b      	ldr	r3, [pc, #236]	@ (8002d74 <MX_TIM8_Init+0x14c>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c8c:	4b39      	ldr	r3, [pc, #228]	@ (8002d74 <MX_TIM8_Init+0x14c>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002c92:	4838      	ldr	r0, [pc, #224]	@ (8002d74 <MX_TIM8_Init+0x14c>)
 8002c94:	f003 ff0c 	bl	8006ab0 <HAL_TIM_Base_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002c9e:	f000 fe3f 	bl	8003920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ca2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002ca8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002cac:	4619      	mov	r1, r3
 8002cae:	4831      	ldr	r0, [pc, #196]	@ (8002d74 <MX_TIM8_Init+0x14c>)
 8002cb0:	f004 fddc 	bl	800786c <HAL_TIM_ConfigClockSource>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002cba:	f000 fe31 	bl	8003920 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002cbe:	482d      	ldr	r0, [pc, #180]	@ (8002d74 <MX_TIM8_Init+0x14c>)
 8002cc0:	f003 ffae 	bl	8006c20 <HAL_TIM_PWM_Init>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002cca:	f000 fe29 	bl	8003920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002cd6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4825      	ldr	r0, [pc, #148]	@ (8002d74 <MX_TIM8_Init+0x14c>)
 8002cde:	f005 fb3f 	bl	8008360 <HAL_TIMEx_MasterConfigSynchronization>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002ce8:	f000 fe1a 	bl	8003920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cec:	2360      	movs	r3, #96	@ 0x60
 8002cee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d00:	2300      	movs	r3, #0
 8002d02:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d04:	2300      	movs	r3, #0
 8002d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4818      	ldr	r0, [pc, #96]	@ (8002d74 <MX_TIM8_Init+0x14c>)
 8002d12:	f004 fce9 	bl	80076e8 <HAL_TIM_PWM_ConfigChannel>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002d1c:	f000 fe00 	bl	8003920 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d24:	2204      	movs	r2, #4
 8002d26:	4619      	mov	r1, r3
 8002d28:	4812      	ldr	r0, [pc, #72]	@ (8002d74 <MX_TIM8_Init+0x14c>)
 8002d2a:	f004 fcdd 	bl	80076e8 <HAL_TIM_PWM_ConfigChannel>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002d34:	f000 fdf4 	bl	8003920 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d40:	2300      	movs	r3, #0
 8002d42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d52:	2300      	movs	r3, #0
 8002d54:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002d56:	1d3b      	adds	r3, r7, #4
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4806      	ldr	r0, [pc, #24]	@ (8002d74 <MX_TIM8_Init+0x14c>)
 8002d5c:	f005 fb7c 	bl	8008458 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8002d66:	f000 fddb 	bl	8003920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002d6a:	bf00      	nop
 8002d6c:	3758      	adds	r7, #88	@ 0x58
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000484 	.word	0x20000484
 8002d78:	40010400 	.word	0x40010400

08002d7c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d80:	4b11      	ldr	r3, [pc, #68]	@ (8002dc8 <MX_USART3_UART_Init+0x4c>)
 8002d82:	4a12      	ldr	r2, [pc, #72]	@ (8002dcc <MX_USART3_UART_Init+0x50>)
 8002d84:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002d86:	4b10      	ldr	r3, [pc, #64]	@ (8002dc8 <MX_USART3_UART_Init+0x4c>)
 8002d88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d8c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc8 <MX_USART3_UART_Init+0x4c>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002d94:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc8 <MX_USART3_UART_Init+0x4c>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <MX_USART3_UART_Init+0x4c>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002da0:	4b09      	ldr	r3, [pc, #36]	@ (8002dc8 <MX_USART3_UART_Init+0x4c>)
 8002da2:	220c      	movs	r2, #12
 8002da4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002da6:	4b08      	ldr	r3, [pc, #32]	@ (8002dc8 <MX_USART3_UART_Init+0x4c>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dac:	4b06      	ldr	r3, [pc, #24]	@ (8002dc8 <MX_USART3_UART_Init+0x4c>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002db2:	4805      	ldr	r0, [pc, #20]	@ (8002dc8 <MX_USART3_UART_Init+0x4c>)
 8002db4:	f005 fbb6 	bl	8008524 <HAL_UART_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002dbe:	f000 fdaf 	bl	8003920 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	200004cc 	.word	0x200004cc
 8002dcc:	40004800 	.word	0x40004800

08002dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08a      	sub	sp, #40	@ 0x28
 8002dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd6:	f107 0314 	add.w	r3, r7, #20
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	609a      	str	r2, [r3, #8]
 8002de2:	60da      	str	r2, [r3, #12]
 8002de4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	4b3e      	ldr	r3, [pc, #248]	@ (8002ee4 <MX_GPIO_Init+0x114>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dee:	4a3d      	ldr	r2, [pc, #244]	@ (8002ee4 <MX_GPIO_Init+0x114>)
 8002df0:	f043 0310 	orr.w	r3, r3, #16
 8002df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002df6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ee4 <MX_GPIO_Init+0x114>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	4b37      	ldr	r3, [pc, #220]	@ (8002ee4 <MX_GPIO_Init+0x114>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0a:	4a36      	ldr	r2, [pc, #216]	@ (8002ee4 <MX_GPIO_Init+0x114>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e12:	4b34      	ldr	r3, [pc, #208]	@ (8002ee4 <MX_GPIO_Init+0x114>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	4b30      	ldr	r3, [pc, #192]	@ (8002ee4 <MX_GPIO_Init+0x114>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e26:	4a2f      	ldr	r2, [pc, #188]	@ (8002ee4 <MX_GPIO_Init+0x114>)
 8002e28:	f043 0308 	orr.w	r3, r3, #8
 8002e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e2e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ee4 <MX_GPIO_Init+0x114>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	60bb      	str	r3, [r7, #8]
 8002e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	607b      	str	r3, [r7, #4]
 8002e3e:	4b29      	ldr	r3, [pc, #164]	@ (8002ee4 <MX_GPIO_Init+0x114>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e42:	4a28      	ldr	r2, [pc, #160]	@ (8002ee4 <MX_GPIO_Init+0x114>)
 8002e44:	f043 0304 	orr.w	r3, r3, #4
 8002e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e4a:	4b26      	ldr	r3, [pc, #152]	@ (8002ee4 <MX_GPIO_Init+0x114>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	607b      	str	r3, [r7, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	4b22      	ldr	r3, [pc, #136]	@ (8002ee4 <MX_GPIO_Init+0x114>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5e:	4a21      	ldr	r2, [pc, #132]	@ (8002ee4 <MX_GPIO_Init+0x114>)
 8002e60:	f043 0302 	orr.w	r3, r3, #2
 8002e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e66:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee4 <MX_GPIO_Init+0x114>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	603b      	str	r3, [r7, #0]
 8002e70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8002e72:	2200      	movs	r2, #0
 8002e74:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8002e78:	481b      	ldr	r0, [pc, #108]	@ (8002ee8 <MX_GPIO_Init+0x118>)
 8002e7a:	f002 f941 	bl	8005100 <HAL_GPIO_WritePin>
                          |TRIG_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	213c      	movs	r1, #60	@ 0x3c
 8002e82:	481a      	ldr	r0, [pc, #104]	@ (8002eec <MX_GPIO_Init+0x11c>)
 8002e84:	f002 f93c 	bl	8005100 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           TRIG_Pin LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8002e88:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002e8c:	617b      	str	r3, [r7, #20]
                          |TRIG_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e96:	2300      	movs	r3, #0
 8002e98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e9a:	f107 0314 	add.w	r3, r7, #20
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4811      	ldr	r0, [pc, #68]	@ (8002ee8 <MX_GPIO_Init+0x118>)
 8002ea2:	f001 ff79 	bl	8004d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8002ea6:	233c      	movs	r3, #60	@ 0x3c
 8002ea8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb6:	f107 0314 	add.w	r3, r7, #20
 8002eba:	4619      	mov	r1, r3
 8002ebc:	480b      	ldr	r0, [pc, #44]	@ (8002eec <MX_GPIO_Init+0x11c>)
 8002ebe:	f001 ff6b 	bl	8004d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ec2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ed0:	f107 0314 	add.w	r3, r7, #20
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4806      	ldr	r0, [pc, #24]	@ (8002ef0 <MX_GPIO_Init+0x120>)
 8002ed8:	f001 ff5e 	bl	8004d98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002edc:	bf00      	nop
 8002ede:	3728      	adds	r7, #40	@ 0x28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40020000 	.word	0x40020000
 8002ef0:	40020c00 	.word	0x40020c00

08002ef4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//Interrupt Serial callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	6078      	str	r0, [r7, #4]
	//prevent unused argument
	UNUSED(huart);
	 snprintf(buf,sizeof(buf),"%5.2f",g_distanceUS);
 8002efc:	4b16      	ldr	r3, [pc, #88]	@ (8002f58 <HAL_UART_RxCpltCallback+0x64>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fd fb21 	bl	8000548 <__aeabi_f2d>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	e9cd 2300 	strd	r2, r3, [sp]
 8002f0e:	4a13      	ldr	r2, [pc, #76]	@ (8002f5c <HAL_UART_RxCpltCallback+0x68>)
 8002f10:	2105      	movs	r1, #5
 8002f12:	4813      	ldr	r0, [pc, #76]	@ (8002f60 <HAL_UART_RxCpltCallback+0x6c>)
 8002f14:	f00a fd64 	bl	800d9e0 <sniprintf>
	 if (strncmp(aRxBuffer, "RUSD",4) == 0)
 8002f18:	2204      	movs	r2, #4
 8002f1a:	4912      	ldr	r1, [pc, #72]	@ (8002f64 <HAL_UART_RxCpltCallback+0x70>)
 8002f1c:	4812      	ldr	r0, [pc, #72]	@ (8002f68 <HAL_UART_RxCpltCallback+0x74>)
 8002f1e:	f00a fdde 	bl	800dade <strncmp>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d106      	bne.n	8002f36 <HAL_UART_RxCpltCallback+0x42>
	   {
		HAL_UART_Transmit(&huart3, (uint8_t*)buf,5,0XFFFF);
 8002f28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f2c:	2205      	movs	r2, #5
 8002f2e:	490c      	ldr	r1, [pc, #48]	@ (8002f60 <HAL_UART_RxCpltCallback+0x6c>)
 8002f30:	480e      	ldr	r0, [pc, #56]	@ (8002f6c <HAL_UART_RxCpltCallback+0x78>)
 8002f32:	f005 fb47 	bl	80085c4 <HAL_UART_Transmit>
	    }
	//HAL_UART_Transmit(&huart3,(uint8_t *)aRxBuffer,4,0xFFFF);
	 if(flagReceived !=1){
 8002f36:	4b0e      	ldr	r3, [pc, #56]	@ (8002f70 <HAL_UART_RxCpltCallback+0x7c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d007      	beq.n	8002f4e <HAL_UART_RxCpltCallback+0x5a>
			flagReceived=1;
 8002f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f70 <HAL_UART_RxCpltCallback+0x7c>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	601a      	str	r2, [r3, #0]
			 HAL_UART_Receive_IT(&huart3,(uint8_t *)aRxBuffer,RECEIVE_BUFFER_SIZE);
 8002f44:	2204      	movs	r2, #4
 8002f46:	4908      	ldr	r1, [pc, #32]	@ (8002f68 <HAL_UART_RxCpltCallback+0x74>)
 8002f48:	4808      	ldr	r0, [pc, #32]	@ (8002f6c <HAL_UART_RxCpltCallback+0x78>)
 8002f4a:	f005 fbc6 	bl	80086da <HAL_UART_Receive_IT>

	 }
	// servo_pwm  = atoi(aRxBuffer);
	//memset(aRxBuffer,0,sizeof(aRxBuffer));

}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000534 	.word	0x20000534
 8002f5c:	08010290 	.word	0x08010290
 8002f60:	200005e0 	.word	0x200005e0
 8002f64:	08010298 	.word	0x08010298
 8002f68:	200005dc 	.word	0x200005dc
 8002f6c:	200004cc 	.word	0x200004cc
 8002f70:	2000022c 	.word	0x2000022c
 8002f74:	00000000 	.word	0x00000000

08002f78 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	//timer 3 for the ultrasonic echo
if(htim==&htim4)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a41      	ldr	r2, [pc, #260]	@ (8003088 <HAL_TIM_IC_CaptureCallback+0x110>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d174      	bne.n	8003072 <HAL_TIM_IC_CaptureCallback+0xfa>
{
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12)==1)//rising edge
 8002f88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002f8c:	483f      	ldr	r0, [pc, #252]	@ (800308c <HAL_TIM_IC_CaptureCallback+0x114>)
 8002f8e:	f002 f89f 	bl	80050d0 <HAL_GPIO_ReadPin>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d108      	bne.n	8002faa <HAL_TIM_IC_CaptureCallback+0x32>
	{
		tc1=HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8002f98:	2100      	movs	r1, #0
 8002f9a:	483b      	ldr	r0, [pc, #236]	@ (8003088 <HAL_TIM_IC_CaptureCallback+0x110>)
 8002f9c:	f004 fd2e 	bl	80079fc <HAL_TIM_ReadCapturedValue>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	4b3a      	ldr	r3, [pc, #232]	@ (8003090 <HAL_TIM_IC_CaptureCallback+0x118>)
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	e01e      	b.n	8002fe8 <HAL_TIM_IC_CaptureCallback+0x70>

	}
	else
	{
		tc2=HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8002faa:	2100      	movs	r1, #0
 8002fac:	4836      	ldr	r0, [pc, #216]	@ (8003088 <HAL_TIM_IC_CaptureCallback+0x110>)
 8002fae:	f004 fd25 	bl	80079fc <HAL_TIM_ReadCapturedValue>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	4b37      	ldr	r3, [pc, #220]	@ (8003094 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002fb8:	601a      	str	r2, [r3, #0]
		if(tc2>tc1)
 8002fba:	4b36      	ldr	r3, [pc, #216]	@ (8003094 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	4b34      	ldr	r3, [pc, #208]	@ (8003090 <HAL_TIM_IC_CaptureCallback+0x118>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	dd07      	ble.n	8002fd6 <HAL_TIM_IC_CaptureCallback+0x5e>
			echo = (tc2-tc1);
 8002fc6:	4b33      	ldr	r3, [pc, #204]	@ (8003094 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	4b31      	ldr	r3, [pc, #196]	@ (8003090 <HAL_TIM_IC_CaptureCallback+0x118>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	4a31      	ldr	r2, [pc, #196]	@ (8003098 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002fd2:	6013      	str	r3, [r2, #0]
 8002fd4:	e008      	b.n	8002fe8 <HAL_TIM_IC_CaptureCallback+0x70>
		else //tc2 overflow
			echo=((65536-tc1)+tc2);
 8002fd6:	4b2e      	ldr	r3, [pc, #184]	@ (8003090 <HAL_TIM_IC_CaptureCallback+0x118>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8002fde:	4b2d      	ldr	r3, [pc, #180]	@ (8003094 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	4a2c      	ldr	r2, [pc, #176]	@ (8003098 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002fe6:	6013      	str	r3, [r2, #0]
	}g_distanceUS = (tc2 > tc1 ? (tc2 - tc1) : (65535 - tc1 + tc2)) * 0.034 / 2;
 8002fe8:	4b2a      	ldr	r3, [pc, #168]	@ (8003094 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b28      	ldr	r3, [pc, #160]	@ (8003090 <HAL_TIM_IC_CaptureCallback+0x118>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	dd08      	ble.n	8003006 <HAL_TIM_IC_CaptureCallback+0x8e>
 8002ff4:	4b27      	ldr	r3, [pc, #156]	@ (8003094 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	4b25      	ldr	r3, [pc, #148]	@ (8003090 <HAL_TIM_IC_CaptureCallback+0x118>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd fa90 	bl	8000524 <__aeabi_i2d>
 8003004:	e00a      	b.n	800301c <HAL_TIM_IC_CaptureCallback+0xa4>
 8003006:	4b22      	ldr	r3, [pc, #136]	@ (8003090 <HAL_TIM_IC_CaptureCallback+0x118>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 800300e:	33ff      	adds	r3, #255	@ 0xff
 8003010:	4a20      	ldr	r2, [pc, #128]	@ (8003094 <HAL_TIM_IC_CaptureCallback+0x11c>)
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	4413      	add	r3, r2
 8003016:	4618      	mov	r0, r3
 8003018:	f7fd fa84 	bl	8000524 <__aeabi_i2d>
 800301c:	a318      	add	r3, pc, #96	@ (adr r3, 8003080 <HAL_TIM_IC_CaptureCallback+0x108>)
 800301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003022:	f7fd fae9 	bl	80005f8 <__aeabi_dmul>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003036:	f7fd fc09 	bl	800084c <__aeabi_ddiv>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	4610      	mov	r0, r2
 8003040:	4619      	mov	r1, r3
 8003042:	f7fd fdd1 	bl	8000be8 <__aeabi_d2f>
 8003046:	4603      	mov	r3, r0
 8003048:	4a14      	ldr	r2, [pc, #80]	@ (800309c <HAL_TIM_IC_CaptureCallback+0x124>)
 800304a:	6013      	str	r3, [r2, #0]
	if(g_distanceUS>400)
 800304c:	4b13      	ldr	r3, [pc, #76]	@ (800309c <HAL_TIM_IC_CaptureCallback+0x124>)
 800304e:	edd3 7a00 	vldr	s15, [r3]
 8003052:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80030a0 <HAL_TIM_IC_CaptureCallback+0x128>
 8003056:	eef4 7ac7 	vcmpe.f32	s15, s14
 800305a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800305e:	dd04      	ble.n	800306a <HAL_TIM_IC_CaptureCallback+0xf2>
	{
		g_distanceUS=last_valid;
 8003060:	4b10      	ldr	r3, [pc, #64]	@ (80030a4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a0d      	ldr	r2, [pc, #52]	@ (800309c <HAL_TIM_IC_CaptureCallback+0x124>)
 8003066:	6013      	str	r3, [r2, #0]
	else{
		last_valid=g_distanceUS;
	}
}

}
 8003068:	e003      	b.n	8003072 <HAL_TIM_IC_CaptureCallback+0xfa>
		last_valid=g_distanceUS;
 800306a:	4b0c      	ldr	r3, [pc, #48]	@ (800309c <HAL_TIM_IC_CaptureCallback+0x124>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a0d      	ldr	r2, [pc, #52]	@ (80030a4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8003070:	6013      	str	r3, [r2, #0]
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	f3af 8000 	nop.w
 8003080:	b020c49c 	.word	0xb020c49c
 8003084:	3fa16872 	.word	0x3fa16872
 8003088:	200003f4 	.word	0x200003f4
 800308c:	40020c00 	.word	0x40020c00
 8003090:	20000528 	.word	0x20000528
 8003094:	2000052c 	.word	0x2000052c
 8003098:	20000530 	.word	0x20000530
 800309c:	20000534 	.word	0x20000534
 80030a0:	43c80000 	.word	0x43c80000
 80030a4:	20000538 	.word	0x20000538

080030a8 <IR_Left_Read>:
void IR_Left_Read() {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 80030ac:	481e      	ldr	r0, [pc, #120]	@ (8003128 <IR_Left_Read+0x80>)
 80030ae:	f001 f913 	bl	80042d8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 10);
 80030b2:	210a      	movs	r1, #10
 80030b4:	481c      	ldr	r0, [pc, #112]	@ (8003128 <IR_Left_Read+0x80>)
 80030b6:	f001 fa14 	bl	80044e2 <HAL_ADC_PollForConversion>
	iDistanceL = HAL_ADC_GetValue(&hadc2);
 80030ba:	481b      	ldr	r0, [pc, #108]	@ (8003128 <IR_Left_Read+0x80>)
 80030bc:	f001 fa9c 	bl	80045f8 <HAL_ADC_GetValue>
 80030c0:	4603      	mov	r3, r0
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	4b19      	ldr	r3, [pc, #100]	@ (800312c <IR_Left_Read+0x84>)
 80030c6:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 80030c8:	4817      	ldr	r0, [pc, #92]	@ (8003128 <IR_Left_Read+0x80>)
 80030ca:	f001 f9d7 	bl	800447c <HAL_ADC_Stop>

//	filtered_irreading = (FILTER_ALPHA2 * iDistanceL) + ((1 - FILTER_ALPHA2) * filtered_irreading);
//	filtered_irreading_int = (int) filtered_irreading;
	//iDistanceL=(int)pow(10, -1.754*(log10((float) iDistanceL))+7.064);
	iDistanceL=(int)(iDistanceL*-4.286e-03)+2.189e+01;
 80030ce:	4b17      	ldr	r3, [pc, #92]	@ (800312c <IR_Left_Read+0x84>)
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd fa26 	bl	8000524 <__aeabi_i2d>
 80030d8:	a30f      	add	r3, pc, #60	@ (adr r3, 8003118 <IR_Left_Read+0x70>)
 80030da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030de:	f7fd fa8b 	bl	80005f8 <__aeabi_dmul>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4610      	mov	r0, r2
 80030e8:	4619      	mov	r1, r3
 80030ea:	f7fd fd35 	bl	8000b58 <__aeabi_d2iz>
 80030ee:	4603      	mov	r3, r0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd fa17 	bl	8000524 <__aeabi_i2d>
 80030f6:	a30a      	add	r3, pc, #40	@ (adr r3, 8003120 <IR_Left_Read+0x78>)
 80030f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fc:	f7fd f8c6 	bl	800028c <__adddf3>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4610      	mov	r0, r2
 8003106:	4619      	mov	r1, r3
 8003108:	f7fd fd4e 	bl	8000ba8 <__aeabi_d2uiz>
 800310c:	4603      	mov	r3, r0
 800310e:	b29a      	uxth	r2, r3
 8003110:	4b06      	ldr	r3, [pc, #24]	@ (800312c <IR_Left_Read+0x84>)
 8003112:	801a      	strh	r2, [r3, #0]
}
 8003114:	bf00      	nop
 8003116:	bd80      	pop	{r7, pc}
 8003118:	5d4a5df2 	.word	0x5d4a5df2
 800311c:	bf718e32 	.word	0xbf718e32
 8003120:	0a3d70a4 	.word	0x0a3d70a4
 8003124:	4035e3d7 	.word	0x4035e3d7
 8003128:	20000280 	.word	0x20000280
 800312c:	200005e6 	.word	0x200005e6

08003130 <IR_Right_Read>:

void IR_Right_Read() {
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8003134:	481e      	ldr	r0, [pc, #120]	@ (80031b0 <IR_Right_Read+0x80>)
 8003136:	f001 f8cf 	bl	80042d8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 800313a:	210a      	movs	r1, #10
 800313c:	481c      	ldr	r0, [pc, #112]	@ (80031b0 <IR_Right_Read+0x80>)
 800313e:	f001 f9d0 	bl	80044e2 <HAL_ADC_PollForConversion>
	iDistanceR = HAL_ADC_GetValue(&hadc1);
 8003142:	481b      	ldr	r0, [pc, #108]	@ (80031b0 <IR_Right_Read+0x80>)
 8003144:	f001 fa58 	bl	80045f8 <HAL_ADC_GetValue>
 8003148:	4603      	mov	r3, r0
 800314a:	b29a      	uxth	r2, r3
 800314c:	4b19      	ldr	r3, [pc, #100]	@ (80031b4 <IR_Right_Read+0x84>)
 800314e:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8003150:	4817      	ldr	r0, [pc, #92]	@ (80031b0 <IR_Right_Read+0x80>)
 8003152:	f001 f993 	bl	800447c <HAL_ADC_Stop>
	iDistanceR=(int)(iDistanceR*-4.286e-03)+2.189e+01;
 8003156:	4b17      	ldr	r3, [pc, #92]	@ (80031b4 <IR_Right_Read+0x84>)
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7fd f9e2 	bl	8000524 <__aeabi_i2d>
 8003160:	a30f      	add	r3, pc, #60	@ (adr r3, 80031a0 <IR_Right_Read+0x70>)
 8003162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003166:	f7fd fa47 	bl	80005f8 <__aeabi_dmul>
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4610      	mov	r0, r2
 8003170:	4619      	mov	r1, r3
 8003172:	f7fd fcf1 	bl	8000b58 <__aeabi_d2iz>
 8003176:	4603      	mov	r3, r0
 8003178:	4618      	mov	r0, r3
 800317a:	f7fd f9d3 	bl	8000524 <__aeabi_i2d>
 800317e:	a30a      	add	r3, pc, #40	@ (adr r3, 80031a8 <IR_Right_Read+0x78>)
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	f7fd f882 	bl	800028c <__adddf3>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4610      	mov	r0, r2
 800318e:	4619      	mov	r1, r3
 8003190:	f7fd fd0a 	bl	8000ba8 <__aeabi_d2uiz>
 8003194:	4603      	mov	r3, r0
 8003196:	b29a      	uxth	r2, r3
 8003198:	4b06      	ldr	r3, [pc, #24]	@ (80031b4 <IR_Right_Read+0x84>)
 800319a:	801a      	strh	r2, [r3, #0]
}
 800319c:	bf00      	nop
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	5d4a5df2 	.word	0x5d4a5df2
 80031a4:	bf718e32 	.word	0xbf718e32
 80031a8:	0a3d70a4 	.word	0x0a3d70a4
 80031ac:	4035e3d7 	.word	0x4035e3d7
 80031b0:	20000238 	.word	0x20000238
 80031b4:	200005e8 	.word	0x200005e8

080031b8 <Motor_Stop>:

void Motor_Stop()
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
	resetYaw();
 80031bc:	f7fe fbf8 	bl	80019b0 <resetYaw>
	  PID_Reset(&LMotorPID);
 80031c0:	4813      	ldr	r0, [pc, #76]	@ (8003210 <Motor_Stop+0x58>)
 80031c2:	f7fe fb53 	bl	800186c <PID_Reset>
	  PID_Reset(&RMotorPID);
 80031c6:	4813      	ldr	r0, [pc, #76]	@ (8003214 <Motor_Stop+0x5c>)
 80031c8:	f7fe fb50 	bl	800186c <PID_Reset>
	degree=0;
 80031cc:	4b12      	ldr	r3, [pc, #72]	@ (8003218 <Motor_Stop+0x60>)
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
	distanceTraveled=0;
 80031d4:	4b11      	ldr	r3, [pc, #68]	@ (800321c <Motor_Stop+0x64>)
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
    pwmValL = 0;
 80031dc:	4b10      	ldr	r3, [pc, #64]	@ (8003220 <Motor_Stop+0x68>)
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
    pwmValR = 0;
 80031e2:	4b10      	ldr	r3, [pc, #64]	@ (8003224 <Motor_Stop+0x6c>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValL); // Stop left motor
 80031e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003220 <Motor_Stop+0x68>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003228 <Motor_Stop+0x70>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmValR); // Stop right motor
 80031f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003224 <Motor_Stop+0x6c>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003228 <Motor_Stop+0x70>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	639a      	str	r2, [r3, #56]	@ 0x38
	set_servo_angle(Center);
 80031fc:	205f      	movs	r0, #95	@ 0x5f
 80031fe:	f7ff f911 	bl	8002424 <set_servo_angle>
	osDelay(1000);
 8003202:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003206:	f006 ff73 	bl	800a0f0 <osDelay>
	//reset_gyro_at_rest();
  //  count++;
}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	2000057c 	.word	0x2000057c
 8003214:	200005a4 	.word	0x200005a4
 8003218:	200005d4 	.word	0x200005d4
 800321c:	20000220 	.word	0x20000220
 8003220:	200005cc 	.word	0x200005cc
 8003224:	200005d0 	.word	0x200005d0
 8003228:	20000484 	.word	0x20000484

0800322c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  	  HAL_GPIO_TogglePin(GPIOE,LED3_Pin);
 8003234:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003238:	4803      	ldr	r0, [pc, #12]	@ (8003248 <StartDefaultTask+0x1c>)
 800323a:	f001 ff7a 	bl	8005132 <HAL_GPIO_TogglePin>
    osDelay(150);
 800323e:	2096      	movs	r0, #150	@ 0x96
 8003240:	f006 ff56 	bl	800a0f0 <osDelay>
	  	  HAL_GPIO_TogglePin(GPIOE,LED3_Pin);
 8003244:	bf00      	nop
 8003246:	e7f5      	b.n	8003234 <StartDefaultTask+0x8>
 8003248:	40021000 	.word	0x40021000

0800324c <StartOledTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOledTask */
void StartOledTask(void *argument)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b096      	sub	sp, #88	@ 0x58
 8003250:	af02      	add	r7, sp, #8
 8003252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOledTask */
	char text[16]={};
 8003254:	2300      	movs	r3, #0
 8003256:	643b      	str	r3, [r7, #64]	@ 0x40
 8003258:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	609a      	str	r2, [r3, #8]
	char temp[50]={};
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	f107 0310 	add.w	r3, r7, #16
 800326c:	222e      	movs	r2, #46	@ 0x2e
 800326e:	2100      	movs	r1, #0
 8003270:	4618      	mov	r0, r3
 8003272:	f00a fc2c 	bl	800dace <memset>
//	RMotorPID.setpoint = 1;

  /* Infinite loop */
  for(;;)
  {
		snprintf(text, sizeof(text), "DistanceIRR:%d m", iDistanceR);
 8003276:	4b37      	ldr	r3, [pc, #220]	@ (8003354 <StartOledTask+0x108>)
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800327e:	4a36      	ldr	r2, [pc, #216]	@ (8003358 <StartOledTask+0x10c>)
 8003280:	2110      	movs	r1, #16
 8003282:	f00a fbad 	bl	800d9e0 <sniprintf>
		OLED_ShowString(10, 40, text);
 8003286:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800328a:	461a      	mov	r2, r3
 800328c:	2128      	movs	r1, #40	@ 0x28
 800328e:	200a      	movs	r0, #10
 8003290:	f009 fd46 	bl	800cd20 <OLED_ShowString>
		snprintf(text, sizeof(text), "Distance:%.2f", g_distanceUS);
 8003294:	4b31      	ldr	r3, [pc, #196]	@ (800335c <StartOledTask+0x110>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f7fd f955 	bl	8000548 <__aeabi_f2d>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80032a6:	e9cd 2300 	strd	r2, r3, [sp]
 80032aa:	4a2d      	ldr	r2, [pc, #180]	@ (8003360 <StartOledTask+0x114>)
 80032ac:	2110      	movs	r1, #16
 80032ae:	f00a fb97 	bl	800d9e0 <sniprintf>
		  OLED_ShowString(10, 20, text);
 80032b2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80032b6:	461a      	mov	r2, r3
 80032b8:	2114      	movs	r1, #20
 80032ba:	200a      	movs	r0, #10
 80032bc:	f009 fd30 	bl	800cd20 <OLED_ShowString>
		  snprintf(text, sizeof(text), "degree :%5.2f", yaw);//BEFORE DEGREE
 80032c0:	4b28      	ldr	r3, [pc, #160]	@ (8003364 <StartOledTask+0x118>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fd f93f 	bl	8000548 <__aeabi_f2d>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80032d2:	e9cd 2300 	strd	r2, r3, [sp]
 80032d6:	4a24      	ldr	r2, [pc, #144]	@ (8003368 <StartOledTask+0x11c>)
 80032d8:	2110      	movs	r1, #16
 80032da:	f00a fb81 	bl	800d9e0 <sniprintf>
		  OLED_ShowString(10, 30, text);
 80032de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80032e2:	461a      	mov	r2, r3
 80032e4:	211e      	movs	r1, #30
 80032e6:	200a      	movs	r0, #10
 80032e8:	f009 fd1a 	bl	800cd20 <OLED_ShowString>
		  OLED_Refresh_Gram();
 80032ec:	f009 fba4 	bl	800ca38 <OLED_Refresh_Gram>
		  snprintf(text, sizeof(text), "Distance: %d m", Target_Distance);
 80032f0:	4b1e      	ldr	r3, [pc, #120]	@ (800336c <StartOledTask+0x120>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80032f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003370 <StartOledTask+0x124>)
 80032fa:	2110      	movs	r1, #16
 80032fc:	f00a fb70 	bl	800d9e0 <sniprintf>
		  OLED_ShowString(10, 10, text);
 8003300:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003304:	461a      	mov	r2, r3
 8003306:	210a      	movs	r1, #10
 8003308:	200a      	movs	r0, #10
 800330a:	f009 fd09 	bl	800cd20 <OLED_ShowString>
		  snprintf(text, sizeof(text), "DistanceIRL: %d m", iDistanceL);
 800330e:	4b19      	ldr	r3, [pc, #100]	@ (8003374 <StartOledTask+0x128>)
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8003316:	4a18      	ldr	r2, [pc, #96]	@ (8003378 <StartOledTask+0x12c>)
 8003318:	2110      	movs	r1, #16
 800331a:	f00a fb61 	bl	800d9e0 <sniprintf>
		  OLED_ShowString(10, 50, text);
 800331e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003322:	461a      	mov	r2, r3
 8003324:	2132      	movs	r1, #50	@ 0x32
 8003326:	200a      	movs	r0, #10
 8003328:	f009 fcfa 	bl	800cd20 <OLED_ShowString>
		  snprintf(temp,sizeof(temp),"%.5f\r\n",yaw);
 800332c:	4b0d      	ldr	r3, [pc, #52]	@ (8003364 <StartOledTask+0x118>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7fd f909 	bl	8000548 <__aeabi_f2d>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	f107 000c 	add.w	r0, r7, #12
 800333e:	e9cd 2300 	strd	r2, r3, [sp]
 8003342:	4a0e      	ldr	r2, [pc, #56]	@ (800337c <StartOledTask+0x130>)
 8003344:	2132      	movs	r1, #50	@ 0x32
 8003346:	f00a fb4b 	bl	800d9e0 <sniprintf>

    osDelay(200);
 800334a:	20c8      	movs	r0, #200	@ 0xc8
 800334c:	f006 fed0 	bl	800a0f0 <osDelay>
		snprintf(text, sizeof(text), "DistanceIRR:%d m", iDistanceR);
 8003350:	bf00      	nop
 8003352:	e790      	b.n	8003276 <StartOledTask+0x2a>
 8003354:	200005e8 	.word	0x200005e8
 8003358:	080102a0 	.word	0x080102a0
 800335c:	20000534 	.word	0x20000534
 8003360:	080102b4 	.word	0x080102b4
 8003364:	20000578 	.word	0x20000578
 8003368:	080102c4 	.word	0x080102c4
 800336c:	2000021c 	.word	0x2000021c
 8003370:	080102d4 	.word	0x080102d4
 8003374:	200005e6 	.word	0x200005e6
 8003378:	080102e4 	.word	0x080102e4
 800337c:	080102f8 	.word	0x080102f8

08003380 <Startsensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Startsensor */
void Startsensor(void *argument)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Startsensor */
  /* Infinite loop */
	HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_RESET);
 8003388:	2200      	movs	r2, #0
 800338a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800338e:	480f      	ldr	r0, [pc, #60]	@ (80033cc <Startsensor+0x4c>)
 8003390:	f001 feb6 	bl	8005100 <HAL_GPIO_WritePin>
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_SET);
 8003394:	2201      	movs	r2, #1
 8003396:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800339a:	480c      	ldr	r0, [pc, #48]	@ (80033cc <Startsensor+0x4c>)
 800339c:	f001 feb0 	bl	8005100 <HAL_GPIO_WritePin>
	delay_us(10);
 80033a0:	200a      	movs	r0, #10
 80033a2:	f7fe faeb 	bl	800197c <delay_us>
	HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_RESET);
 80033a6:	2200      	movs	r2, #0
 80033a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033ac:	4807      	ldr	r0, [pc, #28]	@ (80033cc <Startsensor+0x4c>)
 80033ae:	f001 fea7 	bl	8005100 <HAL_GPIO_WritePin>
	    //g_distanceUS = (tc2 > tc1 ? (tc2 - tc1) : (65535 - tc1 + tc2)) * 0.034 / 2; //echo/1000000.0f *343.0f/2.0f *100.0f equivalent
	osDelay(10);
 80033b2:	200a      	movs	r0, #10
 80033b4:	f006 fe9c 	bl	800a0f0 <osDelay>
	IR_Left_Read();
 80033b8:	f7ff fe76 	bl	80030a8 <IR_Left_Read>
	IR_Right_Read();
 80033bc:	f7ff feb8 	bl	8003130 <IR_Right_Read>
	osDelay(100);
 80033c0:	2064      	movs	r0, #100	@ 0x64
 80033c2:	f006 fe95 	bl	800a0f0 <osDelay>
	HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_SET);
 80033c6:	bf00      	nop
 80033c8:	e7e4      	b.n	8003394 <Startsensor+0x14>
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000

080033d0 <StartEncoderTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08a      	sub	sp, #40	@ 0x28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEncoderTask */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80033d8:	213c      	movs	r1, #60	@ 0x3c
 80033da:	48a1      	ldr	r0, [pc, #644]	@ (8003660 <StartEncoderTask+0x290>)
 80033dc:	f003 ff6a 	bl	80072b4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80033e0:	213c      	movs	r1, #60	@ 0x3c
 80033e2:	48a0      	ldr	r0, [pc, #640]	@ (8003664 <StartEncoderTask+0x294>)
 80033e4:	f003 ff66 	bl	80072b4 <HAL_TIM_Encoder_Start>

	int16_t cnt1L,cnt2L,diffL;
	int16_t cnt1R,cnt2R,diffR;
	uint32_t tick;
	cnt1L = __HAL_TIM_GET_COUNTER(&htim2);
 80033e8:	4b9d      	ldr	r3, [pc, #628]	@ (8003660 <StartEncoderTask+0x290>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
	cnt1R = __HAL_TIM_GET_COUNTER(&htim3);
 80033f0:	4b9c      	ldr	r3, [pc, #624]	@ (8003664 <StartEncoderTask+0x294>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f6:	847b      	strh	r3, [r7, #34]	@ 0x22
    tick = HAL_GetTick(); // in milliseconds
 80033f8:	f000 fefa 	bl	80041f0 <HAL_GetTick>
 80033fc:	61f8      	str	r0, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
	  if (HAL_GetTick() - tick > 10L) { // Checking per second
 80033fe:	f000 fef7 	bl	80041f0 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b0a      	cmp	r3, #10
 800340a:	f240 811e 	bls.w	800364a <StartEncoderTask+0x27a>
	              cnt2L = __HAL_TIM_GET_COUNTER(&htim2);
 800340e:	4b94      	ldr	r3, [pc, #592]	@ (8003660 <StartEncoderTask+0x290>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	837b      	strh	r3, [r7, #26]
	              cnt2R = __HAL_TIM_GET_COUNTER(&htim3);
 8003416:	4b93      	ldr	r3, [pc, #588]	@ (8003664 <StartEncoderTask+0x294>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	833b      	strh	r3, [r7, #24]

	              //Left
	              if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 800341e:	4b90      	ldr	r3, [pc, #576]	@ (8003660 <StartEncoderTask+0x290>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b10      	cmp	r3, #16
 800342a:	d114      	bne.n	8003456 <StartEncoderTask+0x86>
	            	  diffL = (cnt2L < cnt1L) ? (cnt1L - cnt2L) : ((65535 - cnt2L) + cnt1L);
 800342c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8003430:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003434:	429a      	cmp	r2, r3
 8003436:	da05      	bge.n	8003444 <StartEncoderTask+0x74>
 8003438:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800343a:	8b7b      	ldrh	r3, [r7, #26]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	b29b      	uxth	r3, r3
 8003440:	b21b      	sxth	r3, r3
 8003442:	e006      	b.n	8003452 <StartEncoderTask+0x82>
 8003444:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003446:	8b7b      	ldrh	r3, [r7, #26]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	b29b      	uxth	r3, r3
 800344c:	3b01      	subs	r3, #1
 800344e:	b29b      	uxth	r3, r3
 8003450:	b21b      	sxth	r3, r3
 8003452:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003454:	e013      	b.n	800347e <StartEncoderTask+0xae>
	              } else {
	            	  diffL = (cnt2L > cnt1L) ? (cnt2L - cnt1L) : ((65535 - cnt1L) + cnt2L);
 8003456:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800345a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800345e:	429a      	cmp	r2, r3
 8003460:	dd05      	ble.n	800346e <StartEncoderTask+0x9e>
 8003462:	8b7a      	ldrh	r2, [r7, #26]
 8003464:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	b29b      	uxth	r3, r3
 800346a:	b21b      	sxth	r3, r3
 800346c:	e006      	b.n	800347c <StartEncoderTask+0xac>
 800346e:	8b7a      	ldrh	r2, [r7, #26]
 8003470:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b01      	subs	r3, #1
 8003478:	b29b      	uxth	r3, r3
 800347a:	b21b      	sxth	r3, r3
 800347c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	              }

	              //Right
	              if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) {
 800347e:	4b79      	ldr	r3, [pc, #484]	@ (8003664 <StartEncoderTask+0x294>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b10      	cmp	r3, #16
 800348a:	d114      	bne.n	80034b6 <StartEncoderTask+0xe6>
	              	            	  diffR = (cnt2R < cnt1R) ? (cnt1R - cnt2R) : ((65535 - cnt2R) + cnt1R);
 800348c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003490:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003494:	429a      	cmp	r2, r3
 8003496:	da05      	bge.n	80034a4 <StartEncoderTask+0xd4>
 8003498:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800349a:	8b3b      	ldrh	r3, [r7, #24]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	b29b      	uxth	r3, r3
 80034a0:	b21b      	sxth	r3, r3
 80034a2:	e006      	b.n	80034b2 <StartEncoderTask+0xe2>
 80034a4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80034a6:	8b3b      	ldrh	r3, [r7, #24]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	b21b      	sxth	r3, r3
 80034b2:	843b      	strh	r3, [r7, #32]
 80034b4:	e013      	b.n	80034de <StartEncoderTask+0x10e>
	              	              } else {
	              	            	  diffR = (cnt2R > cnt1R) ? (cnt2R - cnt1R) : ((65535 - cnt1R) + cnt2R);
 80034b6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80034ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80034be:	429a      	cmp	r2, r3
 80034c0:	dd05      	ble.n	80034ce <StartEncoderTask+0xfe>
 80034c2:	8b3a      	ldrh	r2, [r7, #24]
 80034c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	b21b      	sxth	r3, r3
 80034cc:	e006      	b.n	80034dc <StartEncoderTask+0x10c>
 80034ce:	8b3a      	ldrh	r2, [r7, #24]
 80034d0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29b      	uxth	r3, r3
 80034da:	b21b      	sxth	r3, r3
 80034dc:	843b      	strh	r3, [r7, #32]
	              	              }
	  // RPM Calculation
	  RPM_L = ((float) diffL / (ENCODER_PULSES_PER_REVOLUTION * 4));// * 60.0;
 80034de:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80034e2:	ee07 3a90 	vmov	s15, r3
 80034e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034ea:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8003668 <StartEncoderTask+0x298>
 80034ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80034f2:	ee16 0a90 	vmov	r0, s13
 80034f6:	f7fd f827 	bl	8000548 <__aeabi_f2d>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	495b      	ldr	r1, [pc, #364]	@ (800366c <StartEncoderTask+0x29c>)
 8003500:	e9c1 2300 	strd	r2, r3, [r1]
	  RPM_R = ((float) diffR / (ENCODER_PULSES_PER_REVOLUTION * 4));
 8003504:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003508:	ee07 3a90 	vmov	s15, r3
 800350c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003510:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8003668 <StartEncoderTask+0x298>
 8003514:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003518:	ee16 0a90 	vmov	r0, s13
 800351c:	f7fd f814 	bl	8000548 <__aeabi_f2d>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4952      	ldr	r1, [pc, #328]	@ (8003670 <StartEncoderTask+0x2a0>)
 8003526:	e9c1 2300 	strd	r2, r3, [r1]

	  float dt = (HAL_GetTick() - tick) * 0.001f;
 800352a:	f000 fe61 	bl	80041f0 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	ee07 3a90 	vmov	s15, r3
 8003538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800353c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003674 <StartEncoderTask+0x2a4>
 8003540:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003544:	edc7 7a05 	vstr	s15, [r7, #20]
	  RPS_L=((float) diffL / (ENCODER_PULSES_PER_REVOLUTION * 4* dt));
 8003548:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800354c:	ee07 3a90 	vmov	s15, r3
 8003550:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003554:	edd7 7a05 	vldr	s15, [r7, #20]
 8003558:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8003668 <StartEncoderTask+0x298>
 800355c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003560:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003564:	ee16 0a90 	vmov	r0, s13
 8003568:	f7fc ffee 	bl	8000548 <__aeabi_f2d>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4941      	ldr	r1, [pc, #260]	@ (8003678 <StartEncoderTask+0x2a8>)
 8003572:	e9c1 2300 	strd	r2, r3, [r1]
	  RPS_R=((float) diffR / (ENCODER_PULSES_PER_REVOLUTION * 4 *dt));
 8003576:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800357a:	ee07 3a90 	vmov	s15, r3
 800357e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003582:	edd7 7a05 	vldr	s15, [r7, #20]
 8003586:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003668 <StartEncoderTask+0x298>
 800358a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800358e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003592:	ee16 0a90 	vmov	r0, s13
 8003596:	f7fc ffd7 	bl	8000548 <__aeabi_f2d>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4937      	ldr	r1, [pc, #220]	@ (800367c <StartEncoderTask+0x2ac>)
 80035a0:	e9c1 2300 	strd	r2, r3, [r1]

      // Calculate the distance traveled by each wheel (in meters)
      float distanceLeftThisSecond = RPM_L * PI * WHEEL_DIAMETER;
 80035a4:	4b31      	ldr	r3, [pc, #196]	@ (800366c <StartEncoderTask+0x29c>)
 80035a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035aa:	a32b      	add	r3, pc, #172	@ (adr r3, 8003658 <StartEncoderTask+0x288>)
 80035ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b0:	f7fd f822 	bl	80005f8 <__aeabi_dmul>
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4610      	mov	r0, r2
 80035ba:	4619      	mov	r1, r3
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003680 <StartEncoderTask+0x2b0>)
 80035c2:	f7fd f819 	bl	80005f8 <__aeabi_dmul>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4610      	mov	r0, r2
 80035cc:	4619      	mov	r1, r3
 80035ce:	f7fd fb0b 	bl	8000be8 <__aeabi_d2f>
 80035d2:	4603      	mov	r3, r0
 80035d4:	613b      	str	r3, [r7, #16]
      float distanceRightThisSecond = RPM_R * PI * WHEEL_DIAMETER;
 80035d6:	4b26      	ldr	r3, [pc, #152]	@ (8003670 <StartEncoderTask+0x2a0>)
 80035d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035dc:	a31e      	add	r3, pc, #120	@ (adr r3, 8003658 <StartEncoderTask+0x288>)
 80035de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e2:	f7fd f809 	bl	80005f8 <__aeabi_dmul>
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	4610      	mov	r0, r2
 80035ec:	4619      	mov	r1, r3
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	4b23      	ldr	r3, [pc, #140]	@ (8003680 <StartEncoderTask+0x2b0>)
 80035f4:	f7fd f800 	bl	80005f8 <__aeabi_dmul>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4610      	mov	r0, r2
 80035fe:	4619      	mov	r1, r3
 8003600:	f7fd faf2 	bl	8000be8 <__aeabi_d2f>
 8003604:	4603      	mov	r3, r0
 8003606:	60fb      	str	r3, [r7, #12]

	    // Average the distances to account for potential minor differences in wheel speed
	    float distanceThisSecond = (distanceLeftThisSecond + distanceRightThisSecond) / 2.0;
 8003608:	ed97 7a04 	vldr	s14, [r7, #16]
 800360c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003610:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003614:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003618:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800361c:	edc7 7a02 	vstr	s15, [r7, #8]
	    distanceTraveled += distanceThisSecond;
 8003620:	4b18      	ldr	r3, [pc, #96]	@ (8003684 <StartEncoderTask+0x2b4>)
 8003622:	ed93 7a00 	vldr	s14, [r3]
 8003626:	edd7 7a02 	vldr	s15, [r7, #8]
 800362a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800362e:	4b15      	ldr	r3, [pc, #84]	@ (8003684 <StartEncoderTask+0x2b4>)
 8003630:	edc3 7a00 	vstr	s15, [r3]
	    // Accumulate the total distance traveled
	  cnt1L = __HAL_TIM_GET_COUNTER(&htim2);
 8003634:	4b0a      	ldr	r3, [pc, #40]	@ (8003660 <StartEncoderTask+0x290>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	  cnt1R = __HAL_TIM_GET_COUNTER(&htim3);
 800363c:	4b09      	ldr	r3, [pc, #36]	@ (8003664 <StartEncoderTask+0x294>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003642:	847b      	strh	r3, [r7, #34]	@ 0x22
	 tick = HAL_GetTick();
 8003644:	f000 fdd4 	bl	80041f0 <HAL_GetTick>
 8003648:	61f8      	str	r0, [r7, #28]
  }
	  osDelay(150);
 800364a:	2096      	movs	r0, #150	@ 0x96
 800364c:	f006 fd50 	bl	800a0f0 <osDelay>
	  if (HAL_GetTick() - tick > 10L) { // Checking per second
 8003650:	e6d5      	b.n	80033fe <StartEncoderTask+0x2e>
 8003652:	bf00      	nop
 8003654:	f3af 8000 	nop.w
 8003658:	54442eea 	.word	0x54442eea
 800365c:	400921fb 	.word	0x400921fb
 8003660:	20000364 	.word	0x20000364
 8003664:	200003ac 	.word	0x200003ac
 8003668:	44a50000 	.word	0x44a50000
 800366c:	20000540 	.word	0x20000540
 8003670:	20000548 	.word	0x20000548
 8003674:	3a83126f 	.word	0x3a83126f
 8003678:	20000550 	.word	0x20000550
 800367c:	20000558 	.word	0x20000558
 8003680:	401a0000 	.word	0x401a0000
 8003684:	20000220 	.word	0x20000220

08003688 <startrobotTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startrobotTask */
void startrobotTask(void *argument)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startrobotTask */
  /* Infinite loop */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);//Start servo pwm timer
 8003690:	210c      	movs	r1, #12
 8003692:	4890      	ldr	r0, [pc, #576]	@ (80038d4 <startrobotTask+0x24c>)
 8003694:	f003 fb1e 	bl	8006cd4 <HAL_TIM_PWM_Start>
	degree=0;
 8003698:	4b8f      	ldr	r3, [pc, #572]	@ (80038d8 <startrobotTask+0x250>)
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80036a0:	2100      	movs	r1, #0
 80036a2:	488e      	ldr	r0, [pc, #568]	@ (80038dc <startrobotTask+0x254>)
 80036a4:	f003 fb16 	bl	8006cd4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80036a8:	2104      	movs	r1, #4
 80036aa:	488c      	ldr	r0, [pc, #560]	@ (80038dc <startrobotTask+0x254>)
 80036ac:	f003 fb12 	bl	8006cd4 <HAL_TIM_PWM_Start>

	while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8)==1);
 80036b0:	bf00      	nop
 80036b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036b6:	488a      	ldr	r0, [pc, #552]	@ (80038e0 <startrobotTask+0x258>)
 80036b8:	f001 fd0a 	bl	80050d0 <HAL_GPIO_ReadPin>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d0f7      	beq.n	80036b2 <startrobotTask+0x2a>
	int target=85;
 80036c2:	2355      	movs	r3, #85	@ 0x55
 80036c4:	60fb      	str	r3, [r7, #12]

		//{osDelay(200);osThreadYield();}
	//while(calibrate==0);

	set_servo_angle(Center);
 80036c6:	205f      	movs	r0, #95	@ 0x5f
 80036c8:	f7fe feac 	bl	8002424 <set_servo_angle>
	osDelay(200);
 80036cc:	20c8      	movs	r0, #200	@ 0xc8
 80036ce:	f006 fd0f 	bl	800a0f0 <osDelay>
	//Calibrate();
	start_time = HAL_GetTick();
 80036d2:	f000 fd8d 	bl	80041f0 <HAL_GetTick>
 80036d6:	4603      	mov	r3, r0
 80036d8:	4a82      	ldr	r2, [pc, #520]	@ (80038e4 <startrobotTask+0x25c>)
 80036da:	6013      	str	r3, [r2, #0]
	end_time = HAL_GetTick();  // Record end time
 80036dc:	f000 fd88 	bl	80041f0 <HAL_GetTick>
 80036e0:	4603      	mov	r3, r0
 80036e2:	4a81      	ldr	r2, [pc, #516]	@ (80038e8 <startrobotTask+0x260>)
 80036e4:	6013      	str	r3, [r2, #0]
	delta_time_sec= (end_time - start_time) * 0.001f; // Time difference in ms
 80036e6:	4b80      	ldr	r3, [pc, #512]	@ (80038e8 <startrobotTask+0x260>)
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	4b7e      	ldr	r3, [pc, #504]	@ (80038e4 <startrobotTask+0x25c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	ee07 3a90 	vmov	s15, r3
 80036f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f8:	ed9f 7a7c 	vldr	s14, [pc, #496]	@ 80038ec <startrobotTask+0x264>
 80036fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003700:	4b7b      	ldr	r3, [pc, #492]	@ (80038f0 <startrobotTask+0x268>)
 8003702:	edc3 7a00 	vstr	s15, [r3]
  {

	  //TEST TURN SEGMENT
	  {

		  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8)==0)
 8003706:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800370a:	4875      	ldr	r0, [pc, #468]	@ (80038e0 <startrobotTask+0x258>)
 800370c:	f001 fce0 	bl	80050d0 <HAL_GPIO_ReadPin>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d102      	bne.n	800371c <startrobotTask+0x94>
		  {
			  //resetYaw();
			  //yaw=0;
			  tempflag=1;
 8003716:	4b77      	ldr	r3, [pc, #476]	@ (80038f4 <startrobotTask+0x26c>)
 8003718:	2201      	movs	r2, #1
 800371a:	601a      	str	r2, [r3, #0]
			  //set_servo_angle(Right);

			 // osDelay(550);
		  }

		  if(tempflag==1)
 800371c:	4b75      	ldr	r3, [pc, #468]	@ (80038f4 <startrobotTask+0x26c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d107      	bne.n	8003734 <startrobotTask+0xac>
//						  Set_Motor_DirectionTest(1,0);
//						  ForwardRightTest(-83);
//					  }
//				  }

				Set_Motor_DirectionTest(1,0);
 8003724:	2100      	movs	r1, #0
 8003726:	2001      	movs	r0, #1
 8003728:	f7fe f8f0 	bl	800190c <Set_Motor_DirectionTest>
//				BackRightTest(83);
				ForwardRightTest(-83);
 800372c:	f06f 0052 	mvn.w	r0, #82	@ 0x52
 8003730:	f7fe fd6e 	bl	8002210 <ForwardRightTest>
			  		  osDelay(200);
				  }*/

	  }
	  //END OF TEST SEGMENT
	  	  	ICM20948_readGyroscope_all(&hi2c1, 0, GYRO_SENS, &accel);
 8003734:	4b70      	ldr	r3, [pc, #448]	@ (80038f8 <startrobotTask+0x270>)
 8003736:	2203      	movs	r2, #3
 8003738:	2100      	movs	r1, #0
 800373a:	4870      	ldr	r0, [pc, #448]	@ (80038fc <startrobotTask+0x274>)
 800373c:	f006 f8a0 	bl	8009880 <ICM20948_readGyroscope_all>
	  		end_time = HAL_GetTick();
 8003740:	f000 fd56 	bl	80041f0 <HAL_GetTick>
 8003744:	4603      	mov	r3, r0
 8003746:	4a68      	ldr	r2, [pc, #416]	@ (80038e8 <startrobotTask+0x260>)
 8003748:	6013      	str	r3, [r2, #0]
	  		delta_time_sec= (end_time - start_time) * 0.001f;
 800374a:	4b67      	ldr	r3, [pc, #412]	@ (80038e8 <startrobotTask+0x260>)
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	4b65      	ldr	r3, [pc, #404]	@ (80038e4 <startrobotTask+0x25c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	ee07 3a90 	vmov	s15, r3
 8003758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800375c:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 80038ec <startrobotTask+0x264>
 8003760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003764:	4b62      	ldr	r3, [pc, #392]	@ (80038f0 <startrobotTask+0x268>)
 8003766:	edc3 7a00 	vstr	s15, [r3]
	  		  start_time = HAL_GetTick();
 800376a:	f000 fd41 	bl	80041f0 <HAL_GetTick>
 800376e:	4603      	mov	r3, r0
 8003770:	4a5c      	ldr	r2, [pc, #368]	@ (80038e4 <startrobotTask+0x25c>)
 8003772:	6013      	str	r3, [r2, #0]
	  		  if(flagReceived==1&&flagDone!=1){
 8003774:	4b62      	ldr	r3, [pc, #392]	@ (8003900 <startrobotTask+0x278>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b01      	cmp	r3, #1
 800377a:	f040 8093 	bne.w	80038a4 <startrobotTask+0x21c>
 800377e:	4b61      	ldr	r3, [pc, #388]	@ (8003904 <startrobotTask+0x27c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b01      	cmp	r3, #1
 8003784:	f000 808e 	beq.w	80038a4 <startrobotTask+0x21c>
	  			  char temp[4] = {0};  // Temporary buffer to hold up to 4 characters + null terminator
 8003788:	2300      	movs	r3, #0
 800378a:	60bb      	str	r3, [r7, #8]
	  			  strncpy(temp, aRxBuffer+1, 3);
 800378c:	495e      	ldr	r1, [pc, #376]	@ (8003908 <startrobotTask+0x280>)
 800378e:	f107 0308 	add.w	r3, r7, #8
 8003792:	2203      	movs	r2, #3
 8003794:	4618      	mov	r0, r3
 8003796:	f00a f9b4 	bl	800db02 <strncpy>
	  			  Target_Distance=atoi(temp);
 800379a:	f107 0308 	add.w	r3, r7, #8
 800379e:	4618      	mov	r0, r3
 80037a0:	f009 fb7c 	bl	800ce9c <atoi>
 80037a4:	4603      	mov	r3, r0
 80037a6:	4a59      	ldr	r2, [pc, #356]	@ (800390c <startrobotTask+0x284>)
 80037a8:	6013      	str	r3, [r2, #0]
	  				if(aRxBuffer[0]=='W' && distanceTraveled < Target_Distance){
 80037aa:	4b59      	ldr	r3, [pc, #356]	@ (8003910 <startrobotTask+0x288>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b57      	cmp	r3, #87	@ 0x57
 80037b0:	d115      	bne.n	80037de <startrobotTask+0x156>
 80037b2:	4b56      	ldr	r3, [pc, #344]	@ (800390c <startrobotTask+0x284>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037be:	4b55      	ldr	r3, [pc, #340]	@ (8003914 <startrobotTask+0x28c>)
 80037c0:	edd3 7a00 	vldr	s15, [r3]
 80037c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037cc:	dd07      	ble.n	80037de <startrobotTask+0x156>
	  					Set_Motor_DirectionTest(1,1);
 80037ce:	2101      	movs	r1, #1
 80037d0:	2001      	movs	r0, #1
 80037d2:	f7fe f89b 	bl	800190c <Set_Motor_DirectionTest>
	  					Forward(0);
 80037d6:	2000      	movs	r0, #0
 80037d8:	f7fe fa48 	bl	8001c6c <Forward>
 80037dc:	e061      	b.n	80038a2 <startrobotTask+0x21a>
	  				}
	  				else if(aRxBuffer[0]=='D'&&aRxBuffer[1]=='1'){
 80037de:	4b4c      	ldr	r3, [pc, #304]	@ (8003910 <startrobotTask+0x288>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b44      	cmp	r3, #68	@ 0x44
 80037e4:	d10c      	bne.n	8003800 <startrobotTask+0x178>
 80037e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003910 <startrobotTask+0x288>)
 80037e8:	785b      	ldrb	r3, [r3, #1]
 80037ea:	2b31      	cmp	r3, #49	@ 0x31
 80037ec:	d108      	bne.n	8003800 <startrobotTask+0x178>
	  							Set_Motor_DirectionTest(1,0);
 80037ee:	2100      	movs	r1, #0
 80037f0:	2001      	movs	r0, #1
 80037f2:	f7fe f88b 	bl	800190c <Set_Motor_DirectionTest>
	  							ForwardRightTest(-83);
 80037f6:	f06f 0052 	mvn.w	r0, #82	@ 0x52
 80037fa:	f7fe fd09 	bl	8002210 <ForwardRightTest>
 80037fe:	e050      	b.n	80038a2 <startrobotTask+0x21a>
	  				}
	  				else if(aRxBuffer[0]=='D'&&aRxBuffer[1]=='0'){
 8003800:	4b43      	ldr	r3, [pc, #268]	@ (8003910 <startrobotTask+0x288>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b44      	cmp	r3, #68	@ 0x44
 8003806:	d10b      	bne.n	8003820 <startrobotTask+0x198>
 8003808:	4b41      	ldr	r3, [pc, #260]	@ (8003910 <startrobotTask+0x288>)
 800380a:	785b      	ldrb	r3, [r3, #1]
 800380c:	2b30      	cmp	r3, #48	@ 0x30
 800380e:	d107      	bne.n	8003820 <startrobotTask+0x198>
	  							Set_Motor_DirectionTest(0,1);
 8003810:	2101      	movs	r1, #1
 8003812:	2000      	movs	r0, #0
 8003814:	f7fe f87a 	bl	800190c <Set_Motor_DirectionTest>
	  							BackRightTest(83);
 8003818:	2053      	movs	r0, #83	@ 0x53
 800381a:	f7fe faad 	bl	8001d78 <BackRightTest>
 800381e:	e040      	b.n	80038a2 <startrobotTask+0x21a>
	  				}
	  				else if(aRxBuffer[0]=='A' &&aRxBuffer[1]=='1'){
 8003820:	4b3b      	ldr	r3, [pc, #236]	@ (8003910 <startrobotTask+0x288>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	2b41      	cmp	r3, #65	@ 0x41
 8003826:	d10b      	bne.n	8003840 <startrobotTask+0x1b8>
 8003828:	4b39      	ldr	r3, [pc, #228]	@ (8003910 <startrobotTask+0x288>)
 800382a:	785b      	ldrb	r3, [r3, #1]
 800382c:	2b31      	cmp	r3, #49	@ 0x31
 800382e:	d107      	bne.n	8003840 <startrobotTask+0x1b8>
	  							Set_Motor_DirectionTest(0,1);
 8003830:	2101      	movs	r1, #1
 8003832:	2000      	movs	r0, #0
 8003834:	f7fe f86a 	bl	800190c <Set_Motor_DirectionTest>
	  							ForwardLeftTest(83);
 8003838:	2053      	movs	r0, #83	@ 0x53
 800383a:	f7fe fc25 	bl	8002088 <ForwardLeftTest>
 800383e:	e030      	b.n	80038a2 <startrobotTask+0x21a>
	  						}
	  				else if(aRxBuffer[0]=='A'&&aRxBuffer[1]=='0'){
 8003840:	4b33      	ldr	r3, [pc, #204]	@ (8003910 <startrobotTask+0x288>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b41      	cmp	r3, #65	@ 0x41
 8003846:	d10c      	bne.n	8003862 <startrobotTask+0x1da>
 8003848:	4b31      	ldr	r3, [pc, #196]	@ (8003910 <startrobotTask+0x288>)
 800384a:	785b      	ldrb	r3, [r3, #1]
 800384c:	2b30      	cmp	r3, #48	@ 0x30
 800384e:	d108      	bne.n	8003862 <startrobotTask+0x1da>
	  							Set_Motor_DirectionTest(1,0);
 8003850:	2100      	movs	r1, #0
 8003852:	2001      	movs	r0, #1
 8003854:	f7fe f85a 	bl	800190c <Set_Motor_DirectionTest>
	  							BackLeftTest(-83);
 8003858:	f06f 0052 	mvn.w	r0, #82	@ 0x52
 800385c:	f7fe fb50 	bl	8001f00 <BackLeftTest>
 8003860:	e01f      	b.n	80038a2 <startrobotTask+0x21a>
	  				}
	  				else if(aRxBuffer[0]=='S' && distanceTraveled < Target_Distance)
 8003862:	4b2b      	ldr	r3, [pc, #172]	@ (8003910 <startrobotTask+0x288>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b53      	cmp	r3, #83	@ 0x53
 8003868:	d114      	bne.n	8003894 <startrobotTask+0x20c>
 800386a:	4b28      	ldr	r3, [pc, #160]	@ (800390c <startrobotTask+0x284>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	ee07 3a90 	vmov	s15, r3
 8003872:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003876:	4b27      	ldr	r3, [pc, #156]	@ (8003914 <startrobotTask+0x28c>)
 8003878:	edd3 7a00 	vldr	s15, [r3]
 800387c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003884:	dd06      	ble.n	8003894 <startrobotTask+0x20c>
	  				{
	  					Set_Motor_Direction(0);
 8003886:	2000      	movs	r0, #0
 8003888:	f7fe f80a 	bl	80018a0 <Set_Motor_Direction>
	  					Backward(0);
 800388c:	2000      	movs	r0, #0
 800388e:	f7fe f967 	bl	8001b60 <Backward>
 8003892:	e006      	b.n	80038a2 <startrobotTask+0x21a>
	  				}
	  				else{
	  					flagDone=1;
 8003894:	4b1b      	ldr	r3, [pc, #108]	@ (8003904 <startrobotTask+0x27c>)
 8003896:	2201      	movs	r2, #1
 8003898:	601a      	str	r2, [r3, #0]
	  					flagReceived=0;
 800389a:	4b19      	ldr	r3, [pc, #100]	@ (8003900 <startrobotTask+0x278>)
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]
	  		  if(flagReceived==1&&flagDone!=1){
 80038a0:	e013      	b.n	80038ca <startrobotTask+0x242>
 80038a2:	e012      	b.n	80038ca <startrobotTask+0x242>
	  				}
	  			}
	  			else if(flagDone==1)
 80038a4:	4b17      	ldr	r3, [pc, #92]	@ (8003904 <startrobotTask+0x27c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d10e      	bne.n	80038ca <startrobotTask+0x242>
	  			{
	  				Motor_Stop();
 80038ac:	f7ff fc84 	bl	80031b8 <Motor_Stop>
	  				HAL_UART_Transmit(&huart3,(uint8_t *)"ACK",3,0xFFFF);
 80038b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038b4:	2203      	movs	r2, #3
 80038b6:	4918      	ldr	r1, [pc, #96]	@ (8003918 <startrobotTask+0x290>)
 80038b8:	4818      	ldr	r0, [pc, #96]	@ (800391c <startrobotTask+0x294>)
 80038ba:	f004 fe83 	bl	80085c4 <HAL_UART_Transmit>
	  				flagReceived=0;
 80038be:	4b10      	ldr	r3, [pc, #64]	@ (8003900 <startrobotTask+0x278>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
	  				flagDone = 0;
 80038c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003904 <startrobotTask+0x27c>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
	  			}

    osDelay(10);
 80038ca:	200a      	movs	r0, #10
 80038cc:	f006 fc10 	bl	800a0f0 <osDelay>
  {
 80038d0:	e719      	b.n	8003706 <startrobotTask+0x7e>
 80038d2:	bf00      	nop
 80038d4:	2000031c 	.word	0x2000031c
 80038d8:	200005d4 	.word	0x200005d4
 80038dc:	20000484 	.word	0x20000484
 80038e0:	40020c00 	.word	0x40020c00
 80038e4:	20000230 	.word	0x20000230
 80038e8:	20000234 	.word	0x20000234
 80038ec:	3a83126f 	.word	0x3a83126f
 80038f0:	20000224 	.word	0x20000224
 80038f4:	20000004 	.word	0x20000004
 80038f8:	20000560 	.word	0x20000560
 80038fc:	200002c8 	.word	0x200002c8
 8003900:	2000022c 	.word	0x2000022c
 8003904:	20000228 	.word	0x20000228
 8003908:	200005dd 	.word	0x200005dd
 800390c:	2000021c 	.word	0x2000021c
 8003910:	200005dc 	.word	0x200005dc
 8003914:	20000220 	.word	0x20000220
 8003918:	08010300 	.word	0x08010300
 800391c:	200004cc 	.word	0x200004cc

08003920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003924:	b672      	cpsid	i
}
 8003926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003928:	bf00      	nop
 800392a:	e7fd      	b.n	8003928 <Error_Handler+0x8>

0800392c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003932:	2300      	movs	r3, #0
 8003934:	607b      	str	r3, [r7, #4]
 8003936:	4b12      	ldr	r3, [pc, #72]	@ (8003980 <HAL_MspInit+0x54>)
 8003938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393a:	4a11      	ldr	r2, [pc, #68]	@ (8003980 <HAL_MspInit+0x54>)
 800393c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003940:	6453      	str	r3, [r2, #68]	@ 0x44
 8003942:	4b0f      	ldr	r3, [pc, #60]	@ (8003980 <HAL_MspInit+0x54>)
 8003944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800394a:	607b      	str	r3, [r7, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800394e:	2300      	movs	r3, #0
 8003950:	603b      	str	r3, [r7, #0]
 8003952:	4b0b      	ldr	r3, [pc, #44]	@ (8003980 <HAL_MspInit+0x54>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	4a0a      	ldr	r2, [pc, #40]	@ (8003980 <HAL_MspInit+0x54>)
 8003958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800395c:	6413      	str	r3, [r2, #64]	@ 0x40
 800395e:	4b08      	ldr	r3, [pc, #32]	@ (8003980 <HAL_MspInit+0x54>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800396a:	2200      	movs	r2, #0
 800396c:	210f      	movs	r1, #15
 800396e:	f06f 0001 	mvn.w	r0, #1
 8003972:	f001 f948 	bl	8004c06 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40023800 	.word	0x40023800

08003984 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08c      	sub	sp, #48	@ 0x30
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800398c:	f107 031c 	add.w	r3, r7, #28
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	60da      	str	r2, [r3, #12]
 800399a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a2e      	ldr	r2, [pc, #184]	@ (8003a5c <HAL_ADC_MspInit+0xd8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d128      	bne.n	80039f8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	61bb      	str	r3, [r7, #24]
 80039aa:	4b2d      	ldr	r3, [pc, #180]	@ (8003a60 <HAL_ADC_MspInit+0xdc>)
 80039ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ae:	4a2c      	ldr	r2, [pc, #176]	@ (8003a60 <HAL_ADC_MspInit+0xdc>)
 80039b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80039b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a60 <HAL_ADC_MspInit+0xdc>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039be:	61bb      	str	r3, [r7, #24]
 80039c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	4b26      	ldr	r3, [pc, #152]	@ (8003a60 <HAL_ADC_MspInit+0xdc>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ca:	4a25      	ldr	r2, [pc, #148]	@ (8003a60 <HAL_ADC_MspInit+0xdc>)
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80039d2:	4b23      	ldr	r3, [pc, #140]	@ (8003a60 <HAL_ADC_MspInit+0xdc>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80039de:	2301      	movs	r3, #1
 80039e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039e2:	2303      	movs	r3, #3
 80039e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ea:	f107 031c 	add.w	r3, r7, #28
 80039ee:	4619      	mov	r1, r3
 80039f0:	481c      	ldr	r0, [pc, #112]	@ (8003a64 <HAL_ADC_MspInit+0xe0>)
 80039f2:	f001 f9d1 	bl	8004d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80039f6:	e02c      	b.n	8003a52 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1a      	ldr	r2, [pc, #104]	@ (8003a68 <HAL_ADC_MspInit+0xe4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d127      	bne.n	8003a52 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	4b16      	ldr	r3, [pc, #88]	@ (8003a60 <HAL_ADC_MspInit+0xdc>)
 8003a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0a:	4a15      	ldr	r2, [pc, #84]	@ (8003a60 <HAL_ADC_MspInit+0xdc>)
 8003a0c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a12:	4b13      	ldr	r3, [pc, #76]	@ (8003a60 <HAL_ADC_MspInit+0xdc>)
 8003a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	4b0f      	ldr	r3, [pc, #60]	@ (8003a60 <HAL_ADC_MspInit+0xdc>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a26:	4a0e      	ldr	r2, [pc, #56]	@ (8003a60 <HAL_ADC_MspInit+0xdc>)
 8003a28:	f043 0301 	orr.w	r3, r3, #1
 8003a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a60 <HAL_ADC_MspInit+0xdc>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a46:	f107 031c 	add.w	r3, r7, #28
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4805      	ldr	r0, [pc, #20]	@ (8003a64 <HAL_ADC_MspInit+0xe0>)
 8003a4e:	f001 f9a3 	bl	8004d98 <HAL_GPIO_Init>
}
 8003a52:	bf00      	nop
 8003a54:	3730      	adds	r7, #48	@ 0x30
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40012000 	.word	0x40012000
 8003a60:	40023800 	.word	0x40023800
 8003a64:	40020000 	.word	0x40020000
 8003a68:	40012100 	.word	0x40012100

08003a6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08a      	sub	sp, #40	@ 0x28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a74:	f107 0314 	add.w	r3, r7, #20
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	605a      	str	r2, [r3, #4]
 8003a7e:	609a      	str	r2, [r3, #8]
 8003a80:	60da      	str	r2, [r3, #12]
 8003a82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a19      	ldr	r2, [pc, #100]	@ (8003af0 <HAL_I2C_MspInit+0x84>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d12c      	bne.n	8003ae8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	4b18      	ldr	r3, [pc, #96]	@ (8003af4 <HAL_I2C_MspInit+0x88>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a96:	4a17      	ldr	r2, [pc, #92]	@ (8003af4 <HAL_I2C_MspInit+0x88>)
 8003a98:	f043 0302 	orr.w	r3, r3, #2
 8003a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a9e:	4b15      	ldr	r3, [pc, #84]	@ (8003af4 <HAL_I2C_MspInit+0x88>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003aaa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ab0:	2312      	movs	r3, #18
 8003ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003abc:	2304      	movs	r3, #4
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ac0:	f107 0314 	add.w	r3, r7, #20
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	480c      	ldr	r0, [pc, #48]	@ (8003af8 <HAL_I2C_MspInit+0x8c>)
 8003ac8:	f001 f966 	bl	8004d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003acc:	2300      	movs	r3, #0
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	4b08      	ldr	r3, [pc, #32]	@ (8003af4 <HAL_I2C_MspInit+0x88>)
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad4:	4a07      	ldr	r2, [pc, #28]	@ (8003af4 <HAL_I2C_MspInit+0x88>)
 8003ad6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003ada:	6413      	str	r3, [r2, #64]	@ 0x40
 8003adc:	4b05      	ldr	r3, [pc, #20]	@ (8003af4 <HAL_I2C_MspInit+0x88>)
 8003ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003ae8:	bf00      	nop
 8003aea:	3728      	adds	r7, #40	@ 0x28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40005400 	.word	0x40005400
 8003af4:	40023800 	.word	0x40023800
 8003af8:	40020400 	.word	0x40020400

08003afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08e      	sub	sp, #56	@ 0x38
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	605a      	str	r2, [r3, #4]
 8003b0e:	609a      	str	r2, [r3, #8]
 8003b10:	60da      	str	r2, [r3, #12]
 8003b12:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a4a      	ldr	r2, [pc, #296]	@ (8003c44 <HAL_TIM_Base_MspInit+0x148>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d10e      	bne.n	8003b3c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	623b      	str	r3, [r7, #32]
 8003b22:	4b49      	ldr	r3, [pc, #292]	@ (8003c48 <HAL_TIM_Base_MspInit+0x14c>)
 8003b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b26:	4a48      	ldr	r2, [pc, #288]	@ (8003c48 <HAL_TIM_Base_MspInit+0x14c>)
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b2e:	4b46      	ldr	r3, [pc, #280]	@ (8003c48 <HAL_TIM_Base_MspInit+0x14c>)
 8003b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	623b      	str	r3, [r7, #32]
 8003b38:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003b3a:	e07f      	b.n	8003c3c <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM4)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a42      	ldr	r2, [pc, #264]	@ (8003c4c <HAL_TIM_Base_MspInit+0x150>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d135      	bne.n	8003bb2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b46:	2300      	movs	r3, #0
 8003b48:	61fb      	str	r3, [r7, #28]
 8003b4a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c48 <HAL_TIM_Base_MspInit+0x14c>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4e:	4a3e      	ldr	r2, [pc, #248]	@ (8003c48 <HAL_TIM_Base_MspInit+0x14c>)
 8003b50:	f043 0304 	orr.w	r3, r3, #4
 8003b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b56:	4b3c      	ldr	r3, [pc, #240]	@ (8003c48 <HAL_TIM_Base_MspInit+0x14c>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	4b38      	ldr	r3, [pc, #224]	@ (8003c48 <HAL_TIM_Base_MspInit+0x14c>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6a:	4a37      	ldr	r2, [pc, #220]	@ (8003c48 <HAL_TIM_Base_MspInit+0x14c>)
 8003b6c:	f043 0308 	orr.w	r3, r3, #8
 8003b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b72:	4b35      	ldr	r3, [pc, #212]	@ (8003c48 <HAL_TIM_Base_MspInit+0x14c>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	61bb      	str	r3, [r7, #24]
 8003b7c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003b7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b84:	2302      	movs	r3, #2
 8003b86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003b90:	2302      	movs	r3, #2
 8003b92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b98:	4619      	mov	r1, r3
 8003b9a:	482d      	ldr	r0, [pc, #180]	@ (8003c50 <HAL_TIM_Base_MspInit+0x154>)
 8003b9c:	f001 f8fc 	bl	8004d98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2105      	movs	r1, #5
 8003ba4:	201e      	movs	r0, #30
 8003ba6:	f001 f82e 	bl	8004c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003baa:	201e      	movs	r0, #30
 8003bac:	f001 f847 	bl	8004c3e <HAL_NVIC_EnableIRQ>
}
 8003bb0:	e044      	b.n	8003c3c <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM6)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a27      	ldr	r2, [pc, #156]	@ (8003c54 <HAL_TIM_Base_MspInit+0x158>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d10e      	bne.n	8003bda <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
 8003bc0:	4b21      	ldr	r3, [pc, #132]	@ (8003c48 <HAL_TIM_Base_MspInit+0x14c>)
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc4:	4a20      	ldr	r2, [pc, #128]	@ (8003c48 <HAL_TIM_Base_MspInit+0x14c>)
 8003bc6:	f043 0310 	orr.w	r3, r3, #16
 8003bca:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bcc:	4b1e      	ldr	r3, [pc, #120]	@ (8003c48 <HAL_TIM_Base_MspInit+0x14c>)
 8003bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	697b      	ldr	r3, [r7, #20]
}
 8003bd8:	e030      	b.n	8003c3c <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM8)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a1e      	ldr	r2, [pc, #120]	@ (8003c58 <HAL_TIM_Base_MspInit+0x15c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d12b      	bne.n	8003c3c <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003be4:	2300      	movs	r3, #0
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	4b17      	ldr	r3, [pc, #92]	@ (8003c48 <HAL_TIM_Base_MspInit+0x14c>)
 8003bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bec:	4a16      	ldr	r2, [pc, #88]	@ (8003c48 <HAL_TIM_Base_MspInit+0x14c>)
 8003bee:	f043 0302 	orr.w	r3, r3, #2
 8003bf2:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bf4:	4b14      	ldr	r3, [pc, #80]	@ (8003c48 <HAL_TIM_Base_MspInit+0x14c>)
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c00:	2300      	movs	r3, #0
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	4b10      	ldr	r3, [pc, #64]	@ (8003c48 <HAL_TIM_Base_MspInit+0x14c>)
 8003c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c08:	4a0f      	ldr	r2, [pc, #60]	@ (8003c48 <HAL_TIM_Base_MspInit+0x14c>)
 8003c0a:	f043 0304 	orr.w	r3, r3, #4
 8003c0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c10:	4b0d      	ldr	r3, [pc, #52]	@ (8003c48 <HAL_TIM_Base_MspInit+0x14c>)
 8003c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c1c:	23c0      	movs	r3, #192	@ 0xc0
 8003c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c20:	2302      	movs	r3, #2
 8003c22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c34:	4619      	mov	r1, r3
 8003c36:	4809      	ldr	r0, [pc, #36]	@ (8003c5c <HAL_TIM_Base_MspInit+0x160>)
 8003c38:	f001 f8ae 	bl	8004d98 <HAL_GPIO_Init>
}
 8003c3c:	bf00      	nop
 8003c3e:	3738      	adds	r7, #56	@ 0x38
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40010000 	.word	0x40010000
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	40000800 	.word	0x40000800
 8003c50:	40020c00 	.word	0x40020c00
 8003c54:	40001000 	.word	0x40001000
 8003c58:	40010400 	.word	0x40010400
 8003c5c:	40020800 	.word	0x40020800

08003c60 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08c      	sub	sp, #48	@ 0x30
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c68:	f107 031c 	add.w	r3, r7, #28
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	605a      	str	r2, [r3, #4]
 8003c72:	609a      	str	r2, [r3, #8]
 8003c74:	60da      	str	r2, [r3, #12]
 8003c76:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c80:	d14b      	bne.n	8003d1a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c82:	2300      	movs	r3, #0
 8003c84:	61bb      	str	r3, [r7, #24]
 8003c86:	4b3f      	ldr	r3, [pc, #252]	@ (8003d84 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8a:	4a3e      	ldr	r2, [pc, #248]	@ (8003d84 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c8c:	f043 0301 	orr.w	r3, r3, #1
 8003c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c92:	4b3c      	ldr	r3, [pc, #240]	@ (8003d84 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	61bb      	str	r3, [r7, #24]
 8003c9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	4b38      	ldr	r3, [pc, #224]	@ (8003d84 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca6:	4a37      	ldr	r2, [pc, #220]	@ (8003d84 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cae:	4b35      	ldr	r3, [pc, #212]	@ (8003d84 <HAL_TIM_Encoder_MspInit+0x124>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cba:	2300      	movs	r3, #0
 8003cbc:	613b      	str	r3, [r7, #16]
 8003cbe:	4b31      	ldr	r3, [pc, #196]	@ (8003d84 <HAL_TIM_Encoder_MspInit+0x124>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc2:	4a30      	ldr	r2, [pc, #192]	@ (8003d84 <HAL_TIM_Encoder_MspInit+0x124>)
 8003cc4:	f043 0302 	orr.w	r3, r3, #2
 8003cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cca:	4b2e      	ldr	r3, [pc, #184]	@ (8003d84 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	613b      	str	r3, [r7, #16]
 8003cd4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003cd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cdc:	2302      	movs	r3, #2
 8003cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cec:	f107 031c 	add.w	r3, r7, #28
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4825      	ldr	r0, [pc, #148]	@ (8003d88 <HAL_TIM_Encoder_MspInit+0x128>)
 8003cf4:	f001 f850 	bl	8004d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003cf8:	2308      	movs	r3, #8
 8003cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d00:	2300      	movs	r3, #0
 8003d02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d04:	2300      	movs	r3, #0
 8003d06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d0c:	f107 031c 	add.w	r3, r7, #28
 8003d10:	4619      	mov	r1, r3
 8003d12:	481e      	ldr	r0, [pc, #120]	@ (8003d8c <HAL_TIM_Encoder_MspInit+0x12c>)
 8003d14:	f001 f840 	bl	8004d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003d18:	e030      	b.n	8003d7c <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8003d90 <HAL_TIM_Encoder_MspInit+0x130>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d12b      	bne.n	8003d7c <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d24:	2300      	movs	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	4b16      	ldr	r3, [pc, #88]	@ (8003d84 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	4a15      	ldr	r2, [pc, #84]	@ (8003d84 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d2e:	f043 0302 	orr.w	r3, r3, #2
 8003d32:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d34:	4b13      	ldr	r3, [pc, #76]	@ (8003d84 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d40:	2300      	movs	r3, #0
 8003d42:	60bb      	str	r3, [r7, #8]
 8003d44:	4b0f      	ldr	r3, [pc, #60]	@ (8003d84 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d48:	4a0e      	ldr	r2, [pc, #56]	@ (8003d84 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d50:	4b0c      	ldr	r3, [pc, #48]	@ (8003d84 <HAL_TIM_Encoder_MspInit+0x124>)
 8003d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d5c:	23c0      	movs	r3, #192	@ 0xc0
 8003d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d60:	2302      	movs	r3, #2
 8003d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d64:	2300      	movs	r3, #0
 8003d66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d70:	f107 031c 	add.w	r3, r7, #28
 8003d74:	4619      	mov	r1, r3
 8003d76:	4804      	ldr	r0, [pc, #16]	@ (8003d88 <HAL_TIM_Encoder_MspInit+0x128>)
 8003d78:	f001 f80e 	bl	8004d98 <HAL_GPIO_Init>
}
 8003d7c:	bf00      	nop
 8003d7e:	3730      	adds	r7, #48	@ 0x30
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40023800 	.word	0x40023800
 8003d88:	40020000 	.word	0x40020000
 8003d8c:	40020400 	.word	0x40020400
 8003d90:	40000400 	.word	0x40000400

08003d94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d9c:	f107 030c 	add.w	r3, r7, #12
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	605a      	str	r2, [r3, #4]
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	60da      	str	r2, [r3, #12]
 8003daa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a12      	ldr	r2, [pc, #72]	@ (8003dfc <HAL_TIM_MspPostInit+0x68>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d11e      	bne.n	8003df4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003db6:	2300      	movs	r3, #0
 8003db8:	60bb      	str	r3, [r7, #8]
 8003dba:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <HAL_TIM_MspPostInit+0x6c>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dbe:	4a10      	ldr	r2, [pc, #64]	@ (8003e00 <HAL_TIM_MspPostInit+0x6c>)
 8003dc0:	f043 0310 	orr.w	r3, r3, #16
 8003dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e00 <HAL_TIM_MspPostInit+0x6c>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dca:	f003 0310 	and.w	r3, r3, #16
 8003dce:	60bb      	str	r3, [r7, #8]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003dd2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003dd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de0:	2300      	movs	r3, #0
 8003de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003de4:	2301      	movs	r3, #1
 8003de6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003de8:	f107 030c 	add.w	r3, r7, #12
 8003dec:	4619      	mov	r1, r3
 8003dee:	4805      	ldr	r0, [pc, #20]	@ (8003e04 <HAL_TIM_MspPostInit+0x70>)
 8003df0:	f000 ffd2 	bl	8004d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003df4:	bf00      	nop
 8003df6:	3720      	adds	r7, #32
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40010000 	.word	0x40010000
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40021000 	.word	0x40021000

08003e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08a      	sub	sp, #40	@ 0x28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e10:	f107 0314 	add.w	r3, r7, #20
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	605a      	str	r2, [r3, #4]
 8003e1a:	609a      	str	r2, [r3, #8]
 8003e1c:	60da      	str	r2, [r3, #12]
 8003e1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a1d      	ldr	r2, [pc, #116]	@ (8003e9c <HAL_UART_MspInit+0x94>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d134      	bne.n	8003e94 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ea0 <HAL_UART_MspInit+0x98>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	4a1b      	ldr	r2, [pc, #108]	@ (8003ea0 <HAL_UART_MspInit+0x98>)
 8003e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e38:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e3a:	4b19      	ldr	r3, [pc, #100]	@ (8003ea0 <HAL_UART_MspInit+0x98>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e42:	613b      	str	r3, [r7, #16]
 8003e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e46:	2300      	movs	r3, #0
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ea0 <HAL_UART_MspInit+0x98>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4e:	4a14      	ldr	r2, [pc, #80]	@ (8003ea0 <HAL_UART_MspInit+0x98>)
 8003e50:	f043 0304 	orr.w	r3, r3, #4
 8003e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e56:	4b12      	ldr	r3, [pc, #72]	@ (8003ea0 <HAL_UART_MspInit+0x98>)
 8003e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003e62:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e68:	2302      	movs	r3, #2
 8003e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e70:	2303      	movs	r3, #3
 8003e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003e74:	2307      	movs	r3, #7
 8003e76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e78:	f107 0314 	add.w	r3, r7, #20
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4809      	ldr	r0, [pc, #36]	@ (8003ea4 <HAL_UART_MspInit+0x9c>)
 8003e80:	f000 ff8a 	bl	8004d98 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003e84:	2200      	movs	r2, #0
 8003e86:	2105      	movs	r1, #5
 8003e88:	2027      	movs	r0, #39	@ 0x27
 8003e8a:	f000 febc 	bl	8004c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003e8e:	2027      	movs	r0, #39	@ 0x27
 8003e90:	f000 fed5 	bl	8004c3e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8003e94:	bf00      	nop
 8003e96:	3728      	adds	r7, #40	@ 0x28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40004800 	.word	0x40004800
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	40020800 	.word	0x40020800

08003ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003eac:	bf00      	nop
 8003eae:	e7fd      	b.n	8003eac <NMI_Handler+0x4>

08003eb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eb4:	bf00      	nop
 8003eb6:	e7fd      	b.n	8003eb4 <HardFault_Handler+0x4>

08003eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ebc:	bf00      	nop
 8003ebe:	e7fd      	b.n	8003ebc <MemManage_Handler+0x4>

08003ec0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ec4:	bf00      	nop
 8003ec6:	e7fd      	b.n	8003ec4 <BusFault_Handler+0x4>

08003ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ecc:	bf00      	nop
 8003ece:	e7fd      	b.n	8003ecc <UsageFault_Handler+0x4>

08003ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ed4:	bf00      	nop
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ee2:	f000 f971 	bl	80041c8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003ee6:	f007 fd2b 	bl	800b940 <xTaskGetSchedulerState>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d001      	beq.n	8003ef4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003ef0:	f008 fb22 	bl	800c538 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ef4:	bf00      	nop
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003efc:	4802      	ldr	r0, [pc, #8]	@ (8003f08 <TIM4_IRQHandler+0x10>)
 8003efe:	f003 fa67 	bl	80073d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f02:	bf00      	nop
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	200003f4 	.word	0x200003f4

08003f0c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003f10:	4802      	ldr	r0, [pc, #8]	@ (8003f1c <USART3_IRQHandler+0x10>)
 8003f12:	f004 fc07 	bl	8008724 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003f16:	bf00      	nop
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	200004cc 	.word	0x200004cc

08003f20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
	return 1;
 8003f24:	2301      	movs	r3, #1
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <_kill>:

int _kill(int pid, int sig)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003f3a:	f009 fe3f 	bl	800dbbc <__errno>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2216      	movs	r2, #22
 8003f42:	601a      	str	r2, [r3, #0]
	return -1;
 8003f44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <_exit>:

void _exit (int status)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003f58:	f04f 31ff 	mov.w	r1, #4294967295
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff ffe7 	bl	8003f30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003f62:	bf00      	nop
 8003f64:	e7fd      	b.n	8003f62 <_exit+0x12>

08003f66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b086      	sub	sp, #24
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	e00a      	b.n	8003f8e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003f78:	f3af 8000 	nop.w
 8003f7c:	4601      	mov	r1, r0
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	60ba      	str	r2, [r7, #8]
 8003f84:	b2ca      	uxtb	r2, r1
 8003f86:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	dbf0      	blt.n	8003f78 <_read+0x12>
	}

return len;
 8003f96:	687b      	ldr	r3, [r7, #4]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fac:	2300      	movs	r3, #0
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	e009      	b.n	8003fc6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	60ba      	str	r2, [r7, #8]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	617b      	str	r3, [r7, #20]
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	dbf1      	blt.n	8003fb2 <_write+0x12>
	}
	return len;
 8003fce:	687b      	ldr	r3, [r7, #4]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <_close>:

int _close(int file)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
	return -1;
 8003fe0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004000:	605a      	str	r2, [r3, #4]
	return 0;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <_isatty>:

int _isatty(int file)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
	return 1;
 8004018:	2301      	movs	r3, #1
}
 800401a:	4618      	mov	r0, r3
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004026:	b480      	push	{r7}
 8004028:	b085      	sub	sp, #20
 800402a:	af00      	add	r7, sp, #0
 800402c:	60f8      	str	r0, [r7, #12]
 800402e:	60b9      	str	r1, [r7, #8]
 8004030:	607a      	str	r2, [r7, #4]
	return 0;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004048:	4a14      	ldr	r2, [pc, #80]	@ (800409c <_sbrk+0x5c>)
 800404a:	4b15      	ldr	r3, [pc, #84]	@ (80040a0 <_sbrk+0x60>)
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004054:	4b13      	ldr	r3, [pc, #76]	@ (80040a4 <_sbrk+0x64>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d102      	bne.n	8004062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800405c:	4b11      	ldr	r3, [pc, #68]	@ (80040a4 <_sbrk+0x64>)
 800405e:	4a12      	ldr	r2, [pc, #72]	@ (80040a8 <_sbrk+0x68>)
 8004060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004062:	4b10      	ldr	r3, [pc, #64]	@ (80040a4 <_sbrk+0x64>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4413      	add	r3, r2
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	429a      	cmp	r2, r3
 800406e:	d207      	bcs.n	8004080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004070:	f009 fda4 	bl	800dbbc <__errno>
 8004074:	4603      	mov	r3, r0
 8004076:	220c      	movs	r2, #12
 8004078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800407a:	f04f 33ff 	mov.w	r3, #4294967295
 800407e:	e009      	b.n	8004094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004080:	4b08      	ldr	r3, [pc, #32]	@ (80040a4 <_sbrk+0x64>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004086:	4b07      	ldr	r3, [pc, #28]	@ (80040a4 <_sbrk+0x64>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4413      	add	r3, r2
 800408e:	4a05      	ldr	r2, [pc, #20]	@ (80040a4 <_sbrk+0x64>)
 8004090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004092:	68fb      	ldr	r3, [r7, #12]
}
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	20020000 	.word	0x20020000
 80040a0:	00000400 	.word	0x00000400
 80040a4:	200005f0 	.word	0x200005f0
 80040a8:	200054a0 	.word	0x200054a0

080040ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040b0:	4b06      	ldr	r3, [pc, #24]	@ (80040cc <SystemInit+0x20>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b6:	4a05      	ldr	r2, [pc, #20]	@ (80040cc <SystemInit+0x20>)
 80040b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80040bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040c0:	bf00      	nop
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	e000ed00 	.word	0xe000ed00

080040d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80040d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004108 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80040d4:	480d      	ldr	r0, [pc, #52]	@ (800410c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80040d6:	490e      	ldr	r1, [pc, #56]	@ (8004110 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80040d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004114 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80040da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040dc:	e002      	b.n	80040e4 <LoopCopyDataInit>

080040de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040de:	58d4      	ldr	r4, [r2, r3]
   str r4, [r0, r3]
 80040e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040e2:	3304      	adds	r3, #4

080040e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040e8:	d3f9      	bcc.n	80040de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040ea:	4a0b      	ldr	r2, [pc, #44]	@ (8004118 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80040ec:	4c0b      	ldr	r4, [pc, #44]	@ (800411c <LoopFillZerobss+0x26>)
  movs r3, #0
 80040ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040f0:	e001      	b.n	80040f6 <LoopFillZerobss>

080040f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040f4:	3204      	adds	r2, #4

080040f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040f8:	d3fb      	bcc.n	80040f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80040fa:	f7ff ffd7 	bl	80040ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80040fe:	f009 fd63 	bl	800dbc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004102:	f7fe f9b3 	bl	800246c <main>
  bx  lr    
 8004106:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004108:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800410c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004110:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8004114:	08011240 	.word	0x08011240
  ldr r2, =_sbss
 8004118:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 800411c:	200054a0 	.word	0x200054a0

08004120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004120:	e7fe      	b.n	8004120 <ADC_IRQHandler>
	...

08004124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004128:	4b0e      	ldr	r3, [pc, #56]	@ (8004164 <HAL_Init+0x40>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a0d      	ldr	r2, [pc, #52]	@ (8004164 <HAL_Init+0x40>)
 800412e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004132:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004134:	4b0b      	ldr	r3, [pc, #44]	@ (8004164 <HAL_Init+0x40>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a0a      	ldr	r2, [pc, #40]	@ (8004164 <HAL_Init+0x40>)
 800413a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800413e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004140:	4b08      	ldr	r3, [pc, #32]	@ (8004164 <HAL_Init+0x40>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a07      	ldr	r2, [pc, #28]	@ (8004164 <HAL_Init+0x40>)
 8004146:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800414a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800414c:	2003      	movs	r0, #3
 800414e:	f000 fd4f 	bl	8004bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004152:	200f      	movs	r0, #15
 8004154:	f000 f808 	bl	8004168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004158:	f7ff fbe8 	bl	800392c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	40023c00 	.word	0x40023c00

08004168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004170:	4b12      	ldr	r3, [pc, #72]	@ (80041bc <HAL_InitTick+0x54>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	4b12      	ldr	r3, [pc, #72]	@ (80041c0 <HAL_InitTick+0x58>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	4619      	mov	r1, r3
 800417a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800417e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004182:	fbb2 f3f3 	udiv	r3, r2, r3
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fd67 	bl	8004c5a <HAL_SYSTICK_Config>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e00e      	b.n	80041b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b0f      	cmp	r3, #15
 800419a:	d80a      	bhi.n	80041b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800419c:	2200      	movs	r2, #0
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	f04f 30ff 	mov.w	r0, #4294967295
 80041a4:	f000 fd2f 	bl	8004c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041a8:	4a06      	ldr	r2, [pc, #24]	@ (80041c4 <HAL_InitTick+0x5c>)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	e000      	b.n	80041b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20000024 	.word	0x20000024
 80041c0:	2000002c 	.word	0x2000002c
 80041c4:	20000028 	.word	0x20000028

080041c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041cc:	4b06      	ldr	r3, [pc, #24]	@ (80041e8 <HAL_IncTick+0x20>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	461a      	mov	r2, r3
 80041d2:	4b06      	ldr	r3, [pc, #24]	@ (80041ec <HAL_IncTick+0x24>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4413      	add	r3, r2
 80041d8:	4a04      	ldr	r2, [pc, #16]	@ (80041ec <HAL_IncTick+0x24>)
 80041da:	6013      	str	r3, [r2, #0]
}
 80041dc:	bf00      	nop
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	2000002c 	.word	0x2000002c
 80041ec:	200005f4 	.word	0x200005f4

080041f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  return uwTick;
 80041f4:	4b03      	ldr	r3, [pc, #12]	@ (8004204 <HAL_GetTick+0x14>)
 80041f6:	681b      	ldr	r3, [r3, #0]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	200005f4 	.word	0x200005f4

08004208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004210:	f7ff ffee 	bl	80041f0 <HAL_GetTick>
 8004214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004220:	d005      	beq.n	800422e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004222:	4b0a      	ldr	r3, [pc, #40]	@ (800424c <HAL_Delay+0x44>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800422e:	bf00      	nop
 8004230:	f7ff ffde 	bl	80041f0 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	429a      	cmp	r2, r3
 800423e:	d8f7      	bhi.n	8004230 <HAL_Delay+0x28>
  {
  }
}
 8004240:	bf00      	nop
 8004242:	bf00      	nop
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	2000002c 	.word	0x2000002c

08004250 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e033      	b.n	80042ce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	d109      	bne.n	8004282 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff fb88 	bl	8003984 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004286:	f003 0310 	and.w	r3, r3, #16
 800428a:	2b00      	cmp	r3, #0
 800428c:	d118      	bne.n	80042c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004292:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004296:	f023 0302 	bic.w	r3, r3, #2
 800429a:	f043 0202 	orr.w	r2, r3, #2
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fad8 	bl	8004858 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b2:	f023 0303 	bic.w	r3, r3, #3
 80042b6:	f043 0201 	orr.w	r2, r3, #1
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80042be:	e001      	b.n	80042c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_ADC_Start+0x1a>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e0b2      	b.n	8004458 <HAL_ADC_Start+0x180>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b01      	cmp	r3, #1
 8004306:	d018      	beq.n	800433a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0201 	orr.w	r2, r2, #1
 8004316:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004318:	4b52      	ldr	r3, [pc, #328]	@ (8004464 <HAL_ADC_Start+0x18c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a52      	ldr	r2, [pc, #328]	@ (8004468 <HAL_ADC_Start+0x190>)
 800431e:	fba2 2303 	umull	r2, r3, r2, r3
 8004322:	0c9a      	lsrs	r2, r3, #18
 8004324:	4613      	mov	r3, r2
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	4413      	add	r3, r2
 800432a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800432c:	e002      	b.n	8004334 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	3b01      	subs	r3, #1
 8004332:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f9      	bne.n	800432e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b01      	cmp	r3, #1
 8004346:	d17a      	bne.n	800443e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004350:	f023 0301 	bic.w	r3, r3, #1
 8004354:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004366:	2b00      	cmp	r3, #0
 8004368:	d007      	beq.n	800437a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004372:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004386:	d106      	bne.n	8004396 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438c:	f023 0206 	bic.w	r2, r3, #6
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	645a      	str	r2, [r3, #68]	@ 0x44
 8004394:	e002      	b.n	800439c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043a4:	4b31      	ldr	r3, [pc, #196]	@ (800446c <HAL_ADC_Start+0x194>)
 80043a6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80043b0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f003 031f 	and.w	r3, r3, #31
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d12a      	bne.n	8004414 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004470 <HAL_ADC_Start+0x198>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d015      	beq.n	80043f4 <HAL_ADC_Start+0x11c>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a29      	ldr	r2, [pc, #164]	@ (8004474 <HAL_ADC_Start+0x19c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d105      	bne.n	80043de <HAL_ADC_Start+0x106>
 80043d2:	4b26      	ldr	r3, [pc, #152]	@ (800446c <HAL_ADC_Start+0x194>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f003 031f 	and.w	r3, r3, #31
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a25      	ldr	r2, [pc, #148]	@ (8004478 <HAL_ADC_Start+0x1a0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d136      	bne.n	8004456 <HAL_ADC_Start+0x17e>
 80043e8:	4b20      	ldr	r3, [pc, #128]	@ (800446c <HAL_ADC_Start+0x194>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 0310 	and.w	r3, r3, #16
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d130      	bne.n	8004456 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d129      	bne.n	8004456 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004410:	609a      	str	r2, [r3, #8]
 8004412:	e020      	b.n	8004456 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a15      	ldr	r2, [pc, #84]	@ (8004470 <HAL_ADC_Start+0x198>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d11b      	bne.n	8004456 <HAL_ADC_Start+0x17e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d114      	bne.n	8004456 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800443a:	609a      	str	r2, [r3, #8]
 800443c:	e00b      	b.n	8004456 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004442:	f043 0210 	orr.w	r2, r3, #16
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444e:	f043 0201 	orr.w	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	20000024 	.word	0x20000024
 8004468:	431bde83 	.word	0x431bde83
 800446c:	40012300 	.word	0x40012300
 8004470:	40012000 	.word	0x40012000
 8004474:	40012100 	.word	0x40012100
 8004478:	40012200 	.word	0x40012200

0800447c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800448a:	2b01      	cmp	r3, #1
 800448c:	d101      	bne.n	8004492 <HAL_ADC_Stop+0x16>
 800448e:	2302      	movs	r3, #2
 8004490:	e021      	b.n	80044d6 <HAL_ADC_Stop+0x5a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0201 	bic.w	r2, r2, #1
 80044a8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d109      	bne.n	80044cc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044bc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80044c0:	f023 0301 	bic.w	r3, r3, #1
 80044c4:	f043 0201 	orr.w	r2, r3, #1
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044fe:	d113      	bne.n	8004528 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800450a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800450e:	d10b      	bne.n	8004528 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004514:	f043 0220 	orr.w	r2, r3, #32
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e063      	b.n	80045f0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004528:	f7ff fe62 	bl	80041f0 <HAL_GetTick>
 800452c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800452e:	e021      	b.n	8004574 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004536:	d01d      	beq.n	8004574 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <HAL_ADC_PollForConversion+0x6c>
 800453e:	f7ff fe57 	bl	80041f0 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d212      	bcs.n	8004574 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b02      	cmp	r3, #2
 800455a:	d00b      	beq.n	8004574 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004560:	f043 0204 	orr.w	r2, r3, #4
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e03d      	b.n	80045f0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b02      	cmp	r3, #2
 8004580:	d1d6      	bne.n	8004530 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f06f 0212 	mvn.w	r2, #18
 800458a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004590:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d123      	bne.n	80045ee <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d11f      	bne.n	80045ee <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d006      	beq.n	80045ca <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d111      	bne.n	80045ee <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d105      	bne.n	80045ee <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e6:	f043 0201 	orr.w	r2, r3, #1
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
	...

08004614 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_ADC_ConfigChannel+0x1c>
 800462c:	2302      	movs	r3, #2
 800462e:	e105      	b.n	800483c <HAL_ADC_ConfigChannel+0x228>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b09      	cmp	r3, #9
 800463e:	d925      	bls.n	800468c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68d9      	ldr	r1, [r3, #12]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	b29b      	uxth	r3, r3
 800464c:	461a      	mov	r2, r3
 800464e:	4613      	mov	r3, r2
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	4413      	add	r3, r2
 8004654:	3b1e      	subs	r3, #30
 8004656:	2207      	movs	r2, #7
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	43da      	mvns	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	400a      	ands	r2, r1
 8004664:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68d9      	ldr	r1, [r3, #12]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689a      	ldr	r2, [r3, #8]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	b29b      	uxth	r3, r3
 8004676:	4618      	mov	r0, r3
 8004678:	4603      	mov	r3, r0
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	4403      	add	r3, r0
 800467e:	3b1e      	subs	r3, #30
 8004680:	409a      	lsls	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	60da      	str	r2, [r3, #12]
 800468a:	e022      	b.n	80046d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6919      	ldr	r1, [r3, #16]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	b29b      	uxth	r3, r3
 8004698:	461a      	mov	r2, r3
 800469a:	4613      	mov	r3, r2
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	4413      	add	r3, r2
 80046a0:	2207      	movs	r2, #7
 80046a2:	fa02 f303 	lsl.w	r3, r2, r3
 80046a6:	43da      	mvns	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	400a      	ands	r2, r1
 80046ae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6919      	ldr	r1, [r3, #16]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	689a      	ldr	r2, [r3, #8]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	4618      	mov	r0, r3
 80046c2:	4603      	mov	r3, r0
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	4403      	add	r3, r0
 80046c8:	409a      	lsls	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b06      	cmp	r3, #6
 80046d8:	d824      	bhi.n	8004724 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	4613      	mov	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	3b05      	subs	r3, #5
 80046ec:	221f      	movs	r2, #31
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43da      	mvns	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	400a      	ands	r2, r1
 80046fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	b29b      	uxth	r3, r3
 8004708:	4618      	mov	r0, r3
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	3b05      	subs	r3, #5
 8004716:	fa00 f203 	lsl.w	r2, r0, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	635a      	str	r2, [r3, #52]	@ 0x34
 8004722:	e04c      	b.n	80047be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b0c      	cmp	r3, #12
 800472a:	d824      	bhi.n	8004776 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	4613      	mov	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	3b23      	subs	r3, #35	@ 0x23
 800473e:	221f      	movs	r2, #31
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	43da      	mvns	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	400a      	ands	r2, r1
 800474c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	b29b      	uxth	r3, r3
 800475a:	4618      	mov	r0, r3
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	4613      	mov	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	3b23      	subs	r3, #35	@ 0x23
 8004768:	fa00 f203 	lsl.w	r2, r0, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	631a      	str	r2, [r3, #48]	@ 0x30
 8004774:	e023      	b.n	80047be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	4613      	mov	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	3b41      	subs	r3, #65	@ 0x41
 8004788:	221f      	movs	r2, #31
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43da      	mvns	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	400a      	ands	r2, r1
 8004796:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	4618      	mov	r0, r3
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	4613      	mov	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	3b41      	subs	r3, #65	@ 0x41
 80047b2:	fa00 f203 	lsl.w	r2, r0, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047be:	4b22      	ldr	r3, [pc, #136]	@ (8004848 <HAL_ADC_ConfigChannel+0x234>)
 80047c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a21      	ldr	r2, [pc, #132]	@ (800484c <HAL_ADC_ConfigChannel+0x238>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d109      	bne.n	80047e0 <HAL_ADC_ConfigChannel+0x1cc>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b12      	cmp	r3, #18
 80047d2:	d105      	bne.n	80047e0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a19      	ldr	r2, [pc, #100]	@ (800484c <HAL_ADC_ConfigChannel+0x238>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d123      	bne.n	8004832 <HAL_ADC_ConfigChannel+0x21e>
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b10      	cmp	r3, #16
 80047f0:	d003      	beq.n	80047fa <HAL_ADC_ConfigChannel+0x1e6>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b11      	cmp	r3, #17
 80047f8:	d11b      	bne.n	8004832 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b10      	cmp	r3, #16
 800480c:	d111      	bne.n	8004832 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800480e:	4b10      	ldr	r3, [pc, #64]	@ (8004850 <HAL_ADC_ConfigChannel+0x23c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a10      	ldr	r2, [pc, #64]	@ (8004854 <HAL_ADC_ConfigChannel+0x240>)
 8004814:	fba2 2303 	umull	r2, r3, r2, r3
 8004818:	0c9a      	lsrs	r2, r3, #18
 800481a:	4613      	mov	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004824:	e002      	b.n	800482c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	3b01      	subs	r3, #1
 800482a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1f9      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	40012300 	.word	0x40012300
 800484c:	40012000 	.word	0x40012000
 8004850:	20000024 	.word	0x20000024
 8004854:	431bde83 	.word	0x431bde83

08004858 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004860:	4b79      	ldr	r3, [pc, #484]	@ (8004a48 <ADC_Init+0x1f0>)
 8004862:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	431a      	orrs	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800488c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6859      	ldr	r1, [r3, #4]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	021a      	lsls	r2, r3, #8
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80048b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6859      	ldr	r1, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689a      	ldr	r2, [r3, #8]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6899      	ldr	r1, [r3, #8]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ea:	4a58      	ldr	r2, [pc, #352]	@ (8004a4c <ADC_Init+0x1f4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d022      	beq.n	8004936 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80048fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6899      	ldr	r1, [r3, #8]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004920:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6899      	ldr	r1, [r3, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	609a      	str	r2, [r3, #8]
 8004934:	e00f      	b.n	8004956 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004944:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004954:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0202 	bic.w	r2, r2, #2
 8004964:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6899      	ldr	r1, [r3, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	7e1b      	ldrb	r3, [r3, #24]
 8004970:	005a      	lsls	r2, r3, #1
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d01b      	beq.n	80049bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004992:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80049a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6859      	ldr	r1, [r3, #4]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ae:	3b01      	subs	r3, #1
 80049b0:	035a      	lsls	r2, r3, #13
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	430a      	orrs	r2, r1
 80049b8:	605a      	str	r2, [r3, #4]
 80049ba:	e007      	b.n	80049cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049ca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80049da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	051a      	lsls	r2, r3, #20
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004a00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6899      	ldr	r1, [r3, #8]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a0e:	025a      	lsls	r2, r3, #9
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6899      	ldr	r1, [r3, #8]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	029a      	lsls	r2, r3, #10
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	609a      	str	r2, [r3, #8]
}
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	40012300 	.word	0x40012300
 8004a4c:	0f000001 	.word	0x0f000001

08004a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a60:	4b0c      	ldr	r3, [pc, #48]	@ (8004a94 <__NVIC_SetPriorityGrouping+0x44>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a82:	4a04      	ldr	r2, [pc, #16]	@ (8004a94 <__NVIC_SetPriorityGrouping+0x44>)
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	60d3      	str	r3, [r2, #12]
}
 8004a88:	bf00      	nop
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	e000ed00 	.word	0xe000ed00

08004a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a9c:	4b04      	ldr	r3, [pc, #16]	@ (8004ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	0a1b      	lsrs	r3, r3, #8
 8004aa2:	f003 0307 	and.w	r3, r3, #7
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	e000ed00 	.word	0xe000ed00

08004ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	4603      	mov	r3, r0
 8004abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	db0b      	blt.n	8004ade <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ac6:	79fb      	ldrb	r3, [r7, #7]
 8004ac8:	f003 021f 	and.w	r2, r3, #31
 8004acc:	4907      	ldr	r1, [pc, #28]	@ (8004aec <__NVIC_EnableIRQ+0x38>)
 8004ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad2:	095b      	lsrs	r3, r3, #5
 8004ad4:	2001      	movs	r0, #1
 8004ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8004ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	e000e100 	.word	0xe000e100

08004af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	4603      	mov	r3, r0
 8004af8:	6039      	str	r1, [r7, #0]
 8004afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	db0a      	blt.n	8004b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	490c      	ldr	r1, [pc, #48]	@ (8004b3c <__NVIC_SetPriority+0x4c>)
 8004b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b0e:	0112      	lsls	r2, r2, #4
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	440b      	add	r3, r1
 8004b14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b18:	e00a      	b.n	8004b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	4908      	ldr	r1, [pc, #32]	@ (8004b40 <__NVIC_SetPriority+0x50>)
 8004b20:	79fb      	ldrb	r3, [r7, #7]
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	3b04      	subs	r3, #4
 8004b28:	0112      	lsls	r2, r2, #4
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	761a      	strb	r2, [r3, #24]
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	e000e100 	.word	0xe000e100
 8004b40:	e000ed00 	.word	0xe000ed00

08004b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b089      	sub	sp, #36	@ 0x24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	f1c3 0307 	rsb	r3, r3, #7
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	bf28      	it	cs
 8004b62:	2304      	movcs	r3, #4
 8004b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	3304      	adds	r3, #4
 8004b6a:	2b06      	cmp	r3, #6
 8004b6c:	d902      	bls.n	8004b74 <NVIC_EncodePriority+0x30>
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	3b03      	subs	r3, #3
 8004b72:	e000      	b.n	8004b76 <NVIC_EncodePriority+0x32>
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b78:	f04f 32ff 	mov.w	r2, #4294967295
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	43da      	mvns	r2, r3
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	401a      	ands	r2, r3
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	fa01 f303 	lsl.w	r3, r1, r3
 8004b96:	43d9      	mvns	r1, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b9c:	4313      	orrs	r3, r2
         );
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3724      	adds	r7, #36	@ 0x24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
	...

08004bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bbc:	d301      	bcc.n	8004bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e00f      	b.n	8004be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8004bec <SysTick_Config+0x40>)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bca:	210f      	movs	r1, #15
 8004bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd0:	f7ff ff8e 	bl	8004af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bd4:	4b05      	ldr	r3, [pc, #20]	@ (8004bec <SysTick_Config+0x40>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bda:	4b04      	ldr	r3, [pc, #16]	@ (8004bec <SysTick_Config+0x40>)
 8004bdc:	2207      	movs	r2, #7
 8004bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	e000e010 	.word	0xe000e010

08004bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f7ff ff29 	bl	8004a50 <__NVIC_SetPriorityGrouping>
}
 8004bfe:	bf00      	nop
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b086      	sub	sp, #24
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
 8004c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c18:	f7ff ff3e 	bl	8004a98 <__NVIC_GetPriorityGrouping>
 8004c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	6978      	ldr	r0, [r7, #20]
 8004c24:	f7ff ff8e 	bl	8004b44 <NVIC_EncodePriority>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c2e:	4611      	mov	r1, r2
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff ff5d 	bl	8004af0 <__NVIC_SetPriority>
}
 8004c36:	bf00      	nop
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b082      	sub	sp, #8
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	4603      	mov	r3, r0
 8004c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff ff31 	bl	8004ab4 <__NVIC_EnableIRQ>
}
 8004c52:	bf00      	nop
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b082      	sub	sp, #8
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7ff ffa2 	bl	8004bac <SysTick_Config>
 8004c68:	4603      	mov	r3, r0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b084      	sub	sp, #16
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c7e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004c80:	f7ff fab6 	bl	80041f0 <HAL_GetTick>
 8004c84:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d008      	beq.n	8004ca4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2280      	movs	r2, #128	@ 0x80
 8004c96:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e052      	b.n	8004d4a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 0216 	bic.w	r2, r2, #22
 8004cb2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695a      	ldr	r2, [r3, #20]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004cc2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d103      	bne.n	8004cd4 <HAL_DMA_Abort+0x62>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d007      	beq.n	8004ce4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0208 	bic.w	r2, r2, #8
 8004ce2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0201 	bic.w	r2, r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cf4:	e013      	b.n	8004d1e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cf6:	f7ff fa7b 	bl	80041f0 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b05      	cmp	r3, #5
 8004d02:	d90c      	bls.n	8004d1e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e015      	b.n	8004d4a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e4      	bne.n	8004cf6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d30:	223f      	movs	r2, #63	@ 0x3f
 8004d32:	409a      	lsls	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d004      	beq.n	8004d70 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2280      	movs	r2, #128	@ 0x80
 8004d6a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e00c      	b.n	8004d8a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2205      	movs	r2, #5
 8004d74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 0201 	bic.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
	...

08004d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b089      	sub	sp, #36	@ 0x24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dae:	2300      	movs	r3, #0
 8004db0:	61fb      	str	r3, [r7, #28]
 8004db2:	e16b      	b.n	800508c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004db4:	2201      	movs	r2, #1
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	f040 815a 	bne.w	8005086 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d005      	beq.n	8004dea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d130      	bne.n	8004e4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	2203      	movs	r2, #3
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	43db      	mvns	r3, r3
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e20:	2201      	movs	r2, #1
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	091b      	lsrs	r3, r3, #4
 8004e36:	f003 0201 	and.w	r2, r3, #1
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f003 0303 	and.w	r3, r3, #3
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	d017      	beq.n	8004e88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	2203      	movs	r2, #3
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	43db      	mvns	r3, r3
 8004e6a:	69ba      	ldr	r2, [r7, #24]
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d123      	bne.n	8004edc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	08da      	lsrs	r2, r3, #3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3208      	adds	r2, #8
 8004e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	220f      	movs	r2, #15
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	691a      	ldr	r2, [r3, #16]
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	08da      	lsrs	r2, r3, #3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3208      	adds	r2, #8
 8004ed6:	69b9      	ldr	r1, [r7, #24]
 8004ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	2203      	movs	r2, #3
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	43db      	mvns	r3, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f003 0203 	and.w	r2, r3, #3
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	fa02 f303 	lsl.w	r3, r2, r3
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 80b4 	beq.w	8005086 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	4b60      	ldr	r3, [pc, #384]	@ (80050a4 <HAL_GPIO_Init+0x30c>)
 8004f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f26:	4a5f      	ldr	r2, [pc, #380]	@ (80050a4 <HAL_GPIO_Init+0x30c>)
 8004f28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f2e:	4b5d      	ldr	r3, [pc, #372]	@ (80050a4 <HAL_GPIO_Init+0x30c>)
 8004f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f3a:	4a5b      	ldr	r2, [pc, #364]	@ (80050a8 <HAL_GPIO_Init+0x310>)
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	089b      	lsrs	r3, r3, #2
 8004f40:	3302      	adds	r3, #2
 8004f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	220f      	movs	r2, #15
 8004f52:	fa02 f303 	lsl.w	r3, r2, r3
 8004f56:	43db      	mvns	r3, r3
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a52      	ldr	r2, [pc, #328]	@ (80050ac <HAL_GPIO_Init+0x314>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d02b      	beq.n	8004fbe <HAL_GPIO_Init+0x226>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a51      	ldr	r2, [pc, #324]	@ (80050b0 <HAL_GPIO_Init+0x318>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d025      	beq.n	8004fba <HAL_GPIO_Init+0x222>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a50      	ldr	r2, [pc, #320]	@ (80050b4 <HAL_GPIO_Init+0x31c>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d01f      	beq.n	8004fb6 <HAL_GPIO_Init+0x21e>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a4f      	ldr	r2, [pc, #316]	@ (80050b8 <HAL_GPIO_Init+0x320>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d019      	beq.n	8004fb2 <HAL_GPIO_Init+0x21a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a4e      	ldr	r2, [pc, #312]	@ (80050bc <HAL_GPIO_Init+0x324>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <HAL_GPIO_Init+0x216>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a4d      	ldr	r2, [pc, #308]	@ (80050c0 <HAL_GPIO_Init+0x328>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00d      	beq.n	8004faa <HAL_GPIO_Init+0x212>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a4c      	ldr	r2, [pc, #304]	@ (80050c4 <HAL_GPIO_Init+0x32c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d007      	beq.n	8004fa6 <HAL_GPIO_Init+0x20e>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a4b      	ldr	r2, [pc, #300]	@ (80050c8 <HAL_GPIO_Init+0x330>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d101      	bne.n	8004fa2 <HAL_GPIO_Init+0x20a>
 8004f9e:	2307      	movs	r3, #7
 8004fa0:	e00e      	b.n	8004fc0 <HAL_GPIO_Init+0x228>
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	e00c      	b.n	8004fc0 <HAL_GPIO_Init+0x228>
 8004fa6:	2306      	movs	r3, #6
 8004fa8:	e00a      	b.n	8004fc0 <HAL_GPIO_Init+0x228>
 8004faa:	2305      	movs	r3, #5
 8004fac:	e008      	b.n	8004fc0 <HAL_GPIO_Init+0x228>
 8004fae:	2304      	movs	r3, #4
 8004fb0:	e006      	b.n	8004fc0 <HAL_GPIO_Init+0x228>
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e004      	b.n	8004fc0 <HAL_GPIO_Init+0x228>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	e002      	b.n	8004fc0 <HAL_GPIO_Init+0x228>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e000      	b.n	8004fc0 <HAL_GPIO_Init+0x228>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	69fa      	ldr	r2, [r7, #28]
 8004fc2:	f002 0203 	and.w	r2, r2, #3
 8004fc6:	0092      	lsls	r2, r2, #2
 8004fc8:	4093      	lsls	r3, r2
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fd0:	4935      	ldr	r1, [pc, #212]	@ (80050a8 <HAL_GPIO_Init+0x310>)
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	089b      	lsrs	r3, r3, #2
 8004fd6:	3302      	adds	r3, #2
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fde:	4b3b      	ldr	r3, [pc, #236]	@ (80050cc <HAL_GPIO_Init+0x334>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4013      	ands	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004ffa:	69ba      	ldr	r2, [r7, #24]
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005002:	4a32      	ldr	r2, [pc, #200]	@ (80050cc <HAL_GPIO_Init+0x334>)
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005008:	4b30      	ldr	r3, [pc, #192]	@ (80050cc <HAL_GPIO_Init+0x334>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	43db      	mvns	r3, r3
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	4013      	ands	r3, r2
 8005016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	4313      	orrs	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800502c:	4a27      	ldr	r2, [pc, #156]	@ (80050cc <HAL_GPIO_Init+0x334>)
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005032:	4b26      	ldr	r3, [pc, #152]	@ (80050cc <HAL_GPIO_Init+0x334>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	43db      	mvns	r3, r3
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	4013      	ands	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005056:	4a1d      	ldr	r2, [pc, #116]	@ (80050cc <HAL_GPIO_Init+0x334>)
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800505c:	4b1b      	ldr	r3, [pc, #108]	@ (80050cc <HAL_GPIO_Init+0x334>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	43db      	mvns	r3, r3
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	4013      	ands	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	4313      	orrs	r3, r2
 800507e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005080:	4a12      	ldr	r2, [pc, #72]	@ (80050cc <HAL_GPIO_Init+0x334>)
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	3301      	adds	r3, #1
 800508a:	61fb      	str	r3, [r7, #28]
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	2b0f      	cmp	r3, #15
 8005090:	f67f ae90 	bls.w	8004db4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005094:	bf00      	nop
 8005096:	bf00      	nop
 8005098:	3724      	adds	r7, #36	@ 0x24
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	40023800 	.word	0x40023800
 80050a8:	40013800 	.word	0x40013800
 80050ac:	40020000 	.word	0x40020000
 80050b0:	40020400 	.word	0x40020400
 80050b4:	40020800 	.word	0x40020800
 80050b8:	40020c00 	.word	0x40020c00
 80050bc:	40021000 	.word	0x40021000
 80050c0:	40021400 	.word	0x40021400
 80050c4:	40021800 	.word	0x40021800
 80050c8:	40021c00 	.word	0x40021c00
 80050cc:	40013c00 	.word	0x40013c00

080050d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	887b      	ldrh	r3, [r7, #2]
 80050e2:	4013      	ands	r3, r2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d002      	beq.n	80050ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050e8:	2301      	movs	r3, #1
 80050ea:	73fb      	strb	r3, [r7, #15]
 80050ec:	e001      	b.n	80050f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050ee:	2300      	movs	r3, #0
 80050f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	807b      	strh	r3, [r7, #2]
 800510c:	4613      	mov	r3, r2
 800510e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005110:	787b      	ldrb	r3, [r7, #1]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005116:	887a      	ldrh	r2, [r7, #2]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800511c:	e003      	b.n	8005126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800511e:	887b      	ldrh	r3, [r7, #2]
 8005120:	041a      	lsls	r2, r3, #16
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	619a      	str	r2, [r3, #24]
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	460b      	mov	r3, r1
 800513c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005144:	887a      	ldrh	r2, [r7, #2]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	4013      	ands	r3, r2
 800514a:	041a      	lsls	r2, r3, #16
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	43d9      	mvns	r1, r3
 8005150:	887b      	ldrh	r3, [r7, #2]
 8005152:	400b      	ands	r3, r1
 8005154:	431a      	orrs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	619a      	str	r2, [r3, #24]
}
 800515a:	bf00      	nop
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
	...

08005168 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e12b      	b.n	80053d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005180:	b2db      	uxtb	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d106      	bne.n	8005194 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7fe fc6c 	bl	8003a6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2224      	movs	r2, #36	@ 0x24
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0201 	bic.w	r2, r2, #1
 80051aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051cc:	f001 fc48 	bl	8006a60 <HAL_RCC_GetPCLK1Freq>
 80051d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	4a81      	ldr	r2, [pc, #516]	@ (80053dc <HAL_I2C_Init+0x274>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d807      	bhi.n	80051ec <HAL_I2C_Init+0x84>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4a80      	ldr	r2, [pc, #512]	@ (80053e0 <HAL_I2C_Init+0x278>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	bf94      	ite	ls
 80051e4:	2301      	movls	r3, #1
 80051e6:	2300      	movhi	r3, #0
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	e006      	b.n	80051fa <HAL_I2C_Init+0x92>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4a7d      	ldr	r2, [pc, #500]	@ (80053e4 <HAL_I2C_Init+0x27c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	bf94      	ite	ls
 80051f4:	2301      	movls	r3, #1
 80051f6:	2300      	movhi	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e0e7      	b.n	80053d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4a78      	ldr	r2, [pc, #480]	@ (80053e8 <HAL_I2C_Init+0x280>)
 8005206:	fba2 2303 	umull	r2, r3, r2, r3
 800520a:	0c9b      	lsrs	r3, r3, #18
 800520c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	430a      	orrs	r2, r1
 8005220:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	4a6a      	ldr	r2, [pc, #424]	@ (80053dc <HAL_I2C_Init+0x274>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d802      	bhi.n	800523c <HAL_I2C_Init+0xd4>
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	3301      	adds	r3, #1
 800523a:	e009      	b.n	8005250 <HAL_I2C_Init+0xe8>
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005242:	fb02 f303 	mul.w	r3, r2, r3
 8005246:	4a69      	ldr	r2, [pc, #420]	@ (80053ec <HAL_I2C_Init+0x284>)
 8005248:	fba2 2303 	umull	r2, r3, r2, r3
 800524c:	099b      	lsrs	r3, r3, #6
 800524e:	3301      	adds	r3, #1
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6812      	ldr	r2, [r2, #0]
 8005254:	430b      	orrs	r3, r1
 8005256:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	69db      	ldr	r3, [r3, #28]
 800525e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005262:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	495c      	ldr	r1, [pc, #368]	@ (80053dc <HAL_I2C_Init+0x274>)
 800526c:	428b      	cmp	r3, r1
 800526e:	d819      	bhi.n	80052a4 <HAL_I2C_Init+0x13c>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	1e59      	subs	r1, r3, #1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	fbb1 f3f3 	udiv	r3, r1, r3
 800527e:	1c59      	adds	r1, r3, #1
 8005280:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005284:	400b      	ands	r3, r1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <HAL_I2C_Init+0x138>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	1e59      	subs	r1, r3, #1
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	fbb1 f3f3 	udiv	r3, r1, r3
 8005298:	3301      	adds	r3, #1
 800529a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800529e:	e051      	b.n	8005344 <HAL_I2C_Init+0x1dc>
 80052a0:	2304      	movs	r3, #4
 80052a2:	e04f      	b.n	8005344 <HAL_I2C_Init+0x1dc>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d111      	bne.n	80052d0 <HAL_I2C_Init+0x168>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	1e58      	subs	r0, r3, #1
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6859      	ldr	r1, [r3, #4]
 80052b4:	460b      	mov	r3, r1
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	440b      	add	r3, r1
 80052ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80052be:	3301      	adds	r3, #1
 80052c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	bf0c      	ite	eq
 80052c8:	2301      	moveq	r3, #1
 80052ca:	2300      	movne	r3, #0
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	e012      	b.n	80052f6 <HAL_I2C_Init+0x18e>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	1e58      	subs	r0, r3, #1
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6859      	ldr	r1, [r3, #4]
 80052d8:	460b      	mov	r3, r1
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	0099      	lsls	r1, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80052e6:	3301      	adds	r3, #1
 80052e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	bf0c      	ite	eq
 80052f0:	2301      	moveq	r3, #1
 80052f2:	2300      	movne	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <HAL_I2C_Init+0x196>
 80052fa:	2301      	movs	r3, #1
 80052fc:	e022      	b.n	8005344 <HAL_I2C_Init+0x1dc>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10e      	bne.n	8005324 <HAL_I2C_Init+0x1bc>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	1e58      	subs	r0, r3, #1
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6859      	ldr	r1, [r3, #4]
 800530e:	460b      	mov	r3, r1
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	440b      	add	r3, r1
 8005314:	fbb0 f3f3 	udiv	r3, r0, r3
 8005318:	3301      	adds	r3, #1
 800531a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800531e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005322:	e00f      	b.n	8005344 <HAL_I2C_Init+0x1dc>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	1e58      	subs	r0, r3, #1
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6859      	ldr	r1, [r3, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	0099      	lsls	r1, r3, #2
 8005334:	440b      	add	r3, r1
 8005336:	fbb0 f3f3 	udiv	r3, r0, r3
 800533a:	3301      	adds	r3, #1
 800533c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005340:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	6809      	ldr	r1, [r1, #0]
 8005348:	4313      	orrs	r3, r2
 800534a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69da      	ldr	r2, [r3, #28]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	431a      	orrs	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005372:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	6911      	ldr	r1, [r2, #16]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	68d2      	ldr	r2, [r2, #12]
 800537e:	4311      	orrs	r1, r2
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6812      	ldr	r2, [r2, #0]
 8005384:	430b      	orrs	r3, r1
 8005386:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	695a      	ldr	r2, [r3, #20]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f042 0201 	orr.w	r2, r2, #1
 80053b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2220      	movs	r2, #32
 80053be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	000186a0 	.word	0x000186a0
 80053e0:	001e847f 	.word	0x001e847f
 80053e4:	003d08ff 	.word	0x003d08ff
 80053e8:	431bde83 	.word	0x431bde83
 80053ec:	10624dd3 	.word	0x10624dd3

080053f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b088      	sub	sp, #32
 80053f4:	af02      	add	r7, sp, #8
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	4608      	mov	r0, r1
 80053fa:	4611      	mov	r1, r2
 80053fc:	461a      	mov	r2, r3
 80053fe:	4603      	mov	r3, r0
 8005400:	817b      	strh	r3, [r7, #10]
 8005402:	460b      	mov	r3, r1
 8005404:	813b      	strh	r3, [r7, #8]
 8005406:	4613      	mov	r3, r2
 8005408:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800540a:	f7fe fef1 	bl	80041f0 <HAL_GetTick>
 800540e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b20      	cmp	r3, #32
 800541a:	f040 80d9 	bne.w	80055d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	9300      	str	r3, [sp, #0]
 8005422:	2319      	movs	r3, #25
 8005424:	2201      	movs	r2, #1
 8005426:	496d      	ldr	r1, [pc, #436]	@ (80055dc <HAL_I2C_Mem_Write+0x1ec>)
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 fc8b 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005434:	2302      	movs	r3, #2
 8005436:	e0cc      	b.n	80055d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_I2C_Mem_Write+0x56>
 8005442:	2302      	movs	r3, #2
 8005444:	e0c5      	b.n	80055d2 <HAL_I2C_Mem_Write+0x1e2>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b01      	cmp	r3, #1
 800545a:	d007      	beq.n	800546c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800547a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2221      	movs	r2, #33	@ 0x21
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2240      	movs	r2, #64	@ 0x40
 8005488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6a3a      	ldr	r2, [r7, #32]
 8005496:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800549c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4a4d      	ldr	r2, [pc, #308]	@ (80055e0 <HAL_I2C_Mem_Write+0x1f0>)
 80054ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054ae:	88f8      	ldrh	r0, [r7, #6]
 80054b0:	893a      	ldrh	r2, [r7, #8]
 80054b2:	8979      	ldrh	r1, [r7, #10]
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	9301      	str	r3, [sp, #4]
 80054b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	4603      	mov	r3, r0
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 fac2 	bl	8005a48 <I2C_RequestMemoryWrite>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d052      	beq.n	8005570 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e081      	b.n	80055d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 fd50 	bl	8005f78 <I2C_WaitOnTXEFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00d      	beq.n	80054fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d107      	bne.n	80054f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e06b      	b.n	80055d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fe:	781a      	ldrb	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550a:	1c5a      	adds	r2, r3, #1
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005514:	3b01      	subs	r3, #1
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005520:	b29b      	uxth	r3, r3
 8005522:	3b01      	subs	r3, #1
 8005524:	b29a      	uxth	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	f003 0304 	and.w	r3, r3, #4
 8005534:	2b04      	cmp	r3, #4
 8005536:	d11b      	bne.n	8005570 <HAL_I2C_Mem_Write+0x180>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800553c:	2b00      	cmp	r3, #0
 800553e:	d017      	beq.n	8005570 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005544:	781a      	ldrb	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005566:	b29b      	uxth	r3, r3
 8005568:	3b01      	subs	r3, #1
 800556a:	b29a      	uxth	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1aa      	bne.n	80054ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 fd43 	bl	8006008 <I2C_WaitOnBTFFlagUntilTimeout>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00d      	beq.n	80055a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558c:	2b04      	cmp	r3, #4
 800558e:	d107      	bne.n	80055a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800559e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e016      	b.n	80055d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	e000      	b.n	80055d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80055d0:	2302      	movs	r3, #2
  }
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	00100002 	.word	0x00100002
 80055e0:	ffff0000 	.word	0xffff0000

080055e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b08c      	sub	sp, #48	@ 0x30
 80055e8:	af02      	add	r7, sp, #8
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	4608      	mov	r0, r1
 80055ee:	4611      	mov	r1, r2
 80055f0:	461a      	mov	r2, r3
 80055f2:	4603      	mov	r3, r0
 80055f4:	817b      	strh	r3, [r7, #10]
 80055f6:	460b      	mov	r3, r1
 80055f8:	813b      	strh	r3, [r7, #8]
 80055fa:	4613      	mov	r3, r2
 80055fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055fe:	f7fe fdf7 	bl	80041f0 <HAL_GetTick>
 8005602:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b20      	cmp	r3, #32
 800560e:	f040 8214 	bne.w	8005a3a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	2319      	movs	r3, #25
 8005618:	2201      	movs	r2, #1
 800561a:	497b      	ldr	r1, [pc, #492]	@ (8005808 <HAL_I2C_Mem_Read+0x224>)
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 fb91 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005628:	2302      	movs	r3, #2
 800562a:	e207      	b.n	8005a3c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005632:	2b01      	cmp	r3, #1
 8005634:	d101      	bne.n	800563a <HAL_I2C_Mem_Read+0x56>
 8005636:	2302      	movs	r3, #2
 8005638:	e200      	b.n	8005a3c <HAL_I2C_Mem_Read+0x458>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b01      	cmp	r3, #1
 800564e:	d007      	beq.n	8005660 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800566e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2222      	movs	r2, #34	@ 0x22
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2240      	movs	r2, #64	@ 0x40
 800567c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800568a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005690:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4a5b      	ldr	r2, [pc, #364]	@ (800580c <HAL_I2C_Mem_Read+0x228>)
 80056a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056a2:	88f8      	ldrh	r0, [r7, #6]
 80056a4:	893a      	ldrh	r2, [r7, #8]
 80056a6:	8979      	ldrh	r1, [r7, #10]
 80056a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056aa:	9301      	str	r3, [sp, #4]
 80056ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	4603      	mov	r3, r0
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 fa5e 	bl	8005b74 <I2C_RequestMemoryRead>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e1bc      	b.n	8005a3c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d113      	bne.n	80056f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ca:	2300      	movs	r3, #0
 80056cc:	623b      	str	r3, [r7, #32]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	623b      	str	r3, [r7, #32]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	623b      	str	r3, [r7, #32]
 80056de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	e190      	b.n	8005a14 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d11b      	bne.n	8005732 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005708:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800570a:	2300      	movs	r3, #0
 800570c:	61fb      	str	r3, [r7, #28]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	61fb      	str	r3, [r7, #28]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	61fb      	str	r3, [r7, #28]
 800571e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	e170      	b.n	8005a14 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005736:	2b02      	cmp	r3, #2
 8005738:	d11b      	bne.n	8005772 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005748:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005758:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800575a:	2300      	movs	r3, #0
 800575c:	61bb      	str	r3, [r7, #24]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	61bb      	str	r3, [r7, #24]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	61bb      	str	r3, [r7, #24]
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	e150      	b.n	8005a14 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005772:	2300      	movs	r3, #0
 8005774:	617b      	str	r3, [r7, #20]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	695b      	ldr	r3, [r3, #20]
 800577c:	617b      	str	r3, [r7, #20]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	617b      	str	r3, [r7, #20]
 8005786:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005788:	e144      	b.n	8005a14 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800578e:	2b03      	cmp	r3, #3
 8005790:	f200 80f1 	bhi.w	8005976 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005798:	2b01      	cmp	r3, #1
 800579a:	d123      	bne.n	80057e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800579c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800579e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 fc79 	bl	8006098 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e145      	b.n	8005a3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691a      	ldr	r2, [r3, #16]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ba:	b2d2      	uxtb	r2, r2
 80057bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057cc:	3b01      	subs	r3, #1
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d8:	b29b      	uxth	r3, r3
 80057da:	3b01      	subs	r3, #1
 80057dc:	b29a      	uxth	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80057e2:	e117      	b.n	8005a14 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d14e      	bne.n	800588a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f2:	2200      	movs	r2, #0
 80057f4:	4906      	ldr	r1, [pc, #24]	@ (8005810 <HAL_I2C_Mem_Read+0x22c>)
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 faa4 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d008      	beq.n	8005814 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e11a      	b.n	8005a3c <HAL_I2C_Mem_Read+0x458>
 8005806:	bf00      	nop
 8005808:	00100002 	.word	0x00100002
 800580c:	ffff0000 	.word	0xffff0000
 8005810:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005822:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691a      	ldr	r2, [r3, #16]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582e:	b2d2      	uxtb	r2, r2
 8005830:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005840:	3b01      	subs	r3, #1
 8005842:	b29a      	uxth	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800584c:	b29b      	uxth	r3, r3
 800584e:	3b01      	subs	r3, #1
 8005850:	b29a      	uxth	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005872:	3b01      	subs	r3, #1
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800587e:	b29b      	uxth	r3, r3
 8005880:	3b01      	subs	r3, #1
 8005882:	b29a      	uxth	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005888:	e0c4      	b.n	8005a14 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800588a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005890:	2200      	movs	r2, #0
 8005892:	496c      	ldr	r1, [pc, #432]	@ (8005a44 <HAL_I2C_Mem_Read+0x460>)
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 fa55 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e0cb      	b.n	8005a3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691a      	ldr	r2, [r3, #16]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058d0:	3b01      	subs	r3, #1
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058dc:	b29b      	uxth	r3, r3
 80058de:	3b01      	subs	r3, #1
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ec:	2200      	movs	r2, #0
 80058ee:	4955      	ldr	r1, [pc, #340]	@ (8005a44 <HAL_I2C_Mem_Read+0x460>)
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 fa27 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e09d      	b.n	8005a3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800590e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691a      	ldr	r2, [r3, #16]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591a:	b2d2      	uxtb	r2, r2
 800591c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005938:	b29b      	uxth	r3, r3
 800593a:	3b01      	subs	r3, #1
 800593c:	b29a      	uxth	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	691a      	ldr	r2, [r3, #16]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594c:	b2d2      	uxtb	r2, r2
 800594e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005954:	1c5a      	adds	r2, r3, #1
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800595e:	3b01      	subs	r3, #1
 8005960:	b29a      	uxth	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800596a:	b29b      	uxth	r3, r3
 800596c:	3b01      	subs	r3, #1
 800596e:	b29a      	uxth	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005974:	e04e      	b.n	8005a14 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005978:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 fb8c 	bl	8006098 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e058      	b.n	8005a3c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	691a      	ldr	r2, [r3, #16]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	f003 0304 	and.w	r3, r3, #4
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d124      	bne.n	8005a14 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ce:	2b03      	cmp	r3, #3
 80059d0:	d107      	bne.n	80059e2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059e0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	691a      	ldr	r2, [r3, #16]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059fe:	3b01      	subs	r3, #1
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f47f aeb6 	bne.w	800578a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2220      	movs	r2, #32
 8005a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005a36:	2300      	movs	r3, #0
 8005a38:	e000      	b.n	8005a3c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005a3a:	2302      	movs	r3, #2
  }
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3728      	adds	r7, #40	@ 0x28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}
 8005a44:	00010004 	.word	0x00010004

08005a48 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b088      	sub	sp, #32
 8005a4c:	af02      	add	r7, sp, #8
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	4608      	mov	r0, r1
 8005a52:	4611      	mov	r1, r2
 8005a54:	461a      	mov	r2, r3
 8005a56:	4603      	mov	r3, r0
 8005a58:	817b      	strh	r3, [r7, #10]
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	813b      	strh	r3, [r7, #8]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f000 f960 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00d      	beq.n	8005aa6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a98:	d103      	bne.n	8005aa2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005aa0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e05f      	b.n	8005b66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005aa6:	897b      	ldrh	r3, [r7, #10]
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	461a      	mov	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005ab4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab8:	6a3a      	ldr	r2, [r7, #32]
 8005aba:	492d      	ldr	r1, [pc, #180]	@ (8005b70 <I2C_RequestMemoryWrite+0x128>)
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 f9bb 	bl	8005e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e04c      	b.n	8005b66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005acc:	2300      	movs	r3, #0
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	617b      	str	r3, [r7, #20]
 8005ae0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ae4:	6a39      	ldr	r1, [r7, #32]
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f000 fa46 	bl	8005f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00d      	beq.n	8005b0e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	d107      	bne.n	8005b0a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e02b      	b.n	8005b66 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005b0e:	88fb      	ldrh	r3, [r7, #6]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d105      	bne.n	8005b20 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b14:	893b      	ldrh	r3, [r7, #8]
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	611a      	str	r2, [r3, #16]
 8005b1e:	e021      	b.n	8005b64 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005b20:	893b      	ldrh	r3, [r7, #8]
 8005b22:	0a1b      	lsrs	r3, r3, #8
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b30:	6a39      	ldr	r1, [r7, #32]
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 fa20 	bl	8005f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00d      	beq.n	8005b5a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d107      	bne.n	8005b56 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e005      	b.n	8005b66 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005b5a:	893b      	ldrh	r3, [r7, #8]
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	00010002 	.word	0x00010002

08005b74 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b088      	sub	sp, #32
 8005b78:	af02      	add	r7, sp, #8
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	4608      	mov	r0, r1
 8005b7e:	4611      	mov	r1, r2
 8005b80:	461a      	mov	r2, r3
 8005b82:	4603      	mov	r3, r0
 8005b84:	817b      	strh	r3, [r7, #10]
 8005b86:	460b      	mov	r3, r1
 8005b88:	813b      	strh	r3, [r7, #8]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b9c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005bba:	68f8      	ldr	r0, [r7, #12]
 8005bbc:	f000 f8c2 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00d      	beq.n	8005be2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bd4:	d103      	bne.n	8005bde <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bdc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e0aa      	b.n	8005d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005be2:	897b      	ldrh	r3, [r7, #10]
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	461a      	mov	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005bf0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	6a3a      	ldr	r2, [r7, #32]
 8005bf6:	4952      	ldr	r1, [pc, #328]	@ (8005d40 <I2C_RequestMemoryRead+0x1cc>)
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 f91d 	bl	8005e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e097      	b.n	8005d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c08:	2300      	movs	r3, #0
 8005c0a:	617b      	str	r3, [r7, #20]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c20:	6a39      	ldr	r1, [r7, #32]
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f000 f9a8 	bl	8005f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00d      	beq.n	8005c4a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d107      	bne.n	8005c46 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e076      	b.n	8005d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c4a:	88fb      	ldrh	r3, [r7, #6]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d105      	bne.n	8005c5c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c50:	893b      	ldrh	r3, [r7, #8]
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	611a      	str	r2, [r3, #16]
 8005c5a:	e021      	b.n	8005ca0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c5c:	893b      	ldrh	r3, [r7, #8]
 8005c5e:	0a1b      	lsrs	r3, r3, #8
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c6c:	6a39      	ldr	r1, [r7, #32]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 f982 	bl	8005f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00d      	beq.n	8005c96 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	d107      	bne.n	8005c92 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e050      	b.n	8005d38 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c96:	893b      	ldrh	r3, [r7, #8]
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ca2:	6a39      	ldr	r1, [r7, #32]
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 f967 	bl	8005f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00d      	beq.n	8005ccc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb4:	2b04      	cmp	r3, #4
 8005cb6:	d107      	bne.n	8005cc8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cc6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e035      	b.n	8005d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cda:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 f82b 	bl	8005d44 <I2C_WaitOnFlagUntilTimeout>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00d      	beq.n	8005d10 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d02:	d103      	bne.n	8005d0c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e013      	b.n	8005d38 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d10:	897b      	ldrh	r3, [r7, #10]
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	f043 0301 	orr.w	r3, r3, #1
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d22:	6a3a      	ldr	r2, [r7, #32]
 8005d24:	4906      	ldr	r1, [pc, #24]	@ (8005d40 <I2C_RequestMemoryRead+0x1cc>)
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 f886 	bl	8005e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e000      	b.n	8005d38 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3718      	adds	r7, #24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	00010002 	.word	0x00010002

08005d44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	4613      	mov	r3, r2
 8005d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d54:	e048      	b.n	8005de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5c:	d044      	beq.n	8005de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d5e:	f7fe fa47 	bl	80041f0 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d302      	bcc.n	8005d74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d139      	bne.n	8005de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	0c1b      	lsrs	r3, r3, #16
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d10d      	bne.n	8005d9a <I2C_WaitOnFlagUntilTimeout+0x56>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	43da      	mvns	r2, r3
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	4013      	ands	r3, r2
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	bf0c      	ite	eq
 8005d90:	2301      	moveq	r3, #1
 8005d92:	2300      	movne	r3, #0
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	461a      	mov	r2, r3
 8005d98:	e00c      	b.n	8005db4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	43da      	mvns	r2, r3
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	4013      	ands	r3, r2
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	bf0c      	ite	eq
 8005dac:	2301      	moveq	r3, #1
 8005dae:	2300      	movne	r3, #0
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	461a      	mov	r2, r3
 8005db4:	79fb      	ldrb	r3, [r7, #7]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d116      	bne.n	8005de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd4:	f043 0220 	orr.w	r2, r3, #32
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e023      	b.n	8005e30 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	0c1b      	lsrs	r3, r3, #16
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d10d      	bne.n	8005e0e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	43da      	mvns	r2, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	bf0c      	ite	eq
 8005e04:	2301      	moveq	r3, #1
 8005e06:	2300      	movne	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	e00c      	b.n	8005e28 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	43da      	mvns	r2, r3
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	4013      	ands	r3, r2
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	bf0c      	ite	eq
 8005e20:	2301      	moveq	r3, #1
 8005e22:	2300      	movne	r3, #0
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	461a      	mov	r2, r3
 8005e28:	79fb      	ldrb	r3, [r7, #7]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d093      	beq.n	8005d56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
 8005e44:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e46:	e071      	b.n	8005f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e56:	d123      	bne.n	8005ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e66:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8c:	f043 0204 	orr.w	r2, r3, #4
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e067      	b.n	8005f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea6:	d041      	beq.n	8005f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea8:	f7fe f9a2 	bl	80041f0 <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d302      	bcc.n	8005ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d136      	bne.n	8005f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	0c1b      	lsrs	r3, r3, #16
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d10c      	bne.n	8005ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	43da      	mvns	r2, r3
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	bf14      	ite	ne
 8005eda:	2301      	movne	r3, #1
 8005edc:	2300      	moveq	r3, #0
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	e00b      	b.n	8005efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	43da      	mvns	r2, r3
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	4013      	ands	r3, r2
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	bf14      	ite	ne
 8005ef4:	2301      	movne	r3, #1
 8005ef6:	2300      	moveq	r3, #0
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d016      	beq.n	8005f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f18:	f043 0220 	orr.w	r2, r3, #32
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e021      	b.n	8005f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	0c1b      	lsrs	r3, r3, #16
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d10c      	bne.n	8005f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	43da      	mvns	r2, r3
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	4013      	ands	r3, r2
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	bf14      	ite	ne
 8005f48:	2301      	movne	r3, #1
 8005f4a:	2300      	moveq	r3, #0
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	e00b      	b.n	8005f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	43da      	mvns	r2, r3
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	bf14      	ite	ne
 8005f62:	2301      	movne	r3, #1
 8005f64:	2300      	moveq	r3, #0
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f47f af6d 	bne.w	8005e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f84:	e034      	b.n	8005ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f000 f8e3 	bl	8006152 <I2C_IsAcknowledgeFailed>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e034      	b.n	8006000 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9c:	d028      	beq.n	8005ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f9e:	f7fe f927 	bl	80041f0 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d302      	bcc.n	8005fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d11d      	bne.n	8005ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fbe:	2b80      	cmp	r3, #128	@ 0x80
 8005fc0:	d016      	beq.n	8005ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2220      	movs	r2, #32
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fdc:	f043 0220 	orr.w	r2, r3, #32
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e007      	b.n	8006000 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ffa:	2b80      	cmp	r3, #128	@ 0x80
 8005ffc:	d1c3      	bne.n	8005f86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006014:	e034      	b.n	8006080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006016:	68f8      	ldr	r0, [r7, #12]
 8006018:	f000 f89b 	bl	8006152 <I2C_IsAcknowledgeFailed>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e034      	b.n	8006090 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602c:	d028      	beq.n	8006080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800602e:	f7fe f8df 	bl	80041f0 <HAL_GetTick>
 8006032:	4602      	mov	r2, r0
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	429a      	cmp	r2, r3
 800603c:	d302      	bcc.n	8006044 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d11d      	bne.n	8006080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	f003 0304 	and.w	r3, r3, #4
 800604e:	2b04      	cmp	r3, #4
 8006050:	d016      	beq.n	8006080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2220      	movs	r2, #32
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606c:	f043 0220 	orr.w	r2, r3, #32
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	e007      	b.n	8006090 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	f003 0304 	and.w	r3, r3, #4
 800608a:	2b04      	cmp	r3, #4
 800608c:	d1c3      	bne.n	8006016 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060a4:	e049      	b.n	800613a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	f003 0310 	and.w	r3, r3, #16
 80060b0:	2b10      	cmp	r3, #16
 80060b2:	d119      	bne.n	80060e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0210 	mvn.w	r2, #16
 80060bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2220      	movs	r2, #32
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e030      	b.n	800614a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e8:	f7fe f882 	bl	80041f0 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d302      	bcc.n	80060fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d11d      	bne.n	800613a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006108:	2b40      	cmp	r3, #64	@ 0x40
 800610a:	d016      	beq.n	800613a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2220      	movs	r2, #32
 8006116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006126:	f043 0220 	orr.w	r2, r3, #32
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e007      	b.n	800614a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006144:	2b40      	cmp	r3, #64	@ 0x40
 8006146:	d1ae      	bne.n	80060a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006164:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006168:	d11b      	bne.n	80061a2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006172:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2220      	movs	r2, #32
 800617e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618e:	f043 0204 	orr.w	r2, r3, #4
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e000      	b.n	80061a4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80061b6:	4b06      	ldr	r3, [pc, #24]	@ (80061d0 <HAL_PWR_EnableBkUpAccess+0x20>)
 80061b8:	2201      	movs	r2, #1
 80061ba:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80061bc:	4b05      	ldr	r3, [pc, #20]	@ (80061d4 <HAL_PWR_EnableBkUpAccess+0x24>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80061c2:	687b      	ldr	r3, [r7, #4]
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	420e0020 	.word	0x420e0020
 80061d4:	40007000 	.word	0x40007000

080061d8 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80061de:	4b06      	ldr	r3, [pc, #24]	@ (80061f8 <HAL_PWR_DisableBkUpAccess+0x20>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80061e4:	4b05      	ldr	r3, [pc, #20]	@ (80061fc <HAL_PWR_DisableBkUpAccess+0x24>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80061ea:	687b      	ldr	r3, [r7, #4]
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr
 80061f8:	420e0020 	.word	0x420e0020
 80061fc:	40007000 	.word	0x40007000

08006200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e267      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d075      	beq.n	800630a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800621e:	4b88      	ldr	r3, [pc, #544]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 030c 	and.w	r3, r3, #12
 8006226:	2b04      	cmp	r3, #4
 8006228:	d00c      	beq.n	8006244 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800622a:	4b85      	ldr	r3, [pc, #532]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006232:	2b08      	cmp	r3, #8
 8006234:	d112      	bne.n	800625c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006236:	4b82      	ldr	r3, [pc, #520]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800623e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006242:	d10b      	bne.n	800625c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006244:	4b7e      	ldr	r3, [pc, #504]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d05b      	beq.n	8006308 <HAL_RCC_OscConfig+0x108>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d157      	bne.n	8006308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e242      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006264:	d106      	bne.n	8006274 <HAL_RCC_OscConfig+0x74>
 8006266:	4b76      	ldr	r3, [pc, #472]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a75      	ldr	r2, [pc, #468]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 800626c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	e01d      	b.n	80062b0 <HAL_RCC_OscConfig+0xb0>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800627c:	d10c      	bne.n	8006298 <HAL_RCC_OscConfig+0x98>
 800627e:	4b70      	ldr	r3, [pc, #448]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a6f      	ldr	r2, [pc, #444]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 8006284:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	4b6d      	ldr	r3, [pc, #436]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a6c      	ldr	r2, [pc, #432]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 8006290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	e00b      	b.n	80062b0 <HAL_RCC_OscConfig+0xb0>
 8006298:	4b69      	ldr	r3, [pc, #420]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a68      	ldr	r2, [pc, #416]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 800629e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	4b66      	ldr	r3, [pc, #408]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a65      	ldr	r2, [pc, #404]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 80062aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d013      	beq.n	80062e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b8:	f7fd ff9a 	bl	80041f0 <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062c0:	f7fd ff96 	bl	80041f0 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b64      	cmp	r3, #100	@ 0x64
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e207      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062d2:	4b5b      	ldr	r3, [pc, #364]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d0f0      	beq.n	80062c0 <HAL_RCC_OscConfig+0xc0>
 80062de:	e014      	b.n	800630a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e0:	f7fd ff86 	bl	80041f0 <HAL_GetTick>
 80062e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062e6:	e008      	b.n	80062fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062e8:	f7fd ff82 	bl	80041f0 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	2b64      	cmp	r3, #100	@ 0x64
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e1f3      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062fa:	4b51      	ldr	r3, [pc, #324]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1f0      	bne.n	80062e8 <HAL_RCC_OscConfig+0xe8>
 8006306:	e000      	b.n	800630a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d063      	beq.n	80063de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006316:	4b4a      	ldr	r3, [pc, #296]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 030c 	and.w	r3, r3, #12
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00b      	beq.n	800633a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006322:	4b47      	ldr	r3, [pc, #284]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800632a:	2b08      	cmp	r3, #8
 800632c:	d11c      	bne.n	8006368 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800632e:	4b44      	ldr	r3, [pc, #272]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d116      	bne.n	8006368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800633a:	4b41      	ldr	r3, [pc, #260]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <HAL_RCC_OscConfig+0x152>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d001      	beq.n	8006352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e1c7      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006352:	4b3b      	ldr	r3, [pc, #236]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	4937      	ldr	r1, [pc, #220]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 8006362:	4313      	orrs	r3, r2
 8006364:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006366:	e03a      	b.n	80063de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d020      	beq.n	80063b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006370:	4b34      	ldr	r3, [pc, #208]	@ (8006444 <HAL_RCC_OscConfig+0x244>)
 8006372:	2201      	movs	r2, #1
 8006374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006376:	f7fd ff3b 	bl	80041f0 <HAL_GetTick>
 800637a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800637c:	e008      	b.n	8006390 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800637e:	f7fd ff37 	bl	80041f0 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d901      	bls.n	8006390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e1a8      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006390:	4b2b      	ldr	r3, [pc, #172]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0f0      	beq.n	800637e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800639c:	4b28      	ldr	r3, [pc, #160]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	4925      	ldr	r1, [pc, #148]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	600b      	str	r3, [r1, #0]
 80063b0:	e015      	b.n	80063de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063b2:	4b24      	ldr	r3, [pc, #144]	@ (8006444 <HAL_RCC_OscConfig+0x244>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b8:	f7fd ff1a 	bl	80041f0 <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063c0:	f7fd ff16 	bl	80041f0 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e187      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f0      	bne.n	80063c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d036      	beq.n	8006458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d016      	beq.n	8006420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063f2:	4b15      	ldr	r3, [pc, #84]	@ (8006448 <HAL_RCC_OscConfig+0x248>)
 80063f4:	2201      	movs	r2, #1
 80063f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f8:	f7fd fefa 	bl	80041f0 <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006400:	f7fd fef6 	bl	80041f0 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e167      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006412:	4b0b      	ldr	r3, [pc, #44]	@ (8006440 <HAL_RCC_OscConfig+0x240>)
 8006414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0f0      	beq.n	8006400 <HAL_RCC_OscConfig+0x200>
 800641e:	e01b      	b.n	8006458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006420:	4b09      	ldr	r3, [pc, #36]	@ (8006448 <HAL_RCC_OscConfig+0x248>)
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006426:	f7fd fee3 	bl	80041f0 <HAL_GetTick>
 800642a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800642c:	e00e      	b.n	800644c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800642e:	f7fd fedf 	bl	80041f0 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d907      	bls.n	800644c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e150      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
 8006440:	40023800 	.word	0x40023800
 8006444:	42470000 	.word	0x42470000
 8006448:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800644c:	4b88      	ldr	r3, [pc, #544]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 800644e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1ea      	bne.n	800642e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 8097 	beq.w	8006594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006466:	2300      	movs	r3, #0
 8006468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800646a:	4b81      	ldr	r3, [pc, #516]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 800646c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10f      	bne.n	8006496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006476:	2300      	movs	r3, #0
 8006478:	60bb      	str	r3, [r7, #8]
 800647a:	4b7d      	ldr	r3, [pc, #500]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 800647c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647e:	4a7c      	ldr	r2, [pc, #496]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 8006480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006484:	6413      	str	r3, [r2, #64]	@ 0x40
 8006486:	4b7a      	ldr	r3, [pc, #488]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 8006488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800648a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800648e:	60bb      	str	r3, [r7, #8]
 8006490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006492:	2301      	movs	r3, #1
 8006494:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006496:	4b77      	ldr	r3, [pc, #476]	@ (8006674 <HAL_RCC_OscConfig+0x474>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d118      	bne.n	80064d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064a2:	4b74      	ldr	r3, [pc, #464]	@ (8006674 <HAL_RCC_OscConfig+0x474>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a73      	ldr	r2, [pc, #460]	@ (8006674 <HAL_RCC_OscConfig+0x474>)
 80064a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ae:	f7fd fe9f 	bl	80041f0 <HAL_GetTick>
 80064b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b4:	e008      	b.n	80064c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064b6:	f7fd fe9b 	bl	80041f0 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d901      	bls.n	80064c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e10c      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064c8:	4b6a      	ldr	r3, [pc, #424]	@ (8006674 <HAL_RCC_OscConfig+0x474>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0f0      	beq.n	80064b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d106      	bne.n	80064ea <HAL_RCC_OscConfig+0x2ea>
 80064dc:	4b64      	ldr	r3, [pc, #400]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 80064de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064e0:	4a63      	ldr	r2, [pc, #396]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 80064e2:	f043 0301 	orr.w	r3, r3, #1
 80064e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80064e8:	e01c      	b.n	8006524 <HAL_RCC_OscConfig+0x324>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	2b05      	cmp	r3, #5
 80064f0:	d10c      	bne.n	800650c <HAL_RCC_OscConfig+0x30c>
 80064f2:	4b5f      	ldr	r3, [pc, #380]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 80064f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064f6:	4a5e      	ldr	r2, [pc, #376]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 80064f8:	f043 0304 	orr.w	r3, r3, #4
 80064fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80064fe:	4b5c      	ldr	r3, [pc, #368]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 8006500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006502:	4a5b      	ldr	r2, [pc, #364]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 8006504:	f043 0301 	orr.w	r3, r3, #1
 8006508:	6713      	str	r3, [r2, #112]	@ 0x70
 800650a:	e00b      	b.n	8006524 <HAL_RCC_OscConfig+0x324>
 800650c:	4b58      	ldr	r3, [pc, #352]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 800650e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006510:	4a57      	ldr	r2, [pc, #348]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 8006512:	f023 0301 	bic.w	r3, r3, #1
 8006516:	6713      	str	r3, [r2, #112]	@ 0x70
 8006518:	4b55      	ldr	r3, [pc, #340]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 800651a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800651c:	4a54      	ldr	r2, [pc, #336]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 800651e:	f023 0304 	bic.w	r3, r3, #4
 8006522:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d015      	beq.n	8006558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800652c:	f7fd fe60 	bl	80041f0 <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006532:	e00a      	b.n	800654a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006534:	f7fd fe5c 	bl	80041f0 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006542:	4293      	cmp	r3, r2
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e0cb      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800654a:	4b49      	ldr	r3, [pc, #292]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 800654c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0ee      	beq.n	8006534 <HAL_RCC_OscConfig+0x334>
 8006556:	e014      	b.n	8006582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006558:	f7fd fe4a 	bl	80041f0 <HAL_GetTick>
 800655c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800655e:	e00a      	b.n	8006576 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006560:	f7fd fe46 	bl	80041f0 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800656e:	4293      	cmp	r3, r2
 8006570:	d901      	bls.n	8006576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e0b5      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006576:	4b3e      	ldr	r3, [pc, #248]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 8006578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1ee      	bne.n	8006560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006582:	7dfb      	ldrb	r3, [r7, #23]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d105      	bne.n	8006594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006588:	4b39      	ldr	r3, [pc, #228]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 800658a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658c:	4a38      	ldr	r2, [pc, #224]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 800658e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006592:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 80a1 	beq.w	80066e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800659e:	4b34      	ldr	r3, [pc, #208]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f003 030c 	and.w	r3, r3, #12
 80065a6:	2b08      	cmp	r3, #8
 80065a8:	d05c      	beq.n	8006664 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d141      	bne.n	8006636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065b2:	4b31      	ldr	r3, [pc, #196]	@ (8006678 <HAL_RCC_OscConfig+0x478>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065b8:	f7fd fe1a 	bl	80041f0 <HAL_GetTick>
 80065bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c0:	f7fd fe16 	bl	80041f0 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e087      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065d2:	4b27      	ldr	r3, [pc, #156]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1f0      	bne.n	80065c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69da      	ldr	r2, [r3, #28]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	431a      	orrs	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ec:	019b      	lsls	r3, r3, #6
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f4:	085b      	lsrs	r3, r3, #1
 80065f6:	3b01      	subs	r3, #1
 80065f8:	041b      	lsls	r3, r3, #16
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006600:	061b      	lsls	r3, r3, #24
 8006602:	491b      	ldr	r1, [pc, #108]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 8006604:	4313      	orrs	r3, r2
 8006606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006608:	4b1b      	ldr	r3, [pc, #108]	@ (8006678 <HAL_RCC_OscConfig+0x478>)
 800660a:	2201      	movs	r2, #1
 800660c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800660e:	f7fd fdef 	bl	80041f0 <HAL_GetTick>
 8006612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006614:	e008      	b.n	8006628 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006616:	f7fd fdeb 	bl	80041f0 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d901      	bls.n	8006628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e05c      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006628:	4b11      	ldr	r3, [pc, #68]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0f0      	beq.n	8006616 <HAL_RCC_OscConfig+0x416>
 8006634:	e054      	b.n	80066e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006636:	4b10      	ldr	r3, [pc, #64]	@ (8006678 <HAL_RCC_OscConfig+0x478>)
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800663c:	f7fd fdd8 	bl	80041f0 <HAL_GetTick>
 8006640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006642:	e008      	b.n	8006656 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006644:	f7fd fdd4 	bl	80041f0 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d901      	bls.n	8006656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e045      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006656:	4b06      	ldr	r3, [pc, #24]	@ (8006670 <HAL_RCC_OscConfig+0x470>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1f0      	bne.n	8006644 <HAL_RCC_OscConfig+0x444>
 8006662:	e03d      	b.n	80066e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d107      	bne.n	800667c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e038      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
 8006670:	40023800 	.word	0x40023800
 8006674:	40007000 	.word	0x40007000
 8006678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800667c:	4b1b      	ldr	r3, [pc, #108]	@ (80066ec <HAL_RCC_OscConfig+0x4ec>)
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d028      	beq.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006694:	429a      	cmp	r2, r3
 8006696:	d121      	bne.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d11a      	bne.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80066ac:	4013      	ands	r3, r2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80066b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d111      	bne.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c2:	085b      	lsrs	r3, r3, #1
 80066c4:	3b01      	subs	r3, #1
 80066c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d107      	bne.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066d8:	429a      	cmp	r2, r3
 80066da:	d001      	beq.n	80066e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e000      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3718      	adds	r7, #24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	40023800 	.word	0x40023800

080066f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e0cc      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006704:	4b68      	ldr	r3, [pc, #416]	@ (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	429a      	cmp	r2, r3
 8006710:	d90c      	bls.n	800672c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006712:	4b65      	ldr	r3, [pc, #404]	@ (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800671a:	4b63      	ldr	r3, [pc, #396]	@ (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0307 	and.w	r3, r3, #7
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d001      	beq.n	800672c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e0b8      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b00      	cmp	r3, #0
 8006736:	d020      	beq.n	800677a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d005      	beq.n	8006750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006744:	4b59      	ldr	r3, [pc, #356]	@ (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	4a58      	ldr	r2, [pc, #352]	@ (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 800674a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800674e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0308 	and.w	r3, r3, #8
 8006758:	2b00      	cmp	r3, #0
 800675a:	d005      	beq.n	8006768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800675c:	4b53      	ldr	r3, [pc, #332]	@ (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	4a52      	ldr	r2, [pc, #328]	@ (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006762:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006768:	4b50      	ldr	r3, [pc, #320]	@ (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	494d      	ldr	r1, [pc, #308]	@ (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006776:	4313      	orrs	r3, r2
 8006778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d044      	beq.n	8006810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d107      	bne.n	800679e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800678e:	4b47      	ldr	r3, [pc, #284]	@ (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d119      	bne.n	80067ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e07f      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d003      	beq.n	80067ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	d107      	bne.n	80067be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ae:	4b3f      	ldr	r3, [pc, #252]	@ (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d109      	bne.n	80067ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e06f      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067be:	4b3b      	ldr	r3, [pc, #236]	@ (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e067      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067ce:	4b37      	ldr	r3, [pc, #220]	@ (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f023 0203 	bic.w	r2, r3, #3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	4934      	ldr	r1, [pc, #208]	@ (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067e0:	f7fd fd06 	bl	80041f0 <HAL_GetTick>
 80067e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e6:	e00a      	b.n	80067fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e8:	f7fd fd02 	bl	80041f0 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e04f      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067fe:	4b2b      	ldr	r3, [pc, #172]	@ (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 020c 	and.w	r2, r3, #12
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	429a      	cmp	r2, r3
 800680e:	d1eb      	bne.n	80067e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006810:	4b25      	ldr	r3, [pc, #148]	@ (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0307 	and.w	r3, r3, #7
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d20c      	bcs.n	8006838 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800681e:	4b22      	ldr	r3, [pc, #136]	@ (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006826:	4b20      	ldr	r3, [pc, #128]	@ (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	429a      	cmp	r2, r3
 8006832:	d001      	beq.n	8006838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e032      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b00      	cmp	r3, #0
 8006842:	d008      	beq.n	8006856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006844:	4b19      	ldr	r3, [pc, #100]	@ (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	4916      	ldr	r1, [pc, #88]	@ (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006852:	4313      	orrs	r3, r2
 8006854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	2b00      	cmp	r3, #0
 8006860:	d009      	beq.n	8006876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006862:	4b12      	ldr	r3, [pc, #72]	@ (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	490e      	ldr	r1, [pc, #56]	@ (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006872:	4313      	orrs	r3, r2
 8006874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006876:	f000 f821 	bl	80068bc <HAL_RCC_GetSysClockFreq>
 800687a:	4602      	mov	r2, r0
 800687c:	4b0b      	ldr	r3, [pc, #44]	@ (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	091b      	lsrs	r3, r3, #4
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	490a      	ldr	r1, [pc, #40]	@ (80068b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006888:	5ccb      	ldrb	r3, [r1, r3]
 800688a:	fa22 f303 	lsr.w	r3, r2, r3
 800688e:	4a09      	ldr	r2, [pc, #36]	@ (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006892:	4b09      	ldr	r3, [pc, #36]	@ (80068b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4618      	mov	r0, r3
 8006898:	f7fd fc66 	bl	8004168 <HAL_InitTick>

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	40023c00 	.word	0x40023c00
 80068ac:	40023800 	.word	0x40023800
 80068b0:	080103d0 	.word	0x080103d0
 80068b4:	20000024 	.word	0x20000024
 80068b8:	20000028 	.word	0x20000028

080068bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068c0:	b090      	sub	sp, #64	@ 0x40
 80068c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80068cc:	2300      	movs	r3, #0
 80068ce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068d4:	4b59      	ldr	r3, [pc, #356]	@ (8006a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f003 030c 	and.w	r3, r3, #12
 80068dc:	2b08      	cmp	r3, #8
 80068de:	d00d      	beq.n	80068fc <HAL_RCC_GetSysClockFreq+0x40>
 80068e0:	2b08      	cmp	r3, #8
 80068e2:	f200 80a1 	bhi.w	8006a28 <HAL_RCC_GetSysClockFreq+0x16c>
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <HAL_RCC_GetSysClockFreq+0x34>
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	d003      	beq.n	80068f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80068ee:	e09b      	b.n	8006a28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068f0:	4b53      	ldr	r3, [pc, #332]	@ (8006a40 <HAL_RCC_GetSysClockFreq+0x184>)
 80068f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80068f4:	e09b      	b.n	8006a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068f6:	4b53      	ldr	r3, [pc, #332]	@ (8006a44 <HAL_RCC_GetSysClockFreq+0x188>)
 80068f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80068fa:	e098      	b.n	8006a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068fc:	4b4f      	ldr	r3, [pc, #316]	@ (8006a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006904:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006906:	4b4d      	ldr	r3, [pc, #308]	@ (8006a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d028      	beq.n	8006964 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006912:	4b4a      	ldr	r3, [pc, #296]	@ (8006a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	099b      	lsrs	r3, r3, #6
 8006918:	2200      	movs	r2, #0
 800691a:	623b      	str	r3, [r7, #32]
 800691c:	627a      	str	r2, [r7, #36]	@ 0x24
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006924:	2100      	movs	r1, #0
 8006926:	4b47      	ldr	r3, [pc, #284]	@ (8006a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8006928:	fb03 f201 	mul.w	r2, r3, r1
 800692c:	2300      	movs	r3, #0
 800692e:	fb00 f303 	mul.w	r3, r0, r3
 8006932:	4413      	add	r3, r2
 8006934:	4a43      	ldr	r2, [pc, #268]	@ (8006a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8006936:	fba0 1202 	umull	r1, r2, r0, r2
 800693a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800693c:	460a      	mov	r2, r1
 800693e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006942:	4413      	add	r3, r2
 8006944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006948:	2200      	movs	r2, #0
 800694a:	61bb      	str	r3, [r7, #24]
 800694c:	61fa      	str	r2, [r7, #28]
 800694e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006952:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006956:	f7fa f997 	bl	8000c88 <__aeabi_uldivmod>
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	4613      	mov	r3, r2
 8006960:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006962:	e053      	b.n	8006a0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006964:	4b35      	ldr	r3, [pc, #212]	@ (8006a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	099b      	lsrs	r3, r3, #6
 800696a:	2200      	movs	r2, #0
 800696c:	613b      	str	r3, [r7, #16]
 800696e:	617a      	str	r2, [r7, #20]
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006976:	f04f 0b00 	mov.w	fp, #0
 800697a:	4652      	mov	r2, sl
 800697c:	465b      	mov	r3, fp
 800697e:	f04f 0000 	mov.w	r0, #0
 8006982:	f04f 0100 	mov.w	r1, #0
 8006986:	0159      	lsls	r1, r3, #5
 8006988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800698c:	0150      	lsls	r0, r2, #5
 800698e:	4602      	mov	r2, r0
 8006990:	460b      	mov	r3, r1
 8006992:	ebb2 080a 	subs.w	r8, r2, sl
 8006996:	eb63 090b 	sbc.w	r9, r3, fp
 800699a:	f04f 0200 	mov.w	r2, #0
 800699e:	f04f 0300 	mov.w	r3, #0
 80069a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80069a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80069aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80069ae:	ebb2 0408 	subs.w	r4, r2, r8
 80069b2:	eb63 0509 	sbc.w	r5, r3, r9
 80069b6:	f04f 0200 	mov.w	r2, #0
 80069ba:	f04f 0300 	mov.w	r3, #0
 80069be:	00eb      	lsls	r3, r5, #3
 80069c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069c4:	00e2      	lsls	r2, r4, #3
 80069c6:	4614      	mov	r4, r2
 80069c8:	461d      	mov	r5, r3
 80069ca:	eb14 030a 	adds.w	r3, r4, sl
 80069ce:	603b      	str	r3, [r7, #0]
 80069d0:	eb45 030b 	adc.w	r3, r5, fp
 80069d4:	607b      	str	r3, [r7, #4]
 80069d6:	f04f 0200 	mov.w	r2, #0
 80069da:	f04f 0300 	mov.w	r3, #0
 80069de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069e2:	4629      	mov	r1, r5
 80069e4:	028b      	lsls	r3, r1, #10
 80069e6:	4621      	mov	r1, r4
 80069e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069ec:	4621      	mov	r1, r4
 80069ee:	028a      	lsls	r2, r1, #10
 80069f0:	4610      	mov	r0, r2
 80069f2:	4619      	mov	r1, r3
 80069f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069f6:	2200      	movs	r2, #0
 80069f8:	60bb      	str	r3, [r7, #8]
 80069fa:	60fa      	str	r2, [r7, #12]
 80069fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a00:	f7fa f942 	bl	8000c88 <__aeabi_uldivmod>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4613      	mov	r3, r2
 8006a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	0c1b      	lsrs	r3, r3, #16
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	3301      	adds	r3, #1
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006a1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006a26:	e002      	b.n	8006a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a28:	4b05      	ldr	r3, [pc, #20]	@ (8006a40 <HAL_RCC_GetSysClockFreq+0x184>)
 8006a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3740      	adds	r7, #64	@ 0x40
 8006a34:	46bd      	mov	sp, r7
 8006a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a3a:	bf00      	nop
 8006a3c:	40023800 	.word	0x40023800
 8006a40:	00f42400 	.word	0x00f42400
 8006a44:	017d7840 	.word	0x017d7840

08006a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a4c:	4b03      	ldr	r3, [pc, #12]	@ (8006a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	20000024 	.word	0x20000024

08006a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a64:	f7ff fff0 	bl	8006a48 <HAL_RCC_GetHCLKFreq>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	4b05      	ldr	r3, [pc, #20]	@ (8006a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	0a9b      	lsrs	r3, r3, #10
 8006a70:	f003 0307 	and.w	r3, r3, #7
 8006a74:	4903      	ldr	r1, [pc, #12]	@ (8006a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a76:	5ccb      	ldrb	r3, [r1, r3]
 8006a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40023800 	.word	0x40023800
 8006a84:	080103e0 	.word	0x080103e0

08006a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a8c:	f7ff ffdc 	bl	8006a48 <HAL_RCC_GetHCLKFreq>
 8006a90:	4602      	mov	r2, r0
 8006a92:	4b05      	ldr	r3, [pc, #20]	@ (8006aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	0b5b      	lsrs	r3, r3, #13
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	4903      	ldr	r1, [pc, #12]	@ (8006aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a9e:	5ccb      	ldrb	r3, [r1, r3]
 8006aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40023800 	.word	0x40023800
 8006aac:	080103e0 	.word	0x080103e0

08006ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e041      	b.n	8006b46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d106      	bne.n	8006adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7fd f810 	bl	8003afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	3304      	adds	r3, #4
 8006aec:	4619      	mov	r1, r3
 8006aee:	4610      	mov	r0, r2
 8006af0:	f000 fff0 	bl	8007ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
	...

08006b50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d001      	beq.n	8006b68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e046      	b.n	8006bf6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a23      	ldr	r2, [pc, #140]	@ (8006c04 <HAL_TIM_Base_Start+0xb4>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d022      	beq.n	8006bc0 <HAL_TIM_Base_Start+0x70>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b82:	d01d      	beq.n	8006bc0 <HAL_TIM_Base_Start+0x70>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a1f      	ldr	r2, [pc, #124]	@ (8006c08 <HAL_TIM_Base_Start+0xb8>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d018      	beq.n	8006bc0 <HAL_TIM_Base_Start+0x70>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a1e      	ldr	r2, [pc, #120]	@ (8006c0c <HAL_TIM_Base_Start+0xbc>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d013      	beq.n	8006bc0 <HAL_TIM_Base_Start+0x70>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a1c      	ldr	r2, [pc, #112]	@ (8006c10 <HAL_TIM_Base_Start+0xc0>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d00e      	beq.n	8006bc0 <HAL_TIM_Base_Start+0x70>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a1b      	ldr	r2, [pc, #108]	@ (8006c14 <HAL_TIM_Base_Start+0xc4>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d009      	beq.n	8006bc0 <HAL_TIM_Base_Start+0x70>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a19      	ldr	r2, [pc, #100]	@ (8006c18 <HAL_TIM_Base_Start+0xc8>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d004      	beq.n	8006bc0 <HAL_TIM_Base_Start+0x70>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a18      	ldr	r2, [pc, #96]	@ (8006c1c <HAL_TIM_Base_Start+0xcc>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d111      	bne.n	8006be4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f003 0307 	and.w	r3, r3, #7
 8006bca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2b06      	cmp	r3, #6
 8006bd0:	d010      	beq.n	8006bf4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f042 0201 	orr.w	r2, r2, #1
 8006be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006be2:	e007      	b.n	8006bf4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f042 0201 	orr.w	r2, r2, #1
 8006bf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	40010000 	.word	0x40010000
 8006c08:	40000400 	.word	0x40000400
 8006c0c:	40000800 	.word	0x40000800
 8006c10:	40000c00 	.word	0x40000c00
 8006c14:	40010400 	.word	0x40010400
 8006c18:	40014000 	.word	0x40014000
 8006c1c:	40001800 	.word	0x40001800

08006c20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e041      	b.n	8006cb6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d106      	bne.n	8006c4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f839 	bl	8006cbe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4610      	mov	r0, r2
 8006c60:	f000 ff38 	bl	8007ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006cc6:	bf00      	nop
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
	...

08006cd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d109      	bne.n	8006cf8 <HAL_TIM_PWM_Start+0x24>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	bf14      	ite	ne
 8006cf0:	2301      	movne	r3, #1
 8006cf2:	2300      	moveq	r3, #0
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	e022      	b.n	8006d3e <HAL_TIM_PWM_Start+0x6a>
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2b04      	cmp	r3, #4
 8006cfc:	d109      	bne.n	8006d12 <HAL_TIM_PWM_Start+0x3e>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	bf14      	ite	ne
 8006d0a:	2301      	movne	r3, #1
 8006d0c:	2300      	moveq	r3, #0
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	e015      	b.n	8006d3e <HAL_TIM_PWM_Start+0x6a>
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	2b08      	cmp	r3, #8
 8006d16:	d109      	bne.n	8006d2c <HAL_TIM_PWM_Start+0x58>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	bf14      	ite	ne
 8006d24:	2301      	movne	r3, #1
 8006d26:	2300      	moveq	r3, #0
 8006d28:	b2db      	uxtb	r3, r3
 8006d2a:	e008      	b.n	8006d3e <HAL_TIM_PWM_Start+0x6a>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	bf14      	ite	ne
 8006d38:	2301      	movne	r3, #1
 8006d3a:	2300      	moveq	r3, #0
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e07c      	b.n	8006e40 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d104      	bne.n	8006d56 <HAL_TIM_PWM_Start+0x82>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d54:	e013      	b.n	8006d7e <HAL_TIM_PWM_Start+0xaa>
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2b04      	cmp	r3, #4
 8006d5a:	d104      	bne.n	8006d66 <HAL_TIM_PWM_Start+0x92>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d64:	e00b      	b.n	8006d7e <HAL_TIM_PWM_Start+0xaa>
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	2b08      	cmp	r3, #8
 8006d6a:	d104      	bne.n	8006d76 <HAL_TIM_PWM_Start+0xa2>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d74:	e003      	b.n	8006d7e <HAL_TIM_PWM_Start+0xaa>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2202      	movs	r2, #2
 8006d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2201      	movs	r2, #1
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f001 fac4 	bl	8008314 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a2d      	ldr	r2, [pc, #180]	@ (8006e48 <HAL_TIM_PWM_Start+0x174>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d004      	beq.n	8006da0 <HAL_TIM_PWM_Start+0xcc>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a2c      	ldr	r2, [pc, #176]	@ (8006e4c <HAL_TIM_PWM_Start+0x178>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d101      	bne.n	8006da4 <HAL_TIM_PWM_Start+0xd0>
 8006da0:	2301      	movs	r3, #1
 8006da2:	e000      	b.n	8006da6 <HAL_TIM_PWM_Start+0xd2>
 8006da4:	2300      	movs	r3, #0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d007      	beq.n	8006dba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006db8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a22      	ldr	r2, [pc, #136]	@ (8006e48 <HAL_TIM_PWM_Start+0x174>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d022      	beq.n	8006e0a <HAL_TIM_PWM_Start+0x136>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dcc:	d01d      	beq.n	8006e0a <HAL_TIM_PWM_Start+0x136>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8006e50 <HAL_TIM_PWM_Start+0x17c>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d018      	beq.n	8006e0a <HAL_TIM_PWM_Start+0x136>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8006e54 <HAL_TIM_PWM_Start+0x180>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d013      	beq.n	8006e0a <HAL_TIM_PWM_Start+0x136>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a1c      	ldr	r2, [pc, #112]	@ (8006e58 <HAL_TIM_PWM_Start+0x184>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00e      	beq.n	8006e0a <HAL_TIM_PWM_Start+0x136>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a16      	ldr	r2, [pc, #88]	@ (8006e4c <HAL_TIM_PWM_Start+0x178>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d009      	beq.n	8006e0a <HAL_TIM_PWM_Start+0x136>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a18      	ldr	r2, [pc, #96]	@ (8006e5c <HAL_TIM_PWM_Start+0x188>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d004      	beq.n	8006e0a <HAL_TIM_PWM_Start+0x136>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a16      	ldr	r2, [pc, #88]	@ (8006e60 <HAL_TIM_PWM_Start+0x18c>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d111      	bne.n	8006e2e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	f003 0307 	and.w	r3, r3, #7
 8006e14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b06      	cmp	r3, #6
 8006e1a:	d010      	beq.n	8006e3e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f042 0201 	orr.w	r2, r2, #1
 8006e2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e2c:	e007      	b.n	8006e3e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f042 0201 	orr.w	r2, r2, #1
 8006e3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	40010000 	.word	0x40010000
 8006e4c:	40010400 	.word	0x40010400
 8006e50:	40000400 	.word	0x40000400
 8006e54:	40000800 	.word	0x40000800
 8006e58:	40000c00 	.word	0x40000c00
 8006e5c:	40014000 	.word	0x40014000
 8006e60:	40001800 	.word	0x40001800

08006e64 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e041      	b.n	8006efa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d106      	bne.n	8006e90 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f839 	bl	8006f02 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	4610      	mov	r0, r2
 8006ea4:	f000 fe16 	bl	8007ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b083      	sub	sp, #12
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006f0a:	bf00      	nop
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
	...

08006f18 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d104      	bne.n	8006f36 <HAL_TIM_IC_Start_IT+0x1e>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	e013      	b.n	8006f5e <HAL_TIM_IC_Start_IT+0x46>
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	d104      	bne.n	8006f46 <HAL_TIM_IC_Start_IT+0x2e>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	e00b      	b.n	8006f5e <HAL_TIM_IC_Start_IT+0x46>
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b08      	cmp	r3, #8
 8006f4a:	d104      	bne.n	8006f56 <HAL_TIM_IC_Start_IT+0x3e>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	e003      	b.n	8006f5e <HAL_TIM_IC_Start_IT+0x46>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d104      	bne.n	8006f70 <HAL_TIM_IC_Start_IT+0x58>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	e013      	b.n	8006f98 <HAL_TIM_IC_Start_IT+0x80>
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	2b04      	cmp	r3, #4
 8006f74:	d104      	bne.n	8006f80 <HAL_TIM_IC_Start_IT+0x68>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	e00b      	b.n	8006f98 <HAL_TIM_IC_Start_IT+0x80>
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	2b08      	cmp	r3, #8
 8006f84:	d104      	bne.n	8006f90 <HAL_TIM_IC_Start_IT+0x78>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	e003      	b.n	8006f98 <HAL_TIM_IC_Start_IT+0x80>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f9a:	7bbb      	ldrb	r3, [r7, #14]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d102      	bne.n	8006fa6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fa0:	7b7b      	ldrb	r3, [r7, #13]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d001      	beq.n	8006faa <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e0cc      	b.n	8007144 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d104      	bne.n	8006fba <HAL_TIM_IC_Start_IT+0xa2>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006fb8:	e013      	b.n	8006fe2 <HAL_TIM_IC_Start_IT+0xca>
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	2b04      	cmp	r3, #4
 8006fbe:	d104      	bne.n	8006fca <HAL_TIM_IC_Start_IT+0xb2>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fc8:	e00b      	b.n	8006fe2 <HAL_TIM_IC_Start_IT+0xca>
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b08      	cmp	r3, #8
 8006fce:	d104      	bne.n	8006fda <HAL_TIM_IC_Start_IT+0xc2>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fd8:	e003      	b.n	8006fe2 <HAL_TIM_IC_Start_IT+0xca>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2202      	movs	r2, #2
 8006fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d104      	bne.n	8006ff2 <HAL_TIM_IC_Start_IT+0xda>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2202      	movs	r2, #2
 8006fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ff0:	e013      	b.n	800701a <HAL_TIM_IC_Start_IT+0x102>
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b04      	cmp	r3, #4
 8006ff6:	d104      	bne.n	8007002 <HAL_TIM_IC_Start_IT+0xea>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007000:	e00b      	b.n	800701a <HAL_TIM_IC_Start_IT+0x102>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b08      	cmp	r3, #8
 8007006:	d104      	bne.n	8007012 <HAL_TIM_IC_Start_IT+0xfa>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2202      	movs	r2, #2
 800700c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007010:	e003      	b.n	800701a <HAL_TIM_IC_Start_IT+0x102>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2202      	movs	r2, #2
 8007016:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b0c      	cmp	r3, #12
 800701e:	d841      	bhi.n	80070a4 <HAL_TIM_IC_Start_IT+0x18c>
 8007020:	a201      	add	r2, pc, #4	@ (adr r2, 8007028 <HAL_TIM_IC_Start_IT+0x110>)
 8007022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007026:	bf00      	nop
 8007028:	0800705d 	.word	0x0800705d
 800702c:	080070a5 	.word	0x080070a5
 8007030:	080070a5 	.word	0x080070a5
 8007034:	080070a5 	.word	0x080070a5
 8007038:	0800706f 	.word	0x0800706f
 800703c:	080070a5 	.word	0x080070a5
 8007040:	080070a5 	.word	0x080070a5
 8007044:	080070a5 	.word	0x080070a5
 8007048:	08007081 	.word	0x08007081
 800704c:	080070a5 	.word	0x080070a5
 8007050:	080070a5 	.word	0x080070a5
 8007054:	080070a5 	.word	0x080070a5
 8007058:	08007093 	.word	0x08007093
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68da      	ldr	r2, [r3, #12]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f042 0202 	orr.w	r2, r2, #2
 800706a:	60da      	str	r2, [r3, #12]
      break;
 800706c:	e01d      	b.n	80070aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f042 0204 	orr.w	r2, r2, #4
 800707c:	60da      	str	r2, [r3, #12]
      break;
 800707e:	e014      	b.n	80070aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0208 	orr.w	r2, r2, #8
 800708e:	60da      	str	r2, [r3, #12]
      break;
 8007090:	e00b      	b.n	80070aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68da      	ldr	r2, [r3, #12]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f042 0210 	orr.w	r2, r2, #16
 80070a0:	60da      	str	r2, [r3, #12]
      break;
 80070a2:	e002      	b.n	80070aa <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	73fb      	strb	r3, [r7, #15]
      break;
 80070a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80070aa:	7bfb      	ldrb	r3, [r7, #15]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d148      	bne.n	8007142 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2201      	movs	r2, #1
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f001 f92b 	bl	8008314 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a22      	ldr	r2, [pc, #136]	@ (800714c <HAL_TIM_IC_Start_IT+0x234>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d022      	beq.n	800710e <HAL_TIM_IC_Start_IT+0x1f6>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070d0:	d01d      	beq.n	800710e <HAL_TIM_IC_Start_IT+0x1f6>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007150 <HAL_TIM_IC_Start_IT+0x238>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d018      	beq.n	800710e <HAL_TIM_IC_Start_IT+0x1f6>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a1c      	ldr	r2, [pc, #112]	@ (8007154 <HAL_TIM_IC_Start_IT+0x23c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d013      	beq.n	800710e <HAL_TIM_IC_Start_IT+0x1f6>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a1b      	ldr	r2, [pc, #108]	@ (8007158 <HAL_TIM_IC_Start_IT+0x240>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d00e      	beq.n	800710e <HAL_TIM_IC_Start_IT+0x1f6>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a19      	ldr	r2, [pc, #100]	@ (800715c <HAL_TIM_IC_Start_IT+0x244>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d009      	beq.n	800710e <HAL_TIM_IC_Start_IT+0x1f6>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a18      	ldr	r2, [pc, #96]	@ (8007160 <HAL_TIM_IC_Start_IT+0x248>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d004      	beq.n	800710e <HAL_TIM_IC_Start_IT+0x1f6>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a16      	ldr	r2, [pc, #88]	@ (8007164 <HAL_TIM_IC_Start_IT+0x24c>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d111      	bne.n	8007132 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	f003 0307 	and.w	r3, r3, #7
 8007118:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2b06      	cmp	r3, #6
 800711e:	d010      	beq.n	8007142 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f042 0201 	orr.w	r2, r2, #1
 800712e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007130:	e007      	b.n	8007142 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f042 0201 	orr.w	r2, r2, #1
 8007140:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007142:	7bfb      	ldrb	r3, [r7, #15]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	40010000 	.word	0x40010000
 8007150:	40000400 	.word	0x40000400
 8007154:	40000800 	.word	0x40000800
 8007158:	40000c00 	.word	0x40000c00
 800715c:	40010400 	.word	0x40010400
 8007160:	40014000 	.word	0x40014000
 8007164:	40001800 	.word	0x40001800

08007168 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e097      	b.n	80072ac <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b00      	cmp	r3, #0
 8007186:	d106      	bne.n	8007196 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7fc fd65 	bl	8003c60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2202      	movs	r2, #2
 800719a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6812      	ldr	r2, [r2, #0]
 80071a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071ac:	f023 0307 	bic.w	r3, r3, #7
 80071b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	3304      	adds	r3, #4
 80071ba:	4619      	mov	r1, r3
 80071bc:	4610      	mov	r0, r2
 80071be:	f000 fc89 	bl	8007ad4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071ea:	f023 0303 	bic.w	r3, r3, #3
 80071ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	689a      	ldr	r2, [r3, #8]
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	021b      	lsls	r3, r3, #8
 80071fa:	4313      	orrs	r3, r2
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	4313      	orrs	r3, r2
 8007200:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007208:	f023 030c 	bic.w	r3, r3, #12
 800720c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007214:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007218:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	68da      	ldr	r2, [r3, #12]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	69db      	ldr	r3, [r3, #28]
 8007222:	021b      	lsls	r3, r3, #8
 8007224:	4313      	orrs	r3, r2
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	4313      	orrs	r3, r2
 800722a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	011a      	lsls	r2, r3, #4
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	031b      	lsls	r3, r3, #12
 8007238:	4313      	orrs	r3, r2
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	4313      	orrs	r3, r2
 800723e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007246:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800724e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	685a      	ldr	r2, [r3, #4]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	695b      	ldr	r3, [r3, #20]
 8007258:	011b      	lsls	r3, r3, #4
 800725a:	4313      	orrs	r3, r2
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	4313      	orrs	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80072c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80072cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80072dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d110      	bne.n	8007306 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80072e4:	7bfb      	ldrb	r3, [r7, #15]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d102      	bne.n	80072f0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80072ea:	7b7b      	ldrb	r3, [r7, #13]
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d001      	beq.n	80072f4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	e069      	b.n	80073c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2202      	movs	r2, #2
 80072f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2202      	movs	r2, #2
 8007300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007304:	e031      	b.n	800736a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2b04      	cmp	r3, #4
 800730a:	d110      	bne.n	800732e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800730c:	7bbb      	ldrb	r3, [r7, #14]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d102      	bne.n	8007318 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007312:	7b3b      	ldrb	r3, [r7, #12]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d001      	beq.n	800731c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e055      	b.n	80073c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2202      	movs	r2, #2
 8007320:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2202      	movs	r2, #2
 8007328:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800732c:	e01d      	b.n	800736a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800732e:	7bfb      	ldrb	r3, [r7, #15]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d108      	bne.n	8007346 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007334:	7bbb      	ldrb	r3, [r7, #14]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d105      	bne.n	8007346 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800733a:	7b7b      	ldrb	r3, [r7, #13]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d102      	bne.n	8007346 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007340:	7b3b      	ldrb	r3, [r7, #12]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d001      	beq.n	800734a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e03e      	b.n	80073c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2202      	movs	r2, #2
 800734e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2202      	movs	r2, #2
 8007356:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2202      	movs	r2, #2
 800735e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2202      	movs	r2, #2
 8007366:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <HAL_TIM_Encoder_Start+0xc4>
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	2b04      	cmp	r3, #4
 8007374:	d008      	beq.n	8007388 <HAL_TIM_Encoder_Start+0xd4>
 8007376:	e00f      	b.n	8007398 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2201      	movs	r2, #1
 800737e:	2100      	movs	r1, #0
 8007380:	4618      	mov	r0, r3
 8007382:	f000 ffc7 	bl	8008314 <TIM_CCxChannelCmd>
      break;
 8007386:	e016      	b.n	80073b6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2201      	movs	r2, #1
 800738e:	2104      	movs	r1, #4
 8007390:	4618      	mov	r0, r3
 8007392:	f000 ffbf 	bl	8008314 <TIM_CCxChannelCmd>
      break;
 8007396:	e00e      	b.n	80073b6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2201      	movs	r2, #1
 800739e:	2100      	movs	r1, #0
 80073a0:	4618      	mov	r0, r3
 80073a2:	f000 ffb7 	bl	8008314 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2201      	movs	r2, #1
 80073ac:	2104      	movs	r1, #4
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 ffb0 	bl	8008314 <TIM_CCxChannelCmd>
      break;
 80073b4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f042 0201 	orr.w	r2, r2, #1
 80073c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3710      	adds	r7, #16
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d020      	beq.n	8007434 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f003 0302 	and.w	r3, r3, #2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d01b      	beq.n	8007434 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f06f 0202 	mvn.w	r2, #2
 8007404:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	f003 0303 	and.w	r3, r3, #3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7fb fdac 	bl	8002f78 <HAL_TIM_IC_CaptureCallback>
 8007420:	e005      	b.n	800742e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fb38 	bl	8007a98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fb3f 	bl	8007aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	f003 0304 	and.w	r3, r3, #4
 800743a:	2b00      	cmp	r3, #0
 800743c:	d020      	beq.n	8007480 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f003 0304 	and.w	r3, r3, #4
 8007444:	2b00      	cmp	r3, #0
 8007446:	d01b      	beq.n	8007480 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f06f 0204 	mvn.w	r2, #4
 8007450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2202      	movs	r2, #2
 8007456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007462:	2b00      	cmp	r3, #0
 8007464:	d003      	beq.n	800746e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7fb fd86 	bl	8002f78 <HAL_TIM_IC_CaptureCallback>
 800746c:	e005      	b.n	800747a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fb12 	bl	8007a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fb19 	bl	8007aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	f003 0308 	and.w	r3, r3, #8
 8007486:	2b00      	cmp	r3, #0
 8007488:	d020      	beq.n	80074cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f003 0308 	and.w	r3, r3, #8
 8007490:	2b00      	cmp	r3, #0
 8007492:	d01b      	beq.n	80074cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f06f 0208 	mvn.w	r2, #8
 800749c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2204      	movs	r2, #4
 80074a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	f003 0303 	and.w	r3, r3, #3
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7fb fd60 	bl	8002f78 <HAL_TIM_IC_CaptureCallback>
 80074b8:	e005      	b.n	80074c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 faec 	bl	8007a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 faf3 	bl	8007aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	f003 0310 	and.w	r3, r3, #16
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d020      	beq.n	8007518 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f003 0310 	and.w	r3, r3, #16
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d01b      	beq.n	8007518 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f06f 0210 	mvn.w	r2, #16
 80074e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2208      	movs	r2, #8
 80074ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7fb fd3a 	bl	8002f78 <HAL_TIM_IC_CaptureCallback>
 8007504:	e005      	b.n	8007512 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fac6 	bl	8007a98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 facd 	bl	8007aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00c      	beq.n	800753c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b00      	cmp	r3, #0
 800752a:	d007      	beq.n	800753c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f06f 0201 	mvn.w	r2, #1
 8007534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 faa4 	bl	8007a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00c      	beq.n	8007560 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800754c:	2b00      	cmp	r3, #0
 800754e:	d007      	beq.n	8007560 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 ffd8 	bl	8008510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00c      	beq.n	8007584 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007570:	2b00      	cmp	r3, #0
 8007572:	d007      	beq.n	8007584 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800757c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 fa9e 	bl	8007ac0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	f003 0320 	and.w	r3, r3, #32
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00c      	beq.n	80075a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f003 0320 	and.w	r3, r3, #32
 8007594:	2b00      	cmp	r3, #0
 8007596:	d007      	beq.n	80075a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f06f 0220 	mvn.w	r2, #32
 80075a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 ffaa 	bl	80084fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80075a8:	bf00      	nop
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075bc:	2300      	movs	r3, #0
 80075be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d101      	bne.n	80075ce <HAL_TIM_IC_ConfigChannel+0x1e>
 80075ca:	2302      	movs	r3, #2
 80075cc:	e088      	b.n	80076e0 <HAL_TIM_IC_ConfigChannel+0x130>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d11b      	bne.n	8007614 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80075ec:	f000 fcce 	bl	8007f8c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	699a      	ldr	r2, [r3, #24]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f022 020c 	bic.w	r2, r2, #12
 80075fe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6999      	ldr	r1, [r3, #24]
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	689a      	ldr	r2, [r3, #8]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	619a      	str	r2, [r3, #24]
 8007612:	e060      	b.n	80076d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b04      	cmp	r3, #4
 8007618:	d11c      	bne.n	8007654 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800762a:	f000 fd52 	bl	80080d2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	699a      	ldr	r2, [r3, #24]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800763c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6999      	ldr	r1, [r3, #24]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	021a      	lsls	r2, r3, #8
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	619a      	str	r2, [r3, #24]
 8007652:	e040      	b.n	80076d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b08      	cmp	r3, #8
 8007658:	d11b      	bne.n	8007692 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800766a:	f000 fd9f 	bl	80081ac <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	69da      	ldr	r2, [r3, #28]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f022 020c 	bic.w	r2, r2, #12
 800767c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	69d9      	ldr	r1, [r3, #28]
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	689a      	ldr	r2, [r3, #8]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	430a      	orrs	r2, r1
 800768e:	61da      	str	r2, [r3, #28]
 8007690:	e021      	b.n	80076d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2b0c      	cmp	r3, #12
 8007696:	d11c      	bne.n	80076d2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80076a8:	f000 fdbc 	bl	8008224 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	69da      	ldr	r2, [r3, #28]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80076ba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	69d9      	ldr	r1, [r3, #28]
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	021a      	lsls	r2, r3, #8
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	430a      	orrs	r2, r1
 80076ce:	61da      	str	r2, [r3, #28]
 80076d0:	e001      	b.n	80076d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80076de:	7dfb      	ldrb	r3, [r7, #23]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3718      	adds	r7, #24
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d101      	bne.n	8007706 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007702:	2302      	movs	r3, #2
 8007704:	e0ae      	b.n	8007864 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b0c      	cmp	r3, #12
 8007712:	f200 809f 	bhi.w	8007854 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007716:	a201      	add	r2, pc, #4	@ (adr r2, 800771c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771c:	08007751 	.word	0x08007751
 8007720:	08007855 	.word	0x08007855
 8007724:	08007855 	.word	0x08007855
 8007728:	08007855 	.word	0x08007855
 800772c:	08007791 	.word	0x08007791
 8007730:	08007855 	.word	0x08007855
 8007734:	08007855 	.word	0x08007855
 8007738:	08007855 	.word	0x08007855
 800773c:	080077d3 	.word	0x080077d3
 8007740:	08007855 	.word	0x08007855
 8007744:	08007855 	.word	0x08007855
 8007748:	08007855 	.word	0x08007855
 800774c:	08007813 	.word	0x08007813
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68b9      	ldr	r1, [r7, #8]
 8007756:	4618      	mov	r0, r3
 8007758:	f000 fa68 	bl	8007c2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	699a      	ldr	r2, [r3, #24]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f042 0208 	orr.w	r2, r2, #8
 800776a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	699a      	ldr	r2, [r3, #24]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 0204 	bic.w	r2, r2, #4
 800777a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6999      	ldr	r1, [r3, #24]
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	691a      	ldr	r2, [r3, #16]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	430a      	orrs	r2, r1
 800778c:	619a      	str	r2, [r3, #24]
      break;
 800778e:	e064      	b.n	800785a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68b9      	ldr	r1, [r7, #8]
 8007796:	4618      	mov	r0, r3
 8007798:	f000 fab8 	bl	8007d0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	699a      	ldr	r2, [r3, #24]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	699a      	ldr	r2, [r3, #24]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	6999      	ldr	r1, [r3, #24]
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	021a      	lsls	r2, r3, #8
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	430a      	orrs	r2, r1
 80077ce:	619a      	str	r2, [r3, #24]
      break;
 80077d0:	e043      	b.n	800785a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68b9      	ldr	r1, [r7, #8]
 80077d8:	4618      	mov	r0, r3
 80077da:	f000 fb0d 	bl	8007df8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	69da      	ldr	r2, [r3, #28]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f042 0208 	orr.w	r2, r2, #8
 80077ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	69da      	ldr	r2, [r3, #28]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f022 0204 	bic.w	r2, r2, #4
 80077fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	69d9      	ldr	r1, [r3, #28]
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	691a      	ldr	r2, [r3, #16]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	430a      	orrs	r2, r1
 800780e:	61da      	str	r2, [r3, #28]
      break;
 8007810:	e023      	b.n	800785a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68b9      	ldr	r1, [r7, #8]
 8007818:	4618      	mov	r0, r3
 800781a:	f000 fb61 	bl	8007ee0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	69da      	ldr	r2, [r3, #28]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800782c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	69da      	ldr	r2, [r3, #28]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800783c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	69d9      	ldr	r1, [r3, #28]
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	691b      	ldr	r3, [r3, #16]
 8007848:	021a      	lsls	r2, r3, #8
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	430a      	orrs	r2, r1
 8007850:	61da      	str	r2, [r3, #28]
      break;
 8007852:	e002      	b.n	800785a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	75fb      	strb	r3, [r7, #23]
      break;
 8007858:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007862:	7dfb      	ldrb	r3, [r7, #23]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3718      	adds	r7, #24
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007880:	2b01      	cmp	r3, #1
 8007882:	d101      	bne.n	8007888 <HAL_TIM_ConfigClockSource+0x1c>
 8007884:	2302      	movs	r3, #2
 8007886:	e0b4      	b.n	80079f2 <HAL_TIM_ConfigClockSource+0x186>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2202      	movs	r2, #2
 8007894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80078a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80078ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078c0:	d03e      	beq.n	8007940 <HAL_TIM_ConfigClockSource+0xd4>
 80078c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078c6:	f200 8087 	bhi.w	80079d8 <HAL_TIM_ConfigClockSource+0x16c>
 80078ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078ce:	f000 8086 	beq.w	80079de <HAL_TIM_ConfigClockSource+0x172>
 80078d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078d6:	d87f      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x16c>
 80078d8:	2b70      	cmp	r3, #112	@ 0x70
 80078da:	d01a      	beq.n	8007912 <HAL_TIM_ConfigClockSource+0xa6>
 80078dc:	2b70      	cmp	r3, #112	@ 0x70
 80078de:	d87b      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x16c>
 80078e0:	2b60      	cmp	r3, #96	@ 0x60
 80078e2:	d050      	beq.n	8007986 <HAL_TIM_ConfigClockSource+0x11a>
 80078e4:	2b60      	cmp	r3, #96	@ 0x60
 80078e6:	d877      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x16c>
 80078e8:	2b50      	cmp	r3, #80	@ 0x50
 80078ea:	d03c      	beq.n	8007966 <HAL_TIM_ConfigClockSource+0xfa>
 80078ec:	2b50      	cmp	r3, #80	@ 0x50
 80078ee:	d873      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x16c>
 80078f0:	2b40      	cmp	r3, #64	@ 0x40
 80078f2:	d058      	beq.n	80079a6 <HAL_TIM_ConfigClockSource+0x13a>
 80078f4:	2b40      	cmp	r3, #64	@ 0x40
 80078f6:	d86f      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x16c>
 80078f8:	2b30      	cmp	r3, #48	@ 0x30
 80078fa:	d064      	beq.n	80079c6 <HAL_TIM_ConfigClockSource+0x15a>
 80078fc:	2b30      	cmp	r3, #48	@ 0x30
 80078fe:	d86b      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x16c>
 8007900:	2b20      	cmp	r3, #32
 8007902:	d060      	beq.n	80079c6 <HAL_TIM_ConfigClockSource+0x15a>
 8007904:	2b20      	cmp	r3, #32
 8007906:	d867      	bhi.n	80079d8 <HAL_TIM_ConfigClockSource+0x16c>
 8007908:	2b00      	cmp	r3, #0
 800790a:	d05c      	beq.n	80079c6 <HAL_TIM_ConfigClockSource+0x15a>
 800790c:	2b10      	cmp	r3, #16
 800790e:	d05a      	beq.n	80079c6 <HAL_TIM_ConfigClockSource+0x15a>
 8007910:	e062      	b.n	80079d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007922:	f000 fcd7 	bl	80082d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007934:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	609a      	str	r2, [r3, #8]
      break;
 800793e:	e04f      	b.n	80079e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007950:	f000 fcc0 	bl	80082d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689a      	ldr	r2, [r3, #8]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007962:	609a      	str	r2, [r3, #8]
      break;
 8007964:	e03c      	b.n	80079e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007972:	461a      	mov	r2, r3
 8007974:	f000 fb7e 	bl	8008074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2150      	movs	r1, #80	@ 0x50
 800797e:	4618      	mov	r0, r3
 8007980:	f000 fc8d 	bl	800829e <TIM_ITRx_SetConfig>
      break;
 8007984:	e02c      	b.n	80079e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007992:	461a      	mov	r2, r3
 8007994:	f000 fbda 	bl	800814c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2160      	movs	r1, #96	@ 0x60
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 fc7d 	bl	800829e <TIM_ITRx_SetConfig>
      break;
 80079a4:	e01c      	b.n	80079e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079b2:	461a      	mov	r2, r3
 80079b4:	f000 fb5e 	bl	8008074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2140      	movs	r1, #64	@ 0x40
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 fc6d 	bl	800829e <TIM_ITRx_SetConfig>
      break;
 80079c4:	e00c      	b.n	80079e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4619      	mov	r1, r3
 80079d0:	4610      	mov	r0, r2
 80079d2:	f000 fc64 	bl	800829e <TIM_ITRx_SetConfig>
      break;
 80079d6:	e003      	b.n	80079e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	73fb      	strb	r3, [r7, #15]
      break;
 80079dc:	e000      	b.n	80079e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80079de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
	...

080079fc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	2b0c      	cmp	r3, #12
 8007a0e:	d831      	bhi.n	8007a74 <HAL_TIM_ReadCapturedValue+0x78>
 8007a10:	a201      	add	r2, pc, #4	@ (adr r2, 8007a18 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a16:	bf00      	nop
 8007a18:	08007a4d 	.word	0x08007a4d
 8007a1c:	08007a75 	.word	0x08007a75
 8007a20:	08007a75 	.word	0x08007a75
 8007a24:	08007a75 	.word	0x08007a75
 8007a28:	08007a57 	.word	0x08007a57
 8007a2c:	08007a75 	.word	0x08007a75
 8007a30:	08007a75 	.word	0x08007a75
 8007a34:	08007a75 	.word	0x08007a75
 8007a38:	08007a61 	.word	0x08007a61
 8007a3c:	08007a75 	.word	0x08007a75
 8007a40:	08007a75 	.word	0x08007a75
 8007a44:	08007a75 	.word	0x08007a75
 8007a48:	08007a6b 	.word	0x08007a6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a52:	60fb      	str	r3, [r7, #12]

      break;
 8007a54:	e00f      	b.n	8007a76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a5c:	60fb      	str	r3, [r7, #12]

      break;
 8007a5e:	e00a      	b.n	8007a76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a66:	60fb      	str	r3, [r7, #12]

      break;
 8007a68:	e005      	b.n	8007a76 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a70:	60fb      	str	r3, [r7, #12]

      break;
 8007a72:	e000      	b.n	8007a76 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007a74:	bf00      	nop
  }

  return tmpreg;
 8007a76:	68fb      	ldr	r3, [r7, #12]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3714      	adds	r7, #20
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a46      	ldr	r2, [pc, #280]	@ (8007c00 <TIM_Base_SetConfig+0x12c>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d013      	beq.n	8007b14 <TIM_Base_SetConfig+0x40>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007af2:	d00f      	beq.n	8007b14 <TIM_Base_SetConfig+0x40>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a43      	ldr	r2, [pc, #268]	@ (8007c04 <TIM_Base_SetConfig+0x130>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d00b      	beq.n	8007b14 <TIM_Base_SetConfig+0x40>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a42      	ldr	r2, [pc, #264]	@ (8007c08 <TIM_Base_SetConfig+0x134>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d007      	beq.n	8007b14 <TIM_Base_SetConfig+0x40>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a41      	ldr	r2, [pc, #260]	@ (8007c0c <TIM_Base_SetConfig+0x138>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d003      	beq.n	8007b14 <TIM_Base_SetConfig+0x40>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a40      	ldr	r2, [pc, #256]	@ (8007c10 <TIM_Base_SetConfig+0x13c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d108      	bne.n	8007b26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a35      	ldr	r2, [pc, #212]	@ (8007c00 <TIM_Base_SetConfig+0x12c>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d02b      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b34:	d027      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a32      	ldr	r2, [pc, #200]	@ (8007c04 <TIM_Base_SetConfig+0x130>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d023      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a31      	ldr	r2, [pc, #196]	@ (8007c08 <TIM_Base_SetConfig+0x134>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d01f      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a30      	ldr	r2, [pc, #192]	@ (8007c0c <TIM_Base_SetConfig+0x138>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d01b      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a2f      	ldr	r2, [pc, #188]	@ (8007c10 <TIM_Base_SetConfig+0x13c>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d017      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a2e      	ldr	r2, [pc, #184]	@ (8007c14 <TIM_Base_SetConfig+0x140>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d013      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a2d      	ldr	r2, [pc, #180]	@ (8007c18 <TIM_Base_SetConfig+0x144>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d00f      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a2c      	ldr	r2, [pc, #176]	@ (8007c1c <TIM_Base_SetConfig+0x148>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d00b      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a2b      	ldr	r2, [pc, #172]	@ (8007c20 <TIM_Base_SetConfig+0x14c>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d007      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a2a      	ldr	r2, [pc, #168]	@ (8007c24 <TIM_Base_SetConfig+0x150>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d003      	beq.n	8007b86 <TIM_Base_SetConfig+0xb2>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a29      	ldr	r2, [pc, #164]	@ (8007c28 <TIM_Base_SetConfig+0x154>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d108      	bne.n	8007b98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	689a      	ldr	r2, [r3, #8]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a10      	ldr	r2, [pc, #64]	@ (8007c00 <TIM_Base_SetConfig+0x12c>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d003      	beq.n	8007bcc <TIM_Base_SetConfig+0xf8>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a12      	ldr	r2, [pc, #72]	@ (8007c10 <TIM_Base_SetConfig+0x13c>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d103      	bne.n	8007bd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	691a      	ldr	r2, [r3, #16]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d105      	bne.n	8007bf2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	f023 0201 	bic.w	r2, r3, #1
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	611a      	str	r2, [r3, #16]
  }
}
 8007bf2:	bf00      	nop
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	40010000 	.word	0x40010000
 8007c04:	40000400 	.word	0x40000400
 8007c08:	40000800 	.word	0x40000800
 8007c0c:	40000c00 	.word	0x40000c00
 8007c10:	40010400 	.word	0x40010400
 8007c14:	40014000 	.word	0x40014000
 8007c18:	40014400 	.word	0x40014400
 8007c1c:	40014800 	.word	0x40014800
 8007c20:	40001800 	.word	0x40001800
 8007c24:	40001c00 	.word	0x40001c00
 8007c28:	40002000 	.word	0x40002000

08007c2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b087      	sub	sp, #28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a1b      	ldr	r3, [r3, #32]
 8007c40:	f023 0201 	bic.w	r2, r3, #1
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f023 0303 	bic.w	r3, r3, #3
 8007c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f023 0302 	bic.w	r3, r3, #2
 8007c74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a20      	ldr	r2, [pc, #128]	@ (8007d04 <TIM_OC1_SetConfig+0xd8>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d003      	beq.n	8007c90 <TIM_OC1_SetConfig+0x64>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8007d08 <TIM_OC1_SetConfig+0xdc>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d10c      	bne.n	8007caa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	f023 0308 	bic.w	r3, r3, #8
 8007c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	697a      	ldr	r2, [r7, #20]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	f023 0304 	bic.w	r3, r3, #4
 8007ca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a15      	ldr	r2, [pc, #84]	@ (8007d04 <TIM_OC1_SetConfig+0xd8>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d003      	beq.n	8007cba <TIM_OC1_SetConfig+0x8e>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a14      	ldr	r2, [pc, #80]	@ (8007d08 <TIM_OC1_SetConfig+0xdc>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d111      	bne.n	8007cde <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	695b      	ldr	r3, [r3, #20]
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	699b      	ldr	r3, [r3, #24]
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	685a      	ldr	r2, [r3, #4]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	697a      	ldr	r2, [r7, #20]
 8007cf6:	621a      	str	r2, [r3, #32]
}
 8007cf8:	bf00      	nop
 8007cfa:	371c      	adds	r7, #28
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr
 8007d04:	40010000 	.word	0x40010000
 8007d08:	40010400 	.word	0x40010400

08007d0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b087      	sub	sp, #28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	f023 0210 	bic.w	r2, r3, #16
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	021b      	lsls	r3, r3, #8
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	f023 0320 	bic.w	r3, r3, #32
 8007d56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	011b      	lsls	r3, r3, #4
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a22      	ldr	r2, [pc, #136]	@ (8007df0 <TIM_OC2_SetConfig+0xe4>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d003      	beq.n	8007d74 <TIM_OC2_SetConfig+0x68>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a21      	ldr	r2, [pc, #132]	@ (8007df4 <TIM_OC2_SetConfig+0xe8>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d10d      	bne.n	8007d90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	011b      	lsls	r3, r3, #4
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4a17      	ldr	r2, [pc, #92]	@ (8007df0 <TIM_OC2_SetConfig+0xe4>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d003      	beq.n	8007da0 <TIM_OC2_SetConfig+0x94>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a16      	ldr	r2, [pc, #88]	@ (8007df4 <TIM_OC2_SetConfig+0xe8>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d113      	bne.n	8007dc8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007da6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007dae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	685a      	ldr	r2, [r3, #4]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	621a      	str	r2, [r3, #32]
}
 8007de2:	bf00      	nop
 8007de4:	371c      	adds	r7, #28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	40010000 	.word	0x40010000
 8007df4:	40010400 	.word	0x40010400

08007df8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b087      	sub	sp, #28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a1b      	ldr	r3, [r3, #32]
 8007e0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	69db      	ldr	r3, [r3, #28]
 8007e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f023 0303 	bic.w	r3, r3, #3
 8007e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68fa      	ldr	r2, [r7, #12]
 8007e36:	4313      	orrs	r3, r2
 8007e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	021b      	lsls	r3, r3, #8
 8007e48:	697a      	ldr	r2, [r7, #20]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a21      	ldr	r2, [pc, #132]	@ (8007ed8 <TIM_OC3_SetConfig+0xe0>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d003      	beq.n	8007e5e <TIM_OC3_SetConfig+0x66>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a20      	ldr	r2, [pc, #128]	@ (8007edc <TIM_OC3_SetConfig+0xe4>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d10d      	bne.n	8007e7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	021b      	lsls	r3, r3, #8
 8007e6c:	697a      	ldr	r2, [r7, #20]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a16      	ldr	r2, [pc, #88]	@ (8007ed8 <TIM_OC3_SetConfig+0xe0>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d003      	beq.n	8007e8a <TIM_OC3_SetConfig+0x92>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a15      	ldr	r2, [pc, #84]	@ (8007edc <TIM_OC3_SetConfig+0xe4>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d113      	bne.n	8007eb2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	011b      	lsls	r3, r3, #4
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	011b      	lsls	r3, r3, #4
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	685a      	ldr	r2, [r3, #4]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	697a      	ldr	r2, [r7, #20]
 8007eca:	621a      	str	r2, [r3, #32]
}
 8007ecc:	bf00      	nop
 8007ece:	371c      	adds	r7, #28
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	40010000 	.word	0x40010000
 8007edc:	40010400 	.word	0x40010400

08007ee0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a1b      	ldr	r3, [r3, #32]
 8007ef4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	69db      	ldr	r3, [r3, #28]
 8007f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	021b      	lsls	r3, r3, #8
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	4313      	orrs	r3, r2
 8007f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	031b      	lsls	r3, r3, #12
 8007f32:	693a      	ldr	r2, [r7, #16]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a12      	ldr	r2, [pc, #72]	@ (8007f84 <TIM_OC4_SetConfig+0xa4>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d003      	beq.n	8007f48 <TIM_OC4_SetConfig+0x68>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a11      	ldr	r2, [pc, #68]	@ (8007f88 <TIM_OC4_SetConfig+0xa8>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d109      	bne.n	8007f5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	695b      	ldr	r3, [r3, #20]
 8007f54:	019b      	lsls	r3, r3, #6
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	685a      	ldr	r2, [r3, #4]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	621a      	str	r2, [r3, #32]
}
 8007f76:	bf00      	nop
 8007f78:	371c      	adds	r7, #28
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	40010000 	.word	0x40010000
 8007f88:	40010400 	.word	0x40010400

08007f8c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b087      	sub	sp, #28
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
 8007f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6a1b      	ldr	r3, [r3, #32]
 8007fa4:	f023 0201 	bic.w	r2, r3, #1
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	4a28      	ldr	r2, [pc, #160]	@ (8008058 <TIM_TI1_SetConfig+0xcc>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d01b      	beq.n	8007ff2 <TIM_TI1_SetConfig+0x66>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fc0:	d017      	beq.n	8007ff2 <TIM_TI1_SetConfig+0x66>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	4a25      	ldr	r2, [pc, #148]	@ (800805c <TIM_TI1_SetConfig+0xd0>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d013      	beq.n	8007ff2 <TIM_TI1_SetConfig+0x66>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	4a24      	ldr	r2, [pc, #144]	@ (8008060 <TIM_TI1_SetConfig+0xd4>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d00f      	beq.n	8007ff2 <TIM_TI1_SetConfig+0x66>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	4a23      	ldr	r2, [pc, #140]	@ (8008064 <TIM_TI1_SetConfig+0xd8>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d00b      	beq.n	8007ff2 <TIM_TI1_SetConfig+0x66>
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	4a22      	ldr	r2, [pc, #136]	@ (8008068 <TIM_TI1_SetConfig+0xdc>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d007      	beq.n	8007ff2 <TIM_TI1_SetConfig+0x66>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	4a21      	ldr	r2, [pc, #132]	@ (800806c <TIM_TI1_SetConfig+0xe0>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d003      	beq.n	8007ff2 <TIM_TI1_SetConfig+0x66>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	4a20      	ldr	r2, [pc, #128]	@ (8008070 <TIM_TI1_SetConfig+0xe4>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d101      	bne.n	8007ff6 <TIM_TI1_SetConfig+0x6a>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e000      	b.n	8007ff8 <TIM_TI1_SetConfig+0x6c>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d008      	beq.n	800800e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	f023 0303 	bic.w	r3, r3, #3
 8008002:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008004:	697a      	ldr	r2, [r7, #20]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4313      	orrs	r3, r2
 800800a:	617b      	str	r3, [r7, #20]
 800800c:	e003      	b.n	8008016 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	f043 0301 	orr.w	r3, r3, #1
 8008014:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800801c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	011b      	lsls	r3, r3, #4
 8008022:	b2db      	uxtb	r3, r3
 8008024:	697a      	ldr	r2, [r7, #20]
 8008026:	4313      	orrs	r3, r2
 8008028:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	f023 030a 	bic.w	r3, r3, #10
 8008030:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	f003 030a 	and.w	r3, r3, #10
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	4313      	orrs	r3, r2
 800803c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	621a      	str	r2, [r3, #32]
}
 800804a:	bf00      	nop
 800804c:	371c      	adds	r7, #28
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	40010000 	.word	0x40010000
 800805c:	40000400 	.word	0x40000400
 8008060:	40000800 	.word	0x40000800
 8008064:	40000c00 	.word	0x40000c00
 8008068:	40010400 	.word	0x40010400
 800806c:	40014000 	.word	0x40014000
 8008070:	40001800 	.word	0x40001800

08008074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008074:	b480      	push	{r7}
 8008076:	b087      	sub	sp, #28
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6a1b      	ldr	r3, [r3, #32]
 8008084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6a1b      	ldr	r3, [r3, #32]
 800808a:	f023 0201 	bic.w	r2, r3, #1
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800809e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	011b      	lsls	r3, r3, #4
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	f023 030a 	bic.w	r3, r3, #10
 80080b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080b2:	697a      	ldr	r2, [r7, #20]
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	621a      	str	r2, [r3, #32]
}
 80080c6:	bf00      	nop
 80080c8:	371c      	adds	r7, #28
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b087      	sub	sp, #28
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	60f8      	str	r0, [r7, #12]
 80080da:	60b9      	str	r1, [r7, #8]
 80080dc:	607a      	str	r2, [r7, #4]
 80080de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6a1b      	ldr	r3, [r3, #32]
 80080e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	f023 0210 	bic.w	r2, r3, #16
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	699b      	ldr	r3, [r3, #24]
 80080f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	021b      	lsls	r3, r3, #8
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	4313      	orrs	r3, r2
 8008108:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008110:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	031b      	lsls	r3, r3, #12
 8008116:	b29b      	uxth	r3, r3
 8008118:	693a      	ldr	r2, [r7, #16]
 800811a:	4313      	orrs	r3, r2
 800811c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008124:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	011b      	lsls	r3, r3, #4
 800812a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	4313      	orrs	r3, r2
 8008132:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	621a      	str	r2, [r3, #32]
}
 8008140:	bf00      	nop
 8008142:	371c      	adds	r7, #28
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800814c:	b480      	push	{r7}
 800814e:	b087      	sub	sp, #28
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6a1b      	ldr	r3, [r3, #32]
 800815c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6a1b      	ldr	r3, [r3, #32]
 8008162:	f023 0210 	bic.w	r2, r3, #16
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008176:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	031b      	lsls	r3, r3, #12
 800817c:	693a      	ldr	r2, [r7, #16]
 800817e:	4313      	orrs	r3, r2
 8008180:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008188:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	011b      	lsls	r3, r3, #4
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	4313      	orrs	r3, r2
 8008192:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	693a      	ldr	r2, [r7, #16]
 8008198:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	697a      	ldr	r2, [r7, #20]
 800819e:	621a      	str	r2, [r3, #32]
}
 80081a0:	bf00      	nop
 80081a2:	371c      	adds	r7, #28
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b087      	sub	sp, #28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
 80081b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
 80081c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	69db      	ldr	r3, [r3, #28]
 80081d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	f023 0303 	bic.w	r3, r3, #3
 80081d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4313      	orrs	r3, r2
 80081e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	011b      	lsls	r3, r3, #4
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80081fc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	021b      	lsls	r3, r3, #8
 8008202:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	4313      	orrs	r3, r2
 800820a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	693a      	ldr	r2, [r7, #16]
 8008210:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	697a      	ldr	r2, [r7, #20]
 8008216:	621a      	str	r2, [r3, #32]
}
 8008218:	bf00      	nop
 800821a:	371c      	adds	r7, #28
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008224:	b480      	push	{r7}
 8008226:	b087      	sub	sp, #28
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]
 8008230:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6a1b      	ldr	r3, [r3, #32]
 800823c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	69db      	ldr	r3, [r3, #28]
 8008248:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008250:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	021b      	lsls	r3, r3, #8
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	4313      	orrs	r3, r2
 800825a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008262:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	031b      	lsls	r3, r3, #12
 8008268:	b29b      	uxth	r3, r3
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	4313      	orrs	r3, r2
 800826e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008276:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	031b      	lsls	r3, r3, #12
 800827c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008280:	697a      	ldr	r2, [r7, #20]
 8008282:	4313      	orrs	r3, r2
 8008284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	621a      	str	r2, [r3, #32]
}
 8008292:	bf00      	nop
 8008294:	371c      	adds	r7, #28
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800829e:	b480      	push	{r7}
 80082a0:	b085      	sub	sp, #20
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	f043 0307 	orr.w	r3, r3, #7
 80082c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	609a      	str	r2, [r3, #8]
}
 80082c8:	bf00      	nop
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b087      	sub	sp, #28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
 80082e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80082ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	021a      	lsls	r2, r3, #8
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	431a      	orrs	r2, r3
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	4313      	orrs	r3, r2
 8008300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	609a      	str	r2, [r3, #8]
}
 8008308:	bf00      	nop
 800830a:	371c      	adds	r7, #28
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008314:	b480      	push	{r7}
 8008316:	b087      	sub	sp, #28
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	f003 031f 	and.w	r3, r3, #31
 8008326:	2201      	movs	r2, #1
 8008328:	fa02 f303 	lsl.w	r3, r2, r3
 800832c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6a1a      	ldr	r2, [r3, #32]
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	43db      	mvns	r3, r3
 8008336:	401a      	ands	r2, r3
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6a1a      	ldr	r2, [r3, #32]
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	f003 031f 	and.w	r3, r3, #31
 8008346:	6879      	ldr	r1, [r7, #4]
 8008348:	fa01 f303 	lsl.w	r3, r1, r3
 800834c:	431a      	orrs	r2, r3
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	621a      	str	r2, [r3, #32]
}
 8008352:	bf00      	nop
 8008354:	371c      	adds	r7, #28
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
	...

08008360 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008370:	2b01      	cmp	r3, #1
 8008372:	d101      	bne.n	8008378 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008374:	2302      	movs	r3, #2
 8008376:	e05a      	b.n	800842e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2202      	movs	r2, #2
 8008384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800839e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a21      	ldr	r2, [pc, #132]	@ (800843c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d022      	beq.n	8008402 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083c4:	d01d      	beq.n	8008402 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a1d      	ldr	r2, [pc, #116]	@ (8008440 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d018      	beq.n	8008402 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a1b      	ldr	r2, [pc, #108]	@ (8008444 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d013      	beq.n	8008402 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a1a      	ldr	r2, [pc, #104]	@ (8008448 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d00e      	beq.n	8008402 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a18      	ldr	r2, [pc, #96]	@ (800844c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d009      	beq.n	8008402 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a17      	ldr	r2, [pc, #92]	@ (8008450 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d004      	beq.n	8008402 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a15      	ldr	r2, [pc, #84]	@ (8008454 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d10c      	bne.n	800841c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008408:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	4313      	orrs	r3, r2
 8008412:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3714      	adds	r7, #20
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	40010000 	.word	0x40010000
 8008440:	40000400 	.word	0x40000400
 8008444:	40000800 	.word	0x40000800
 8008448:	40000c00 	.word	0x40000c00
 800844c:	40010400 	.word	0x40010400
 8008450:	40014000 	.word	0x40014000
 8008454:	40001800 	.word	0x40001800

08008458 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008462:	2300      	movs	r3, #0
 8008464:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800846c:	2b01      	cmp	r3, #1
 800846e:	d101      	bne.n	8008474 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008470:	2302      	movs	r3, #2
 8008472:	e03d      	b.n	80084f0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	4313      	orrs	r3, r2
 8008488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	4313      	orrs	r3, r2
 8008496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	4313      	orrs	r3, r2
 80084c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	695b      	ldr	r3, [r3, #20]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	4313      	orrs	r3, r2
 80084dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3714      	adds	r7, #20
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008504:	bf00      	nop
 8008506:	370c      	adds	r7, #12
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008518:	bf00      	nop
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e042      	b.n	80085bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2b00      	cmp	r3, #0
 8008540:	d106      	bne.n	8008550 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f7fb fc5c 	bl	8003e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2224      	movs	r2, #36	@ 0x24
 8008554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68da      	ldr	r2, [r3, #12]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008566:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 fdbd 	bl	80090e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	691a      	ldr	r2, [r3, #16]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800857c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	695a      	ldr	r2, [r3, #20]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800858c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68da      	ldr	r2, [r3, #12]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800859c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2220      	movs	r2, #32
 80085a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2220      	movs	r2, #32
 80085b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3708      	adds	r7, #8
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b08a      	sub	sp, #40	@ 0x28
 80085c8:	af02      	add	r7, sp, #8
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	603b      	str	r3, [r7, #0]
 80085d0:	4613      	mov	r3, r2
 80085d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80085d4:	2300      	movs	r3, #0
 80085d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b20      	cmp	r3, #32
 80085e2:	d175      	bne.n	80086d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d002      	beq.n	80085f0 <HAL_UART_Transmit+0x2c>
 80085ea:	88fb      	ldrh	r3, [r7, #6]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d101      	bne.n	80085f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e06e      	b.n	80086d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2221      	movs	r2, #33	@ 0x21
 80085fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008602:	f7fb fdf5 	bl	80041f0 <HAL_GetTick>
 8008606:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	88fa      	ldrh	r2, [r7, #6]
 800860c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	88fa      	ldrh	r2, [r7, #6]
 8008612:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800861c:	d108      	bne.n	8008630 <HAL_UART_Transmit+0x6c>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d104      	bne.n	8008630 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008626:	2300      	movs	r3, #0
 8008628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	61bb      	str	r3, [r7, #24]
 800862e:	e003      	b.n	8008638 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008634:	2300      	movs	r3, #0
 8008636:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008638:	e02e      	b.n	8008698 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	2200      	movs	r2, #0
 8008642:	2180      	movs	r1, #128	@ 0x80
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f000 fb1f 	bl	8008c88 <UART_WaitOnFlagUntilTimeout>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d005      	beq.n	800865c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2220      	movs	r2, #32
 8008654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008658:	2303      	movs	r3, #3
 800865a:	e03a      	b.n	80086d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10b      	bne.n	800867a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	881b      	ldrh	r3, [r3, #0]
 8008666:	461a      	mov	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008670:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	3302      	adds	r3, #2
 8008676:	61bb      	str	r3, [r7, #24]
 8008678:	e007      	b.n	800868a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	781a      	ldrb	r2, [r3, #0]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	3301      	adds	r3, #1
 8008688:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800868e:	b29b      	uxth	r3, r3
 8008690:	3b01      	subs	r3, #1
 8008692:	b29a      	uxth	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800869c:	b29b      	uxth	r3, r3
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1cb      	bne.n	800863a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2200      	movs	r2, #0
 80086aa:	2140      	movs	r1, #64	@ 0x40
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f000 faeb 	bl	8008c88 <UART_WaitOnFlagUntilTimeout>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d005      	beq.n	80086c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2220      	movs	r2, #32
 80086bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e006      	b.n	80086d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2220      	movs	r2, #32
 80086c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	e000      	b.n	80086d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80086d0:	2302      	movs	r3, #2
  }
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3720      	adds	r7, #32
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}

080086da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086da:	b580      	push	{r7, lr}
 80086dc:	b084      	sub	sp, #16
 80086de:	af00      	add	r7, sp, #0
 80086e0:	60f8      	str	r0, [r7, #12]
 80086e2:	60b9      	str	r1, [r7, #8]
 80086e4:	4613      	mov	r3, r2
 80086e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	2b20      	cmp	r3, #32
 80086f2:	d112      	bne.n	800871a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d002      	beq.n	8008700 <HAL_UART_Receive_IT+0x26>
 80086fa:	88fb      	ldrh	r3, [r7, #6]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d101      	bne.n	8008704 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e00b      	b.n	800871c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800870a:	88fb      	ldrh	r3, [r7, #6]
 800870c:	461a      	mov	r2, r3
 800870e:	68b9      	ldr	r1, [r7, #8]
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f000 fb12 	bl	8008d3a <UART_Start_Receive_IT>
 8008716:	4603      	mov	r3, r0
 8008718:	e000      	b.n	800871c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800871a:	2302      	movs	r3, #2
  }
}
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b0ba      	sub	sp, #232	@ 0xe8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800874a:	2300      	movs	r3, #0
 800874c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008750:	2300      	movs	r3, #0
 8008752:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800875a:	f003 030f 	and.w	r3, r3, #15
 800875e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008762:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10f      	bne.n	800878a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800876a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800876e:	f003 0320 	and.w	r3, r3, #32
 8008772:	2b00      	cmp	r3, #0
 8008774:	d009      	beq.n	800878a <HAL_UART_IRQHandler+0x66>
 8008776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800877a:	f003 0320 	and.w	r3, r3, #32
 800877e:	2b00      	cmp	r3, #0
 8008780:	d003      	beq.n	800878a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fbf2 	bl	8008f6c <UART_Receive_IT>
      return;
 8008788:	e25b      	b.n	8008c42 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800878a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800878e:	2b00      	cmp	r3, #0
 8008790:	f000 80de 	beq.w	8008950 <HAL_UART_IRQHandler+0x22c>
 8008794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008798:	f003 0301 	and.w	r3, r3, #1
 800879c:	2b00      	cmp	r3, #0
 800879e:	d106      	bne.n	80087ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80087a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	f000 80d1 	beq.w	8008950 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80087ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00b      	beq.n	80087d2 <HAL_UART_IRQHandler+0xae>
 80087ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d005      	beq.n	80087d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ca:	f043 0201 	orr.w	r2, r3, #1
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087d6:	f003 0304 	and.w	r3, r3, #4
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00b      	beq.n	80087f6 <HAL_UART_IRQHandler+0xd2>
 80087de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d005      	beq.n	80087f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ee:	f043 0202 	orr.w	r2, r3, #2
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80087f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087fa:	f003 0302 	and.w	r3, r3, #2
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00b      	beq.n	800881a <HAL_UART_IRQHandler+0xf6>
 8008802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	d005      	beq.n	800881a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008812:	f043 0204 	orr.w	r2, r3, #4
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800881a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800881e:	f003 0308 	and.w	r3, r3, #8
 8008822:	2b00      	cmp	r3, #0
 8008824:	d011      	beq.n	800884a <HAL_UART_IRQHandler+0x126>
 8008826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800882a:	f003 0320 	and.w	r3, r3, #32
 800882e:	2b00      	cmp	r3, #0
 8008830:	d105      	bne.n	800883e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	2b00      	cmp	r3, #0
 800883c:	d005      	beq.n	800884a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008842:	f043 0208 	orr.w	r2, r3, #8
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800884e:	2b00      	cmp	r3, #0
 8008850:	f000 81f2 	beq.w	8008c38 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008858:	f003 0320 	and.w	r3, r3, #32
 800885c:	2b00      	cmp	r3, #0
 800885e:	d008      	beq.n	8008872 <HAL_UART_IRQHandler+0x14e>
 8008860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008864:	f003 0320 	and.w	r3, r3, #32
 8008868:	2b00      	cmp	r3, #0
 800886a:	d002      	beq.n	8008872 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 fb7d 	bl	8008f6c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	695b      	ldr	r3, [r3, #20]
 8008878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800887c:	2b40      	cmp	r3, #64	@ 0x40
 800887e:	bf0c      	ite	eq
 8008880:	2301      	moveq	r3, #1
 8008882:	2300      	movne	r3, #0
 8008884:	b2db      	uxtb	r3, r3
 8008886:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800888e:	f003 0308 	and.w	r3, r3, #8
 8008892:	2b00      	cmp	r3, #0
 8008894:	d103      	bne.n	800889e <HAL_UART_IRQHandler+0x17a>
 8008896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800889a:	2b00      	cmp	r3, #0
 800889c:	d04f      	beq.n	800893e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 fa85 	bl	8008dae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088ae:	2b40      	cmp	r3, #64	@ 0x40
 80088b0:	d141      	bne.n	8008936 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	3314      	adds	r3, #20
 80088b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80088c0:	e853 3f00 	ldrex	r3, [r3]
 80088c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80088c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80088cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	3314      	adds	r3, #20
 80088da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80088de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80088e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80088ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80088ee:	e841 2300 	strex	r3, r2, [r1]
 80088f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80088f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1d9      	bne.n	80088b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008902:	2b00      	cmp	r3, #0
 8008904:	d013      	beq.n	800892e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800890a:	4a7e      	ldr	r2, [pc, #504]	@ (8008b04 <HAL_UART_IRQHandler+0x3e0>)
 800890c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008912:	4618      	mov	r0, r3
 8008914:	f7fc fa1d 	bl	8004d52 <HAL_DMA_Abort_IT>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d016      	beq.n	800894c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008928:	4610      	mov	r0, r2
 800892a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800892c:	e00e      	b.n	800894c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f994 	bl	8008c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008934:	e00a      	b.n	800894c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f990 	bl	8008c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800893c:	e006      	b.n	800894c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 f98c 	bl	8008c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800894a:	e175      	b.n	8008c38 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800894c:	bf00      	nop
    return;
 800894e:	e173      	b.n	8008c38 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008954:	2b01      	cmp	r3, #1
 8008956:	f040 814f 	bne.w	8008bf8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800895a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800895e:	f003 0310 	and.w	r3, r3, #16
 8008962:	2b00      	cmp	r3, #0
 8008964:	f000 8148 	beq.w	8008bf8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800896c:	f003 0310 	and.w	r3, r3, #16
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 8141 	beq.w	8008bf8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008976:	2300      	movs	r3, #0
 8008978:	60bb      	str	r3, [r7, #8]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	60bb      	str	r3, [r7, #8]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	60bb      	str	r3, [r7, #8]
 800898a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008996:	2b40      	cmp	r3, #64	@ 0x40
 8008998:	f040 80b6 	bne.w	8008b08 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f000 8145 	beq.w	8008c3c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80089b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80089ba:	429a      	cmp	r2, r3
 80089bc:	f080 813e 	bcs.w	8008c3c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80089c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089cc:	69db      	ldr	r3, [r3, #28]
 80089ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089d2:	f000 8088 	beq.w	8008ae6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	330c      	adds	r3, #12
 80089dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80089e4:	e853 3f00 	ldrex	r3, [r3]
 80089e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80089ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80089f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	330c      	adds	r3, #12
 80089fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008a02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008a06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008a0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008a12:	e841 2300 	strex	r3, r2, [r1]
 8008a16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008a1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1d9      	bne.n	80089d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	3314      	adds	r3, #20
 8008a28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a2c:	e853 3f00 	ldrex	r3, [r3]
 8008a30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008a32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a34:	f023 0301 	bic.w	r3, r3, #1
 8008a38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	3314      	adds	r3, #20
 8008a42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008a46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008a4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008a4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008a52:	e841 2300 	strex	r3, r2, [r1]
 8008a56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008a58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1e1      	bne.n	8008a22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3314      	adds	r3, #20
 8008a64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a68:	e853 3f00 	ldrex	r3, [r3]
 8008a6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008a6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008a70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	3314      	adds	r3, #20
 8008a7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008a82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008a84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008a88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008a8a:	e841 2300 	strex	r3, r2, [r1]
 8008a8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008a90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1e3      	bne.n	8008a5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2220      	movs	r2, #32
 8008a9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	330c      	adds	r3, #12
 8008aaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008aae:	e853 3f00 	ldrex	r3, [r3]
 8008ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008ab4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ab6:	f023 0310 	bic.w	r3, r3, #16
 8008aba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	330c      	adds	r3, #12
 8008ac4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008ac8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008aca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008acc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ace:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ad0:	e841 2300 	strex	r3, r2, [r1]
 8008ad4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ad6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1e3      	bne.n	8008aa4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7fc f8c6 	bl	8004c72 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2202      	movs	r2, #2
 8008aea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f8b7 	bl	8008c70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b02:	e09b      	b.n	8008c3c <HAL_UART_IRQHandler+0x518>
 8008b04:	08008e75 	.word	0x08008e75
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f000 808e 	beq.w	8008c40 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008b24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f000 8089 	beq.w	8008c40 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	330c      	adds	r3, #12
 8008b34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b38:	e853 3f00 	ldrex	r3, [r3]
 8008b3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	330c      	adds	r3, #12
 8008b4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008b52:	647a      	str	r2, [r7, #68]	@ 0x44
 8008b54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b5a:	e841 2300 	strex	r3, r2, [r1]
 8008b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1e3      	bne.n	8008b2e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3314      	adds	r3, #20
 8008b6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b70:	e853 3f00 	ldrex	r3, [r3]
 8008b74:	623b      	str	r3, [r7, #32]
   return(result);
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	f023 0301 	bic.w	r3, r3, #1
 8008b7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	3314      	adds	r3, #20
 8008b86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008b8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b92:	e841 2300 	strex	r3, r2, [r1]
 8008b96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d1e3      	bne.n	8008b66 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2220      	movs	r2, #32
 8008ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	330c      	adds	r3, #12
 8008bb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	e853 3f00 	ldrex	r3, [r3]
 8008bba:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f023 0310 	bic.w	r3, r3, #16
 8008bc2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	330c      	adds	r3, #12
 8008bcc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008bd0:	61fa      	str	r2, [r7, #28]
 8008bd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd4:	69b9      	ldr	r1, [r7, #24]
 8008bd6:	69fa      	ldr	r2, [r7, #28]
 8008bd8:	e841 2300 	strex	r3, r2, [r1]
 8008bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1e3      	bne.n	8008bac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2202      	movs	r2, #2
 8008be8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008bea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f83d 	bl	8008c70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008bf6:	e023      	b.n	8008c40 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d009      	beq.n	8008c18 <HAL_UART_IRQHandler+0x4f4>
 8008c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d003      	beq.n	8008c18 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f943 	bl	8008e9c <UART_Transmit_IT>
    return;
 8008c16:	e014      	b.n	8008c42 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00e      	beq.n	8008c42 <HAL_UART_IRQHandler+0x51e>
 8008c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d008      	beq.n	8008c42 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f983 	bl	8008f3c <UART_EndTransmit_IT>
    return;
 8008c36:	e004      	b.n	8008c42 <HAL_UART_IRQHandler+0x51e>
    return;
 8008c38:	bf00      	nop
 8008c3a:	e002      	b.n	8008c42 <HAL_UART_IRQHandler+0x51e>
      return;
 8008c3c:	bf00      	nop
 8008c3e:	e000      	b.n	8008c42 <HAL_UART_IRQHandler+0x51e>
      return;
 8008c40:	bf00      	nop
  }
}
 8008c42:	37e8      	adds	r7, #232	@ 0xe8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b086      	sub	sp, #24
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	603b      	str	r3, [r7, #0]
 8008c94:	4613      	mov	r3, r2
 8008c96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c98:	e03b      	b.n	8008d12 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c9a:	6a3b      	ldr	r3, [r7, #32]
 8008c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca0:	d037      	beq.n	8008d12 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ca2:	f7fb faa5 	bl	80041f0 <HAL_GetTick>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	6a3a      	ldr	r2, [r7, #32]
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d302      	bcc.n	8008cb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008cb2:	6a3b      	ldr	r3, [r7, #32]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d101      	bne.n	8008cbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	e03a      	b.n	8008d32 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	f003 0304 	and.w	r3, r3, #4
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d023      	beq.n	8008d12 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	2b80      	cmp	r3, #128	@ 0x80
 8008cce:	d020      	beq.n	8008d12 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	2b40      	cmp	r3, #64	@ 0x40
 8008cd4:	d01d      	beq.n	8008d12 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0308 	and.w	r3, r3, #8
 8008ce0:	2b08      	cmp	r3, #8
 8008ce2:	d116      	bne.n	8008d12 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	617b      	str	r3, [r7, #20]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	617b      	str	r3, [r7, #20]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	617b      	str	r3, [r7, #20]
 8008cf8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f000 f857 	bl	8008dae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2208      	movs	r2, #8
 8008d04:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e00f      	b.n	8008d32 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	bf0c      	ite	eq
 8008d22:	2301      	moveq	r3, #1
 8008d24:	2300      	movne	r3, #0
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	461a      	mov	r2, r3
 8008d2a:	79fb      	ldrb	r3, [r7, #7]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d0b4      	beq.n	8008c9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3718      	adds	r7, #24
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b085      	sub	sp, #20
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	60f8      	str	r0, [r7, #12]
 8008d42:	60b9      	str	r1, [r7, #8]
 8008d44:	4613      	mov	r3, r2
 8008d46:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	88fa      	ldrh	r2, [r7, #6]
 8008d52:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	88fa      	ldrh	r2, [r7, #6]
 8008d58:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2222      	movs	r2, #34	@ 0x22
 8008d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d007      	beq.n	8008d80 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68da      	ldr	r2, [r3, #12]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008d7e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	695a      	ldr	r2, [r3, #20]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f042 0201 	orr.w	r2, r2, #1
 8008d8e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68da      	ldr	r2, [r3, #12]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f042 0220 	orr.w	r2, r2, #32
 8008d9e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b095      	sub	sp, #84	@ 0x54
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	330c      	adds	r3, #12
 8008dbc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dc0:	e853 3f00 	ldrex	r3, [r3]
 8008dc4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008dcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	330c      	adds	r3, #12
 8008dd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008dd6:	643a      	str	r2, [r7, #64]	@ 0x40
 8008dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dda:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ddc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008dde:	e841 2300 	strex	r3, r2, [r1]
 8008de2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1e5      	bne.n	8008db6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	3314      	adds	r3, #20
 8008df0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df2:	6a3b      	ldr	r3, [r7, #32]
 8008df4:	e853 3f00 	ldrex	r3, [r3]
 8008df8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	f023 0301 	bic.w	r3, r3, #1
 8008e00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3314      	adds	r3, #20
 8008e08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e12:	e841 2300 	strex	r3, r2, [r1]
 8008e16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1e5      	bne.n	8008dea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d119      	bne.n	8008e5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	330c      	adds	r3, #12
 8008e2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	e853 3f00 	ldrex	r3, [r3]
 8008e34:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	f023 0310 	bic.w	r3, r3, #16
 8008e3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	330c      	adds	r3, #12
 8008e44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e46:	61ba      	str	r2, [r7, #24]
 8008e48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e4a:	6979      	ldr	r1, [r7, #20]
 8008e4c:	69ba      	ldr	r2, [r7, #24]
 8008e4e:	e841 2300 	strex	r3, r2, [r1]
 8008e52:	613b      	str	r3, [r7, #16]
   return(result);
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d1e5      	bne.n	8008e26 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2220      	movs	r2, #32
 8008e5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008e68:	bf00      	nop
 8008e6a:	3754      	adds	r7, #84	@ 0x54
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f7ff fee4 	bl	8008c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e94:	bf00      	nop
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b085      	sub	sp, #20
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	2b21      	cmp	r3, #33	@ 0x21
 8008eae:	d13e      	bne.n	8008f2e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008eb8:	d114      	bne.n	8008ee4 <UART_Transmit_IT+0x48>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d110      	bne.n	8008ee4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a1b      	ldr	r3, [r3, #32]
 8008ec6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	881b      	ldrh	r3, [r3, #0]
 8008ecc:	461a      	mov	r2, r3
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ed6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a1b      	ldr	r3, [r3, #32]
 8008edc:	1c9a      	adds	r2, r3, #2
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	621a      	str	r2, [r3, #32]
 8008ee2:	e008      	b.n	8008ef6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6a1b      	ldr	r3, [r3, #32]
 8008ee8:	1c59      	adds	r1, r3, #1
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	6211      	str	r1, [r2, #32]
 8008eee:	781a      	ldrb	r2, [r3, #0]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	3b01      	subs	r3, #1
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	4619      	mov	r1, r3
 8008f04:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10f      	bne.n	8008f2a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68da      	ldr	r2, [r3, #12]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008f18:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68da      	ldr	r2, [r3, #12]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f28:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	e000      	b.n	8008f30 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008f2e:	2302      	movs	r3, #2
  }
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3714      	adds	r7, #20
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68da      	ldr	r2, [r3, #12]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008f52:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2220      	movs	r2, #32
 8008f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7ff fe73 	bl	8008c48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3708      	adds	r7, #8
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b08c      	sub	sp, #48	@ 0x30
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	2b22      	cmp	r3, #34	@ 0x22
 8008f7e:	f040 80ae 	bne.w	80090de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f8a:	d117      	bne.n	8008fbc <UART_Receive_IT+0x50>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d113      	bne.n	8008fbc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008f94:	2300      	movs	r3, #0
 8008f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fb4:	1c9a      	adds	r2, r3, #2
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	629a      	str	r2, [r3, #40]	@ 0x28
 8008fba:	e026      	b.n	800900a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fce:	d007      	beq.n	8008fe0 <UART_Receive_IT+0x74>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d10a      	bne.n	8008fee <UART_Receive_IT+0x82>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	691b      	ldr	r3, [r3, #16]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d106      	bne.n	8008fee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	b2da      	uxtb	r2, r3
 8008fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fea:	701a      	strb	r2, [r3, #0]
 8008fec:	e008      	b.n	8009000 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ffe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009004:	1c5a      	adds	r2, r3, #1
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800900e:	b29b      	uxth	r3, r3
 8009010:	3b01      	subs	r3, #1
 8009012:	b29b      	uxth	r3, r3
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	4619      	mov	r1, r3
 8009018:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800901a:	2b00      	cmp	r3, #0
 800901c:	d15d      	bne.n	80090da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68da      	ldr	r2, [r3, #12]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f022 0220 	bic.w	r2, r2, #32
 800902c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68da      	ldr	r2, [r3, #12]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800903c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	695a      	ldr	r2, [r3, #20]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f022 0201 	bic.w	r2, r2, #1
 800904c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2220      	movs	r2, #32
 8009052:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009060:	2b01      	cmp	r3, #1
 8009062:	d135      	bne.n	80090d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	330c      	adds	r3, #12
 8009070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	e853 3f00 	ldrex	r3, [r3]
 8009078:	613b      	str	r3, [r7, #16]
   return(result);
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	f023 0310 	bic.w	r3, r3, #16
 8009080:	627b      	str	r3, [r7, #36]	@ 0x24
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	330c      	adds	r3, #12
 8009088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800908a:	623a      	str	r2, [r7, #32]
 800908c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908e:	69f9      	ldr	r1, [r7, #28]
 8009090:	6a3a      	ldr	r2, [r7, #32]
 8009092:	e841 2300 	strex	r3, r2, [r1]
 8009096:	61bb      	str	r3, [r7, #24]
   return(result);
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1e5      	bne.n	800906a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0310 	and.w	r3, r3, #16
 80090a8:	2b10      	cmp	r3, #16
 80090aa:	d10a      	bne.n	80090c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80090ac:	2300      	movs	r3, #0
 80090ae:	60fb      	str	r3, [r7, #12]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	60fb      	str	r3, [r7, #12]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f7ff fdd1 	bl	8008c70 <HAL_UARTEx_RxEventCallback>
 80090ce:	e002      	b.n	80090d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7f9 ff0f 	bl	8002ef4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80090d6:	2300      	movs	r3, #0
 80090d8:	e002      	b.n	80090e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80090da:	2300      	movs	r3, #0
 80090dc:	e000      	b.n	80090e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80090de:	2302      	movs	r3, #2
  }
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3730      	adds	r7, #48	@ 0x30
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090ec:	b0c0      	sub	sp, #256	@ 0x100
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009104:	68d9      	ldr	r1, [r3, #12]
 8009106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	ea40 0301 	orr.w	r3, r0, r1
 8009110:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009116:	689a      	ldr	r2, [r3, #8]
 8009118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	431a      	orrs	r2, r3
 8009120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009124:	695b      	ldr	r3, [r3, #20]
 8009126:	431a      	orrs	r2, r3
 8009128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800912c:	69db      	ldr	r3, [r3, #28]
 800912e:	4313      	orrs	r3, r2
 8009130:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009140:	f021 010c 	bic.w	r1, r1, #12
 8009144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800914e:	430b      	orrs	r3, r1
 8009150:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800915e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009162:	6999      	ldr	r1, [r3, #24]
 8009164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	ea40 0301 	orr.w	r3, r0, r1
 800916e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	4b8f      	ldr	r3, [pc, #572]	@ (80093b4 <UART_SetConfig+0x2cc>)
 8009178:	429a      	cmp	r2, r3
 800917a:	d005      	beq.n	8009188 <UART_SetConfig+0xa0>
 800917c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	4b8d      	ldr	r3, [pc, #564]	@ (80093b8 <UART_SetConfig+0x2d0>)
 8009184:	429a      	cmp	r2, r3
 8009186:	d104      	bne.n	8009192 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009188:	f7fd fc7e 	bl	8006a88 <HAL_RCC_GetPCLK2Freq>
 800918c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009190:	e003      	b.n	800919a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009192:	f7fd fc65 	bl	8006a60 <HAL_RCC_GetPCLK1Freq>
 8009196:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800919a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800919e:	69db      	ldr	r3, [r3, #28]
 80091a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091a4:	f040 810c 	bne.w	80093c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80091a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80091ac:	2200      	movs	r2, #0
 80091ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80091b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80091b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80091ba:	4622      	mov	r2, r4
 80091bc:	462b      	mov	r3, r5
 80091be:	1891      	adds	r1, r2, r2
 80091c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80091c2:	415b      	adcs	r3, r3
 80091c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80091ca:	4621      	mov	r1, r4
 80091cc:	eb12 0801 	adds.w	r8, r2, r1
 80091d0:	4629      	mov	r1, r5
 80091d2:	eb43 0901 	adc.w	r9, r3, r1
 80091d6:	f04f 0200 	mov.w	r2, #0
 80091da:	f04f 0300 	mov.w	r3, #0
 80091de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80091e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80091e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80091ea:	4690      	mov	r8, r2
 80091ec:	4699      	mov	r9, r3
 80091ee:	4623      	mov	r3, r4
 80091f0:	eb18 0303 	adds.w	r3, r8, r3
 80091f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80091f8:	462b      	mov	r3, r5
 80091fa:	eb49 0303 	adc.w	r3, r9, r3
 80091fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800920e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009212:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009216:	460b      	mov	r3, r1
 8009218:	18db      	adds	r3, r3, r3
 800921a:	653b      	str	r3, [r7, #80]	@ 0x50
 800921c:	4613      	mov	r3, r2
 800921e:	eb42 0303 	adc.w	r3, r2, r3
 8009222:	657b      	str	r3, [r7, #84]	@ 0x54
 8009224:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009228:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800922c:	f7f7 fd2c 	bl	8000c88 <__aeabi_uldivmod>
 8009230:	4602      	mov	r2, r0
 8009232:	460b      	mov	r3, r1
 8009234:	4b61      	ldr	r3, [pc, #388]	@ (80093bc <UART_SetConfig+0x2d4>)
 8009236:	fba3 2302 	umull	r2, r3, r3, r2
 800923a:	095b      	lsrs	r3, r3, #5
 800923c:	011c      	lsls	r4, r3, #4
 800923e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009242:	2200      	movs	r2, #0
 8009244:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009248:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800924c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009250:	4642      	mov	r2, r8
 8009252:	464b      	mov	r3, r9
 8009254:	1891      	adds	r1, r2, r2
 8009256:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009258:	415b      	adcs	r3, r3
 800925a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800925c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009260:	4641      	mov	r1, r8
 8009262:	eb12 0a01 	adds.w	sl, r2, r1
 8009266:	4649      	mov	r1, r9
 8009268:	eb43 0b01 	adc.w	fp, r3, r1
 800926c:	f04f 0200 	mov.w	r2, #0
 8009270:	f04f 0300 	mov.w	r3, #0
 8009274:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009278:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800927c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009280:	4692      	mov	sl, r2
 8009282:	469b      	mov	fp, r3
 8009284:	4643      	mov	r3, r8
 8009286:	eb1a 0303 	adds.w	r3, sl, r3
 800928a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800928e:	464b      	mov	r3, r9
 8009290:	eb4b 0303 	adc.w	r3, fp, r3
 8009294:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80092a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80092a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80092ac:	460b      	mov	r3, r1
 80092ae:	18db      	adds	r3, r3, r3
 80092b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80092b2:	4613      	mov	r3, r2
 80092b4:	eb42 0303 	adc.w	r3, r2, r3
 80092b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80092ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80092be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80092c2:	f7f7 fce1 	bl	8000c88 <__aeabi_uldivmod>
 80092c6:	4602      	mov	r2, r0
 80092c8:	460b      	mov	r3, r1
 80092ca:	4611      	mov	r1, r2
 80092cc:	4b3b      	ldr	r3, [pc, #236]	@ (80093bc <UART_SetConfig+0x2d4>)
 80092ce:	fba3 2301 	umull	r2, r3, r3, r1
 80092d2:	095b      	lsrs	r3, r3, #5
 80092d4:	2264      	movs	r2, #100	@ 0x64
 80092d6:	fb02 f303 	mul.w	r3, r2, r3
 80092da:	1acb      	subs	r3, r1, r3
 80092dc:	00db      	lsls	r3, r3, #3
 80092de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80092e2:	4b36      	ldr	r3, [pc, #216]	@ (80093bc <UART_SetConfig+0x2d4>)
 80092e4:	fba3 2302 	umull	r2, r3, r3, r2
 80092e8:	095b      	lsrs	r3, r3, #5
 80092ea:	005b      	lsls	r3, r3, #1
 80092ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80092f0:	441c      	add	r4, r3
 80092f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092f6:	2200      	movs	r2, #0
 80092f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80092fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009300:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009304:	4642      	mov	r2, r8
 8009306:	464b      	mov	r3, r9
 8009308:	1891      	adds	r1, r2, r2
 800930a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800930c:	415b      	adcs	r3, r3
 800930e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009310:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009314:	4641      	mov	r1, r8
 8009316:	1851      	adds	r1, r2, r1
 8009318:	6339      	str	r1, [r7, #48]	@ 0x30
 800931a:	4649      	mov	r1, r9
 800931c:	414b      	adcs	r3, r1
 800931e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009320:	f04f 0200 	mov.w	r2, #0
 8009324:	f04f 0300 	mov.w	r3, #0
 8009328:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800932c:	4659      	mov	r1, fp
 800932e:	00cb      	lsls	r3, r1, #3
 8009330:	4651      	mov	r1, sl
 8009332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009336:	4651      	mov	r1, sl
 8009338:	00ca      	lsls	r2, r1, #3
 800933a:	4610      	mov	r0, r2
 800933c:	4619      	mov	r1, r3
 800933e:	4603      	mov	r3, r0
 8009340:	4642      	mov	r2, r8
 8009342:	189b      	adds	r3, r3, r2
 8009344:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009348:	464b      	mov	r3, r9
 800934a:	460a      	mov	r2, r1
 800934c:	eb42 0303 	adc.w	r3, r2, r3
 8009350:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009360:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009364:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009368:	460b      	mov	r3, r1
 800936a:	18db      	adds	r3, r3, r3
 800936c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800936e:	4613      	mov	r3, r2
 8009370:	eb42 0303 	adc.w	r3, r2, r3
 8009374:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009376:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800937a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800937e:	f7f7 fc83 	bl	8000c88 <__aeabi_uldivmod>
 8009382:	4602      	mov	r2, r0
 8009384:	460b      	mov	r3, r1
 8009386:	4b0d      	ldr	r3, [pc, #52]	@ (80093bc <UART_SetConfig+0x2d4>)
 8009388:	fba3 1302 	umull	r1, r3, r3, r2
 800938c:	095b      	lsrs	r3, r3, #5
 800938e:	2164      	movs	r1, #100	@ 0x64
 8009390:	fb01 f303 	mul.w	r3, r1, r3
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	00db      	lsls	r3, r3, #3
 8009398:	3332      	adds	r3, #50	@ 0x32
 800939a:	4a08      	ldr	r2, [pc, #32]	@ (80093bc <UART_SetConfig+0x2d4>)
 800939c:	fba2 2303 	umull	r2, r3, r2, r3
 80093a0:	095b      	lsrs	r3, r3, #5
 80093a2:	f003 0207 	and.w	r2, r3, #7
 80093a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4422      	add	r2, r4
 80093ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80093b0:	e106      	b.n	80095c0 <UART_SetConfig+0x4d8>
 80093b2:	bf00      	nop
 80093b4:	40011000 	.word	0x40011000
 80093b8:	40011400 	.word	0x40011400
 80093bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093c4:	2200      	movs	r2, #0
 80093c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80093ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80093ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80093d2:	4642      	mov	r2, r8
 80093d4:	464b      	mov	r3, r9
 80093d6:	1891      	adds	r1, r2, r2
 80093d8:	6239      	str	r1, [r7, #32]
 80093da:	415b      	adcs	r3, r3
 80093dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80093de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093e2:	4641      	mov	r1, r8
 80093e4:	1854      	adds	r4, r2, r1
 80093e6:	4649      	mov	r1, r9
 80093e8:	eb43 0501 	adc.w	r5, r3, r1
 80093ec:	f04f 0200 	mov.w	r2, #0
 80093f0:	f04f 0300 	mov.w	r3, #0
 80093f4:	00eb      	lsls	r3, r5, #3
 80093f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093fa:	00e2      	lsls	r2, r4, #3
 80093fc:	4614      	mov	r4, r2
 80093fe:	461d      	mov	r5, r3
 8009400:	4643      	mov	r3, r8
 8009402:	18e3      	adds	r3, r4, r3
 8009404:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009408:	464b      	mov	r3, r9
 800940a:	eb45 0303 	adc.w	r3, r5, r3
 800940e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800941e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009422:	f04f 0200 	mov.w	r2, #0
 8009426:	f04f 0300 	mov.w	r3, #0
 800942a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800942e:	4629      	mov	r1, r5
 8009430:	008b      	lsls	r3, r1, #2
 8009432:	4621      	mov	r1, r4
 8009434:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009438:	4621      	mov	r1, r4
 800943a:	008a      	lsls	r2, r1, #2
 800943c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009440:	f7f7 fc22 	bl	8000c88 <__aeabi_uldivmod>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	4b60      	ldr	r3, [pc, #384]	@ (80095cc <UART_SetConfig+0x4e4>)
 800944a:	fba3 2302 	umull	r2, r3, r3, r2
 800944e:	095b      	lsrs	r3, r3, #5
 8009450:	011c      	lsls	r4, r3, #4
 8009452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009456:	2200      	movs	r2, #0
 8009458:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800945c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009460:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009464:	4642      	mov	r2, r8
 8009466:	464b      	mov	r3, r9
 8009468:	1891      	adds	r1, r2, r2
 800946a:	61b9      	str	r1, [r7, #24]
 800946c:	415b      	adcs	r3, r3
 800946e:	61fb      	str	r3, [r7, #28]
 8009470:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009474:	4641      	mov	r1, r8
 8009476:	1851      	adds	r1, r2, r1
 8009478:	6139      	str	r1, [r7, #16]
 800947a:	4649      	mov	r1, r9
 800947c:	414b      	adcs	r3, r1
 800947e:	617b      	str	r3, [r7, #20]
 8009480:	f04f 0200 	mov.w	r2, #0
 8009484:	f04f 0300 	mov.w	r3, #0
 8009488:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800948c:	4659      	mov	r1, fp
 800948e:	00cb      	lsls	r3, r1, #3
 8009490:	4651      	mov	r1, sl
 8009492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009496:	4651      	mov	r1, sl
 8009498:	00ca      	lsls	r2, r1, #3
 800949a:	4610      	mov	r0, r2
 800949c:	4619      	mov	r1, r3
 800949e:	4603      	mov	r3, r0
 80094a0:	4642      	mov	r2, r8
 80094a2:	189b      	adds	r3, r3, r2
 80094a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80094a8:	464b      	mov	r3, r9
 80094aa:	460a      	mov	r2, r1
 80094ac:	eb42 0303 	adc.w	r3, r2, r3
 80094b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80094b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80094be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80094c0:	f04f 0200 	mov.w	r2, #0
 80094c4:	f04f 0300 	mov.w	r3, #0
 80094c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80094cc:	4649      	mov	r1, r9
 80094ce:	008b      	lsls	r3, r1, #2
 80094d0:	4641      	mov	r1, r8
 80094d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094d6:	4641      	mov	r1, r8
 80094d8:	008a      	lsls	r2, r1, #2
 80094da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80094de:	f7f7 fbd3 	bl	8000c88 <__aeabi_uldivmod>
 80094e2:	4602      	mov	r2, r0
 80094e4:	460b      	mov	r3, r1
 80094e6:	4611      	mov	r1, r2
 80094e8:	4b38      	ldr	r3, [pc, #224]	@ (80095cc <UART_SetConfig+0x4e4>)
 80094ea:	fba3 2301 	umull	r2, r3, r3, r1
 80094ee:	095b      	lsrs	r3, r3, #5
 80094f0:	2264      	movs	r2, #100	@ 0x64
 80094f2:	fb02 f303 	mul.w	r3, r2, r3
 80094f6:	1acb      	subs	r3, r1, r3
 80094f8:	011b      	lsls	r3, r3, #4
 80094fa:	3332      	adds	r3, #50	@ 0x32
 80094fc:	4a33      	ldr	r2, [pc, #204]	@ (80095cc <UART_SetConfig+0x4e4>)
 80094fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009502:	095b      	lsrs	r3, r3, #5
 8009504:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009508:	441c      	add	r4, r3
 800950a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800950e:	2200      	movs	r2, #0
 8009510:	673b      	str	r3, [r7, #112]	@ 0x70
 8009512:	677a      	str	r2, [r7, #116]	@ 0x74
 8009514:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009518:	4642      	mov	r2, r8
 800951a:	464b      	mov	r3, r9
 800951c:	1891      	adds	r1, r2, r2
 800951e:	60b9      	str	r1, [r7, #8]
 8009520:	415b      	adcs	r3, r3
 8009522:	60fb      	str	r3, [r7, #12]
 8009524:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009528:	4641      	mov	r1, r8
 800952a:	1851      	adds	r1, r2, r1
 800952c:	6039      	str	r1, [r7, #0]
 800952e:	4649      	mov	r1, r9
 8009530:	414b      	adcs	r3, r1
 8009532:	607b      	str	r3, [r7, #4]
 8009534:	f04f 0200 	mov.w	r2, #0
 8009538:	f04f 0300 	mov.w	r3, #0
 800953c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009540:	4659      	mov	r1, fp
 8009542:	00cb      	lsls	r3, r1, #3
 8009544:	4651      	mov	r1, sl
 8009546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800954a:	4651      	mov	r1, sl
 800954c:	00ca      	lsls	r2, r1, #3
 800954e:	4610      	mov	r0, r2
 8009550:	4619      	mov	r1, r3
 8009552:	4603      	mov	r3, r0
 8009554:	4642      	mov	r2, r8
 8009556:	189b      	adds	r3, r3, r2
 8009558:	66bb      	str	r3, [r7, #104]	@ 0x68
 800955a:	464b      	mov	r3, r9
 800955c:	460a      	mov	r2, r1
 800955e:	eb42 0303 	adc.w	r3, r2, r3
 8009562:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	663b      	str	r3, [r7, #96]	@ 0x60
 800956e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009570:	f04f 0200 	mov.w	r2, #0
 8009574:	f04f 0300 	mov.w	r3, #0
 8009578:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800957c:	4649      	mov	r1, r9
 800957e:	008b      	lsls	r3, r1, #2
 8009580:	4641      	mov	r1, r8
 8009582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009586:	4641      	mov	r1, r8
 8009588:	008a      	lsls	r2, r1, #2
 800958a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800958e:	f7f7 fb7b 	bl	8000c88 <__aeabi_uldivmod>
 8009592:	4602      	mov	r2, r0
 8009594:	460b      	mov	r3, r1
 8009596:	4b0d      	ldr	r3, [pc, #52]	@ (80095cc <UART_SetConfig+0x4e4>)
 8009598:	fba3 1302 	umull	r1, r3, r3, r2
 800959c:	095b      	lsrs	r3, r3, #5
 800959e:	2164      	movs	r1, #100	@ 0x64
 80095a0:	fb01 f303 	mul.w	r3, r1, r3
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	011b      	lsls	r3, r3, #4
 80095a8:	3332      	adds	r3, #50	@ 0x32
 80095aa:	4a08      	ldr	r2, [pc, #32]	@ (80095cc <UART_SetConfig+0x4e4>)
 80095ac:	fba2 2303 	umull	r2, r3, r2, r3
 80095b0:	095b      	lsrs	r3, r3, #5
 80095b2:	f003 020f 	and.w	r2, r3, #15
 80095b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4422      	add	r2, r4
 80095be:	609a      	str	r2, [r3, #8]
}
 80095c0:	bf00      	nop
 80095c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80095c6:	46bd      	mov	sp, r7
 80095c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095cc:	51eb851f 	.word	0x51eb851f

080095d0 <_ICM20948_SelectUserBank>:

#include "ICM20948.h"

static float accel_offset[3] = {0,0,0};

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b08a      	sub	sp, #40	@ 0x28
 80095d4:	af04      	add	r7, sp, #16
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	460b      	mov	r3, r1
 80095da:	607a      	str	r2, [r7, #4]
 80095dc:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 80095de:	2300      	movs	r3, #0
 80095e0:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	b2db      	uxtb	r3, r3
 80095e6:	011b      	lsls	r3, r3, #4
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 80095ec:	7afb      	ldrb	r3, [r7, #11]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d101      	bne.n	80095f6 <_ICM20948_SelectUserBank+0x26>
 80095f2:	2368      	movs	r3, #104	@ 0x68
 80095f4:	e000      	b.n	80095f8 <_ICM20948_SelectUserBank+0x28>
 80095f6:	2369      	movs	r3, #105	@ 0x69
 80095f8:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 80095fa:	7dbb      	ldrb	r3, [r7, #22]
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	005b      	lsls	r3, r3, #1
 8009600:	b299      	uxth	r1, r3
 8009602:	230a      	movs	r3, #10
 8009604:	9302      	str	r3, [sp, #8]
 8009606:	2301      	movs	r3, #1
 8009608:	9301      	str	r3, [sp, #4]
 800960a:	f107 0315 	add.w	r3, r7, #21
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	2301      	movs	r3, #1
 8009612:	227f      	movs	r2, #127	@ 0x7f
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	f7fb feeb 	bl	80053f0 <HAL_I2C_Mem_Write>
 800961a:	4603      	mov	r3, r0
 800961c:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800961e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3718      	adds	r7, #24
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 8009628:	b580      	push	{r7, lr}
 800962a:	b088      	sub	sp, #32
 800962c:	af04      	add	r7, sp, #16
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	4608      	mov	r0, r1
 8009632:	4611      	mov	r1, r2
 8009634:	461a      	mov	r2, r3
 8009636:	4603      	mov	r3, r0
 8009638:	70fb      	strb	r3, [r7, #3]
 800963a:	460b      	mov	r3, r1
 800963c:	70bb      	strb	r3, [r7, #2]
 800963e:	4613      	mov	r3, r2
 8009640:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8009642:	2300      	movs	r3, #0
 8009644:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8009646:	78fb      	ldrb	r3, [r7, #3]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d101      	bne.n	8009650 <_ICM20948_WriteByte+0x28>
 800964c:	2368      	movs	r3, #104	@ 0x68
 800964e:	e000      	b.n	8009652 <_ICM20948_WriteByte+0x2a>
 8009650:	2369      	movs	r3, #105	@ 0x69
 8009652:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8009654:	7bbb      	ldrb	r3, [r7, #14]
 8009656:	b29b      	uxth	r3, r3
 8009658:	005b      	lsls	r3, r3, #1
 800965a:	b299      	uxth	r1, r3
 800965c:	78bb      	ldrb	r3, [r7, #2]
 800965e:	b29a      	uxth	r2, r3
 8009660:	230a      	movs	r3, #10
 8009662:	9302      	str	r3, [sp, #8]
 8009664:	2301      	movs	r3, #1
 8009666:	9301      	str	r3, [sp, #4]
 8009668:	1c7b      	adds	r3, r7, #1
 800966a:	9300      	str	r3, [sp, #0]
 800966c:	2301      	movs	r3, #1
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7fb febe 	bl	80053f0 <HAL_I2C_Mem_Write>
 8009674:	4603      	mov	r3, r0
 8009676:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8009678:	7bfb      	ldrb	r3, [r7, #15]
}
 800967a:	4618      	mov	r0, r3
 800967c:	3710      	adds	r7, #16
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <_ICM20948_BrustRead>:
			10);

	return status;
}

HAL_StatusTypeDef _ICM20948_BrustRead(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const startAddress, uint16_t const amountOfRegistersToRead, uint8_t * readData) {
 8009682:	b580      	push	{r7, lr}
 8009684:	b088      	sub	sp, #32
 8009686:	af04      	add	r7, sp, #16
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	4608      	mov	r0, r1
 800968c:	4611      	mov	r1, r2
 800968e:	461a      	mov	r2, r3
 8009690:	4603      	mov	r3, r0
 8009692:	70fb      	strb	r3, [r7, #3]
 8009694:	460b      	mov	r3, r1
 8009696:	70bb      	strb	r3, [r7, #2]
 8009698:	4613      	mov	r3, r2
 800969a:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800969c:	2300      	movs	r3, #0
 800969e:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 80096a0:	78fb      	ldrb	r3, [r7, #3]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d101      	bne.n	80096aa <_ICM20948_BrustRead+0x28>
 80096a6:	2368      	movs	r3, #104	@ 0x68
 80096a8:	e000      	b.n	80096ac <_ICM20948_BrustRead+0x2a>
 80096aa:	2369      	movs	r3, #105	@ 0x69
 80096ac:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(
 80096ae:	7bbb      	ldrb	r3, [r7, #14]
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	005b      	lsls	r3, r3, #1
 80096b4:	b299      	uxth	r1, r3
 80096b6:	78bb      	ldrb	r3, [r7, #2]
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	230a      	movs	r3, #10
 80096bc:	9302      	str	r3, [sp, #8]
 80096be:	883b      	ldrh	r3, [r7, #0]
 80096c0:	9301      	str	r3, [sp, #4]
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	9300      	str	r3, [sp, #0]
 80096c6:	2301      	movs	r3, #1
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f7fb ff8b 	bl	80055e4 <HAL_I2C_Mem_Read>
 80096ce:	4603      	mov	r3, r0
 80096d0:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			amountOfRegistersToRead * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <_ICM20948_BurstWrite>:

HAL_StatusTypeDef _ICM20948_BurstWrite(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const startAddress, uint16_t const amountOfRegistersToWrite, uint8_t * writeData) {
 80096dc:	b580      	push	{r7, lr}
 80096de:	b088      	sub	sp, #32
 80096e0:	af04      	add	r7, sp, #16
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	4608      	mov	r0, r1
 80096e6:	4611      	mov	r1, r2
 80096e8:	461a      	mov	r2, r3
 80096ea:	4603      	mov	r3, r0
 80096ec:	70fb      	strb	r3, [r7, #3]
 80096ee:	460b      	mov	r3, r1
 80096f0:	70bb      	strb	r3, [r7, #2]
 80096f2:	4613      	mov	r3, r2
 80096f4:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80096f6:	2300      	movs	r3, #0
 80096f8:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 80096fa:	78fb      	ldrb	r3, [r7, #3]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <_ICM20948_BurstWrite+0x28>
 8009700:	2368      	movs	r3, #104	@ 0x68
 8009702:	e000      	b.n	8009706 <_ICM20948_BurstWrite+0x2a>
 8009704:	2369      	movs	r3, #105	@ 0x69
 8009706:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8009708:	7bbb      	ldrb	r3, [r7, #14]
 800970a:	b29b      	uxth	r3, r3
 800970c:	005b      	lsls	r3, r3, #1
 800970e:	b299      	uxth	r1, r3
 8009710:	78bb      	ldrb	r3, [r7, #2]
 8009712:	b29a      	uxth	r2, r3
 8009714:	230a      	movs	r3, #10
 8009716:	9302      	str	r3, [sp, #8]
 8009718:	883b      	ldrh	r3, [r7, #0]
 800971a:	9301      	str	r3, [sp, #4]
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	9300      	str	r3, [sp, #0]
 8009720:	2301      	movs	r3, #1
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f7fb fe64 	bl	80053f0 <HAL_I2C_Mem_Write>
 8009728:	4603      	mov	r3, r0
 800972a:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			writeData,
			amountOfRegistersToWrite * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800972c:	7bfb      	ldrb	r3, [r7, #15]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <_AK09916_WriteByte>:

HAL_StatusTypeDef _AK09916_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const registerAddress, uint8_t writeData) {
 8009736:	b580      	push	{r7, lr}
 8009738:	b088      	sub	sp, #32
 800973a:	af04      	add	r7, sp, #16
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	460b      	mov	r3, r1
 8009740:	70fb      	strb	r3, [r7, #3]
 8009742:	4613      	mov	r3, r2
 8009744:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 8009746:	2300      	movs	r3, #0
 8009748:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 800974a:	78fb      	ldrb	r3, [r7, #3]
 800974c:	b29a      	uxth	r2, r3
 800974e:	230a      	movs	r3, #10
 8009750:	9302      	str	r3, [sp, #8]
 8009752:	2301      	movs	r3, #1
 8009754:	9301      	str	r3, [sp, #4]
 8009756:	1cbb      	adds	r3, r7, #2
 8009758:	9300      	str	r3, [sp, #0]
 800975a:	2301      	movs	r3, #1
 800975c:	2118      	movs	r1, #24
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f7fb fe46 	bl	80053f0 <HAL_I2C_Mem_Write>
 8009764:	4603      	mov	r3, r0
 8009766:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8009768:	7bfb      	ldrb	r3, [r7, #15]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <ICM20948_init>:
	}
	
	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity) {
 8009772:	b580      	push	{r7, lr}
 8009774:	b084      	sub	sp, #16
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
 800977a:	4608      	mov	r0, r1
 800977c:	4611      	mov	r1, r2
 800977e:	461a      	mov	r2, r3
 8009780:	4603      	mov	r3, r0
 8009782:	70fb      	strb	r3, [r7, #3]
 8009784:	460b      	mov	r3, r1
 8009786:	70bb      	strb	r3, [r7, #2]
 8009788:	4613      	mov	r3, r2
 800978a:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800978c:	2300      	movs	r3, #0
 800978e:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8009790:	78fb      	ldrb	r3, [r7, #3]
 8009792:	2200      	movs	r2, #0
 8009794:	4619      	mov	r1, r3
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7ff ff1a 	bl	80095d0 <_ICM20948_SelectUserBank>
 800979c:	4603      	mov	r3, r0
 800979e:	73fb      	strb	r3, [r7, #15]

	do{
	status = _ICM20948_WriteByte(
 80097a0:	78f9      	ldrb	r1, [r7, #3]
 80097a2:	2380      	movs	r3, #128	@ 0x80
 80097a4:	2206      	movs	r2, #6
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7ff ff3e 	bl	8009628 <_ICM20948_WriteByte>
 80097ac:	4603      	mov	r3, r0
 80097ae:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);
	}
	while(status!=HAL_OK);
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1f4      	bne.n	80097a0 <ICM20948_init+0x2e>


	HAL_Delay(200);
 80097b6:	20c8      	movs	r0, #200	@ 0xc8
 80097b8:	f7fa fd26 	bl	8004208 <HAL_Delay>

	status = _ICM20948_WriteByte(
 80097bc:	78f9      	ldrb	r1, [r7, #3]
 80097be:	2301      	movs	r3, #1
 80097c0:	2206      	movs	r2, #6
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7ff ff30 	bl	8009628 <_ICM20948_WriteByte>
 80097c8:	4603      	mov	r3, r0
 80097ca:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_AUTO_SELECT_CLOCK);

	//enable both gyroscope and accelerometer
	status = _ICM20948_WriteByte(
 80097cc:	78f9      	ldrb	r1, [r7, #3]
 80097ce:	2300      	movs	r3, #0
 80097d0:	2207      	movs	r2, #7
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f7ff ff28 	bl	8009628 <_ICM20948_WriteByte>
 80097d8:	4603      	mov	r3, r0
 80097da:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); // For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 80097dc:	78fb      	ldrb	r3, [r7, #3]
 80097de:	2202      	movs	r2, #2
 80097e0:	4619      	mov	r1, r3
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f7ff fef4 	bl	80095d0 <_ICM20948_SelectUserBank>
 80097e8:	4603      	mov	r3, r0
 80097ea:	73fb      	strb	r3, [r7, #15]
	//gyroscope sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			0 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << GYRO_FS_SEL_BIT|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 80097ec:	78bb      	ldrb	r3, [r7, #2]
 80097ee:	005b      	lsls	r3, r3, #1
 80097f0:	b25b      	sxtb	r3, r3
 80097f2:	f043 0301 	orr.w	r3, r3, #1
 80097f6:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	78f9      	ldrb	r1, [r7, #3]
 80097fc:	2201      	movs	r2, #1
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f7ff ff12 	bl	8009628 <_ICM20948_WriteByte>
 8009804:	4603      	mov	r3, r0
 8009806:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 8009808:	78f9      	ldrb	r1, [r7, #3]
 800980a:	2304      	movs	r3, #4
 800980c:	2200      	movs	r2, #0
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f7ff ff0a 	bl	8009628 <_ICM20948_WriteByte>
 8009814:	4603      	mov	r3, r0
 8009816:	73fb      	strb	r3, [r7, #15]
	//accelerometer sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
			1 << ACCEL_DLPFCFG_BIT|selectAccelSensitivity << ACCEL_FS_SEL_BIT|0x01 << ACCEL_FCHOICE_BIT);
 8009818:	787b      	ldrb	r3, [r7, #1]
 800981a:	005b      	lsls	r3, r3, #1
 800981c:	b25b      	sxtb	r3, r3
 800981e:	f043 0309 	orr.w	r3, r3, #9
 8009822:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 8009824:	b2db      	uxtb	r3, r3
 8009826:	78f9      	ldrb	r1, [r7, #3]
 8009828:	2214      	movs	r2, #20
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7ff fefc 	bl	8009628 <_ICM20948_WriteByte>
 8009830:	4603      	mov	r3, r0
 8009832:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 8009834:	78f9      	ldrb	r1, [r7, #3]
 8009836:	2304      	movs	r3, #4
 8009838:	2211      	movs	r2, #17
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f7ff fef4 	bl	8009628 <_ICM20948_WriteByte>
 8009840:	4603      	mov	r3, r0
 8009842:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
			4);


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8009844:	78fb      	ldrb	r3, [r7, #3]
 8009846:	2200      	movs	r2, #0
 8009848:	4619      	mov	r1, r3
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7ff fec0 	bl	80095d0 <_ICM20948_SelectUserBank>
 8009850:	4603      	mov	r3, r0
 8009852:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 8009854:	78f9      	ldrb	r1, [r7, #3]
 8009856:	2302      	movs	r3, #2
 8009858:	220f      	movs	r2, #15
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f7ff fee4 	bl	8009628 <_ICM20948_WriteByte>
 8009860:	4603      	mov	r3, r0
 8009862:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

	status = _AK09916_WriteByte(
 8009864:	2208      	movs	r2, #8
 8009866:	2131      	movs	r1, #49	@ 0x31
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f7ff ff64 	bl	8009736 <_AK09916_WriteByte>
 800986e:	4603      	mov	r3, r0
 8009870:	73fb      	strb	r3, [r7, #15]
			hi2c,
			AK09916__CNTL2__REGISTER,
			0x08);
}
 8009872:	bf00      	nop
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	0000      	movs	r0, r0
 800987c:	0000      	movs	r0, r0
	...

08009880 <ICM20948_readGyroscope_all>:
			break;
	}

}

void ICM20948_readGyroscope_all(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, float reading[3]) {
 8009880:	b590      	push	{r4, r7, lr}
 8009882:	b08f      	sub	sp, #60	@ 0x3c
 8009884:	af02      	add	r7, sp, #8
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	607b      	str	r3, [r7, #4]
 800988a:	460b      	mov	r3, r1
 800988c:	72fb      	strb	r3, [r7, #11]
 800988e:	4613      	mov	r3, r2
 8009890:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[6];

	//_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__GYRO_XOUT_H__REGISTER, 6, readData);
 8009892:	7af9      	ldrb	r1, [r7, #11]
 8009894:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009898:	9300      	str	r3, [sp, #0]
 800989a:	2306      	movs	r3, #6
 800989c:	2233      	movs	r2, #51	@ 0x33
 800989e:	68f8      	ldr	r0, [r7, #12]
 80098a0:	f7ff feef 	bl	8009682 <_ICM20948_BrustRead>

	int16_t rD_int[3];
		rD_int[X] = readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE];
 80098a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80098a8:	021b      	lsls	r3, r3, #8
 80098aa:	b21a      	sxth	r2, r3
 80098ac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80098b0:	b21b      	sxth	r3, r3
 80098b2:	4313      	orrs	r3, r2
 80098b4:	b21b      	sxth	r3, r3
 80098b6:	843b      	strh	r3, [r7, #32]
		rD_int[Y] = readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE];
 80098b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80098bc:	021b      	lsls	r3, r3, #8
 80098be:	b21a      	sxth	r2, r3
 80098c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80098c4:	b21b      	sxth	r3, r3
 80098c6:	4313      	orrs	r3, r2
 80098c8:	b21b      	sxth	r3, r3
 80098ca:	847b      	strh	r3, [r7, #34]	@ 0x22
		rD_int[Z] = readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE];
 80098cc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80098d0:	021b      	lsls	r3, r3, #8
 80098d2:	b21a      	sxth	r2, r3
 80098d4:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80098d8:	b21b      	sxth	r3, r3
 80098da:	4313      	orrs	r3, r2
 80098dc:	b21b      	sxth	r3, r3
 80098de:	84bb      	strh	r3, [r7, #36]	@ 0x24

		float rD[3];
		rD[X] = (float) rD_int[X];
 80098e0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80098e4:	ee07 3a90 	vmov	s15, r3
 80098e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098ec:	edc7 7a05 	vstr	s15, [r7, #20]
		rD[Y] = (float) rD_int[Y];
 80098f0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80098f4:	ee07 3a90 	vmov	s15, r3
 80098f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80098fc:	edc7 7a06 	vstr	s15, [r7, #24]
		rD[Z] = (float) rD_int[Z];
 8009900:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8009904:	ee07 3a90 	vmov	s15, r3
 8009908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800990c:	edc7 7a07 	vstr	s15, [r7, #28]

	//*gyroZ = (float) -reading;
	switch (selectGyroSensitivity) {
 8009910:	7abb      	ldrb	r3, [r7, #10]
 8009912:	2b03      	cmp	r3, #3
 8009914:	f200 80bc 	bhi.w	8009a90 <ICM20948_readGyroscope_all+0x210>
 8009918:	a201      	add	r2, pc, #4	@ (adr r2, 8009920 <ICM20948_readGyroscope_all+0xa0>)
 800991a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991e:	bf00      	nop
 8009920:	08009931 	.word	0x08009931
 8009924:	0800996d 	.word	0x0800996d
 8009928:	080099a9 	.word	0x080099a9
 800992c:	08009a1d 	.word	0x08009a1d
		case GYRO_FULL_SCALE_250DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 8009930:	ed97 7a05 	vldr	s14, [r7, #20]
 8009934:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 8009aa8 <ICM20948_readGyroscope_all+0x228>
 8009938:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	edc3 7a00 	vstr	s15, [r3]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 8009942:	ed97 7a06 	vldr	s14, [r7, #24]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	3304      	adds	r3, #4
 800994a:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8009aa8 <ICM20948_readGyroscope_all+0x228>
 800994e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009952:	edc3 7a00 	vstr	s15, [r3]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 8009956:	ed97 7a07 	vldr	s14, [r7, #28]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	3308      	adds	r3, #8
 800995e:	eddf 6a52 	vldr	s13, [pc, #328]	@ 8009aa8 <ICM20948_readGyroscope_all+0x228>
 8009962:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009966:	edc3 7a00 	vstr	s15, [r3]
			break;
 800996a:	e091      	b.n	8009a90 <ICM20948_readGyroscope_all+0x210>
		case GYRO_FULL_SCALE_500DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 800996c:	ed97 7a05 	vldr	s14, [r7, #20]
 8009970:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009aac <ICM20948_readGyroscope_all+0x22c>
 8009974:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	edc3 7a00 	vstr	s15, [r3]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 800997e:	ed97 7a06 	vldr	s14, [r7, #24]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	3304      	adds	r3, #4
 8009986:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8009aac <ICM20948_readGyroscope_all+0x22c>
 800998a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800998e:	edc3 7a00 	vstr	s15, [r3]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 8009992:	ed97 7a07 	vldr	s14, [r7, #28]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	3308      	adds	r3, #8
 800999a:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8009aac <ICM20948_readGyroscope_all+0x22c>
 800999e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80099a2:	edc3 7a00 	vstr	s15, [r3]
			break;
 80099a6:	e073      	b.n	8009a90 <ICM20948_readGyroscope_all+0x210>
		case GYRO_FULL_SCALE_1000DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7f6 fdcc 	bl	8000548 <__aeabi_f2d>
 80099b0:	a339      	add	r3, pc, #228	@ (adr r3, 8009a98 <ICM20948_readGyroscope_all+0x218>)
 80099b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b6:	f7f6 ff49 	bl	800084c <__aeabi_ddiv>
 80099ba:	4602      	mov	r2, r0
 80099bc:	460b      	mov	r3, r1
 80099be:	4610      	mov	r0, r2
 80099c0:	4619      	mov	r1, r3
 80099c2:	f7f7 f911 	bl	8000be8 <__aeabi_d2f>
 80099c6:	4602      	mov	r2, r0
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	601a      	str	r2, [r3, #0]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7f6 fdba 	bl	8000548 <__aeabi_f2d>
 80099d4:	a330      	add	r3, pc, #192	@ (adr r3, 8009a98 <ICM20948_readGyroscope_all+0x218>)
 80099d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099da:	f7f6 ff37 	bl	800084c <__aeabi_ddiv>
 80099de:	4602      	mov	r2, r0
 80099e0:	460b      	mov	r3, r1
 80099e2:	4610      	mov	r0, r2
 80099e4:	4619      	mov	r1, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	1d1c      	adds	r4, r3, #4
 80099ea:	f7f7 f8fd 	bl	8000be8 <__aeabi_d2f>
 80099ee:	4603      	mov	r3, r0
 80099f0:	6023      	str	r3, [r4, #0]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7f6 fda7 	bl	8000548 <__aeabi_f2d>
 80099fa:	a327      	add	r3, pc, #156	@ (adr r3, 8009a98 <ICM20948_readGyroscope_all+0x218>)
 80099fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a00:	f7f6 ff24 	bl	800084c <__aeabi_ddiv>
 8009a04:	4602      	mov	r2, r0
 8009a06:	460b      	mov	r3, r1
 8009a08:	4610      	mov	r0, r2
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f103 0408 	add.w	r4, r3, #8
 8009a12:	f7f7 f8e9 	bl	8000be8 <__aeabi_d2f>
 8009a16:	4603      	mov	r3, r0
 8009a18:	6023      	str	r3, [r4, #0]
			break;
 8009a1a:	e039      	b.n	8009a90 <ICM20948_readGyroscope_all+0x210>
		case GYRO_FULL_SCALE_2000DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7f6 fd92 	bl	8000548 <__aeabi_f2d>
 8009a24:	a31e      	add	r3, pc, #120	@ (adr r3, 8009aa0 <ICM20948_readGyroscope_all+0x220>)
 8009a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2a:	f7f6 ff0f 	bl	800084c <__aeabi_ddiv>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	460b      	mov	r3, r1
 8009a32:	4610      	mov	r0, r2
 8009a34:	4619      	mov	r1, r3
 8009a36:	f7f7 f8d7 	bl	8000be8 <__aeabi_d2f>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	601a      	str	r2, [r3, #0]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7f6 fd80 	bl	8000548 <__aeabi_f2d>
 8009a48:	a315      	add	r3, pc, #84	@ (adr r3, 8009aa0 <ICM20948_readGyroscope_all+0x220>)
 8009a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4e:	f7f6 fefd 	bl	800084c <__aeabi_ddiv>
 8009a52:	4602      	mov	r2, r0
 8009a54:	460b      	mov	r3, r1
 8009a56:	4610      	mov	r0, r2
 8009a58:	4619      	mov	r1, r3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	1d1c      	adds	r4, r3, #4
 8009a5e:	f7f7 f8c3 	bl	8000be8 <__aeabi_d2f>
 8009a62:	4603      	mov	r3, r0
 8009a64:	6023      	str	r3, [r4, #0]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 8009a66:	69fb      	ldr	r3, [r7, #28]
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7f6 fd6d 	bl	8000548 <__aeabi_f2d>
 8009a6e:	a30c      	add	r3, pc, #48	@ (adr r3, 8009aa0 <ICM20948_readGyroscope_all+0x220>)
 8009a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a74:	f7f6 feea 	bl	800084c <__aeabi_ddiv>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4610      	mov	r0, r2
 8009a7e:	4619      	mov	r1, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f103 0408 	add.w	r4, r3, #8
 8009a86:	f7f7 f8af 	bl	8000be8 <__aeabi_d2f>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	6023      	str	r3, [r4, #0]
			break;
 8009a8e:	bf00      	nop
	}

}
 8009a90:	bf00      	nop
 8009a92:	3734      	adds	r7, #52	@ 0x34
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd90      	pop	{r4, r7, pc}
 8009a98:	66666666 	.word	0x66666666
 8009a9c:	40406666 	.word	0x40406666
 8009aa0:	66666666 	.word	0x66666666
 8009aa4:	40306666 	.word	0x40306666
 8009aa8:	43030000 	.word	0x43030000
 8009aac:	42830000 	.word	0x42830000

08009ab0 <ICM20948_readAccelerometer_all>:

void ICM20948_readAccelerometer_all(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectAccelSensitivity, float readings[3]) {
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b08e      	sub	sp, #56	@ 0x38
 8009ab4:	af02      	add	r7, sp, #8
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	607b      	str	r3, [r7, #4]
 8009aba:	460b      	mov	r3, r1
 8009abc:	72fb      	strb	r3, [r7, #11]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[6];

//	_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__ACCEL_XOUT_H__REGISTER, 6, readData);
 8009ac2:	7af9      	ldrb	r1, [r7, #11]
 8009ac4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	2306      	movs	r3, #6
 8009acc:	222d      	movs	r2, #45	@ 0x2d
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f7ff fdd7 	bl	8009682 <_ICM20948_BrustRead>


	int16_t rD_int[3];
	rD_int[X] = readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE];
 8009ad4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009ad8:	021b      	lsls	r3, r3, #8
 8009ada:	b21a      	sxth	r2, r3
 8009adc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009ae0:	b21b      	sxth	r3, r3
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	b21b      	sxth	r3, r3
 8009ae6:	843b      	strh	r3, [r7, #32]
	rD_int[Y] = readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE];
 8009ae8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009aec:	021b      	lsls	r3, r3, #8
 8009aee:	b21a      	sxth	r2, r3
 8009af0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009af4:	b21b      	sxth	r3, r3
 8009af6:	4313      	orrs	r3, r2
 8009af8:	b21b      	sxth	r3, r3
 8009afa:	847b      	strh	r3, [r7, #34]	@ 0x22
	rD_int[Z] = readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE];
 8009afc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009b00:	021b      	lsls	r3, r3, #8
 8009b02:	b21a      	sxth	r2, r3
 8009b04:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8009b08:	b21b      	sxth	r3, r3
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	b21b      	sxth	r3, r3
 8009b0e:	84bb      	strh	r3, [r7, #36]	@ 0x24

	float rD[3];
	rD[X] = (float) rD_int[X];
 8009b10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009b14:	ee07 3a90 	vmov	s15, r3
 8009b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b1c:	edc7 7a05 	vstr	s15, [r7, #20]
	rD[Y] = (float) rD_int[Y];
 8009b20:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8009b24:	ee07 3a90 	vmov	s15, r3
 8009b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b2c:	edc7 7a06 	vstr	s15, [r7, #24]
	rD[Z] = (float) rD_int[Z];
 8009b30:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8009b34:	ee07 3a90 	vmov	s15, r3
 8009b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b3c:	edc7 7a07 	vstr	s15, [r7, #28]

	switch (selectAccelSensitivity) {
 8009b40:	7abb      	ldrb	r3, [r7, #10]
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	f200 8084 	bhi.w	8009c50 <ICM20948_readAccelerometer_all+0x1a0>
 8009b48:	a201      	add	r2, pc, #4	@ (adr r2, 8009b50 <ICM20948_readAccelerometer_all+0xa0>)
 8009b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4e:	bf00      	nop
 8009b50:	08009b61 	.word	0x08009b61
 8009b54:	08009b9d 	.word	0x08009b9d
 8009b58:	08009bd9 	.word	0x08009bd9
 8009b5c:	08009c15 	.word	0x08009c15
		case ACCEL_FULL_SCALE_2G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 8009b60:	ed97 7a05 	vldr	s14, [r7, #20]
 8009b64:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009ca4 <ICM20948_readAccelerometer_all+0x1f4>
 8009b68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 8009b72:	ed97 7a06 	vldr	s14, [r7, #24]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	3304      	adds	r3, #4
 8009b7a:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8009ca4 <ICM20948_readAccelerometer_all+0x1f4>
 8009b7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009b82:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 8009b86:	ed97 7a07 	vldr	s14, [r7, #28]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	3308      	adds	r3, #8
 8009b8e:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8009ca4 <ICM20948_readAccelerometer_all+0x1f4>
 8009b92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009b96:	edc3 7a00 	vstr	s15, [r3]
			break;
 8009b9a:	e059      	b.n	8009c50 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_4G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 8009b9c:	ed97 7a05 	vldr	s14, [r7, #20]
 8009ba0:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8009ca8 <ICM20948_readAccelerometer_all+0x1f8>
 8009ba4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 8009bae:	ed97 7a06 	vldr	s14, [r7, #24]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	3304      	adds	r3, #4
 8009bb6:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8009ca8 <ICM20948_readAccelerometer_all+0x1f8>
 8009bba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009bbe:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 8009bc2:	ed97 7a07 	vldr	s14, [r7, #28]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	3308      	adds	r3, #8
 8009bca:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8009ca8 <ICM20948_readAccelerometer_all+0x1f8>
 8009bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009bd2:	edc3 7a00 	vstr	s15, [r3]
			break;
 8009bd6:	e03b      	b.n	8009c50 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_8G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 8009bd8:	ed97 7a05 	vldr	s14, [r7, #20]
 8009bdc:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8009cac <ICM20948_readAccelerometer_all+0x1fc>
 8009be0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 8009bea:	ed97 7a06 	vldr	s14, [r7, #24]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	3304      	adds	r3, #4
 8009bf2:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8009cac <ICM20948_readAccelerometer_all+0x1fc>
 8009bf6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009bfa:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 8009bfe:	ed97 7a07 	vldr	s14, [r7, #28]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	3308      	adds	r3, #8
 8009c06:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8009cac <ICM20948_readAccelerometer_all+0x1fc>
 8009c0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009c0e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8009c12:	e01d      	b.n	8009c50 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_16G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 8009c14:	ed97 7a05 	vldr	s14, [r7, #20]
 8009c18:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8009cb0 <ICM20948_readAccelerometer_all+0x200>
 8009c1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 8009c26:	ed97 7a06 	vldr	s14, [r7, #24]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	3304      	adds	r3, #4
 8009c2e:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8009cb0 <ICM20948_readAccelerometer_all+0x200>
 8009c32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009c36:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 8009c3a:	ed97 7a07 	vldr	s14, [r7, #28]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	3308      	adds	r3, #8
 8009c42:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8009cb0 <ICM20948_readAccelerometer_all+0x200>
 8009c46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009c4a:	edc3 7a00 	vstr	s15, [r3]
			break;
 8009c4e:	bf00      	nop
	}
	readings[X] -=accel_offset[X];
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	ed93 7a00 	vldr	s14, [r3]
 8009c56:	4b17      	ldr	r3, [pc, #92]	@ (8009cb4 <ICM20948_readAccelerometer_all+0x204>)
 8009c58:	edd3 7a00 	vldr	s15, [r3]
 8009c5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	edc3 7a00 	vstr	s15, [r3]
	readings[Y] -=accel_offset[Y];
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	3304      	adds	r3, #4
 8009c6a:	ed93 7a00 	vldr	s14, [r3]
 8009c6e:	4b11      	ldr	r3, [pc, #68]	@ (8009cb4 <ICM20948_readAccelerometer_all+0x204>)
 8009c70:	edd3 7a01 	vldr	s15, [r3, #4]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	3304      	adds	r3, #4
 8009c78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c7c:	edc3 7a00 	vstr	s15, [r3]
	readings[Z] -=accel_offset[Z];
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	3308      	adds	r3, #8
 8009c84:	ed93 7a00 	vldr	s14, [r3]
 8009c88:	4b0a      	ldr	r3, [pc, #40]	@ (8009cb4 <ICM20948_readAccelerometer_all+0x204>)
 8009c8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	3308      	adds	r3, #8
 8009c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c96:	edc3 7a00 	vstr	s15, [r3]
}
 8009c9a:	bf00      	nop
 8009c9c:	3730      	adds	r7, #48	@ 0x30
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	46800000 	.word	0x46800000
 8009ca8:	46000000 	.word	0x46000000
 8009cac:	45800000 	.word	0x45800000
 8009cb0:	45000000 	.word	0x45000000
 8009cb4:	200005f8 	.word	0x200005f8

08009cb8 <ICM20948_CalibrateGyro>:
			mag[i] = reading * MAG_SENSITIVITY_SCALE_FACTOR;
		}
	}

void ICM20948_CalibrateGyro(I2C_HandleTypeDef * hi2c,const uint8_t sensitivity,int samples)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b090      	sub	sp, #64	@ 0x40
 8009cbc:	af02      	add	r7, sp, #8
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	607a      	str	r2, [r7, #4]
 8009cc4:	72fb      	strb	r3, [r7, #11]
	//float temp[3]={};
	int32_t gyro_bias[3] = {0};
 8009cc6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009cca:	2200      	movs	r2, #0
 8009ccc:	601a      	str	r2, [r3, #0]
 8009cce:	605a      	str	r2, [r3, #4]
 8009cd0:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	623b      	str	r3, [r7, #32]
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	84bb      	strh	r3, [r7, #36]	@ 0x24

		for(int i = 0; i < samples; i++)
 8009cda:	2300      	movs	r3, #0
 8009cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cde:	e032      	b.n	8009d46 <ICM20948_CalibrateGyro+0x8e>
		{
			uint8_t readData[6];
			//_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
			_ICM20948_BrustRead(hi2c, 0, ICM20948__USER_BANK_0__GYRO_XOUT_H__REGISTER, 6, readData);
 8009ce0:	f107 0318 	add.w	r3, r7, #24
 8009ce4:	9300      	str	r3, [sp, #0]
 8009ce6:	2306      	movs	r3, #6
 8009ce8:	2233      	movs	r2, #51	@ 0x33
 8009cea:	2100      	movs	r1, #0
 8009cec:	68f8      	ldr	r0, [r7, #12]
 8009cee:	f7ff fcc8 	bl	8009682 <_ICM20948_BrustRead>

			int16_t temp[3];
			temp[X] = readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE];
 8009cf2:	7e3b      	ldrb	r3, [r7, #24]
 8009cf4:	021b      	lsls	r3, r3, #8
 8009cf6:	b21a      	sxth	r2, r3
 8009cf8:	7e7b      	ldrb	r3, [r7, #25]
 8009cfa:	b21b      	sxth	r3, r3
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	b21b      	sxth	r3, r3
 8009d00:	823b      	strh	r3, [r7, #16]
			temp[Y] = readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE];
 8009d02:	7ebb      	ldrb	r3, [r7, #26]
 8009d04:	021b      	lsls	r3, r3, #8
 8009d06:	b21a      	sxth	r2, r3
 8009d08:	7efb      	ldrb	r3, [r7, #27]
 8009d0a:	b21b      	sxth	r3, r3
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	b21b      	sxth	r3, r3
 8009d10:	827b      	strh	r3, [r7, #18]
			temp[Z] = readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE];
 8009d12:	7f3b      	ldrb	r3, [r7, #28]
 8009d14:	021b      	lsls	r3, r3, #8
 8009d16:	b21a      	sxth	r2, r3
 8009d18:	7f7b      	ldrb	r3, [r7, #29]
 8009d1a:	b21b      	sxth	r3, r3
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	b21b      	sxth	r3, r3
 8009d20:	82bb      	strh	r3, [r7, #20]

			gyro_bias[0] += temp[0];
 8009d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d24:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009d28:	4413      	add	r3, r2
 8009d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
			gyro_bias[1] += temp[1];
 8009d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d2e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8009d32:	4413      	add	r3, r2
 8009d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
			gyro_bias[2] += temp[2];
 8009d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d38:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8009d3c:	4413      	add	r3, r2
 8009d3e:	633b      	str	r3, [r7, #48]	@ 0x30
		for(int i = 0; i < samples; i++)
 8009d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d42:	3301      	adds	r3, #1
 8009d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	429a      	cmp	r2, r3
 8009d4c:	dbc8      	blt.n	8009ce0 <ICM20948_CalibrateGyro+0x28>
		}

		gyro_bias[0] /= samples;
 8009d4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	fb92 f3f3 	sdiv	r3, r2, r3
 8009d56:	62bb      	str	r3, [r7, #40]	@ 0x28
		gyro_bias[1] /= samples;
 8009d58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8009d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
		gyro_bias[2] /= samples;
 8009d62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	fb92 f3f3 	sdiv	r3, r2, r3
 8009d6a:	633b      	str	r3, [r7, #48]	@ 0x30

		// Construct the gyro biases for push to the hardware gyro bias registers,
		// which are reset to zero upon device startup.
		// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
		// Biases are additive, so change sign on calculated average gyro biases
		gyro_offset[0] = (-gyro_bias[0] * 2  >> 8) & 0xFF;
 8009d6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d6e:	4613      	mov	r3, r2
 8009d70:	07db      	lsls	r3, r3, #31
 8009d72:	1a9b      	subs	r3, r3, r2
 8009d74:	005b      	lsls	r3, r3, #1
 8009d76:	121b      	asrs	r3, r3, #8
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	f887 3020 	strb.w	r3, [r7, #32]
		gyro_offset[1] = (-gyro_bias[0] * 2)       & 0xFF;
 8009d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d80:	b2db      	uxtb	r3, r3
 8009d82:	461a      	mov	r2, r3
 8009d84:	01d2      	lsls	r2, r2, #7
 8009d86:	1ad3      	subs	r3, r2, r3
 8009d88:	005b      	lsls	r3, r3, #1
 8009d8a:	b2db      	uxtb	r3, r3
 8009d8c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		gyro_offset[2] = (-gyro_bias[1] * 2  >> 8) & 0xFF;
 8009d90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d92:	4613      	mov	r3, r2
 8009d94:	07db      	lsls	r3, r3, #31
 8009d96:	1a9b      	subs	r3, r3, r2
 8009d98:	005b      	lsls	r3, r3, #1
 8009d9a:	121b      	asrs	r3, r3, #8
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		gyro_offset[3] = (-gyro_bias[1] * 2)       & 0xFF;
 8009da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	461a      	mov	r2, r3
 8009da8:	01d2      	lsls	r2, r2, #7
 8009daa:	1ad3      	subs	r3, r2, r3
 8009dac:	005b      	lsls	r3, r3, #1
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		gyro_offset[4] = (-gyro_bias[2] * 2  >> 8) & 0xFF;
 8009db4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009db6:	4613      	mov	r3, r2
 8009db8:	07db      	lsls	r3, r3, #31
 8009dba:	1a9b      	subs	r3, r3, r2
 8009dbc:	005b      	lsls	r3, r3, #1
 8009dbe:	121b      	asrs	r3, r3, #8
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		gyro_offset[5] = (-gyro_bias[2] * 2)       & 0xFF;
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	461a      	mov	r2, r3
 8009dcc:	01d2      	lsls	r2, r2, #7
 8009dce:	1ad3      	subs	r3, r2, r3
 8009dd0:	005b      	lsls	r3, r3, #1
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		_ICM20948_SelectUserBank(hi2c,0, USER_BANK_2);
 8009dd8:	2202      	movs	r2, #2
 8009dda:	2100      	movs	r1, #0
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f7ff fbf7 	bl	80095d0 <_ICM20948_SelectUserBank>
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+2,gyro_offset[2]);
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+3,gyro_offset[3]);
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+4,gyro_offset[4]);
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+5,gyro_offset[5]);

		_ICM20948_BurstWrite(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER,6,gyro_offset);
 8009de2:	f107 0320 	add.w	r3, r7, #32
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	2306      	movs	r3, #6
 8009dea:	2203      	movs	r2, #3
 8009dec:	2100      	movs	r1, #0
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f7ff fc74 	bl	80096dc <_ICM20948_BurstWrite>
		_ICM20948_SelectUserBank(hi2c,0, USER_BANK_0);
 8009df4:	2200      	movs	r2, #0
 8009df6:	2100      	movs	r1, #0
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f7ff fbe9 	bl	80095d0 <_ICM20948_SelectUserBank>
	}
 8009dfe:	bf00      	nop
 8009e00:	3738      	adds	r7, #56	@ 0x38
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
	...

08009e08 <ICM20948_CalibrateAccel>:

void ICM20948_CalibrateAccel(I2C_HandleTypeDef * hi2c,const uint8_t sensitivity,int samples)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b08c      	sub	sp, #48	@ 0x30
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	60f8      	str	r0, [r7, #12]
 8009e10:	460b      	mov	r3, r1
 8009e12:	607a      	str	r2, [r7, #4]
 8009e14:	72fb      	strb	r3, [r7, #11]
	float accel_bias[3] = {0};
 8009e16:	f107 0320 	add.w	r3, r7, #32
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	601a      	str	r2, [r3, #0]
 8009e1e:	605a      	str	r2, [r3, #4]
 8009e20:	609a      	str	r2, [r3, #8]

			for(int i = 0; i < samples; i++)
 8009e22:	2300      	movs	r3, #0
 8009e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e26:	e025      	b.n	8009e74 <ICM20948_CalibrateAccel+0x6c>
			{

				//_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
				float temp[3];
				ICM20948_readAccelerometer_all(hi2c, 0, sensitivity, temp);
 8009e28:	f107 0314 	add.w	r3, r7, #20
 8009e2c:	7afa      	ldrb	r2, [r7, #11]
 8009e2e:	2100      	movs	r1, #0
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f7ff fe3d 	bl	8009ab0 <ICM20948_readAccelerometer_all>


				accel_bias[0] += temp[0];
 8009e36:	ed97 7a08 	vldr	s14, [r7, #32]
 8009e3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8009e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e42:	edc7 7a08 	vstr	s15, [r7, #32]
				accel_bias[1] += temp[1];
 8009e46:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8009e4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8009e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e52:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
				accel_bias[2] += (temp[2]-1.0f);//ignore the gravity
 8009e56:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8009e5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8009e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e62:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e6a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			for(int i = 0; i < samples; i++)
 8009e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e70:	3301      	adds	r3, #1
 8009e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	dbd5      	blt.n	8009e28 <ICM20948_CalibrateAccel+0x20>
			}

			accel_offset[0] =accel_bias[0]/ samples;
 8009e7c:	edd7 6a08 	vldr	s13, [r7, #32]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	ee07 3a90 	vmov	s15, r3
 8009e86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8009ecc <ICM20948_CalibrateAccel+0xc4>)
 8009e90:	edc3 7a00 	vstr	s15, [r3]
			accel_offset[1] =accel_bias[1]/ samples;
 8009e94:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	ee07 3a90 	vmov	s15, r3
 8009e9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ea6:	4b09      	ldr	r3, [pc, #36]	@ (8009ecc <ICM20948_CalibrateAccel+0xc4>)
 8009ea8:	edc3 7a01 	vstr	s15, [r3, #4]
			accel_offset[2] =accel_bias[2]/ samples;
 8009eac:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	ee07 3a90 	vmov	s15, r3
 8009eb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ebe:	4b03      	ldr	r3, [pc, #12]	@ (8009ecc <ICM20948_CalibrateAccel+0xc4>)
 8009ec0:	edc3 7a02 	vstr	s15, [r3, #8]
	}
 8009ec4:	bf00      	nop
 8009ec6:	3730      	adds	r7, #48	@ 0x30
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	200005f8 	.word	0x200005f8

08009ed0 <__NVIC_SetPriority>:
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	6039      	str	r1, [r7, #0]
 8009eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	db0a      	blt.n	8009efa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	b2da      	uxtb	r2, r3
 8009ee8:	490c      	ldr	r1, [pc, #48]	@ (8009f1c <__NVIC_SetPriority+0x4c>)
 8009eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009eee:	0112      	lsls	r2, r2, #4
 8009ef0:	b2d2      	uxtb	r2, r2
 8009ef2:	440b      	add	r3, r1
 8009ef4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009ef8:	e00a      	b.n	8009f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	b2da      	uxtb	r2, r3
 8009efe:	4908      	ldr	r1, [pc, #32]	@ (8009f20 <__NVIC_SetPriority+0x50>)
 8009f00:	79fb      	ldrb	r3, [r7, #7]
 8009f02:	f003 030f 	and.w	r3, r3, #15
 8009f06:	3b04      	subs	r3, #4
 8009f08:	0112      	lsls	r2, r2, #4
 8009f0a:	b2d2      	uxtb	r2, r2
 8009f0c:	440b      	add	r3, r1
 8009f0e:	761a      	strb	r2, [r3, #24]
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr
 8009f1c:	e000e100 	.word	0xe000e100
 8009f20:	e000ed00 	.word	0xe000ed00

08009f24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009f24:	b580      	push	{r7, lr}
 8009f26:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009f28:	2100      	movs	r1, #0
 8009f2a:	f06f 0004 	mvn.w	r0, #4
 8009f2e:	f7ff ffcf 	bl	8009ed0 <__NVIC_SetPriority>
#endif
}
 8009f32:	bf00      	nop
 8009f34:	bd80      	pop	{r7, pc}
	...

08009f38 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f3e:	f3ef 8305 	mrs	r3, IPSR
 8009f42:	603b      	str	r3, [r7, #0]
  return(result);
 8009f44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d003      	beq.n	8009f52 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009f4a:	f06f 0305 	mvn.w	r3, #5
 8009f4e:	607b      	str	r3, [r7, #4]
 8009f50:	e00c      	b.n	8009f6c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009f52:	4b0a      	ldr	r3, [pc, #40]	@ (8009f7c <osKernelInitialize+0x44>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d105      	bne.n	8009f66 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009f5a:	4b08      	ldr	r3, [pc, #32]	@ (8009f7c <osKernelInitialize+0x44>)
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	607b      	str	r3, [r7, #4]
 8009f64:	e002      	b.n	8009f6c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009f66:	f04f 33ff 	mov.w	r3, #4294967295
 8009f6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009f6c:	687b      	ldr	r3, [r7, #4]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	370c      	adds	r7, #12
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	20000604 	.word	0x20000604

08009f80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f86:	f3ef 8305 	mrs	r3, IPSR
 8009f8a:	603b      	str	r3, [r7, #0]
  return(result);
 8009f8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d003      	beq.n	8009f9a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009f92:	f06f 0305 	mvn.w	r3, #5
 8009f96:	607b      	str	r3, [r7, #4]
 8009f98:	e010      	b.n	8009fbc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8009fc8 <osKernelStart+0x48>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d109      	bne.n	8009fb6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009fa2:	f7ff ffbf 	bl	8009f24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009fa6:	4b08      	ldr	r3, [pc, #32]	@ (8009fc8 <osKernelStart+0x48>)
 8009fa8:	2202      	movs	r2, #2
 8009faa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009fac:	f001 f87a 	bl	800b0a4 <vTaskStartScheduler>
      stat = osOK;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	607b      	str	r3, [r7, #4]
 8009fb4:	e002      	b.n	8009fbc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009fbc:	687b      	ldr	r3, [r7, #4]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3708      	adds	r7, #8
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	20000604 	.word	0x20000604

08009fcc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b08e      	sub	sp, #56	@ 0x38
 8009fd0:	af04      	add	r7, sp, #16
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009fdc:	f3ef 8305 	mrs	r3, IPSR
 8009fe0:	617b      	str	r3, [r7, #20]
  return(result);
 8009fe2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d17e      	bne.n	800a0e6 <osThreadNew+0x11a>
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d07b      	beq.n	800a0e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009fee:	2380      	movs	r3, #128	@ 0x80
 8009ff0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009ff2:	2318      	movs	r3, #24
 8009ff4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8009ffe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d045      	beq.n	800a092 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d002      	beq.n	800a014 <osThreadNew+0x48>
        name = attr->name;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	699b      	ldr	r3, [r3, #24]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d002      	beq.n	800a022 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	699b      	ldr	r3, [r3, #24]
 800a020:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d008      	beq.n	800a03a <osThreadNew+0x6e>
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	2b38      	cmp	r3, #56	@ 0x38
 800a02c:	d805      	bhi.n	800a03a <osThreadNew+0x6e>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	f003 0301 	and.w	r3, r3, #1
 800a036:	2b00      	cmp	r3, #0
 800a038:	d001      	beq.n	800a03e <osThreadNew+0x72>
        return (NULL);
 800a03a:	2300      	movs	r3, #0
 800a03c:	e054      	b.n	800a0e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	695b      	ldr	r3, [r3, #20]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d003      	beq.n	800a04e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	695b      	ldr	r3, [r3, #20]
 800a04a:	089b      	lsrs	r3, r3, #2
 800a04c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00e      	beq.n	800a074 <osThreadNew+0xa8>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	2b5b      	cmp	r3, #91	@ 0x5b
 800a05c:	d90a      	bls.n	800a074 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a062:	2b00      	cmp	r3, #0
 800a064:	d006      	beq.n	800a074 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	695b      	ldr	r3, [r3, #20]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d002      	beq.n	800a074 <osThreadNew+0xa8>
        mem = 1;
 800a06e:	2301      	movs	r3, #1
 800a070:	61bb      	str	r3, [r7, #24]
 800a072:	e010      	b.n	800a096 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d10c      	bne.n	800a096 <osThreadNew+0xca>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d108      	bne.n	800a096 <osThreadNew+0xca>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	691b      	ldr	r3, [r3, #16]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d104      	bne.n	800a096 <osThreadNew+0xca>
          mem = 0;
 800a08c:	2300      	movs	r3, #0
 800a08e:	61bb      	str	r3, [r7, #24]
 800a090:	e001      	b.n	800a096 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a092:	2300      	movs	r3, #0
 800a094:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d110      	bne.n	800a0be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a0a4:	9202      	str	r2, [sp, #8]
 800a0a6:	9301      	str	r3, [sp, #4]
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	9300      	str	r3, [sp, #0]
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	6a3a      	ldr	r2, [r7, #32]
 800a0b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a0b2:	68f8      	ldr	r0, [r7, #12]
 800a0b4:	f000 fe1a 	bl	800acec <xTaskCreateStatic>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	613b      	str	r3, [r7, #16]
 800a0bc:	e013      	b.n	800a0e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d110      	bne.n	800a0e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a0c4:	6a3b      	ldr	r3, [r7, #32]
 800a0c6:	b29a      	uxth	r2, r3
 800a0c8:	f107 0310 	add.w	r3, r7, #16
 800a0cc:	9301      	str	r3, [sp, #4]
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f000 fe68 	bl	800adac <xTaskCreate>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d001      	beq.n	800a0e6 <osThreadNew+0x11a>
            hTask = NULL;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a0e6:	693b      	ldr	r3, [r7, #16]
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3728      	adds	r7, #40	@ 0x28
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0f8:	f3ef 8305 	mrs	r3, IPSR
 800a0fc:	60bb      	str	r3, [r7, #8]
  return(result);
 800a0fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a100:	2b00      	cmp	r3, #0
 800a102:	d003      	beq.n	800a10c <osDelay+0x1c>
    stat = osErrorISR;
 800a104:	f06f 0305 	mvn.w	r3, #5
 800a108:	60fb      	str	r3, [r7, #12]
 800a10a:	e007      	b.n	800a11c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a10c:	2300      	movs	r3, #0
 800a10e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d002      	beq.n	800a11c <osDelay+0x2c>
      vTaskDelay(ticks);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 ff8e 	bl	800b038 <vTaskDelay>
    }
  }

  return (stat);
 800a11c:	68fb      	ldr	r3, [r7, #12]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
	...

0800a128 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	4a07      	ldr	r2, [pc, #28]	@ (800a154 <vApplicationGetIdleTaskMemory+0x2c>)
 800a138:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	4a06      	ldr	r2, [pc, #24]	@ (800a158 <vApplicationGetIdleTaskMemory+0x30>)
 800a13e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2280      	movs	r2, #128	@ 0x80
 800a144:	601a      	str	r2, [r3, #0]
}
 800a146:	bf00      	nop
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	20000608 	.word	0x20000608
 800a158:	20000664 	.word	0x20000664

0800a15c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	4a07      	ldr	r2, [pc, #28]	@ (800a188 <vApplicationGetTimerTaskMemory+0x2c>)
 800a16c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	4a06      	ldr	r2, [pc, #24]	@ (800a18c <vApplicationGetTimerTaskMemory+0x30>)
 800a172:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a17a:	601a      	str	r2, [r3, #0]
}
 800a17c:	bf00      	nop
 800a17e:	3714      	adds	r7, #20
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr
 800a188:	20000864 	.word	0x20000864
 800a18c:	200008c0 	.word	0x200008c0

0800a190 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f103 0208 	add.w	r2, r3, #8
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a1a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f103 0208 	add.w	r2, r3, #8
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f103 0208 	add.w	r2, r3, #8
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a1de:	bf00      	nop
 800a1e0:	370c      	adds	r7, #12
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1ea:	b480      	push	{r7}
 800a1ec:	b085      	sub	sp, #20
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
 800a1f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	689a      	ldr	r2, [r3, #8]
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	683a      	ldr	r2, [r7, #0]
 800a20e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	683a      	ldr	r2, [r7, #0]
 800a214:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	1c5a      	adds	r2, r3, #1
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	601a      	str	r2, [r3, #0]
}
 800a226:	bf00      	nop
 800a228:	3714      	adds	r7, #20
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr

0800a232 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a232:	b480      	push	{r7}
 800a234:	b085      	sub	sp, #20
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
 800a23a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a248:	d103      	bne.n	800a252 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	e00c      	b.n	800a26c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	3308      	adds	r3, #8
 800a256:	60fb      	str	r3, [r7, #12]
 800a258:	e002      	b.n	800a260 <vListInsert+0x2e>
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	60fb      	str	r3, [r7, #12]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d2f6      	bcs.n	800a25a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	685a      	ldr	r2, [r3, #4]
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	683a      	ldr	r2, [r7, #0]
 800a27a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	683a      	ldr	r2, [r7, #0]
 800a286:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	1c5a      	adds	r2, r3, #1
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	601a      	str	r2, [r3, #0]
}
 800a298:	bf00      	nop
 800a29a:	3714      	adds	r7, #20
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	6892      	ldr	r2, [r2, #8]
 800a2ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	6852      	ldr	r2, [r2, #4]
 800a2c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d103      	bne.n	800a2d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	689a      	ldr	r2, [r3, #8]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	1e5a      	subs	r2, r3, #1
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3714      	adds	r7, #20
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10b      	bne.n	800a324 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a30c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a310:	f383 8811 	msr	BASEPRI, r3
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	f3bf 8f4f 	dsb	sy
 800a31c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a31e:	bf00      	nop
 800a320:	bf00      	nop
 800a322:	e7fd      	b.n	800a320 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a324:	f002 f878 	bl	800c418 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a330:	68f9      	ldr	r1, [r7, #12]
 800a332:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a334:	fb01 f303 	mul.w	r3, r1, r3
 800a338:	441a      	add	r2, r3
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2200      	movs	r2, #0
 800a342:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a354:	3b01      	subs	r3, #1
 800a356:	68f9      	ldr	r1, [r7, #12]
 800a358:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a35a:	fb01 f303 	mul.w	r3, r1, r3
 800a35e:	441a      	add	r2, r3
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	22ff      	movs	r2, #255	@ 0xff
 800a368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	22ff      	movs	r2, #255	@ 0xff
 800a370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d114      	bne.n	800a3a4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	691b      	ldr	r3, [r3, #16]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d01a      	beq.n	800a3b8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	3310      	adds	r3, #16
 800a386:	4618      	mov	r0, r3
 800a388:	f001 f91a 	bl	800b5c0 <xTaskRemoveFromEventList>
 800a38c:	4603      	mov	r3, r0
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d012      	beq.n	800a3b8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a392:	4b0d      	ldr	r3, [pc, #52]	@ (800a3c8 <xQueueGenericReset+0xd0>)
 800a394:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a398:	601a      	str	r2, [r3, #0]
 800a39a:	f3bf 8f4f 	dsb	sy
 800a39e:	f3bf 8f6f 	isb	sy
 800a3a2:	e009      	b.n	800a3b8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	3310      	adds	r3, #16
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7ff fef1 	bl	800a190 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	3324      	adds	r3, #36	@ 0x24
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f7ff feec 	bl	800a190 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a3b8:	f002 f860 	bl	800c47c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a3bc:	2301      	movs	r3, #1
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	e000ed04 	.word	0xe000ed04

0800a3cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b08e      	sub	sp, #56	@ 0x38
 800a3d0:	af02      	add	r7, sp, #8
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	607a      	str	r2, [r7, #4]
 800a3d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d10b      	bne.n	800a3f8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e4:	f383 8811 	msr	BASEPRI, r3
 800a3e8:	f3bf 8f6f 	isb	sy
 800a3ec:	f3bf 8f4f 	dsb	sy
 800a3f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a3f2:	bf00      	nop
 800a3f4:	bf00      	nop
 800a3f6:	e7fd      	b.n	800a3f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10b      	bne.n	800a416 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a410:	bf00      	nop
 800a412:	bf00      	nop
 800a414:	e7fd      	b.n	800a412 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d002      	beq.n	800a422 <xQueueGenericCreateStatic+0x56>
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <xQueueGenericCreateStatic+0x5a>
 800a422:	2301      	movs	r3, #1
 800a424:	e000      	b.n	800a428 <xQueueGenericCreateStatic+0x5c>
 800a426:	2300      	movs	r3, #0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d10b      	bne.n	800a444 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a430:	f383 8811 	msr	BASEPRI, r3
 800a434:	f3bf 8f6f 	isb	sy
 800a438:	f3bf 8f4f 	dsb	sy
 800a43c:	623b      	str	r3, [r7, #32]
}
 800a43e:	bf00      	nop
 800a440:	bf00      	nop
 800a442:	e7fd      	b.n	800a440 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d102      	bne.n	800a450 <xQueueGenericCreateStatic+0x84>
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d101      	bne.n	800a454 <xQueueGenericCreateStatic+0x88>
 800a450:	2301      	movs	r3, #1
 800a452:	e000      	b.n	800a456 <xQueueGenericCreateStatic+0x8a>
 800a454:	2300      	movs	r3, #0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d10b      	bne.n	800a472 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a45e:	f383 8811 	msr	BASEPRI, r3
 800a462:	f3bf 8f6f 	isb	sy
 800a466:	f3bf 8f4f 	dsb	sy
 800a46a:	61fb      	str	r3, [r7, #28]
}
 800a46c:	bf00      	nop
 800a46e:	bf00      	nop
 800a470:	e7fd      	b.n	800a46e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a472:	2350      	movs	r3, #80	@ 0x50
 800a474:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	2b50      	cmp	r3, #80	@ 0x50
 800a47a:	d00b      	beq.n	800a494 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a47c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a480:	f383 8811 	msr	BASEPRI, r3
 800a484:	f3bf 8f6f 	isb	sy
 800a488:	f3bf 8f4f 	dsb	sy
 800a48c:	61bb      	str	r3, [r7, #24]
}
 800a48e:	bf00      	nop
 800a490:	bf00      	nop
 800a492:	e7fd      	b.n	800a490 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a494:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00d      	beq.n	800a4bc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4a8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	4613      	mov	r3, r2
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	68b9      	ldr	r1, [r7, #8]
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f000 f805 	bl	800a4c6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3730      	adds	r7, #48	@ 0x30
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b084      	sub	sp, #16
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	60f8      	str	r0, [r7, #12]
 800a4ce:	60b9      	str	r1, [r7, #8]
 800a4d0:	607a      	str	r2, [r7, #4]
 800a4d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d103      	bne.n	800a4e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	69ba      	ldr	r2, [r7, #24]
 800a4de:	601a      	str	r2, [r3, #0]
 800a4e0:	e002      	b.n	800a4e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	68fa      	ldr	r2, [r7, #12]
 800a4ec:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a4f4:	2101      	movs	r1, #1
 800a4f6:	69b8      	ldr	r0, [r7, #24]
 800a4f8:	f7ff fefe 	bl	800a2f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	78fa      	ldrb	r2, [r7, #3]
 800a500:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a504:	bf00      	nop
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b08e      	sub	sp, #56	@ 0x38
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
 800a518:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a51a:	2300      	movs	r3, #0
 800a51c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a524:	2b00      	cmp	r3, #0
 800a526:	d10b      	bne.n	800a540 <xQueueGenericSend+0x34>
	__asm volatile
 800a528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a52c:	f383 8811 	msr	BASEPRI, r3
 800a530:	f3bf 8f6f 	isb	sy
 800a534:	f3bf 8f4f 	dsb	sy
 800a538:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a53a:	bf00      	nop
 800a53c:	bf00      	nop
 800a53e:	e7fd      	b.n	800a53c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d103      	bne.n	800a54e <xQueueGenericSend+0x42>
 800a546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d101      	bne.n	800a552 <xQueueGenericSend+0x46>
 800a54e:	2301      	movs	r3, #1
 800a550:	e000      	b.n	800a554 <xQueueGenericSend+0x48>
 800a552:	2300      	movs	r3, #0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d10b      	bne.n	800a570 <xQueueGenericSend+0x64>
	__asm volatile
 800a558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a55c:	f383 8811 	msr	BASEPRI, r3
 800a560:	f3bf 8f6f 	isb	sy
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a56a:	bf00      	nop
 800a56c:	bf00      	nop
 800a56e:	e7fd      	b.n	800a56c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	2b02      	cmp	r3, #2
 800a574:	d103      	bne.n	800a57e <xQueueGenericSend+0x72>
 800a576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d101      	bne.n	800a582 <xQueueGenericSend+0x76>
 800a57e:	2301      	movs	r3, #1
 800a580:	e000      	b.n	800a584 <xQueueGenericSend+0x78>
 800a582:	2300      	movs	r3, #0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10b      	bne.n	800a5a0 <xQueueGenericSend+0x94>
	__asm volatile
 800a588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a58c:	f383 8811 	msr	BASEPRI, r3
 800a590:	f3bf 8f6f 	isb	sy
 800a594:	f3bf 8f4f 	dsb	sy
 800a598:	623b      	str	r3, [r7, #32]
}
 800a59a:	bf00      	nop
 800a59c:	bf00      	nop
 800a59e:	e7fd      	b.n	800a59c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5a0:	f001 f9ce 	bl	800b940 <xTaskGetSchedulerState>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d102      	bne.n	800a5b0 <xQueueGenericSend+0xa4>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d101      	bne.n	800a5b4 <xQueueGenericSend+0xa8>
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	e000      	b.n	800a5b6 <xQueueGenericSend+0xaa>
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d10b      	bne.n	800a5d2 <xQueueGenericSend+0xc6>
	__asm volatile
 800a5ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5be:	f383 8811 	msr	BASEPRI, r3
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	f3bf 8f4f 	dsb	sy
 800a5ca:	61fb      	str	r3, [r7, #28]
}
 800a5cc:	bf00      	nop
 800a5ce:	bf00      	nop
 800a5d0:	e7fd      	b.n	800a5ce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a5d2:	f001 ff21 	bl	800c418 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	d302      	bcc.n	800a5e8 <xQueueGenericSend+0xdc>
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	2b02      	cmp	r3, #2
 800a5e6:	d129      	bne.n	800a63c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a5e8:	683a      	ldr	r2, [r7, #0]
 800a5ea:	68b9      	ldr	r1, [r7, #8]
 800a5ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a5ee:	f000 fa0f 	bl	800aa10 <prvCopyDataToQueue>
 800a5f2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d010      	beq.n	800a61e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5fe:	3324      	adds	r3, #36	@ 0x24
 800a600:	4618      	mov	r0, r3
 800a602:	f000 ffdd 	bl	800b5c0 <xTaskRemoveFromEventList>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d013      	beq.n	800a634 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a60c:	4b3f      	ldr	r3, [pc, #252]	@ (800a70c <xQueueGenericSend+0x200>)
 800a60e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a612:	601a      	str	r2, [r3, #0]
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	f3bf 8f6f 	isb	sy
 800a61c:	e00a      	b.n	800a634 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a61e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a620:	2b00      	cmp	r3, #0
 800a622:	d007      	beq.n	800a634 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a624:	4b39      	ldr	r3, [pc, #228]	@ (800a70c <xQueueGenericSend+0x200>)
 800a626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a62a:	601a      	str	r2, [r3, #0]
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a634:	f001 ff22 	bl	800c47c <vPortExitCritical>
				return pdPASS;
 800a638:	2301      	movs	r3, #1
 800a63a:	e063      	b.n	800a704 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d103      	bne.n	800a64a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a642:	f001 ff1b 	bl	800c47c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a646:	2300      	movs	r3, #0
 800a648:	e05c      	b.n	800a704 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a64a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d106      	bne.n	800a65e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a650:	f107 0314 	add.w	r3, r7, #20
 800a654:	4618      	mov	r0, r3
 800a656:	f001 f817 	bl	800b688 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a65a:	2301      	movs	r3, #1
 800a65c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a65e:	f001 ff0d 	bl	800c47c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a662:	f000 fd87 	bl	800b174 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a666:	f001 fed7 	bl	800c418 <vPortEnterCritical>
 800a66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a670:	b25b      	sxtb	r3, r3
 800a672:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a676:	d103      	bne.n	800a680 <xQueueGenericSend+0x174>
 800a678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a67a:	2200      	movs	r2, #0
 800a67c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a682:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a686:	b25b      	sxtb	r3, r3
 800a688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a68c:	d103      	bne.n	800a696 <xQueueGenericSend+0x18a>
 800a68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a690:	2200      	movs	r2, #0
 800a692:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a696:	f001 fef1 	bl	800c47c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a69a:	1d3a      	adds	r2, r7, #4
 800a69c:	f107 0314 	add.w	r3, r7, #20
 800a6a0:	4611      	mov	r1, r2
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f001 f806 	bl	800b6b4 <xTaskCheckForTimeOut>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d124      	bne.n	800a6f8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a6ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a6b0:	f000 faa6 	bl	800ac00 <prvIsQueueFull>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d018      	beq.n	800a6ec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a6ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6bc:	3310      	adds	r3, #16
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f000 ff2a 	bl	800b51c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a6c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a6ca:	f000 fa31 	bl	800ab30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a6ce:	f000 fd5f 	bl	800b190 <xTaskResumeAll>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	f47f af7c 	bne.w	800a5d2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a6da:	4b0c      	ldr	r3, [pc, #48]	@ (800a70c <xQueueGenericSend+0x200>)
 800a6dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6e0:	601a      	str	r2, [r3, #0]
 800a6e2:	f3bf 8f4f 	dsb	sy
 800a6e6:	f3bf 8f6f 	isb	sy
 800a6ea:	e772      	b.n	800a5d2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a6ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a6ee:	f000 fa1f 	bl	800ab30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6f2:	f000 fd4d 	bl	800b190 <xTaskResumeAll>
 800a6f6:	e76c      	b.n	800a5d2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a6f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a6fa:	f000 fa19 	bl	800ab30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6fe:	f000 fd47 	bl	800b190 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a702:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a704:	4618      	mov	r0, r3
 800a706:	3738      	adds	r7, #56	@ 0x38
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	e000ed04 	.word	0xe000ed04

0800a710 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b090      	sub	sp, #64	@ 0x40
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
 800a71c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10b      	bne.n	800a740 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a73a:	bf00      	nop
 800a73c:	bf00      	nop
 800a73e:	e7fd      	b.n	800a73c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d103      	bne.n	800a74e <xQueueGenericSendFromISR+0x3e>
 800a746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d101      	bne.n	800a752 <xQueueGenericSendFromISR+0x42>
 800a74e:	2301      	movs	r3, #1
 800a750:	e000      	b.n	800a754 <xQueueGenericSendFromISR+0x44>
 800a752:	2300      	movs	r3, #0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10b      	bne.n	800a770 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75c:	f383 8811 	msr	BASEPRI, r3
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a76a:	bf00      	nop
 800a76c:	bf00      	nop
 800a76e:	e7fd      	b.n	800a76c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	2b02      	cmp	r3, #2
 800a774:	d103      	bne.n	800a77e <xQueueGenericSendFromISR+0x6e>
 800a776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d101      	bne.n	800a782 <xQueueGenericSendFromISR+0x72>
 800a77e:	2301      	movs	r3, #1
 800a780:	e000      	b.n	800a784 <xQueueGenericSendFromISR+0x74>
 800a782:	2300      	movs	r3, #0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d10b      	bne.n	800a7a0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a78c:	f383 8811 	msr	BASEPRI, r3
 800a790:	f3bf 8f6f 	isb	sy
 800a794:	f3bf 8f4f 	dsb	sy
 800a798:	623b      	str	r3, [r7, #32]
}
 800a79a:	bf00      	nop
 800a79c:	bf00      	nop
 800a79e:	e7fd      	b.n	800a79c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7a0:	f001 ff1a 	bl	800c5d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a7a4:	f3ef 8211 	mrs	r2, BASEPRI
 800a7a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ac:	f383 8811 	msr	BASEPRI, r3
 800a7b0:	f3bf 8f6f 	isb	sy
 800a7b4:	f3bf 8f4f 	dsb	sy
 800a7b8:	61fa      	str	r2, [r7, #28]
 800a7ba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a7bc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a7be:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d302      	bcc.n	800a7d2 <xQueueGenericSendFromISR+0xc2>
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d12f      	bne.n	800a832 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a7d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a7d8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a7e2:	683a      	ldr	r2, [r7, #0]
 800a7e4:	68b9      	ldr	r1, [r7, #8]
 800a7e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a7e8:	f000 f912 	bl	800aa10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a7ec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f4:	d112      	bne.n	800a81c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d016      	beq.n	800a82c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a800:	3324      	adds	r3, #36	@ 0x24
 800a802:	4618      	mov	r0, r3
 800a804:	f000 fedc 	bl	800b5c0 <xTaskRemoveFromEventList>
 800a808:	4603      	mov	r3, r0
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00e      	beq.n	800a82c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00b      	beq.n	800a82c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2201      	movs	r2, #1
 800a818:	601a      	str	r2, [r3, #0]
 800a81a:	e007      	b.n	800a82c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a81c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a820:	3301      	adds	r3, #1
 800a822:	b2db      	uxtb	r3, r3
 800a824:	b25a      	sxtb	r2, r3
 800a826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a828:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a82c:	2301      	movs	r3, #1
 800a82e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a830:	e001      	b.n	800a836 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a832:	2300      	movs	r3, #0
 800a834:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a838:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a840:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a844:	4618      	mov	r0, r3
 800a846:	3740      	adds	r7, #64	@ 0x40
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b08c      	sub	sp, #48	@ 0x30
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a858:	2300      	movs	r3, #0
 800a85a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10b      	bne.n	800a87e <xQueueReceive+0x32>
	__asm volatile
 800a866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	623b      	str	r3, [r7, #32]
}
 800a878:	bf00      	nop
 800a87a:	bf00      	nop
 800a87c:	e7fd      	b.n	800a87a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d103      	bne.n	800a88c <xQueueReceive+0x40>
 800a884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d101      	bne.n	800a890 <xQueueReceive+0x44>
 800a88c:	2301      	movs	r3, #1
 800a88e:	e000      	b.n	800a892 <xQueueReceive+0x46>
 800a890:	2300      	movs	r3, #0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d10b      	bne.n	800a8ae <xQueueReceive+0x62>
	__asm volatile
 800a896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a89a:	f383 8811 	msr	BASEPRI, r3
 800a89e:	f3bf 8f6f 	isb	sy
 800a8a2:	f3bf 8f4f 	dsb	sy
 800a8a6:	61fb      	str	r3, [r7, #28]
}
 800a8a8:	bf00      	nop
 800a8aa:	bf00      	nop
 800a8ac:	e7fd      	b.n	800a8aa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8ae:	f001 f847 	bl	800b940 <xTaskGetSchedulerState>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d102      	bne.n	800a8be <xQueueReceive+0x72>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d101      	bne.n	800a8c2 <xQueueReceive+0x76>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e000      	b.n	800a8c4 <xQueueReceive+0x78>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d10b      	bne.n	800a8e0 <xQueueReceive+0x94>
	__asm volatile
 800a8c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8cc:	f383 8811 	msr	BASEPRI, r3
 800a8d0:	f3bf 8f6f 	isb	sy
 800a8d4:	f3bf 8f4f 	dsb	sy
 800a8d8:	61bb      	str	r3, [r7, #24]
}
 800a8da:	bf00      	nop
 800a8dc:	bf00      	nop
 800a8de:	e7fd      	b.n	800a8dc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8e0:	f001 fd9a 	bl	800c418 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8e8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d01f      	beq.n	800a930 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a8f0:	68b9      	ldr	r1, [r7, #8]
 800a8f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8f4:	f000 f8f6 	bl	800aae4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8fa:	1e5a      	subs	r2, r3, #1
 800a8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8fe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a902:	691b      	ldr	r3, [r3, #16]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d00f      	beq.n	800a928 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a90a:	3310      	adds	r3, #16
 800a90c:	4618      	mov	r0, r3
 800a90e:	f000 fe57 	bl	800b5c0 <xTaskRemoveFromEventList>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d007      	beq.n	800a928 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a918:	4b3c      	ldr	r3, [pc, #240]	@ (800aa0c <xQueueReceive+0x1c0>)
 800a91a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a91e:	601a      	str	r2, [r3, #0]
 800a920:	f3bf 8f4f 	dsb	sy
 800a924:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a928:	f001 fda8 	bl	800c47c <vPortExitCritical>
				return pdPASS;
 800a92c:	2301      	movs	r3, #1
 800a92e:	e069      	b.n	800aa04 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d103      	bne.n	800a93e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a936:	f001 fda1 	bl	800c47c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a93a:	2300      	movs	r3, #0
 800a93c:	e062      	b.n	800aa04 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a93e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a940:	2b00      	cmp	r3, #0
 800a942:	d106      	bne.n	800a952 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a944:	f107 0310 	add.w	r3, r7, #16
 800a948:	4618      	mov	r0, r3
 800a94a:	f000 fe9d 	bl	800b688 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a94e:	2301      	movs	r3, #1
 800a950:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a952:	f001 fd93 	bl	800c47c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a956:	f000 fc0d 	bl	800b174 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a95a:	f001 fd5d 	bl	800c418 <vPortEnterCritical>
 800a95e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a960:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a964:	b25b      	sxtb	r3, r3
 800a966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a96a:	d103      	bne.n	800a974 <xQueueReceive+0x128>
 800a96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a96e:	2200      	movs	r2, #0
 800a970:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a976:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a97a:	b25b      	sxtb	r3, r3
 800a97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a980:	d103      	bne.n	800a98a <xQueueReceive+0x13e>
 800a982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a984:	2200      	movs	r2, #0
 800a986:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a98a:	f001 fd77 	bl	800c47c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a98e:	1d3a      	adds	r2, r7, #4
 800a990:	f107 0310 	add.w	r3, r7, #16
 800a994:	4611      	mov	r1, r2
 800a996:	4618      	mov	r0, r3
 800a998:	f000 fe8c 	bl	800b6b4 <xTaskCheckForTimeOut>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d123      	bne.n	800a9ea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9a4:	f000 f916 	bl	800abd4 <prvIsQueueEmpty>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d017      	beq.n	800a9de <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9b0:	3324      	adds	r3, #36	@ 0x24
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	4611      	mov	r1, r2
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f000 fdb0 	bl	800b51c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a9bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9be:	f000 f8b7 	bl	800ab30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a9c2:	f000 fbe5 	bl	800b190 <xTaskResumeAll>
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d189      	bne.n	800a8e0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a9cc:	4b0f      	ldr	r3, [pc, #60]	@ (800aa0c <xQueueReceive+0x1c0>)
 800a9ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9d2:	601a      	str	r2, [r3, #0]
 800a9d4:	f3bf 8f4f 	dsb	sy
 800a9d8:	f3bf 8f6f 	isb	sy
 800a9dc:	e780      	b.n	800a8e0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a9de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9e0:	f000 f8a6 	bl	800ab30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9e4:	f000 fbd4 	bl	800b190 <xTaskResumeAll>
 800a9e8:	e77a      	b.n	800a8e0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a9ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9ec:	f000 f8a0 	bl	800ab30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9f0:	f000 fbce 	bl	800b190 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9f6:	f000 f8ed 	bl	800abd4 <prvIsQueueEmpty>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	f43f af6f 	beq.w	800a8e0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa02:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3730      	adds	r7, #48	@ 0x30
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	e000ed04 	.word	0xe000ed04

0800aa10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b086      	sub	sp, #24
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d10d      	bne.n	800aa4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d14d      	bne.n	800aad2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f000 ff9e 	bl	800b97c <xTaskPriorityDisinherit>
 800aa40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2200      	movs	r2, #0
 800aa46:	609a      	str	r2, [r3, #8]
 800aa48:	e043      	b.n	800aad2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d119      	bne.n	800aa84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	6858      	ldr	r0, [r3, #4]
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa58:	461a      	mov	r2, r3
 800aa5a:	68b9      	ldr	r1, [r7, #8]
 800aa5c:	f003 f8db 	bl	800dc16 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	685a      	ldr	r2, [r3, #4]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa68:	441a      	add	r2, r3
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	685a      	ldr	r2, [r3, #4]
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	429a      	cmp	r2, r3
 800aa78:	d32b      	bcc.n	800aad2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	605a      	str	r2, [r3, #4]
 800aa82:	e026      	b.n	800aad2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	68d8      	ldr	r0, [r3, #12]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	68b9      	ldr	r1, [r7, #8]
 800aa90:	f003 f8c1 	bl	800dc16 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	68da      	ldr	r2, [r3, #12]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa9c:	425b      	negs	r3, r3
 800aa9e:	441a      	add	r2, r3
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	68da      	ldr	r2, [r3, #12]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d207      	bcs.n	800aac0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	689a      	ldr	r2, [r3, #8]
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aab8:	425b      	negs	r3, r3
 800aaba:	441a      	add	r2, r3
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2b02      	cmp	r3, #2
 800aac4:	d105      	bne.n	800aad2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d002      	beq.n	800aad2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	3b01      	subs	r3, #1
 800aad0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	1c5a      	adds	r2, r3, #1
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800aada:	697b      	ldr	r3, [r7, #20]
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3718      	adds	r7, #24
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d018      	beq.n	800ab28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	68da      	ldr	r2, [r3, #12]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aafe:	441a      	add	r2, r3
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	68da      	ldr	r2, [r3, #12]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d303      	bcc.n	800ab18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	68d9      	ldr	r1, [r3, #12]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab20:	461a      	mov	r2, r3
 800ab22:	6838      	ldr	r0, [r7, #0]
 800ab24:	f003 f877 	bl	800dc16 <memcpy>
	}
}
 800ab28:	bf00      	nop
 800ab2a:	3708      	adds	r7, #8
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ab38:	f001 fc6e 	bl	800c418 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab44:	e011      	b.n	800ab6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d012      	beq.n	800ab74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	3324      	adds	r3, #36	@ 0x24
 800ab52:	4618      	mov	r0, r3
 800ab54:	f000 fd34 	bl	800b5c0 <xTaskRemoveFromEventList>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d001      	beq.n	800ab62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ab5e:	f000 fe0d 	bl	800b77c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ab62:	7bfb      	ldrb	r3, [r7, #15]
 800ab64:	3b01      	subs	r3, #1
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ab6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	dce9      	bgt.n	800ab46 <prvUnlockQueue+0x16>
 800ab72:	e000      	b.n	800ab76 <prvUnlockQueue+0x46>
					break;
 800ab74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	22ff      	movs	r2, #255	@ 0xff
 800ab7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ab7e:	f001 fc7d 	bl	800c47c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ab82:	f001 fc49 	bl	800c418 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab8e:	e011      	b.n	800abb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	691b      	ldr	r3, [r3, #16]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d012      	beq.n	800abbe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	3310      	adds	r3, #16
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f000 fd0f 	bl	800b5c0 <xTaskRemoveFromEventList>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d001      	beq.n	800abac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aba8:	f000 fde8 	bl	800b77c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800abac:	7bbb      	ldrb	r3, [r7, #14]
 800abae:	3b01      	subs	r3, #1
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800abb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	dce9      	bgt.n	800ab90 <prvUnlockQueue+0x60>
 800abbc:	e000      	b.n	800abc0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800abbe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	22ff      	movs	r2, #255	@ 0xff
 800abc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800abc8:	f001 fc58 	bl	800c47c <vPortExitCritical>
}
 800abcc:	bf00      	nop
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800abdc:	f001 fc1c 	bl	800c418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d102      	bne.n	800abee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800abe8:	2301      	movs	r3, #1
 800abea:	60fb      	str	r3, [r7, #12]
 800abec:	e001      	b.n	800abf2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800abee:	2300      	movs	r3, #0
 800abf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800abf2:	f001 fc43 	bl	800c47c <vPortExitCritical>

	return xReturn;
 800abf6:	68fb      	ldr	r3, [r7, #12]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ac08:	f001 fc06 	bl	800c418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d102      	bne.n	800ac1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	60fb      	str	r3, [r7, #12]
 800ac1c:	e001      	b.n	800ac22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ac22:	f001 fc2b 	bl	800c47c <vPortExitCritical>

	return xReturn;
 800ac26:	68fb      	ldr	r3, [r7, #12]
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3710      	adds	r7, #16
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ac30:	b480      	push	{r7}
 800ac32:	b085      	sub	sp, #20
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	60fb      	str	r3, [r7, #12]
 800ac3e:	e014      	b.n	800ac6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ac40:	4a0f      	ldr	r2, [pc, #60]	@ (800ac80 <vQueueAddToRegistry+0x50>)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d10b      	bne.n	800ac64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ac4c:	490c      	ldr	r1, [pc, #48]	@ (800ac80 <vQueueAddToRegistry+0x50>)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	683a      	ldr	r2, [r7, #0]
 800ac52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ac56:	4a0a      	ldr	r2, [pc, #40]	@ (800ac80 <vQueueAddToRegistry+0x50>)
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	00db      	lsls	r3, r3, #3
 800ac5c:	4413      	add	r3, r2
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ac62:	e006      	b.n	800ac72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	3301      	adds	r3, #1
 800ac68:	60fb      	str	r3, [r7, #12]
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	2b07      	cmp	r3, #7
 800ac6e:	d9e7      	bls.n	800ac40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ac70:	bf00      	nop
 800ac72:	bf00      	nop
 800ac74:	3714      	adds	r7, #20
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr
 800ac7e:	bf00      	nop
 800ac80:	20000cc0 	.word	0x20000cc0

0800ac84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b086      	sub	sp, #24
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ac94:	f001 fbc0 	bl	800c418 <vPortEnterCritical>
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac9e:	b25b      	sxtb	r3, r3
 800aca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aca4:	d103      	bne.n	800acae <vQueueWaitForMessageRestricted+0x2a>
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	2200      	movs	r2, #0
 800acaa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800acb4:	b25b      	sxtb	r3, r3
 800acb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acba:	d103      	bne.n	800acc4 <vQueueWaitForMessageRestricted+0x40>
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	2200      	movs	r2, #0
 800acc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800acc4:	f001 fbda 	bl	800c47c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800accc:	2b00      	cmp	r3, #0
 800acce:	d106      	bne.n	800acde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	3324      	adds	r3, #36	@ 0x24
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	68b9      	ldr	r1, [r7, #8]
 800acd8:	4618      	mov	r0, r3
 800acda:	f000 fc45 	bl	800b568 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800acde:	6978      	ldr	r0, [r7, #20]
 800ace0:	f7ff ff26 	bl	800ab30 <prvUnlockQueue>
	}
 800ace4:	bf00      	nop
 800ace6:	3718      	adds	r7, #24
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800acec:	b580      	push	{r7, lr}
 800acee:	b08e      	sub	sp, #56	@ 0x38
 800acf0:	af04      	add	r7, sp, #16
 800acf2:	60f8      	str	r0, [r7, #12]
 800acf4:	60b9      	str	r1, [r7, #8]
 800acf6:	607a      	str	r2, [r7, #4]
 800acf8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800acfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d10b      	bne.n	800ad18 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ad00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad04:	f383 8811 	msr	BASEPRI, r3
 800ad08:	f3bf 8f6f 	isb	sy
 800ad0c:	f3bf 8f4f 	dsb	sy
 800ad10:	623b      	str	r3, [r7, #32]
}
 800ad12:	bf00      	nop
 800ad14:	bf00      	nop
 800ad16:	e7fd      	b.n	800ad14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ad18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d10b      	bne.n	800ad36 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ad1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad22:	f383 8811 	msr	BASEPRI, r3
 800ad26:	f3bf 8f6f 	isb	sy
 800ad2a:	f3bf 8f4f 	dsb	sy
 800ad2e:	61fb      	str	r3, [r7, #28]
}
 800ad30:	bf00      	nop
 800ad32:	bf00      	nop
 800ad34:	e7fd      	b.n	800ad32 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ad36:	235c      	movs	r3, #92	@ 0x5c
 800ad38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	2b5c      	cmp	r3, #92	@ 0x5c
 800ad3e:	d00b      	beq.n	800ad58 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ad40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad44:	f383 8811 	msr	BASEPRI, r3
 800ad48:	f3bf 8f6f 	isb	sy
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	61bb      	str	r3, [r7, #24]
}
 800ad52:	bf00      	nop
 800ad54:	bf00      	nop
 800ad56:	e7fd      	b.n	800ad54 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ad58:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ad5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d01e      	beq.n	800ad9e <xTaskCreateStatic+0xb2>
 800ad60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d01b      	beq.n	800ad9e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad68:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ad6e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad72:	2202      	movs	r2, #2
 800ad74:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad78:	2300      	movs	r3, #0
 800ad7a:	9303      	str	r3, [sp, #12]
 800ad7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7e:	9302      	str	r3, [sp, #8]
 800ad80:	f107 0314 	add.w	r3, r7, #20
 800ad84:	9301      	str	r3, [sp, #4]
 800ad86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad88:	9300      	str	r3, [sp, #0]
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	68b9      	ldr	r1, [r7, #8]
 800ad90:	68f8      	ldr	r0, [r7, #12]
 800ad92:	f000 f850 	bl	800ae36 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ad98:	f000 f8de 	bl	800af58 <prvAddNewTaskToReadyList>
 800ad9c:	e001      	b.n	800ada2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ada2:	697b      	ldr	r3, [r7, #20]
	}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3728      	adds	r7, #40	@ 0x28
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800adac:	b580      	push	{r7, lr}
 800adae:	b08c      	sub	sp, #48	@ 0x30
 800adb0:	af04      	add	r7, sp, #16
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	603b      	str	r3, [r7, #0]
 800adb8:	4613      	mov	r3, r2
 800adba:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800adbc:	88fb      	ldrh	r3, [r7, #6]
 800adbe:	009b      	lsls	r3, r3, #2
 800adc0:	4618      	mov	r0, r3
 800adc2:	f001 fc4b 	bl	800c65c <pvPortMalloc>
 800adc6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00e      	beq.n	800adec <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800adce:	205c      	movs	r0, #92	@ 0x5c
 800add0:	f001 fc44 	bl	800c65c <pvPortMalloc>
 800add4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800add6:	69fb      	ldr	r3, [r7, #28]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d003      	beq.n	800ade4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800addc:	69fb      	ldr	r3, [r7, #28]
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	631a      	str	r2, [r3, #48]	@ 0x30
 800ade2:	e005      	b.n	800adf0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ade4:	6978      	ldr	r0, [r7, #20]
 800ade6:	f001 fd07 	bl	800c7f8 <vPortFree>
 800adea:	e001      	b.n	800adf0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800adec:	2300      	movs	r3, #0
 800adee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d017      	beq.n	800ae26 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800adf6:	69fb      	ldr	r3, [r7, #28]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800adfe:	88fa      	ldrh	r2, [r7, #6]
 800ae00:	2300      	movs	r3, #0
 800ae02:	9303      	str	r3, [sp, #12]
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	9302      	str	r3, [sp, #8]
 800ae08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae0a:	9301      	str	r3, [sp, #4]
 800ae0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae0e:	9300      	str	r3, [sp, #0]
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	68b9      	ldr	r1, [r7, #8]
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	f000 f80e 	bl	800ae36 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae1a:	69f8      	ldr	r0, [r7, #28]
 800ae1c:	f000 f89c 	bl	800af58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae20:	2301      	movs	r3, #1
 800ae22:	61bb      	str	r3, [r7, #24]
 800ae24:	e002      	b.n	800ae2c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ae26:	f04f 33ff 	mov.w	r3, #4294967295
 800ae2a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ae2c:	69bb      	ldr	r3, [r7, #24]
	}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3720      	adds	r7, #32
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b088      	sub	sp, #32
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	60f8      	str	r0, [r7, #12]
 800ae3e:	60b9      	str	r1, [r7, #8]
 800ae40:	607a      	str	r2, [r7, #4]
 800ae42:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ae44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae46:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	21a5      	movs	r1, #165	@ 0xa5
 800ae50:	f002 fe3d 	bl	800dace <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ae54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ae5e:	3b01      	subs	r3, #1
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	4413      	add	r3, r2
 800ae64:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	f023 0307 	bic.w	r3, r3, #7
 800ae6c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ae6e:	69bb      	ldr	r3, [r7, #24]
 800ae70:	f003 0307 	and.w	r3, r3, #7
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d00b      	beq.n	800ae90 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ae78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae7c:	f383 8811 	msr	BASEPRI, r3
 800ae80:	f3bf 8f6f 	isb	sy
 800ae84:	f3bf 8f4f 	dsb	sy
 800ae88:	617b      	str	r3, [r7, #20]
}
 800ae8a:	bf00      	nop
 800ae8c:	bf00      	nop
 800ae8e:	e7fd      	b.n	800ae8c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d01f      	beq.n	800aed6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae96:	2300      	movs	r3, #0
 800ae98:	61fb      	str	r3, [r7, #28]
 800ae9a:	e012      	b.n	800aec2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae9c:	68ba      	ldr	r2, [r7, #8]
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	4413      	add	r3, r2
 800aea2:	7819      	ldrb	r1, [r3, #0]
 800aea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	4413      	add	r3, r2
 800aeaa:	3334      	adds	r3, #52	@ 0x34
 800aeac:	460a      	mov	r2, r1
 800aeae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aeb0:	68ba      	ldr	r2, [r7, #8]
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d006      	beq.n	800aeca <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	3301      	adds	r3, #1
 800aec0:	61fb      	str	r3, [r7, #28]
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	2b0f      	cmp	r3, #15
 800aec6:	d9e9      	bls.n	800ae9c <prvInitialiseNewTask+0x66>
 800aec8:	e000      	b.n	800aecc <prvInitialiseNewTask+0x96>
			{
				break;
 800aeca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aece:	2200      	movs	r2, #0
 800aed0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aed4:	e003      	b.n	800aede <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed8:	2200      	movs	r2, #0
 800aeda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aee0:	2b37      	cmp	r3, #55	@ 0x37
 800aee2:	d901      	bls.n	800aee8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aee4:	2337      	movs	r3, #55	@ 0x37
 800aee6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aeec:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aeee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aef2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef6:	2200      	movs	r2, #0
 800aef8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aefa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aefc:	3304      	adds	r3, #4
 800aefe:	4618      	mov	r0, r3
 800af00:	f7ff f966 	bl	800a1d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af06:	3318      	adds	r3, #24
 800af08:	4618      	mov	r0, r3
 800af0a:	f7ff f961 	bl	800a1d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af16:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800af1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af22:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af26:	2200      	movs	r2, #0
 800af28:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af2c:	2200      	movs	r2, #0
 800af2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800af32:	683a      	ldr	r2, [r7, #0]
 800af34:	68f9      	ldr	r1, [r7, #12]
 800af36:	69b8      	ldr	r0, [r7, #24]
 800af38:	f001 f93e 	bl	800c1b8 <pxPortInitialiseStack>
 800af3c:	4602      	mov	r2, r0
 800af3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800af42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af44:	2b00      	cmp	r3, #0
 800af46:	d002      	beq.n	800af4e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800af48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af4e:	bf00      	nop
 800af50:	3720      	adds	r7, #32
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
	...

0800af58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b082      	sub	sp, #8
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800af60:	f001 fa5a 	bl	800c418 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800af64:	4b2d      	ldr	r3, [pc, #180]	@ (800b01c <prvAddNewTaskToReadyList+0xc4>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	3301      	adds	r3, #1
 800af6a:	4a2c      	ldr	r2, [pc, #176]	@ (800b01c <prvAddNewTaskToReadyList+0xc4>)
 800af6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af6e:	4b2c      	ldr	r3, [pc, #176]	@ (800b020 <prvAddNewTaskToReadyList+0xc8>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d109      	bne.n	800af8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800af76:	4a2a      	ldr	r2, [pc, #168]	@ (800b020 <prvAddNewTaskToReadyList+0xc8>)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af7c:	4b27      	ldr	r3, [pc, #156]	@ (800b01c <prvAddNewTaskToReadyList+0xc4>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2b01      	cmp	r3, #1
 800af82:	d110      	bne.n	800afa6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800af84:	f000 fc1e 	bl	800b7c4 <prvInitialiseTaskLists>
 800af88:	e00d      	b.n	800afa6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800af8a:	4b26      	ldr	r3, [pc, #152]	@ (800b024 <prvAddNewTaskToReadyList+0xcc>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d109      	bne.n	800afa6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800af92:	4b23      	ldr	r3, [pc, #140]	@ (800b020 <prvAddNewTaskToReadyList+0xc8>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d802      	bhi.n	800afa6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800afa0:	4a1f      	ldr	r2, [pc, #124]	@ (800b020 <prvAddNewTaskToReadyList+0xc8>)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800afa6:	4b20      	ldr	r3, [pc, #128]	@ (800b028 <prvAddNewTaskToReadyList+0xd0>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	3301      	adds	r3, #1
 800afac:	4a1e      	ldr	r2, [pc, #120]	@ (800b028 <prvAddNewTaskToReadyList+0xd0>)
 800afae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800afb0:	4b1d      	ldr	r3, [pc, #116]	@ (800b028 <prvAddNewTaskToReadyList+0xd0>)
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afbc:	4b1b      	ldr	r3, [pc, #108]	@ (800b02c <prvAddNewTaskToReadyList+0xd4>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d903      	bls.n	800afcc <prvAddNewTaskToReadyList+0x74>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc8:	4a18      	ldr	r2, [pc, #96]	@ (800b02c <prvAddNewTaskToReadyList+0xd4>)
 800afca:	6013      	str	r3, [r2, #0]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afd0:	4613      	mov	r3, r2
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	4413      	add	r3, r2
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	4a15      	ldr	r2, [pc, #84]	@ (800b030 <prvAddNewTaskToReadyList+0xd8>)
 800afda:	441a      	add	r2, r3
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	3304      	adds	r3, #4
 800afe0:	4619      	mov	r1, r3
 800afe2:	4610      	mov	r0, r2
 800afe4:	f7ff f901 	bl	800a1ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800afe8:	f001 fa48 	bl	800c47c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800afec:	4b0d      	ldr	r3, [pc, #52]	@ (800b024 <prvAddNewTaskToReadyList+0xcc>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d00e      	beq.n	800b012 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aff4:	4b0a      	ldr	r3, [pc, #40]	@ (800b020 <prvAddNewTaskToReadyList+0xc8>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800affe:	429a      	cmp	r2, r3
 800b000:	d207      	bcs.n	800b012 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b002:	4b0c      	ldr	r3, [pc, #48]	@ (800b034 <prvAddNewTaskToReadyList+0xdc>)
 800b004:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b008:	601a      	str	r2, [r3, #0]
 800b00a:	f3bf 8f4f 	dsb	sy
 800b00e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b012:	bf00      	nop
 800b014:	3708      	adds	r7, #8
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	200011d4 	.word	0x200011d4
 800b020:	20000d00 	.word	0x20000d00
 800b024:	200011e0 	.word	0x200011e0
 800b028:	200011f0 	.word	0x200011f0
 800b02c:	200011dc 	.word	0x200011dc
 800b030:	20000d04 	.word	0x20000d04
 800b034:	e000ed04 	.word	0xe000ed04

0800b038 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b040:	2300      	movs	r3, #0
 800b042:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d018      	beq.n	800b07c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b04a:	4b14      	ldr	r3, [pc, #80]	@ (800b09c <vTaskDelay+0x64>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d00b      	beq.n	800b06a <vTaskDelay+0x32>
	__asm volatile
 800b052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b056:	f383 8811 	msr	BASEPRI, r3
 800b05a:	f3bf 8f6f 	isb	sy
 800b05e:	f3bf 8f4f 	dsb	sy
 800b062:	60bb      	str	r3, [r7, #8]
}
 800b064:	bf00      	nop
 800b066:	bf00      	nop
 800b068:	e7fd      	b.n	800b066 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b06a:	f000 f883 	bl	800b174 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b06e:	2100      	movs	r1, #0
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 fcf3 	bl	800ba5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b076:	f000 f88b 	bl	800b190 <xTaskResumeAll>
 800b07a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d107      	bne.n	800b092 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b082:	4b07      	ldr	r3, [pc, #28]	@ (800b0a0 <vTaskDelay+0x68>)
 800b084:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b088:	601a      	str	r2, [r3, #0]
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b092:	bf00      	nop
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	200011fc 	.word	0x200011fc
 800b0a0:	e000ed04 	.word	0xe000ed04

0800b0a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b08a      	sub	sp, #40	@ 0x28
 800b0a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b0b2:	463a      	mov	r2, r7
 800b0b4:	1d39      	adds	r1, r7, #4
 800b0b6:	f107 0308 	add.w	r3, r7, #8
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7ff f834 	bl	800a128 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b0c0:	6839      	ldr	r1, [r7, #0]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	68ba      	ldr	r2, [r7, #8]
 800b0c6:	9202      	str	r2, [sp, #8]
 800b0c8:	9301      	str	r3, [sp, #4]
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	9300      	str	r3, [sp, #0]
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	460a      	mov	r2, r1
 800b0d2:	4922      	ldr	r1, [pc, #136]	@ (800b15c <vTaskStartScheduler+0xb8>)
 800b0d4:	4822      	ldr	r0, [pc, #136]	@ (800b160 <vTaskStartScheduler+0xbc>)
 800b0d6:	f7ff fe09 	bl	800acec <xTaskCreateStatic>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	4a21      	ldr	r2, [pc, #132]	@ (800b164 <vTaskStartScheduler+0xc0>)
 800b0de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b0e0:	4b20      	ldr	r3, [pc, #128]	@ (800b164 <vTaskStartScheduler+0xc0>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d002      	beq.n	800b0ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	617b      	str	r3, [r7, #20]
 800b0ec:	e001      	b.n	800b0f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d102      	bne.n	800b0fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b0f8:	f000 fd04 	bl	800bb04 <xTimerCreateTimerTask>
 800b0fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	2b01      	cmp	r3, #1
 800b102:	d116      	bne.n	800b132 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b108:	f383 8811 	msr	BASEPRI, r3
 800b10c:	f3bf 8f6f 	isb	sy
 800b110:	f3bf 8f4f 	dsb	sy
 800b114:	613b      	str	r3, [r7, #16]
}
 800b116:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b118:	4b13      	ldr	r3, [pc, #76]	@ (800b168 <vTaskStartScheduler+0xc4>)
 800b11a:	f04f 32ff 	mov.w	r2, #4294967295
 800b11e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b120:	4b12      	ldr	r3, [pc, #72]	@ (800b16c <vTaskStartScheduler+0xc8>)
 800b122:	2201      	movs	r2, #1
 800b124:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b126:	4b12      	ldr	r3, [pc, #72]	@ (800b170 <vTaskStartScheduler+0xcc>)
 800b128:	2200      	movs	r2, #0
 800b12a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b12c:	f001 f8d0 	bl	800c2d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b130:	e00f      	b.n	800b152 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b138:	d10b      	bne.n	800b152 <vTaskStartScheduler+0xae>
	__asm volatile
 800b13a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b13e:	f383 8811 	msr	BASEPRI, r3
 800b142:	f3bf 8f6f 	isb	sy
 800b146:	f3bf 8f4f 	dsb	sy
 800b14a:	60fb      	str	r3, [r7, #12]
}
 800b14c:	bf00      	nop
 800b14e:	bf00      	nop
 800b150:	e7fd      	b.n	800b14e <vTaskStartScheduler+0xaa>
}
 800b152:	bf00      	nop
 800b154:	3718      	adds	r7, #24
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	08010304 	.word	0x08010304
 800b160:	0800b795 	.word	0x0800b795
 800b164:	200011f8 	.word	0x200011f8
 800b168:	200011f4 	.word	0x200011f4
 800b16c:	200011e0 	.word	0x200011e0
 800b170:	200011d8 	.word	0x200011d8

0800b174 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b174:	b480      	push	{r7}
 800b176:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b178:	4b04      	ldr	r3, [pc, #16]	@ (800b18c <vTaskSuspendAll+0x18>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	3301      	adds	r3, #1
 800b17e:	4a03      	ldr	r2, [pc, #12]	@ (800b18c <vTaskSuspendAll+0x18>)
 800b180:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b182:	bf00      	nop
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr
 800b18c:	200011fc 	.word	0x200011fc

0800b190 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b196:	2300      	movs	r3, #0
 800b198:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b19a:	2300      	movs	r3, #0
 800b19c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b19e:	4b42      	ldr	r3, [pc, #264]	@ (800b2a8 <xTaskResumeAll+0x118>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d10b      	bne.n	800b1be <xTaskResumeAll+0x2e>
	__asm volatile
 800b1a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1aa:	f383 8811 	msr	BASEPRI, r3
 800b1ae:	f3bf 8f6f 	isb	sy
 800b1b2:	f3bf 8f4f 	dsb	sy
 800b1b6:	603b      	str	r3, [r7, #0]
}
 800b1b8:	bf00      	nop
 800b1ba:	bf00      	nop
 800b1bc:	e7fd      	b.n	800b1ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b1be:	f001 f92b 	bl	800c418 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b1c2:	4b39      	ldr	r3, [pc, #228]	@ (800b2a8 <xTaskResumeAll+0x118>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	4a37      	ldr	r2, [pc, #220]	@ (800b2a8 <xTaskResumeAll+0x118>)
 800b1ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1cc:	4b36      	ldr	r3, [pc, #216]	@ (800b2a8 <xTaskResumeAll+0x118>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d162      	bne.n	800b29a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b1d4:	4b35      	ldr	r3, [pc, #212]	@ (800b2ac <xTaskResumeAll+0x11c>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d05e      	beq.n	800b29a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1dc:	e02f      	b.n	800b23e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1de:	4b34      	ldr	r3, [pc, #208]	@ (800b2b0 <xTaskResumeAll+0x120>)
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	3318      	adds	r3, #24
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7ff f85a 	bl	800a2a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	3304      	adds	r3, #4
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7ff f855 	bl	800a2a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1fe:	4b2d      	ldr	r3, [pc, #180]	@ (800b2b4 <xTaskResumeAll+0x124>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	429a      	cmp	r2, r3
 800b204:	d903      	bls.n	800b20e <xTaskResumeAll+0x7e>
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b20a:	4a2a      	ldr	r2, [pc, #168]	@ (800b2b4 <xTaskResumeAll+0x124>)
 800b20c:	6013      	str	r3, [r2, #0]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b212:	4613      	mov	r3, r2
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	4413      	add	r3, r2
 800b218:	009b      	lsls	r3, r3, #2
 800b21a:	4a27      	ldr	r2, [pc, #156]	@ (800b2b8 <xTaskResumeAll+0x128>)
 800b21c:	441a      	add	r2, r3
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	3304      	adds	r3, #4
 800b222:	4619      	mov	r1, r3
 800b224:	4610      	mov	r0, r2
 800b226:	f7fe ffe0 	bl	800a1ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b22e:	4b23      	ldr	r3, [pc, #140]	@ (800b2bc <xTaskResumeAll+0x12c>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b234:	429a      	cmp	r2, r3
 800b236:	d302      	bcc.n	800b23e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b238:	4b21      	ldr	r3, [pc, #132]	@ (800b2c0 <xTaskResumeAll+0x130>)
 800b23a:	2201      	movs	r2, #1
 800b23c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b23e:	4b1c      	ldr	r3, [pc, #112]	@ (800b2b0 <xTaskResumeAll+0x120>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d1cb      	bne.n	800b1de <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d001      	beq.n	800b250 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b24c:	f000 fb58 	bl	800b900 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b250:	4b1c      	ldr	r3, [pc, #112]	@ (800b2c4 <xTaskResumeAll+0x134>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d010      	beq.n	800b27e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b25c:	f000 f846 	bl	800b2ec <xTaskIncrementTick>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d002      	beq.n	800b26c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b266:	4b16      	ldr	r3, [pc, #88]	@ (800b2c0 <xTaskResumeAll+0x130>)
 800b268:	2201      	movs	r2, #1
 800b26a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	3b01      	subs	r3, #1
 800b270:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d1f1      	bne.n	800b25c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b278:	4b12      	ldr	r3, [pc, #72]	@ (800b2c4 <xTaskResumeAll+0x134>)
 800b27a:	2200      	movs	r2, #0
 800b27c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b27e:	4b10      	ldr	r3, [pc, #64]	@ (800b2c0 <xTaskResumeAll+0x130>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d009      	beq.n	800b29a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b286:	2301      	movs	r3, #1
 800b288:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b28a:	4b0f      	ldr	r3, [pc, #60]	@ (800b2c8 <xTaskResumeAll+0x138>)
 800b28c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b290:	601a      	str	r2, [r3, #0]
 800b292:	f3bf 8f4f 	dsb	sy
 800b296:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b29a:	f001 f8ef 	bl	800c47c <vPortExitCritical>

	return xAlreadyYielded;
 800b29e:	68bb      	ldr	r3, [r7, #8]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3710      	adds	r7, #16
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}
 800b2a8:	200011fc 	.word	0x200011fc
 800b2ac:	200011d4 	.word	0x200011d4
 800b2b0:	20001194 	.word	0x20001194
 800b2b4:	200011dc 	.word	0x200011dc
 800b2b8:	20000d04 	.word	0x20000d04
 800b2bc:	20000d00 	.word	0x20000d00
 800b2c0:	200011e8 	.word	0x200011e8
 800b2c4:	200011e4 	.word	0x200011e4
 800b2c8:	e000ed04 	.word	0xe000ed04

0800b2cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b2d2:	4b05      	ldr	r3, [pc, #20]	@ (800b2e8 <xTaskGetTickCount+0x1c>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b2d8:	687b      	ldr	r3, [r7, #4]
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	370c      	adds	r7, #12
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr
 800b2e6:	bf00      	nop
 800b2e8:	200011d8 	.word	0x200011d8

0800b2ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b086      	sub	sp, #24
 800b2f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2f6:	4b4f      	ldr	r3, [pc, #316]	@ (800b434 <xTaskIncrementTick+0x148>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f040 8090 	bne.w	800b420 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b300:	4b4d      	ldr	r3, [pc, #308]	@ (800b438 <xTaskIncrementTick+0x14c>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	3301      	adds	r3, #1
 800b306:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b308:	4a4b      	ldr	r2, [pc, #300]	@ (800b438 <xTaskIncrementTick+0x14c>)
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d121      	bne.n	800b358 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b314:	4b49      	ldr	r3, [pc, #292]	@ (800b43c <xTaskIncrementTick+0x150>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00b      	beq.n	800b336 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b322:	f383 8811 	msr	BASEPRI, r3
 800b326:	f3bf 8f6f 	isb	sy
 800b32a:	f3bf 8f4f 	dsb	sy
 800b32e:	603b      	str	r3, [r7, #0]
}
 800b330:	bf00      	nop
 800b332:	bf00      	nop
 800b334:	e7fd      	b.n	800b332 <xTaskIncrementTick+0x46>
 800b336:	4b41      	ldr	r3, [pc, #260]	@ (800b43c <xTaskIncrementTick+0x150>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	60fb      	str	r3, [r7, #12]
 800b33c:	4b40      	ldr	r3, [pc, #256]	@ (800b440 <xTaskIncrementTick+0x154>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a3e      	ldr	r2, [pc, #248]	@ (800b43c <xTaskIncrementTick+0x150>)
 800b342:	6013      	str	r3, [r2, #0]
 800b344:	4a3e      	ldr	r2, [pc, #248]	@ (800b440 <xTaskIncrementTick+0x154>)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	6013      	str	r3, [r2, #0]
 800b34a:	4b3e      	ldr	r3, [pc, #248]	@ (800b444 <xTaskIncrementTick+0x158>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	3301      	adds	r3, #1
 800b350:	4a3c      	ldr	r2, [pc, #240]	@ (800b444 <xTaskIncrementTick+0x158>)
 800b352:	6013      	str	r3, [r2, #0]
 800b354:	f000 fad4 	bl	800b900 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b358:	4b3b      	ldr	r3, [pc, #236]	@ (800b448 <xTaskIncrementTick+0x15c>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	693a      	ldr	r2, [r7, #16]
 800b35e:	429a      	cmp	r2, r3
 800b360:	d349      	bcc.n	800b3f6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b362:	4b36      	ldr	r3, [pc, #216]	@ (800b43c <xTaskIncrementTick+0x150>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d104      	bne.n	800b376 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b36c:	4b36      	ldr	r3, [pc, #216]	@ (800b448 <xTaskIncrementTick+0x15c>)
 800b36e:	f04f 32ff 	mov.w	r2, #4294967295
 800b372:	601a      	str	r2, [r3, #0]
					break;
 800b374:	e03f      	b.n	800b3f6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b376:	4b31      	ldr	r3, [pc, #196]	@ (800b43c <xTaskIncrementTick+0x150>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	68db      	ldr	r3, [r3, #12]
 800b37c:	68db      	ldr	r3, [r3, #12]
 800b37e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b386:	693a      	ldr	r2, [r7, #16]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d203      	bcs.n	800b396 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b38e:	4a2e      	ldr	r2, [pc, #184]	@ (800b448 <xTaskIncrementTick+0x15c>)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b394:	e02f      	b.n	800b3f6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	3304      	adds	r3, #4
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7fe ff82 	bl	800a2a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d004      	beq.n	800b3b2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	3318      	adds	r3, #24
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f7fe ff79 	bl	800a2a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3b6:	4b25      	ldr	r3, [pc, #148]	@ (800b44c <xTaskIncrementTick+0x160>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d903      	bls.n	800b3c6 <xTaskIncrementTick+0xda>
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3c2:	4a22      	ldr	r2, [pc, #136]	@ (800b44c <xTaskIncrementTick+0x160>)
 800b3c4:	6013      	str	r3, [r2, #0]
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	4413      	add	r3, r2
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	4a1f      	ldr	r2, [pc, #124]	@ (800b450 <xTaskIncrementTick+0x164>)
 800b3d4:	441a      	add	r2, r3
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	3304      	adds	r3, #4
 800b3da:	4619      	mov	r1, r3
 800b3dc:	4610      	mov	r0, r2
 800b3de:	f7fe ff04 	bl	800a1ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3e6:	4b1b      	ldr	r3, [pc, #108]	@ (800b454 <xTaskIncrementTick+0x168>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d3b8      	bcc.n	800b362 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3f4:	e7b5      	b.n	800b362 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b3f6:	4b17      	ldr	r3, [pc, #92]	@ (800b454 <xTaskIncrementTick+0x168>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3fc:	4914      	ldr	r1, [pc, #80]	@ (800b450 <xTaskIncrementTick+0x164>)
 800b3fe:	4613      	mov	r3, r2
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	4413      	add	r3, r2
 800b404:	009b      	lsls	r3, r3, #2
 800b406:	440b      	add	r3, r1
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d901      	bls.n	800b412 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b40e:	2301      	movs	r3, #1
 800b410:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b412:	4b11      	ldr	r3, [pc, #68]	@ (800b458 <xTaskIncrementTick+0x16c>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d007      	beq.n	800b42a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b41a:	2301      	movs	r3, #1
 800b41c:	617b      	str	r3, [r7, #20]
 800b41e:	e004      	b.n	800b42a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b420:	4b0e      	ldr	r3, [pc, #56]	@ (800b45c <xTaskIncrementTick+0x170>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	3301      	adds	r3, #1
 800b426:	4a0d      	ldr	r2, [pc, #52]	@ (800b45c <xTaskIncrementTick+0x170>)
 800b428:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b42a:	697b      	ldr	r3, [r7, #20]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3718      	adds	r7, #24
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}
 800b434:	200011fc 	.word	0x200011fc
 800b438:	200011d8 	.word	0x200011d8
 800b43c:	2000118c 	.word	0x2000118c
 800b440:	20001190 	.word	0x20001190
 800b444:	200011ec 	.word	0x200011ec
 800b448:	200011f4 	.word	0x200011f4
 800b44c:	200011dc 	.word	0x200011dc
 800b450:	20000d04 	.word	0x20000d04
 800b454:	20000d00 	.word	0x20000d00
 800b458:	200011e8 	.word	0x200011e8
 800b45c:	200011e4 	.word	0x200011e4

0800b460 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b460:	b480      	push	{r7}
 800b462:	b085      	sub	sp, #20
 800b464:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b466:	4b28      	ldr	r3, [pc, #160]	@ (800b508 <vTaskSwitchContext+0xa8>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d003      	beq.n	800b476 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b46e:	4b27      	ldr	r3, [pc, #156]	@ (800b50c <vTaskSwitchContext+0xac>)
 800b470:	2201      	movs	r2, #1
 800b472:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b474:	e042      	b.n	800b4fc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b476:	4b25      	ldr	r3, [pc, #148]	@ (800b50c <vTaskSwitchContext+0xac>)
 800b478:	2200      	movs	r2, #0
 800b47a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b47c:	4b24      	ldr	r3, [pc, #144]	@ (800b510 <vTaskSwitchContext+0xb0>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	60fb      	str	r3, [r7, #12]
 800b482:	e011      	b.n	800b4a8 <vTaskSwitchContext+0x48>
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d10b      	bne.n	800b4a2 <vTaskSwitchContext+0x42>
	__asm volatile
 800b48a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b48e:	f383 8811 	msr	BASEPRI, r3
 800b492:	f3bf 8f6f 	isb	sy
 800b496:	f3bf 8f4f 	dsb	sy
 800b49a:	607b      	str	r3, [r7, #4]
}
 800b49c:	bf00      	nop
 800b49e:	bf00      	nop
 800b4a0:	e7fd      	b.n	800b49e <vTaskSwitchContext+0x3e>
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	3b01      	subs	r3, #1
 800b4a6:	60fb      	str	r3, [r7, #12]
 800b4a8:	491a      	ldr	r1, [pc, #104]	@ (800b514 <vTaskSwitchContext+0xb4>)
 800b4aa:	68fa      	ldr	r2, [r7, #12]
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	4413      	add	r3, r2
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	440b      	add	r3, r1
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d0e3      	beq.n	800b484 <vTaskSwitchContext+0x24>
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	4613      	mov	r3, r2
 800b4c0:	009b      	lsls	r3, r3, #2
 800b4c2:	4413      	add	r3, r2
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	4a13      	ldr	r2, [pc, #76]	@ (800b514 <vTaskSwitchContext+0xb4>)
 800b4c8:	4413      	add	r3, r2
 800b4ca:	60bb      	str	r3, [r7, #8]
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	685a      	ldr	r2, [r3, #4]
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	605a      	str	r2, [r3, #4]
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	685a      	ldr	r2, [r3, #4]
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	3308      	adds	r3, #8
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d104      	bne.n	800b4ec <vTaskSwitchContext+0x8c>
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	685a      	ldr	r2, [r3, #4]
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	605a      	str	r2, [r3, #4]
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	4a09      	ldr	r2, [pc, #36]	@ (800b518 <vTaskSwitchContext+0xb8>)
 800b4f4:	6013      	str	r3, [r2, #0]
 800b4f6:	4a06      	ldr	r2, [pc, #24]	@ (800b510 <vTaskSwitchContext+0xb0>)
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	6013      	str	r3, [r2, #0]
}
 800b4fc:	bf00      	nop
 800b4fe:	3714      	adds	r7, #20
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr
 800b508:	200011fc 	.word	0x200011fc
 800b50c:	200011e8 	.word	0x200011e8
 800b510:	200011dc 	.word	0x200011dc
 800b514:	20000d04 	.word	0x20000d04
 800b518:	20000d00 	.word	0x20000d00

0800b51c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d10b      	bne.n	800b544 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b52c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b530:	f383 8811 	msr	BASEPRI, r3
 800b534:	f3bf 8f6f 	isb	sy
 800b538:	f3bf 8f4f 	dsb	sy
 800b53c:	60fb      	str	r3, [r7, #12]
}
 800b53e:	bf00      	nop
 800b540:	bf00      	nop
 800b542:	e7fd      	b.n	800b540 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b544:	4b07      	ldr	r3, [pc, #28]	@ (800b564 <vTaskPlaceOnEventList+0x48>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	3318      	adds	r3, #24
 800b54a:	4619      	mov	r1, r3
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f7fe fe70 	bl	800a232 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b552:	2101      	movs	r1, #1
 800b554:	6838      	ldr	r0, [r7, #0]
 800b556:	f000 fa81 	bl	800ba5c <prvAddCurrentTaskToDelayedList>
}
 800b55a:	bf00      	nop
 800b55c:	3710      	adds	r7, #16
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	20000d00 	.word	0x20000d00

0800b568 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b086      	sub	sp, #24
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	60f8      	str	r0, [r7, #12]
 800b570:	60b9      	str	r1, [r7, #8]
 800b572:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d10b      	bne.n	800b592 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b57a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b57e:	f383 8811 	msr	BASEPRI, r3
 800b582:	f3bf 8f6f 	isb	sy
 800b586:	f3bf 8f4f 	dsb	sy
 800b58a:	617b      	str	r3, [r7, #20]
}
 800b58c:	bf00      	nop
 800b58e:	bf00      	nop
 800b590:	e7fd      	b.n	800b58e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b592:	4b0a      	ldr	r3, [pc, #40]	@ (800b5bc <vTaskPlaceOnEventListRestricted+0x54>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	3318      	adds	r3, #24
 800b598:	4619      	mov	r1, r3
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	f7fe fe25 	bl	800a1ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d002      	beq.n	800b5ac <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b5a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b5aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b5ac:	6879      	ldr	r1, [r7, #4]
 800b5ae:	68b8      	ldr	r0, [r7, #8]
 800b5b0:	f000 fa54 	bl	800ba5c <prvAddCurrentTaskToDelayedList>
	}
 800b5b4:	bf00      	nop
 800b5b6:	3718      	adds	r7, #24
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	20000d00 	.word	0x20000d00

0800b5c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	68db      	ldr	r3, [r3, #12]
 800b5ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d10b      	bne.n	800b5ee <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5da:	f383 8811 	msr	BASEPRI, r3
 800b5de:	f3bf 8f6f 	isb	sy
 800b5e2:	f3bf 8f4f 	dsb	sy
 800b5e6:	60fb      	str	r3, [r7, #12]
}
 800b5e8:	bf00      	nop
 800b5ea:	bf00      	nop
 800b5ec:	e7fd      	b.n	800b5ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	3318      	adds	r3, #24
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7fe fe56 	bl	800a2a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5f8:	4b1d      	ldr	r3, [pc, #116]	@ (800b670 <xTaskRemoveFromEventList+0xb0>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d11d      	bne.n	800b63c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	3304      	adds	r3, #4
 800b604:	4618      	mov	r0, r3
 800b606:	f7fe fe4d 	bl	800a2a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b60e:	4b19      	ldr	r3, [pc, #100]	@ (800b674 <xTaskRemoveFromEventList+0xb4>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	429a      	cmp	r2, r3
 800b614:	d903      	bls.n	800b61e <xTaskRemoveFromEventList+0x5e>
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b61a:	4a16      	ldr	r2, [pc, #88]	@ (800b674 <xTaskRemoveFromEventList+0xb4>)
 800b61c:	6013      	str	r3, [r2, #0]
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b622:	4613      	mov	r3, r2
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	4413      	add	r3, r2
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4a13      	ldr	r2, [pc, #76]	@ (800b678 <xTaskRemoveFromEventList+0xb8>)
 800b62c:	441a      	add	r2, r3
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	3304      	adds	r3, #4
 800b632:	4619      	mov	r1, r3
 800b634:	4610      	mov	r0, r2
 800b636:	f7fe fdd8 	bl	800a1ea <vListInsertEnd>
 800b63a:	e005      	b.n	800b648 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	3318      	adds	r3, #24
 800b640:	4619      	mov	r1, r3
 800b642:	480e      	ldr	r0, [pc, #56]	@ (800b67c <xTaskRemoveFromEventList+0xbc>)
 800b644:	f7fe fdd1 	bl	800a1ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b64c:	4b0c      	ldr	r3, [pc, #48]	@ (800b680 <xTaskRemoveFromEventList+0xc0>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b652:	429a      	cmp	r2, r3
 800b654:	d905      	bls.n	800b662 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b656:	2301      	movs	r3, #1
 800b658:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b65a:	4b0a      	ldr	r3, [pc, #40]	@ (800b684 <xTaskRemoveFromEventList+0xc4>)
 800b65c:	2201      	movs	r2, #1
 800b65e:	601a      	str	r2, [r3, #0]
 800b660:	e001      	b.n	800b666 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b662:	2300      	movs	r3, #0
 800b664:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b666:	697b      	ldr	r3, [r7, #20]
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3718      	adds	r7, #24
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	200011fc 	.word	0x200011fc
 800b674:	200011dc 	.word	0x200011dc
 800b678:	20000d04 	.word	0x20000d04
 800b67c:	20001194 	.word	0x20001194
 800b680:	20000d00 	.word	0x20000d00
 800b684:	200011e8 	.word	0x200011e8

0800b688 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b688:	b480      	push	{r7}
 800b68a:	b083      	sub	sp, #12
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b690:	4b06      	ldr	r3, [pc, #24]	@ (800b6ac <vTaskInternalSetTimeOutState+0x24>)
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b698:	4b05      	ldr	r3, [pc, #20]	@ (800b6b0 <vTaskInternalSetTimeOutState+0x28>)
 800b69a:	681a      	ldr	r2, [r3, #0]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	605a      	str	r2, [r3, #4]
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr
 800b6ac:	200011ec 	.word	0x200011ec
 800b6b0:	200011d8 	.word	0x200011d8

0800b6b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b088      	sub	sp, #32
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d10b      	bne.n	800b6dc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c8:	f383 8811 	msr	BASEPRI, r3
 800b6cc:	f3bf 8f6f 	isb	sy
 800b6d0:	f3bf 8f4f 	dsb	sy
 800b6d4:	613b      	str	r3, [r7, #16]
}
 800b6d6:	bf00      	nop
 800b6d8:	bf00      	nop
 800b6da:	e7fd      	b.n	800b6d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d10b      	bne.n	800b6fa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e6:	f383 8811 	msr	BASEPRI, r3
 800b6ea:	f3bf 8f6f 	isb	sy
 800b6ee:	f3bf 8f4f 	dsb	sy
 800b6f2:	60fb      	str	r3, [r7, #12]
}
 800b6f4:	bf00      	nop
 800b6f6:	bf00      	nop
 800b6f8:	e7fd      	b.n	800b6f6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b6fa:	f000 fe8d 	bl	800c418 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b6fe:	4b1d      	ldr	r3, [pc, #116]	@ (800b774 <xTaskCheckForTimeOut+0xc0>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	69ba      	ldr	r2, [r7, #24]
 800b70a:	1ad3      	subs	r3, r2, r3
 800b70c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b716:	d102      	bne.n	800b71e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b718:	2300      	movs	r3, #0
 800b71a:	61fb      	str	r3, [r7, #28]
 800b71c:	e023      	b.n	800b766 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681a      	ldr	r2, [r3, #0]
 800b722:	4b15      	ldr	r3, [pc, #84]	@ (800b778 <xTaskCheckForTimeOut+0xc4>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	429a      	cmp	r2, r3
 800b728:	d007      	beq.n	800b73a <xTaskCheckForTimeOut+0x86>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	69ba      	ldr	r2, [r7, #24]
 800b730:	429a      	cmp	r2, r3
 800b732:	d302      	bcc.n	800b73a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b734:	2301      	movs	r3, #1
 800b736:	61fb      	str	r3, [r7, #28]
 800b738:	e015      	b.n	800b766 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	697a      	ldr	r2, [r7, #20]
 800b740:	429a      	cmp	r2, r3
 800b742:	d20b      	bcs.n	800b75c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	681a      	ldr	r2, [r3, #0]
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	1ad2      	subs	r2, r2, r3
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f7ff ff99 	bl	800b688 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b756:	2300      	movs	r3, #0
 800b758:	61fb      	str	r3, [r7, #28]
 800b75a:	e004      	b.n	800b766 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	2200      	movs	r2, #0
 800b760:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b762:	2301      	movs	r3, #1
 800b764:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b766:	f000 fe89 	bl	800c47c <vPortExitCritical>

	return xReturn;
 800b76a:	69fb      	ldr	r3, [r7, #28]
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3720      	adds	r7, #32
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	200011d8 	.word	0x200011d8
 800b778:	200011ec 	.word	0x200011ec

0800b77c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b77c:	b480      	push	{r7}
 800b77e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b780:	4b03      	ldr	r3, [pc, #12]	@ (800b790 <vTaskMissedYield+0x14>)
 800b782:	2201      	movs	r2, #1
 800b784:	601a      	str	r2, [r3, #0]
}
 800b786:	bf00      	nop
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr
 800b790:	200011e8 	.word	0x200011e8

0800b794 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b79c:	f000 f852 	bl	800b844 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b7a0:	4b06      	ldr	r3, [pc, #24]	@ (800b7bc <prvIdleTask+0x28>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d9f9      	bls.n	800b79c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b7a8:	4b05      	ldr	r3, [pc, #20]	@ (800b7c0 <prvIdleTask+0x2c>)
 800b7aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7ae:	601a      	str	r2, [r3, #0]
 800b7b0:	f3bf 8f4f 	dsb	sy
 800b7b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b7b8:	e7f0      	b.n	800b79c <prvIdleTask+0x8>
 800b7ba:	bf00      	nop
 800b7bc:	20000d04 	.word	0x20000d04
 800b7c0:	e000ed04 	.word	0xe000ed04

0800b7c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	607b      	str	r3, [r7, #4]
 800b7ce:	e00c      	b.n	800b7ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	4413      	add	r3, r2
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	4a12      	ldr	r2, [pc, #72]	@ (800b824 <prvInitialiseTaskLists+0x60>)
 800b7dc:	4413      	add	r3, r2
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7fe fcd6 	bl	800a190 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	607b      	str	r3, [r7, #4]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2b37      	cmp	r3, #55	@ 0x37
 800b7ee:	d9ef      	bls.n	800b7d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b7f0:	480d      	ldr	r0, [pc, #52]	@ (800b828 <prvInitialiseTaskLists+0x64>)
 800b7f2:	f7fe fccd 	bl	800a190 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b7f6:	480d      	ldr	r0, [pc, #52]	@ (800b82c <prvInitialiseTaskLists+0x68>)
 800b7f8:	f7fe fcca 	bl	800a190 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b7fc:	480c      	ldr	r0, [pc, #48]	@ (800b830 <prvInitialiseTaskLists+0x6c>)
 800b7fe:	f7fe fcc7 	bl	800a190 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b802:	480c      	ldr	r0, [pc, #48]	@ (800b834 <prvInitialiseTaskLists+0x70>)
 800b804:	f7fe fcc4 	bl	800a190 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b808:	480b      	ldr	r0, [pc, #44]	@ (800b838 <prvInitialiseTaskLists+0x74>)
 800b80a:	f7fe fcc1 	bl	800a190 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b80e:	4b0b      	ldr	r3, [pc, #44]	@ (800b83c <prvInitialiseTaskLists+0x78>)
 800b810:	4a05      	ldr	r2, [pc, #20]	@ (800b828 <prvInitialiseTaskLists+0x64>)
 800b812:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b814:	4b0a      	ldr	r3, [pc, #40]	@ (800b840 <prvInitialiseTaskLists+0x7c>)
 800b816:	4a05      	ldr	r2, [pc, #20]	@ (800b82c <prvInitialiseTaskLists+0x68>)
 800b818:	601a      	str	r2, [r3, #0]
}
 800b81a:	bf00      	nop
 800b81c:	3708      	adds	r7, #8
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	20000d04 	.word	0x20000d04
 800b828:	20001164 	.word	0x20001164
 800b82c:	20001178 	.word	0x20001178
 800b830:	20001194 	.word	0x20001194
 800b834:	200011a8 	.word	0x200011a8
 800b838:	200011c0 	.word	0x200011c0
 800b83c:	2000118c 	.word	0x2000118c
 800b840:	20001190 	.word	0x20001190

0800b844 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b84a:	e019      	b.n	800b880 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b84c:	f000 fde4 	bl	800c418 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b850:	4b10      	ldr	r3, [pc, #64]	@ (800b894 <prvCheckTasksWaitingTermination+0x50>)
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	68db      	ldr	r3, [r3, #12]
 800b856:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	3304      	adds	r3, #4
 800b85c:	4618      	mov	r0, r3
 800b85e:	f7fe fd21 	bl	800a2a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b862:	4b0d      	ldr	r3, [pc, #52]	@ (800b898 <prvCheckTasksWaitingTermination+0x54>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	3b01      	subs	r3, #1
 800b868:	4a0b      	ldr	r2, [pc, #44]	@ (800b898 <prvCheckTasksWaitingTermination+0x54>)
 800b86a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b86c:	4b0b      	ldr	r3, [pc, #44]	@ (800b89c <prvCheckTasksWaitingTermination+0x58>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	3b01      	subs	r3, #1
 800b872:	4a0a      	ldr	r2, [pc, #40]	@ (800b89c <prvCheckTasksWaitingTermination+0x58>)
 800b874:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b876:	f000 fe01 	bl	800c47c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 f810 	bl	800b8a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b880:	4b06      	ldr	r3, [pc, #24]	@ (800b89c <prvCheckTasksWaitingTermination+0x58>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d1e1      	bne.n	800b84c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b888:	bf00      	nop
 800b88a:	bf00      	nop
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	200011a8 	.word	0x200011a8
 800b898:	200011d4 	.word	0x200011d4
 800b89c:	200011bc 	.word	0x200011bc

0800b8a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d108      	bne.n	800b8c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f000 ff9e 	bl	800c7f8 <vPortFree>
				vPortFree( pxTCB );
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f000 ff9b 	bl	800c7f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b8c2:	e019      	b.n	800b8f8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d103      	bne.n	800b8d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 ff92 	bl	800c7f8 <vPortFree>
	}
 800b8d4:	e010      	b.n	800b8f8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b8dc:	2b02      	cmp	r3, #2
 800b8de:	d00b      	beq.n	800b8f8 <prvDeleteTCB+0x58>
	__asm volatile
 800b8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8e4:	f383 8811 	msr	BASEPRI, r3
 800b8e8:	f3bf 8f6f 	isb	sy
 800b8ec:	f3bf 8f4f 	dsb	sy
 800b8f0:	60fb      	str	r3, [r7, #12]
}
 800b8f2:	bf00      	nop
 800b8f4:	bf00      	nop
 800b8f6:	e7fd      	b.n	800b8f4 <prvDeleteTCB+0x54>
	}
 800b8f8:	bf00      	nop
 800b8fa:	3710      	adds	r7, #16
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b900:	b480      	push	{r7}
 800b902:	b083      	sub	sp, #12
 800b904:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b906:	4b0c      	ldr	r3, [pc, #48]	@ (800b938 <prvResetNextTaskUnblockTime+0x38>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d104      	bne.n	800b91a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b910:	4b0a      	ldr	r3, [pc, #40]	@ (800b93c <prvResetNextTaskUnblockTime+0x3c>)
 800b912:	f04f 32ff 	mov.w	r2, #4294967295
 800b916:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b918:	e008      	b.n	800b92c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b91a:	4b07      	ldr	r3, [pc, #28]	@ (800b938 <prvResetNextTaskUnblockTime+0x38>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	4a04      	ldr	r2, [pc, #16]	@ (800b93c <prvResetNextTaskUnblockTime+0x3c>)
 800b92a:	6013      	str	r3, [r2, #0]
}
 800b92c:	bf00      	nop
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr
 800b938:	2000118c 	.word	0x2000118c
 800b93c:	200011f4 	.word	0x200011f4

0800b940 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b940:	b480      	push	{r7}
 800b942:	b083      	sub	sp, #12
 800b944:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b946:	4b0b      	ldr	r3, [pc, #44]	@ (800b974 <xTaskGetSchedulerState+0x34>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d102      	bne.n	800b954 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b94e:	2301      	movs	r3, #1
 800b950:	607b      	str	r3, [r7, #4]
 800b952:	e008      	b.n	800b966 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b954:	4b08      	ldr	r3, [pc, #32]	@ (800b978 <xTaskGetSchedulerState+0x38>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d102      	bne.n	800b962 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b95c:	2302      	movs	r3, #2
 800b95e:	607b      	str	r3, [r7, #4]
 800b960:	e001      	b.n	800b966 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b962:	2300      	movs	r3, #0
 800b964:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b966:	687b      	ldr	r3, [r7, #4]
	}
 800b968:	4618      	mov	r0, r3
 800b96a:	370c      	adds	r7, #12
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr
 800b974:	200011e0 	.word	0x200011e0
 800b978:	200011fc 	.word	0x200011fc

0800b97c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b086      	sub	sp, #24
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b988:	2300      	movs	r3, #0
 800b98a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d058      	beq.n	800ba44 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b992:	4b2f      	ldr	r3, [pc, #188]	@ (800ba50 <xTaskPriorityDisinherit+0xd4>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	693a      	ldr	r2, [r7, #16]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d00b      	beq.n	800b9b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b99c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9a0:	f383 8811 	msr	BASEPRI, r3
 800b9a4:	f3bf 8f6f 	isb	sy
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	60fb      	str	r3, [r7, #12]
}
 800b9ae:	bf00      	nop
 800b9b0:	bf00      	nop
 800b9b2:	e7fd      	b.n	800b9b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d10b      	bne.n	800b9d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c0:	f383 8811 	msr	BASEPRI, r3
 800b9c4:	f3bf 8f6f 	isb	sy
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	60bb      	str	r3, [r7, #8]
}
 800b9ce:	bf00      	nop
 800b9d0:	bf00      	nop
 800b9d2:	e7fd      	b.n	800b9d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9d8:	1e5a      	subs	r2, r3, #1
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d02c      	beq.n	800ba44 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d128      	bne.n	800ba44 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7fe fc54 	bl	800a2a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba08:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba14:	4b0f      	ldr	r3, [pc, #60]	@ (800ba54 <xTaskPriorityDisinherit+0xd8>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d903      	bls.n	800ba24 <xTaskPriorityDisinherit+0xa8>
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba20:	4a0c      	ldr	r2, [pc, #48]	@ (800ba54 <xTaskPriorityDisinherit+0xd8>)
 800ba22:	6013      	str	r3, [r2, #0]
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba28:	4613      	mov	r3, r2
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	4413      	add	r3, r2
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	4a09      	ldr	r2, [pc, #36]	@ (800ba58 <xTaskPriorityDisinherit+0xdc>)
 800ba32:	441a      	add	r2, r3
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	3304      	adds	r3, #4
 800ba38:	4619      	mov	r1, r3
 800ba3a:	4610      	mov	r0, r2
 800ba3c:	f7fe fbd5 	bl	800a1ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba40:	2301      	movs	r3, #1
 800ba42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba44:	697b      	ldr	r3, [r7, #20]
	}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3718      	adds	r7, #24
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	20000d00 	.word	0x20000d00
 800ba54:	200011dc 	.word	0x200011dc
 800ba58:	20000d04 	.word	0x20000d04

0800ba5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ba66:	4b21      	ldr	r3, [pc, #132]	@ (800baec <prvAddCurrentTaskToDelayedList+0x90>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba6c:	4b20      	ldr	r3, [pc, #128]	@ (800baf0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	3304      	adds	r3, #4
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7fe fc16 	bl	800a2a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba7e:	d10a      	bne.n	800ba96 <prvAddCurrentTaskToDelayedList+0x3a>
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d007      	beq.n	800ba96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ba86:	4b1a      	ldr	r3, [pc, #104]	@ (800baf0 <prvAddCurrentTaskToDelayedList+0x94>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	3304      	adds	r3, #4
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	4819      	ldr	r0, [pc, #100]	@ (800baf4 <prvAddCurrentTaskToDelayedList+0x98>)
 800ba90:	f7fe fbab 	bl	800a1ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ba94:	e026      	b.n	800bae4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ba96:	68fa      	ldr	r2, [r7, #12]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ba9e:	4b14      	ldr	r3, [pc, #80]	@ (800baf0 <prvAddCurrentTaskToDelayedList+0x94>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800baa6:	68ba      	ldr	r2, [r7, #8]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d209      	bcs.n	800bac2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800baae:	4b12      	ldr	r3, [pc, #72]	@ (800baf8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	4b0f      	ldr	r3, [pc, #60]	@ (800baf0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	3304      	adds	r3, #4
 800bab8:	4619      	mov	r1, r3
 800baba:	4610      	mov	r0, r2
 800babc:	f7fe fbb9 	bl	800a232 <vListInsert>
}
 800bac0:	e010      	b.n	800bae4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bac2:	4b0e      	ldr	r3, [pc, #56]	@ (800bafc <prvAddCurrentTaskToDelayedList+0xa0>)
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	4b0a      	ldr	r3, [pc, #40]	@ (800baf0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	3304      	adds	r3, #4
 800bacc:	4619      	mov	r1, r3
 800bace:	4610      	mov	r0, r2
 800bad0:	f7fe fbaf 	bl	800a232 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bad4:	4b0a      	ldr	r3, [pc, #40]	@ (800bb00 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	68ba      	ldr	r2, [r7, #8]
 800bada:	429a      	cmp	r2, r3
 800badc:	d202      	bcs.n	800bae4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bade:	4a08      	ldr	r2, [pc, #32]	@ (800bb00 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	6013      	str	r3, [r2, #0]
}
 800bae4:	bf00      	nop
 800bae6:	3710      	adds	r7, #16
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	200011d8 	.word	0x200011d8
 800baf0:	20000d00 	.word	0x20000d00
 800baf4:	200011c0 	.word	0x200011c0
 800baf8:	20001190 	.word	0x20001190
 800bafc:	2000118c 	.word	0x2000118c
 800bb00:	200011f4 	.word	0x200011f4

0800bb04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b08a      	sub	sp, #40	@ 0x28
 800bb08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bb0e:	f000 fb13 	bl	800c138 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bb12:	4b1d      	ldr	r3, [pc, #116]	@ (800bb88 <xTimerCreateTimerTask+0x84>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d021      	beq.n	800bb5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bb22:	1d3a      	adds	r2, r7, #4
 800bb24:	f107 0108 	add.w	r1, r7, #8
 800bb28:	f107 030c 	add.w	r3, r7, #12
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7fe fb15 	bl	800a15c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bb32:	6879      	ldr	r1, [r7, #4]
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	68fa      	ldr	r2, [r7, #12]
 800bb38:	9202      	str	r2, [sp, #8]
 800bb3a:	9301      	str	r3, [sp, #4]
 800bb3c:	2302      	movs	r3, #2
 800bb3e:	9300      	str	r3, [sp, #0]
 800bb40:	2300      	movs	r3, #0
 800bb42:	460a      	mov	r2, r1
 800bb44:	4911      	ldr	r1, [pc, #68]	@ (800bb8c <xTimerCreateTimerTask+0x88>)
 800bb46:	4812      	ldr	r0, [pc, #72]	@ (800bb90 <xTimerCreateTimerTask+0x8c>)
 800bb48:	f7ff f8d0 	bl	800acec <xTaskCreateStatic>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	4a11      	ldr	r2, [pc, #68]	@ (800bb94 <xTimerCreateTimerTask+0x90>)
 800bb50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bb52:	4b10      	ldr	r3, [pc, #64]	@ (800bb94 <xTimerCreateTimerTask+0x90>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d001      	beq.n	800bb5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d10b      	bne.n	800bb7c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bb64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb68:	f383 8811 	msr	BASEPRI, r3
 800bb6c:	f3bf 8f6f 	isb	sy
 800bb70:	f3bf 8f4f 	dsb	sy
 800bb74:	613b      	str	r3, [r7, #16]
}
 800bb76:	bf00      	nop
 800bb78:	bf00      	nop
 800bb7a:	e7fd      	b.n	800bb78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bb7c:	697b      	ldr	r3, [r7, #20]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3718      	adds	r7, #24
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	20001230 	.word	0x20001230
 800bb8c:	0801030c 	.word	0x0801030c
 800bb90:	0800bcd1 	.word	0x0800bcd1
 800bb94:	20001234 	.word	0x20001234

0800bb98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b08a      	sub	sp, #40	@ 0x28
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	607a      	str	r2, [r7, #4]
 800bba4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bba6:	2300      	movs	r3, #0
 800bba8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d10b      	bne.n	800bbc8 <xTimerGenericCommand+0x30>
	__asm volatile
 800bbb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb4:	f383 8811 	msr	BASEPRI, r3
 800bbb8:	f3bf 8f6f 	isb	sy
 800bbbc:	f3bf 8f4f 	dsb	sy
 800bbc0:	623b      	str	r3, [r7, #32]
}
 800bbc2:	bf00      	nop
 800bbc4:	bf00      	nop
 800bbc6:	e7fd      	b.n	800bbc4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bbc8:	4b19      	ldr	r3, [pc, #100]	@ (800bc30 <xTimerGenericCommand+0x98>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d02a      	beq.n	800bc26 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	2b05      	cmp	r3, #5
 800bbe0:	dc18      	bgt.n	800bc14 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bbe2:	f7ff fead 	bl	800b940 <xTaskGetSchedulerState>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b02      	cmp	r3, #2
 800bbea:	d109      	bne.n	800bc00 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bbec:	4b10      	ldr	r3, [pc, #64]	@ (800bc30 <xTimerGenericCommand+0x98>)
 800bbee:	6818      	ldr	r0, [r3, #0]
 800bbf0:	f107 0110 	add.w	r1, r7, #16
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbf8:	f7fe fc88 	bl	800a50c <xQueueGenericSend>
 800bbfc:	6278      	str	r0, [r7, #36]	@ 0x24
 800bbfe:	e012      	b.n	800bc26 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bc00:	4b0b      	ldr	r3, [pc, #44]	@ (800bc30 <xTimerGenericCommand+0x98>)
 800bc02:	6818      	ldr	r0, [r3, #0]
 800bc04:	f107 0110 	add.w	r1, r7, #16
 800bc08:	2300      	movs	r3, #0
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f7fe fc7e 	bl	800a50c <xQueueGenericSend>
 800bc10:	6278      	str	r0, [r7, #36]	@ 0x24
 800bc12:	e008      	b.n	800bc26 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bc14:	4b06      	ldr	r3, [pc, #24]	@ (800bc30 <xTimerGenericCommand+0x98>)
 800bc16:	6818      	ldr	r0, [r3, #0]
 800bc18:	f107 0110 	add.w	r1, r7, #16
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	683a      	ldr	r2, [r7, #0]
 800bc20:	f7fe fd76 	bl	800a710 <xQueueGenericSendFromISR>
 800bc24:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bc26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3728      	adds	r7, #40	@ 0x28
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	20001230 	.word	0x20001230

0800bc34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b088      	sub	sp, #32
 800bc38:	af02      	add	r7, sp, #8
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc3e:	4b23      	ldr	r3, [pc, #140]	@ (800bccc <prvProcessExpiredTimer+0x98>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	3304      	adds	r3, #4
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f7fe fb29 	bl	800a2a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc58:	f003 0304 	and.w	r3, r3, #4
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d023      	beq.n	800bca8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bc60:	697b      	ldr	r3, [r7, #20]
 800bc62:	699a      	ldr	r2, [r3, #24]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	18d1      	adds	r1, r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	683a      	ldr	r2, [r7, #0]
 800bc6c:	6978      	ldr	r0, [r7, #20]
 800bc6e:	f000 f8d5 	bl	800be1c <prvInsertTimerInActiveList>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d020      	beq.n	800bcba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc78:	2300      	movs	r3, #0
 800bc7a:	9300      	str	r3, [sp, #0]
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	2100      	movs	r1, #0
 800bc82:	6978      	ldr	r0, [r7, #20]
 800bc84:	f7ff ff88 	bl	800bb98 <xTimerGenericCommand>
 800bc88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d114      	bne.n	800bcba <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bc90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc94:	f383 8811 	msr	BASEPRI, r3
 800bc98:	f3bf 8f6f 	isb	sy
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	60fb      	str	r3, [r7, #12]
}
 800bca2:	bf00      	nop
 800bca4:	bf00      	nop
 800bca6:	e7fd      	b.n	800bca4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bcae:	f023 0301 	bic.w	r3, r3, #1
 800bcb2:	b2da      	uxtb	r2, r3
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	6a1b      	ldr	r3, [r3, #32]
 800bcbe:	6978      	ldr	r0, [r7, #20]
 800bcc0:	4798      	blx	r3
}
 800bcc2:	bf00      	nop
 800bcc4:	3718      	adds	r7, #24
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	20001228 	.word	0x20001228

0800bcd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bcd8:	f107 0308 	add.w	r3, r7, #8
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f000 f859 	bl	800bd94 <prvGetNextExpireTime>
 800bce2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	4619      	mov	r1, r3
 800bce8:	68f8      	ldr	r0, [r7, #12]
 800bcea:	f000 f805 	bl	800bcf8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bcee:	f000 f8d7 	bl	800bea0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bcf2:	bf00      	nop
 800bcf4:	e7f0      	b.n	800bcd8 <prvTimerTask+0x8>
	...

0800bcf8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bd02:	f7ff fa37 	bl	800b174 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd06:	f107 0308 	add.w	r3, r7, #8
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f000 f866 	bl	800bddc <prvSampleTimeNow>
 800bd10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d130      	bne.n	800bd7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d10a      	bne.n	800bd34 <prvProcessTimerOrBlockTask+0x3c>
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d806      	bhi.n	800bd34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bd26:	f7ff fa33 	bl	800b190 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bd2a:	68f9      	ldr	r1, [r7, #12]
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f7ff ff81 	bl	800bc34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bd32:	e024      	b.n	800bd7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d008      	beq.n	800bd4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bd3a:	4b13      	ldr	r3, [pc, #76]	@ (800bd88 <prvProcessTimerOrBlockTask+0x90>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d101      	bne.n	800bd48 <prvProcessTimerOrBlockTask+0x50>
 800bd44:	2301      	movs	r3, #1
 800bd46:	e000      	b.n	800bd4a <prvProcessTimerOrBlockTask+0x52>
 800bd48:	2300      	movs	r3, #0
 800bd4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bd4c:	4b0f      	ldr	r3, [pc, #60]	@ (800bd8c <prvProcessTimerOrBlockTask+0x94>)
 800bd4e:	6818      	ldr	r0, [r3, #0]
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	1ad3      	subs	r3, r2, r3
 800bd56:	683a      	ldr	r2, [r7, #0]
 800bd58:	4619      	mov	r1, r3
 800bd5a:	f7fe ff93 	bl	800ac84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bd5e:	f7ff fa17 	bl	800b190 <xTaskResumeAll>
 800bd62:	4603      	mov	r3, r0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d10a      	bne.n	800bd7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bd68:	4b09      	ldr	r3, [pc, #36]	@ (800bd90 <prvProcessTimerOrBlockTask+0x98>)
 800bd6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd6e:	601a      	str	r2, [r3, #0]
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	f3bf 8f6f 	isb	sy
}
 800bd78:	e001      	b.n	800bd7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bd7a:	f7ff fa09 	bl	800b190 <xTaskResumeAll>
}
 800bd7e:	bf00      	nop
 800bd80:	3710      	adds	r7, #16
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	2000122c 	.word	0x2000122c
 800bd8c:	20001230 	.word	0x20001230
 800bd90:	e000ed04 	.word	0xe000ed04

0800bd94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bd94:	b480      	push	{r7}
 800bd96:	b085      	sub	sp, #20
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bd9c:	4b0e      	ldr	r3, [pc, #56]	@ (800bdd8 <prvGetNextExpireTime+0x44>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d101      	bne.n	800bdaa <prvGetNextExpireTime+0x16>
 800bda6:	2201      	movs	r2, #1
 800bda8:	e000      	b.n	800bdac <prvGetNextExpireTime+0x18>
 800bdaa:	2200      	movs	r2, #0
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d105      	bne.n	800bdc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bdb8:	4b07      	ldr	r3, [pc, #28]	@ (800bdd8 <prvGetNextExpireTime+0x44>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	60fb      	str	r3, [r7, #12]
 800bdc2:	e001      	b.n	800bdc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3714      	adds	r7, #20
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop
 800bdd8:	20001228 	.word	0x20001228

0800bddc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bde4:	f7ff fa72 	bl	800b2cc <xTaskGetTickCount>
 800bde8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bdea:	4b0b      	ldr	r3, [pc, #44]	@ (800be18 <prvSampleTimeNow+0x3c>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	68fa      	ldr	r2, [r7, #12]
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d205      	bcs.n	800be00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bdf4:	f000 f93a 	bl	800c06c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	601a      	str	r2, [r3, #0]
 800bdfe:	e002      	b.n	800be06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2200      	movs	r2, #0
 800be04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800be06:	4a04      	ldr	r2, [pc, #16]	@ (800be18 <prvSampleTimeNow+0x3c>)
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800be0c:	68fb      	ldr	r3, [r7, #12]
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3710      	adds	r7, #16
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	20001238 	.word	0x20001238

0800be1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b086      	sub	sp, #24
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
 800be28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800be2a:	2300      	movs	r3, #0
 800be2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	68ba      	ldr	r2, [r7, #8]
 800be32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	68fa      	ldr	r2, [r7, #12]
 800be38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800be3a:	68ba      	ldr	r2, [r7, #8]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d812      	bhi.n	800be68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	1ad2      	subs	r2, r2, r3
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	699b      	ldr	r3, [r3, #24]
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d302      	bcc.n	800be56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800be50:	2301      	movs	r3, #1
 800be52:	617b      	str	r3, [r7, #20]
 800be54:	e01b      	b.n	800be8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800be56:	4b10      	ldr	r3, [pc, #64]	@ (800be98 <prvInsertTimerInActiveList+0x7c>)
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	3304      	adds	r3, #4
 800be5e:	4619      	mov	r1, r3
 800be60:	4610      	mov	r0, r2
 800be62:	f7fe f9e6 	bl	800a232 <vListInsert>
 800be66:	e012      	b.n	800be8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d206      	bcs.n	800be7e <prvInsertTimerInActiveList+0x62>
 800be70:	68ba      	ldr	r2, [r7, #8]
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	429a      	cmp	r2, r3
 800be76:	d302      	bcc.n	800be7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800be78:	2301      	movs	r3, #1
 800be7a:	617b      	str	r3, [r7, #20]
 800be7c:	e007      	b.n	800be8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be7e:	4b07      	ldr	r3, [pc, #28]	@ (800be9c <prvInsertTimerInActiveList+0x80>)
 800be80:	681a      	ldr	r2, [r3, #0]
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	3304      	adds	r3, #4
 800be86:	4619      	mov	r1, r3
 800be88:	4610      	mov	r0, r2
 800be8a:	f7fe f9d2 	bl	800a232 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800be8e:	697b      	ldr	r3, [r7, #20]
}
 800be90:	4618      	mov	r0, r3
 800be92:	3718      	adds	r7, #24
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	2000122c 	.word	0x2000122c
 800be9c:	20001228 	.word	0x20001228

0800bea0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b08e      	sub	sp, #56	@ 0x38
 800bea4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bea6:	e0ce      	b.n	800c046 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	da19      	bge.n	800bee2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800beae:	1d3b      	adds	r3, r7, #4
 800beb0:	3304      	adds	r3, #4
 800beb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800beb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d10b      	bne.n	800bed2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800beba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bebe:	f383 8811 	msr	BASEPRI, r3
 800bec2:	f3bf 8f6f 	isb	sy
 800bec6:	f3bf 8f4f 	dsb	sy
 800beca:	61fb      	str	r3, [r7, #28]
}
 800becc:	bf00      	nop
 800bece:	bf00      	nop
 800bed0:	e7fd      	b.n	800bece <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bed8:	6850      	ldr	r0, [r2, #4]
 800beda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bedc:	6892      	ldr	r2, [r2, #8]
 800bede:	4611      	mov	r1, r2
 800bee0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	f2c0 80ae 	blt.w	800c046 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800beee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bef0:	695b      	ldr	r3, [r3, #20]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d004      	beq.n	800bf00 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bef8:	3304      	adds	r3, #4
 800befa:	4618      	mov	r0, r3
 800befc:	f7fe f9d2 	bl	800a2a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf00:	463b      	mov	r3, r7
 800bf02:	4618      	mov	r0, r3
 800bf04:	f7ff ff6a 	bl	800bddc <prvSampleTimeNow>
 800bf08:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2b09      	cmp	r3, #9
 800bf0e:	f200 8097 	bhi.w	800c040 <prvProcessReceivedCommands+0x1a0>
 800bf12:	a201      	add	r2, pc, #4	@ (adr r2, 800bf18 <prvProcessReceivedCommands+0x78>)
 800bf14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf18:	0800bf41 	.word	0x0800bf41
 800bf1c:	0800bf41 	.word	0x0800bf41
 800bf20:	0800bf41 	.word	0x0800bf41
 800bf24:	0800bfb7 	.word	0x0800bfb7
 800bf28:	0800bfcb 	.word	0x0800bfcb
 800bf2c:	0800c017 	.word	0x0800c017
 800bf30:	0800bf41 	.word	0x0800bf41
 800bf34:	0800bf41 	.word	0x0800bf41
 800bf38:	0800bfb7 	.word	0x0800bfb7
 800bf3c:	0800bfcb 	.word	0x0800bfcb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bf40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf46:	f043 0301 	orr.w	r3, r3, #1
 800bf4a:	b2da      	uxtb	r2, r3
 800bf4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bf52:	68ba      	ldr	r2, [r7, #8]
 800bf54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf56:	699b      	ldr	r3, [r3, #24]
 800bf58:	18d1      	adds	r1, r2, r3
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf60:	f7ff ff5c 	bl	800be1c <prvInsertTimerInActiveList>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d06c      	beq.n	800c044 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf6c:	6a1b      	ldr	r3, [r3, #32]
 800bf6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf78:	f003 0304 	and.w	r3, r3, #4
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d061      	beq.n	800c044 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bf80:	68ba      	ldr	r2, [r7, #8]
 800bf82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf84:	699b      	ldr	r3, [r3, #24]
 800bf86:	441a      	add	r2, r3
 800bf88:	2300      	movs	r3, #0
 800bf8a:	9300      	str	r3, [sp, #0]
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	2100      	movs	r1, #0
 800bf90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf92:	f7ff fe01 	bl	800bb98 <xTimerGenericCommand>
 800bf96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bf98:	6a3b      	ldr	r3, [r7, #32]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d152      	bne.n	800c044 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bf9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfa2:	f383 8811 	msr	BASEPRI, r3
 800bfa6:	f3bf 8f6f 	isb	sy
 800bfaa:	f3bf 8f4f 	dsb	sy
 800bfae:	61bb      	str	r3, [r7, #24]
}
 800bfb0:	bf00      	nop
 800bfb2:	bf00      	nop
 800bfb4:	e7fd      	b.n	800bfb2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfbc:	f023 0301 	bic.w	r3, r3, #1
 800bfc0:	b2da      	uxtb	r2, r3
 800bfc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bfc8:	e03d      	b.n	800c046 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bfca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfd0:	f043 0301 	orr.w	r3, r3, #1
 800bfd4:	b2da      	uxtb	r2, r3
 800bfd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfd8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bfdc:	68ba      	ldr	r2, [r7, #8]
 800bfde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfe0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bfe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfe4:	699b      	ldr	r3, [r3, #24]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d10b      	bne.n	800c002 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bfea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfee:	f383 8811 	msr	BASEPRI, r3
 800bff2:	f3bf 8f6f 	isb	sy
 800bff6:	f3bf 8f4f 	dsb	sy
 800bffa:	617b      	str	r3, [r7, #20]
}
 800bffc:	bf00      	nop
 800bffe:	bf00      	nop
 800c000:	e7fd      	b.n	800bffe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c004:	699a      	ldr	r2, [r3, #24]
 800c006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c008:	18d1      	adds	r1, r2, r3
 800c00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c00c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c00e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c010:	f7ff ff04 	bl	800be1c <prvInsertTimerInActiveList>
					break;
 800c014:	e017      	b.n	800c046 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c018:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c01c:	f003 0302 	and.w	r3, r3, #2
 800c020:	2b00      	cmp	r3, #0
 800c022:	d103      	bne.n	800c02c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c024:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c026:	f000 fbe7 	bl	800c7f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c02a:	e00c      	b.n	800c046 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c02e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c032:	f023 0301 	bic.w	r3, r3, #1
 800c036:	b2da      	uxtb	r2, r3
 800c038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c03a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c03e:	e002      	b.n	800c046 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c040:	bf00      	nop
 800c042:	e000      	b.n	800c046 <prvProcessReceivedCommands+0x1a6>
					break;
 800c044:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c046:	4b08      	ldr	r3, [pc, #32]	@ (800c068 <prvProcessReceivedCommands+0x1c8>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	1d39      	adds	r1, r7, #4
 800c04c:	2200      	movs	r2, #0
 800c04e:	4618      	mov	r0, r3
 800c050:	f7fe fbfc 	bl	800a84c <xQueueReceive>
 800c054:	4603      	mov	r3, r0
 800c056:	2b00      	cmp	r3, #0
 800c058:	f47f af26 	bne.w	800bea8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c05c:	bf00      	nop
 800c05e:	bf00      	nop
 800c060:	3730      	adds	r7, #48	@ 0x30
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	20001230 	.word	0x20001230

0800c06c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b088      	sub	sp, #32
 800c070:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c072:	e049      	b.n	800c108 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c074:	4b2e      	ldr	r3, [pc, #184]	@ (800c130 <prvSwitchTimerLists+0xc4>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	68db      	ldr	r3, [r3, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c07e:	4b2c      	ldr	r3, [pc, #176]	@ (800c130 <prvSwitchTimerLists+0xc4>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	68db      	ldr	r3, [r3, #12]
 800c086:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	3304      	adds	r3, #4
 800c08c:	4618      	mov	r0, r3
 800c08e:	f7fe f909 	bl	800a2a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	6a1b      	ldr	r3, [r3, #32]
 800c096:	68f8      	ldr	r0, [r7, #12]
 800c098:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0a0:	f003 0304 	and.w	r3, r3, #4
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d02f      	beq.n	800c108 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	699b      	ldr	r3, [r3, #24]
 800c0ac:	693a      	ldr	r2, [r7, #16]
 800c0ae:	4413      	add	r3, r2
 800c0b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c0b2:	68ba      	ldr	r2, [r7, #8]
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d90e      	bls.n	800c0d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	68ba      	ldr	r2, [r7, #8]
 800c0be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	68fa      	ldr	r2, [r7, #12]
 800c0c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0c6:	4b1a      	ldr	r3, [pc, #104]	@ (800c130 <prvSwitchTimerLists+0xc4>)
 800c0c8:	681a      	ldr	r2, [r3, #0]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	3304      	adds	r3, #4
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	4610      	mov	r0, r2
 800c0d2:	f7fe f8ae 	bl	800a232 <vListInsert>
 800c0d6:	e017      	b.n	800c108 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c0d8:	2300      	movs	r3, #0
 800c0da:	9300      	str	r3, [sp, #0]
 800c0dc:	2300      	movs	r3, #0
 800c0de:	693a      	ldr	r2, [r7, #16]
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	68f8      	ldr	r0, [r7, #12]
 800c0e4:	f7ff fd58 	bl	800bb98 <xTimerGenericCommand>
 800c0e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d10b      	bne.n	800c108 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	603b      	str	r3, [r7, #0]
}
 800c102:	bf00      	nop
 800c104:	bf00      	nop
 800c106:	e7fd      	b.n	800c104 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c108:	4b09      	ldr	r3, [pc, #36]	@ (800c130 <prvSwitchTimerLists+0xc4>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d1b0      	bne.n	800c074 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c112:	4b07      	ldr	r3, [pc, #28]	@ (800c130 <prvSwitchTimerLists+0xc4>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c118:	4b06      	ldr	r3, [pc, #24]	@ (800c134 <prvSwitchTimerLists+0xc8>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a04      	ldr	r2, [pc, #16]	@ (800c130 <prvSwitchTimerLists+0xc4>)
 800c11e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c120:	4a04      	ldr	r2, [pc, #16]	@ (800c134 <prvSwitchTimerLists+0xc8>)
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	6013      	str	r3, [r2, #0]
}
 800c126:	bf00      	nop
 800c128:	3718      	adds	r7, #24
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	20001228 	.word	0x20001228
 800c134:	2000122c 	.word	0x2000122c

0800c138 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c13e:	f000 f96b 	bl	800c418 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c142:	4b15      	ldr	r3, [pc, #84]	@ (800c198 <prvCheckForValidListAndQueue+0x60>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d120      	bne.n	800c18c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c14a:	4814      	ldr	r0, [pc, #80]	@ (800c19c <prvCheckForValidListAndQueue+0x64>)
 800c14c:	f7fe f820 	bl	800a190 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c150:	4813      	ldr	r0, [pc, #76]	@ (800c1a0 <prvCheckForValidListAndQueue+0x68>)
 800c152:	f7fe f81d 	bl	800a190 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c156:	4b13      	ldr	r3, [pc, #76]	@ (800c1a4 <prvCheckForValidListAndQueue+0x6c>)
 800c158:	4a10      	ldr	r2, [pc, #64]	@ (800c19c <prvCheckForValidListAndQueue+0x64>)
 800c15a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c15c:	4b12      	ldr	r3, [pc, #72]	@ (800c1a8 <prvCheckForValidListAndQueue+0x70>)
 800c15e:	4a10      	ldr	r2, [pc, #64]	@ (800c1a0 <prvCheckForValidListAndQueue+0x68>)
 800c160:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c162:	2300      	movs	r3, #0
 800c164:	9300      	str	r3, [sp, #0]
 800c166:	4b11      	ldr	r3, [pc, #68]	@ (800c1ac <prvCheckForValidListAndQueue+0x74>)
 800c168:	4a11      	ldr	r2, [pc, #68]	@ (800c1b0 <prvCheckForValidListAndQueue+0x78>)
 800c16a:	2110      	movs	r1, #16
 800c16c:	200a      	movs	r0, #10
 800c16e:	f7fe f92d 	bl	800a3cc <xQueueGenericCreateStatic>
 800c172:	4603      	mov	r3, r0
 800c174:	4a08      	ldr	r2, [pc, #32]	@ (800c198 <prvCheckForValidListAndQueue+0x60>)
 800c176:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c178:	4b07      	ldr	r3, [pc, #28]	@ (800c198 <prvCheckForValidListAndQueue+0x60>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d005      	beq.n	800c18c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c180:	4b05      	ldr	r3, [pc, #20]	@ (800c198 <prvCheckForValidListAndQueue+0x60>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	490b      	ldr	r1, [pc, #44]	@ (800c1b4 <prvCheckForValidListAndQueue+0x7c>)
 800c186:	4618      	mov	r0, r3
 800c188:	f7fe fd52 	bl	800ac30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c18c:	f000 f976 	bl	800c47c <vPortExitCritical>
}
 800c190:	bf00      	nop
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	20001230 	.word	0x20001230
 800c19c:	20001200 	.word	0x20001200
 800c1a0:	20001214 	.word	0x20001214
 800c1a4:	20001228 	.word	0x20001228
 800c1a8:	2000122c 	.word	0x2000122c
 800c1ac:	200012dc 	.word	0x200012dc
 800c1b0:	2000123c 	.word	0x2000123c
 800c1b4:	08010314 	.word	0x08010314

0800c1b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b085      	sub	sp, #20
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	3b04      	subs	r3, #4
 800c1c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c1d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	3b04      	subs	r3, #4
 800c1d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	f023 0201 	bic.w	r2, r3, #1
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	3b04      	subs	r3, #4
 800c1e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c1e8:	4a0c      	ldr	r2, [pc, #48]	@ (800c21c <pxPortInitialiseStack+0x64>)
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	3b14      	subs	r3, #20
 800c1f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	3b04      	subs	r3, #4
 800c1fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f06f 0202 	mvn.w	r2, #2
 800c206:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	3b20      	subs	r3, #32
 800c20c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c20e:	68fb      	ldr	r3, [r7, #12]
}
 800c210:	4618      	mov	r0, r3
 800c212:	3714      	adds	r7, #20
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr
 800c21c:	0800c221 	.word	0x0800c221

0800c220 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c220:	b480      	push	{r7}
 800c222:	b085      	sub	sp, #20
 800c224:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c226:	2300      	movs	r3, #0
 800c228:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c22a:	4b13      	ldr	r3, [pc, #76]	@ (800c278 <prvTaskExitError+0x58>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c232:	d00b      	beq.n	800c24c <prvTaskExitError+0x2c>
	__asm volatile
 800c234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c238:	f383 8811 	msr	BASEPRI, r3
 800c23c:	f3bf 8f6f 	isb	sy
 800c240:	f3bf 8f4f 	dsb	sy
 800c244:	60fb      	str	r3, [r7, #12]
}
 800c246:	bf00      	nop
 800c248:	bf00      	nop
 800c24a:	e7fd      	b.n	800c248 <prvTaskExitError+0x28>
	__asm volatile
 800c24c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c250:	f383 8811 	msr	BASEPRI, r3
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	60bb      	str	r3, [r7, #8]
}
 800c25e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c260:	bf00      	nop
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d0fc      	beq.n	800c262 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c268:	bf00      	nop
 800c26a:	bf00      	nop
 800c26c:	3714      	adds	r7, #20
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr
 800c276:	bf00      	nop
 800c278:	20000030 	.word	0x20000030
 800c27c:	00000000 	.word	0x00000000

0800c280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c280:	4b07      	ldr	r3, [pc, #28]	@ (800c2a0 <pxCurrentTCBConst2>)
 800c282:	6819      	ldr	r1, [r3, #0]
 800c284:	6808      	ldr	r0, [r1, #0]
 800c286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c28a:	f380 8809 	msr	PSP, r0
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	f04f 0000 	mov.w	r0, #0
 800c296:	f380 8811 	msr	BASEPRI, r0
 800c29a:	4770      	bx	lr
 800c29c:	f3af 8000 	nop.w

0800c2a0 <pxCurrentTCBConst2>:
 800c2a0:	20000d00 	.word	0x20000d00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c2a4:	bf00      	nop
 800c2a6:	bf00      	nop

0800c2a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c2a8:	4808      	ldr	r0, [pc, #32]	@ (800c2cc <prvPortStartFirstTask+0x24>)
 800c2aa:	6800      	ldr	r0, [r0, #0]
 800c2ac:	6800      	ldr	r0, [r0, #0]
 800c2ae:	f380 8808 	msr	MSP, r0
 800c2b2:	f04f 0000 	mov.w	r0, #0
 800c2b6:	f380 8814 	msr	CONTROL, r0
 800c2ba:	b662      	cpsie	i
 800c2bc:	b661      	cpsie	f
 800c2be:	f3bf 8f4f 	dsb	sy
 800c2c2:	f3bf 8f6f 	isb	sy
 800c2c6:	df00      	svc	0
 800c2c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c2ca:	bf00      	nop
 800c2cc:	e000ed08 	.word	0xe000ed08

0800c2d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b086      	sub	sp, #24
 800c2d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c2d6:	4b47      	ldr	r3, [pc, #284]	@ (800c3f4 <xPortStartScheduler+0x124>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a47      	ldr	r2, [pc, #284]	@ (800c3f8 <xPortStartScheduler+0x128>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d10b      	bne.n	800c2f8 <xPortStartScheduler+0x28>
	__asm volatile
 800c2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2e4:	f383 8811 	msr	BASEPRI, r3
 800c2e8:	f3bf 8f6f 	isb	sy
 800c2ec:	f3bf 8f4f 	dsb	sy
 800c2f0:	613b      	str	r3, [r7, #16]
}
 800c2f2:	bf00      	nop
 800c2f4:	bf00      	nop
 800c2f6:	e7fd      	b.n	800c2f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c2f8:	4b3e      	ldr	r3, [pc, #248]	@ (800c3f4 <xPortStartScheduler+0x124>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4a3f      	ldr	r2, [pc, #252]	@ (800c3fc <xPortStartScheduler+0x12c>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d10b      	bne.n	800c31a <xPortStartScheduler+0x4a>
	__asm volatile
 800c302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c306:	f383 8811 	msr	BASEPRI, r3
 800c30a:	f3bf 8f6f 	isb	sy
 800c30e:	f3bf 8f4f 	dsb	sy
 800c312:	60fb      	str	r3, [r7, #12]
}
 800c314:	bf00      	nop
 800c316:	bf00      	nop
 800c318:	e7fd      	b.n	800c316 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c31a:	4b39      	ldr	r3, [pc, #228]	@ (800c400 <xPortStartScheduler+0x130>)
 800c31c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	b2db      	uxtb	r3, r3
 800c324:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	22ff      	movs	r2, #255	@ 0xff
 800c32a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	b2db      	uxtb	r3, r3
 800c332:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c334:	78fb      	ldrb	r3, [r7, #3]
 800c336:	b2db      	uxtb	r3, r3
 800c338:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c33c:	b2da      	uxtb	r2, r3
 800c33e:	4b31      	ldr	r3, [pc, #196]	@ (800c404 <xPortStartScheduler+0x134>)
 800c340:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c342:	4b31      	ldr	r3, [pc, #196]	@ (800c408 <xPortStartScheduler+0x138>)
 800c344:	2207      	movs	r2, #7
 800c346:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c348:	e009      	b.n	800c35e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c34a:	4b2f      	ldr	r3, [pc, #188]	@ (800c408 <xPortStartScheduler+0x138>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	3b01      	subs	r3, #1
 800c350:	4a2d      	ldr	r2, [pc, #180]	@ (800c408 <xPortStartScheduler+0x138>)
 800c352:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c354:	78fb      	ldrb	r3, [r7, #3]
 800c356:	b2db      	uxtb	r3, r3
 800c358:	005b      	lsls	r3, r3, #1
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c35e:	78fb      	ldrb	r3, [r7, #3]
 800c360:	b2db      	uxtb	r3, r3
 800c362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c366:	2b80      	cmp	r3, #128	@ 0x80
 800c368:	d0ef      	beq.n	800c34a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c36a:	4b27      	ldr	r3, [pc, #156]	@ (800c408 <xPortStartScheduler+0x138>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f1c3 0307 	rsb	r3, r3, #7
 800c372:	2b04      	cmp	r3, #4
 800c374:	d00b      	beq.n	800c38e <xPortStartScheduler+0xbe>
	__asm volatile
 800c376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c37a:	f383 8811 	msr	BASEPRI, r3
 800c37e:	f3bf 8f6f 	isb	sy
 800c382:	f3bf 8f4f 	dsb	sy
 800c386:	60bb      	str	r3, [r7, #8]
}
 800c388:	bf00      	nop
 800c38a:	bf00      	nop
 800c38c:	e7fd      	b.n	800c38a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c38e:	4b1e      	ldr	r3, [pc, #120]	@ (800c408 <xPortStartScheduler+0x138>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	021b      	lsls	r3, r3, #8
 800c394:	4a1c      	ldr	r2, [pc, #112]	@ (800c408 <xPortStartScheduler+0x138>)
 800c396:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c398:	4b1b      	ldr	r3, [pc, #108]	@ (800c408 <xPortStartScheduler+0x138>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c3a0:	4a19      	ldr	r2, [pc, #100]	@ (800c408 <xPortStartScheduler+0x138>)
 800c3a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	b2da      	uxtb	r2, r3
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c3ac:	4b17      	ldr	r3, [pc, #92]	@ (800c40c <xPortStartScheduler+0x13c>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a16      	ldr	r2, [pc, #88]	@ (800c40c <xPortStartScheduler+0x13c>)
 800c3b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c3b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c3b8:	4b14      	ldr	r3, [pc, #80]	@ (800c40c <xPortStartScheduler+0x13c>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a13      	ldr	r2, [pc, #76]	@ (800c40c <xPortStartScheduler+0x13c>)
 800c3be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c3c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c3c4:	f000 f8da 	bl	800c57c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c3c8:	4b11      	ldr	r3, [pc, #68]	@ (800c410 <xPortStartScheduler+0x140>)
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c3ce:	f000 f8f9 	bl	800c5c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c3d2:	4b10      	ldr	r3, [pc, #64]	@ (800c414 <xPortStartScheduler+0x144>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4a0f      	ldr	r2, [pc, #60]	@ (800c414 <xPortStartScheduler+0x144>)
 800c3d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c3dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c3de:	f7ff ff63 	bl	800c2a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c3e2:	f7ff f83d 	bl	800b460 <vTaskSwitchContext>
	prvTaskExitError();
 800c3e6:	f7ff ff1b 	bl	800c220 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c3ea:	2300      	movs	r3, #0
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3718      	adds	r7, #24
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	e000ed00 	.word	0xe000ed00
 800c3f8:	410fc271 	.word	0x410fc271
 800c3fc:	410fc270 	.word	0x410fc270
 800c400:	e000e400 	.word	0xe000e400
 800c404:	2000132c 	.word	0x2000132c
 800c408:	20001330 	.word	0x20001330
 800c40c:	e000ed20 	.word	0xe000ed20
 800c410:	20000030 	.word	0x20000030
 800c414:	e000ef34 	.word	0xe000ef34

0800c418 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c418:	b480      	push	{r7}
 800c41a:	b083      	sub	sp, #12
 800c41c:	af00      	add	r7, sp, #0
	__asm volatile
 800c41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c422:	f383 8811 	msr	BASEPRI, r3
 800c426:	f3bf 8f6f 	isb	sy
 800c42a:	f3bf 8f4f 	dsb	sy
 800c42e:	607b      	str	r3, [r7, #4]
}
 800c430:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c432:	4b10      	ldr	r3, [pc, #64]	@ (800c474 <vPortEnterCritical+0x5c>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	3301      	adds	r3, #1
 800c438:	4a0e      	ldr	r2, [pc, #56]	@ (800c474 <vPortEnterCritical+0x5c>)
 800c43a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c43c:	4b0d      	ldr	r3, [pc, #52]	@ (800c474 <vPortEnterCritical+0x5c>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	2b01      	cmp	r3, #1
 800c442:	d110      	bne.n	800c466 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c444:	4b0c      	ldr	r3, [pc, #48]	@ (800c478 <vPortEnterCritical+0x60>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	b2db      	uxtb	r3, r3
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d00b      	beq.n	800c466 <vPortEnterCritical+0x4e>
	__asm volatile
 800c44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c452:	f383 8811 	msr	BASEPRI, r3
 800c456:	f3bf 8f6f 	isb	sy
 800c45a:	f3bf 8f4f 	dsb	sy
 800c45e:	603b      	str	r3, [r7, #0]
}
 800c460:	bf00      	nop
 800c462:	bf00      	nop
 800c464:	e7fd      	b.n	800c462 <vPortEnterCritical+0x4a>
	}
}
 800c466:	bf00      	nop
 800c468:	370c      	adds	r7, #12
 800c46a:	46bd      	mov	sp, r7
 800c46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c470:	4770      	bx	lr
 800c472:	bf00      	nop
 800c474:	20000030 	.word	0x20000030
 800c478:	e000ed04 	.word	0xe000ed04

0800c47c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c47c:	b480      	push	{r7}
 800c47e:	b083      	sub	sp, #12
 800c480:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c482:	4b12      	ldr	r3, [pc, #72]	@ (800c4cc <vPortExitCritical+0x50>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d10b      	bne.n	800c4a2 <vPortExitCritical+0x26>
	__asm volatile
 800c48a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c48e:	f383 8811 	msr	BASEPRI, r3
 800c492:	f3bf 8f6f 	isb	sy
 800c496:	f3bf 8f4f 	dsb	sy
 800c49a:	607b      	str	r3, [r7, #4]
}
 800c49c:	bf00      	nop
 800c49e:	bf00      	nop
 800c4a0:	e7fd      	b.n	800c49e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c4a2:	4b0a      	ldr	r3, [pc, #40]	@ (800c4cc <vPortExitCritical+0x50>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	3b01      	subs	r3, #1
 800c4a8:	4a08      	ldr	r2, [pc, #32]	@ (800c4cc <vPortExitCritical+0x50>)
 800c4aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c4ac:	4b07      	ldr	r3, [pc, #28]	@ (800c4cc <vPortExitCritical+0x50>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d105      	bne.n	800c4c0 <vPortExitCritical+0x44>
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	f383 8811 	msr	BASEPRI, r3
}
 800c4be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c4c0:	bf00      	nop
 800c4c2:	370c      	adds	r7, #12
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ca:	4770      	bx	lr
 800c4cc:	20000030 	.word	0x20000030

0800c4d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c4d0:	f3ef 8009 	mrs	r0, PSP
 800c4d4:	f3bf 8f6f 	isb	sy
 800c4d8:	4b15      	ldr	r3, [pc, #84]	@ (800c530 <pxCurrentTCBConst>)
 800c4da:	681a      	ldr	r2, [r3, #0]
 800c4dc:	f01e 0f10 	tst.w	lr, #16
 800c4e0:	bf08      	it	eq
 800c4e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c4e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ea:	6010      	str	r0, [r2, #0]
 800c4ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c4f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c4f4:	f380 8811 	msr	BASEPRI, r0
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	f3bf 8f6f 	isb	sy
 800c500:	f7fe ffae 	bl	800b460 <vTaskSwitchContext>
 800c504:	f04f 0000 	mov.w	r0, #0
 800c508:	f380 8811 	msr	BASEPRI, r0
 800c50c:	bc09      	pop	{r0, r3}
 800c50e:	6819      	ldr	r1, [r3, #0]
 800c510:	6808      	ldr	r0, [r1, #0]
 800c512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c516:	f01e 0f10 	tst.w	lr, #16
 800c51a:	bf08      	it	eq
 800c51c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c520:	f380 8809 	msr	PSP, r0
 800c524:	f3bf 8f6f 	isb	sy
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	f3af 8000 	nop.w

0800c530 <pxCurrentTCBConst>:
 800c530:	20000d00 	.word	0x20000d00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c534:	bf00      	nop
 800c536:	bf00      	nop

0800c538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
	__asm volatile
 800c53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c542:	f383 8811 	msr	BASEPRI, r3
 800c546:	f3bf 8f6f 	isb	sy
 800c54a:	f3bf 8f4f 	dsb	sy
 800c54e:	607b      	str	r3, [r7, #4]
}
 800c550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c552:	f7fe fecb 	bl	800b2ec <xTaskIncrementTick>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d003      	beq.n	800c564 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c55c:	4b06      	ldr	r3, [pc, #24]	@ (800c578 <xPortSysTickHandler+0x40>)
 800c55e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c562:	601a      	str	r2, [r3, #0]
 800c564:	2300      	movs	r3, #0
 800c566:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	f383 8811 	msr	BASEPRI, r3
}
 800c56e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c570:	bf00      	nop
 800c572:	3708      	adds	r7, #8
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}
 800c578:	e000ed04 	.word	0xe000ed04

0800c57c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c57c:	b480      	push	{r7}
 800c57e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c580:	4b0b      	ldr	r3, [pc, #44]	@ (800c5b0 <vPortSetupTimerInterrupt+0x34>)
 800c582:	2200      	movs	r2, #0
 800c584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c586:	4b0b      	ldr	r3, [pc, #44]	@ (800c5b4 <vPortSetupTimerInterrupt+0x38>)
 800c588:	2200      	movs	r2, #0
 800c58a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c58c:	4b0a      	ldr	r3, [pc, #40]	@ (800c5b8 <vPortSetupTimerInterrupt+0x3c>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4a0a      	ldr	r2, [pc, #40]	@ (800c5bc <vPortSetupTimerInterrupt+0x40>)
 800c592:	fba2 2303 	umull	r2, r3, r2, r3
 800c596:	099b      	lsrs	r3, r3, #6
 800c598:	4a09      	ldr	r2, [pc, #36]	@ (800c5c0 <vPortSetupTimerInterrupt+0x44>)
 800c59a:	3b01      	subs	r3, #1
 800c59c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c59e:	4b04      	ldr	r3, [pc, #16]	@ (800c5b0 <vPortSetupTimerInterrupt+0x34>)
 800c5a0:	2207      	movs	r2, #7
 800c5a2:	601a      	str	r2, [r3, #0]
}
 800c5a4:	bf00      	nop
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr
 800c5ae:	bf00      	nop
 800c5b0:	e000e010 	.word	0xe000e010
 800c5b4:	e000e018 	.word	0xe000e018
 800c5b8:	20000024 	.word	0x20000024
 800c5bc:	10624dd3 	.word	0x10624dd3
 800c5c0:	e000e014 	.word	0xe000e014

0800c5c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c5c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c5d4 <vPortEnableVFP+0x10>
 800c5c8:	6801      	ldr	r1, [r0, #0]
 800c5ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c5ce:	6001      	str	r1, [r0, #0]
 800c5d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c5d2:	bf00      	nop
 800c5d4:	e000ed88 	.word	0xe000ed88

0800c5d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c5d8:	b480      	push	{r7}
 800c5da:	b085      	sub	sp, #20
 800c5dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c5de:	f3ef 8305 	mrs	r3, IPSR
 800c5e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2b0f      	cmp	r3, #15
 800c5e8:	d915      	bls.n	800c616 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c5ea:	4a18      	ldr	r2, [pc, #96]	@ (800c64c <vPortValidateInterruptPriority+0x74>)
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c5f4:	4b16      	ldr	r3, [pc, #88]	@ (800c650 <vPortValidateInterruptPriority+0x78>)
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	7afa      	ldrb	r2, [r7, #11]
 800c5fa:	429a      	cmp	r2, r3
 800c5fc:	d20b      	bcs.n	800c616 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c602:	f383 8811 	msr	BASEPRI, r3
 800c606:	f3bf 8f6f 	isb	sy
 800c60a:	f3bf 8f4f 	dsb	sy
 800c60e:	607b      	str	r3, [r7, #4]
}
 800c610:	bf00      	nop
 800c612:	bf00      	nop
 800c614:	e7fd      	b.n	800c612 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c616:	4b0f      	ldr	r3, [pc, #60]	@ (800c654 <vPortValidateInterruptPriority+0x7c>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c61e:	4b0e      	ldr	r3, [pc, #56]	@ (800c658 <vPortValidateInterruptPriority+0x80>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	429a      	cmp	r2, r3
 800c624:	d90b      	bls.n	800c63e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c62a:	f383 8811 	msr	BASEPRI, r3
 800c62e:	f3bf 8f6f 	isb	sy
 800c632:	f3bf 8f4f 	dsb	sy
 800c636:	603b      	str	r3, [r7, #0]
}
 800c638:	bf00      	nop
 800c63a:	bf00      	nop
 800c63c:	e7fd      	b.n	800c63a <vPortValidateInterruptPriority+0x62>
	}
 800c63e:	bf00      	nop
 800c640:	3714      	adds	r7, #20
 800c642:	46bd      	mov	sp, r7
 800c644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c648:	4770      	bx	lr
 800c64a:	bf00      	nop
 800c64c:	e000e3f0 	.word	0xe000e3f0
 800c650:	2000132c 	.word	0x2000132c
 800c654:	e000ed0c 	.word	0xe000ed0c
 800c658:	20001330 	.word	0x20001330

0800c65c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b08a      	sub	sp, #40	@ 0x28
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c664:	2300      	movs	r3, #0
 800c666:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c668:	f7fe fd84 	bl	800b174 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c66c:	4b5c      	ldr	r3, [pc, #368]	@ (800c7e0 <pvPortMalloc+0x184>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d101      	bne.n	800c678 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c674:	f000 f924 	bl	800c8c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c678:	4b5a      	ldr	r3, [pc, #360]	@ (800c7e4 <pvPortMalloc+0x188>)
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	4013      	ands	r3, r2
 800c680:	2b00      	cmp	r3, #0
 800c682:	f040 8095 	bne.w	800c7b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d01e      	beq.n	800c6ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c68c:	2208      	movs	r2, #8
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4413      	add	r3, r2
 800c692:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f003 0307 	and.w	r3, r3, #7
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d015      	beq.n	800c6ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f023 0307 	bic.w	r3, r3, #7
 800c6a4:	3308      	adds	r3, #8
 800c6a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f003 0307 	and.w	r3, r3, #7
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d00b      	beq.n	800c6ca <pvPortMalloc+0x6e>
	__asm volatile
 800c6b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b6:	f383 8811 	msr	BASEPRI, r3
 800c6ba:	f3bf 8f6f 	isb	sy
 800c6be:	f3bf 8f4f 	dsb	sy
 800c6c2:	617b      	str	r3, [r7, #20]
}
 800c6c4:	bf00      	nop
 800c6c6:	bf00      	nop
 800c6c8:	e7fd      	b.n	800c6c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d06f      	beq.n	800c7b0 <pvPortMalloc+0x154>
 800c6d0:	4b45      	ldr	r3, [pc, #276]	@ (800c7e8 <pvPortMalloc+0x18c>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d86a      	bhi.n	800c7b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c6da:	4b44      	ldr	r3, [pc, #272]	@ (800c7ec <pvPortMalloc+0x190>)
 800c6dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c6de:	4b43      	ldr	r3, [pc, #268]	@ (800c7ec <pvPortMalloc+0x190>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6e4:	e004      	b.n	800c6f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	687a      	ldr	r2, [r7, #4]
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d903      	bls.n	800c702 <pvPortMalloc+0xa6>
 800c6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d1f1      	bne.n	800c6e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c702:	4b37      	ldr	r3, [pc, #220]	@ (800c7e0 <pvPortMalloc+0x184>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c708:	429a      	cmp	r2, r3
 800c70a:	d051      	beq.n	800c7b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c70c:	6a3b      	ldr	r3, [r7, #32]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	2208      	movs	r2, #8
 800c712:	4413      	add	r3, r2
 800c714:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c718:	681a      	ldr	r2, [r3, #0]
 800c71a:	6a3b      	ldr	r3, [r7, #32]
 800c71c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c720:	685a      	ldr	r2, [r3, #4]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	1ad2      	subs	r2, r2, r3
 800c726:	2308      	movs	r3, #8
 800c728:	005b      	lsls	r3, r3, #1
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d920      	bls.n	800c770 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c72e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	4413      	add	r3, r2
 800c734:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c736:	69bb      	ldr	r3, [r7, #24]
 800c738:	f003 0307 	and.w	r3, r3, #7
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d00b      	beq.n	800c758 <pvPortMalloc+0xfc>
	__asm volatile
 800c740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c744:	f383 8811 	msr	BASEPRI, r3
 800c748:	f3bf 8f6f 	isb	sy
 800c74c:	f3bf 8f4f 	dsb	sy
 800c750:	613b      	str	r3, [r7, #16]
}
 800c752:	bf00      	nop
 800c754:	bf00      	nop
 800c756:	e7fd      	b.n	800c754 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c75a:	685a      	ldr	r2, [r3, #4]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	1ad2      	subs	r2, r2, r3
 800c760:	69bb      	ldr	r3, [r7, #24]
 800c762:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c76a:	69b8      	ldr	r0, [r7, #24]
 800c76c:	f000 f90a 	bl	800c984 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c770:	4b1d      	ldr	r3, [pc, #116]	@ (800c7e8 <pvPortMalloc+0x18c>)
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	1ad3      	subs	r3, r2, r3
 800c77a:	4a1b      	ldr	r2, [pc, #108]	@ (800c7e8 <pvPortMalloc+0x18c>)
 800c77c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c77e:	4b1a      	ldr	r3, [pc, #104]	@ (800c7e8 <pvPortMalloc+0x18c>)
 800c780:	681a      	ldr	r2, [r3, #0]
 800c782:	4b1b      	ldr	r3, [pc, #108]	@ (800c7f0 <pvPortMalloc+0x194>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	429a      	cmp	r2, r3
 800c788:	d203      	bcs.n	800c792 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c78a:	4b17      	ldr	r3, [pc, #92]	@ (800c7e8 <pvPortMalloc+0x18c>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a18      	ldr	r2, [pc, #96]	@ (800c7f0 <pvPortMalloc+0x194>)
 800c790:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c794:	685a      	ldr	r2, [r3, #4]
 800c796:	4b13      	ldr	r3, [pc, #76]	@ (800c7e4 <pvPortMalloc+0x188>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	431a      	orrs	r2, r3
 800c79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c7a6:	4b13      	ldr	r3, [pc, #76]	@ (800c7f4 <pvPortMalloc+0x198>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	4a11      	ldr	r2, [pc, #68]	@ (800c7f4 <pvPortMalloc+0x198>)
 800c7ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c7b0:	f7fe fcee 	bl	800b190 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	f003 0307 	and.w	r3, r3, #7
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d00b      	beq.n	800c7d6 <pvPortMalloc+0x17a>
	__asm volatile
 800c7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c2:	f383 8811 	msr	BASEPRI, r3
 800c7c6:	f3bf 8f6f 	isb	sy
 800c7ca:	f3bf 8f4f 	dsb	sy
 800c7ce:	60fb      	str	r3, [r7, #12]
}
 800c7d0:	bf00      	nop
 800c7d2:	bf00      	nop
 800c7d4:	e7fd      	b.n	800c7d2 <pvPortMalloc+0x176>
	return pvReturn;
 800c7d6:	69fb      	ldr	r3, [r7, #28]
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3728      	adds	r7, #40	@ 0x28
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}
 800c7e0:	20004f3c 	.word	0x20004f3c
 800c7e4:	20004f50 	.word	0x20004f50
 800c7e8:	20004f40 	.word	0x20004f40
 800c7ec:	20004f34 	.word	0x20004f34
 800c7f0:	20004f44 	.word	0x20004f44
 800c7f4:	20004f48 	.word	0x20004f48

0800c7f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b086      	sub	sp, #24
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d04f      	beq.n	800c8aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c80a:	2308      	movs	r3, #8
 800c80c:	425b      	negs	r3, r3
 800c80e:	697a      	ldr	r2, [r7, #20]
 800c810:	4413      	add	r3, r2
 800c812:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	685a      	ldr	r2, [r3, #4]
 800c81c:	4b25      	ldr	r3, [pc, #148]	@ (800c8b4 <vPortFree+0xbc>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4013      	ands	r3, r2
 800c822:	2b00      	cmp	r3, #0
 800c824:	d10b      	bne.n	800c83e <vPortFree+0x46>
	__asm volatile
 800c826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c82a:	f383 8811 	msr	BASEPRI, r3
 800c82e:	f3bf 8f6f 	isb	sy
 800c832:	f3bf 8f4f 	dsb	sy
 800c836:	60fb      	str	r3, [r7, #12]
}
 800c838:	bf00      	nop
 800c83a:	bf00      	nop
 800c83c:	e7fd      	b.n	800c83a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d00b      	beq.n	800c85e <vPortFree+0x66>
	__asm volatile
 800c846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c84a:	f383 8811 	msr	BASEPRI, r3
 800c84e:	f3bf 8f6f 	isb	sy
 800c852:	f3bf 8f4f 	dsb	sy
 800c856:	60bb      	str	r3, [r7, #8]
}
 800c858:	bf00      	nop
 800c85a:	bf00      	nop
 800c85c:	e7fd      	b.n	800c85a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	685a      	ldr	r2, [r3, #4]
 800c862:	4b14      	ldr	r3, [pc, #80]	@ (800c8b4 <vPortFree+0xbc>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4013      	ands	r3, r2
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d01e      	beq.n	800c8aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d11a      	bne.n	800c8aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	685a      	ldr	r2, [r3, #4]
 800c878:	4b0e      	ldr	r3, [pc, #56]	@ (800c8b4 <vPortFree+0xbc>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	43db      	mvns	r3, r3
 800c87e:	401a      	ands	r2, r3
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c884:	f7fe fc76 	bl	800b174 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	685a      	ldr	r2, [r3, #4]
 800c88c:	4b0a      	ldr	r3, [pc, #40]	@ (800c8b8 <vPortFree+0xc0>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	4413      	add	r3, r2
 800c892:	4a09      	ldr	r2, [pc, #36]	@ (800c8b8 <vPortFree+0xc0>)
 800c894:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c896:	6938      	ldr	r0, [r7, #16]
 800c898:	f000 f874 	bl	800c984 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c89c:	4b07      	ldr	r3, [pc, #28]	@ (800c8bc <vPortFree+0xc4>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	3301      	adds	r3, #1
 800c8a2:	4a06      	ldr	r2, [pc, #24]	@ (800c8bc <vPortFree+0xc4>)
 800c8a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c8a6:	f7fe fc73 	bl	800b190 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c8aa:	bf00      	nop
 800c8ac:	3718      	adds	r7, #24
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	bf00      	nop
 800c8b4:	20004f50 	.word	0x20004f50
 800c8b8:	20004f40 	.word	0x20004f40
 800c8bc:	20004f4c 	.word	0x20004f4c

0800c8c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b085      	sub	sp, #20
 800c8c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c8c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c8ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c8cc:	4b27      	ldr	r3, [pc, #156]	@ (800c96c <prvHeapInit+0xac>)
 800c8ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f003 0307 	and.w	r3, r3, #7
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d00c      	beq.n	800c8f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	3307      	adds	r3, #7
 800c8de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f023 0307 	bic.w	r3, r3, #7
 800c8e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c8e8:	68ba      	ldr	r2, [r7, #8]
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	1ad3      	subs	r3, r2, r3
 800c8ee:	4a1f      	ldr	r2, [pc, #124]	@ (800c96c <prvHeapInit+0xac>)
 800c8f0:	4413      	add	r3, r2
 800c8f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c8f8:	4a1d      	ldr	r2, [pc, #116]	@ (800c970 <prvHeapInit+0xb0>)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c8fe:	4b1c      	ldr	r3, [pc, #112]	@ (800c970 <prvHeapInit+0xb0>)
 800c900:	2200      	movs	r2, #0
 800c902:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	68ba      	ldr	r2, [r7, #8]
 800c908:	4413      	add	r3, r2
 800c90a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c90c:	2208      	movs	r2, #8
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	1a9b      	subs	r3, r3, r2
 800c912:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f023 0307 	bic.w	r3, r3, #7
 800c91a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	4a15      	ldr	r2, [pc, #84]	@ (800c974 <prvHeapInit+0xb4>)
 800c920:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c922:	4b14      	ldr	r3, [pc, #80]	@ (800c974 <prvHeapInit+0xb4>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2200      	movs	r2, #0
 800c928:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c92a:	4b12      	ldr	r3, [pc, #72]	@ (800c974 <prvHeapInit+0xb4>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	2200      	movs	r2, #0
 800c930:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	68fa      	ldr	r2, [r7, #12]
 800c93a:	1ad2      	subs	r2, r2, r3
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c940:	4b0c      	ldr	r3, [pc, #48]	@ (800c974 <prvHeapInit+0xb4>)
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	4a0a      	ldr	r2, [pc, #40]	@ (800c978 <prvHeapInit+0xb8>)
 800c94e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	4a09      	ldr	r2, [pc, #36]	@ (800c97c <prvHeapInit+0xbc>)
 800c956:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c958:	4b09      	ldr	r3, [pc, #36]	@ (800c980 <prvHeapInit+0xc0>)
 800c95a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c95e:	601a      	str	r2, [r3, #0]
}
 800c960:	bf00      	nop
 800c962:	3714      	adds	r7, #20
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr
 800c96c:	20001334 	.word	0x20001334
 800c970:	20004f34 	.word	0x20004f34
 800c974:	20004f3c 	.word	0x20004f3c
 800c978:	20004f44 	.word	0x20004f44
 800c97c:	20004f40 	.word	0x20004f40
 800c980:	20004f50 	.word	0x20004f50

0800c984 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c984:	b480      	push	{r7}
 800c986:	b085      	sub	sp, #20
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c98c:	4b28      	ldr	r3, [pc, #160]	@ (800ca30 <prvInsertBlockIntoFreeList+0xac>)
 800c98e:	60fb      	str	r3, [r7, #12]
 800c990:	e002      	b.n	800c998 <prvInsertBlockIntoFreeList+0x14>
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	60fb      	str	r3, [r7, #12]
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d8f7      	bhi.n	800c992 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	68ba      	ldr	r2, [r7, #8]
 800c9ac:	4413      	add	r3, r2
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d108      	bne.n	800c9c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	685a      	ldr	r2, [r3, #4]
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	441a      	add	r2, r3
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	68ba      	ldr	r2, [r7, #8]
 800c9d0:	441a      	add	r2, r3
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d118      	bne.n	800ca0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	4b15      	ldr	r3, [pc, #84]	@ (800ca34 <prvInsertBlockIntoFreeList+0xb0>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d00d      	beq.n	800ca02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	685a      	ldr	r2, [r3, #4]
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	685b      	ldr	r3, [r3, #4]
 800c9f0:	441a      	add	r2, r3
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	601a      	str	r2, [r3, #0]
 800ca00:	e008      	b.n	800ca14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ca02:	4b0c      	ldr	r3, [pc, #48]	@ (800ca34 <prvInsertBlockIntoFreeList+0xb0>)
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	601a      	str	r2, [r3, #0]
 800ca0a:	e003      	b.n	800ca14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ca14:	68fa      	ldr	r2, [r7, #12]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d002      	beq.n	800ca22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca22:	bf00      	nop
 800ca24:	3714      	adds	r7, #20
 800ca26:	46bd      	mov	sp, r7
 800ca28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2c:	4770      	bx	lr
 800ca2e:	bf00      	nop
 800ca30:	20004f34 	.word	0x20004f34
 800ca34:	20004f3c 	.word	0x20004f3c

0800ca38 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800ca3e:	2300      	movs	r3, #0
 800ca40:	71fb      	strb	r3, [r7, #7]
 800ca42:	e026      	b.n	800ca92 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800ca44:	79fb      	ldrb	r3, [r7, #7]
 800ca46:	3b50      	subs	r3, #80	@ 0x50
 800ca48:	b2db      	uxtb	r3, r3
 800ca4a:	2100      	movs	r1, #0
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f000 f82b 	bl	800caa8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800ca52:	2100      	movs	r1, #0
 800ca54:	2000      	movs	r0, #0
 800ca56:	f000 f827 	bl	800caa8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800ca5a:	2100      	movs	r1, #0
 800ca5c:	2010      	movs	r0, #16
 800ca5e:	f000 f823 	bl	800caa8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800ca62:	2300      	movs	r3, #0
 800ca64:	71bb      	strb	r3, [r7, #6]
 800ca66:	e00d      	b.n	800ca84 <OLED_Refresh_Gram+0x4c>
 800ca68:	79ba      	ldrb	r2, [r7, #6]
 800ca6a:	79fb      	ldrb	r3, [r7, #7]
 800ca6c:	490d      	ldr	r1, [pc, #52]	@ (800caa4 <OLED_Refresh_Gram+0x6c>)
 800ca6e:	00d2      	lsls	r2, r2, #3
 800ca70:	440a      	add	r2, r1
 800ca72:	4413      	add	r3, r2
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	2101      	movs	r1, #1
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f000 f815 	bl	800caa8 <OLED_WR_Byte>
 800ca7e:	79bb      	ldrb	r3, [r7, #6]
 800ca80:	3301      	adds	r3, #1
 800ca82:	71bb      	strb	r3, [r7, #6]
 800ca84:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	daed      	bge.n	800ca68 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800ca8c:	79fb      	ldrb	r3, [r7, #7]
 800ca8e:	3301      	adds	r3, #1
 800ca90:	71fb      	strb	r3, [r7, #7]
 800ca92:	79fb      	ldrb	r3, [r7, #7]
 800ca94:	2b07      	cmp	r3, #7
 800ca96:	d9d5      	bls.n	800ca44 <OLED_Refresh_Gram+0xc>
	}   
}
 800ca98:	bf00      	nop
 800ca9a:	bf00      	nop
 800ca9c:	3708      	adds	r7, #8
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	20004f54 	.word	0x20004f54

0800caa8 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b084      	sub	sp, #16
 800caac:	af00      	add	r7, sp, #0
 800caae:	4603      	mov	r3, r0
 800cab0:	460a      	mov	r2, r1
 800cab2:	71fb      	strb	r3, [r7, #7]
 800cab4:	4613      	mov	r3, r2
 800cab6:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800cab8:	79bb      	ldrb	r3, [r7, #6]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d006      	beq.n	800cacc <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800cabe:	2201      	movs	r2, #1
 800cac0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cac4:	481c      	ldr	r0, [pc, #112]	@ (800cb38 <OLED_WR_Byte+0x90>)
 800cac6:	f7f8 fb1b 	bl	8005100 <HAL_GPIO_WritePin>
 800caca:	e005      	b.n	800cad8 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800cacc:	2200      	movs	r2, #0
 800cace:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cad2:	4819      	ldr	r0, [pc, #100]	@ (800cb38 <OLED_WR_Byte+0x90>)
 800cad4:	f7f8 fb14 	bl	8005100 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800cad8:	2300      	movs	r3, #0
 800cada:	73fb      	strb	r3, [r7, #15]
 800cadc:	e01e      	b.n	800cb1c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800cade:	2200      	movs	r2, #0
 800cae0:	2120      	movs	r1, #32
 800cae2:	4815      	ldr	r0, [pc, #84]	@ (800cb38 <OLED_WR_Byte+0x90>)
 800cae4:	f7f8 fb0c 	bl	8005100 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800cae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800caec:	2b00      	cmp	r3, #0
 800caee:	da05      	bge.n	800cafc <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800caf0:	2201      	movs	r2, #1
 800caf2:	2140      	movs	r1, #64	@ 0x40
 800caf4:	4810      	ldr	r0, [pc, #64]	@ (800cb38 <OLED_WR_Byte+0x90>)
 800caf6:	f7f8 fb03 	bl	8005100 <HAL_GPIO_WritePin>
 800cafa:	e004      	b.n	800cb06 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800cafc:	2200      	movs	r2, #0
 800cafe:	2140      	movs	r1, #64	@ 0x40
 800cb00:	480d      	ldr	r0, [pc, #52]	@ (800cb38 <OLED_WR_Byte+0x90>)
 800cb02:	f7f8 fafd 	bl	8005100 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800cb06:	2201      	movs	r2, #1
 800cb08:	2120      	movs	r1, #32
 800cb0a:	480b      	ldr	r0, [pc, #44]	@ (800cb38 <OLED_WR_Byte+0x90>)
 800cb0c:	f7f8 faf8 	bl	8005100 <HAL_GPIO_WritePin>
		dat<<=1;   
 800cb10:	79fb      	ldrb	r3, [r7, #7]
 800cb12:	005b      	lsls	r3, r3, #1
 800cb14:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800cb16:	7bfb      	ldrb	r3, [r7, #15]
 800cb18:	3301      	adds	r3, #1
 800cb1a:	73fb      	strb	r3, [r7, #15]
 800cb1c:	7bfb      	ldrb	r3, [r7, #15]
 800cb1e:	2b07      	cmp	r3, #7
 800cb20:	d9dd      	bls.n	800cade <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800cb22:	2201      	movs	r2, #1
 800cb24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cb28:	4803      	ldr	r0, [pc, #12]	@ (800cb38 <OLED_WR_Byte+0x90>)
 800cb2a:	f7f8 fae9 	bl	8005100 <HAL_GPIO_WritePin>
} 
 800cb2e:	bf00      	nop
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	40021000 	.word	0x40021000

0800cb3c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800cb42:	2300      	movs	r3, #0
 800cb44:	71fb      	strb	r3, [r7, #7]
 800cb46:	e014      	b.n	800cb72 <OLED_Clear+0x36>
 800cb48:	2300      	movs	r3, #0
 800cb4a:	71bb      	strb	r3, [r7, #6]
 800cb4c:	e00a      	b.n	800cb64 <OLED_Clear+0x28>
 800cb4e:	79ba      	ldrb	r2, [r7, #6]
 800cb50:	79fb      	ldrb	r3, [r7, #7]
 800cb52:	490c      	ldr	r1, [pc, #48]	@ (800cb84 <OLED_Clear+0x48>)
 800cb54:	00d2      	lsls	r2, r2, #3
 800cb56:	440a      	add	r2, r1
 800cb58:	4413      	add	r3, r2
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	701a      	strb	r2, [r3, #0]
 800cb5e:	79bb      	ldrb	r3, [r7, #6]
 800cb60:	3301      	adds	r3, #1
 800cb62:	71bb      	strb	r3, [r7, #6]
 800cb64:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	daf0      	bge.n	800cb4e <OLED_Clear+0x12>
 800cb6c:	79fb      	ldrb	r3, [r7, #7]
 800cb6e:	3301      	adds	r3, #1
 800cb70:	71fb      	strb	r3, [r7, #7]
 800cb72:	79fb      	ldrb	r3, [r7, #7]
 800cb74:	2b07      	cmp	r3, #7
 800cb76:	d9e7      	bls.n	800cb48 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800cb78:	f7ff ff5e 	bl	800ca38 <OLED_Refresh_Gram>
}
 800cb7c:	bf00      	nop
 800cb7e:	3708      	adds	r7, #8
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	20004f54 	.word	0x20004f54

0800cb88 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b085      	sub	sp, #20
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	4603      	mov	r3, r0
 800cb90:	71fb      	strb	r3, [r7, #7]
 800cb92:	460b      	mov	r3, r1
 800cb94:	71bb      	strb	r3, [r7, #6]
 800cb96:	4613      	mov	r3, r2
 800cb98:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800cb9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	db41      	blt.n	800cc2a <OLED_DrawPoint+0xa2>
 800cba6:	79bb      	ldrb	r3, [r7, #6]
 800cba8:	2b3f      	cmp	r3, #63	@ 0x3f
 800cbaa:	d83e      	bhi.n	800cc2a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800cbac:	79bb      	ldrb	r3, [r7, #6]
 800cbae:	08db      	lsrs	r3, r3, #3
 800cbb0:	b2db      	uxtb	r3, r3
 800cbb2:	f1c3 0307 	rsb	r3, r3, #7
 800cbb6:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800cbb8:	79bb      	ldrb	r3, [r7, #6]
 800cbba:	f003 0307 	and.w	r3, r3, #7
 800cbbe:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800cbc0:	7b7b      	ldrb	r3, [r7, #13]
 800cbc2:	f1c3 0307 	rsb	r3, r3, #7
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	fa02 f303 	lsl.w	r3, r2, r3
 800cbcc:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800cbce:	797b      	ldrb	r3, [r7, #5]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d012      	beq.n	800cbfa <OLED_DrawPoint+0x72>
 800cbd4:	79fa      	ldrb	r2, [r7, #7]
 800cbd6:	7bbb      	ldrb	r3, [r7, #14]
 800cbd8:	4917      	ldr	r1, [pc, #92]	@ (800cc38 <OLED_DrawPoint+0xb0>)
 800cbda:	00d2      	lsls	r2, r2, #3
 800cbdc:	440a      	add	r2, r1
 800cbde:	4413      	add	r3, r2
 800cbe0:	7818      	ldrb	r0, [r3, #0]
 800cbe2:	79fa      	ldrb	r2, [r7, #7]
 800cbe4:	7bbb      	ldrb	r3, [r7, #14]
 800cbe6:	7bf9      	ldrb	r1, [r7, #15]
 800cbe8:	4301      	orrs	r1, r0
 800cbea:	b2c8      	uxtb	r0, r1
 800cbec:	4912      	ldr	r1, [pc, #72]	@ (800cc38 <OLED_DrawPoint+0xb0>)
 800cbee:	00d2      	lsls	r2, r2, #3
 800cbf0:	440a      	add	r2, r1
 800cbf2:	4413      	add	r3, r2
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	701a      	strb	r2, [r3, #0]
 800cbf8:	e018      	b.n	800cc2c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800cbfa:	79fa      	ldrb	r2, [r7, #7]
 800cbfc:	7bbb      	ldrb	r3, [r7, #14]
 800cbfe:	490e      	ldr	r1, [pc, #56]	@ (800cc38 <OLED_DrawPoint+0xb0>)
 800cc00:	00d2      	lsls	r2, r2, #3
 800cc02:	440a      	add	r2, r1
 800cc04:	4413      	add	r3, r2
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	b25a      	sxtb	r2, r3
 800cc0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc0e:	43db      	mvns	r3, r3
 800cc10:	b25b      	sxtb	r3, r3
 800cc12:	4013      	ands	r3, r2
 800cc14:	b259      	sxtb	r1, r3
 800cc16:	79fa      	ldrb	r2, [r7, #7]
 800cc18:	7bbb      	ldrb	r3, [r7, #14]
 800cc1a:	b2c8      	uxtb	r0, r1
 800cc1c:	4906      	ldr	r1, [pc, #24]	@ (800cc38 <OLED_DrawPoint+0xb0>)
 800cc1e:	00d2      	lsls	r2, r2, #3
 800cc20:	440a      	add	r2, r1
 800cc22:	4413      	add	r3, r2
 800cc24:	4602      	mov	r2, r0
 800cc26:	701a      	strb	r2, [r3, #0]
 800cc28:	e000      	b.n	800cc2c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800cc2a:	bf00      	nop
}
 800cc2c:	3714      	adds	r7, #20
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc34:	4770      	bx	lr
 800cc36:	bf00      	nop
 800cc38:	20004f54 	.word	0x20004f54

0800cc3c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800cc3c:	b590      	push	{r4, r7, lr}
 800cc3e:	b085      	sub	sp, #20
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	4604      	mov	r4, r0
 800cc44:	4608      	mov	r0, r1
 800cc46:	4611      	mov	r1, r2
 800cc48:	461a      	mov	r2, r3
 800cc4a:	4623      	mov	r3, r4
 800cc4c:	71fb      	strb	r3, [r7, #7]
 800cc4e:	4603      	mov	r3, r0
 800cc50:	71bb      	strb	r3, [r7, #6]
 800cc52:	460b      	mov	r3, r1
 800cc54:	717b      	strb	r3, [r7, #5]
 800cc56:	4613      	mov	r3, r2
 800cc58:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800cc5a:	79bb      	ldrb	r3, [r7, #6]
 800cc5c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800cc5e:	797b      	ldrb	r3, [r7, #5]
 800cc60:	3b20      	subs	r3, #32
 800cc62:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800cc64:	2300      	movs	r3, #0
 800cc66:	73bb      	strb	r3, [r7, #14]
 800cc68:	e04d      	b.n	800cd06 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800cc6a:	793b      	ldrb	r3, [r7, #4]
 800cc6c:	2b0c      	cmp	r3, #12
 800cc6e:	d10b      	bne.n	800cc88 <OLED_ShowChar+0x4c>
 800cc70:	797a      	ldrb	r2, [r7, #5]
 800cc72:	7bb9      	ldrb	r1, [r7, #14]
 800cc74:	4828      	ldr	r0, [pc, #160]	@ (800cd18 <OLED_ShowChar+0xdc>)
 800cc76:	4613      	mov	r3, r2
 800cc78:	005b      	lsls	r3, r3, #1
 800cc7a:	4413      	add	r3, r2
 800cc7c:	009b      	lsls	r3, r3, #2
 800cc7e:	4403      	add	r3, r0
 800cc80:	440b      	add	r3, r1
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	73fb      	strb	r3, [r7, #15]
 800cc86:	e007      	b.n	800cc98 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800cc88:	797a      	ldrb	r2, [r7, #5]
 800cc8a:	7bbb      	ldrb	r3, [r7, #14]
 800cc8c:	4923      	ldr	r1, [pc, #140]	@ (800cd1c <OLED_ShowChar+0xe0>)
 800cc8e:	0112      	lsls	r2, r2, #4
 800cc90:	440a      	add	r2, r1
 800cc92:	4413      	add	r3, r2
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800cc98:	2300      	movs	r3, #0
 800cc9a:	737b      	strb	r3, [r7, #13]
 800cc9c:	e02d      	b.n	800ccfa <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800cc9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	da07      	bge.n	800ccb6 <OLED_ShowChar+0x7a>
 800cca6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800ccaa:	79b9      	ldrb	r1, [r7, #6]
 800ccac:	79fb      	ldrb	r3, [r7, #7]
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7ff ff6a 	bl	800cb88 <OLED_DrawPoint>
 800ccb4:	e00c      	b.n	800ccd0 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800ccb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	bf0c      	ite	eq
 800ccbe:	2301      	moveq	r3, #1
 800ccc0:	2300      	movne	r3, #0
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	79b9      	ldrb	r1, [r7, #6]
 800ccc8:	79fb      	ldrb	r3, [r7, #7]
 800ccca:	4618      	mov	r0, r3
 800cccc:	f7ff ff5c 	bl	800cb88 <OLED_DrawPoint>
			temp<<=1;
 800ccd0:	7bfb      	ldrb	r3, [r7, #15]
 800ccd2:	005b      	lsls	r3, r3, #1
 800ccd4:	73fb      	strb	r3, [r7, #15]
			y++;
 800ccd6:	79bb      	ldrb	r3, [r7, #6]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800ccdc:	79ba      	ldrb	r2, [r7, #6]
 800ccde:	7b3b      	ldrb	r3, [r7, #12]
 800cce0:	1ad2      	subs	r2, r2, r3
 800cce2:	793b      	ldrb	r3, [r7, #4]
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d105      	bne.n	800ccf4 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800cce8:	7b3b      	ldrb	r3, [r7, #12]
 800ccea:	71bb      	strb	r3, [r7, #6]
				x++;
 800ccec:	79fb      	ldrb	r3, [r7, #7]
 800ccee:	3301      	adds	r3, #1
 800ccf0:	71fb      	strb	r3, [r7, #7]
				break;
 800ccf2:	e005      	b.n	800cd00 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800ccf4:	7b7b      	ldrb	r3, [r7, #13]
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	737b      	strb	r3, [r7, #13]
 800ccfa:	7b7b      	ldrb	r3, [r7, #13]
 800ccfc:	2b07      	cmp	r3, #7
 800ccfe:	d9ce      	bls.n	800cc9e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800cd00:	7bbb      	ldrb	r3, [r7, #14]
 800cd02:	3301      	adds	r3, #1
 800cd04:	73bb      	strb	r3, [r7, #14]
 800cd06:	7bba      	ldrb	r2, [r7, #14]
 800cd08:	793b      	ldrb	r3, [r7, #4]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d3ad      	bcc.n	800cc6a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800cd0e:	bf00      	nop
 800cd10:	bf00      	nop
 800cd12:	3714      	adds	r7, #20
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd90      	pop	{r4, r7, pc}
 800cd18:	080103e8 	.word	0x080103e8
 800cd1c:	0801085c 	.word	0x0801085c

0800cd20 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b084      	sub	sp, #16
 800cd24:	af02      	add	r7, sp, #8
 800cd26:	4603      	mov	r3, r0
 800cd28:	603a      	str	r2, [r7, #0]
 800cd2a:	71fb      	strb	r3, [r7, #7]
 800cd2c:	460b      	mov	r3, r1
 800cd2e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800cd30:	e01f      	b.n	800cd72 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800cd32:	79fb      	ldrb	r3, [r7, #7]
 800cd34:	2b7a      	cmp	r3, #122	@ 0x7a
 800cd36:	d904      	bls.n	800cd42 <OLED_ShowString+0x22>
 800cd38:	2300      	movs	r3, #0
 800cd3a:	71fb      	strb	r3, [r7, #7]
 800cd3c:	79bb      	ldrb	r3, [r7, #6]
 800cd3e:	3310      	adds	r3, #16
 800cd40:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800cd42:	79bb      	ldrb	r3, [r7, #6]
 800cd44:	2b3a      	cmp	r3, #58	@ 0x3a
 800cd46:	d905      	bls.n	800cd54 <OLED_ShowString+0x34>
 800cd48:	2300      	movs	r3, #0
 800cd4a:	71fb      	strb	r3, [r7, #7]
 800cd4c:	79fb      	ldrb	r3, [r7, #7]
 800cd4e:	71bb      	strb	r3, [r7, #6]
 800cd50:	f7ff fef4 	bl	800cb3c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	781a      	ldrb	r2, [r3, #0]
 800cd58:	79b9      	ldrb	r1, [r7, #6]
 800cd5a:	79f8      	ldrb	r0, [r7, #7]
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	9300      	str	r3, [sp, #0]
 800cd60:	230c      	movs	r3, #12
 800cd62:	f7ff ff6b 	bl	800cc3c <OLED_ShowChar>
        x+=8;
 800cd66:	79fb      	ldrb	r3, [r7, #7]
 800cd68:	3308      	adds	r3, #8
 800cd6a:	71fb      	strb	r3, [r7, #7]
        p++;
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	3301      	adds	r3, #1
 800cd70:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d1db      	bne.n	800cd32 <OLED_ShowString+0x12>
    }  
}	 
 800cd7a:	bf00      	nop
 800cd7c:	bf00      	nop
 800cd7e:	3708      	adds	r7, #8
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <OLED_Init>:

void OLED_Init(void)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800cd88:	f7f9 fa12 	bl	80061b0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800cd8c:	4b41      	ldr	r3, [pc, #260]	@ (800ce94 <OLED_Init+0x110>)
 800cd8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd90:	4a40      	ldr	r2, [pc, #256]	@ (800ce94 <OLED_Init+0x110>)
 800cd92:	f023 0301 	bic.w	r3, r3, #1
 800cd96:	6713      	str	r3, [r2, #112]	@ 0x70
 800cd98:	4b3e      	ldr	r3, [pc, #248]	@ (800ce94 <OLED_Init+0x110>)
 800cd9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd9c:	4a3d      	ldr	r2, [pc, #244]	@ (800ce94 <OLED_Init+0x110>)
 800cd9e:	f023 0304 	bic.w	r3, r3, #4
 800cda2:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800cda4:	f7f9 fa18 	bl	80061d8 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800cda8:	2200      	movs	r2, #0
 800cdaa:	2180      	movs	r1, #128	@ 0x80
 800cdac:	483a      	ldr	r0, [pc, #232]	@ (800ce98 <OLED_Init+0x114>)
 800cdae:	f7f8 f9a7 	bl	8005100 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800cdb2:	2064      	movs	r0, #100	@ 0x64
 800cdb4:	f7f7 fa28 	bl	8004208 <HAL_Delay>
	OLED_RST_Set();
 800cdb8:	2201      	movs	r2, #1
 800cdba:	2180      	movs	r1, #128	@ 0x80
 800cdbc:	4836      	ldr	r0, [pc, #216]	@ (800ce98 <OLED_Init+0x114>)
 800cdbe:	f7f8 f99f 	bl	8005100 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800cdc2:	2100      	movs	r1, #0
 800cdc4:	20ae      	movs	r0, #174	@ 0xae
 800cdc6:	f7ff fe6f 	bl	800caa8 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800cdca:	2100      	movs	r1, #0
 800cdcc:	20d5      	movs	r0, #213	@ 0xd5
 800cdce:	f7ff fe6b 	bl	800caa8 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800cdd2:	2100      	movs	r1, #0
 800cdd4:	2050      	movs	r0, #80	@ 0x50
 800cdd6:	f7ff fe67 	bl	800caa8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800cdda:	2100      	movs	r1, #0
 800cddc:	20a8      	movs	r0, #168	@ 0xa8
 800cdde:	f7ff fe63 	bl	800caa8 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800cde2:	2100      	movs	r1, #0
 800cde4:	203f      	movs	r0, #63	@ 0x3f
 800cde6:	f7ff fe5f 	bl	800caa8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800cdea:	2100      	movs	r1, #0
 800cdec:	20d3      	movs	r0, #211	@ 0xd3
 800cdee:	f7ff fe5b 	bl	800caa8 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	2000      	movs	r0, #0
 800cdf6:	f7ff fe57 	bl	800caa8 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800cdfa:	2100      	movs	r1, #0
 800cdfc:	2040      	movs	r0, #64	@ 0x40
 800cdfe:	f7ff fe53 	bl	800caa8 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800ce02:	2100      	movs	r1, #0
 800ce04:	208d      	movs	r0, #141	@ 0x8d
 800ce06:	f7ff fe4f 	bl	800caa8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800ce0a:	2100      	movs	r1, #0
 800ce0c:	2014      	movs	r0, #20
 800ce0e:	f7ff fe4b 	bl	800caa8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800ce12:	2100      	movs	r1, #0
 800ce14:	2020      	movs	r0, #32
 800ce16:	f7ff fe47 	bl	800caa8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800ce1a:	2100      	movs	r1, #0
 800ce1c:	2002      	movs	r0, #2
 800ce1e:	f7ff fe43 	bl	800caa8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800ce22:	2100      	movs	r1, #0
 800ce24:	20a1      	movs	r0, #161	@ 0xa1
 800ce26:	f7ff fe3f 	bl	800caa8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800ce2a:	2100      	movs	r1, #0
 800ce2c:	20c0      	movs	r0, #192	@ 0xc0
 800ce2e:	f7ff fe3b 	bl	800caa8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800ce32:	2100      	movs	r1, #0
 800ce34:	20da      	movs	r0, #218	@ 0xda
 800ce36:	f7ff fe37 	bl	800caa8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800ce3a:	2100      	movs	r1, #0
 800ce3c:	2012      	movs	r0, #18
 800ce3e:	f7ff fe33 	bl	800caa8 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800ce42:	2100      	movs	r1, #0
 800ce44:	2081      	movs	r0, #129	@ 0x81
 800ce46:	f7ff fe2f 	bl	800caa8 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800ce4a:	2100      	movs	r1, #0
 800ce4c:	20ef      	movs	r0, #239	@ 0xef
 800ce4e:	f7ff fe2b 	bl	800caa8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800ce52:	2100      	movs	r1, #0
 800ce54:	20d9      	movs	r0, #217	@ 0xd9
 800ce56:	f7ff fe27 	bl	800caa8 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800ce5a:	2100      	movs	r1, #0
 800ce5c:	20f1      	movs	r0, #241	@ 0xf1
 800ce5e:	f7ff fe23 	bl	800caa8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800ce62:	2100      	movs	r1, #0
 800ce64:	20db      	movs	r0, #219	@ 0xdb
 800ce66:	f7ff fe1f 	bl	800caa8 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800ce6a:	2100      	movs	r1, #0
 800ce6c:	2030      	movs	r0, #48	@ 0x30
 800ce6e:	f7ff fe1b 	bl	800caa8 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800ce72:	2100      	movs	r1, #0
 800ce74:	20a4      	movs	r0, #164	@ 0xa4
 800ce76:	f7ff fe17 	bl	800caa8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800ce7a:	2100      	movs	r1, #0
 800ce7c:	20a6      	movs	r0, #166	@ 0xa6
 800ce7e:	f7ff fe13 	bl	800caa8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800ce82:	2100      	movs	r1, #0
 800ce84:	20af      	movs	r0, #175	@ 0xaf
 800ce86:	f7ff fe0f 	bl	800caa8 <OLED_WR_Byte>
	OLED_Clear(); 
 800ce8a:	f7ff fe57 	bl	800cb3c <OLED_Clear>
 800ce8e:	bf00      	nop
 800ce90:	bd80      	pop	{r7, pc}
 800ce92:	bf00      	nop
 800ce94:	40023800 	.word	0x40023800
 800ce98:	40021000 	.word	0x40021000

0800ce9c <atoi>:
 800ce9c:	220a      	movs	r2, #10
 800ce9e:	2100      	movs	r1, #0
 800cea0:	f000 b87a 	b.w	800cf98 <strtol>

0800cea4 <_strtol_l.constprop.0>:
 800cea4:	2b24      	cmp	r3, #36	@ 0x24
 800cea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ceaa:	4686      	mov	lr, r0
 800ceac:	4690      	mov	r8, r2
 800ceae:	d801      	bhi.n	800ceb4 <_strtol_l.constprop.0+0x10>
 800ceb0:	2b01      	cmp	r3, #1
 800ceb2:	d106      	bne.n	800cec2 <_strtol_l.constprop.0+0x1e>
 800ceb4:	f000 fe82 	bl	800dbbc <__errno>
 800ceb8:	2316      	movs	r3, #22
 800ceba:	6003      	str	r3, [r0, #0]
 800cebc:	2000      	movs	r0, #0
 800cebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cec2:	4834      	ldr	r0, [pc, #208]	@ (800cf94 <_strtol_l.constprop.0+0xf0>)
 800cec4:	460d      	mov	r5, r1
 800cec6:	462a      	mov	r2, r5
 800cec8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cecc:	5d06      	ldrb	r6, [r0, r4]
 800cece:	f016 0608 	ands.w	r6, r6, #8
 800ced2:	d1f8      	bne.n	800cec6 <_strtol_l.constprop.0+0x22>
 800ced4:	2c2d      	cmp	r4, #45	@ 0x2d
 800ced6:	d12d      	bne.n	800cf34 <_strtol_l.constprop.0+0x90>
 800ced8:	782c      	ldrb	r4, [r5, #0]
 800ceda:	2601      	movs	r6, #1
 800cedc:	1c95      	adds	r5, r2, #2
 800cede:	f033 0210 	bics.w	r2, r3, #16
 800cee2:	d109      	bne.n	800cef8 <_strtol_l.constprop.0+0x54>
 800cee4:	2c30      	cmp	r4, #48	@ 0x30
 800cee6:	d12a      	bne.n	800cf3e <_strtol_l.constprop.0+0x9a>
 800cee8:	782a      	ldrb	r2, [r5, #0]
 800ceea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ceee:	2a58      	cmp	r2, #88	@ 0x58
 800cef0:	d125      	bne.n	800cf3e <_strtol_l.constprop.0+0x9a>
 800cef2:	786c      	ldrb	r4, [r5, #1]
 800cef4:	2310      	movs	r3, #16
 800cef6:	3502      	adds	r5, #2
 800cef8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800cefc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800cf00:	2200      	movs	r2, #0
 800cf02:	fbbc f9f3 	udiv	r9, ip, r3
 800cf06:	4610      	mov	r0, r2
 800cf08:	fb03 ca19 	mls	sl, r3, r9, ip
 800cf0c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800cf10:	2f09      	cmp	r7, #9
 800cf12:	d81b      	bhi.n	800cf4c <_strtol_l.constprop.0+0xa8>
 800cf14:	463c      	mov	r4, r7
 800cf16:	42a3      	cmp	r3, r4
 800cf18:	dd27      	ble.n	800cf6a <_strtol_l.constprop.0+0xc6>
 800cf1a:	1c57      	adds	r7, r2, #1
 800cf1c:	d007      	beq.n	800cf2e <_strtol_l.constprop.0+0x8a>
 800cf1e:	4581      	cmp	r9, r0
 800cf20:	d320      	bcc.n	800cf64 <_strtol_l.constprop.0+0xc0>
 800cf22:	d101      	bne.n	800cf28 <_strtol_l.constprop.0+0x84>
 800cf24:	45a2      	cmp	sl, r4
 800cf26:	db1d      	blt.n	800cf64 <_strtol_l.constprop.0+0xc0>
 800cf28:	fb00 4003 	mla	r0, r0, r3, r4
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf32:	e7eb      	b.n	800cf0c <_strtol_l.constprop.0+0x68>
 800cf34:	2c2b      	cmp	r4, #43	@ 0x2b
 800cf36:	bf04      	itt	eq
 800cf38:	782c      	ldrbeq	r4, [r5, #0]
 800cf3a:	1c95      	addeq	r5, r2, #2
 800cf3c:	e7cf      	b.n	800cede <_strtol_l.constprop.0+0x3a>
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d1da      	bne.n	800cef8 <_strtol_l.constprop.0+0x54>
 800cf42:	2c30      	cmp	r4, #48	@ 0x30
 800cf44:	bf0c      	ite	eq
 800cf46:	2308      	moveq	r3, #8
 800cf48:	230a      	movne	r3, #10
 800cf4a:	e7d5      	b.n	800cef8 <_strtol_l.constprop.0+0x54>
 800cf4c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800cf50:	2f19      	cmp	r7, #25
 800cf52:	d801      	bhi.n	800cf58 <_strtol_l.constprop.0+0xb4>
 800cf54:	3c37      	subs	r4, #55	@ 0x37
 800cf56:	e7de      	b.n	800cf16 <_strtol_l.constprop.0+0x72>
 800cf58:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800cf5c:	2f19      	cmp	r7, #25
 800cf5e:	d804      	bhi.n	800cf6a <_strtol_l.constprop.0+0xc6>
 800cf60:	3c57      	subs	r4, #87	@ 0x57
 800cf62:	e7d8      	b.n	800cf16 <_strtol_l.constprop.0+0x72>
 800cf64:	f04f 32ff 	mov.w	r2, #4294967295
 800cf68:	e7e1      	b.n	800cf2e <_strtol_l.constprop.0+0x8a>
 800cf6a:	1c53      	adds	r3, r2, #1
 800cf6c:	d108      	bne.n	800cf80 <_strtol_l.constprop.0+0xdc>
 800cf6e:	2322      	movs	r3, #34	@ 0x22
 800cf70:	f8ce 3000 	str.w	r3, [lr]
 800cf74:	4660      	mov	r0, ip
 800cf76:	f1b8 0f00 	cmp.w	r8, #0
 800cf7a:	d0a0      	beq.n	800cebe <_strtol_l.constprop.0+0x1a>
 800cf7c:	1e69      	subs	r1, r5, #1
 800cf7e:	e006      	b.n	800cf8e <_strtol_l.constprop.0+0xea>
 800cf80:	b106      	cbz	r6, 800cf84 <_strtol_l.constprop.0+0xe0>
 800cf82:	4240      	negs	r0, r0
 800cf84:	f1b8 0f00 	cmp.w	r8, #0
 800cf88:	d099      	beq.n	800cebe <_strtol_l.constprop.0+0x1a>
 800cf8a:	2a00      	cmp	r2, #0
 800cf8c:	d1f6      	bne.n	800cf7c <_strtol_l.constprop.0+0xd8>
 800cf8e:	f8c8 1000 	str.w	r1, [r8]
 800cf92:	e794      	b.n	800cebe <_strtol_l.constprop.0+0x1a>
 800cf94:	08010e4d 	.word	0x08010e4d

0800cf98 <strtol>:
 800cf98:	4613      	mov	r3, r2
 800cf9a:	460a      	mov	r2, r1
 800cf9c:	4601      	mov	r1, r0
 800cf9e:	4802      	ldr	r0, [pc, #8]	@ (800cfa8 <strtol+0x10>)
 800cfa0:	6800      	ldr	r0, [r0, #0]
 800cfa2:	f7ff bf7f 	b.w	800cea4 <_strtol_l.constprop.0>
 800cfa6:	bf00      	nop
 800cfa8:	20000040 	.word	0x20000040

0800cfac <__cvt>:
 800cfac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfb0:	ec57 6b10 	vmov	r6, r7, d0
 800cfb4:	2f00      	cmp	r7, #0
 800cfb6:	460c      	mov	r4, r1
 800cfb8:	4619      	mov	r1, r3
 800cfba:	463b      	mov	r3, r7
 800cfbc:	bfbb      	ittet	lt
 800cfbe:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cfc2:	461f      	movlt	r7, r3
 800cfc4:	2300      	movge	r3, #0
 800cfc6:	232d      	movlt	r3, #45	@ 0x2d
 800cfc8:	700b      	strb	r3, [r1, #0]
 800cfca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cfcc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cfd0:	4691      	mov	r9, r2
 800cfd2:	f023 0820 	bic.w	r8, r3, #32
 800cfd6:	bfbc      	itt	lt
 800cfd8:	4632      	movlt	r2, r6
 800cfda:	4616      	movlt	r6, r2
 800cfdc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cfe0:	d005      	beq.n	800cfee <__cvt+0x42>
 800cfe2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cfe6:	d100      	bne.n	800cfea <__cvt+0x3e>
 800cfe8:	3401      	adds	r4, #1
 800cfea:	2102      	movs	r1, #2
 800cfec:	e000      	b.n	800cff0 <__cvt+0x44>
 800cfee:	2103      	movs	r1, #3
 800cff0:	ab03      	add	r3, sp, #12
 800cff2:	9301      	str	r3, [sp, #4]
 800cff4:	ab02      	add	r3, sp, #8
 800cff6:	9300      	str	r3, [sp, #0]
 800cff8:	ec47 6b10 	vmov	d0, r6, r7
 800cffc:	4653      	mov	r3, sl
 800cffe:	4622      	mov	r2, r4
 800d000:	f000 fea2 	bl	800dd48 <_dtoa_r>
 800d004:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d008:	4605      	mov	r5, r0
 800d00a:	d119      	bne.n	800d040 <__cvt+0x94>
 800d00c:	f019 0f01 	tst.w	r9, #1
 800d010:	d00e      	beq.n	800d030 <__cvt+0x84>
 800d012:	eb00 0904 	add.w	r9, r0, r4
 800d016:	2200      	movs	r2, #0
 800d018:	2300      	movs	r3, #0
 800d01a:	4630      	mov	r0, r6
 800d01c:	4639      	mov	r1, r7
 800d01e:	f7f3 fd53 	bl	8000ac8 <__aeabi_dcmpeq>
 800d022:	b108      	cbz	r0, 800d028 <__cvt+0x7c>
 800d024:	f8cd 900c 	str.w	r9, [sp, #12]
 800d028:	2230      	movs	r2, #48	@ 0x30
 800d02a:	9b03      	ldr	r3, [sp, #12]
 800d02c:	454b      	cmp	r3, r9
 800d02e:	d31e      	bcc.n	800d06e <__cvt+0xc2>
 800d030:	9b03      	ldr	r3, [sp, #12]
 800d032:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d034:	1b5b      	subs	r3, r3, r5
 800d036:	4628      	mov	r0, r5
 800d038:	6013      	str	r3, [r2, #0]
 800d03a:	b004      	add	sp, #16
 800d03c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d040:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d044:	eb00 0904 	add.w	r9, r0, r4
 800d048:	d1e5      	bne.n	800d016 <__cvt+0x6a>
 800d04a:	7803      	ldrb	r3, [r0, #0]
 800d04c:	2b30      	cmp	r3, #48	@ 0x30
 800d04e:	d10a      	bne.n	800d066 <__cvt+0xba>
 800d050:	2200      	movs	r2, #0
 800d052:	2300      	movs	r3, #0
 800d054:	4630      	mov	r0, r6
 800d056:	4639      	mov	r1, r7
 800d058:	f7f3 fd36 	bl	8000ac8 <__aeabi_dcmpeq>
 800d05c:	b918      	cbnz	r0, 800d066 <__cvt+0xba>
 800d05e:	f1c4 0401 	rsb	r4, r4, #1
 800d062:	f8ca 4000 	str.w	r4, [sl]
 800d066:	f8da 3000 	ldr.w	r3, [sl]
 800d06a:	4499      	add	r9, r3
 800d06c:	e7d3      	b.n	800d016 <__cvt+0x6a>
 800d06e:	1c59      	adds	r1, r3, #1
 800d070:	9103      	str	r1, [sp, #12]
 800d072:	701a      	strb	r2, [r3, #0]
 800d074:	e7d9      	b.n	800d02a <__cvt+0x7e>

0800d076 <__exponent>:
 800d076:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d078:	2900      	cmp	r1, #0
 800d07a:	bfba      	itte	lt
 800d07c:	4249      	neglt	r1, r1
 800d07e:	232d      	movlt	r3, #45	@ 0x2d
 800d080:	232b      	movge	r3, #43	@ 0x2b
 800d082:	2909      	cmp	r1, #9
 800d084:	7002      	strb	r2, [r0, #0]
 800d086:	7043      	strb	r3, [r0, #1]
 800d088:	dd29      	ble.n	800d0de <__exponent+0x68>
 800d08a:	f10d 0307 	add.w	r3, sp, #7
 800d08e:	461d      	mov	r5, r3
 800d090:	270a      	movs	r7, #10
 800d092:	461a      	mov	r2, r3
 800d094:	fbb1 f6f7 	udiv	r6, r1, r7
 800d098:	fb07 1416 	mls	r4, r7, r6, r1
 800d09c:	3430      	adds	r4, #48	@ 0x30
 800d09e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d0a2:	460c      	mov	r4, r1
 800d0a4:	2c63      	cmp	r4, #99	@ 0x63
 800d0a6:	f103 33ff 	add.w	r3, r3, #4294967295
 800d0aa:	4631      	mov	r1, r6
 800d0ac:	dcf1      	bgt.n	800d092 <__exponent+0x1c>
 800d0ae:	3130      	adds	r1, #48	@ 0x30
 800d0b0:	1e94      	subs	r4, r2, #2
 800d0b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d0b6:	1c41      	adds	r1, r0, #1
 800d0b8:	4623      	mov	r3, r4
 800d0ba:	42ab      	cmp	r3, r5
 800d0bc:	d30a      	bcc.n	800d0d4 <__exponent+0x5e>
 800d0be:	f10d 0309 	add.w	r3, sp, #9
 800d0c2:	1a9b      	subs	r3, r3, r2
 800d0c4:	42ac      	cmp	r4, r5
 800d0c6:	bf88      	it	hi
 800d0c8:	2300      	movhi	r3, #0
 800d0ca:	3302      	adds	r3, #2
 800d0cc:	4403      	add	r3, r0
 800d0ce:	1a18      	subs	r0, r3, r0
 800d0d0:	b003      	add	sp, #12
 800d0d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d0d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d0dc:	e7ed      	b.n	800d0ba <__exponent+0x44>
 800d0de:	2330      	movs	r3, #48	@ 0x30
 800d0e0:	3130      	adds	r1, #48	@ 0x30
 800d0e2:	7083      	strb	r3, [r0, #2]
 800d0e4:	70c1      	strb	r1, [r0, #3]
 800d0e6:	1d03      	adds	r3, r0, #4
 800d0e8:	e7f1      	b.n	800d0ce <__exponent+0x58>
	...

0800d0ec <_printf_float>:
 800d0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f0:	b08d      	sub	sp, #52	@ 0x34
 800d0f2:	460c      	mov	r4, r1
 800d0f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d0f8:	4616      	mov	r6, r2
 800d0fa:	461f      	mov	r7, r3
 800d0fc:	4605      	mov	r5, r0
 800d0fe:	f000 fd13 	bl	800db28 <_localeconv_r>
 800d102:	6803      	ldr	r3, [r0, #0]
 800d104:	9304      	str	r3, [sp, #16]
 800d106:	4618      	mov	r0, r3
 800d108:	f7f3 f8b2 	bl	8000270 <strlen>
 800d10c:	2300      	movs	r3, #0
 800d10e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d110:	f8d8 3000 	ldr.w	r3, [r8]
 800d114:	9005      	str	r0, [sp, #20]
 800d116:	3307      	adds	r3, #7
 800d118:	f023 0307 	bic.w	r3, r3, #7
 800d11c:	f103 0208 	add.w	r2, r3, #8
 800d120:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d124:	f8d4 b000 	ldr.w	fp, [r4]
 800d128:	f8c8 2000 	str.w	r2, [r8]
 800d12c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d130:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d134:	9307      	str	r3, [sp, #28]
 800d136:	f8cd 8018 	str.w	r8, [sp, #24]
 800d13a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d13e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d142:	4b9c      	ldr	r3, [pc, #624]	@ (800d3b4 <_printf_float+0x2c8>)
 800d144:	f04f 32ff 	mov.w	r2, #4294967295
 800d148:	f7f3 fcf0 	bl	8000b2c <__aeabi_dcmpun>
 800d14c:	bb70      	cbnz	r0, 800d1ac <_printf_float+0xc0>
 800d14e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d152:	4b98      	ldr	r3, [pc, #608]	@ (800d3b4 <_printf_float+0x2c8>)
 800d154:	f04f 32ff 	mov.w	r2, #4294967295
 800d158:	f7f3 fcca 	bl	8000af0 <__aeabi_dcmple>
 800d15c:	bb30      	cbnz	r0, 800d1ac <_printf_float+0xc0>
 800d15e:	2200      	movs	r2, #0
 800d160:	2300      	movs	r3, #0
 800d162:	4640      	mov	r0, r8
 800d164:	4649      	mov	r1, r9
 800d166:	f7f3 fcb9 	bl	8000adc <__aeabi_dcmplt>
 800d16a:	b110      	cbz	r0, 800d172 <_printf_float+0x86>
 800d16c:	232d      	movs	r3, #45	@ 0x2d
 800d16e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d172:	4a91      	ldr	r2, [pc, #580]	@ (800d3b8 <_printf_float+0x2cc>)
 800d174:	4b91      	ldr	r3, [pc, #580]	@ (800d3bc <_printf_float+0x2d0>)
 800d176:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d17a:	bf94      	ite	ls
 800d17c:	4690      	movls	r8, r2
 800d17e:	4698      	movhi	r8, r3
 800d180:	2303      	movs	r3, #3
 800d182:	6123      	str	r3, [r4, #16]
 800d184:	f02b 0304 	bic.w	r3, fp, #4
 800d188:	6023      	str	r3, [r4, #0]
 800d18a:	f04f 0900 	mov.w	r9, #0
 800d18e:	9700      	str	r7, [sp, #0]
 800d190:	4633      	mov	r3, r6
 800d192:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d194:	4621      	mov	r1, r4
 800d196:	4628      	mov	r0, r5
 800d198:	f000 f9d2 	bl	800d540 <_printf_common>
 800d19c:	3001      	adds	r0, #1
 800d19e:	f040 808d 	bne.w	800d2bc <_printf_float+0x1d0>
 800d1a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d1a6:	b00d      	add	sp, #52	@ 0x34
 800d1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ac:	4642      	mov	r2, r8
 800d1ae:	464b      	mov	r3, r9
 800d1b0:	4640      	mov	r0, r8
 800d1b2:	4649      	mov	r1, r9
 800d1b4:	f7f3 fcba 	bl	8000b2c <__aeabi_dcmpun>
 800d1b8:	b140      	cbz	r0, 800d1cc <_printf_float+0xe0>
 800d1ba:	464b      	mov	r3, r9
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	bfbc      	itt	lt
 800d1c0:	232d      	movlt	r3, #45	@ 0x2d
 800d1c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d1c6:	4a7e      	ldr	r2, [pc, #504]	@ (800d3c0 <_printf_float+0x2d4>)
 800d1c8:	4b7e      	ldr	r3, [pc, #504]	@ (800d3c4 <_printf_float+0x2d8>)
 800d1ca:	e7d4      	b.n	800d176 <_printf_float+0x8a>
 800d1cc:	6863      	ldr	r3, [r4, #4]
 800d1ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d1d2:	9206      	str	r2, [sp, #24]
 800d1d4:	1c5a      	adds	r2, r3, #1
 800d1d6:	d13b      	bne.n	800d250 <_printf_float+0x164>
 800d1d8:	2306      	movs	r3, #6
 800d1da:	6063      	str	r3, [r4, #4]
 800d1dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	6022      	str	r2, [r4, #0]
 800d1e4:	9303      	str	r3, [sp, #12]
 800d1e6:	ab0a      	add	r3, sp, #40	@ 0x28
 800d1e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d1ec:	ab09      	add	r3, sp, #36	@ 0x24
 800d1ee:	9300      	str	r3, [sp, #0]
 800d1f0:	6861      	ldr	r1, [r4, #4]
 800d1f2:	ec49 8b10 	vmov	d0, r8, r9
 800d1f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d1fa:	4628      	mov	r0, r5
 800d1fc:	f7ff fed6 	bl	800cfac <__cvt>
 800d200:	9b06      	ldr	r3, [sp, #24]
 800d202:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d204:	2b47      	cmp	r3, #71	@ 0x47
 800d206:	4680      	mov	r8, r0
 800d208:	d129      	bne.n	800d25e <_printf_float+0x172>
 800d20a:	1cc8      	adds	r0, r1, #3
 800d20c:	db02      	blt.n	800d214 <_printf_float+0x128>
 800d20e:	6863      	ldr	r3, [r4, #4]
 800d210:	4299      	cmp	r1, r3
 800d212:	dd41      	ble.n	800d298 <_printf_float+0x1ac>
 800d214:	f1aa 0a02 	sub.w	sl, sl, #2
 800d218:	fa5f fa8a 	uxtb.w	sl, sl
 800d21c:	3901      	subs	r1, #1
 800d21e:	4652      	mov	r2, sl
 800d220:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d224:	9109      	str	r1, [sp, #36]	@ 0x24
 800d226:	f7ff ff26 	bl	800d076 <__exponent>
 800d22a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d22c:	1813      	adds	r3, r2, r0
 800d22e:	2a01      	cmp	r2, #1
 800d230:	4681      	mov	r9, r0
 800d232:	6123      	str	r3, [r4, #16]
 800d234:	dc02      	bgt.n	800d23c <_printf_float+0x150>
 800d236:	6822      	ldr	r2, [r4, #0]
 800d238:	07d2      	lsls	r2, r2, #31
 800d23a:	d501      	bpl.n	800d240 <_printf_float+0x154>
 800d23c:	3301      	adds	r3, #1
 800d23e:	6123      	str	r3, [r4, #16]
 800d240:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d244:	2b00      	cmp	r3, #0
 800d246:	d0a2      	beq.n	800d18e <_printf_float+0xa2>
 800d248:	232d      	movs	r3, #45	@ 0x2d
 800d24a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d24e:	e79e      	b.n	800d18e <_printf_float+0xa2>
 800d250:	9a06      	ldr	r2, [sp, #24]
 800d252:	2a47      	cmp	r2, #71	@ 0x47
 800d254:	d1c2      	bne.n	800d1dc <_printf_float+0xf0>
 800d256:	2b00      	cmp	r3, #0
 800d258:	d1c0      	bne.n	800d1dc <_printf_float+0xf0>
 800d25a:	2301      	movs	r3, #1
 800d25c:	e7bd      	b.n	800d1da <_printf_float+0xee>
 800d25e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d262:	d9db      	bls.n	800d21c <_printf_float+0x130>
 800d264:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d268:	d118      	bne.n	800d29c <_printf_float+0x1b0>
 800d26a:	2900      	cmp	r1, #0
 800d26c:	6863      	ldr	r3, [r4, #4]
 800d26e:	dd0b      	ble.n	800d288 <_printf_float+0x19c>
 800d270:	6121      	str	r1, [r4, #16]
 800d272:	b913      	cbnz	r3, 800d27a <_printf_float+0x18e>
 800d274:	6822      	ldr	r2, [r4, #0]
 800d276:	07d0      	lsls	r0, r2, #31
 800d278:	d502      	bpl.n	800d280 <_printf_float+0x194>
 800d27a:	3301      	adds	r3, #1
 800d27c:	440b      	add	r3, r1
 800d27e:	6123      	str	r3, [r4, #16]
 800d280:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d282:	f04f 0900 	mov.w	r9, #0
 800d286:	e7db      	b.n	800d240 <_printf_float+0x154>
 800d288:	b913      	cbnz	r3, 800d290 <_printf_float+0x1a4>
 800d28a:	6822      	ldr	r2, [r4, #0]
 800d28c:	07d2      	lsls	r2, r2, #31
 800d28e:	d501      	bpl.n	800d294 <_printf_float+0x1a8>
 800d290:	3302      	adds	r3, #2
 800d292:	e7f4      	b.n	800d27e <_printf_float+0x192>
 800d294:	2301      	movs	r3, #1
 800d296:	e7f2      	b.n	800d27e <_printf_float+0x192>
 800d298:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d29c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d29e:	4299      	cmp	r1, r3
 800d2a0:	db05      	blt.n	800d2ae <_printf_float+0x1c2>
 800d2a2:	6823      	ldr	r3, [r4, #0]
 800d2a4:	6121      	str	r1, [r4, #16]
 800d2a6:	07d8      	lsls	r0, r3, #31
 800d2a8:	d5ea      	bpl.n	800d280 <_printf_float+0x194>
 800d2aa:	1c4b      	adds	r3, r1, #1
 800d2ac:	e7e7      	b.n	800d27e <_printf_float+0x192>
 800d2ae:	2900      	cmp	r1, #0
 800d2b0:	bfd4      	ite	le
 800d2b2:	f1c1 0202 	rsble	r2, r1, #2
 800d2b6:	2201      	movgt	r2, #1
 800d2b8:	4413      	add	r3, r2
 800d2ba:	e7e0      	b.n	800d27e <_printf_float+0x192>
 800d2bc:	6823      	ldr	r3, [r4, #0]
 800d2be:	055a      	lsls	r2, r3, #21
 800d2c0:	d407      	bmi.n	800d2d2 <_printf_float+0x1e6>
 800d2c2:	6923      	ldr	r3, [r4, #16]
 800d2c4:	4642      	mov	r2, r8
 800d2c6:	4631      	mov	r1, r6
 800d2c8:	4628      	mov	r0, r5
 800d2ca:	47b8      	blx	r7
 800d2cc:	3001      	adds	r0, #1
 800d2ce:	d12b      	bne.n	800d328 <_printf_float+0x23c>
 800d2d0:	e767      	b.n	800d1a2 <_printf_float+0xb6>
 800d2d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d2d6:	f240 80dd 	bls.w	800d494 <_printf_float+0x3a8>
 800d2da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d2de:	2200      	movs	r2, #0
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	f7f3 fbf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	d033      	beq.n	800d352 <_printf_float+0x266>
 800d2ea:	4a37      	ldr	r2, [pc, #220]	@ (800d3c8 <_printf_float+0x2dc>)
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	4631      	mov	r1, r6
 800d2f0:	4628      	mov	r0, r5
 800d2f2:	47b8      	blx	r7
 800d2f4:	3001      	adds	r0, #1
 800d2f6:	f43f af54 	beq.w	800d1a2 <_printf_float+0xb6>
 800d2fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d2fe:	4543      	cmp	r3, r8
 800d300:	db02      	blt.n	800d308 <_printf_float+0x21c>
 800d302:	6823      	ldr	r3, [r4, #0]
 800d304:	07d8      	lsls	r0, r3, #31
 800d306:	d50f      	bpl.n	800d328 <_printf_float+0x23c>
 800d308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d30c:	4631      	mov	r1, r6
 800d30e:	4628      	mov	r0, r5
 800d310:	47b8      	blx	r7
 800d312:	3001      	adds	r0, #1
 800d314:	f43f af45 	beq.w	800d1a2 <_printf_float+0xb6>
 800d318:	f04f 0900 	mov.w	r9, #0
 800d31c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d320:	f104 0a1a 	add.w	sl, r4, #26
 800d324:	45c8      	cmp	r8, r9
 800d326:	dc09      	bgt.n	800d33c <_printf_float+0x250>
 800d328:	6823      	ldr	r3, [r4, #0]
 800d32a:	079b      	lsls	r3, r3, #30
 800d32c:	f100 8103 	bmi.w	800d536 <_printf_float+0x44a>
 800d330:	68e0      	ldr	r0, [r4, #12]
 800d332:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d334:	4298      	cmp	r0, r3
 800d336:	bfb8      	it	lt
 800d338:	4618      	movlt	r0, r3
 800d33a:	e734      	b.n	800d1a6 <_printf_float+0xba>
 800d33c:	2301      	movs	r3, #1
 800d33e:	4652      	mov	r2, sl
 800d340:	4631      	mov	r1, r6
 800d342:	4628      	mov	r0, r5
 800d344:	47b8      	blx	r7
 800d346:	3001      	adds	r0, #1
 800d348:	f43f af2b 	beq.w	800d1a2 <_printf_float+0xb6>
 800d34c:	f109 0901 	add.w	r9, r9, #1
 800d350:	e7e8      	b.n	800d324 <_printf_float+0x238>
 800d352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d354:	2b00      	cmp	r3, #0
 800d356:	dc39      	bgt.n	800d3cc <_printf_float+0x2e0>
 800d358:	4a1b      	ldr	r2, [pc, #108]	@ (800d3c8 <_printf_float+0x2dc>)
 800d35a:	2301      	movs	r3, #1
 800d35c:	4631      	mov	r1, r6
 800d35e:	4628      	mov	r0, r5
 800d360:	47b8      	blx	r7
 800d362:	3001      	adds	r0, #1
 800d364:	f43f af1d 	beq.w	800d1a2 <_printf_float+0xb6>
 800d368:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d36c:	ea59 0303 	orrs.w	r3, r9, r3
 800d370:	d102      	bne.n	800d378 <_printf_float+0x28c>
 800d372:	6823      	ldr	r3, [r4, #0]
 800d374:	07d9      	lsls	r1, r3, #31
 800d376:	d5d7      	bpl.n	800d328 <_printf_float+0x23c>
 800d378:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d37c:	4631      	mov	r1, r6
 800d37e:	4628      	mov	r0, r5
 800d380:	47b8      	blx	r7
 800d382:	3001      	adds	r0, #1
 800d384:	f43f af0d 	beq.w	800d1a2 <_printf_float+0xb6>
 800d388:	f04f 0a00 	mov.w	sl, #0
 800d38c:	f104 0b1a 	add.w	fp, r4, #26
 800d390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d392:	425b      	negs	r3, r3
 800d394:	4553      	cmp	r3, sl
 800d396:	dc01      	bgt.n	800d39c <_printf_float+0x2b0>
 800d398:	464b      	mov	r3, r9
 800d39a:	e793      	b.n	800d2c4 <_printf_float+0x1d8>
 800d39c:	2301      	movs	r3, #1
 800d39e:	465a      	mov	r2, fp
 800d3a0:	4631      	mov	r1, r6
 800d3a2:	4628      	mov	r0, r5
 800d3a4:	47b8      	blx	r7
 800d3a6:	3001      	adds	r0, #1
 800d3a8:	f43f aefb 	beq.w	800d1a2 <_printf_float+0xb6>
 800d3ac:	f10a 0a01 	add.w	sl, sl, #1
 800d3b0:	e7ee      	b.n	800d390 <_printf_float+0x2a4>
 800d3b2:	bf00      	nop
 800d3b4:	7fefffff 	.word	0x7fefffff
 800d3b8:	08010f4d 	.word	0x08010f4d
 800d3bc:	08010f51 	.word	0x08010f51
 800d3c0:	08010f55 	.word	0x08010f55
 800d3c4:	08010f59 	.word	0x08010f59
 800d3c8:	08010f5d 	.word	0x08010f5d
 800d3cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d3ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d3d2:	4553      	cmp	r3, sl
 800d3d4:	bfa8      	it	ge
 800d3d6:	4653      	movge	r3, sl
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	4699      	mov	r9, r3
 800d3dc:	dc36      	bgt.n	800d44c <_printf_float+0x360>
 800d3de:	f04f 0b00 	mov.w	fp, #0
 800d3e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d3e6:	f104 021a 	add.w	r2, r4, #26
 800d3ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d3ec:	9306      	str	r3, [sp, #24]
 800d3ee:	eba3 0309 	sub.w	r3, r3, r9
 800d3f2:	455b      	cmp	r3, fp
 800d3f4:	dc31      	bgt.n	800d45a <_printf_float+0x36e>
 800d3f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3f8:	459a      	cmp	sl, r3
 800d3fa:	dc3a      	bgt.n	800d472 <_printf_float+0x386>
 800d3fc:	6823      	ldr	r3, [r4, #0]
 800d3fe:	07da      	lsls	r2, r3, #31
 800d400:	d437      	bmi.n	800d472 <_printf_float+0x386>
 800d402:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d404:	ebaa 0903 	sub.w	r9, sl, r3
 800d408:	9b06      	ldr	r3, [sp, #24]
 800d40a:	ebaa 0303 	sub.w	r3, sl, r3
 800d40e:	4599      	cmp	r9, r3
 800d410:	bfa8      	it	ge
 800d412:	4699      	movge	r9, r3
 800d414:	f1b9 0f00 	cmp.w	r9, #0
 800d418:	dc33      	bgt.n	800d482 <_printf_float+0x396>
 800d41a:	f04f 0800 	mov.w	r8, #0
 800d41e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d422:	f104 0b1a 	add.w	fp, r4, #26
 800d426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d428:	ebaa 0303 	sub.w	r3, sl, r3
 800d42c:	eba3 0309 	sub.w	r3, r3, r9
 800d430:	4543      	cmp	r3, r8
 800d432:	f77f af79 	ble.w	800d328 <_printf_float+0x23c>
 800d436:	2301      	movs	r3, #1
 800d438:	465a      	mov	r2, fp
 800d43a:	4631      	mov	r1, r6
 800d43c:	4628      	mov	r0, r5
 800d43e:	47b8      	blx	r7
 800d440:	3001      	adds	r0, #1
 800d442:	f43f aeae 	beq.w	800d1a2 <_printf_float+0xb6>
 800d446:	f108 0801 	add.w	r8, r8, #1
 800d44a:	e7ec      	b.n	800d426 <_printf_float+0x33a>
 800d44c:	4642      	mov	r2, r8
 800d44e:	4631      	mov	r1, r6
 800d450:	4628      	mov	r0, r5
 800d452:	47b8      	blx	r7
 800d454:	3001      	adds	r0, #1
 800d456:	d1c2      	bne.n	800d3de <_printf_float+0x2f2>
 800d458:	e6a3      	b.n	800d1a2 <_printf_float+0xb6>
 800d45a:	2301      	movs	r3, #1
 800d45c:	4631      	mov	r1, r6
 800d45e:	4628      	mov	r0, r5
 800d460:	9206      	str	r2, [sp, #24]
 800d462:	47b8      	blx	r7
 800d464:	3001      	adds	r0, #1
 800d466:	f43f ae9c 	beq.w	800d1a2 <_printf_float+0xb6>
 800d46a:	9a06      	ldr	r2, [sp, #24]
 800d46c:	f10b 0b01 	add.w	fp, fp, #1
 800d470:	e7bb      	b.n	800d3ea <_printf_float+0x2fe>
 800d472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d476:	4631      	mov	r1, r6
 800d478:	4628      	mov	r0, r5
 800d47a:	47b8      	blx	r7
 800d47c:	3001      	adds	r0, #1
 800d47e:	d1c0      	bne.n	800d402 <_printf_float+0x316>
 800d480:	e68f      	b.n	800d1a2 <_printf_float+0xb6>
 800d482:	9a06      	ldr	r2, [sp, #24]
 800d484:	464b      	mov	r3, r9
 800d486:	4442      	add	r2, r8
 800d488:	4631      	mov	r1, r6
 800d48a:	4628      	mov	r0, r5
 800d48c:	47b8      	blx	r7
 800d48e:	3001      	adds	r0, #1
 800d490:	d1c3      	bne.n	800d41a <_printf_float+0x32e>
 800d492:	e686      	b.n	800d1a2 <_printf_float+0xb6>
 800d494:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d498:	f1ba 0f01 	cmp.w	sl, #1
 800d49c:	dc01      	bgt.n	800d4a2 <_printf_float+0x3b6>
 800d49e:	07db      	lsls	r3, r3, #31
 800d4a0:	d536      	bpl.n	800d510 <_printf_float+0x424>
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	4642      	mov	r2, r8
 800d4a6:	4631      	mov	r1, r6
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	47b8      	blx	r7
 800d4ac:	3001      	adds	r0, #1
 800d4ae:	f43f ae78 	beq.w	800d1a2 <_printf_float+0xb6>
 800d4b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4b6:	4631      	mov	r1, r6
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	47b8      	blx	r7
 800d4bc:	3001      	adds	r0, #1
 800d4be:	f43f ae70 	beq.w	800d1a2 <_printf_float+0xb6>
 800d4c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d4ce:	f7f3 fafb 	bl	8000ac8 <__aeabi_dcmpeq>
 800d4d2:	b9c0      	cbnz	r0, 800d506 <_printf_float+0x41a>
 800d4d4:	4653      	mov	r3, sl
 800d4d6:	f108 0201 	add.w	r2, r8, #1
 800d4da:	4631      	mov	r1, r6
 800d4dc:	4628      	mov	r0, r5
 800d4de:	47b8      	blx	r7
 800d4e0:	3001      	adds	r0, #1
 800d4e2:	d10c      	bne.n	800d4fe <_printf_float+0x412>
 800d4e4:	e65d      	b.n	800d1a2 <_printf_float+0xb6>
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	465a      	mov	r2, fp
 800d4ea:	4631      	mov	r1, r6
 800d4ec:	4628      	mov	r0, r5
 800d4ee:	47b8      	blx	r7
 800d4f0:	3001      	adds	r0, #1
 800d4f2:	f43f ae56 	beq.w	800d1a2 <_printf_float+0xb6>
 800d4f6:	f108 0801 	add.w	r8, r8, #1
 800d4fa:	45d0      	cmp	r8, sl
 800d4fc:	dbf3      	blt.n	800d4e6 <_printf_float+0x3fa>
 800d4fe:	464b      	mov	r3, r9
 800d500:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d504:	e6df      	b.n	800d2c6 <_printf_float+0x1da>
 800d506:	f04f 0800 	mov.w	r8, #0
 800d50a:	f104 0b1a 	add.w	fp, r4, #26
 800d50e:	e7f4      	b.n	800d4fa <_printf_float+0x40e>
 800d510:	2301      	movs	r3, #1
 800d512:	4642      	mov	r2, r8
 800d514:	e7e1      	b.n	800d4da <_printf_float+0x3ee>
 800d516:	2301      	movs	r3, #1
 800d518:	464a      	mov	r2, r9
 800d51a:	4631      	mov	r1, r6
 800d51c:	4628      	mov	r0, r5
 800d51e:	47b8      	blx	r7
 800d520:	3001      	adds	r0, #1
 800d522:	f43f ae3e 	beq.w	800d1a2 <_printf_float+0xb6>
 800d526:	f108 0801 	add.w	r8, r8, #1
 800d52a:	68e3      	ldr	r3, [r4, #12]
 800d52c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d52e:	1a5b      	subs	r3, r3, r1
 800d530:	4543      	cmp	r3, r8
 800d532:	dcf0      	bgt.n	800d516 <_printf_float+0x42a>
 800d534:	e6fc      	b.n	800d330 <_printf_float+0x244>
 800d536:	f04f 0800 	mov.w	r8, #0
 800d53a:	f104 0919 	add.w	r9, r4, #25
 800d53e:	e7f4      	b.n	800d52a <_printf_float+0x43e>

0800d540 <_printf_common>:
 800d540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d544:	4616      	mov	r6, r2
 800d546:	4698      	mov	r8, r3
 800d548:	688a      	ldr	r2, [r1, #8]
 800d54a:	690b      	ldr	r3, [r1, #16]
 800d54c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d550:	4293      	cmp	r3, r2
 800d552:	bfb8      	it	lt
 800d554:	4613      	movlt	r3, r2
 800d556:	6033      	str	r3, [r6, #0]
 800d558:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d55c:	4607      	mov	r7, r0
 800d55e:	460c      	mov	r4, r1
 800d560:	b10a      	cbz	r2, 800d566 <_printf_common+0x26>
 800d562:	3301      	adds	r3, #1
 800d564:	6033      	str	r3, [r6, #0]
 800d566:	6823      	ldr	r3, [r4, #0]
 800d568:	0699      	lsls	r1, r3, #26
 800d56a:	bf42      	ittt	mi
 800d56c:	6833      	ldrmi	r3, [r6, #0]
 800d56e:	3302      	addmi	r3, #2
 800d570:	6033      	strmi	r3, [r6, #0]
 800d572:	6825      	ldr	r5, [r4, #0]
 800d574:	f015 0506 	ands.w	r5, r5, #6
 800d578:	d106      	bne.n	800d588 <_printf_common+0x48>
 800d57a:	f104 0a19 	add.w	sl, r4, #25
 800d57e:	68e3      	ldr	r3, [r4, #12]
 800d580:	6832      	ldr	r2, [r6, #0]
 800d582:	1a9b      	subs	r3, r3, r2
 800d584:	42ab      	cmp	r3, r5
 800d586:	dc26      	bgt.n	800d5d6 <_printf_common+0x96>
 800d588:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d58c:	6822      	ldr	r2, [r4, #0]
 800d58e:	3b00      	subs	r3, #0
 800d590:	bf18      	it	ne
 800d592:	2301      	movne	r3, #1
 800d594:	0692      	lsls	r2, r2, #26
 800d596:	d42b      	bmi.n	800d5f0 <_printf_common+0xb0>
 800d598:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d59c:	4641      	mov	r1, r8
 800d59e:	4638      	mov	r0, r7
 800d5a0:	47c8      	blx	r9
 800d5a2:	3001      	adds	r0, #1
 800d5a4:	d01e      	beq.n	800d5e4 <_printf_common+0xa4>
 800d5a6:	6823      	ldr	r3, [r4, #0]
 800d5a8:	6922      	ldr	r2, [r4, #16]
 800d5aa:	f003 0306 	and.w	r3, r3, #6
 800d5ae:	2b04      	cmp	r3, #4
 800d5b0:	bf02      	ittt	eq
 800d5b2:	68e5      	ldreq	r5, [r4, #12]
 800d5b4:	6833      	ldreq	r3, [r6, #0]
 800d5b6:	1aed      	subeq	r5, r5, r3
 800d5b8:	68a3      	ldr	r3, [r4, #8]
 800d5ba:	bf0c      	ite	eq
 800d5bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5c0:	2500      	movne	r5, #0
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	bfc4      	itt	gt
 800d5c6:	1a9b      	subgt	r3, r3, r2
 800d5c8:	18ed      	addgt	r5, r5, r3
 800d5ca:	2600      	movs	r6, #0
 800d5cc:	341a      	adds	r4, #26
 800d5ce:	42b5      	cmp	r5, r6
 800d5d0:	d11a      	bne.n	800d608 <_printf_common+0xc8>
 800d5d2:	2000      	movs	r0, #0
 800d5d4:	e008      	b.n	800d5e8 <_printf_common+0xa8>
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	4652      	mov	r2, sl
 800d5da:	4641      	mov	r1, r8
 800d5dc:	4638      	mov	r0, r7
 800d5de:	47c8      	blx	r9
 800d5e0:	3001      	adds	r0, #1
 800d5e2:	d103      	bne.n	800d5ec <_printf_common+0xac>
 800d5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5ec:	3501      	adds	r5, #1
 800d5ee:	e7c6      	b.n	800d57e <_printf_common+0x3e>
 800d5f0:	18e1      	adds	r1, r4, r3
 800d5f2:	1c5a      	adds	r2, r3, #1
 800d5f4:	2030      	movs	r0, #48	@ 0x30
 800d5f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d5fa:	4422      	add	r2, r4
 800d5fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d600:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d604:	3302      	adds	r3, #2
 800d606:	e7c7      	b.n	800d598 <_printf_common+0x58>
 800d608:	2301      	movs	r3, #1
 800d60a:	4622      	mov	r2, r4
 800d60c:	4641      	mov	r1, r8
 800d60e:	4638      	mov	r0, r7
 800d610:	47c8      	blx	r9
 800d612:	3001      	adds	r0, #1
 800d614:	d0e6      	beq.n	800d5e4 <_printf_common+0xa4>
 800d616:	3601      	adds	r6, #1
 800d618:	e7d9      	b.n	800d5ce <_printf_common+0x8e>
	...

0800d61c <_printf_i>:
 800d61c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d620:	7e0f      	ldrb	r7, [r1, #24]
 800d622:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d624:	2f78      	cmp	r7, #120	@ 0x78
 800d626:	4691      	mov	r9, r2
 800d628:	4680      	mov	r8, r0
 800d62a:	460c      	mov	r4, r1
 800d62c:	469a      	mov	sl, r3
 800d62e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d632:	d807      	bhi.n	800d644 <_printf_i+0x28>
 800d634:	2f62      	cmp	r7, #98	@ 0x62
 800d636:	d80a      	bhi.n	800d64e <_printf_i+0x32>
 800d638:	2f00      	cmp	r7, #0
 800d63a:	f000 80d2 	beq.w	800d7e2 <_printf_i+0x1c6>
 800d63e:	2f58      	cmp	r7, #88	@ 0x58
 800d640:	f000 80b9 	beq.w	800d7b6 <_printf_i+0x19a>
 800d644:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d648:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d64c:	e03a      	b.n	800d6c4 <_printf_i+0xa8>
 800d64e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d652:	2b15      	cmp	r3, #21
 800d654:	d8f6      	bhi.n	800d644 <_printf_i+0x28>
 800d656:	a101      	add	r1, pc, #4	@ (adr r1, 800d65c <_printf_i+0x40>)
 800d658:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d65c:	0800d6b5 	.word	0x0800d6b5
 800d660:	0800d6c9 	.word	0x0800d6c9
 800d664:	0800d645 	.word	0x0800d645
 800d668:	0800d645 	.word	0x0800d645
 800d66c:	0800d645 	.word	0x0800d645
 800d670:	0800d645 	.word	0x0800d645
 800d674:	0800d6c9 	.word	0x0800d6c9
 800d678:	0800d645 	.word	0x0800d645
 800d67c:	0800d645 	.word	0x0800d645
 800d680:	0800d645 	.word	0x0800d645
 800d684:	0800d645 	.word	0x0800d645
 800d688:	0800d7c9 	.word	0x0800d7c9
 800d68c:	0800d6f3 	.word	0x0800d6f3
 800d690:	0800d783 	.word	0x0800d783
 800d694:	0800d645 	.word	0x0800d645
 800d698:	0800d645 	.word	0x0800d645
 800d69c:	0800d7eb 	.word	0x0800d7eb
 800d6a0:	0800d645 	.word	0x0800d645
 800d6a4:	0800d6f3 	.word	0x0800d6f3
 800d6a8:	0800d645 	.word	0x0800d645
 800d6ac:	0800d645 	.word	0x0800d645
 800d6b0:	0800d78b 	.word	0x0800d78b
 800d6b4:	6833      	ldr	r3, [r6, #0]
 800d6b6:	1d1a      	adds	r2, r3, #4
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	6032      	str	r2, [r6, #0]
 800d6bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d6c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	e09d      	b.n	800d804 <_printf_i+0x1e8>
 800d6c8:	6833      	ldr	r3, [r6, #0]
 800d6ca:	6820      	ldr	r0, [r4, #0]
 800d6cc:	1d19      	adds	r1, r3, #4
 800d6ce:	6031      	str	r1, [r6, #0]
 800d6d0:	0606      	lsls	r6, r0, #24
 800d6d2:	d501      	bpl.n	800d6d8 <_printf_i+0xbc>
 800d6d4:	681d      	ldr	r5, [r3, #0]
 800d6d6:	e003      	b.n	800d6e0 <_printf_i+0xc4>
 800d6d8:	0645      	lsls	r5, r0, #25
 800d6da:	d5fb      	bpl.n	800d6d4 <_printf_i+0xb8>
 800d6dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d6e0:	2d00      	cmp	r5, #0
 800d6e2:	da03      	bge.n	800d6ec <_printf_i+0xd0>
 800d6e4:	232d      	movs	r3, #45	@ 0x2d
 800d6e6:	426d      	negs	r5, r5
 800d6e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6ec:	4859      	ldr	r0, [pc, #356]	@ (800d854 <_printf_i+0x238>)
 800d6ee:	230a      	movs	r3, #10
 800d6f0:	e011      	b.n	800d716 <_printf_i+0xfa>
 800d6f2:	6821      	ldr	r1, [r4, #0]
 800d6f4:	6833      	ldr	r3, [r6, #0]
 800d6f6:	0608      	lsls	r0, r1, #24
 800d6f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800d6fc:	d402      	bmi.n	800d704 <_printf_i+0xe8>
 800d6fe:	0649      	lsls	r1, r1, #25
 800d700:	bf48      	it	mi
 800d702:	b2ad      	uxthmi	r5, r5
 800d704:	2f6f      	cmp	r7, #111	@ 0x6f
 800d706:	4853      	ldr	r0, [pc, #332]	@ (800d854 <_printf_i+0x238>)
 800d708:	6033      	str	r3, [r6, #0]
 800d70a:	bf14      	ite	ne
 800d70c:	230a      	movne	r3, #10
 800d70e:	2308      	moveq	r3, #8
 800d710:	2100      	movs	r1, #0
 800d712:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d716:	6866      	ldr	r6, [r4, #4]
 800d718:	60a6      	str	r6, [r4, #8]
 800d71a:	2e00      	cmp	r6, #0
 800d71c:	bfa2      	ittt	ge
 800d71e:	6821      	ldrge	r1, [r4, #0]
 800d720:	f021 0104 	bicge.w	r1, r1, #4
 800d724:	6021      	strge	r1, [r4, #0]
 800d726:	b90d      	cbnz	r5, 800d72c <_printf_i+0x110>
 800d728:	2e00      	cmp	r6, #0
 800d72a:	d04b      	beq.n	800d7c4 <_printf_i+0x1a8>
 800d72c:	4616      	mov	r6, r2
 800d72e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d732:	fb03 5711 	mls	r7, r3, r1, r5
 800d736:	5dc7      	ldrb	r7, [r0, r7]
 800d738:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d73c:	462f      	mov	r7, r5
 800d73e:	42bb      	cmp	r3, r7
 800d740:	460d      	mov	r5, r1
 800d742:	d9f4      	bls.n	800d72e <_printf_i+0x112>
 800d744:	2b08      	cmp	r3, #8
 800d746:	d10b      	bne.n	800d760 <_printf_i+0x144>
 800d748:	6823      	ldr	r3, [r4, #0]
 800d74a:	07df      	lsls	r7, r3, #31
 800d74c:	d508      	bpl.n	800d760 <_printf_i+0x144>
 800d74e:	6923      	ldr	r3, [r4, #16]
 800d750:	6861      	ldr	r1, [r4, #4]
 800d752:	4299      	cmp	r1, r3
 800d754:	bfde      	ittt	le
 800d756:	2330      	movle	r3, #48	@ 0x30
 800d758:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d75c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d760:	1b92      	subs	r2, r2, r6
 800d762:	6122      	str	r2, [r4, #16]
 800d764:	f8cd a000 	str.w	sl, [sp]
 800d768:	464b      	mov	r3, r9
 800d76a:	aa03      	add	r2, sp, #12
 800d76c:	4621      	mov	r1, r4
 800d76e:	4640      	mov	r0, r8
 800d770:	f7ff fee6 	bl	800d540 <_printf_common>
 800d774:	3001      	adds	r0, #1
 800d776:	d14a      	bne.n	800d80e <_printf_i+0x1f2>
 800d778:	f04f 30ff 	mov.w	r0, #4294967295
 800d77c:	b004      	add	sp, #16
 800d77e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d782:	6823      	ldr	r3, [r4, #0]
 800d784:	f043 0320 	orr.w	r3, r3, #32
 800d788:	6023      	str	r3, [r4, #0]
 800d78a:	4833      	ldr	r0, [pc, #204]	@ (800d858 <_printf_i+0x23c>)
 800d78c:	2778      	movs	r7, #120	@ 0x78
 800d78e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d792:	6823      	ldr	r3, [r4, #0]
 800d794:	6831      	ldr	r1, [r6, #0]
 800d796:	061f      	lsls	r7, r3, #24
 800d798:	f851 5b04 	ldr.w	r5, [r1], #4
 800d79c:	d402      	bmi.n	800d7a4 <_printf_i+0x188>
 800d79e:	065f      	lsls	r7, r3, #25
 800d7a0:	bf48      	it	mi
 800d7a2:	b2ad      	uxthmi	r5, r5
 800d7a4:	6031      	str	r1, [r6, #0]
 800d7a6:	07d9      	lsls	r1, r3, #31
 800d7a8:	bf44      	itt	mi
 800d7aa:	f043 0320 	orrmi.w	r3, r3, #32
 800d7ae:	6023      	strmi	r3, [r4, #0]
 800d7b0:	b11d      	cbz	r5, 800d7ba <_printf_i+0x19e>
 800d7b2:	2310      	movs	r3, #16
 800d7b4:	e7ac      	b.n	800d710 <_printf_i+0xf4>
 800d7b6:	4827      	ldr	r0, [pc, #156]	@ (800d854 <_printf_i+0x238>)
 800d7b8:	e7e9      	b.n	800d78e <_printf_i+0x172>
 800d7ba:	6823      	ldr	r3, [r4, #0]
 800d7bc:	f023 0320 	bic.w	r3, r3, #32
 800d7c0:	6023      	str	r3, [r4, #0]
 800d7c2:	e7f6      	b.n	800d7b2 <_printf_i+0x196>
 800d7c4:	4616      	mov	r6, r2
 800d7c6:	e7bd      	b.n	800d744 <_printf_i+0x128>
 800d7c8:	6833      	ldr	r3, [r6, #0]
 800d7ca:	6825      	ldr	r5, [r4, #0]
 800d7cc:	6961      	ldr	r1, [r4, #20]
 800d7ce:	1d18      	adds	r0, r3, #4
 800d7d0:	6030      	str	r0, [r6, #0]
 800d7d2:	062e      	lsls	r6, r5, #24
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	d501      	bpl.n	800d7dc <_printf_i+0x1c0>
 800d7d8:	6019      	str	r1, [r3, #0]
 800d7da:	e002      	b.n	800d7e2 <_printf_i+0x1c6>
 800d7dc:	0668      	lsls	r0, r5, #25
 800d7de:	d5fb      	bpl.n	800d7d8 <_printf_i+0x1bc>
 800d7e0:	8019      	strh	r1, [r3, #0]
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	6123      	str	r3, [r4, #16]
 800d7e6:	4616      	mov	r6, r2
 800d7e8:	e7bc      	b.n	800d764 <_printf_i+0x148>
 800d7ea:	6833      	ldr	r3, [r6, #0]
 800d7ec:	1d1a      	adds	r2, r3, #4
 800d7ee:	6032      	str	r2, [r6, #0]
 800d7f0:	681e      	ldr	r6, [r3, #0]
 800d7f2:	6862      	ldr	r2, [r4, #4]
 800d7f4:	2100      	movs	r1, #0
 800d7f6:	4630      	mov	r0, r6
 800d7f8:	f7f2 fcea 	bl	80001d0 <memchr>
 800d7fc:	b108      	cbz	r0, 800d802 <_printf_i+0x1e6>
 800d7fe:	1b80      	subs	r0, r0, r6
 800d800:	6060      	str	r0, [r4, #4]
 800d802:	6863      	ldr	r3, [r4, #4]
 800d804:	6123      	str	r3, [r4, #16]
 800d806:	2300      	movs	r3, #0
 800d808:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d80c:	e7aa      	b.n	800d764 <_printf_i+0x148>
 800d80e:	6923      	ldr	r3, [r4, #16]
 800d810:	4632      	mov	r2, r6
 800d812:	4649      	mov	r1, r9
 800d814:	4640      	mov	r0, r8
 800d816:	47d0      	blx	sl
 800d818:	3001      	adds	r0, #1
 800d81a:	d0ad      	beq.n	800d778 <_printf_i+0x15c>
 800d81c:	6823      	ldr	r3, [r4, #0]
 800d81e:	079b      	lsls	r3, r3, #30
 800d820:	d413      	bmi.n	800d84a <_printf_i+0x22e>
 800d822:	68e0      	ldr	r0, [r4, #12]
 800d824:	9b03      	ldr	r3, [sp, #12]
 800d826:	4298      	cmp	r0, r3
 800d828:	bfb8      	it	lt
 800d82a:	4618      	movlt	r0, r3
 800d82c:	e7a6      	b.n	800d77c <_printf_i+0x160>
 800d82e:	2301      	movs	r3, #1
 800d830:	4632      	mov	r2, r6
 800d832:	4649      	mov	r1, r9
 800d834:	4640      	mov	r0, r8
 800d836:	47d0      	blx	sl
 800d838:	3001      	adds	r0, #1
 800d83a:	d09d      	beq.n	800d778 <_printf_i+0x15c>
 800d83c:	3501      	adds	r5, #1
 800d83e:	68e3      	ldr	r3, [r4, #12]
 800d840:	9903      	ldr	r1, [sp, #12]
 800d842:	1a5b      	subs	r3, r3, r1
 800d844:	42ab      	cmp	r3, r5
 800d846:	dcf2      	bgt.n	800d82e <_printf_i+0x212>
 800d848:	e7eb      	b.n	800d822 <_printf_i+0x206>
 800d84a:	2500      	movs	r5, #0
 800d84c:	f104 0619 	add.w	r6, r4, #25
 800d850:	e7f5      	b.n	800d83e <_printf_i+0x222>
 800d852:	bf00      	nop
 800d854:	08010f5f 	.word	0x08010f5f
 800d858:	08010f70 	.word	0x08010f70

0800d85c <std>:
 800d85c:	2300      	movs	r3, #0
 800d85e:	b510      	push	{r4, lr}
 800d860:	4604      	mov	r4, r0
 800d862:	e9c0 3300 	strd	r3, r3, [r0]
 800d866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d86a:	6083      	str	r3, [r0, #8]
 800d86c:	8181      	strh	r1, [r0, #12]
 800d86e:	6643      	str	r3, [r0, #100]	@ 0x64
 800d870:	81c2      	strh	r2, [r0, #14]
 800d872:	6183      	str	r3, [r0, #24]
 800d874:	4619      	mov	r1, r3
 800d876:	2208      	movs	r2, #8
 800d878:	305c      	adds	r0, #92	@ 0x5c
 800d87a:	f000 f928 	bl	800dace <memset>
 800d87e:	4b0d      	ldr	r3, [pc, #52]	@ (800d8b4 <std+0x58>)
 800d880:	6263      	str	r3, [r4, #36]	@ 0x24
 800d882:	4b0d      	ldr	r3, [pc, #52]	@ (800d8b8 <std+0x5c>)
 800d884:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d886:	4b0d      	ldr	r3, [pc, #52]	@ (800d8bc <std+0x60>)
 800d888:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d88a:	4b0d      	ldr	r3, [pc, #52]	@ (800d8c0 <std+0x64>)
 800d88c:	6323      	str	r3, [r4, #48]	@ 0x30
 800d88e:	4b0d      	ldr	r3, [pc, #52]	@ (800d8c4 <std+0x68>)
 800d890:	6224      	str	r4, [r4, #32]
 800d892:	429c      	cmp	r4, r3
 800d894:	d006      	beq.n	800d8a4 <std+0x48>
 800d896:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d89a:	4294      	cmp	r4, r2
 800d89c:	d002      	beq.n	800d8a4 <std+0x48>
 800d89e:	33d0      	adds	r3, #208	@ 0xd0
 800d8a0:	429c      	cmp	r4, r3
 800d8a2:	d105      	bne.n	800d8b0 <std+0x54>
 800d8a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d8a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8ac:	f000 b9b0 	b.w	800dc10 <__retarget_lock_init_recursive>
 800d8b0:	bd10      	pop	{r4, pc}
 800d8b2:	bf00      	nop
 800d8b4:	0800da49 	.word	0x0800da49
 800d8b8:	0800da6b 	.word	0x0800da6b
 800d8bc:	0800daa3 	.word	0x0800daa3
 800d8c0:	0800dac7 	.word	0x0800dac7
 800d8c4:	20005354 	.word	0x20005354

0800d8c8 <stdio_exit_handler>:
 800d8c8:	4a02      	ldr	r2, [pc, #8]	@ (800d8d4 <stdio_exit_handler+0xc>)
 800d8ca:	4903      	ldr	r1, [pc, #12]	@ (800d8d8 <stdio_exit_handler+0x10>)
 800d8cc:	4803      	ldr	r0, [pc, #12]	@ (800d8dc <stdio_exit_handler+0x14>)
 800d8ce:	f000 b869 	b.w	800d9a4 <_fwalk_sglue>
 800d8d2:	bf00      	nop
 800d8d4:	20000034 	.word	0x20000034
 800d8d8:	0800f58d 	.word	0x0800f58d
 800d8dc:	20000044 	.word	0x20000044

0800d8e0 <cleanup_stdio>:
 800d8e0:	6841      	ldr	r1, [r0, #4]
 800d8e2:	4b0c      	ldr	r3, [pc, #48]	@ (800d914 <cleanup_stdio+0x34>)
 800d8e4:	4299      	cmp	r1, r3
 800d8e6:	b510      	push	{r4, lr}
 800d8e8:	4604      	mov	r4, r0
 800d8ea:	d001      	beq.n	800d8f0 <cleanup_stdio+0x10>
 800d8ec:	f001 fe4e 	bl	800f58c <_fflush_r>
 800d8f0:	68a1      	ldr	r1, [r4, #8]
 800d8f2:	4b09      	ldr	r3, [pc, #36]	@ (800d918 <cleanup_stdio+0x38>)
 800d8f4:	4299      	cmp	r1, r3
 800d8f6:	d002      	beq.n	800d8fe <cleanup_stdio+0x1e>
 800d8f8:	4620      	mov	r0, r4
 800d8fa:	f001 fe47 	bl	800f58c <_fflush_r>
 800d8fe:	68e1      	ldr	r1, [r4, #12]
 800d900:	4b06      	ldr	r3, [pc, #24]	@ (800d91c <cleanup_stdio+0x3c>)
 800d902:	4299      	cmp	r1, r3
 800d904:	d004      	beq.n	800d910 <cleanup_stdio+0x30>
 800d906:	4620      	mov	r0, r4
 800d908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d90c:	f001 be3e 	b.w	800f58c <_fflush_r>
 800d910:	bd10      	pop	{r4, pc}
 800d912:	bf00      	nop
 800d914:	20005354 	.word	0x20005354
 800d918:	200053bc 	.word	0x200053bc
 800d91c:	20005424 	.word	0x20005424

0800d920 <global_stdio_init.part.0>:
 800d920:	b510      	push	{r4, lr}
 800d922:	4b0b      	ldr	r3, [pc, #44]	@ (800d950 <global_stdio_init.part.0+0x30>)
 800d924:	4c0b      	ldr	r4, [pc, #44]	@ (800d954 <global_stdio_init.part.0+0x34>)
 800d926:	4a0c      	ldr	r2, [pc, #48]	@ (800d958 <global_stdio_init.part.0+0x38>)
 800d928:	601a      	str	r2, [r3, #0]
 800d92a:	4620      	mov	r0, r4
 800d92c:	2200      	movs	r2, #0
 800d92e:	2104      	movs	r1, #4
 800d930:	f7ff ff94 	bl	800d85c <std>
 800d934:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d938:	2201      	movs	r2, #1
 800d93a:	2109      	movs	r1, #9
 800d93c:	f7ff ff8e 	bl	800d85c <std>
 800d940:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d944:	2202      	movs	r2, #2
 800d946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d94a:	2112      	movs	r1, #18
 800d94c:	f7ff bf86 	b.w	800d85c <std>
 800d950:	2000548c 	.word	0x2000548c
 800d954:	20005354 	.word	0x20005354
 800d958:	0800d8c9 	.word	0x0800d8c9

0800d95c <__sfp_lock_acquire>:
 800d95c:	4801      	ldr	r0, [pc, #4]	@ (800d964 <__sfp_lock_acquire+0x8>)
 800d95e:	f000 b958 	b.w	800dc12 <__retarget_lock_acquire_recursive>
 800d962:	bf00      	nop
 800d964:	20005495 	.word	0x20005495

0800d968 <__sfp_lock_release>:
 800d968:	4801      	ldr	r0, [pc, #4]	@ (800d970 <__sfp_lock_release+0x8>)
 800d96a:	f000 b953 	b.w	800dc14 <__retarget_lock_release_recursive>
 800d96e:	bf00      	nop
 800d970:	20005495 	.word	0x20005495

0800d974 <__sinit>:
 800d974:	b510      	push	{r4, lr}
 800d976:	4604      	mov	r4, r0
 800d978:	f7ff fff0 	bl	800d95c <__sfp_lock_acquire>
 800d97c:	6a23      	ldr	r3, [r4, #32]
 800d97e:	b11b      	cbz	r3, 800d988 <__sinit+0x14>
 800d980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d984:	f7ff bff0 	b.w	800d968 <__sfp_lock_release>
 800d988:	4b04      	ldr	r3, [pc, #16]	@ (800d99c <__sinit+0x28>)
 800d98a:	6223      	str	r3, [r4, #32]
 800d98c:	4b04      	ldr	r3, [pc, #16]	@ (800d9a0 <__sinit+0x2c>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d1f5      	bne.n	800d980 <__sinit+0xc>
 800d994:	f7ff ffc4 	bl	800d920 <global_stdio_init.part.0>
 800d998:	e7f2      	b.n	800d980 <__sinit+0xc>
 800d99a:	bf00      	nop
 800d99c:	0800d8e1 	.word	0x0800d8e1
 800d9a0:	2000548c 	.word	0x2000548c

0800d9a4 <_fwalk_sglue>:
 800d9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9a8:	4607      	mov	r7, r0
 800d9aa:	4688      	mov	r8, r1
 800d9ac:	4614      	mov	r4, r2
 800d9ae:	2600      	movs	r6, #0
 800d9b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d9b4:	f1b9 0901 	subs.w	r9, r9, #1
 800d9b8:	d505      	bpl.n	800d9c6 <_fwalk_sglue+0x22>
 800d9ba:	6824      	ldr	r4, [r4, #0]
 800d9bc:	2c00      	cmp	r4, #0
 800d9be:	d1f7      	bne.n	800d9b0 <_fwalk_sglue+0xc>
 800d9c0:	4630      	mov	r0, r6
 800d9c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9c6:	89ab      	ldrh	r3, [r5, #12]
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d907      	bls.n	800d9dc <_fwalk_sglue+0x38>
 800d9cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	d003      	beq.n	800d9dc <_fwalk_sglue+0x38>
 800d9d4:	4629      	mov	r1, r5
 800d9d6:	4638      	mov	r0, r7
 800d9d8:	47c0      	blx	r8
 800d9da:	4306      	orrs	r6, r0
 800d9dc:	3568      	adds	r5, #104	@ 0x68
 800d9de:	e7e9      	b.n	800d9b4 <_fwalk_sglue+0x10>

0800d9e0 <sniprintf>:
 800d9e0:	b40c      	push	{r2, r3}
 800d9e2:	b530      	push	{r4, r5, lr}
 800d9e4:	4b17      	ldr	r3, [pc, #92]	@ (800da44 <sniprintf+0x64>)
 800d9e6:	1e0c      	subs	r4, r1, #0
 800d9e8:	681d      	ldr	r5, [r3, #0]
 800d9ea:	b09d      	sub	sp, #116	@ 0x74
 800d9ec:	da08      	bge.n	800da00 <sniprintf+0x20>
 800d9ee:	238b      	movs	r3, #139	@ 0x8b
 800d9f0:	602b      	str	r3, [r5, #0]
 800d9f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d9f6:	b01d      	add	sp, #116	@ 0x74
 800d9f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d9fc:	b002      	add	sp, #8
 800d9fe:	4770      	bx	lr
 800da00:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800da04:	f8ad 3014 	strh.w	r3, [sp, #20]
 800da08:	bf14      	ite	ne
 800da0a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800da0e:	4623      	moveq	r3, r4
 800da10:	9304      	str	r3, [sp, #16]
 800da12:	9307      	str	r3, [sp, #28]
 800da14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800da18:	9002      	str	r0, [sp, #8]
 800da1a:	9006      	str	r0, [sp, #24]
 800da1c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800da20:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800da22:	ab21      	add	r3, sp, #132	@ 0x84
 800da24:	a902      	add	r1, sp, #8
 800da26:	4628      	mov	r0, r5
 800da28:	9301      	str	r3, [sp, #4]
 800da2a:	f001 fc2f 	bl	800f28c <_svfiprintf_r>
 800da2e:	1c43      	adds	r3, r0, #1
 800da30:	bfbc      	itt	lt
 800da32:	238b      	movlt	r3, #139	@ 0x8b
 800da34:	602b      	strlt	r3, [r5, #0]
 800da36:	2c00      	cmp	r4, #0
 800da38:	d0dd      	beq.n	800d9f6 <sniprintf+0x16>
 800da3a:	9b02      	ldr	r3, [sp, #8]
 800da3c:	2200      	movs	r2, #0
 800da3e:	701a      	strb	r2, [r3, #0]
 800da40:	e7d9      	b.n	800d9f6 <sniprintf+0x16>
 800da42:	bf00      	nop
 800da44:	20000040 	.word	0x20000040

0800da48 <__sread>:
 800da48:	b510      	push	{r4, lr}
 800da4a:	460c      	mov	r4, r1
 800da4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da50:	f000 f890 	bl	800db74 <_read_r>
 800da54:	2800      	cmp	r0, #0
 800da56:	bfab      	itete	ge
 800da58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800da5a:	89a3      	ldrhlt	r3, [r4, #12]
 800da5c:	181b      	addge	r3, r3, r0
 800da5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800da62:	bfac      	ite	ge
 800da64:	6563      	strge	r3, [r4, #84]	@ 0x54
 800da66:	81a3      	strhlt	r3, [r4, #12]
 800da68:	bd10      	pop	{r4, pc}

0800da6a <__swrite>:
 800da6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da6e:	461f      	mov	r7, r3
 800da70:	898b      	ldrh	r3, [r1, #12]
 800da72:	05db      	lsls	r3, r3, #23
 800da74:	4605      	mov	r5, r0
 800da76:	460c      	mov	r4, r1
 800da78:	4616      	mov	r6, r2
 800da7a:	d505      	bpl.n	800da88 <__swrite+0x1e>
 800da7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da80:	2302      	movs	r3, #2
 800da82:	2200      	movs	r2, #0
 800da84:	f000 f864 	bl	800db50 <_lseek_r>
 800da88:	89a3      	ldrh	r3, [r4, #12]
 800da8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800da92:	81a3      	strh	r3, [r4, #12]
 800da94:	4632      	mov	r2, r6
 800da96:	463b      	mov	r3, r7
 800da98:	4628      	mov	r0, r5
 800da9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da9e:	f000 b87b 	b.w	800db98 <_write_r>

0800daa2 <__sseek>:
 800daa2:	b510      	push	{r4, lr}
 800daa4:	460c      	mov	r4, r1
 800daa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daaa:	f000 f851 	bl	800db50 <_lseek_r>
 800daae:	1c43      	adds	r3, r0, #1
 800dab0:	89a3      	ldrh	r3, [r4, #12]
 800dab2:	bf15      	itete	ne
 800dab4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dab6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800daba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dabe:	81a3      	strheq	r3, [r4, #12]
 800dac0:	bf18      	it	ne
 800dac2:	81a3      	strhne	r3, [r4, #12]
 800dac4:	bd10      	pop	{r4, pc}

0800dac6 <__sclose>:
 800dac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daca:	f000 b831 	b.w	800db30 <_close_r>

0800dace <memset>:
 800dace:	4402      	add	r2, r0
 800dad0:	4603      	mov	r3, r0
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d100      	bne.n	800dad8 <memset+0xa>
 800dad6:	4770      	bx	lr
 800dad8:	f803 1b01 	strb.w	r1, [r3], #1
 800dadc:	e7f9      	b.n	800dad2 <memset+0x4>

0800dade <strncmp>:
 800dade:	b510      	push	{r4, lr}
 800dae0:	b16a      	cbz	r2, 800dafe <strncmp+0x20>
 800dae2:	3901      	subs	r1, #1
 800dae4:	1884      	adds	r4, r0, r2
 800dae6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800daea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800daee:	429a      	cmp	r2, r3
 800daf0:	d103      	bne.n	800dafa <strncmp+0x1c>
 800daf2:	42a0      	cmp	r0, r4
 800daf4:	d001      	beq.n	800dafa <strncmp+0x1c>
 800daf6:	2a00      	cmp	r2, #0
 800daf8:	d1f5      	bne.n	800dae6 <strncmp+0x8>
 800dafa:	1ad0      	subs	r0, r2, r3
 800dafc:	bd10      	pop	{r4, pc}
 800dafe:	4610      	mov	r0, r2
 800db00:	e7fc      	b.n	800dafc <strncmp+0x1e>

0800db02 <strncpy>:
 800db02:	b510      	push	{r4, lr}
 800db04:	3901      	subs	r1, #1
 800db06:	4603      	mov	r3, r0
 800db08:	b132      	cbz	r2, 800db18 <strncpy+0x16>
 800db0a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800db0e:	f803 4b01 	strb.w	r4, [r3], #1
 800db12:	3a01      	subs	r2, #1
 800db14:	2c00      	cmp	r4, #0
 800db16:	d1f7      	bne.n	800db08 <strncpy+0x6>
 800db18:	441a      	add	r2, r3
 800db1a:	2100      	movs	r1, #0
 800db1c:	4293      	cmp	r3, r2
 800db1e:	d100      	bne.n	800db22 <strncpy+0x20>
 800db20:	bd10      	pop	{r4, pc}
 800db22:	f803 1b01 	strb.w	r1, [r3], #1
 800db26:	e7f9      	b.n	800db1c <strncpy+0x1a>

0800db28 <_localeconv_r>:
 800db28:	4800      	ldr	r0, [pc, #0]	@ (800db2c <_localeconv_r+0x4>)
 800db2a:	4770      	bx	lr
 800db2c:	20000180 	.word	0x20000180

0800db30 <_close_r>:
 800db30:	b538      	push	{r3, r4, r5, lr}
 800db32:	4d06      	ldr	r5, [pc, #24]	@ (800db4c <_close_r+0x1c>)
 800db34:	2300      	movs	r3, #0
 800db36:	4604      	mov	r4, r0
 800db38:	4608      	mov	r0, r1
 800db3a:	602b      	str	r3, [r5, #0]
 800db3c:	f7f6 fa4c 	bl	8003fd8 <_close>
 800db40:	1c43      	adds	r3, r0, #1
 800db42:	d102      	bne.n	800db4a <_close_r+0x1a>
 800db44:	682b      	ldr	r3, [r5, #0]
 800db46:	b103      	cbz	r3, 800db4a <_close_r+0x1a>
 800db48:	6023      	str	r3, [r4, #0]
 800db4a:	bd38      	pop	{r3, r4, r5, pc}
 800db4c:	20005490 	.word	0x20005490

0800db50 <_lseek_r>:
 800db50:	b538      	push	{r3, r4, r5, lr}
 800db52:	4d07      	ldr	r5, [pc, #28]	@ (800db70 <_lseek_r+0x20>)
 800db54:	4604      	mov	r4, r0
 800db56:	4608      	mov	r0, r1
 800db58:	4611      	mov	r1, r2
 800db5a:	2200      	movs	r2, #0
 800db5c:	602a      	str	r2, [r5, #0]
 800db5e:	461a      	mov	r2, r3
 800db60:	f7f6 fa61 	bl	8004026 <_lseek>
 800db64:	1c43      	adds	r3, r0, #1
 800db66:	d102      	bne.n	800db6e <_lseek_r+0x1e>
 800db68:	682b      	ldr	r3, [r5, #0]
 800db6a:	b103      	cbz	r3, 800db6e <_lseek_r+0x1e>
 800db6c:	6023      	str	r3, [r4, #0]
 800db6e:	bd38      	pop	{r3, r4, r5, pc}
 800db70:	20005490 	.word	0x20005490

0800db74 <_read_r>:
 800db74:	b538      	push	{r3, r4, r5, lr}
 800db76:	4d07      	ldr	r5, [pc, #28]	@ (800db94 <_read_r+0x20>)
 800db78:	4604      	mov	r4, r0
 800db7a:	4608      	mov	r0, r1
 800db7c:	4611      	mov	r1, r2
 800db7e:	2200      	movs	r2, #0
 800db80:	602a      	str	r2, [r5, #0]
 800db82:	461a      	mov	r2, r3
 800db84:	f7f6 f9ef 	bl	8003f66 <_read>
 800db88:	1c43      	adds	r3, r0, #1
 800db8a:	d102      	bne.n	800db92 <_read_r+0x1e>
 800db8c:	682b      	ldr	r3, [r5, #0]
 800db8e:	b103      	cbz	r3, 800db92 <_read_r+0x1e>
 800db90:	6023      	str	r3, [r4, #0]
 800db92:	bd38      	pop	{r3, r4, r5, pc}
 800db94:	20005490 	.word	0x20005490

0800db98 <_write_r>:
 800db98:	b538      	push	{r3, r4, r5, lr}
 800db9a:	4d07      	ldr	r5, [pc, #28]	@ (800dbb8 <_write_r+0x20>)
 800db9c:	4604      	mov	r4, r0
 800db9e:	4608      	mov	r0, r1
 800dba0:	4611      	mov	r1, r2
 800dba2:	2200      	movs	r2, #0
 800dba4:	602a      	str	r2, [r5, #0]
 800dba6:	461a      	mov	r2, r3
 800dba8:	f7f6 f9fa 	bl	8003fa0 <_write>
 800dbac:	1c43      	adds	r3, r0, #1
 800dbae:	d102      	bne.n	800dbb6 <_write_r+0x1e>
 800dbb0:	682b      	ldr	r3, [r5, #0]
 800dbb2:	b103      	cbz	r3, 800dbb6 <_write_r+0x1e>
 800dbb4:	6023      	str	r3, [r4, #0]
 800dbb6:	bd38      	pop	{r3, r4, r5, pc}
 800dbb8:	20005490 	.word	0x20005490

0800dbbc <__errno>:
 800dbbc:	4b01      	ldr	r3, [pc, #4]	@ (800dbc4 <__errno+0x8>)
 800dbbe:	6818      	ldr	r0, [r3, #0]
 800dbc0:	4770      	bx	lr
 800dbc2:	bf00      	nop
 800dbc4:	20000040 	.word	0x20000040

0800dbc8 <__libc_init_array>:
 800dbc8:	b570      	push	{r4, r5, r6, lr}
 800dbca:	4d0d      	ldr	r5, [pc, #52]	@ (800dc00 <__libc_init_array+0x38>)
 800dbcc:	4c0d      	ldr	r4, [pc, #52]	@ (800dc04 <__libc_init_array+0x3c>)
 800dbce:	1b64      	subs	r4, r4, r5
 800dbd0:	10a4      	asrs	r4, r4, #2
 800dbd2:	2600      	movs	r6, #0
 800dbd4:	42a6      	cmp	r6, r4
 800dbd6:	d109      	bne.n	800dbec <__libc_init_array+0x24>
 800dbd8:	4d0b      	ldr	r5, [pc, #44]	@ (800dc08 <__libc_init_array+0x40>)
 800dbda:	4c0c      	ldr	r4, [pc, #48]	@ (800dc0c <__libc_init_array+0x44>)
 800dbdc:	f002 fad0 	bl	8010180 <_init>
 800dbe0:	1b64      	subs	r4, r4, r5
 800dbe2:	10a4      	asrs	r4, r4, #2
 800dbe4:	2600      	movs	r6, #0
 800dbe6:	42a6      	cmp	r6, r4
 800dbe8:	d105      	bne.n	800dbf6 <__libc_init_array+0x2e>
 800dbea:	bd70      	pop	{r4, r5, r6, pc}
 800dbec:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbf0:	4798      	blx	r3
 800dbf2:	3601      	adds	r6, #1
 800dbf4:	e7ee      	b.n	800dbd4 <__libc_init_array+0xc>
 800dbf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbfa:	4798      	blx	r3
 800dbfc:	3601      	adds	r6, #1
 800dbfe:	e7f2      	b.n	800dbe6 <__libc_init_array+0x1e>
 800dc00:	08011238 	.word	0x08011238
 800dc04:	08011238 	.word	0x08011238
 800dc08:	08011238 	.word	0x08011238
 800dc0c:	0801123c 	.word	0x0801123c

0800dc10 <__retarget_lock_init_recursive>:
 800dc10:	4770      	bx	lr

0800dc12 <__retarget_lock_acquire_recursive>:
 800dc12:	4770      	bx	lr

0800dc14 <__retarget_lock_release_recursive>:
 800dc14:	4770      	bx	lr

0800dc16 <memcpy>:
 800dc16:	440a      	add	r2, r1
 800dc18:	4291      	cmp	r1, r2
 800dc1a:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc1e:	d100      	bne.n	800dc22 <memcpy+0xc>
 800dc20:	4770      	bx	lr
 800dc22:	b510      	push	{r4, lr}
 800dc24:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc28:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc2c:	4291      	cmp	r1, r2
 800dc2e:	d1f9      	bne.n	800dc24 <memcpy+0xe>
 800dc30:	bd10      	pop	{r4, pc}

0800dc32 <quorem>:
 800dc32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc36:	6903      	ldr	r3, [r0, #16]
 800dc38:	690c      	ldr	r4, [r1, #16]
 800dc3a:	42a3      	cmp	r3, r4
 800dc3c:	4607      	mov	r7, r0
 800dc3e:	db7e      	blt.n	800dd3e <quorem+0x10c>
 800dc40:	3c01      	subs	r4, #1
 800dc42:	f101 0814 	add.w	r8, r1, #20
 800dc46:	00a3      	lsls	r3, r4, #2
 800dc48:	f100 0514 	add.w	r5, r0, #20
 800dc4c:	9300      	str	r3, [sp, #0]
 800dc4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc52:	9301      	str	r3, [sp, #4]
 800dc54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dc58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc5c:	3301      	adds	r3, #1
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dc64:	fbb2 f6f3 	udiv	r6, r2, r3
 800dc68:	d32e      	bcc.n	800dcc8 <quorem+0x96>
 800dc6a:	f04f 0a00 	mov.w	sl, #0
 800dc6e:	46c4      	mov	ip, r8
 800dc70:	46ae      	mov	lr, r5
 800dc72:	46d3      	mov	fp, sl
 800dc74:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dc78:	b298      	uxth	r0, r3
 800dc7a:	fb06 a000 	mla	r0, r6, r0, sl
 800dc7e:	0c02      	lsrs	r2, r0, #16
 800dc80:	0c1b      	lsrs	r3, r3, #16
 800dc82:	fb06 2303 	mla	r3, r6, r3, r2
 800dc86:	f8de 2000 	ldr.w	r2, [lr]
 800dc8a:	b280      	uxth	r0, r0
 800dc8c:	b292      	uxth	r2, r2
 800dc8e:	1a12      	subs	r2, r2, r0
 800dc90:	445a      	add	r2, fp
 800dc92:	f8de 0000 	ldr.w	r0, [lr]
 800dc96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dca0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dca4:	b292      	uxth	r2, r2
 800dca6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dcaa:	45e1      	cmp	r9, ip
 800dcac:	f84e 2b04 	str.w	r2, [lr], #4
 800dcb0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dcb4:	d2de      	bcs.n	800dc74 <quorem+0x42>
 800dcb6:	9b00      	ldr	r3, [sp, #0]
 800dcb8:	58eb      	ldr	r3, [r5, r3]
 800dcba:	b92b      	cbnz	r3, 800dcc8 <quorem+0x96>
 800dcbc:	9b01      	ldr	r3, [sp, #4]
 800dcbe:	3b04      	subs	r3, #4
 800dcc0:	429d      	cmp	r5, r3
 800dcc2:	461a      	mov	r2, r3
 800dcc4:	d32f      	bcc.n	800dd26 <quorem+0xf4>
 800dcc6:	613c      	str	r4, [r7, #16]
 800dcc8:	4638      	mov	r0, r7
 800dcca:	f001 f97b 	bl	800efc4 <__mcmp>
 800dcce:	2800      	cmp	r0, #0
 800dcd0:	db25      	blt.n	800dd1e <quorem+0xec>
 800dcd2:	4629      	mov	r1, r5
 800dcd4:	2000      	movs	r0, #0
 800dcd6:	f858 2b04 	ldr.w	r2, [r8], #4
 800dcda:	f8d1 c000 	ldr.w	ip, [r1]
 800dcde:	fa1f fe82 	uxth.w	lr, r2
 800dce2:	fa1f f38c 	uxth.w	r3, ip
 800dce6:	eba3 030e 	sub.w	r3, r3, lr
 800dcea:	4403      	add	r3, r0
 800dcec:	0c12      	lsrs	r2, r2, #16
 800dcee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dcf2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dcfc:	45c1      	cmp	r9, r8
 800dcfe:	f841 3b04 	str.w	r3, [r1], #4
 800dd02:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dd06:	d2e6      	bcs.n	800dcd6 <quorem+0xa4>
 800dd08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd10:	b922      	cbnz	r2, 800dd1c <quorem+0xea>
 800dd12:	3b04      	subs	r3, #4
 800dd14:	429d      	cmp	r5, r3
 800dd16:	461a      	mov	r2, r3
 800dd18:	d30b      	bcc.n	800dd32 <quorem+0x100>
 800dd1a:	613c      	str	r4, [r7, #16]
 800dd1c:	3601      	adds	r6, #1
 800dd1e:	4630      	mov	r0, r6
 800dd20:	b003      	add	sp, #12
 800dd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd26:	6812      	ldr	r2, [r2, #0]
 800dd28:	3b04      	subs	r3, #4
 800dd2a:	2a00      	cmp	r2, #0
 800dd2c:	d1cb      	bne.n	800dcc6 <quorem+0x94>
 800dd2e:	3c01      	subs	r4, #1
 800dd30:	e7c6      	b.n	800dcc0 <quorem+0x8e>
 800dd32:	6812      	ldr	r2, [r2, #0]
 800dd34:	3b04      	subs	r3, #4
 800dd36:	2a00      	cmp	r2, #0
 800dd38:	d1ef      	bne.n	800dd1a <quorem+0xe8>
 800dd3a:	3c01      	subs	r4, #1
 800dd3c:	e7ea      	b.n	800dd14 <quorem+0xe2>
 800dd3e:	2000      	movs	r0, #0
 800dd40:	e7ee      	b.n	800dd20 <quorem+0xee>
 800dd42:	0000      	movs	r0, r0
 800dd44:	0000      	movs	r0, r0
	...

0800dd48 <_dtoa_r>:
 800dd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd4c:	69c7      	ldr	r7, [r0, #28]
 800dd4e:	b099      	sub	sp, #100	@ 0x64
 800dd50:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dd54:	ec55 4b10 	vmov	r4, r5, d0
 800dd58:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800dd5a:	9109      	str	r1, [sp, #36]	@ 0x24
 800dd5c:	4683      	mov	fp, r0
 800dd5e:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd60:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dd62:	b97f      	cbnz	r7, 800dd84 <_dtoa_r+0x3c>
 800dd64:	2010      	movs	r0, #16
 800dd66:	f000 fdfd 	bl	800e964 <malloc>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	f8cb 001c 	str.w	r0, [fp, #28]
 800dd70:	b920      	cbnz	r0, 800dd7c <_dtoa_r+0x34>
 800dd72:	4ba7      	ldr	r3, [pc, #668]	@ (800e010 <_dtoa_r+0x2c8>)
 800dd74:	21ef      	movs	r1, #239	@ 0xef
 800dd76:	48a7      	ldr	r0, [pc, #668]	@ (800e014 <_dtoa_r+0x2cc>)
 800dd78:	f001 fc5a 	bl	800f630 <__assert_func>
 800dd7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dd80:	6007      	str	r7, [r0, #0]
 800dd82:	60c7      	str	r7, [r0, #12]
 800dd84:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dd88:	6819      	ldr	r1, [r3, #0]
 800dd8a:	b159      	cbz	r1, 800dda4 <_dtoa_r+0x5c>
 800dd8c:	685a      	ldr	r2, [r3, #4]
 800dd8e:	604a      	str	r2, [r1, #4]
 800dd90:	2301      	movs	r3, #1
 800dd92:	4093      	lsls	r3, r2
 800dd94:	608b      	str	r3, [r1, #8]
 800dd96:	4658      	mov	r0, fp
 800dd98:	f000 feda 	bl	800eb50 <_Bfree>
 800dd9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dda0:	2200      	movs	r2, #0
 800dda2:	601a      	str	r2, [r3, #0]
 800dda4:	1e2b      	subs	r3, r5, #0
 800dda6:	bfb9      	ittee	lt
 800dda8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ddac:	9303      	strlt	r3, [sp, #12]
 800ddae:	2300      	movge	r3, #0
 800ddb0:	6033      	strge	r3, [r6, #0]
 800ddb2:	9f03      	ldr	r7, [sp, #12]
 800ddb4:	4b98      	ldr	r3, [pc, #608]	@ (800e018 <_dtoa_r+0x2d0>)
 800ddb6:	bfbc      	itt	lt
 800ddb8:	2201      	movlt	r2, #1
 800ddba:	6032      	strlt	r2, [r6, #0]
 800ddbc:	43bb      	bics	r3, r7
 800ddbe:	d112      	bne.n	800dde6 <_dtoa_r+0x9e>
 800ddc0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ddc2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ddc6:	6013      	str	r3, [r2, #0]
 800ddc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ddcc:	4323      	orrs	r3, r4
 800ddce:	f000 854d 	beq.w	800e86c <_dtoa_r+0xb24>
 800ddd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ddd4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e02c <_dtoa_r+0x2e4>
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	f000 854f 	beq.w	800e87c <_dtoa_r+0xb34>
 800ddde:	f10a 0303 	add.w	r3, sl, #3
 800dde2:	f000 bd49 	b.w	800e878 <_dtoa_r+0xb30>
 800dde6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ddea:	2200      	movs	r2, #0
 800ddec:	ec51 0b17 	vmov	r0, r1, d7
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ddf6:	f7f2 fe67 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddfa:	4680      	mov	r8, r0
 800ddfc:	b158      	cbz	r0, 800de16 <_dtoa_r+0xce>
 800ddfe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800de00:	2301      	movs	r3, #1
 800de02:	6013      	str	r3, [r2, #0]
 800de04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800de06:	b113      	cbz	r3, 800de0e <_dtoa_r+0xc6>
 800de08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800de0a:	4b84      	ldr	r3, [pc, #528]	@ (800e01c <_dtoa_r+0x2d4>)
 800de0c:	6013      	str	r3, [r2, #0]
 800de0e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e030 <_dtoa_r+0x2e8>
 800de12:	f000 bd33 	b.w	800e87c <_dtoa_r+0xb34>
 800de16:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800de1a:	aa16      	add	r2, sp, #88	@ 0x58
 800de1c:	a917      	add	r1, sp, #92	@ 0x5c
 800de1e:	4658      	mov	r0, fp
 800de20:	f001 f980 	bl	800f124 <__d2b>
 800de24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800de28:	4681      	mov	r9, r0
 800de2a:	2e00      	cmp	r6, #0
 800de2c:	d077      	beq.n	800df1e <_dtoa_r+0x1d6>
 800de2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800de30:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800de34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800de40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800de44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800de48:	4619      	mov	r1, r3
 800de4a:	2200      	movs	r2, #0
 800de4c:	4b74      	ldr	r3, [pc, #464]	@ (800e020 <_dtoa_r+0x2d8>)
 800de4e:	f7f2 fa1b 	bl	8000288 <__aeabi_dsub>
 800de52:	a369      	add	r3, pc, #420	@ (adr r3, 800dff8 <_dtoa_r+0x2b0>)
 800de54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de58:	f7f2 fbce 	bl	80005f8 <__aeabi_dmul>
 800de5c:	a368      	add	r3, pc, #416	@ (adr r3, 800e000 <_dtoa_r+0x2b8>)
 800de5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de62:	f7f2 fa13 	bl	800028c <__adddf3>
 800de66:	4604      	mov	r4, r0
 800de68:	4630      	mov	r0, r6
 800de6a:	460d      	mov	r5, r1
 800de6c:	f7f2 fb5a 	bl	8000524 <__aeabi_i2d>
 800de70:	a365      	add	r3, pc, #404	@ (adr r3, 800e008 <_dtoa_r+0x2c0>)
 800de72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de76:	f7f2 fbbf 	bl	80005f8 <__aeabi_dmul>
 800de7a:	4602      	mov	r2, r0
 800de7c:	460b      	mov	r3, r1
 800de7e:	4620      	mov	r0, r4
 800de80:	4629      	mov	r1, r5
 800de82:	f7f2 fa03 	bl	800028c <__adddf3>
 800de86:	4604      	mov	r4, r0
 800de88:	460d      	mov	r5, r1
 800de8a:	f7f2 fe65 	bl	8000b58 <__aeabi_d2iz>
 800de8e:	2200      	movs	r2, #0
 800de90:	4607      	mov	r7, r0
 800de92:	2300      	movs	r3, #0
 800de94:	4620      	mov	r0, r4
 800de96:	4629      	mov	r1, r5
 800de98:	f7f2 fe20 	bl	8000adc <__aeabi_dcmplt>
 800de9c:	b140      	cbz	r0, 800deb0 <_dtoa_r+0x168>
 800de9e:	4638      	mov	r0, r7
 800dea0:	f7f2 fb40 	bl	8000524 <__aeabi_i2d>
 800dea4:	4622      	mov	r2, r4
 800dea6:	462b      	mov	r3, r5
 800dea8:	f7f2 fe0e 	bl	8000ac8 <__aeabi_dcmpeq>
 800deac:	b900      	cbnz	r0, 800deb0 <_dtoa_r+0x168>
 800deae:	3f01      	subs	r7, #1
 800deb0:	2f16      	cmp	r7, #22
 800deb2:	d851      	bhi.n	800df58 <_dtoa_r+0x210>
 800deb4:	4b5b      	ldr	r3, [pc, #364]	@ (800e024 <_dtoa_r+0x2dc>)
 800deb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800deba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800debe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dec2:	f7f2 fe0b 	bl	8000adc <__aeabi_dcmplt>
 800dec6:	2800      	cmp	r0, #0
 800dec8:	d048      	beq.n	800df5c <_dtoa_r+0x214>
 800deca:	3f01      	subs	r7, #1
 800decc:	2300      	movs	r3, #0
 800dece:	9312      	str	r3, [sp, #72]	@ 0x48
 800ded0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ded2:	1b9b      	subs	r3, r3, r6
 800ded4:	1e5a      	subs	r2, r3, #1
 800ded6:	bf44      	itt	mi
 800ded8:	f1c3 0801 	rsbmi	r8, r3, #1
 800dedc:	2300      	movmi	r3, #0
 800dede:	9208      	str	r2, [sp, #32]
 800dee0:	bf54      	ite	pl
 800dee2:	f04f 0800 	movpl.w	r8, #0
 800dee6:	9308      	strmi	r3, [sp, #32]
 800dee8:	2f00      	cmp	r7, #0
 800deea:	db39      	blt.n	800df60 <_dtoa_r+0x218>
 800deec:	9b08      	ldr	r3, [sp, #32]
 800deee:	970f      	str	r7, [sp, #60]	@ 0x3c
 800def0:	443b      	add	r3, r7
 800def2:	9308      	str	r3, [sp, #32]
 800def4:	2300      	movs	r3, #0
 800def6:	930a      	str	r3, [sp, #40]	@ 0x28
 800def8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800defa:	2b09      	cmp	r3, #9
 800defc:	d864      	bhi.n	800dfc8 <_dtoa_r+0x280>
 800defe:	2b05      	cmp	r3, #5
 800df00:	bfc4      	itt	gt
 800df02:	3b04      	subgt	r3, #4
 800df04:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800df06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df08:	f1a3 0302 	sub.w	r3, r3, #2
 800df0c:	bfcc      	ite	gt
 800df0e:	2400      	movgt	r4, #0
 800df10:	2401      	movle	r4, #1
 800df12:	2b03      	cmp	r3, #3
 800df14:	d863      	bhi.n	800dfde <_dtoa_r+0x296>
 800df16:	e8df f003 	tbb	[pc, r3]
 800df1a:	372a      	.short	0x372a
 800df1c:	5535      	.short	0x5535
 800df1e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800df22:	441e      	add	r6, r3
 800df24:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800df28:	2b20      	cmp	r3, #32
 800df2a:	bfc1      	itttt	gt
 800df2c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800df30:	409f      	lslgt	r7, r3
 800df32:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800df36:	fa24 f303 	lsrgt.w	r3, r4, r3
 800df3a:	bfd6      	itet	le
 800df3c:	f1c3 0320 	rsble	r3, r3, #32
 800df40:	ea47 0003 	orrgt.w	r0, r7, r3
 800df44:	fa04 f003 	lslle.w	r0, r4, r3
 800df48:	f7f2 fadc 	bl	8000504 <__aeabi_ui2d>
 800df4c:	2201      	movs	r2, #1
 800df4e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800df52:	3e01      	subs	r6, #1
 800df54:	9214      	str	r2, [sp, #80]	@ 0x50
 800df56:	e777      	b.n	800de48 <_dtoa_r+0x100>
 800df58:	2301      	movs	r3, #1
 800df5a:	e7b8      	b.n	800dece <_dtoa_r+0x186>
 800df5c:	9012      	str	r0, [sp, #72]	@ 0x48
 800df5e:	e7b7      	b.n	800ded0 <_dtoa_r+0x188>
 800df60:	427b      	negs	r3, r7
 800df62:	930a      	str	r3, [sp, #40]	@ 0x28
 800df64:	2300      	movs	r3, #0
 800df66:	eba8 0807 	sub.w	r8, r8, r7
 800df6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df6c:	e7c4      	b.n	800def8 <_dtoa_r+0x1b0>
 800df6e:	2300      	movs	r3, #0
 800df70:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df74:	2b00      	cmp	r3, #0
 800df76:	dc35      	bgt.n	800dfe4 <_dtoa_r+0x29c>
 800df78:	2301      	movs	r3, #1
 800df7a:	9300      	str	r3, [sp, #0]
 800df7c:	9307      	str	r3, [sp, #28]
 800df7e:	461a      	mov	r2, r3
 800df80:	920e      	str	r2, [sp, #56]	@ 0x38
 800df82:	e00b      	b.n	800df9c <_dtoa_r+0x254>
 800df84:	2301      	movs	r3, #1
 800df86:	e7f3      	b.n	800df70 <_dtoa_r+0x228>
 800df88:	2300      	movs	r3, #0
 800df8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df8e:	18fb      	adds	r3, r7, r3
 800df90:	9300      	str	r3, [sp, #0]
 800df92:	3301      	adds	r3, #1
 800df94:	2b01      	cmp	r3, #1
 800df96:	9307      	str	r3, [sp, #28]
 800df98:	bfb8      	it	lt
 800df9a:	2301      	movlt	r3, #1
 800df9c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800dfa0:	2100      	movs	r1, #0
 800dfa2:	2204      	movs	r2, #4
 800dfa4:	f102 0514 	add.w	r5, r2, #20
 800dfa8:	429d      	cmp	r5, r3
 800dfaa:	d91f      	bls.n	800dfec <_dtoa_r+0x2a4>
 800dfac:	6041      	str	r1, [r0, #4]
 800dfae:	4658      	mov	r0, fp
 800dfb0:	f000 fd8e 	bl	800ead0 <_Balloc>
 800dfb4:	4682      	mov	sl, r0
 800dfb6:	2800      	cmp	r0, #0
 800dfb8:	d13c      	bne.n	800e034 <_dtoa_r+0x2ec>
 800dfba:	4b1b      	ldr	r3, [pc, #108]	@ (800e028 <_dtoa_r+0x2e0>)
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	f240 11af 	movw	r1, #431	@ 0x1af
 800dfc2:	e6d8      	b.n	800dd76 <_dtoa_r+0x2e>
 800dfc4:	2301      	movs	r3, #1
 800dfc6:	e7e0      	b.n	800df8a <_dtoa_r+0x242>
 800dfc8:	2401      	movs	r4, #1
 800dfca:	2300      	movs	r3, #0
 800dfcc:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfce:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dfd0:	f04f 33ff 	mov.w	r3, #4294967295
 800dfd4:	9300      	str	r3, [sp, #0]
 800dfd6:	9307      	str	r3, [sp, #28]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	2312      	movs	r3, #18
 800dfdc:	e7d0      	b.n	800df80 <_dtoa_r+0x238>
 800dfde:	2301      	movs	r3, #1
 800dfe0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dfe2:	e7f5      	b.n	800dfd0 <_dtoa_r+0x288>
 800dfe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dfe6:	9300      	str	r3, [sp, #0]
 800dfe8:	9307      	str	r3, [sp, #28]
 800dfea:	e7d7      	b.n	800df9c <_dtoa_r+0x254>
 800dfec:	3101      	adds	r1, #1
 800dfee:	0052      	lsls	r2, r2, #1
 800dff0:	e7d8      	b.n	800dfa4 <_dtoa_r+0x25c>
 800dff2:	bf00      	nop
 800dff4:	f3af 8000 	nop.w
 800dff8:	636f4361 	.word	0x636f4361
 800dffc:	3fd287a7 	.word	0x3fd287a7
 800e000:	8b60c8b3 	.word	0x8b60c8b3
 800e004:	3fc68a28 	.word	0x3fc68a28
 800e008:	509f79fb 	.word	0x509f79fb
 800e00c:	3fd34413 	.word	0x3fd34413
 800e010:	08010f8e 	.word	0x08010f8e
 800e014:	08010fa5 	.word	0x08010fa5
 800e018:	7ff00000 	.word	0x7ff00000
 800e01c:	08010f5e 	.word	0x08010f5e
 800e020:	3ff80000 	.word	0x3ff80000
 800e024:	080110a0 	.word	0x080110a0
 800e028:	08010ffd 	.word	0x08010ffd
 800e02c:	08010f8a 	.word	0x08010f8a
 800e030:	08010f5d 	.word	0x08010f5d
 800e034:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e038:	6018      	str	r0, [r3, #0]
 800e03a:	9b07      	ldr	r3, [sp, #28]
 800e03c:	2b0e      	cmp	r3, #14
 800e03e:	f200 80a4 	bhi.w	800e18a <_dtoa_r+0x442>
 800e042:	2c00      	cmp	r4, #0
 800e044:	f000 80a1 	beq.w	800e18a <_dtoa_r+0x442>
 800e048:	2f00      	cmp	r7, #0
 800e04a:	dd33      	ble.n	800e0b4 <_dtoa_r+0x36c>
 800e04c:	4bad      	ldr	r3, [pc, #692]	@ (800e304 <_dtoa_r+0x5bc>)
 800e04e:	f007 020f 	and.w	r2, r7, #15
 800e052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e056:	ed93 7b00 	vldr	d7, [r3]
 800e05a:	05f8      	lsls	r0, r7, #23
 800e05c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e060:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e064:	d516      	bpl.n	800e094 <_dtoa_r+0x34c>
 800e066:	4ba8      	ldr	r3, [pc, #672]	@ (800e308 <_dtoa_r+0x5c0>)
 800e068:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e06c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e070:	f7f2 fbec 	bl	800084c <__aeabi_ddiv>
 800e074:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e078:	f004 040f 	and.w	r4, r4, #15
 800e07c:	2603      	movs	r6, #3
 800e07e:	4da2      	ldr	r5, [pc, #648]	@ (800e308 <_dtoa_r+0x5c0>)
 800e080:	b954      	cbnz	r4, 800e098 <_dtoa_r+0x350>
 800e082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e08a:	f7f2 fbdf 	bl	800084c <__aeabi_ddiv>
 800e08e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e092:	e028      	b.n	800e0e6 <_dtoa_r+0x39e>
 800e094:	2602      	movs	r6, #2
 800e096:	e7f2      	b.n	800e07e <_dtoa_r+0x336>
 800e098:	07e1      	lsls	r1, r4, #31
 800e09a:	d508      	bpl.n	800e0ae <_dtoa_r+0x366>
 800e09c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e0a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e0a4:	f7f2 faa8 	bl	80005f8 <__aeabi_dmul>
 800e0a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e0ac:	3601      	adds	r6, #1
 800e0ae:	1064      	asrs	r4, r4, #1
 800e0b0:	3508      	adds	r5, #8
 800e0b2:	e7e5      	b.n	800e080 <_dtoa_r+0x338>
 800e0b4:	f000 80d2 	beq.w	800e25c <_dtoa_r+0x514>
 800e0b8:	427c      	negs	r4, r7
 800e0ba:	4b92      	ldr	r3, [pc, #584]	@ (800e304 <_dtoa_r+0x5bc>)
 800e0bc:	4d92      	ldr	r5, [pc, #584]	@ (800e308 <_dtoa_r+0x5c0>)
 800e0be:	f004 020f 	and.w	r2, r4, #15
 800e0c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0ce:	f7f2 fa93 	bl	80005f8 <__aeabi_dmul>
 800e0d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0d6:	1124      	asrs	r4, r4, #4
 800e0d8:	2300      	movs	r3, #0
 800e0da:	2602      	movs	r6, #2
 800e0dc:	2c00      	cmp	r4, #0
 800e0de:	f040 80b2 	bne.w	800e246 <_dtoa_r+0x4fe>
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d1d3      	bne.n	800e08e <_dtoa_r+0x346>
 800e0e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e0e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	f000 80b7 	beq.w	800e260 <_dtoa_r+0x518>
 800e0f2:	4b86      	ldr	r3, [pc, #536]	@ (800e30c <_dtoa_r+0x5c4>)
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	4629      	mov	r1, r5
 800e0fa:	f7f2 fcef 	bl	8000adc <__aeabi_dcmplt>
 800e0fe:	2800      	cmp	r0, #0
 800e100:	f000 80ae 	beq.w	800e260 <_dtoa_r+0x518>
 800e104:	9b07      	ldr	r3, [sp, #28]
 800e106:	2b00      	cmp	r3, #0
 800e108:	f000 80aa 	beq.w	800e260 <_dtoa_r+0x518>
 800e10c:	9b00      	ldr	r3, [sp, #0]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	dd37      	ble.n	800e182 <_dtoa_r+0x43a>
 800e112:	1e7b      	subs	r3, r7, #1
 800e114:	9304      	str	r3, [sp, #16]
 800e116:	4620      	mov	r0, r4
 800e118:	4b7d      	ldr	r3, [pc, #500]	@ (800e310 <_dtoa_r+0x5c8>)
 800e11a:	2200      	movs	r2, #0
 800e11c:	4629      	mov	r1, r5
 800e11e:	f7f2 fa6b 	bl	80005f8 <__aeabi_dmul>
 800e122:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e126:	9c00      	ldr	r4, [sp, #0]
 800e128:	3601      	adds	r6, #1
 800e12a:	4630      	mov	r0, r6
 800e12c:	f7f2 f9fa 	bl	8000524 <__aeabi_i2d>
 800e130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e134:	f7f2 fa60 	bl	80005f8 <__aeabi_dmul>
 800e138:	4b76      	ldr	r3, [pc, #472]	@ (800e314 <_dtoa_r+0x5cc>)
 800e13a:	2200      	movs	r2, #0
 800e13c:	f7f2 f8a6 	bl	800028c <__adddf3>
 800e140:	4605      	mov	r5, r0
 800e142:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e146:	2c00      	cmp	r4, #0
 800e148:	f040 808d 	bne.w	800e266 <_dtoa_r+0x51e>
 800e14c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e150:	4b71      	ldr	r3, [pc, #452]	@ (800e318 <_dtoa_r+0x5d0>)
 800e152:	2200      	movs	r2, #0
 800e154:	f7f2 f898 	bl	8000288 <__aeabi_dsub>
 800e158:	4602      	mov	r2, r0
 800e15a:	460b      	mov	r3, r1
 800e15c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e160:	462a      	mov	r2, r5
 800e162:	4633      	mov	r3, r6
 800e164:	f7f2 fcd8 	bl	8000b18 <__aeabi_dcmpgt>
 800e168:	2800      	cmp	r0, #0
 800e16a:	f040 828b 	bne.w	800e684 <_dtoa_r+0x93c>
 800e16e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e172:	462a      	mov	r2, r5
 800e174:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e178:	f7f2 fcb0 	bl	8000adc <__aeabi_dcmplt>
 800e17c:	2800      	cmp	r0, #0
 800e17e:	f040 8128 	bne.w	800e3d2 <_dtoa_r+0x68a>
 800e182:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e186:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e18a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	f2c0 815a 	blt.w	800e446 <_dtoa_r+0x6fe>
 800e192:	2f0e      	cmp	r7, #14
 800e194:	f300 8157 	bgt.w	800e446 <_dtoa_r+0x6fe>
 800e198:	4b5a      	ldr	r3, [pc, #360]	@ (800e304 <_dtoa_r+0x5bc>)
 800e19a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e19e:	ed93 7b00 	vldr	d7, [r3]
 800e1a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	ed8d 7b00 	vstr	d7, [sp]
 800e1aa:	da03      	bge.n	800e1b4 <_dtoa_r+0x46c>
 800e1ac:	9b07      	ldr	r3, [sp, #28]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	f340 8101 	ble.w	800e3b6 <_dtoa_r+0x66e>
 800e1b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e1b8:	4656      	mov	r6, sl
 800e1ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1be:	4620      	mov	r0, r4
 800e1c0:	4629      	mov	r1, r5
 800e1c2:	f7f2 fb43 	bl	800084c <__aeabi_ddiv>
 800e1c6:	f7f2 fcc7 	bl	8000b58 <__aeabi_d2iz>
 800e1ca:	4680      	mov	r8, r0
 800e1cc:	f7f2 f9aa 	bl	8000524 <__aeabi_i2d>
 800e1d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1d4:	f7f2 fa10 	bl	80005f8 <__aeabi_dmul>
 800e1d8:	4602      	mov	r2, r0
 800e1da:	460b      	mov	r3, r1
 800e1dc:	4620      	mov	r0, r4
 800e1de:	4629      	mov	r1, r5
 800e1e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e1e4:	f7f2 f850 	bl	8000288 <__aeabi_dsub>
 800e1e8:	f806 4b01 	strb.w	r4, [r6], #1
 800e1ec:	9d07      	ldr	r5, [sp, #28]
 800e1ee:	eba6 040a 	sub.w	r4, r6, sl
 800e1f2:	42a5      	cmp	r5, r4
 800e1f4:	4602      	mov	r2, r0
 800e1f6:	460b      	mov	r3, r1
 800e1f8:	f040 8117 	bne.w	800e42a <_dtoa_r+0x6e2>
 800e1fc:	f7f2 f846 	bl	800028c <__adddf3>
 800e200:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e204:	4604      	mov	r4, r0
 800e206:	460d      	mov	r5, r1
 800e208:	f7f2 fc86 	bl	8000b18 <__aeabi_dcmpgt>
 800e20c:	2800      	cmp	r0, #0
 800e20e:	f040 80f9 	bne.w	800e404 <_dtoa_r+0x6bc>
 800e212:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e216:	4620      	mov	r0, r4
 800e218:	4629      	mov	r1, r5
 800e21a:	f7f2 fc55 	bl	8000ac8 <__aeabi_dcmpeq>
 800e21e:	b118      	cbz	r0, 800e228 <_dtoa_r+0x4e0>
 800e220:	f018 0f01 	tst.w	r8, #1
 800e224:	f040 80ee 	bne.w	800e404 <_dtoa_r+0x6bc>
 800e228:	4649      	mov	r1, r9
 800e22a:	4658      	mov	r0, fp
 800e22c:	f000 fc90 	bl	800eb50 <_Bfree>
 800e230:	2300      	movs	r3, #0
 800e232:	7033      	strb	r3, [r6, #0]
 800e234:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e236:	3701      	adds	r7, #1
 800e238:	601f      	str	r7, [r3, #0]
 800e23a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	f000 831d 	beq.w	800e87c <_dtoa_r+0xb34>
 800e242:	601e      	str	r6, [r3, #0]
 800e244:	e31a      	b.n	800e87c <_dtoa_r+0xb34>
 800e246:	07e2      	lsls	r2, r4, #31
 800e248:	d505      	bpl.n	800e256 <_dtoa_r+0x50e>
 800e24a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e24e:	f7f2 f9d3 	bl	80005f8 <__aeabi_dmul>
 800e252:	3601      	adds	r6, #1
 800e254:	2301      	movs	r3, #1
 800e256:	1064      	asrs	r4, r4, #1
 800e258:	3508      	adds	r5, #8
 800e25a:	e73f      	b.n	800e0dc <_dtoa_r+0x394>
 800e25c:	2602      	movs	r6, #2
 800e25e:	e742      	b.n	800e0e6 <_dtoa_r+0x39e>
 800e260:	9c07      	ldr	r4, [sp, #28]
 800e262:	9704      	str	r7, [sp, #16]
 800e264:	e761      	b.n	800e12a <_dtoa_r+0x3e2>
 800e266:	4b27      	ldr	r3, [pc, #156]	@ (800e304 <_dtoa_r+0x5bc>)
 800e268:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e26a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e26e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e272:	4454      	add	r4, sl
 800e274:	2900      	cmp	r1, #0
 800e276:	d053      	beq.n	800e320 <_dtoa_r+0x5d8>
 800e278:	4928      	ldr	r1, [pc, #160]	@ (800e31c <_dtoa_r+0x5d4>)
 800e27a:	2000      	movs	r0, #0
 800e27c:	f7f2 fae6 	bl	800084c <__aeabi_ddiv>
 800e280:	4633      	mov	r3, r6
 800e282:	462a      	mov	r2, r5
 800e284:	f7f2 f800 	bl	8000288 <__aeabi_dsub>
 800e288:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e28c:	4656      	mov	r6, sl
 800e28e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e292:	f7f2 fc61 	bl	8000b58 <__aeabi_d2iz>
 800e296:	4605      	mov	r5, r0
 800e298:	f7f2 f944 	bl	8000524 <__aeabi_i2d>
 800e29c:	4602      	mov	r2, r0
 800e29e:	460b      	mov	r3, r1
 800e2a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2a4:	f7f1 fff0 	bl	8000288 <__aeabi_dsub>
 800e2a8:	3530      	adds	r5, #48	@ 0x30
 800e2aa:	4602      	mov	r2, r0
 800e2ac:	460b      	mov	r3, r1
 800e2ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e2b2:	f806 5b01 	strb.w	r5, [r6], #1
 800e2b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e2ba:	f7f2 fc0f 	bl	8000adc <__aeabi_dcmplt>
 800e2be:	2800      	cmp	r0, #0
 800e2c0:	d171      	bne.n	800e3a6 <_dtoa_r+0x65e>
 800e2c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2c6:	4911      	ldr	r1, [pc, #68]	@ (800e30c <_dtoa_r+0x5c4>)
 800e2c8:	2000      	movs	r0, #0
 800e2ca:	f7f1 ffdd 	bl	8000288 <__aeabi_dsub>
 800e2ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e2d2:	f7f2 fc03 	bl	8000adc <__aeabi_dcmplt>
 800e2d6:	2800      	cmp	r0, #0
 800e2d8:	f040 8095 	bne.w	800e406 <_dtoa_r+0x6be>
 800e2dc:	42a6      	cmp	r6, r4
 800e2de:	f43f af50 	beq.w	800e182 <_dtoa_r+0x43a>
 800e2e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e2e6:	4b0a      	ldr	r3, [pc, #40]	@ (800e310 <_dtoa_r+0x5c8>)
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	f7f2 f985 	bl	80005f8 <__aeabi_dmul>
 800e2ee:	4b08      	ldr	r3, [pc, #32]	@ (800e310 <_dtoa_r+0x5c8>)
 800e2f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2fa:	f7f2 f97d 	bl	80005f8 <__aeabi_dmul>
 800e2fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e302:	e7c4      	b.n	800e28e <_dtoa_r+0x546>
 800e304:	080110a0 	.word	0x080110a0
 800e308:	08011078 	.word	0x08011078
 800e30c:	3ff00000 	.word	0x3ff00000
 800e310:	40240000 	.word	0x40240000
 800e314:	401c0000 	.word	0x401c0000
 800e318:	40140000 	.word	0x40140000
 800e31c:	3fe00000 	.word	0x3fe00000
 800e320:	4631      	mov	r1, r6
 800e322:	4628      	mov	r0, r5
 800e324:	f7f2 f968 	bl	80005f8 <__aeabi_dmul>
 800e328:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e32c:	9415      	str	r4, [sp, #84]	@ 0x54
 800e32e:	4656      	mov	r6, sl
 800e330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e334:	f7f2 fc10 	bl	8000b58 <__aeabi_d2iz>
 800e338:	4605      	mov	r5, r0
 800e33a:	f7f2 f8f3 	bl	8000524 <__aeabi_i2d>
 800e33e:	4602      	mov	r2, r0
 800e340:	460b      	mov	r3, r1
 800e342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e346:	f7f1 ff9f 	bl	8000288 <__aeabi_dsub>
 800e34a:	3530      	adds	r5, #48	@ 0x30
 800e34c:	f806 5b01 	strb.w	r5, [r6], #1
 800e350:	4602      	mov	r2, r0
 800e352:	460b      	mov	r3, r1
 800e354:	42a6      	cmp	r6, r4
 800e356:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e35a:	f04f 0200 	mov.w	r2, #0
 800e35e:	d124      	bne.n	800e3aa <_dtoa_r+0x662>
 800e360:	4bac      	ldr	r3, [pc, #688]	@ (800e614 <_dtoa_r+0x8cc>)
 800e362:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e366:	f7f1 ff91 	bl	800028c <__adddf3>
 800e36a:	4602      	mov	r2, r0
 800e36c:	460b      	mov	r3, r1
 800e36e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e372:	f7f2 fbd1 	bl	8000b18 <__aeabi_dcmpgt>
 800e376:	2800      	cmp	r0, #0
 800e378:	d145      	bne.n	800e406 <_dtoa_r+0x6be>
 800e37a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e37e:	49a5      	ldr	r1, [pc, #660]	@ (800e614 <_dtoa_r+0x8cc>)
 800e380:	2000      	movs	r0, #0
 800e382:	f7f1 ff81 	bl	8000288 <__aeabi_dsub>
 800e386:	4602      	mov	r2, r0
 800e388:	460b      	mov	r3, r1
 800e38a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e38e:	f7f2 fba5 	bl	8000adc <__aeabi_dcmplt>
 800e392:	2800      	cmp	r0, #0
 800e394:	f43f aef5 	beq.w	800e182 <_dtoa_r+0x43a>
 800e398:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e39a:	1e73      	subs	r3, r6, #1
 800e39c:	9315      	str	r3, [sp, #84]	@ 0x54
 800e39e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e3a2:	2b30      	cmp	r3, #48	@ 0x30
 800e3a4:	d0f8      	beq.n	800e398 <_dtoa_r+0x650>
 800e3a6:	9f04      	ldr	r7, [sp, #16]
 800e3a8:	e73e      	b.n	800e228 <_dtoa_r+0x4e0>
 800e3aa:	4b9b      	ldr	r3, [pc, #620]	@ (800e618 <_dtoa_r+0x8d0>)
 800e3ac:	f7f2 f924 	bl	80005f8 <__aeabi_dmul>
 800e3b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3b4:	e7bc      	b.n	800e330 <_dtoa_r+0x5e8>
 800e3b6:	d10c      	bne.n	800e3d2 <_dtoa_r+0x68a>
 800e3b8:	4b98      	ldr	r3, [pc, #608]	@ (800e61c <_dtoa_r+0x8d4>)
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3c0:	f7f2 f91a 	bl	80005f8 <__aeabi_dmul>
 800e3c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e3c8:	f7f2 fb9c 	bl	8000b04 <__aeabi_dcmpge>
 800e3cc:	2800      	cmp	r0, #0
 800e3ce:	f000 8157 	beq.w	800e680 <_dtoa_r+0x938>
 800e3d2:	2400      	movs	r4, #0
 800e3d4:	4625      	mov	r5, r4
 800e3d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3d8:	43db      	mvns	r3, r3
 800e3da:	9304      	str	r3, [sp, #16]
 800e3dc:	4656      	mov	r6, sl
 800e3de:	2700      	movs	r7, #0
 800e3e0:	4621      	mov	r1, r4
 800e3e2:	4658      	mov	r0, fp
 800e3e4:	f000 fbb4 	bl	800eb50 <_Bfree>
 800e3e8:	2d00      	cmp	r5, #0
 800e3ea:	d0dc      	beq.n	800e3a6 <_dtoa_r+0x65e>
 800e3ec:	b12f      	cbz	r7, 800e3fa <_dtoa_r+0x6b2>
 800e3ee:	42af      	cmp	r7, r5
 800e3f0:	d003      	beq.n	800e3fa <_dtoa_r+0x6b2>
 800e3f2:	4639      	mov	r1, r7
 800e3f4:	4658      	mov	r0, fp
 800e3f6:	f000 fbab 	bl	800eb50 <_Bfree>
 800e3fa:	4629      	mov	r1, r5
 800e3fc:	4658      	mov	r0, fp
 800e3fe:	f000 fba7 	bl	800eb50 <_Bfree>
 800e402:	e7d0      	b.n	800e3a6 <_dtoa_r+0x65e>
 800e404:	9704      	str	r7, [sp, #16]
 800e406:	4633      	mov	r3, r6
 800e408:	461e      	mov	r6, r3
 800e40a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e40e:	2a39      	cmp	r2, #57	@ 0x39
 800e410:	d107      	bne.n	800e422 <_dtoa_r+0x6da>
 800e412:	459a      	cmp	sl, r3
 800e414:	d1f8      	bne.n	800e408 <_dtoa_r+0x6c0>
 800e416:	9a04      	ldr	r2, [sp, #16]
 800e418:	3201      	adds	r2, #1
 800e41a:	9204      	str	r2, [sp, #16]
 800e41c:	2230      	movs	r2, #48	@ 0x30
 800e41e:	f88a 2000 	strb.w	r2, [sl]
 800e422:	781a      	ldrb	r2, [r3, #0]
 800e424:	3201      	adds	r2, #1
 800e426:	701a      	strb	r2, [r3, #0]
 800e428:	e7bd      	b.n	800e3a6 <_dtoa_r+0x65e>
 800e42a:	4b7b      	ldr	r3, [pc, #492]	@ (800e618 <_dtoa_r+0x8d0>)
 800e42c:	2200      	movs	r2, #0
 800e42e:	f7f2 f8e3 	bl	80005f8 <__aeabi_dmul>
 800e432:	2200      	movs	r2, #0
 800e434:	2300      	movs	r3, #0
 800e436:	4604      	mov	r4, r0
 800e438:	460d      	mov	r5, r1
 800e43a:	f7f2 fb45 	bl	8000ac8 <__aeabi_dcmpeq>
 800e43e:	2800      	cmp	r0, #0
 800e440:	f43f aebb 	beq.w	800e1ba <_dtoa_r+0x472>
 800e444:	e6f0      	b.n	800e228 <_dtoa_r+0x4e0>
 800e446:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e448:	2a00      	cmp	r2, #0
 800e44a:	f000 80db 	beq.w	800e604 <_dtoa_r+0x8bc>
 800e44e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e450:	2a01      	cmp	r2, #1
 800e452:	f300 80bf 	bgt.w	800e5d4 <_dtoa_r+0x88c>
 800e456:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e458:	2a00      	cmp	r2, #0
 800e45a:	f000 80b7 	beq.w	800e5cc <_dtoa_r+0x884>
 800e45e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e462:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e464:	4646      	mov	r6, r8
 800e466:	9a08      	ldr	r2, [sp, #32]
 800e468:	2101      	movs	r1, #1
 800e46a:	441a      	add	r2, r3
 800e46c:	4658      	mov	r0, fp
 800e46e:	4498      	add	r8, r3
 800e470:	9208      	str	r2, [sp, #32]
 800e472:	f000 fc21 	bl	800ecb8 <__i2b>
 800e476:	4605      	mov	r5, r0
 800e478:	b15e      	cbz	r6, 800e492 <_dtoa_r+0x74a>
 800e47a:	9b08      	ldr	r3, [sp, #32]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	dd08      	ble.n	800e492 <_dtoa_r+0x74a>
 800e480:	42b3      	cmp	r3, r6
 800e482:	9a08      	ldr	r2, [sp, #32]
 800e484:	bfa8      	it	ge
 800e486:	4633      	movge	r3, r6
 800e488:	eba8 0803 	sub.w	r8, r8, r3
 800e48c:	1af6      	subs	r6, r6, r3
 800e48e:	1ad3      	subs	r3, r2, r3
 800e490:	9308      	str	r3, [sp, #32]
 800e492:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e494:	b1f3      	cbz	r3, 800e4d4 <_dtoa_r+0x78c>
 800e496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e498:	2b00      	cmp	r3, #0
 800e49a:	f000 80b7 	beq.w	800e60c <_dtoa_r+0x8c4>
 800e49e:	b18c      	cbz	r4, 800e4c4 <_dtoa_r+0x77c>
 800e4a0:	4629      	mov	r1, r5
 800e4a2:	4622      	mov	r2, r4
 800e4a4:	4658      	mov	r0, fp
 800e4a6:	f000 fcc7 	bl	800ee38 <__pow5mult>
 800e4aa:	464a      	mov	r2, r9
 800e4ac:	4601      	mov	r1, r0
 800e4ae:	4605      	mov	r5, r0
 800e4b0:	4658      	mov	r0, fp
 800e4b2:	f000 fc17 	bl	800ece4 <__multiply>
 800e4b6:	4649      	mov	r1, r9
 800e4b8:	9004      	str	r0, [sp, #16]
 800e4ba:	4658      	mov	r0, fp
 800e4bc:	f000 fb48 	bl	800eb50 <_Bfree>
 800e4c0:	9b04      	ldr	r3, [sp, #16]
 800e4c2:	4699      	mov	r9, r3
 800e4c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4c6:	1b1a      	subs	r2, r3, r4
 800e4c8:	d004      	beq.n	800e4d4 <_dtoa_r+0x78c>
 800e4ca:	4649      	mov	r1, r9
 800e4cc:	4658      	mov	r0, fp
 800e4ce:	f000 fcb3 	bl	800ee38 <__pow5mult>
 800e4d2:	4681      	mov	r9, r0
 800e4d4:	2101      	movs	r1, #1
 800e4d6:	4658      	mov	r0, fp
 800e4d8:	f000 fbee 	bl	800ecb8 <__i2b>
 800e4dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4de:	4604      	mov	r4, r0
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	f000 81cf 	beq.w	800e884 <_dtoa_r+0xb3c>
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	4601      	mov	r1, r0
 800e4ea:	4658      	mov	r0, fp
 800e4ec:	f000 fca4 	bl	800ee38 <__pow5mult>
 800e4f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4f2:	2b01      	cmp	r3, #1
 800e4f4:	4604      	mov	r4, r0
 800e4f6:	f300 8095 	bgt.w	800e624 <_dtoa_r+0x8dc>
 800e4fa:	9b02      	ldr	r3, [sp, #8]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	f040 8087 	bne.w	800e610 <_dtoa_r+0x8c8>
 800e502:	9b03      	ldr	r3, [sp, #12]
 800e504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e508:	2b00      	cmp	r3, #0
 800e50a:	f040 8089 	bne.w	800e620 <_dtoa_r+0x8d8>
 800e50e:	9b03      	ldr	r3, [sp, #12]
 800e510:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e514:	0d1b      	lsrs	r3, r3, #20
 800e516:	051b      	lsls	r3, r3, #20
 800e518:	b12b      	cbz	r3, 800e526 <_dtoa_r+0x7de>
 800e51a:	9b08      	ldr	r3, [sp, #32]
 800e51c:	3301      	adds	r3, #1
 800e51e:	9308      	str	r3, [sp, #32]
 800e520:	f108 0801 	add.w	r8, r8, #1
 800e524:	2301      	movs	r3, #1
 800e526:	930a      	str	r3, [sp, #40]	@ 0x28
 800e528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	f000 81b0 	beq.w	800e890 <_dtoa_r+0xb48>
 800e530:	6923      	ldr	r3, [r4, #16]
 800e532:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e536:	6918      	ldr	r0, [r3, #16]
 800e538:	f000 fb72 	bl	800ec20 <__hi0bits>
 800e53c:	f1c0 0020 	rsb	r0, r0, #32
 800e540:	9b08      	ldr	r3, [sp, #32]
 800e542:	4418      	add	r0, r3
 800e544:	f010 001f 	ands.w	r0, r0, #31
 800e548:	d077      	beq.n	800e63a <_dtoa_r+0x8f2>
 800e54a:	f1c0 0320 	rsb	r3, r0, #32
 800e54e:	2b04      	cmp	r3, #4
 800e550:	dd6b      	ble.n	800e62a <_dtoa_r+0x8e2>
 800e552:	9b08      	ldr	r3, [sp, #32]
 800e554:	f1c0 001c 	rsb	r0, r0, #28
 800e558:	4403      	add	r3, r0
 800e55a:	4480      	add	r8, r0
 800e55c:	4406      	add	r6, r0
 800e55e:	9308      	str	r3, [sp, #32]
 800e560:	f1b8 0f00 	cmp.w	r8, #0
 800e564:	dd05      	ble.n	800e572 <_dtoa_r+0x82a>
 800e566:	4649      	mov	r1, r9
 800e568:	4642      	mov	r2, r8
 800e56a:	4658      	mov	r0, fp
 800e56c:	f000 fcbe 	bl	800eeec <__lshift>
 800e570:	4681      	mov	r9, r0
 800e572:	9b08      	ldr	r3, [sp, #32]
 800e574:	2b00      	cmp	r3, #0
 800e576:	dd05      	ble.n	800e584 <_dtoa_r+0x83c>
 800e578:	4621      	mov	r1, r4
 800e57a:	461a      	mov	r2, r3
 800e57c:	4658      	mov	r0, fp
 800e57e:	f000 fcb5 	bl	800eeec <__lshift>
 800e582:	4604      	mov	r4, r0
 800e584:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e586:	2b00      	cmp	r3, #0
 800e588:	d059      	beq.n	800e63e <_dtoa_r+0x8f6>
 800e58a:	4621      	mov	r1, r4
 800e58c:	4648      	mov	r0, r9
 800e58e:	f000 fd19 	bl	800efc4 <__mcmp>
 800e592:	2800      	cmp	r0, #0
 800e594:	da53      	bge.n	800e63e <_dtoa_r+0x8f6>
 800e596:	1e7b      	subs	r3, r7, #1
 800e598:	9304      	str	r3, [sp, #16]
 800e59a:	4649      	mov	r1, r9
 800e59c:	2300      	movs	r3, #0
 800e59e:	220a      	movs	r2, #10
 800e5a0:	4658      	mov	r0, fp
 800e5a2:	f000 faf7 	bl	800eb94 <__multadd>
 800e5a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5a8:	4681      	mov	r9, r0
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	f000 8172 	beq.w	800e894 <_dtoa_r+0xb4c>
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	4629      	mov	r1, r5
 800e5b4:	220a      	movs	r2, #10
 800e5b6:	4658      	mov	r0, fp
 800e5b8:	f000 faec 	bl	800eb94 <__multadd>
 800e5bc:	9b00      	ldr	r3, [sp, #0]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	4605      	mov	r5, r0
 800e5c2:	dc67      	bgt.n	800e694 <_dtoa_r+0x94c>
 800e5c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5c6:	2b02      	cmp	r3, #2
 800e5c8:	dc41      	bgt.n	800e64e <_dtoa_r+0x906>
 800e5ca:	e063      	b.n	800e694 <_dtoa_r+0x94c>
 800e5cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e5ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e5d2:	e746      	b.n	800e462 <_dtoa_r+0x71a>
 800e5d4:	9b07      	ldr	r3, [sp, #28]
 800e5d6:	1e5c      	subs	r4, r3, #1
 800e5d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5da:	42a3      	cmp	r3, r4
 800e5dc:	bfbf      	itttt	lt
 800e5de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e5e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e5e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e5e4:	1ae3      	sublt	r3, r4, r3
 800e5e6:	bfb4      	ite	lt
 800e5e8:	18d2      	addlt	r2, r2, r3
 800e5ea:	1b1c      	subge	r4, r3, r4
 800e5ec:	9b07      	ldr	r3, [sp, #28]
 800e5ee:	bfbc      	itt	lt
 800e5f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e5f2:	2400      	movlt	r4, #0
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	bfb5      	itete	lt
 800e5f8:	eba8 0603 	sublt.w	r6, r8, r3
 800e5fc:	9b07      	ldrge	r3, [sp, #28]
 800e5fe:	2300      	movlt	r3, #0
 800e600:	4646      	movge	r6, r8
 800e602:	e730      	b.n	800e466 <_dtoa_r+0x71e>
 800e604:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e606:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e608:	4646      	mov	r6, r8
 800e60a:	e735      	b.n	800e478 <_dtoa_r+0x730>
 800e60c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e60e:	e75c      	b.n	800e4ca <_dtoa_r+0x782>
 800e610:	2300      	movs	r3, #0
 800e612:	e788      	b.n	800e526 <_dtoa_r+0x7de>
 800e614:	3fe00000 	.word	0x3fe00000
 800e618:	40240000 	.word	0x40240000
 800e61c:	40140000 	.word	0x40140000
 800e620:	9b02      	ldr	r3, [sp, #8]
 800e622:	e780      	b.n	800e526 <_dtoa_r+0x7de>
 800e624:	2300      	movs	r3, #0
 800e626:	930a      	str	r3, [sp, #40]	@ 0x28
 800e628:	e782      	b.n	800e530 <_dtoa_r+0x7e8>
 800e62a:	d099      	beq.n	800e560 <_dtoa_r+0x818>
 800e62c:	9a08      	ldr	r2, [sp, #32]
 800e62e:	331c      	adds	r3, #28
 800e630:	441a      	add	r2, r3
 800e632:	4498      	add	r8, r3
 800e634:	441e      	add	r6, r3
 800e636:	9208      	str	r2, [sp, #32]
 800e638:	e792      	b.n	800e560 <_dtoa_r+0x818>
 800e63a:	4603      	mov	r3, r0
 800e63c:	e7f6      	b.n	800e62c <_dtoa_r+0x8e4>
 800e63e:	9b07      	ldr	r3, [sp, #28]
 800e640:	9704      	str	r7, [sp, #16]
 800e642:	2b00      	cmp	r3, #0
 800e644:	dc20      	bgt.n	800e688 <_dtoa_r+0x940>
 800e646:	9300      	str	r3, [sp, #0]
 800e648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e64a:	2b02      	cmp	r3, #2
 800e64c:	dd1e      	ble.n	800e68c <_dtoa_r+0x944>
 800e64e:	9b00      	ldr	r3, [sp, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	f47f aec0 	bne.w	800e3d6 <_dtoa_r+0x68e>
 800e656:	4621      	mov	r1, r4
 800e658:	2205      	movs	r2, #5
 800e65a:	4658      	mov	r0, fp
 800e65c:	f000 fa9a 	bl	800eb94 <__multadd>
 800e660:	4601      	mov	r1, r0
 800e662:	4604      	mov	r4, r0
 800e664:	4648      	mov	r0, r9
 800e666:	f000 fcad 	bl	800efc4 <__mcmp>
 800e66a:	2800      	cmp	r0, #0
 800e66c:	f77f aeb3 	ble.w	800e3d6 <_dtoa_r+0x68e>
 800e670:	4656      	mov	r6, sl
 800e672:	2331      	movs	r3, #49	@ 0x31
 800e674:	f806 3b01 	strb.w	r3, [r6], #1
 800e678:	9b04      	ldr	r3, [sp, #16]
 800e67a:	3301      	adds	r3, #1
 800e67c:	9304      	str	r3, [sp, #16]
 800e67e:	e6ae      	b.n	800e3de <_dtoa_r+0x696>
 800e680:	9c07      	ldr	r4, [sp, #28]
 800e682:	9704      	str	r7, [sp, #16]
 800e684:	4625      	mov	r5, r4
 800e686:	e7f3      	b.n	800e670 <_dtoa_r+0x928>
 800e688:	9b07      	ldr	r3, [sp, #28]
 800e68a:	9300      	str	r3, [sp, #0]
 800e68c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e68e:	2b00      	cmp	r3, #0
 800e690:	f000 8104 	beq.w	800e89c <_dtoa_r+0xb54>
 800e694:	2e00      	cmp	r6, #0
 800e696:	dd05      	ble.n	800e6a4 <_dtoa_r+0x95c>
 800e698:	4629      	mov	r1, r5
 800e69a:	4632      	mov	r2, r6
 800e69c:	4658      	mov	r0, fp
 800e69e:	f000 fc25 	bl	800eeec <__lshift>
 800e6a2:	4605      	mov	r5, r0
 800e6a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d05a      	beq.n	800e760 <_dtoa_r+0xa18>
 800e6aa:	6869      	ldr	r1, [r5, #4]
 800e6ac:	4658      	mov	r0, fp
 800e6ae:	f000 fa0f 	bl	800ead0 <_Balloc>
 800e6b2:	4606      	mov	r6, r0
 800e6b4:	b928      	cbnz	r0, 800e6c2 <_dtoa_r+0x97a>
 800e6b6:	4b84      	ldr	r3, [pc, #528]	@ (800e8c8 <_dtoa_r+0xb80>)
 800e6b8:	4602      	mov	r2, r0
 800e6ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e6be:	f7ff bb5a 	b.w	800dd76 <_dtoa_r+0x2e>
 800e6c2:	692a      	ldr	r2, [r5, #16]
 800e6c4:	3202      	adds	r2, #2
 800e6c6:	0092      	lsls	r2, r2, #2
 800e6c8:	f105 010c 	add.w	r1, r5, #12
 800e6cc:	300c      	adds	r0, #12
 800e6ce:	f7ff faa2 	bl	800dc16 <memcpy>
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	4631      	mov	r1, r6
 800e6d6:	4658      	mov	r0, fp
 800e6d8:	f000 fc08 	bl	800eeec <__lshift>
 800e6dc:	f10a 0301 	add.w	r3, sl, #1
 800e6e0:	9307      	str	r3, [sp, #28]
 800e6e2:	9b00      	ldr	r3, [sp, #0]
 800e6e4:	4453      	add	r3, sl
 800e6e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e6e8:	9b02      	ldr	r3, [sp, #8]
 800e6ea:	f003 0301 	and.w	r3, r3, #1
 800e6ee:	462f      	mov	r7, r5
 800e6f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6f2:	4605      	mov	r5, r0
 800e6f4:	9b07      	ldr	r3, [sp, #28]
 800e6f6:	4621      	mov	r1, r4
 800e6f8:	3b01      	subs	r3, #1
 800e6fa:	4648      	mov	r0, r9
 800e6fc:	9300      	str	r3, [sp, #0]
 800e6fe:	f7ff fa98 	bl	800dc32 <quorem>
 800e702:	4639      	mov	r1, r7
 800e704:	9002      	str	r0, [sp, #8]
 800e706:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e70a:	4648      	mov	r0, r9
 800e70c:	f000 fc5a 	bl	800efc4 <__mcmp>
 800e710:	462a      	mov	r2, r5
 800e712:	9008      	str	r0, [sp, #32]
 800e714:	4621      	mov	r1, r4
 800e716:	4658      	mov	r0, fp
 800e718:	f000 fc70 	bl	800effc <__mdiff>
 800e71c:	68c2      	ldr	r2, [r0, #12]
 800e71e:	4606      	mov	r6, r0
 800e720:	bb02      	cbnz	r2, 800e764 <_dtoa_r+0xa1c>
 800e722:	4601      	mov	r1, r0
 800e724:	4648      	mov	r0, r9
 800e726:	f000 fc4d 	bl	800efc4 <__mcmp>
 800e72a:	4602      	mov	r2, r0
 800e72c:	4631      	mov	r1, r6
 800e72e:	4658      	mov	r0, fp
 800e730:	920e      	str	r2, [sp, #56]	@ 0x38
 800e732:	f000 fa0d 	bl	800eb50 <_Bfree>
 800e736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e738:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e73a:	9e07      	ldr	r6, [sp, #28]
 800e73c:	ea43 0102 	orr.w	r1, r3, r2
 800e740:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e742:	4319      	orrs	r1, r3
 800e744:	d110      	bne.n	800e768 <_dtoa_r+0xa20>
 800e746:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e74a:	d029      	beq.n	800e7a0 <_dtoa_r+0xa58>
 800e74c:	9b08      	ldr	r3, [sp, #32]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	dd02      	ble.n	800e758 <_dtoa_r+0xa10>
 800e752:	9b02      	ldr	r3, [sp, #8]
 800e754:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e758:	9b00      	ldr	r3, [sp, #0]
 800e75a:	f883 8000 	strb.w	r8, [r3]
 800e75e:	e63f      	b.n	800e3e0 <_dtoa_r+0x698>
 800e760:	4628      	mov	r0, r5
 800e762:	e7bb      	b.n	800e6dc <_dtoa_r+0x994>
 800e764:	2201      	movs	r2, #1
 800e766:	e7e1      	b.n	800e72c <_dtoa_r+0x9e4>
 800e768:	9b08      	ldr	r3, [sp, #32]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	db04      	blt.n	800e778 <_dtoa_r+0xa30>
 800e76e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e770:	430b      	orrs	r3, r1
 800e772:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e774:	430b      	orrs	r3, r1
 800e776:	d120      	bne.n	800e7ba <_dtoa_r+0xa72>
 800e778:	2a00      	cmp	r2, #0
 800e77a:	dded      	ble.n	800e758 <_dtoa_r+0xa10>
 800e77c:	4649      	mov	r1, r9
 800e77e:	2201      	movs	r2, #1
 800e780:	4658      	mov	r0, fp
 800e782:	f000 fbb3 	bl	800eeec <__lshift>
 800e786:	4621      	mov	r1, r4
 800e788:	4681      	mov	r9, r0
 800e78a:	f000 fc1b 	bl	800efc4 <__mcmp>
 800e78e:	2800      	cmp	r0, #0
 800e790:	dc03      	bgt.n	800e79a <_dtoa_r+0xa52>
 800e792:	d1e1      	bne.n	800e758 <_dtoa_r+0xa10>
 800e794:	f018 0f01 	tst.w	r8, #1
 800e798:	d0de      	beq.n	800e758 <_dtoa_r+0xa10>
 800e79a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e79e:	d1d8      	bne.n	800e752 <_dtoa_r+0xa0a>
 800e7a0:	9a00      	ldr	r2, [sp, #0]
 800e7a2:	2339      	movs	r3, #57	@ 0x39
 800e7a4:	7013      	strb	r3, [r2, #0]
 800e7a6:	4633      	mov	r3, r6
 800e7a8:	461e      	mov	r6, r3
 800e7aa:	3b01      	subs	r3, #1
 800e7ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e7b0:	2a39      	cmp	r2, #57	@ 0x39
 800e7b2:	d052      	beq.n	800e85a <_dtoa_r+0xb12>
 800e7b4:	3201      	adds	r2, #1
 800e7b6:	701a      	strb	r2, [r3, #0]
 800e7b8:	e612      	b.n	800e3e0 <_dtoa_r+0x698>
 800e7ba:	2a00      	cmp	r2, #0
 800e7bc:	dd07      	ble.n	800e7ce <_dtoa_r+0xa86>
 800e7be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e7c2:	d0ed      	beq.n	800e7a0 <_dtoa_r+0xa58>
 800e7c4:	9a00      	ldr	r2, [sp, #0]
 800e7c6:	f108 0301 	add.w	r3, r8, #1
 800e7ca:	7013      	strb	r3, [r2, #0]
 800e7cc:	e608      	b.n	800e3e0 <_dtoa_r+0x698>
 800e7ce:	9b07      	ldr	r3, [sp, #28]
 800e7d0:	9a07      	ldr	r2, [sp, #28]
 800e7d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e7d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7d8:	4293      	cmp	r3, r2
 800e7da:	d028      	beq.n	800e82e <_dtoa_r+0xae6>
 800e7dc:	4649      	mov	r1, r9
 800e7de:	2300      	movs	r3, #0
 800e7e0:	220a      	movs	r2, #10
 800e7e2:	4658      	mov	r0, fp
 800e7e4:	f000 f9d6 	bl	800eb94 <__multadd>
 800e7e8:	42af      	cmp	r7, r5
 800e7ea:	4681      	mov	r9, r0
 800e7ec:	f04f 0300 	mov.w	r3, #0
 800e7f0:	f04f 020a 	mov.w	r2, #10
 800e7f4:	4639      	mov	r1, r7
 800e7f6:	4658      	mov	r0, fp
 800e7f8:	d107      	bne.n	800e80a <_dtoa_r+0xac2>
 800e7fa:	f000 f9cb 	bl	800eb94 <__multadd>
 800e7fe:	4607      	mov	r7, r0
 800e800:	4605      	mov	r5, r0
 800e802:	9b07      	ldr	r3, [sp, #28]
 800e804:	3301      	adds	r3, #1
 800e806:	9307      	str	r3, [sp, #28]
 800e808:	e774      	b.n	800e6f4 <_dtoa_r+0x9ac>
 800e80a:	f000 f9c3 	bl	800eb94 <__multadd>
 800e80e:	4629      	mov	r1, r5
 800e810:	4607      	mov	r7, r0
 800e812:	2300      	movs	r3, #0
 800e814:	220a      	movs	r2, #10
 800e816:	4658      	mov	r0, fp
 800e818:	f000 f9bc 	bl	800eb94 <__multadd>
 800e81c:	4605      	mov	r5, r0
 800e81e:	e7f0      	b.n	800e802 <_dtoa_r+0xaba>
 800e820:	9b00      	ldr	r3, [sp, #0]
 800e822:	2b00      	cmp	r3, #0
 800e824:	bfcc      	ite	gt
 800e826:	461e      	movgt	r6, r3
 800e828:	2601      	movle	r6, #1
 800e82a:	4456      	add	r6, sl
 800e82c:	2700      	movs	r7, #0
 800e82e:	4649      	mov	r1, r9
 800e830:	2201      	movs	r2, #1
 800e832:	4658      	mov	r0, fp
 800e834:	f000 fb5a 	bl	800eeec <__lshift>
 800e838:	4621      	mov	r1, r4
 800e83a:	4681      	mov	r9, r0
 800e83c:	f000 fbc2 	bl	800efc4 <__mcmp>
 800e840:	2800      	cmp	r0, #0
 800e842:	dcb0      	bgt.n	800e7a6 <_dtoa_r+0xa5e>
 800e844:	d102      	bne.n	800e84c <_dtoa_r+0xb04>
 800e846:	f018 0f01 	tst.w	r8, #1
 800e84a:	d1ac      	bne.n	800e7a6 <_dtoa_r+0xa5e>
 800e84c:	4633      	mov	r3, r6
 800e84e:	461e      	mov	r6, r3
 800e850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e854:	2a30      	cmp	r2, #48	@ 0x30
 800e856:	d0fa      	beq.n	800e84e <_dtoa_r+0xb06>
 800e858:	e5c2      	b.n	800e3e0 <_dtoa_r+0x698>
 800e85a:	459a      	cmp	sl, r3
 800e85c:	d1a4      	bne.n	800e7a8 <_dtoa_r+0xa60>
 800e85e:	9b04      	ldr	r3, [sp, #16]
 800e860:	3301      	adds	r3, #1
 800e862:	9304      	str	r3, [sp, #16]
 800e864:	2331      	movs	r3, #49	@ 0x31
 800e866:	f88a 3000 	strb.w	r3, [sl]
 800e86a:	e5b9      	b.n	800e3e0 <_dtoa_r+0x698>
 800e86c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e86e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e8cc <_dtoa_r+0xb84>
 800e872:	b11b      	cbz	r3, 800e87c <_dtoa_r+0xb34>
 800e874:	f10a 0308 	add.w	r3, sl, #8
 800e878:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e87a:	6013      	str	r3, [r2, #0]
 800e87c:	4650      	mov	r0, sl
 800e87e:	b019      	add	sp, #100	@ 0x64
 800e880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e886:	2b01      	cmp	r3, #1
 800e888:	f77f ae37 	ble.w	800e4fa <_dtoa_r+0x7b2>
 800e88c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e88e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e890:	2001      	movs	r0, #1
 800e892:	e655      	b.n	800e540 <_dtoa_r+0x7f8>
 800e894:	9b00      	ldr	r3, [sp, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	f77f aed6 	ble.w	800e648 <_dtoa_r+0x900>
 800e89c:	4656      	mov	r6, sl
 800e89e:	4621      	mov	r1, r4
 800e8a0:	4648      	mov	r0, r9
 800e8a2:	f7ff f9c6 	bl	800dc32 <quorem>
 800e8a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e8aa:	f806 8b01 	strb.w	r8, [r6], #1
 800e8ae:	9b00      	ldr	r3, [sp, #0]
 800e8b0:	eba6 020a 	sub.w	r2, r6, sl
 800e8b4:	4293      	cmp	r3, r2
 800e8b6:	ddb3      	ble.n	800e820 <_dtoa_r+0xad8>
 800e8b8:	4649      	mov	r1, r9
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	220a      	movs	r2, #10
 800e8be:	4658      	mov	r0, fp
 800e8c0:	f000 f968 	bl	800eb94 <__multadd>
 800e8c4:	4681      	mov	r9, r0
 800e8c6:	e7ea      	b.n	800e89e <_dtoa_r+0xb56>
 800e8c8:	08010ffd 	.word	0x08010ffd
 800e8cc:	08010f81 	.word	0x08010f81

0800e8d0 <_free_r>:
 800e8d0:	b538      	push	{r3, r4, r5, lr}
 800e8d2:	4605      	mov	r5, r0
 800e8d4:	2900      	cmp	r1, #0
 800e8d6:	d041      	beq.n	800e95c <_free_r+0x8c>
 800e8d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8dc:	1f0c      	subs	r4, r1, #4
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	bfb8      	it	lt
 800e8e2:	18e4      	addlt	r4, r4, r3
 800e8e4:	f000 f8e8 	bl	800eab8 <__malloc_lock>
 800e8e8:	4a1d      	ldr	r2, [pc, #116]	@ (800e960 <_free_r+0x90>)
 800e8ea:	6813      	ldr	r3, [r2, #0]
 800e8ec:	b933      	cbnz	r3, 800e8fc <_free_r+0x2c>
 800e8ee:	6063      	str	r3, [r4, #4]
 800e8f0:	6014      	str	r4, [r2, #0]
 800e8f2:	4628      	mov	r0, r5
 800e8f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8f8:	f000 b8e4 	b.w	800eac4 <__malloc_unlock>
 800e8fc:	42a3      	cmp	r3, r4
 800e8fe:	d908      	bls.n	800e912 <_free_r+0x42>
 800e900:	6820      	ldr	r0, [r4, #0]
 800e902:	1821      	adds	r1, r4, r0
 800e904:	428b      	cmp	r3, r1
 800e906:	bf01      	itttt	eq
 800e908:	6819      	ldreq	r1, [r3, #0]
 800e90a:	685b      	ldreq	r3, [r3, #4]
 800e90c:	1809      	addeq	r1, r1, r0
 800e90e:	6021      	streq	r1, [r4, #0]
 800e910:	e7ed      	b.n	800e8ee <_free_r+0x1e>
 800e912:	461a      	mov	r2, r3
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	b10b      	cbz	r3, 800e91c <_free_r+0x4c>
 800e918:	42a3      	cmp	r3, r4
 800e91a:	d9fa      	bls.n	800e912 <_free_r+0x42>
 800e91c:	6811      	ldr	r1, [r2, #0]
 800e91e:	1850      	adds	r0, r2, r1
 800e920:	42a0      	cmp	r0, r4
 800e922:	d10b      	bne.n	800e93c <_free_r+0x6c>
 800e924:	6820      	ldr	r0, [r4, #0]
 800e926:	4401      	add	r1, r0
 800e928:	1850      	adds	r0, r2, r1
 800e92a:	4283      	cmp	r3, r0
 800e92c:	6011      	str	r1, [r2, #0]
 800e92e:	d1e0      	bne.n	800e8f2 <_free_r+0x22>
 800e930:	6818      	ldr	r0, [r3, #0]
 800e932:	685b      	ldr	r3, [r3, #4]
 800e934:	6053      	str	r3, [r2, #4]
 800e936:	4408      	add	r0, r1
 800e938:	6010      	str	r0, [r2, #0]
 800e93a:	e7da      	b.n	800e8f2 <_free_r+0x22>
 800e93c:	d902      	bls.n	800e944 <_free_r+0x74>
 800e93e:	230c      	movs	r3, #12
 800e940:	602b      	str	r3, [r5, #0]
 800e942:	e7d6      	b.n	800e8f2 <_free_r+0x22>
 800e944:	6820      	ldr	r0, [r4, #0]
 800e946:	1821      	adds	r1, r4, r0
 800e948:	428b      	cmp	r3, r1
 800e94a:	bf04      	itt	eq
 800e94c:	6819      	ldreq	r1, [r3, #0]
 800e94e:	685b      	ldreq	r3, [r3, #4]
 800e950:	6063      	str	r3, [r4, #4]
 800e952:	bf04      	itt	eq
 800e954:	1809      	addeq	r1, r1, r0
 800e956:	6021      	streq	r1, [r4, #0]
 800e958:	6054      	str	r4, [r2, #4]
 800e95a:	e7ca      	b.n	800e8f2 <_free_r+0x22>
 800e95c:	bd38      	pop	{r3, r4, r5, pc}
 800e95e:	bf00      	nop
 800e960:	2000549c 	.word	0x2000549c

0800e964 <malloc>:
 800e964:	4b02      	ldr	r3, [pc, #8]	@ (800e970 <malloc+0xc>)
 800e966:	4601      	mov	r1, r0
 800e968:	6818      	ldr	r0, [r3, #0]
 800e96a:	f000 b825 	b.w	800e9b8 <_malloc_r>
 800e96e:	bf00      	nop
 800e970:	20000040 	.word	0x20000040

0800e974 <sbrk_aligned>:
 800e974:	b570      	push	{r4, r5, r6, lr}
 800e976:	4e0f      	ldr	r6, [pc, #60]	@ (800e9b4 <sbrk_aligned+0x40>)
 800e978:	460c      	mov	r4, r1
 800e97a:	6831      	ldr	r1, [r6, #0]
 800e97c:	4605      	mov	r5, r0
 800e97e:	b911      	cbnz	r1, 800e986 <sbrk_aligned+0x12>
 800e980:	f000 fe46 	bl	800f610 <_sbrk_r>
 800e984:	6030      	str	r0, [r6, #0]
 800e986:	4621      	mov	r1, r4
 800e988:	4628      	mov	r0, r5
 800e98a:	f000 fe41 	bl	800f610 <_sbrk_r>
 800e98e:	1c43      	adds	r3, r0, #1
 800e990:	d103      	bne.n	800e99a <sbrk_aligned+0x26>
 800e992:	f04f 34ff 	mov.w	r4, #4294967295
 800e996:	4620      	mov	r0, r4
 800e998:	bd70      	pop	{r4, r5, r6, pc}
 800e99a:	1cc4      	adds	r4, r0, #3
 800e99c:	f024 0403 	bic.w	r4, r4, #3
 800e9a0:	42a0      	cmp	r0, r4
 800e9a2:	d0f8      	beq.n	800e996 <sbrk_aligned+0x22>
 800e9a4:	1a21      	subs	r1, r4, r0
 800e9a6:	4628      	mov	r0, r5
 800e9a8:	f000 fe32 	bl	800f610 <_sbrk_r>
 800e9ac:	3001      	adds	r0, #1
 800e9ae:	d1f2      	bne.n	800e996 <sbrk_aligned+0x22>
 800e9b0:	e7ef      	b.n	800e992 <sbrk_aligned+0x1e>
 800e9b2:	bf00      	nop
 800e9b4:	20005498 	.word	0x20005498

0800e9b8 <_malloc_r>:
 800e9b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9bc:	1ccd      	adds	r5, r1, #3
 800e9be:	f025 0503 	bic.w	r5, r5, #3
 800e9c2:	3508      	adds	r5, #8
 800e9c4:	2d0c      	cmp	r5, #12
 800e9c6:	bf38      	it	cc
 800e9c8:	250c      	movcc	r5, #12
 800e9ca:	2d00      	cmp	r5, #0
 800e9cc:	4606      	mov	r6, r0
 800e9ce:	db01      	blt.n	800e9d4 <_malloc_r+0x1c>
 800e9d0:	42a9      	cmp	r1, r5
 800e9d2:	d904      	bls.n	800e9de <_malloc_r+0x26>
 800e9d4:	230c      	movs	r3, #12
 800e9d6:	6033      	str	r3, [r6, #0]
 800e9d8:	2000      	movs	r0, #0
 800e9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eab4 <_malloc_r+0xfc>
 800e9e2:	f000 f869 	bl	800eab8 <__malloc_lock>
 800e9e6:	f8d8 3000 	ldr.w	r3, [r8]
 800e9ea:	461c      	mov	r4, r3
 800e9ec:	bb44      	cbnz	r4, 800ea40 <_malloc_r+0x88>
 800e9ee:	4629      	mov	r1, r5
 800e9f0:	4630      	mov	r0, r6
 800e9f2:	f7ff ffbf 	bl	800e974 <sbrk_aligned>
 800e9f6:	1c43      	adds	r3, r0, #1
 800e9f8:	4604      	mov	r4, r0
 800e9fa:	d158      	bne.n	800eaae <_malloc_r+0xf6>
 800e9fc:	f8d8 4000 	ldr.w	r4, [r8]
 800ea00:	4627      	mov	r7, r4
 800ea02:	2f00      	cmp	r7, #0
 800ea04:	d143      	bne.n	800ea8e <_malloc_r+0xd6>
 800ea06:	2c00      	cmp	r4, #0
 800ea08:	d04b      	beq.n	800eaa2 <_malloc_r+0xea>
 800ea0a:	6823      	ldr	r3, [r4, #0]
 800ea0c:	4639      	mov	r1, r7
 800ea0e:	4630      	mov	r0, r6
 800ea10:	eb04 0903 	add.w	r9, r4, r3
 800ea14:	f000 fdfc 	bl	800f610 <_sbrk_r>
 800ea18:	4581      	cmp	r9, r0
 800ea1a:	d142      	bne.n	800eaa2 <_malloc_r+0xea>
 800ea1c:	6821      	ldr	r1, [r4, #0]
 800ea1e:	1a6d      	subs	r5, r5, r1
 800ea20:	4629      	mov	r1, r5
 800ea22:	4630      	mov	r0, r6
 800ea24:	f7ff ffa6 	bl	800e974 <sbrk_aligned>
 800ea28:	3001      	adds	r0, #1
 800ea2a:	d03a      	beq.n	800eaa2 <_malloc_r+0xea>
 800ea2c:	6823      	ldr	r3, [r4, #0]
 800ea2e:	442b      	add	r3, r5
 800ea30:	6023      	str	r3, [r4, #0]
 800ea32:	f8d8 3000 	ldr.w	r3, [r8]
 800ea36:	685a      	ldr	r2, [r3, #4]
 800ea38:	bb62      	cbnz	r2, 800ea94 <_malloc_r+0xdc>
 800ea3a:	f8c8 7000 	str.w	r7, [r8]
 800ea3e:	e00f      	b.n	800ea60 <_malloc_r+0xa8>
 800ea40:	6822      	ldr	r2, [r4, #0]
 800ea42:	1b52      	subs	r2, r2, r5
 800ea44:	d420      	bmi.n	800ea88 <_malloc_r+0xd0>
 800ea46:	2a0b      	cmp	r2, #11
 800ea48:	d917      	bls.n	800ea7a <_malloc_r+0xc2>
 800ea4a:	1961      	adds	r1, r4, r5
 800ea4c:	42a3      	cmp	r3, r4
 800ea4e:	6025      	str	r5, [r4, #0]
 800ea50:	bf18      	it	ne
 800ea52:	6059      	strne	r1, [r3, #4]
 800ea54:	6863      	ldr	r3, [r4, #4]
 800ea56:	bf08      	it	eq
 800ea58:	f8c8 1000 	streq.w	r1, [r8]
 800ea5c:	5162      	str	r2, [r4, r5]
 800ea5e:	604b      	str	r3, [r1, #4]
 800ea60:	4630      	mov	r0, r6
 800ea62:	f000 f82f 	bl	800eac4 <__malloc_unlock>
 800ea66:	f104 000b 	add.w	r0, r4, #11
 800ea6a:	1d23      	adds	r3, r4, #4
 800ea6c:	f020 0007 	bic.w	r0, r0, #7
 800ea70:	1ac2      	subs	r2, r0, r3
 800ea72:	bf1c      	itt	ne
 800ea74:	1a1b      	subne	r3, r3, r0
 800ea76:	50a3      	strne	r3, [r4, r2]
 800ea78:	e7af      	b.n	800e9da <_malloc_r+0x22>
 800ea7a:	6862      	ldr	r2, [r4, #4]
 800ea7c:	42a3      	cmp	r3, r4
 800ea7e:	bf0c      	ite	eq
 800ea80:	f8c8 2000 	streq.w	r2, [r8]
 800ea84:	605a      	strne	r2, [r3, #4]
 800ea86:	e7eb      	b.n	800ea60 <_malloc_r+0xa8>
 800ea88:	4623      	mov	r3, r4
 800ea8a:	6864      	ldr	r4, [r4, #4]
 800ea8c:	e7ae      	b.n	800e9ec <_malloc_r+0x34>
 800ea8e:	463c      	mov	r4, r7
 800ea90:	687f      	ldr	r7, [r7, #4]
 800ea92:	e7b6      	b.n	800ea02 <_malloc_r+0x4a>
 800ea94:	461a      	mov	r2, r3
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	42a3      	cmp	r3, r4
 800ea9a:	d1fb      	bne.n	800ea94 <_malloc_r+0xdc>
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	6053      	str	r3, [r2, #4]
 800eaa0:	e7de      	b.n	800ea60 <_malloc_r+0xa8>
 800eaa2:	230c      	movs	r3, #12
 800eaa4:	6033      	str	r3, [r6, #0]
 800eaa6:	4630      	mov	r0, r6
 800eaa8:	f000 f80c 	bl	800eac4 <__malloc_unlock>
 800eaac:	e794      	b.n	800e9d8 <_malloc_r+0x20>
 800eaae:	6005      	str	r5, [r0, #0]
 800eab0:	e7d6      	b.n	800ea60 <_malloc_r+0xa8>
 800eab2:	bf00      	nop
 800eab4:	2000549c 	.word	0x2000549c

0800eab8 <__malloc_lock>:
 800eab8:	4801      	ldr	r0, [pc, #4]	@ (800eac0 <__malloc_lock+0x8>)
 800eaba:	f7ff b8aa 	b.w	800dc12 <__retarget_lock_acquire_recursive>
 800eabe:	bf00      	nop
 800eac0:	20005494 	.word	0x20005494

0800eac4 <__malloc_unlock>:
 800eac4:	4801      	ldr	r0, [pc, #4]	@ (800eacc <__malloc_unlock+0x8>)
 800eac6:	f7ff b8a5 	b.w	800dc14 <__retarget_lock_release_recursive>
 800eaca:	bf00      	nop
 800eacc:	20005494 	.word	0x20005494

0800ead0 <_Balloc>:
 800ead0:	b570      	push	{r4, r5, r6, lr}
 800ead2:	69c6      	ldr	r6, [r0, #28]
 800ead4:	4604      	mov	r4, r0
 800ead6:	460d      	mov	r5, r1
 800ead8:	b976      	cbnz	r6, 800eaf8 <_Balloc+0x28>
 800eada:	2010      	movs	r0, #16
 800eadc:	f7ff ff42 	bl	800e964 <malloc>
 800eae0:	4602      	mov	r2, r0
 800eae2:	61e0      	str	r0, [r4, #28]
 800eae4:	b920      	cbnz	r0, 800eaf0 <_Balloc+0x20>
 800eae6:	4b18      	ldr	r3, [pc, #96]	@ (800eb48 <_Balloc+0x78>)
 800eae8:	4818      	ldr	r0, [pc, #96]	@ (800eb4c <_Balloc+0x7c>)
 800eaea:	216b      	movs	r1, #107	@ 0x6b
 800eaec:	f000 fda0 	bl	800f630 <__assert_func>
 800eaf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eaf4:	6006      	str	r6, [r0, #0]
 800eaf6:	60c6      	str	r6, [r0, #12]
 800eaf8:	69e6      	ldr	r6, [r4, #28]
 800eafa:	68f3      	ldr	r3, [r6, #12]
 800eafc:	b183      	cbz	r3, 800eb20 <_Balloc+0x50>
 800eafe:	69e3      	ldr	r3, [r4, #28]
 800eb00:	68db      	ldr	r3, [r3, #12]
 800eb02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eb06:	b9b8      	cbnz	r0, 800eb38 <_Balloc+0x68>
 800eb08:	2101      	movs	r1, #1
 800eb0a:	fa01 f605 	lsl.w	r6, r1, r5
 800eb0e:	1d72      	adds	r2, r6, #5
 800eb10:	0092      	lsls	r2, r2, #2
 800eb12:	4620      	mov	r0, r4
 800eb14:	f000 fdaa 	bl	800f66c <_calloc_r>
 800eb18:	b160      	cbz	r0, 800eb34 <_Balloc+0x64>
 800eb1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eb1e:	e00e      	b.n	800eb3e <_Balloc+0x6e>
 800eb20:	2221      	movs	r2, #33	@ 0x21
 800eb22:	2104      	movs	r1, #4
 800eb24:	4620      	mov	r0, r4
 800eb26:	f000 fda1 	bl	800f66c <_calloc_r>
 800eb2a:	69e3      	ldr	r3, [r4, #28]
 800eb2c:	60f0      	str	r0, [r6, #12]
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d1e4      	bne.n	800eafe <_Balloc+0x2e>
 800eb34:	2000      	movs	r0, #0
 800eb36:	bd70      	pop	{r4, r5, r6, pc}
 800eb38:	6802      	ldr	r2, [r0, #0]
 800eb3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eb3e:	2300      	movs	r3, #0
 800eb40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eb44:	e7f7      	b.n	800eb36 <_Balloc+0x66>
 800eb46:	bf00      	nop
 800eb48:	08010f8e 	.word	0x08010f8e
 800eb4c:	0801100e 	.word	0x0801100e

0800eb50 <_Bfree>:
 800eb50:	b570      	push	{r4, r5, r6, lr}
 800eb52:	69c6      	ldr	r6, [r0, #28]
 800eb54:	4605      	mov	r5, r0
 800eb56:	460c      	mov	r4, r1
 800eb58:	b976      	cbnz	r6, 800eb78 <_Bfree+0x28>
 800eb5a:	2010      	movs	r0, #16
 800eb5c:	f7ff ff02 	bl	800e964 <malloc>
 800eb60:	4602      	mov	r2, r0
 800eb62:	61e8      	str	r0, [r5, #28]
 800eb64:	b920      	cbnz	r0, 800eb70 <_Bfree+0x20>
 800eb66:	4b09      	ldr	r3, [pc, #36]	@ (800eb8c <_Bfree+0x3c>)
 800eb68:	4809      	ldr	r0, [pc, #36]	@ (800eb90 <_Bfree+0x40>)
 800eb6a:	218f      	movs	r1, #143	@ 0x8f
 800eb6c:	f000 fd60 	bl	800f630 <__assert_func>
 800eb70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb74:	6006      	str	r6, [r0, #0]
 800eb76:	60c6      	str	r6, [r0, #12]
 800eb78:	b13c      	cbz	r4, 800eb8a <_Bfree+0x3a>
 800eb7a:	69eb      	ldr	r3, [r5, #28]
 800eb7c:	6862      	ldr	r2, [r4, #4]
 800eb7e:	68db      	ldr	r3, [r3, #12]
 800eb80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb84:	6021      	str	r1, [r4, #0]
 800eb86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eb8a:	bd70      	pop	{r4, r5, r6, pc}
 800eb8c:	08010f8e 	.word	0x08010f8e
 800eb90:	0801100e 	.word	0x0801100e

0800eb94 <__multadd>:
 800eb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb98:	690d      	ldr	r5, [r1, #16]
 800eb9a:	4607      	mov	r7, r0
 800eb9c:	460c      	mov	r4, r1
 800eb9e:	461e      	mov	r6, r3
 800eba0:	f101 0c14 	add.w	ip, r1, #20
 800eba4:	2000      	movs	r0, #0
 800eba6:	f8dc 3000 	ldr.w	r3, [ip]
 800ebaa:	b299      	uxth	r1, r3
 800ebac:	fb02 6101 	mla	r1, r2, r1, r6
 800ebb0:	0c1e      	lsrs	r6, r3, #16
 800ebb2:	0c0b      	lsrs	r3, r1, #16
 800ebb4:	fb02 3306 	mla	r3, r2, r6, r3
 800ebb8:	b289      	uxth	r1, r1
 800ebba:	3001      	adds	r0, #1
 800ebbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ebc0:	4285      	cmp	r5, r0
 800ebc2:	f84c 1b04 	str.w	r1, [ip], #4
 800ebc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ebca:	dcec      	bgt.n	800eba6 <__multadd+0x12>
 800ebcc:	b30e      	cbz	r6, 800ec12 <__multadd+0x7e>
 800ebce:	68a3      	ldr	r3, [r4, #8]
 800ebd0:	42ab      	cmp	r3, r5
 800ebd2:	dc19      	bgt.n	800ec08 <__multadd+0x74>
 800ebd4:	6861      	ldr	r1, [r4, #4]
 800ebd6:	4638      	mov	r0, r7
 800ebd8:	3101      	adds	r1, #1
 800ebda:	f7ff ff79 	bl	800ead0 <_Balloc>
 800ebde:	4680      	mov	r8, r0
 800ebe0:	b928      	cbnz	r0, 800ebee <__multadd+0x5a>
 800ebe2:	4602      	mov	r2, r0
 800ebe4:	4b0c      	ldr	r3, [pc, #48]	@ (800ec18 <__multadd+0x84>)
 800ebe6:	480d      	ldr	r0, [pc, #52]	@ (800ec1c <__multadd+0x88>)
 800ebe8:	21ba      	movs	r1, #186	@ 0xba
 800ebea:	f000 fd21 	bl	800f630 <__assert_func>
 800ebee:	6922      	ldr	r2, [r4, #16]
 800ebf0:	3202      	adds	r2, #2
 800ebf2:	f104 010c 	add.w	r1, r4, #12
 800ebf6:	0092      	lsls	r2, r2, #2
 800ebf8:	300c      	adds	r0, #12
 800ebfa:	f7ff f80c 	bl	800dc16 <memcpy>
 800ebfe:	4621      	mov	r1, r4
 800ec00:	4638      	mov	r0, r7
 800ec02:	f7ff ffa5 	bl	800eb50 <_Bfree>
 800ec06:	4644      	mov	r4, r8
 800ec08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ec0c:	3501      	adds	r5, #1
 800ec0e:	615e      	str	r6, [r3, #20]
 800ec10:	6125      	str	r5, [r4, #16]
 800ec12:	4620      	mov	r0, r4
 800ec14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec18:	08010ffd 	.word	0x08010ffd
 800ec1c:	0801100e 	.word	0x0801100e

0800ec20 <__hi0bits>:
 800ec20:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ec24:	4603      	mov	r3, r0
 800ec26:	bf36      	itet	cc
 800ec28:	0403      	lslcc	r3, r0, #16
 800ec2a:	2000      	movcs	r0, #0
 800ec2c:	2010      	movcc	r0, #16
 800ec2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ec32:	bf3c      	itt	cc
 800ec34:	021b      	lslcc	r3, r3, #8
 800ec36:	3008      	addcc	r0, #8
 800ec38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ec3c:	bf3c      	itt	cc
 800ec3e:	011b      	lslcc	r3, r3, #4
 800ec40:	3004      	addcc	r0, #4
 800ec42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec46:	bf3c      	itt	cc
 800ec48:	009b      	lslcc	r3, r3, #2
 800ec4a:	3002      	addcc	r0, #2
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	db05      	blt.n	800ec5c <__hi0bits+0x3c>
 800ec50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ec54:	f100 0001 	add.w	r0, r0, #1
 800ec58:	bf08      	it	eq
 800ec5a:	2020      	moveq	r0, #32
 800ec5c:	4770      	bx	lr

0800ec5e <__lo0bits>:
 800ec5e:	6803      	ldr	r3, [r0, #0]
 800ec60:	4602      	mov	r2, r0
 800ec62:	f013 0007 	ands.w	r0, r3, #7
 800ec66:	d00b      	beq.n	800ec80 <__lo0bits+0x22>
 800ec68:	07d9      	lsls	r1, r3, #31
 800ec6a:	d421      	bmi.n	800ecb0 <__lo0bits+0x52>
 800ec6c:	0798      	lsls	r0, r3, #30
 800ec6e:	bf49      	itett	mi
 800ec70:	085b      	lsrmi	r3, r3, #1
 800ec72:	089b      	lsrpl	r3, r3, #2
 800ec74:	2001      	movmi	r0, #1
 800ec76:	6013      	strmi	r3, [r2, #0]
 800ec78:	bf5c      	itt	pl
 800ec7a:	6013      	strpl	r3, [r2, #0]
 800ec7c:	2002      	movpl	r0, #2
 800ec7e:	4770      	bx	lr
 800ec80:	b299      	uxth	r1, r3
 800ec82:	b909      	cbnz	r1, 800ec88 <__lo0bits+0x2a>
 800ec84:	0c1b      	lsrs	r3, r3, #16
 800ec86:	2010      	movs	r0, #16
 800ec88:	b2d9      	uxtb	r1, r3
 800ec8a:	b909      	cbnz	r1, 800ec90 <__lo0bits+0x32>
 800ec8c:	3008      	adds	r0, #8
 800ec8e:	0a1b      	lsrs	r3, r3, #8
 800ec90:	0719      	lsls	r1, r3, #28
 800ec92:	bf04      	itt	eq
 800ec94:	091b      	lsreq	r3, r3, #4
 800ec96:	3004      	addeq	r0, #4
 800ec98:	0799      	lsls	r1, r3, #30
 800ec9a:	bf04      	itt	eq
 800ec9c:	089b      	lsreq	r3, r3, #2
 800ec9e:	3002      	addeq	r0, #2
 800eca0:	07d9      	lsls	r1, r3, #31
 800eca2:	d403      	bmi.n	800ecac <__lo0bits+0x4e>
 800eca4:	085b      	lsrs	r3, r3, #1
 800eca6:	f100 0001 	add.w	r0, r0, #1
 800ecaa:	d003      	beq.n	800ecb4 <__lo0bits+0x56>
 800ecac:	6013      	str	r3, [r2, #0]
 800ecae:	4770      	bx	lr
 800ecb0:	2000      	movs	r0, #0
 800ecb2:	4770      	bx	lr
 800ecb4:	2020      	movs	r0, #32
 800ecb6:	4770      	bx	lr

0800ecb8 <__i2b>:
 800ecb8:	b510      	push	{r4, lr}
 800ecba:	460c      	mov	r4, r1
 800ecbc:	2101      	movs	r1, #1
 800ecbe:	f7ff ff07 	bl	800ead0 <_Balloc>
 800ecc2:	4602      	mov	r2, r0
 800ecc4:	b928      	cbnz	r0, 800ecd2 <__i2b+0x1a>
 800ecc6:	4b05      	ldr	r3, [pc, #20]	@ (800ecdc <__i2b+0x24>)
 800ecc8:	4805      	ldr	r0, [pc, #20]	@ (800ece0 <__i2b+0x28>)
 800ecca:	f240 1145 	movw	r1, #325	@ 0x145
 800ecce:	f000 fcaf 	bl	800f630 <__assert_func>
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	6144      	str	r4, [r0, #20]
 800ecd6:	6103      	str	r3, [r0, #16]
 800ecd8:	bd10      	pop	{r4, pc}
 800ecda:	bf00      	nop
 800ecdc:	08010ffd 	.word	0x08010ffd
 800ece0:	0801100e 	.word	0x0801100e

0800ece4 <__multiply>:
 800ece4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ece8:	4614      	mov	r4, r2
 800ecea:	690a      	ldr	r2, [r1, #16]
 800ecec:	6923      	ldr	r3, [r4, #16]
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	bfa8      	it	ge
 800ecf2:	4623      	movge	r3, r4
 800ecf4:	460f      	mov	r7, r1
 800ecf6:	bfa4      	itt	ge
 800ecf8:	460c      	movge	r4, r1
 800ecfa:	461f      	movge	r7, r3
 800ecfc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ed00:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ed04:	68a3      	ldr	r3, [r4, #8]
 800ed06:	6861      	ldr	r1, [r4, #4]
 800ed08:	eb0a 0609 	add.w	r6, sl, r9
 800ed0c:	42b3      	cmp	r3, r6
 800ed0e:	b085      	sub	sp, #20
 800ed10:	bfb8      	it	lt
 800ed12:	3101      	addlt	r1, #1
 800ed14:	f7ff fedc 	bl	800ead0 <_Balloc>
 800ed18:	b930      	cbnz	r0, 800ed28 <__multiply+0x44>
 800ed1a:	4602      	mov	r2, r0
 800ed1c:	4b44      	ldr	r3, [pc, #272]	@ (800ee30 <__multiply+0x14c>)
 800ed1e:	4845      	ldr	r0, [pc, #276]	@ (800ee34 <__multiply+0x150>)
 800ed20:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ed24:	f000 fc84 	bl	800f630 <__assert_func>
 800ed28:	f100 0514 	add.w	r5, r0, #20
 800ed2c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ed30:	462b      	mov	r3, r5
 800ed32:	2200      	movs	r2, #0
 800ed34:	4543      	cmp	r3, r8
 800ed36:	d321      	bcc.n	800ed7c <__multiply+0x98>
 800ed38:	f107 0114 	add.w	r1, r7, #20
 800ed3c:	f104 0214 	add.w	r2, r4, #20
 800ed40:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ed44:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ed48:	9302      	str	r3, [sp, #8]
 800ed4a:	1b13      	subs	r3, r2, r4
 800ed4c:	3b15      	subs	r3, #21
 800ed4e:	f023 0303 	bic.w	r3, r3, #3
 800ed52:	3304      	adds	r3, #4
 800ed54:	f104 0715 	add.w	r7, r4, #21
 800ed58:	42ba      	cmp	r2, r7
 800ed5a:	bf38      	it	cc
 800ed5c:	2304      	movcc	r3, #4
 800ed5e:	9301      	str	r3, [sp, #4]
 800ed60:	9b02      	ldr	r3, [sp, #8]
 800ed62:	9103      	str	r1, [sp, #12]
 800ed64:	428b      	cmp	r3, r1
 800ed66:	d80c      	bhi.n	800ed82 <__multiply+0x9e>
 800ed68:	2e00      	cmp	r6, #0
 800ed6a:	dd03      	ble.n	800ed74 <__multiply+0x90>
 800ed6c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d05b      	beq.n	800ee2c <__multiply+0x148>
 800ed74:	6106      	str	r6, [r0, #16]
 800ed76:	b005      	add	sp, #20
 800ed78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed7c:	f843 2b04 	str.w	r2, [r3], #4
 800ed80:	e7d8      	b.n	800ed34 <__multiply+0x50>
 800ed82:	f8b1 a000 	ldrh.w	sl, [r1]
 800ed86:	f1ba 0f00 	cmp.w	sl, #0
 800ed8a:	d024      	beq.n	800edd6 <__multiply+0xf2>
 800ed8c:	f104 0e14 	add.w	lr, r4, #20
 800ed90:	46a9      	mov	r9, r5
 800ed92:	f04f 0c00 	mov.w	ip, #0
 800ed96:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ed9a:	f8d9 3000 	ldr.w	r3, [r9]
 800ed9e:	fa1f fb87 	uxth.w	fp, r7
 800eda2:	b29b      	uxth	r3, r3
 800eda4:	fb0a 330b 	mla	r3, sl, fp, r3
 800eda8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800edac:	f8d9 7000 	ldr.w	r7, [r9]
 800edb0:	4463      	add	r3, ip
 800edb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800edb6:	fb0a c70b 	mla	r7, sl, fp, ip
 800edba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800edbe:	b29b      	uxth	r3, r3
 800edc0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800edc4:	4572      	cmp	r2, lr
 800edc6:	f849 3b04 	str.w	r3, [r9], #4
 800edca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800edce:	d8e2      	bhi.n	800ed96 <__multiply+0xb2>
 800edd0:	9b01      	ldr	r3, [sp, #4]
 800edd2:	f845 c003 	str.w	ip, [r5, r3]
 800edd6:	9b03      	ldr	r3, [sp, #12]
 800edd8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800eddc:	3104      	adds	r1, #4
 800edde:	f1b9 0f00 	cmp.w	r9, #0
 800ede2:	d021      	beq.n	800ee28 <__multiply+0x144>
 800ede4:	682b      	ldr	r3, [r5, #0]
 800ede6:	f104 0c14 	add.w	ip, r4, #20
 800edea:	46ae      	mov	lr, r5
 800edec:	f04f 0a00 	mov.w	sl, #0
 800edf0:	f8bc b000 	ldrh.w	fp, [ip]
 800edf4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800edf8:	fb09 770b 	mla	r7, r9, fp, r7
 800edfc:	4457      	add	r7, sl
 800edfe:	b29b      	uxth	r3, r3
 800ee00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ee04:	f84e 3b04 	str.w	r3, [lr], #4
 800ee08:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ee0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ee10:	f8be 3000 	ldrh.w	r3, [lr]
 800ee14:	fb09 330a 	mla	r3, r9, sl, r3
 800ee18:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ee1c:	4562      	cmp	r2, ip
 800ee1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ee22:	d8e5      	bhi.n	800edf0 <__multiply+0x10c>
 800ee24:	9f01      	ldr	r7, [sp, #4]
 800ee26:	51eb      	str	r3, [r5, r7]
 800ee28:	3504      	adds	r5, #4
 800ee2a:	e799      	b.n	800ed60 <__multiply+0x7c>
 800ee2c:	3e01      	subs	r6, #1
 800ee2e:	e79b      	b.n	800ed68 <__multiply+0x84>
 800ee30:	08010ffd 	.word	0x08010ffd
 800ee34:	0801100e 	.word	0x0801100e

0800ee38 <__pow5mult>:
 800ee38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee3c:	4615      	mov	r5, r2
 800ee3e:	f012 0203 	ands.w	r2, r2, #3
 800ee42:	4607      	mov	r7, r0
 800ee44:	460e      	mov	r6, r1
 800ee46:	d007      	beq.n	800ee58 <__pow5mult+0x20>
 800ee48:	4c25      	ldr	r4, [pc, #148]	@ (800eee0 <__pow5mult+0xa8>)
 800ee4a:	3a01      	subs	r2, #1
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ee52:	f7ff fe9f 	bl	800eb94 <__multadd>
 800ee56:	4606      	mov	r6, r0
 800ee58:	10ad      	asrs	r5, r5, #2
 800ee5a:	d03d      	beq.n	800eed8 <__pow5mult+0xa0>
 800ee5c:	69fc      	ldr	r4, [r7, #28]
 800ee5e:	b97c      	cbnz	r4, 800ee80 <__pow5mult+0x48>
 800ee60:	2010      	movs	r0, #16
 800ee62:	f7ff fd7f 	bl	800e964 <malloc>
 800ee66:	4602      	mov	r2, r0
 800ee68:	61f8      	str	r0, [r7, #28]
 800ee6a:	b928      	cbnz	r0, 800ee78 <__pow5mult+0x40>
 800ee6c:	4b1d      	ldr	r3, [pc, #116]	@ (800eee4 <__pow5mult+0xac>)
 800ee6e:	481e      	ldr	r0, [pc, #120]	@ (800eee8 <__pow5mult+0xb0>)
 800ee70:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ee74:	f000 fbdc 	bl	800f630 <__assert_func>
 800ee78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee7c:	6004      	str	r4, [r0, #0]
 800ee7e:	60c4      	str	r4, [r0, #12]
 800ee80:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ee84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee88:	b94c      	cbnz	r4, 800ee9e <__pow5mult+0x66>
 800ee8a:	f240 2171 	movw	r1, #625	@ 0x271
 800ee8e:	4638      	mov	r0, r7
 800ee90:	f7ff ff12 	bl	800ecb8 <__i2b>
 800ee94:	2300      	movs	r3, #0
 800ee96:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee9a:	4604      	mov	r4, r0
 800ee9c:	6003      	str	r3, [r0, #0]
 800ee9e:	f04f 0900 	mov.w	r9, #0
 800eea2:	07eb      	lsls	r3, r5, #31
 800eea4:	d50a      	bpl.n	800eebc <__pow5mult+0x84>
 800eea6:	4631      	mov	r1, r6
 800eea8:	4622      	mov	r2, r4
 800eeaa:	4638      	mov	r0, r7
 800eeac:	f7ff ff1a 	bl	800ece4 <__multiply>
 800eeb0:	4631      	mov	r1, r6
 800eeb2:	4680      	mov	r8, r0
 800eeb4:	4638      	mov	r0, r7
 800eeb6:	f7ff fe4b 	bl	800eb50 <_Bfree>
 800eeba:	4646      	mov	r6, r8
 800eebc:	106d      	asrs	r5, r5, #1
 800eebe:	d00b      	beq.n	800eed8 <__pow5mult+0xa0>
 800eec0:	6820      	ldr	r0, [r4, #0]
 800eec2:	b938      	cbnz	r0, 800eed4 <__pow5mult+0x9c>
 800eec4:	4622      	mov	r2, r4
 800eec6:	4621      	mov	r1, r4
 800eec8:	4638      	mov	r0, r7
 800eeca:	f7ff ff0b 	bl	800ece4 <__multiply>
 800eece:	6020      	str	r0, [r4, #0]
 800eed0:	f8c0 9000 	str.w	r9, [r0]
 800eed4:	4604      	mov	r4, r0
 800eed6:	e7e4      	b.n	800eea2 <__pow5mult+0x6a>
 800eed8:	4630      	mov	r0, r6
 800eeda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eede:	bf00      	nop
 800eee0:	08011068 	.word	0x08011068
 800eee4:	08010f8e 	.word	0x08010f8e
 800eee8:	0801100e 	.word	0x0801100e

0800eeec <__lshift>:
 800eeec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eef0:	460c      	mov	r4, r1
 800eef2:	6849      	ldr	r1, [r1, #4]
 800eef4:	6923      	ldr	r3, [r4, #16]
 800eef6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eefa:	68a3      	ldr	r3, [r4, #8]
 800eefc:	4607      	mov	r7, r0
 800eefe:	4691      	mov	r9, r2
 800ef00:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ef04:	f108 0601 	add.w	r6, r8, #1
 800ef08:	42b3      	cmp	r3, r6
 800ef0a:	db0b      	blt.n	800ef24 <__lshift+0x38>
 800ef0c:	4638      	mov	r0, r7
 800ef0e:	f7ff fddf 	bl	800ead0 <_Balloc>
 800ef12:	4605      	mov	r5, r0
 800ef14:	b948      	cbnz	r0, 800ef2a <__lshift+0x3e>
 800ef16:	4602      	mov	r2, r0
 800ef18:	4b28      	ldr	r3, [pc, #160]	@ (800efbc <__lshift+0xd0>)
 800ef1a:	4829      	ldr	r0, [pc, #164]	@ (800efc0 <__lshift+0xd4>)
 800ef1c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ef20:	f000 fb86 	bl	800f630 <__assert_func>
 800ef24:	3101      	adds	r1, #1
 800ef26:	005b      	lsls	r3, r3, #1
 800ef28:	e7ee      	b.n	800ef08 <__lshift+0x1c>
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	f100 0114 	add.w	r1, r0, #20
 800ef30:	f100 0210 	add.w	r2, r0, #16
 800ef34:	4618      	mov	r0, r3
 800ef36:	4553      	cmp	r3, sl
 800ef38:	db33      	blt.n	800efa2 <__lshift+0xb6>
 800ef3a:	6920      	ldr	r0, [r4, #16]
 800ef3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ef40:	f104 0314 	add.w	r3, r4, #20
 800ef44:	f019 091f 	ands.w	r9, r9, #31
 800ef48:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ef4c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ef50:	d02b      	beq.n	800efaa <__lshift+0xbe>
 800ef52:	f1c9 0e20 	rsb	lr, r9, #32
 800ef56:	468a      	mov	sl, r1
 800ef58:	2200      	movs	r2, #0
 800ef5a:	6818      	ldr	r0, [r3, #0]
 800ef5c:	fa00 f009 	lsl.w	r0, r0, r9
 800ef60:	4310      	orrs	r0, r2
 800ef62:	f84a 0b04 	str.w	r0, [sl], #4
 800ef66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef6a:	459c      	cmp	ip, r3
 800ef6c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ef70:	d8f3      	bhi.n	800ef5a <__lshift+0x6e>
 800ef72:	ebac 0304 	sub.w	r3, ip, r4
 800ef76:	3b15      	subs	r3, #21
 800ef78:	f023 0303 	bic.w	r3, r3, #3
 800ef7c:	3304      	adds	r3, #4
 800ef7e:	f104 0015 	add.w	r0, r4, #21
 800ef82:	4584      	cmp	ip, r0
 800ef84:	bf38      	it	cc
 800ef86:	2304      	movcc	r3, #4
 800ef88:	50ca      	str	r2, [r1, r3]
 800ef8a:	b10a      	cbz	r2, 800ef90 <__lshift+0xa4>
 800ef8c:	f108 0602 	add.w	r6, r8, #2
 800ef90:	3e01      	subs	r6, #1
 800ef92:	4638      	mov	r0, r7
 800ef94:	612e      	str	r6, [r5, #16]
 800ef96:	4621      	mov	r1, r4
 800ef98:	f7ff fdda 	bl	800eb50 <_Bfree>
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efa2:	f842 0f04 	str.w	r0, [r2, #4]!
 800efa6:	3301      	adds	r3, #1
 800efa8:	e7c5      	b.n	800ef36 <__lshift+0x4a>
 800efaa:	3904      	subs	r1, #4
 800efac:	f853 2b04 	ldr.w	r2, [r3], #4
 800efb0:	f841 2f04 	str.w	r2, [r1, #4]!
 800efb4:	459c      	cmp	ip, r3
 800efb6:	d8f9      	bhi.n	800efac <__lshift+0xc0>
 800efb8:	e7ea      	b.n	800ef90 <__lshift+0xa4>
 800efba:	bf00      	nop
 800efbc:	08010ffd 	.word	0x08010ffd
 800efc0:	0801100e 	.word	0x0801100e

0800efc4 <__mcmp>:
 800efc4:	690a      	ldr	r2, [r1, #16]
 800efc6:	4603      	mov	r3, r0
 800efc8:	6900      	ldr	r0, [r0, #16]
 800efca:	1a80      	subs	r0, r0, r2
 800efcc:	b530      	push	{r4, r5, lr}
 800efce:	d10e      	bne.n	800efee <__mcmp+0x2a>
 800efd0:	3314      	adds	r3, #20
 800efd2:	3114      	adds	r1, #20
 800efd4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800efd8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800efdc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800efe0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800efe4:	4295      	cmp	r5, r2
 800efe6:	d003      	beq.n	800eff0 <__mcmp+0x2c>
 800efe8:	d205      	bcs.n	800eff6 <__mcmp+0x32>
 800efea:	f04f 30ff 	mov.w	r0, #4294967295
 800efee:	bd30      	pop	{r4, r5, pc}
 800eff0:	42a3      	cmp	r3, r4
 800eff2:	d3f3      	bcc.n	800efdc <__mcmp+0x18>
 800eff4:	e7fb      	b.n	800efee <__mcmp+0x2a>
 800eff6:	2001      	movs	r0, #1
 800eff8:	e7f9      	b.n	800efee <__mcmp+0x2a>
	...

0800effc <__mdiff>:
 800effc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f000:	4689      	mov	r9, r1
 800f002:	4606      	mov	r6, r0
 800f004:	4611      	mov	r1, r2
 800f006:	4648      	mov	r0, r9
 800f008:	4614      	mov	r4, r2
 800f00a:	f7ff ffdb 	bl	800efc4 <__mcmp>
 800f00e:	1e05      	subs	r5, r0, #0
 800f010:	d112      	bne.n	800f038 <__mdiff+0x3c>
 800f012:	4629      	mov	r1, r5
 800f014:	4630      	mov	r0, r6
 800f016:	f7ff fd5b 	bl	800ead0 <_Balloc>
 800f01a:	4602      	mov	r2, r0
 800f01c:	b928      	cbnz	r0, 800f02a <__mdiff+0x2e>
 800f01e:	4b3f      	ldr	r3, [pc, #252]	@ (800f11c <__mdiff+0x120>)
 800f020:	f240 2137 	movw	r1, #567	@ 0x237
 800f024:	483e      	ldr	r0, [pc, #248]	@ (800f120 <__mdiff+0x124>)
 800f026:	f000 fb03 	bl	800f630 <__assert_func>
 800f02a:	2301      	movs	r3, #1
 800f02c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f030:	4610      	mov	r0, r2
 800f032:	b003      	add	sp, #12
 800f034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f038:	bfbc      	itt	lt
 800f03a:	464b      	movlt	r3, r9
 800f03c:	46a1      	movlt	r9, r4
 800f03e:	4630      	mov	r0, r6
 800f040:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f044:	bfba      	itte	lt
 800f046:	461c      	movlt	r4, r3
 800f048:	2501      	movlt	r5, #1
 800f04a:	2500      	movge	r5, #0
 800f04c:	f7ff fd40 	bl	800ead0 <_Balloc>
 800f050:	4602      	mov	r2, r0
 800f052:	b918      	cbnz	r0, 800f05c <__mdiff+0x60>
 800f054:	4b31      	ldr	r3, [pc, #196]	@ (800f11c <__mdiff+0x120>)
 800f056:	f240 2145 	movw	r1, #581	@ 0x245
 800f05a:	e7e3      	b.n	800f024 <__mdiff+0x28>
 800f05c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f060:	6926      	ldr	r6, [r4, #16]
 800f062:	60c5      	str	r5, [r0, #12]
 800f064:	f109 0310 	add.w	r3, r9, #16
 800f068:	f109 0514 	add.w	r5, r9, #20
 800f06c:	f104 0e14 	add.w	lr, r4, #20
 800f070:	f100 0b14 	add.w	fp, r0, #20
 800f074:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f078:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f07c:	9301      	str	r3, [sp, #4]
 800f07e:	46d9      	mov	r9, fp
 800f080:	f04f 0c00 	mov.w	ip, #0
 800f084:	9b01      	ldr	r3, [sp, #4]
 800f086:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f08a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f08e:	9301      	str	r3, [sp, #4]
 800f090:	fa1f f38a 	uxth.w	r3, sl
 800f094:	4619      	mov	r1, r3
 800f096:	b283      	uxth	r3, r0
 800f098:	1acb      	subs	r3, r1, r3
 800f09a:	0c00      	lsrs	r0, r0, #16
 800f09c:	4463      	add	r3, ip
 800f09e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f0a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f0a6:	b29b      	uxth	r3, r3
 800f0a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f0ac:	4576      	cmp	r6, lr
 800f0ae:	f849 3b04 	str.w	r3, [r9], #4
 800f0b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f0b6:	d8e5      	bhi.n	800f084 <__mdiff+0x88>
 800f0b8:	1b33      	subs	r3, r6, r4
 800f0ba:	3b15      	subs	r3, #21
 800f0bc:	f023 0303 	bic.w	r3, r3, #3
 800f0c0:	3415      	adds	r4, #21
 800f0c2:	3304      	adds	r3, #4
 800f0c4:	42a6      	cmp	r6, r4
 800f0c6:	bf38      	it	cc
 800f0c8:	2304      	movcc	r3, #4
 800f0ca:	441d      	add	r5, r3
 800f0cc:	445b      	add	r3, fp
 800f0ce:	461e      	mov	r6, r3
 800f0d0:	462c      	mov	r4, r5
 800f0d2:	4544      	cmp	r4, r8
 800f0d4:	d30e      	bcc.n	800f0f4 <__mdiff+0xf8>
 800f0d6:	f108 0103 	add.w	r1, r8, #3
 800f0da:	1b49      	subs	r1, r1, r5
 800f0dc:	f021 0103 	bic.w	r1, r1, #3
 800f0e0:	3d03      	subs	r5, #3
 800f0e2:	45a8      	cmp	r8, r5
 800f0e4:	bf38      	it	cc
 800f0e6:	2100      	movcc	r1, #0
 800f0e8:	440b      	add	r3, r1
 800f0ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f0ee:	b191      	cbz	r1, 800f116 <__mdiff+0x11a>
 800f0f0:	6117      	str	r7, [r2, #16]
 800f0f2:	e79d      	b.n	800f030 <__mdiff+0x34>
 800f0f4:	f854 1b04 	ldr.w	r1, [r4], #4
 800f0f8:	46e6      	mov	lr, ip
 800f0fa:	0c08      	lsrs	r0, r1, #16
 800f0fc:	fa1c fc81 	uxtah	ip, ip, r1
 800f100:	4471      	add	r1, lr
 800f102:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f106:	b289      	uxth	r1, r1
 800f108:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f10c:	f846 1b04 	str.w	r1, [r6], #4
 800f110:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f114:	e7dd      	b.n	800f0d2 <__mdiff+0xd6>
 800f116:	3f01      	subs	r7, #1
 800f118:	e7e7      	b.n	800f0ea <__mdiff+0xee>
 800f11a:	bf00      	nop
 800f11c:	08010ffd 	.word	0x08010ffd
 800f120:	0801100e 	.word	0x0801100e

0800f124 <__d2b>:
 800f124:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f128:	460f      	mov	r7, r1
 800f12a:	2101      	movs	r1, #1
 800f12c:	ec59 8b10 	vmov	r8, r9, d0
 800f130:	4616      	mov	r6, r2
 800f132:	f7ff fccd 	bl	800ead0 <_Balloc>
 800f136:	4604      	mov	r4, r0
 800f138:	b930      	cbnz	r0, 800f148 <__d2b+0x24>
 800f13a:	4602      	mov	r2, r0
 800f13c:	4b23      	ldr	r3, [pc, #140]	@ (800f1cc <__d2b+0xa8>)
 800f13e:	4824      	ldr	r0, [pc, #144]	@ (800f1d0 <__d2b+0xac>)
 800f140:	f240 310f 	movw	r1, #783	@ 0x30f
 800f144:	f000 fa74 	bl	800f630 <__assert_func>
 800f148:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f14c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f150:	b10d      	cbz	r5, 800f156 <__d2b+0x32>
 800f152:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f156:	9301      	str	r3, [sp, #4]
 800f158:	f1b8 0300 	subs.w	r3, r8, #0
 800f15c:	d023      	beq.n	800f1a6 <__d2b+0x82>
 800f15e:	4668      	mov	r0, sp
 800f160:	9300      	str	r3, [sp, #0]
 800f162:	f7ff fd7c 	bl	800ec5e <__lo0bits>
 800f166:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f16a:	b1d0      	cbz	r0, 800f1a2 <__d2b+0x7e>
 800f16c:	f1c0 0320 	rsb	r3, r0, #32
 800f170:	fa02 f303 	lsl.w	r3, r2, r3
 800f174:	430b      	orrs	r3, r1
 800f176:	40c2      	lsrs	r2, r0
 800f178:	6163      	str	r3, [r4, #20]
 800f17a:	9201      	str	r2, [sp, #4]
 800f17c:	9b01      	ldr	r3, [sp, #4]
 800f17e:	61a3      	str	r3, [r4, #24]
 800f180:	2b00      	cmp	r3, #0
 800f182:	bf0c      	ite	eq
 800f184:	2201      	moveq	r2, #1
 800f186:	2202      	movne	r2, #2
 800f188:	6122      	str	r2, [r4, #16]
 800f18a:	b1a5      	cbz	r5, 800f1b6 <__d2b+0x92>
 800f18c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f190:	4405      	add	r5, r0
 800f192:	603d      	str	r5, [r7, #0]
 800f194:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f198:	6030      	str	r0, [r6, #0]
 800f19a:	4620      	mov	r0, r4
 800f19c:	b003      	add	sp, #12
 800f19e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1a2:	6161      	str	r1, [r4, #20]
 800f1a4:	e7ea      	b.n	800f17c <__d2b+0x58>
 800f1a6:	a801      	add	r0, sp, #4
 800f1a8:	f7ff fd59 	bl	800ec5e <__lo0bits>
 800f1ac:	9b01      	ldr	r3, [sp, #4]
 800f1ae:	6163      	str	r3, [r4, #20]
 800f1b0:	3020      	adds	r0, #32
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	e7e8      	b.n	800f188 <__d2b+0x64>
 800f1b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f1ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f1be:	6038      	str	r0, [r7, #0]
 800f1c0:	6918      	ldr	r0, [r3, #16]
 800f1c2:	f7ff fd2d 	bl	800ec20 <__hi0bits>
 800f1c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f1ca:	e7e5      	b.n	800f198 <__d2b+0x74>
 800f1cc:	08010ffd 	.word	0x08010ffd
 800f1d0:	0801100e 	.word	0x0801100e

0800f1d4 <__ssputs_r>:
 800f1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1d8:	688e      	ldr	r6, [r1, #8]
 800f1da:	461f      	mov	r7, r3
 800f1dc:	42be      	cmp	r6, r7
 800f1de:	680b      	ldr	r3, [r1, #0]
 800f1e0:	4682      	mov	sl, r0
 800f1e2:	460c      	mov	r4, r1
 800f1e4:	4690      	mov	r8, r2
 800f1e6:	d82d      	bhi.n	800f244 <__ssputs_r+0x70>
 800f1e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f1ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f1f0:	d026      	beq.n	800f240 <__ssputs_r+0x6c>
 800f1f2:	6965      	ldr	r5, [r4, #20]
 800f1f4:	6909      	ldr	r1, [r1, #16]
 800f1f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f1fa:	eba3 0901 	sub.w	r9, r3, r1
 800f1fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f202:	1c7b      	adds	r3, r7, #1
 800f204:	444b      	add	r3, r9
 800f206:	106d      	asrs	r5, r5, #1
 800f208:	429d      	cmp	r5, r3
 800f20a:	bf38      	it	cc
 800f20c:	461d      	movcc	r5, r3
 800f20e:	0553      	lsls	r3, r2, #21
 800f210:	d527      	bpl.n	800f262 <__ssputs_r+0x8e>
 800f212:	4629      	mov	r1, r5
 800f214:	f7ff fbd0 	bl	800e9b8 <_malloc_r>
 800f218:	4606      	mov	r6, r0
 800f21a:	b360      	cbz	r0, 800f276 <__ssputs_r+0xa2>
 800f21c:	6921      	ldr	r1, [r4, #16]
 800f21e:	464a      	mov	r2, r9
 800f220:	f7fe fcf9 	bl	800dc16 <memcpy>
 800f224:	89a3      	ldrh	r3, [r4, #12]
 800f226:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f22a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f22e:	81a3      	strh	r3, [r4, #12]
 800f230:	6126      	str	r6, [r4, #16]
 800f232:	6165      	str	r5, [r4, #20]
 800f234:	444e      	add	r6, r9
 800f236:	eba5 0509 	sub.w	r5, r5, r9
 800f23a:	6026      	str	r6, [r4, #0]
 800f23c:	60a5      	str	r5, [r4, #8]
 800f23e:	463e      	mov	r6, r7
 800f240:	42be      	cmp	r6, r7
 800f242:	d900      	bls.n	800f246 <__ssputs_r+0x72>
 800f244:	463e      	mov	r6, r7
 800f246:	6820      	ldr	r0, [r4, #0]
 800f248:	4632      	mov	r2, r6
 800f24a:	4641      	mov	r1, r8
 800f24c:	f000 f9c6 	bl	800f5dc <memmove>
 800f250:	68a3      	ldr	r3, [r4, #8]
 800f252:	1b9b      	subs	r3, r3, r6
 800f254:	60a3      	str	r3, [r4, #8]
 800f256:	6823      	ldr	r3, [r4, #0]
 800f258:	4433      	add	r3, r6
 800f25a:	6023      	str	r3, [r4, #0]
 800f25c:	2000      	movs	r0, #0
 800f25e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f262:	462a      	mov	r2, r5
 800f264:	f000 fa28 	bl	800f6b8 <_realloc_r>
 800f268:	4606      	mov	r6, r0
 800f26a:	2800      	cmp	r0, #0
 800f26c:	d1e0      	bne.n	800f230 <__ssputs_r+0x5c>
 800f26e:	6921      	ldr	r1, [r4, #16]
 800f270:	4650      	mov	r0, sl
 800f272:	f7ff fb2d 	bl	800e8d0 <_free_r>
 800f276:	230c      	movs	r3, #12
 800f278:	f8ca 3000 	str.w	r3, [sl]
 800f27c:	89a3      	ldrh	r3, [r4, #12]
 800f27e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f282:	81a3      	strh	r3, [r4, #12]
 800f284:	f04f 30ff 	mov.w	r0, #4294967295
 800f288:	e7e9      	b.n	800f25e <__ssputs_r+0x8a>
	...

0800f28c <_svfiprintf_r>:
 800f28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f290:	4698      	mov	r8, r3
 800f292:	898b      	ldrh	r3, [r1, #12]
 800f294:	061b      	lsls	r3, r3, #24
 800f296:	b09d      	sub	sp, #116	@ 0x74
 800f298:	4607      	mov	r7, r0
 800f29a:	460d      	mov	r5, r1
 800f29c:	4614      	mov	r4, r2
 800f29e:	d510      	bpl.n	800f2c2 <_svfiprintf_r+0x36>
 800f2a0:	690b      	ldr	r3, [r1, #16]
 800f2a2:	b973      	cbnz	r3, 800f2c2 <_svfiprintf_r+0x36>
 800f2a4:	2140      	movs	r1, #64	@ 0x40
 800f2a6:	f7ff fb87 	bl	800e9b8 <_malloc_r>
 800f2aa:	6028      	str	r0, [r5, #0]
 800f2ac:	6128      	str	r0, [r5, #16]
 800f2ae:	b930      	cbnz	r0, 800f2be <_svfiprintf_r+0x32>
 800f2b0:	230c      	movs	r3, #12
 800f2b2:	603b      	str	r3, [r7, #0]
 800f2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b8:	b01d      	add	sp, #116	@ 0x74
 800f2ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2be:	2340      	movs	r3, #64	@ 0x40
 800f2c0:	616b      	str	r3, [r5, #20]
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2c6:	2320      	movs	r3, #32
 800f2c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f2cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2d0:	2330      	movs	r3, #48	@ 0x30
 800f2d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f470 <_svfiprintf_r+0x1e4>
 800f2d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f2da:	f04f 0901 	mov.w	r9, #1
 800f2de:	4623      	mov	r3, r4
 800f2e0:	469a      	mov	sl, r3
 800f2e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2e6:	b10a      	cbz	r2, 800f2ec <_svfiprintf_r+0x60>
 800f2e8:	2a25      	cmp	r2, #37	@ 0x25
 800f2ea:	d1f9      	bne.n	800f2e0 <_svfiprintf_r+0x54>
 800f2ec:	ebba 0b04 	subs.w	fp, sl, r4
 800f2f0:	d00b      	beq.n	800f30a <_svfiprintf_r+0x7e>
 800f2f2:	465b      	mov	r3, fp
 800f2f4:	4622      	mov	r2, r4
 800f2f6:	4629      	mov	r1, r5
 800f2f8:	4638      	mov	r0, r7
 800f2fa:	f7ff ff6b 	bl	800f1d4 <__ssputs_r>
 800f2fe:	3001      	adds	r0, #1
 800f300:	f000 80a7 	beq.w	800f452 <_svfiprintf_r+0x1c6>
 800f304:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f306:	445a      	add	r2, fp
 800f308:	9209      	str	r2, [sp, #36]	@ 0x24
 800f30a:	f89a 3000 	ldrb.w	r3, [sl]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	f000 809f 	beq.w	800f452 <_svfiprintf_r+0x1c6>
 800f314:	2300      	movs	r3, #0
 800f316:	f04f 32ff 	mov.w	r2, #4294967295
 800f31a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f31e:	f10a 0a01 	add.w	sl, sl, #1
 800f322:	9304      	str	r3, [sp, #16]
 800f324:	9307      	str	r3, [sp, #28]
 800f326:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f32a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f32c:	4654      	mov	r4, sl
 800f32e:	2205      	movs	r2, #5
 800f330:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f334:	484e      	ldr	r0, [pc, #312]	@ (800f470 <_svfiprintf_r+0x1e4>)
 800f336:	f7f0 ff4b 	bl	80001d0 <memchr>
 800f33a:	9a04      	ldr	r2, [sp, #16]
 800f33c:	b9d8      	cbnz	r0, 800f376 <_svfiprintf_r+0xea>
 800f33e:	06d0      	lsls	r0, r2, #27
 800f340:	bf44      	itt	mi
 800f342:	2320      	movmi	r3, #32
 800f344:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f348:	0711      	lsls	r1, r2, #28
 800f34a:	bf44      	itt	mi
 800f34c:	232b      	movmi	r3, #43	@ 0x2b
 800f34e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f352:	f89a 3000 	ldrb.w	r3, [sl]
 800f356:	2b2a      	cmp	r3, #42	@ 0x2a
 800f358:	d015      	beq.n	800f386 <_svfiprintf_r+0xfa>
 800f35a:	9a07      	ldr	r2, [sp, #28]
 800f35c:	4654      	mov	r4, sl
 800f35e:	2000      	movs	r0, #0
 800f360:	f04f 0c0a 	mov.w	ip, #10
 800f364:	4621      	mov	r1, r4
 800f366:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f36a:	3b30      	subs	r3, #48	@ 0x30
 800f36c:	2b09      	cmp	r3, #9
 800f36e:	d94b      	bls.n	800f408 <_svfiprintf_r+0x17c>
 800f370:	b1b0      	cbz	r0, 800f3a0 <_svfiprintf_r+0x114>
 800f372:	9207      	str	r2, [sp, #28]
 800f374:	e014      	b.n	800f3a0 <_svfiprintf_r+0x114>
 800f376:	eba0 0308 	sub.w	r3, r0, r8
 800f37a:	fa09 f303 	lsl.w	r3, r9, r3
 800f37e:	4313      	orrs	r3, r2
 800f380:	9304      	str	r3, [sp, #16]
 800f382:	46a2      	mov	sl, r4
 800f384:	e7d2      	b.n	800f32c <_svfiprintf_r+0xa0>
 800f386:	9b03      	ldr	r3, [sp, #12]
 800f388:	1d19      	adds	r1, r3, #4
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	9103      	str	r1, [sp, #12]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	bfbb      	ittet	lt
 800f392:	425b      	neglt	r3, r3
 800f394:	f042 0202 	orrlt.w	r2, r2, #2
 800f398:	9307      	strge	r3, [sp, #28]
 800f39a:	9307      	strlt	r3, [sp, #28]
 800f39c:	bfb8      	it	lt
 800f39e:	9204      	strlt	r2, [sp, #16]
 800f3a0:	7823      	ldrb	r3, [r4, #0]
 800f3a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f3a4:	d10a      	bne.n	800f3bc <_svfiprintf_r+0x130>
 800f3a6:	7863      	ldrb	r3, [r4, #1]
 800f3a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3aa:	d132      	bne.n	800f412 <_svfiprintf_r+0x186>
 800f3ac:	9b03      	ldr	r3, [sp, #12]
 800f3ae:	1d1a      	adds	r2, r3, #4
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	9203      	str	r2, [sp, #12]
 800f3b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f3b8:	3402      	adds	r4, #2
 800f3ba:	9305      	str	r3, [sp, #20]
 800f3bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f480 <_svfiprintf_r+0x1f4>
 800f3c0:	7821      	ldrb	r1, [r4, #0]
 800f3c2:	2203      	movs	r2, #3
 800f3c4:	4650      	mov	r0, sl
 800f3c6:	f7f0 ff03 	bl	80001d0 <memchr>
 800f3ca:	b138      	cbz	r0, 800f3dc <_svfiprintf_r+0x150>
 800f3cc:	9b04      	ldr	r3, [sp, #16]
 800f3ce:	eba0 000a 	sub.w	r0, r0, sl
 800f3d2:	2240      	movs	r2, #64	@ 0x40
 800f3d4:	4082      	lsls	r2, r0
 800f3d6:	4313      	orrs	r3, r2
 800f3d8:	3401      	adds	r4, #1
 800f3da:	9304      	str	r3, [sp, #16]
 800f3dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3e0:	4824      	ldr	r0, [pc, #144]	@ (800f474 <_svfiprintf_r+0x1e8>)
 800f3e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f3e6:	2206      	movs	r2, #6
 800f3e8:	f7f0 fef2 	bl	80001d0 <memchr>
 800f3ec:	2800      	cmp	r0, #0
 800f3ee:	d036      	beq.n	800f45e <_svfiprintf_r+0x1d2>
 800f3f0:	4b21      	ldr	r3, [pc, #132]	@ (800f478 <_svfiprintf_r+0x1ec>)
 800f3f2:	bb1b      	cbnz	r3, 800f43c <_svfiprintf_r+0x1b0>
 800f3f4:	9b03      	ldr	r3, [sp, #12]
 800f3f6:	3307      	adds	r3, #7
 800f3f8:	f023 0307 	bic.w	r3, r3, #7
 800f3fc:	3308      	adds	r3, #8
 800f3fe:	9303      	str	r3, [sp, #12]
 800f400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f402:	4433      	add	r3, r6
 800f404:	9309      	str	r3, [sp, #36]	@ 0x24
 800f406:	e76a      	b.n	800f2de <_svfiprintf_r+0x52>
 800f408:	fb0c 3202 	mla	r2, ip, r2, r3
 800f40c:	460c      	mov	r4, r1
 800f40e:	2001      	movs	r0, #1
 800f410:	e7a8      	b.n	800f364 <_svfiprintf_r+0xd8>
 800f412:	2300      	movs	r3, #0
 800f414:	3401      	adds	r4, #1
 800f416:	9305      	str	r3, [sp, #20]
 800f418:	4619      	mov	r1, r3
 800f41a:	f04f 0c0a 	mov.w	ip, #10
 800f41e:	4620      	mov	r0, r4
 800f420:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f424:	3a30      	subs	r2, #48	@ 0x30
 800f426:	2a09      	cmp	r2, #9
 800f428:	d903      	bls.n	800f432 <_svfiprintf_r+0x1a6>
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d0c6      	beq.n	800f3bc <_svfiprintf_r+0x130>
 800f42e:	9105      	str	r1, [sp, #20]
 800f430:	e7c4      	b.n	800f3bc <_svfiprintf_r+0x130>
 800f432:	fb0c 2101 	mla	r1, ip, r1, r2
 800f436:	4604      	mov	r4, r0
 800f438:	2301      	movs	r3, #1
 800f43a:	e7f0      	b.n	800f41e <_svfiprintf_r+0x192>
 800f43c:	ab03      	add	r3, sp, #12
 800f43e:	9300      	str	r3, [sp, #0]
 800f440:	462a      	mov	r2, r5
 800f442:	4b0e      	ldr	r3, [pc, #56]	@ (800f47c <_svfiprintf_r+0x1f0>)
 800f444:	a904      	add	r1, sp, #16
 800f446:	4638      	mov	r0, r7
 800f448:	f7fd fe50 	bl	800d0ec <_printf_float>
 800f44c:	1c42      	adds	r2, r0, #1
 800f44e:	4606      	mov	r6, r0
 800f450:	d1d6      	bne.n	800f400 <_svfiprintf_r+0x174>
 800f452:	89ab      	ldrh	r3, [r5, #12]
 800f454:	065b      	lsls	r3, r3, #25
 800f456:	f53f af2d 	bmi.w	800f2b4 <_svfiprintf_r+0x28>
 800f45a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f45c:	e72c      	b.n	800f2b8 <_svfiprintf_r+0x2c>
 800f45e:	ab03      	add	r3, sp, #12
 800f460:	9300      	str	r3, [sp, #0]
 800f462:	462a      	mov	r2, r5
 800f464:	4b05      	ldr	r3, [pc, #20]	@ (800f47c <_svfiprintf_r+0x1f0>)
 800f466:	a904      	add	r1, sp, #16
 800f468:	4638      	mov	r0, r7
 800f46a:	f7fe f8d7 	bl	800d61c <_printf_i>
 800f46e:	e7ed      	b.n	800f44c <_svfiprintf_r+0x1c0>
 800f470:	08011168 	.word	0x08011168
 800f474:	08011172 	.word	0x08011172
 800f478:	0800d0ed 	.word	0x0800d0ed
 800f47c:	0800f1d5 	.word	0x0800f1d5
 800f480:	0801116e 	.word	0x0801116e

0800f484 <__sflush_r>:
 800f484:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f48c:	0716      	lsls	r6, r2, #28
 800f48e:	4605      	mov	r5, r0
 800f490:	460c      	mov	r4, r1
 800f492:	d454      	bmi.n	800f53e <__sflush_r+0xba>
 800f494:	684b      	ldr	r3, [r1, #4]
 800f496:	2b00      	cmp	r3, #0
 800f498:	dc02      	bgt.n	800f4a0 <__sflush_r+0x1c>
 800f49a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	dd48      	ble.n	800f532 <__sflush_r+0xae>
 800f4a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f4a2:	2e00      	cmp	r6, #0
 800f4a4:	d045      	beq.n	800f532 <__sflush_r+0xae>
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f4ac:	682f      	ldr	r7, [r5, #0]
 800f4ae:	6a21      	ldr	r1, [r4, #32]
 800f4b0:	602b      	str	r3, [r5, #0]
 800f4b2:	d030      	beq.n	800f516 <__sflush_r+0x92>
 800f4b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f4b6:	89a3      	ldrh	r3, [r4, #12]
 800f4b8:	0759      	lsls	r1, r3, #29
 800f4ba:	d505      	bpl.n	800f4c8 <__sflush_r+0x44>
 800f4bc:	6863      	ldr	r3, [r4, #4]
 800f4be:	1ad2      	subs	r2, r2, r3
 800f4c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f4c2:	b10b      	cbz	r3, 800f4c8 <__sflush_r+0x44>
 800f4c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f4c6:	1ad2      	subs	r2, r2, r3
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f4cc:	6a21      	ldr	r1, [r4, #32]
 800f4ce:	4628      	mov	r0, r5
 800f4d0:	47b0      	blx	r6
 800f4d2:	1c43      	adds	r3, r0, #1
 800f4d4:	89a3      	ldrh	r3, [r4, #12]
 800f4d6:	d106      	bne.n	800f4e6 <__sflush_r+0x62>
 800f4d8:	6829      	ldr	r1, [r5, #0]
 800f4da:	291d      	cmp	r1, #29
 800f4dc:	d82b      	bhi.n	800f536 <__sflush_r+0xb2>
 800f4de:	4a2a      	ldr	r2, [pc, #168]	@ (800f588 <__sflush_r+0x104>)
 800f4e0:	410a      	asrs	r2, r1
 800f4e2:	07d6      	lsls	r6, r2, #31
 800f4e4:	d427      	bmi.n	800f536 <__sflush_r+0xb2>
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	6062      	str	r2, [r4, #4]
 800f4ea:	04d9      	lsls	r1, r3, #19
 800f4ec:	6922      	ldr	r2, [r4, #16]
 800f4ee:	6022      	str	r2, [r4, #0]
 800f4f0:	d504      	bpl.n	800f4fc <__sflush_r+0x78>
 800f4f2:	1c42      	adds	r2, r0, #1
 800f4f4:	d101      	bne.n	800f4fa <__sflush_r+0x76>
 800f4f6:	682b      	ldr	r3, [r5, #0]
 800f4f8:	b903      	cbnz	r3, 800f4fc <__sflush_r+0x78>
 800f4fa:	6560      	str	r0, [r4, #84]	@ 0x54
 800f4fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f4fe:	602f      	str	r7, [r5, #0]
 800f500:	b1b9      	cbz	r1, 800f532 <__sflush_r+0xae>
 800f502:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f506:	4299      	cmp	r1, r3
 800f508:	d002      	beq.n	800f510 <__sflush_r+0x8c>
 800f50a:	4628      	mov	r0, r5
 800f50c:	f7ff f9e0 	bl	800e8d0 <_free_r>
 800f510:	2300      	movs	r3, #0
 800f512:	6363      	str	r3, [r4, #52]	@ 0x34
 800f514:	e00d      	b.n	800f532 <__sflush_r+0xae>
 800f516:	2301      	movs	r3, #1
 800f518:	4628      	mov	r0, r5
 800f51a:	47b0      	blx	r6
 800f51c:	4602      	mov	r2, r0
 800f51e:	1c50      	adds	r0, r2, #1
 800f520:	d1c9      	bne.n	800f4b6 <__sflush_r+0x32>
 800f522:	682b      	ldr	r3, [r5, #0]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d0c6      	beq.n	800f4b6 <__sflush_r+0x32>
 800f528:	2b1d      	cmp	r3, #29
 800f52a:	d001      	beq.n	800f530 <__sflush_r+0xac>
 800f52c:	2b16      	cmp	r3, #22
 800f52e:	d11e      	bne.n	800f56e <__sflush_r+0xea>
 800f530:	602f      	str	r7, [r5, #0]
 800f532:	2000      	movs	r0, #0
 800f534:	e022      	b.n	800f57c <__sflush_r+0xf8>
 800f536:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f53a:	b21b      	sxth	r3, r3
 800f53c:	e01b      	b.n	800f576 <__sflush_r+0xf2>
 800f53e:	690f      	ldr	r7, [r1, #16]
 800f540:	2f00      	cmp	r7, #0
 800f542:	d0f6      	beq.n	800f532 <__sflush_r+0xae>
 800f544:	0793      	lsls	r3, r2, #30
 800f546:	680e      	ldr	r6, [r1, #0]
 800f548:	bf08      	it	eq
 800f54a:	694b      	ldreq	r3, [r1, #20]
 800f54c:	600f      	str	r7, [r1, #0]
 800f54e:	bf18      	it	ne
 800f550:	2300      	movne	r3, #0
 800f552:	eba6 0807 	sub.w	r8, r6, r7
 800f556:	608b      	str	r3, [r1, #8]
 800f558:	f1b8 0f00 	cmp.w	r8, #0
 800f55c:	dde9      	ble.n	800f532 <__sflush_r+0xae>
 800f55e:	6a21      	ldr	r1, [r4, #32]
 800f560:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f562:	4643      	mov	r3, r8
 800f564:	463a      	mov	r2, r7
 800f566:	4628      	mov	r0, r5
 800f568:	47b0      	blx	r6
 800f56a:	2800      	cmp	r0, #0
 800f56c:	dc08      	bgt.n	800f580 <__sflush_r+0xfc>
 800f56e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f576:	81a3      	strh	r3, [r4, #12]
 800f578:	f04f 30ff 	mov.w	r0, #4294967295
 800f57c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f580:	4407      	add	r7, r0
 800f582:	eba8 0800 	sub.w	r8, r8, r0
 800f586:	e7e7      	b.n	800f558 <__sflush_r+0xd4>
 800f588:	dfbffffe 	.word	0xdfbffffe

0800f58c <_fflush_r>:
 800f58c:	b538      	push	{r3, r4, r5, lr}
 800f58e:	690b      	ldr	r3, [r1, #16]
 800f590:	4605      	mov	r5, r0
 800f592:	460c      	mov	r4, r1
 800f594:	b913      	cbnz	r3, 800f59c <_fflush_r+0x10>
 800f596:	2500      	movs	r5, #0
 800f598:	4628      	mov	r0, r5
 800f59a:	bd38      	pop	{r3, r4, r5, pc}
 800f59c:	b118      	cbz	r0, 800f5a6 <_fflush_r+0x1a>
 800f59e:	6a03      	ldr	r3, [r0, #32]
 800f5a0:	b90b      	cbnz	r3, 800f5a6 <_fflush_r+0x1a>
 800f5a2:	f7fe f9e7 	bl	800d974 <__sinit>
 800f5a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d0f3      	beq.n	800f596 <_fflush_r+0xa>
 800f5ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f5b0:	07d0      	lsls	r0, r2, #31
 800f5b2:	d404      	bmi.n	800f5be <_fflush_r+0x32>
 800f5b4:	0599      	lsls	r1, r3, #22
 800f5b6:	d402      	bmi.n	800f5be <_fflush_r+0x32>
 800f5b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5ba:	f7fe fb2a 	bl	800dc12 <__retarget_lock_acquire_recursive>
 800f5be:	4628      	mov	r0, r5
 800f5c0:	4621      	mov	r1, r4
 800f5c2:	f7ff ff5f 	bl	800f484 <__sflush_r>
 800f5c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f5c8:	07da      	lsls	r2, r3, #31
 800f5ca:	4605      	mov	r5, r0
 800f5cc:	d4e4      	bmi.n	800f598 <_fflush_r+0xc>
 800f5ce:	89a3      	ldrh	r3, [r4, #12]
 800f5d0:	059b      	lsls	r3, r3, #22
 800f5d2:	d4e1      	bmi.n	800f598 <_fflush_r+0xc>
 800f5d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f5d6:	f7fe fb1d 	bl	800dc14 <__retarget_lock_release_recursive>
 800f5da:	e7dd      	b.n	800f598 <_fflush_r+0xc>

0800f5dc <memmove>:
 800f5dc:	4288      	cmp	r0, r1
 800f5de:	b510      	push	{r4, lr}
 800f5e0:	eb01 0402 	add.w	r4, r1, r2
 800f5e4:	d902      	bls.n	800f5ec <memmove+0x10>
 800f5e6:	4284      	cmp	r4, r0
 800f5e8:	4623      	mov	r3, r4
 800f5ea:	d807      	bhi.n	800f5fc <memmove+0x20>
 800f5ec:	1e43      	subs	r3, r0, #1
 800f5ee:	42a1      	cmp	r1, r4
 800f5f0:	d008      	beq.n	800f604 <memmove+0x28>
 800f5f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f5f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f5fa:	e7f8      	b.n	800f5ee <memmove+0x12>
 800f5fc:	4402      	add	r2, r0
 800f5fe:	4601      	mov	r1, r0
 800f600:	428a      	cmp	r2, r1
 800f602:	d100      	bne.n	800f606 <memmove+0x2a>
 800f604:	bd10      	pop	{r4, pc}
 800f606:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f60a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f60e:	e7f7      	b.n	800f600 <memmove+0x24>

0800f610 <_sbrk_r>:
 800f610:	b538      	push	{r3, r4, r5, lr}
 800f612:	4d06      	ldr	r5, [pc, #24]	@ (800f62c <_sbrk_r+0x1c>)
 800f614:	2300      	movs	r3, #0
 800f616:	4604      	mov	r4, r0
 800f618:	4608      	mov	r0, r1
 800f61a:	602b      	str	r3, [r5, #0]
 800f61c:	f7f4 fd10 	bl	8004040 <_sbrk>
 800f620:	1c43      	adds	r3, r0, #1
 800f622:	d102      	bne.n	800f62a <_sbrk_r+0x1a>
 800f624:	682b      	ldr	r3, [r5, #0]
 800f626:	b103      	cbz	r3, 800f62a <_sbrk_r+0x1a>
 800f628:	6023      	str	r3, [r4, #0]
 800f62a:	bd38      	pop	{r3, r4, r5, pc}
 800f62c:	20005490 	.word	0x20005490

0800f630 <__assert_func>:
 800f630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f632:	4614      	mov	r4, r2
 800f634:	461a      	mov	r2, r3
 800f636:	4b09      	ldr	r3, [pc, #36]	@ (800f65c <__assert_func+0x2c>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	4605      	mov	r5, r0
 800f63c:	68d8      	ldr	r0, [r3, #12]
 800f63e:	b954      	cbnz	r4, 800f656 <__assert_func+0x26>
 800f640:	4b07      	ldr	r3, [pc, #28]	@ (800f660 <__assert_func+0x30>)
 800f642:	461c      	mov	r4, r3
 800f644:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f648:	9100      	str	r1, [sp, #0]
 800f64a:	462b      	mov	r3, r5
 800f64c:	4905      	ldr	r1, [pc, #20]	@ (800f664 <__assert_func+0x34>)
 800f64e:	f000 f86f 	bl	800f730 <fiprintf>
 800f652:	f000 f87f 	bl	800f754 <abort>
 800f656:	4b04      	ldr	r3, [pc, #16]	@ (800f668 <__assert_func+0x38>)
 800f658:	e7f4      	b.n	800f644 <__assert_func+0x14>
 800f65a:	bf00      	nop
 800f65c:	20000040 	.word	0x20000040
 800f660:	080111be 	.word	0x080111be
 800f664:	08011190 	.word	0x08011190
 800f668:	08011183 	.word	0x08011183

0800f66c <_calloc_r>:
 800f66c:	b570      	push	{r4, r5, r6, lr}
 800f66e:	fba1 5402 	umull	r5, r4, r1, r2
 800f672:	b93c      	cbnz	r4, 800f684 <_calloc_r+0x18>
 800f674:	4629      	mov	r1, r5
 800f676:	f7ff f99f 	bl	800e9b8 <_malloc_r>
 800f67a:	4606      	mov	r6, r0
 800f67c:	b928      	cbnz	r0, 800f68a <_calloc_r+0x1e>
 800f67e:	2600      	movs	r6, #0
 800f680:	4630      	mov	r0, r6
 800f682:	bd70      	pop	{r4, r5, r6, pc}
 800f684:	220c      	movs	r2, #12
 800f686:	6002      	str	r2, [r0, #0]
 800f688:	e7f9      	b.n	800f67e <_calloc_r+0x12>
 800f68a:	462a      	mov	r2, r5
 800f68c:	4621      	mov	r1, r4
 800f68e:	f7fe fa1e 	bl	800dace <memset>
 800f692:	e7f5      	b.n	800f680 <_calloc_r+0x14>

0800f694 <__ascii_mbtowc>:
 800f694:	b082      	sub	sp, #8
 800f696:	b901      	cbnz	r1, 800f69a <__ascii_mbtowc+0x6>
 800f698:	a901      	add	r1, sp, #4
 800f69a:	b142      	cbz	r2, 800f6ae <__ascii_mbtowc+0x1a>
 800f69c:	b14b      	cbz	r3, 800f6b2 <__ascii_mbtowc+0x1e>
 800f69e:	7813      	ldrb	r3, [r2, #0]
 800f6a0:	600b      	str	r3, [r1, #0]
 800f6a2:	7812      	ldrb	r2, [r2, #0]
 800f6a4:	1e10      	subs	r0, r2, #0
 800f6a6:	bf18      	it	ne
 800f6a8:	2001      	movne	r0, #1
 800f6aa:	b002      	add	sp, #8
 800f6ac:	4770      	bx	lr
 800f6ae:	4610      	mov	r0, r2
 800f6b0:	e7fb      	b.n	800f6aa <__ascii_mbtowc+0x16>
 800f6b2:	f06f 0001 	mvn.w	r0, #1
 800f6b6:	e7f8      	b.n	800f6aa <__ascii_mbtowc+0x16>

0800f6b8 <_realloc_r>:
 800f6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6bc:	4680      	mov	r8, r0
 800f6be:	4615      	mov	r5, r2
 800f6c0:	460c      	mov	r4, r1
 800f6c2:	b921      	cbnz	r1, 800f6ce <_realloc_r+0x16>
 800f6c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6c8:	4611      	mov	r1, r2
 800f6ca:	f7ff b975 	b.w	800e9b8 <_malloc_r>
 800f6ce:	b92a      	cbnz	r2, 800f6dc <_realloc_r+0x24>
 800f6d0:	f7ff f8fe 	bl	800e8d0 <_free_r>
 800f6d4:	2400      	movs	r4, #0
 800f6d6:	4620      	mov	r0, r4
 800f6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6dc:	f000 f841 	bl	800f762 <_malloc_usable_size_r>
 800f6e0:	4285      	cmp	r5, r0
 800f6e2:	4606      	mov	r6, r0
 800f6e4:	d802      	bhi.n	800f6ec <_realloc_r+0x34>
 800f6e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f6ea:	d8f4      	bhi.n	800f6d6 <_realloc_r+0x1e>
 800f6ec:	4629      	mov	r1, r5
 800f6ee:	4640      	mov	r0, r8
 800f6f0:	f7ff f962 	bl	800e9b8 <_malloc_r>
 800f6f4:	4607      	mov	r7, r0
 800f6f6:	2800      	cmp	r0, #0
 800f6f8:	d0ec      	beq.n	800f6d4 <_realloc_r+0x1c>
 800f6fa:	42b5      	cmp	r5, r6
 800f6fc:	462a      	mov	r2, r5
 800f6fe:	4621      	mov	r1, r4
 800f700:	bf28      	it	cs
 800f702:	4632      	movcs	r2, r6
 800f704:	f7fe fa87 	bl	800dc16 <memcpy>
 800f708:	4621      	mov	r1, r4
 800f70a:	4640      	mov	r0, r8
 800f70c:	f7ff f8e0 	bl	800e8d0 <_free_r>
 800f710:	463c      	mov	r4, r7
 800f712:	e7e0      	b.n	800f6d6 <_realloc_r+0x1e>

0800f714 <__ascii_wctomb>:
 800f714:	4603      	mov	r3, r0
 800f716:	4608      	mov	r0, r1
 800f718:	b141      	cbz	r1, 800f72c <__ascii_wctomb+0x18>
 800f71a:	2aff      	cmp	r2, #255	@ 0xff
 800f71c:	d904      	bls.n	800f728 <__ascii_wctomb+0x14>
 800f71e:	228a      	movs	r2, #138	@ 0x8a
 800f720:	601a      	str	r2, [r3, #0]
 800f722:	f04f 30ff 	mov.w	r0, #4294967295
 800f726:	4770      	bx	lr
 800f728:	700a      	strb	r2, [r1, #0]
 800f72a:	2001      	movs	r0, #1
 800f72c:	4770      	bx	lr
	...

0800f730 <fiprintf>:
 800f730:	b40e      	push	{r1, r2, r3}
 800f732:	b503      	push	{r0, r1, lr}
 800f734:	4601      	mov	r1, r0
 800f736:	ab03      	add	r3, sp, #12
 800f738:	4805      	ldr	r0, [pc, #20]	@ (800f750 <fiprintf+0x20>)
 800f73a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f73e:	6800      	ldr	r0, [r0, #0]
 800f740:	9301      	str	r3, [sp, #4]
 800f742:	f000 f83f 	bl	800f7c4 <_vfiprintf_r>
 800f746:	b002      	add	sp, #8
 800f748:	f85d eb04 	ldr.w	lr, [sp], #4
 800f74c:	b003      	add	sp, #12
 800f74e:	4770      	bx	lr
 800f750:	20000040 	.word	0x20000040

0800f754 <abort>:
 800f754:	b508      	push	{r3, lr}
 800f756:	2006      	movs	r0, #6
 800f758:	f000 fa08 	bl	800fb6c <raise>
 800f75c:	2001      	movs	r0, #1
 800f75e:	f7f4 fbf7 	bl	8003f50 <_exit>

0800f762 <_malloc_usable_size_r>:
 800f762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f766:	1f18      	subs	r0, r3, #4
 800f768:	2b00      	cmp	r3, #0
 800f76a:	bfbc      	itt	lt
 800f76c:	580b      	ldrlt	r3, [r1, r0]
 800f76e:	18c0      	addlt	r0, r0, r3
 800f770:	4770      	bx	lr

0800f772 <__sfputc_r>:
 800f772:	6893      	ldr	r3, [r2, #8]
 800f774:	3b01      	subs	r3, #1
 800f776:	2b00      	cmp	r3, #0
 800f778:	b410      	push	{r4}
 800f77a:	6093      	str	r3, [r2, #8]
 800f77c:	da08      	bge.n	800f790 <__sfputc_r+0x1e>
 800f77e:	6994      	ldr	r4, [r2, #24]
 800f780:	42a3      	cmp	r3, r4
 800f782:	db01      	blt.n	800f788 <__sfputc_r+0x16>
 800f784:	290a      	cmp	r1, #10
 800f786:	d103      	bne.n	800f790 <__sfputc_r+0x1e>
 800f788:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f78c:	f000 b932 	b.w	800f9f4 <__swbuf_r>
 800f790:	6813      	ldr	r3, [r2, #0]
 800f792:	1c58      	adds	r0, r3, #1
 800f794:	6010      	str	r0, [r2, #0]
 800f796:	7019      	strb	r1, [r3, #0]
 800f798:	4608      	mov	r0, r1
 800f79a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f79e:	4770      	bx	lr

0800f7a0 <__sfputs_r>:
 800f7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7a2:	4606      	mov	r6, r0
 800f7a4:	460f      	mov	r7, r1
 800f7a6:	4614      	mov	r4, r2
 800f7a8:	18d5      	adds	r5, r2, r3
 800f7aa:	42ac      	cmp	r4, r5
 800f7ac:	d101      	bne.n	800f7b2 <__sfputs_r+0x12>
 800f7ae:	2000      	movs	r0, #0
 800f7b0:	e007      	b.n	800f7c2 <__sfputs_r+0x22>
 800f7b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7b6:	463a      	mov	r2, r7
 800f7b8:	4630      	mov	r0, r6
 800f7ba:	f7ff ffda 	bl	800f772 <__sfputc_r>
 800f7be:	1c43      	adds	r3, r0, #1
 800f7c0:	d1f3      	bne.n	800f7aa <__sfputs_r+0xa>
 800f7c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f7c4 <_vfiprintf_r>:
 800f7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7c8:	460d      	mov	r5, r1
 800f7ca:	b09d      	sub	sp, #116	@ 0x74
 800f7cc:	4614      	mov	r4, r2
 800f7ce:	4698      	mov	r8, r3
 800f7d0:	4606      	mov	r6, r0
 800f7d2:	b118      	cbz	r0, 800f7dc <_vfiprintf_r+0x18>
 800f7d4:	6a03      	ldr	r3, [r0, #32]
 800f7d6:	b90b      	cbnz	r3, 800f7dc <_vfiprintf_r+0x18>
 800f7d8:	f7fe f8cc 	bl	800d974 <__sinit>
 800f7dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f7de:	07d9      	lsls	r1, r3, #31
 800f7e0:	d405      	bmi.n	800f7ee <_vfiprintf_r+0x2a>
 800f7e2:	89ab      	ldrh	r3, [r5, #12]
 800f7e4:	059a      	lsls	r2, r3, #22
 800f7e6:	d402      	bmi.n	800f7ee <_vfiprintf_r+0x2a>
 800f7e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f7ea:	f7fe fa12 	bl	800dc12 <__retarget_lock_acquire_recursive>
 800f7ee:	89ab      	ldrh	r3, [r5, #12]
 800f7f0:	071b      	lsls	r3, r3, #28
 800f7f2:	d501      	bpl.n	800f7f8 <_vfiprintf_r+0x34>
 800f7f4:	692b      	ldr	r3, [r5, #16]
 800f7f6:	b99b      	cbnz	r3, 800f820 <_vfiprintf_r+0x5c>
 800f7f8:	4629      	mov	r1, r5
 800f7fa:	4630      	mov	r0, r6
 800f7fc:	f000 f938 	bl	800fa70 <__swsetup_r>
 800f800:	b170      	cbz	r0, 800f820 <_vfiprintf_r+0x5c>
 800f802:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f804:	07dc      	lsls	r4, r3, #31
 800f806:	d504      	bpl.n	800f812 <_vfiprintf_r+0x4e>
 800f808:	f04f 30ff 	mov.w	r0, #4294967295
 800f80c:	b01d      	add	sp, #116	@ 0x74
 800f80e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f812:	89ab      	ldrh	r3, [r5, #12]
 800f814:	0598      	lsls	r0, r3, #22
 800f816:	d4f7      	bmi.n	800f808 <_vfiprintf_r+0x44>
 800f818:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f81a:	f7fe f9fb 	bl	800dc14 <__retarget_lock_release_recursive>
 800f81e:	e7f3      	b.n	800f808 <_vfiprintf_r+0x44>
 800f820:	2300      	movs	r3, #0
 800f822:	9309      	str	r3, [sp, #36]	@ 0x24
 800f824:	2320      	movs	r3, #32
 800f826:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f82a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f82e:	2330      	movs	r3, #48	@ 0x30
 800f830:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f9e0 <_vfiprintf_r+0x21c>
 800f834:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f838:	f04f 0901 	mov.w	r9, #1
 800f83c:	4623      	mov	r3, r4
 800f83e:	469a      	mov	sl, r3
 800f840:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f844:	b10a      	cbz	r2, 800f84a <_vfiprintf_r+0x86>
 800f846:	2a25      	cmp	r2, #37	@ 0x25
 800f848:	d1f9      	bne.n	800f83e <_vfiprintf_r+0x7a>
 800f84a:	ebba 0b04 	subs.w	fp, sl, r4
 800f84e:	d00b      	beq.n	800f868 <_vfiprintf_r+0xa4>
 800f850:	465b      	mov	r3, fp
 800f852:	4622      	mov	r2, r4
 800f854:	4629      	mov	r1, r5
 800f856:	4630      	mov	r0, r6
 800f858:	f7ff ffa2 	bl	800f7a0 <__sfputs_r>
 800f85c:	3001      	adds	r0, #1
 800f85e:	f000 80a7 	beq.w	800f9b0 <_vfiprintf_r+0x1ec>
 800f862:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f864:	445a      	add	r2, fp
 800f866:	9209      	str	r2, [sp, #36]	@ 0x24
 800f868:	f89a 3000 	ldrb.w	r3, [sl]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	f000 809f 	beq.w	800f9b0 <_vfiprintf_r+0x1ec>
 800f872:	2300      	movs	r3, #0
 800f874:	f04f 32ff 	mov.w	r2, #4294967295
 800f878:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f87c:	f10a 0a01 	add.w	sl, sl, #1
 800f880:	9304      	str	r3, [sp, #16]
 800f882:	9307      	str	r3, [sp, #28]
 800f884:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f888:	931a      	str	r3, [sp, #104]	@ 0x68
 800f88a:	4654      	mov	r4, sl
 800f88c:	2205      	movs	r2, #5
 800f88e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f892:	4853      	ldr	r0, [pc, #332]	@ (800f9e0 <_vfiprintf_r+0x21c>)
 800f894:	f7f0 fc9c 	bl	80001d0 <memchr>
 800f898:	9a04      	ldr	r2, [sp, #16]
 800f89a:	b9d8      	cbnz	r0, 800f8d4 <_vfiprintf_r+0x110>
 800f89c:	06d1      	lsls	r1, r2, #27
 800f89e:	bf44      	itt	mi
 800f8a0:	2320      	movmi	r3, #32
 800f8a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f8a6:	0713      	lsls	r3, r2, #28
 800f8a8:	bf44      	itt	mi
 800f8aa:	232b      	movmi	r3, #43	@ 0x2b
 800f8ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f8b0:	f89a 3000 	ldrb.w	r3, [sl]
 800f8b4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8b6:	d015      	beq.n	800f8e4 <_vfiprintf_r+0x120>
 800f8b8:	9a07      	ldr	r2, [sp, #28]
 800f8ba:	4654      	mov	r4, sl
 800f8bc:	2000      	movs	r0, #0
 800f8be:	f04f 0c0a 	mov.w	ip, #10
 800f8c2:	4621      	mov	r1, r4
 800f8c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8c8:	3b30      	subs	r3, #48	@ 0x30
 800f8ca:	2b09      	cmp	r3, #9
 800f8cc:	d94b      	bls.n	800f966 <_vfiprintf_r+0x1a2>
 800f8ce:	b1b0      	cbz	r0, 800f8fe <_vfiprintf_r+0x13a>
 800f8d0:	9207      	str	r2, [sp, #28]
 800f8d2:	e014      	b.n	800f8fe <_vfiprintf_r+0x13a>
 800f8d4:	eba0 0308 	sub.w	r3, r0, r8
 800f8d8:	fa09 f303 	lsl.w	r3, r9, r3
 800f8dc:	4313      	orrs	r3, r2
 800f8de:	9304      	str	r3, [sp, #16]
 800f8e0:	46a2      	mov	sl, r4
 800f8e2:	e7d2      	b.n	800f88a <_vfiprintf_r+0xc6>
 800f8e4:	9b03      	ldr	r3, [sp, #12]
 800f8e6:	1d19      	adds	r1, r3, #4
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	9103      	str	r1, [sp, #12]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	bfbb      	ittet	lt
 800f8f0:	425b      	neglt	r3, r3
 800f8f2:	f042 0202 	orrlt.w	r2, r2, #2
 800f8f6:	9307      	strge	r3, [sp, #28]
 800f8f8:	9307      	strlt	r3, [sp, #28]
 800f8fa:	bfb8      	it	lt
 800f8fc:	9204      	strlt	r2, [sp, #16]
 800f8fe:	7823      	ldrb	r3, [r4, #0]
 800f900:	2b2e      	cmp	r3, #46	@ 0x2e
 800f902:	d10a      	bne.n	800f91a <_vfiprintf_r+0x156>
 800f904:	7863      	ldrb	r3, [r4, #1]
 800f906:	2b2a      	cmp	r3, #42	@ 0x2a
 800f908:	d132      	bne.n	800f970 <_vfiprintf_r+0x1ac>
 800f90a:	9b03      	ldr	r3, [sp, #12]
 800f90c:	1d1a      	adds	r2, r3, #4
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	9203      	str	r2, [sp, #12]
 800f912:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f916:	3402      	adds	r4, #2
 800f918:	9305      	str	r3, [sp, #20]
 800f91a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f9f0 <_vfiprintf_r+0x22c>
 800f91e:	7821      	ldrb	r1, [r4, #0]
 800f920:	2203      	movs	r2, #3
 800f922:	4650      	mov	r0, sl
 800f924:	f7f0 fc54 	bl	80001d0 <memchr>
 800f928:	b138      	cbz	r0, 800f93a <_vfiprintf_r+0x176>
 800f92a:	9b04      	ldr	r3, [sp, #16]
 800f92c:	eba0 000a 	sub.w	r0, r0, sl
 800f930:	2240      	movs	r2, #64	@ 0x40
 800f932:	4082      	lsls	r2, r0
 800f934:	4313      	orrs	r3, r2
 800f936:	3401      	adds	r4, #1
 800f938:	9304      	str	r3, [sp, #16]
 800f93a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f93e:	4829      	ldr	r0, [pc, #164]	@ (800f9e4 <_vfiprintf_r+0x220>)
 800f940:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f944:	2206      	movs	r2, #6
 800f946:	f7f0 fc43 	bl	80001d0 <memchr>
 800f94a:	2800      	cmp	r0, #0
 800f94c:	d03f      	beq.n	800f9ce <_vfiprintf_r+0x20a>
 800f94e:	4b26      	ldr	r3, [pc, #152]	@ (800f9e8 <_vfiprintf_r+0x224>)
 800f950:	bb1b      	cbnz	r3, 800f99a <_vfiprintf_r+0x1d6>
 800f952:	9b03      	ldr	r3, [sp, #12]
 800f954:	3307      	adds	r3, #7
 800f956:	f023 0307 	bic.w	r3, r3, #7
 800f95a:	3308      	adds	r3, #8
 800f95c:	9303      	str	r3, [sp, #12]
 800f95e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f960:	443b      	add	r3, r7
 800f962:	9309      	str	r3, [sp, #36]	@ 0x24
 800f964:	e76a      	b.n	800f83c <_vfiprintf_r+0x78>
 800f966:	fb0c 3202 	mla	r2, ip, r2, r3
 800f96a:	460c      	mov	r4, r1
 800f96c:	2001      	movs	r0, #1
 800f96e:	e7a8      	b.n	800f8c2 <_vfiprintf_r+0xfe>
 800f970:	2300      	movs	r3, #0
 800f972:	3401      	adds	r4, #1
 800f974:	9305      	str	r3, [sp, #20]
 800f976:	4619      	mov	r1, r3
 800f978:	f04f 0c0a 	mov.w	ip, #10
 800f97c:	4620      	mov	r0, r4
 800f97e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f982:	3a30      	subs	r2, #48	@ 0x30
 800f984:	2a09      	cmp	r2, #9
 800f986:	d903      	bls.n	800f990 <_vfiprintf_r+0x1cc>
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d0c6      	beq.n	800f91a <_vfiprintf_r+0x156>
 800f98c:	9105      	str	r1, [sp, #20]
 800f98e:	e7c4      	b.n	800f91a <_vfiprintf_r+0x156>
 800f990:	fb0c 2101 	mla	r1, ip, r1, r2
 800f994:	4604      	mov	r4, r0
 800f996:	2301      	movs	r3, #1
 800f998:	e7f0      	b.n	800f97c <_vfiprintf_r+0x1b8>
 800f99a:	ab03      	add	r3, sp, #12
 800f99c:	9300      	str	r3, [sp, #0]
 800f99e:	462a      	mov	r2, r5
 800f9a0:	4b12      	ldr	r3, [pc, #72]	@ (800f9ec <_vfiprintf_r+0x228>)
 800f9a2:	a904      	add	r1, sp, #16
 800f9a4:	4630      	mov	r0, r6
 800f9a6:	f7fd fba1 	bl	800d0ec <_printf_float>
 800f9aa:	4607      	mov	r7, r0
 800f9ac:	1c78      	adds	r0, r7, #1
 800f9ae:	d1d6      	bne.n	800f95e <_vfiprintf_r+0x19a>
 800f9b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f9b2:	07d9      	lsls	r1, r3, #31
 800f9b4:	d405      	bmi.n	800f9c2 <_vfiprintf_r+0x1fe>
 800f9b6:	89ab      	ldrh	r3, [r5, #12]
 800f9b8:	059a      	lsls	r2, r3, #22
 800f9ba:	d402      	bmi.n	800f9c2 <_vfiprintf_r+0x1fe>
 800f9bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f9be:	f7fe f929 	bl	800dc14 <__retarget_lock_release_recursive>
 800f9c2:	89ab      	ldrh	r3, [r5, #12]
 800f9c4:	065b      	lsls	r3, r3, #25
 800f9c6:	f53f af1f 	bmi.w	800f808 <_vfiprintf_r+0x44>
 800f9ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f9cc:	e71e      	b.n	800f80c <_vfiprintf_r+0x48>
 800f9ce:	ab03      	add	r3, sp, #12
 800f9d0:	9300      	str	r3, [sp, #0]
 800f9d2:	462a      	mov	r2, r5
 800f9d4:	4b05      	ldr	r3, [pc, #20]	@ (800f9ec <_vfiprintf_r+0x228>)
 800f9d6:	a904      	add	r1, sp, #16
 800f9d8:	4630      	mov	r0, r6
 800f9da:	f7fd fe1f 	bl	800d61c <_printf_i>
 800f9de:	e7e4      	b.n	800f9aa <_vfiprintf_r+0x1e6>
 800f9e0:	08011168 	.word	0x08011168
 800f9e4:	08011172 	.word	0x08011172
 800f9e8:	0800d0ed 	.word	0x0800d0ed
 800f9ec:	0800f7a1 	.word	0x0800f7a1
 800f9f0:	0801116e 	.word	0x0801116e

0800f9f4 <__swbuf_r>:
 800f9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9f6:	460e      	mov	r6, r1
 800f9f8:	4614      	mov	r4, r2
 800f9fa:	4605      	mov	r5, r0
 800f9fc:	b118      	cbz	r0, 800fa06 <__swbuf_r+0x12>
 800f9fe:	6a03      	ldr	r3, [r0, #32]
 800fa00:	b90b      	cbnz	r3, 800fa06 <__swbuf_r+0x12>
 800fa02:	f7fd ffb7 	bl	800d974 <__sinit>
 800fa06:	69a3      	ldr	r3, [r4, #24]
 800fa08:	60a3      	str	r3, [r4, #8]
 800fa0a:	89a3      	ldrh	r3, [r4, #12]
 800fa0c:	071a      	lsls	r2, r3, #28
 800fa0e:	d501      	bpl.n	800fa14 <__swbuf_r+0x20>
 800fa10:	6923      	ldr	r3, [r4, #16]
 800fa12:	b943      	cbnz	r3, 800fa26 <__swbuf_r+0x32>
 800fa14:	4621      	mov	r1, r4
 800fa16:	4628      	mov	r0, r5
 800fa18:	f000 f82a 	bl	800fa70 <__swsetup_r>
 800fa1c:	b118      	cbz	r0, 800fa26 <__swbuf_r+0x32>
 800fa1e:	f04f 37ff 	mov.w	r7, #4294967295
 800fa22:	4638      	mov	r0, r7
 800fa24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa26:	6823      	ldr	r3, [r4, #0]
 800fa28:	6922      	ldr	r2, [r4, #16]
 800fa2a:	1a98      	subs	r0, r3, r2
 800fa2c:	6963      	ldr	r3, [r4, #20]
 800fa2e:	b2f6      	uxtb	r6, r6
 800fa30:	4283      	cmp	r3, r0
 800fa32:	4637      	mov	r7, r6
 800fa34:	dc05      	bgt.n	800fa42 <__swbuf_r+0x4e>
 800fa36:	4621      	mov	r1, r4
 800fa38:	4628      	mov	r0, r5
 800fa3a:	f7ff fda7 	bl	800f58c <_fflush_r>
 800fa3e:	2800      	cmp	r0, #0
 800fa40:	d1ed      	bne.n	800fa1e <__swbuf_r+0x2a>
 800fa42:	68a3      	ldr	r3, [r4, #8]
 800fa44:	3b01      	subs	r3, #1
 800fa46:	60a3      	str	r3, [r4, #8]
 800fa48:	6823      	ldr	r3, [r4, #0]
 800fa4a:	1c5a      	adds	r2, r3, #1
 800fa4c:	6022      	str	r2, [r4, #0]
 800fa4e:	701e      	strb	r6, [r3, #0]
 800fa50:	6962      	ldr	r2, [r4, #20]
 800fa52:	1c43      	adds	r3, r0, #1
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d004      	beq.n	800fa62 <__swbuf_r+0x6e>
 800fa58:	89a3      	ldrh	r3, [r4, #12]
 800fa5a:	07db      	lsls	r3, r3, #31
 800fa5c:	d5e1      	bpl.n	800fa22 <__swbuf_r+0x2e>
 800fa5e:	2e0a      	cmp	r6, #10
 800fa60:	d1df      	bne.n	800fa22 <__swbuf_r+0x2e>
 800fa62:	4621      	mov	r1, r4
 800fa64:	4628      	mov	r0, r5
 800fa66:	f7ff fd91 	bl	800f58c <_fflush_r>
 800fa6a:	2800      	cmp	r0, #0
 800fa6c:	d0d9      	beq.n	800fa22 <__swbuf_r+0x2e>
 800fa6e:	e7d6      	b.n	800fa1e <__swbuf_r+0x2a>

0800fa70 <__swsetup_r>:
 800fa70:	b538      	push	{r3, r4, r5, lr}
 800fa72:	4b29      	ldr	r3, [pc, #164]	@ (800fb18 <__swsetup_r+0xa8>)
 800fa74:	4605      	mov	r5, r0
 800fa76:	6818      	ldr	r0, [r3, #0]
 800fa78:	460c      	mov	r4, r1
 800fa7a:	b118      	cbz	r0, 800fa84 <__swsetup_r+0x14>
 800fa7c:	6a03      	ldr	r3, [r0, #32]
 800fa7e:	b90b      	cbnz	r3, 800fa84 <__swsetup_r+0x14>
 800fa80:	f7fd ff78 	bl	800d974 <__sinit>
 800fa84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa88:	0719      	lsls	r1, r3, #28
 800fa8a:	d422      	bmi.n	800fad2 <__swsetup_r+0x62>
 800fa8c:	06da      	lsls	r2, r3, #27
 800fa8e:	d407      	bmi.n	800faa0 <__swsetup_r+0x30>
 800fa90:	2209      	movs	r2, #9
 800fa92:	602a      	str	r2, [r5, #0]
 800fa94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fa98:	81a3      	strh	r3, [r4, #12]
 800fa9a:	f04f 30ff 	mov.w	r0, #4294967295
 800fa9e:	e033      	b.n	800fb08 <__swsetup_r+0x98>
 800faa0:	0758      	lsls	r0, r3, #29
 800faa2:	d512      	bpl.n	800faca <__swsetup_r+0x5a>
 800faa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800faa6:	b141      	cbz	r1, 800faba <__swsetup_r+0x4a>
 800faa8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800faac:	4299      	cmp	r1, r3
 800faae:	d002      	beq.n	800fab6 <__swsetup_r+0x46>
 800fab0:	4628      	mov	r0, r5
 800fab2:	f7fe ff0d 	bl	800e8d0 <_free_r>
 800fab6:	2300      	movs	r3, #0
 800fab8:	6363      	str	r3, [r4, #52]	@ 0x34
 800faba:	89a3      	ldrh	r3, [r4, #12]
 800fabc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fac0:	81a3      	strh	r3, [r4, #12]
 800fac2:	2300      	movs	r3, #0
 800fac4:	6063      	str	r3, [r4, #4]
 800fac6:	6923      	ldr	r3, [r4, #16]
 800fac8:	6023      	str	r3, [r4, #0]
 800faca:	89a3      	ldrh	r3, [r4, #12]
 800facc:	f043 0308 	orr.w	r3, r3, #8
 800fad0:	81a3      	strh	r3, [r4, #12]
 800fad2:	6923      	ldr	r3, [r4, #16]
 800fad4:	b94b      	cbnz	r3, 800faea <__swsetup_r+0x7a>
 800fad6:	89a3      	ldrh	r3, [r4, #12]
 800fad8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fadc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fae0:	d003      	beq.n	800faea <__swsetup_r+0x7a>
 800fae2:	4621      	mov	r1, r4
 800fae4:	4628      	mov	r0, r5
 800fae6:	f000 f883 	bl	800fbf0 <__smakebuf_r>
 800faea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800faee:	f013 0201 	ands.w	r2, r3, #1
 800faf2:	d00a      	beq.n	800fb0a <__swsetup_r+0x9a>
 800faf4:	2200      	movs	r2, #0
 800faf6:	60a2      	str	r2, [r4, #8]
 800faf8:	6962      	ldr	r2, [r4, #20]
 800fafa:	4252      	negs	r2, r2
 800fafc:	61a2      	str	r2, [r4, #24]
 800fafe:	6922      	ldr	r2, [r4, #16]
 800fb00:	b942      	cbnz	r2, 800fb14 <__swsetup_r+0xa4>
 800fb02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fb06:	d1c5      	bne.n	800fa94 <__swsetup_r+0x24>
 800fb08:	bd38      	pop	{r3, r4, r5, pc}
 800fb0a:	0799      	lsls	r1, r3, #30
 800fb0c:	bf58      	it	pl
 800fb0e:	6962      	ldrpl	r2, [r4, #20]
 800fb10:	60a2      	str	r2, [r4, #8]
 800fb12:	e7f4      	b.n	800fafe <__swsetup_r+0x8e>
 800fb14:	2000      	movs	r0, #0
 800fb16:	e7f7      	b.n	800fb08 <__swsetup_r+0x98>
 800fb18:	20000040 	.word	0x20000040

0800fb1c <_raise_r>:
 800fb1c:	291f      	cmp	r1, #31
 800fb1e:	b538      	push	{r3, r4, r5, lr}
 800fb20:	4605      	mov	r5, r0
 800fb22:	460c      	mov	r4, r1
 800fb24:	d904      	bls.n	800fb30 <_raise_r+0x14>
 800fb26:	2316      	movs	r3, #22
 800fb28:	6003      	str	r3, [r0, #0]
 800fb2a:	f04f 30ff 	mov.w	r0, #4294967295
 800fb2e:	bd38      	pop	{r3, r4, r5, pc}
 800fb30:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fb32:	b112      	cbz	r2, 800fb3a <_raise_r+0x1e>
 800fb34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fb38:	b94b      	cbnz	r3, 800fb4e <_raise_r+0x32>
 800fb3a:	4628      	mov	r0, r5
 800fb3c:	f000 f830 	bl	800fba0 <_getpid_r>
 800fb40:	4622      	mov	r2, r4
 800fb42:	4601      	mov	r1, r0
 800fb44:	4628      	mov	r0, r5
 800fb46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb4a:	f000 b817 	b.w	800fb7c <_kill_r>
 800fb4e:	2b01      	cmp	r3, #1
 800fb50:	d00a      	beq.n	800fb68 <_raise_r+0x4c>
 800fb52:	1c59      	adds	r1, r3, #1
 800fb54:	d103      	bne.n	800fb5e <_raise_r+0x42>
 800fb56:	2316      	movs	r3, #22
 800fb58:	6003      	str	r3, [r0, #0]
 800fb5a:	2001      	movs	r0, #1
 800fb5c:	e7e7      	b.n	800fb2e <_raise_r+0x12>
 800fb5e:	2100      	movs	r1, #0
 800fb60:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fb64:	4620      	mov	r0, r4
 800fb66:	4798      	blx	r3
 800fb68:	2000      	movs	r0, #0
 800fb6a:	e7e0      	b.n	800fb2e <_raise_r+0x12>

0800fb6c <raise>:
 800fb6c:	4b02      	ldr	r3, [pc, #8]	@ (800fb78 <raise+0xc>)
 800fb6e:	4601      	mov	r1, r0
 800fb70:	6818      	ldr	r0, [r3, #0]
 800fb72:	f7ff bfd3 	b.w	800fb1c <_raise_r>
 800fb76:	bf00      	nop
 800fb78:	20000040 	.word	0x20000040

0800fb7c <_kill_r>:
 800fb7c:	b538      	push	{r3, r4, r5, lr}
 800fb7e:	4d07      	ldr	r5, [pc, #28]	@ (800fb9c <_kill_r+0x20>)
 800fb80:	2300      	movs	r3, #0
 800fb82:	4604      	mov	r4, r0
 800fb84:	4608      	mov	r0, r1
 800fb86:	4611      	mov	r1, r2
 800fb88:	602b      	str	r3, [r5, #0]
 800fb8a:	f7f4 f9d1 	bl	8003f30 <_kill>
 800fb8e:	1c43      	adds	r3, r0, #1
 800fb90:	d102      	bne.n	800fb98 <_kill_r+0x1c>
 800fb92:	682b      	ldr	r3, [r5, #0]
 800fb94:	b103      	cbz	r3, 800fb98 <_kill_r+0x1c>
 800fb96:	6023      	str	r3, [r4, #0]
 800fb98:	bd38      	pop	{r3, r4, r5, pc}
 800fb9a:	bf00      	nop
 800fb9c:	20005490 	.word	0x20005490

0800fba0 <_getpid_r>:
 800fba0:	f7f4 b9be 	b.w	8003f20 <_getpid>

0800fba4 <__swhatbuf_r>:
 800fba4:	b570      	push	{r4, r5, r6, lr}
 800fba6:	460c      	mov	r4, r1
 800fba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbac:	2900      	cmp	r1, #0
 800fbae:	b096      	sub	sp, #88	@ 0x58
 800fbb0:	4615      	mov	r5, r2
 800fbb2:	461e      	mov	r6, r3
 800fbb4:	da0d      	bge.n	800fbd2 <__swhatbuf_r+0x2e>
 800fbb6:	89a3      	ldrh	r3, [r4, #12]
 800fbb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fbbc:	f04f 0100 	mov.w	r1, #0
 800fbc0:	bf14      	ite	ne
 800fbc2:	2340      	movne	r3, #64	@ 0x40
 800fbc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fbc8:	2000      	movs	r0, #0
 800fbca:	6031      	str	r1, [r6, #0]
 800fbcc:	602b      	str	r3, [r5, #0]
 800fbce:	b016      	add	sp, #88	@ 0x58
 800fbd0:	bd70      	pop	{r4, r5, r6, pc}
 800fbd2:	466a      	mov	r2, sp
 800fbd4:	f000 f848 	bl	800fc68 <_fstat_r>
 800fbd8:	2800      	cmp	r0, #0
 800fbda:	dbec      	blt.n	800fbb6 <__swhatbuf_r+0x12>
 800fbdc:	9901      	ldr	r1, [sp, #4]
 800fbde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fbe2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fbe6:	4259      	negs	r1, r3
 800fbe8:	4159      	adcs	r1, r3
 800fbea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fbee:	e7eb      	b.n	800fbc8 <__swhatbuf_r+0x24>

0800fbf0 <__smakebuf_r>:
 800fbf0:	898b      	ldrh	r3, [r1, #12]
 800fbf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fbf4:	079d      	lsls	r5, r3, #30
 800fbf6:	4606      	mov	r6, r0
 800fbf8:	460c      	mov	r4, r1
 800fbfa:	d507      	bpl.n	800fc0c <__smakebuf_r+0x1c>
 800fbfc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fc00:	6023      	str	r3, [r4, #0]
 800fc02:	6123      	str	r3, [r4, #16]
 800fc04:	2301      	movs	r3, #1
 800fc06:	6163      	str	r3, [r4, #20]
 800fc08:	b003      	add	sp, #12
 800fc0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc0c:	ab01      	add	r3, sp, #4
 800fc0e:	466a      	mov	r2, sp
 800fc10:	f7ff ffc8 	bl	800fba4 <__swhatbuf_r>
 800fc14:	9f00      	ldr	r7, [sp, #0]
 800fc16:	4605      	mov	r5, r0
 800fc18:	4639      	mov	r1, r7
 800fc1a:	4630      	mov	r0, r6
 800fc1c:	f7fe fecc 	bl	800e9b8 <_malloc_r>
 800fc20:	b948      	cbnz	r0, 800fc36 <__smakebuf_r+0x46>
 800fc22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc26:	059a      	lsls	r2, r3, #22
 800fc28:	d4ee      	bmi.n	800fc08 <__smakebuf_r+0x18>
 800fc2a:	f023 0303 	bic.w	r3, r3, #3
 800fc2e:	f043 0302 	orr.w	r3, r3, #2
 800fc32:	81a3      	strh	r3, [r4, #12]
 800fc34:	e7e2      	b.n	800fbfc <__smakebuf_r+0xc>
 800fc36:	89a3      	ldrh	r3, [r4, #12]
 800fc38:	6020      	str	r0, [r4, #0]
 800fc3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc3e:	81a3      	strh	r3, [r4, #12]
 800fc40:	9b01      	ldr	r3, [sp, #4]
 800fc42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fc46:	b15b      	cbz	r3, 800fc60 <__smakebuf_r+0x70>
 800fc48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc4c:	4630      	mov	r0, r6
 800fc4e:	f000 f81d 	bl	800fc8c <_isatty_r>
 800fc52:	b128      	cbz	r0, 800fc60 <__smakebuf_r+0x70>
 800fc54:	89a3      	ldrh	r3, [r4, #12]
 800fc56:	f023 0303 	bic.w	r3, r3, #3
 800fc5a:	f043 0301 	orr.w	r3, r3, #1
 800fc5e:	81a3      	strh	r3, [r4, #12]
 800fc60:	89a3      	ldrh	r3, [r4, #12]
 800fc62:	431d      	orrs	r5, r3
 800fc64:	81a5      	strh	r5, [r4, #12]
 800fc66:	e7cf      	b.n	800fc08 <__smakebuf_r+0x18>

0800fc68 <_fstat_r>:
 800fc68:	b538      	push	{r3, r4, r5, lr}
 800fc6a:	4d07      	ldr	r5, [pc, #28]	@ (800fc88 <_fstat_r+0x20>)
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	4604      	mov	r4, r0
 800fc70:	4608      	mov	r0, r1
 800fc72:	4611      	mov	r1, r2
 800fc74:	602b      	str	r3, [r5, #0]
 800fc76:	f7f4 f9bb 	bl	8003ff0 <_fstat>
 800fc7a:	1c43      	adds	r3, r0, #1
 800fc7c:	d102      	bne.n	800fc84 <_fstat_r+0x1c>
 800fc7e:	682b      	ldr	r3, [r5, #0]
 800fc80:	b103      	cbz	r3, 800fc84 <_fstat_r+0x1c>
 800fc82:	6023      	str	r3, [r4, #0]
 800fc84:	bd38      	pop	{r3, r4, r5, pc}
 800fc86:	bf00      	nop
 800fc88:	20005490 	.word	0x20005490

0800fc8c <_isatty_r>:
 800fc8c:	b538      	push	{r3, r4, r5, lr}
 800fc8e:	4d06      	ldr	r5, [pc, #24]	@ (800fca8 <_isatty_r+0x1c>)
 800fc90:	2300      	movs	r3, #0
 800fc92:	4604      	mov	r4, r0
 800fc94:	4608      	mov	r0, r1
 800fc96:	602b      	str	r3, [r5, #0]
 800fc98:	f7f4 f9ba 	bl	8004010 <_isatty>
 800fc9c:	1c43      	adds	r3, r0, #1
 800fc9e:	d102      	bne.n	800fca6 <_isatty_r+0x1a>
 800fca0:	682b      	ldr	r3, [r5, #0]
 800fca2:	b103      	cbz	r3, 800fca6 <_isatty_r+0x1a>
 800fca4:	6023      	str	r3, [r4, #0]
 800fca6:	bd38      	pop	{r3, r4, r5, pc}
 800fca8:	20005490 	.word	0x20005490

0800fcac <atan2>:
 800fcac:	f000 b800 	b.w	800fcb0 <__ieee754_atan2>

0800fcb0 <__ieee754_atan2>:
 800fcb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcb4:	ec57 6b11 	vmov	r6, r7, d1
 800fcb8:	4273      	negs	r3, r6
 800fcba:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800fe38 <__ieee754_atan2+0x188>
 800fcbe:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800fcc2:	4333      	orrs	r3, r6
 800fcc4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800fcc8:	4543      	cmp	r3, r8
 800fcca:	ec51 0b10 	vmov	r0, r1, d0
 800fcce:	4635      	mov	r5, r6
 800fcd0:	d809      	bhi.n	800fce6 <__ieee754_atan2+0x36>
 800fcd2:	4244      	negs	r4, r0
 800fcd4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fcd8:	4304      	orrs	r4, r0
 800fcda:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800fcde:	4544      	cmp	r4, r8
 800fce0:	468e      	mov	lr, r1
 800fce2:	4681      	mov	r9, r0
 800fce4:	d907      	bls.n	800fcf6 <__ieee754_atan2+0x46>
 800fce6:	4632      	mov	r2, r6
 800fce8:	463b      	mov	r3, r7
 800fcea:	f7f0 facf 	bl	800028c <__adddf3>
 800fcee:	ec41 0b10 	vmov	d0, r0, r1
 800fcf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcf6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800fcfa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800fcfe:	4334      	orrs	r4, r6
 800fd00:	d103      	bne.n	800fd0a <__ieee754_atan2+0x5a>
 800fd02:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd06:	f000 b89b 	b.w	800fe40 <atan>
 800fd0a:	17bc      	asrs	r4, r7, #30
 800fd0c:	f004 0402 	and.w	r4, r4, #2
 800fd10:	ea53 0909 	orrs.w	r9, r3, r9
 800fd14:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800fd18:	d107      	bne.n	800fd2a <__ieee754_atan2+0x7a>
 800fd1a:	2c02      	cmp	r4, #2
 800fd1c:	d05f      	beq.n	800fdde <__ieee754_atan2+0x12e>
 800fd1e:	2c03      	cmp	r4, #3
 800fd20:	d1e5      	bne.n	800fcee <__ieee754_atan2+0x3e>
 800fd22:	a141      	add	r1, pc, #260	@ (adr r1, 800fe28 <__ieee754_atan2+0x178>)
 800fd24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd28:	e7e1      	b.n	800fcee <__ieee754_atan2+0x3e>
 800fd2a:	4315      	orrs	r5, r2
 800fd2c:	d106      	bne.n	800fd3c <__ieee754_atan2+0x8c>
 800fd2e:	f1be 0f00 	cmp.w	lr, #0
 800fd32:	da5f      	bge.n	800fdf4 <__ieee754_atan2+0x144>
 800fd34:	a13e      	add	r1, pc, #248	@ (adr r1, 800fe30 <__ieee754_atan2+0x180>)
 800fd36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd3a:	e7d8      	b.n	800fcee <__ieee754_atan2+0x3e>
 800fd3c:	4542      	cmp	r2, r8
 800fd3e:	d10f      	bne.n	800fd60 <__ieee754_atan2+0xb0>
 800fd40:	4293      	cmp	r3, r2
 800fd42:	f104 34ff 	add.w	r4, r4, #4294967295
 800fd46:	d107      	bne.n	800fd58 <__ieee754_atan2+0xa8>
 800fd48:	2c02      	cmp	r4, #2
 800fd4a:	d84c      	bhi.n	800fde6 <__ieee754_atan2+0x136>
 800fd4c:	4b34      	ldr	r3, [pc, #208]	@ (800fe20 <__ieee754_atan2+0x170>)
 800fd4e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fd52:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fd56:	e7ca      	b.n	800fcee <__ieee754_atan2+0x3e>
 800fd58:	2c02      	cmp	r4, #2
 800fd5a:	d848      	bhi.n	800fdee <__ieee754_atan2+0x13e>
 800fd5c:	4b31      	ldr	r3, [pc, #196]	@ (800fe24 <__ieee754_atan2+0x174>)
 800fd5e:	e7f6      	b.n	800fd4e <__ieee754_atan2+0x9e>
 800fd60:	4543      	cmp	r3, r8
 800fd62:	d0e4      	beq.n	800fd2e <__ieee754_atan2+0x7e>
 800fd64:	1a9b      	subs	r3, r3, r2
 800fd66:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800fd6a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800fd6e:	da1e      	bge.n	800fdae <__ieee754_atan2+0xfe>
 800fd70:	2f00      	cmp	r7, #0
 800fd72:	da01      	bge.n	800fd78 <__ieee754_atan2+0xc8>
 800fd74:	323c      	adds	r2, #60	@ 0x3c
 800fd76:	db1e      	blt.n	800fdb6 <__ieee754_atan2+0x106>
 800fd78:	4632      	mov	r2, r6
 800fd7a:	463b      	mov	r3, r7
 800fd7c:	f7f0 fd66 	bl	800084c <__aeabi_ddiv>
 800fd80:	ec41 0b10 	vmov	d0, r0, r1
 800fd84:	f000 f9f4 	bl	8010170 <fabs>
 800fd88:	f000 f85a 	bl	800fe40 <atan>
 800fd8c:	ec51 0b10 	vmov	r0, r1, d0
 800fd90:	2c01      	cmp	r4, #1
 800fd92:	d013      	beq.n	800fdbc <__ieee754_atan2+0x10c>
 800fd94:	2c02      	cmp	r4, #2
 800fd96:	d015      	beq.n	800fdc4 <__ieee754_atan2+0x114>
 800fd98:	2c00      	cmp	r4, #0
 800fd9a:	d0a8      	beq.n	800fcee <__ieee754_atan2+0x3e>
 800fd9c:	a318      	add	r3, pc, #96	@ (adr r3, 800fe00 <__ieee754_atan2+0x150>)
 800fd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda2:	f7f0 fa71 	bl	8000288 <__aeabi_dsub>
 800fda6:	a318      	add	r3, pc, #96	@ (adr r3, 800fe08 <__ieee754_atan2+0x158>)
 800fda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdac:	e014      	b.n	800fdd8 <__ieee754_atan2+0x128>
 800fdae:	a118      	add	r1, pc, #96	@ (adr r1, 800fe10 <__ieee754_atan2+0x160>)
 800fdb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdb4:	e7ec      	b.n	800fd90 <__ieee754_atan2+0xe0>
 800fdb6:	2000      	movs	r0, #0
 800fdb8:	2100      	movs	r1, #0
 800fdba:	e7e9      	b.n	800fd90 <__ieee754_atan2+0xe0>
 800fdbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fdc0:	4619      	mov	r1, r3
 800fdc2:	e794      	b.n	800fcee <__ieee754_atan2+0x3e>
 800fdc4:	a30e      	add	r3, pc, #56	@ (adr r3, 800fe00 <__ieee754_atan2+0x150>)
 800fdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdca:	f7f0 fa5d 	bl	8000288 <__aeabi_dsub>
 800fdce:	4602      	mov	r2, r0
 800fdd0:	460b      	mov	r3, r1
 800fdd2:	a10d      	add	r1, pc, #52	@ (adr r1, 800fe08 <__ieee754_atan2+0x158>)
 800fdd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdd8:	f7f0 fa56 	bl	8000288 <__aeabi_dsub>
 800fddc:	e787      	b.n	800fcee <__ieee754_atan2+0x3e>
 800fdde:	a10a      	add	r1, pc, #40	@ (adr r1, 800fe08 <__ieee754_atan2+0x158>)
 800fde0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fde4:	e783      	b.n	800fcee <__ieee754_atan2+0x3e>
 800fde6:	a10c      	add	r1, pc, #48	@ (adr r1, 800fe18 <__ieee754_atan2+0x168>)
 800fde8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdec:	e77f      	b.n	800fcee <__ieee754_atan2+0x3e>
 800fdee:	2000      	movs	r0, #0
 800fdf0:	2100      	movs	r1, #0
 800fdf2:	e77c      	b.n	800fcee <__ieee754_atan2+0x3e>
 800fdf4:	a106      	add	r1, pc, #24	@ (adr r1, 800fe10 <__ieee754_atan2+0x160>)
 800fdf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdfa:	e778      	b.n	800fcee <__ieee754_atan2+0x3e>
 800fdfc:	f3af 8000 	nop.w
 800fe00:	33145c07 	.word	0x33145c07
 800fe04:	3ca1a626 	.word	0x3ca1a626
 800fe08:	54442d18 	.word	0x54442d18
 800fe0c:	400921fb 	.word	0x400921fb
 800fe10:	54442d18 	.word	0x54442d18
 800fe14:	3ff921fb 	.word	0x3ff921fb
 800fe18:	54442d18 	.word	0x54442d18
 800fe1c:	3fe921fb 	.word	0x3fe921fb
 800fe20:	080111d8 	.word	0x080111d8
 800fe24:	080111c0 	.word	0x080111c0
 800fe28:	54442d18 	.word	0x54442d18
 800fe2c:	c00921fb 	.word	0xc00921fb
 800fe30:	54442d18 	.word	0x54442d18
 800fe34:	bff921fb 	.word	0xbff921fb
 800fe38:	7ff00000 	.word	0x7ff00000
 800fe3c:	00000000 	.word	0x00000000

0800fe40 <atan>:
 800fe40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe44:	ec55 4b10 	vmov	r4, r5, d0
 800fe48:	4bbf      	ldr	r3, [pc, #764]	@ (8010148 <atan+0x308>)
 800fe4a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800fe4e:	429e      	cmp	r6, r3
 800fe50:	46ab      	mov	fp, r5
 800fe52:	d918      	bls.n	800fe86 <atan+0x46>
 800fe54:	4bbd      	ldr	r3, [pc, #756]	@ (801014c <atan+0x30c>)
 800fe56:	429e      	cmp	r6, r3
 800fe58:	d801      	bhi.n	800fe5e <atan+0x1e>
 800fe5a:	d109      	bne.n	800fe70 <atan+0x30>
 800fe5c:	b144      	cbz	r4, 800fe70 <atan+0x30>
 800fe5e:	4622      	mov	r2, r4
 800fe60:	462b      	mov	r3, r5
 800fe62:	4620      	mov	r0, r4
 800fe64:	4629      	mov	r1, r5
 800fe66:	f7f0 fa11 	bl	800028c <__adddf3>
 800fe6a:	4604      	mov	r4, r0
 800fe6c:	460d      	mov	r5, r1
 800fe6e:	e006      	b.n	800fe7e <atan+0x3e>
 800fe70:	f1bb 0f00 	cmp.w	fp, #0
 800fe74:	f340 812b 	ble.w	80100ce <atan+0x28e>
 800fe78:	a597      	add	r5, pc, #604	@ (adr r5, 80100d8 <atan+0x298>)
 800fe7a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fe7e:	ec45 4b10 	vmov	d0, r4, r5
 800fe82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe86:	4bb2      	ldr	r3, [pc, #712]	@ (8010150 <atan+0x310>)
 800fe88:	429e      	cmp	r6, r3
 800fe8a:	d813      	bhi.n	800feb4 <atan+0x74>
 800fe8c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800fe90:	429e      	cmp	r6, r3
 800fe92:	d80c      	bhi.n	800feae <atan+0x6e>
 800fe94:	a392      	add	r3, pc, #584	@ (adr r3, 80100e0 <atan+0x2a0>)
 800fe96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe9a:	4620      	mov	r0, r4
 800fe9c:	4629      	mov	r1, r5
 800fe9e:	f7f0 f9f5 	bl	800028c <__adddf3>
 800fea2:	4bac      	ldr	r3, [pc, #688]	@ (8010154 <atan+0x314>)
 800fea4:	2200      	movs	r2, #0
 800fea6:	f7f0 fe37 	bl	8000b18 <__aeabi_dcmpgt>
 800feaa:	2800      	cmp	r0, #0
 800feac:	d1e7      	bne.n	800fe7e <atan+0x3e>
 800feae:	f04f 3aff 	mov.w	sl, #4294967295
 800feb2:	e029      	b.n	800ff08 <atan+0xc8>
 800feb4:	f000 f95c 	bl	8010170 <fabs>
 800feb8:	4ba7      	ldr	r3, [pc, #668]	@ (8010158 <atan+0x318>)
 800feba:	429e      	cmp	r6, r3
 800febc:	ec55 4b10 	vmov	r4, r5, d0
 800fec0:	f200 80bc 	bhi.w	801003c <atan+0x1fc>
 800fec4:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800fec8:	429e      	cmp	r6, r3
 800feca:	f200 809e 	bhi.w	801000a <atan+0x1ca>
 800fece:	4622      	mov	r2, r4
 800fed0:	462b      	mov	r3, r5
 800fed2:	4620      	mov	r0, r4
 800fed4:	4629      	mov	r1, r5
 800fed6:	f7f0 f9d9 	bl	800028c <__adddf3>
 800feda:	4b9e      	ldr	r3, [pc, #632]	@ (8010154 <atan+0x314>)
 800fedc:	2200      	movs	r2, #0
 800fede:	f7f0 f9d3 	bl	8000288 <__aeabi_dsub>
 800fee2:	2200      	movs	r2, #0
 800fee4:	4606      	mov	r6, r0
 800fee6:	460f      	mov	r7, r1
 800fee8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800feec:	4620      	mov	r0, r4
 800feee:	4629      	mov	r1, r5
 800fef0:	f7f0 f9cc 	bl	800028c <__adddf3>
 800fef4:	4602      	mov	r2, r0
 800fef6:	460b      	mov	r3, r1
 800fef8:	4630      	mov	r0, r6
 800fefa:	4639      	mov	r1, r7
 800fefc:	f7f0 fca6 	bl	800084c <__aeabi_ddiv>
 800ff00:	f04f 0a00 	mov.w	sl, #0
 800ff04:	4604      	mov	r4, r0
 800ff06:	460d      	mov	r5, r1
 800ff08:	4622      	mov	r2, r4
 800ff0a:	462b      	mov	r3, r5
 800ff0c:	4620      	mov	r0, r4
 800ff0e:	4629      	mov	r1, r5
 800ff10:	f7f0 fb72 	bl	80005f8 <__aeabi_dmul>
 800ff14:	4602      	mov	r2, r0
 800ff16:	460b      	mov	r3, r1
 800ff18:	4680      	mov	r8, r0
 800ff1a:	4689      	mov	r9, r1
 800ff1c:	f7f0 fb6c 	bl	80005f8 <__aeabi_dmul>
 800ff20:	a371      	add	r3, pc, #452	@ (adr r3, 80100e8 <atan+0x2a8>)
 800ff22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff26:	4606      	mov	r6, r0
 800ff28:	460f      	mov	r7, r1
 800ff2a:	f7f0 fb65 	bl	80005f8 <__aeabi_dmul>
 800ff2e:	a370      	add	r3, pc, #448	@ (adr r3, 80100f0 <atan+0x2b0>)
 800ff30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff34:	f7f0 f9aa 	bl	800028c <__adddf3>
 800ff38:	4632      	mov	r2, r6
 800ff3a:	463b      	mov	r3, r7
 800ff3c:	f7f0 fb5c 	bl	80005f8 <__aeabi_dmul>
 800ff40:	a36d      	add	r3, pc, #436	@ (adr r3, 80100f8 <atan+0x2b8>)
 800ff42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff46:	f7f0 f9a1 	bl	800028c <__adddf3>
 800ff4a:	4632      	mov	r2, r6
 800ff4c:	463b      	mov	r3, r7
 800ff4e:	f7f0 fb53 	bl	80005f8 <__aeabi_dmul>
 800ff52:	a36b      	add	r3, pc, #428	@ (adr r3, 8010100 <atan+0x2c0>)
 800ff54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff58:	f7f0 f998 	bl	800028c <__adddf3>
 800ff5c:	4632      	mov	r2, r6
 800ff5e:	463b      	mov	r3, r7
 800ff60:	f7f0 fb4a 	bl	80005f8 <__aeabi_dmul>
 800ff64:	a368      	add	r3, pc, #416	@ (adr r3, 8010108 <atan+0x2c8>)
 800ff66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff6a:	f7f0 f98f 	bl	800028c <__adddf3>
 800ff6e:	4632      	mov	r2, r6
 800ff70:	463b      	mov	r3, r7
 800ff72:	f7f0 fb41 	bl	80005f8 <__aeabi_dmul>
 800ff76:	a366      	add	r3, pc, #408	@ (adr r3, 8010110 <atan+0x2d0>)
 800ff78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff7c:	f7f0 f986 	bl	800028c <__adddf3>
 800ff80:	4642      	mov	r2, r8
 800ff82:	464b      	mov	r3, r9
 800ff84:	f7f0 fb38 	bl	80005f8 <__aeabi_dmul>
 800ff88:	a363      	add	r3, pc, #396	@ (adr r3, 8010118 <atan+0x2d8>)
 800ff8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff8e:	4680      	mov	r8, r0
 800ff90:	4689      	mov	r9, r1
 800ff92:	4630      	mov	r0, r6
 800ff94:	4639      	mov	r1, r7
 800ff96:	f7f0 fb2f 	bl	80005f8 <__aeabi_dmul>
 800ff9a:	a361      	add	r3, pc, #388	@ (adr r3, 8010120 <atan+0x2e0>)
 800ff9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffa0:	f7f0 f972 	bl	8000288 <__aeabi_dsub>
 800ffa4:	4632      	mov	r2, r6
 800ffa6:	463b      	mov	r3, r7
 800ffa8:	f7f0 fb26 	bl	80005f8 <__aeabi_dmul>
 800ffac:	a35e      	add	r3, pc, #376	@ (adr r3, 8010128 <atan+0x2e8>)
 800ffae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffb2:	f7f0 f969 	bl	8000288 <__aeabi_dsub>
 800ffb6:	4632      	mov	r2, r6
 800ffb8:	463b      	mov	r3, r7
 800ffba:	f7f0 fb1d 	bl	80005f8 <__aeabi_dmul>
 800ffbe:	a35c      	add	r3, pc, #368	@ (adr r3, 8010130 <atan+0x2f0>)
 800ffc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc4:	f7f0 f960 	bl	8000288 <__aeabi_dsub>
 800ffc8:	4632      	mov	r2, r6
 800ffca:	463b      	mov	r3, r7
 800ffcc:	f7f0 fb14 	bl	80005f8 <__aeabi_dmul>
 800ffd0:	a359      	add	r3, pc, #356	@ (adr r3, 8010138 <atan+0x2f8>)
 800ffd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd6:	f7f0 f957 	bl	8000288 <__aeabi_dsub>
 800ffda:	4632      	mov	r2, r6
 800ffdc:	463b      	mov	r3, r7
 800ffde:	f7f0 fb0b 	bl	80005f8 <__aeabi_dmul>
 800ffe2:	4602      	mov	r2, r0
 800ffe4:	460b      	mov	r3, r1
 800ffe6:	4640      	mov	r0, r8
 800ffe8:	4649      	mov	r1, r9
 800ffea:	f7f0 f94f 	bl	800028c <__adddf3>
 800ffee:	4622      	mov	r2, r4
 800fff0:	462b      	mov	r3, r5
 800fff2:	f7f0 fb01 	bl	80005f8 <__aeabi_dmul>
 800fff6:	f1ba 3fff 	cmp.w	sl, #4294967295
 800fffa:	4602      	mov	r2, r0
 800fffc:	460b      	mov	r3, r1
 800fffe:	d148      	bne.n	8010092 <atan+0x252>
 8010000:	4620      	mov	r0, r4
 8010002:	4629      	mov	r1, r5
 8010004:	f7f0 f940 	bl	8000288 <__aeabi_dsub>
 8010008:	e72f      	b.n	800fe6a <atan+0x2a>
 801000a:	4b52      	ldr	r3, [pc, #328]	@ (8010154 <atan+0x314>)
 801000c:	2200      	movs	r2, #0
 801000e:	4620      	mov	r0, r4
 8010010:	4629      	mov	r1, r5
 8010012:	f7f0 f939 	bl	8000288 <__aeabi_dsub>
 8010016:	4b4f      	ldr	r3, [pc, #316]	@ (8010154 <atan+0x314>)
 8010018:	4606      	mov	r6, r0
 801001a:	460f      	mov	r7, r1
 801001c:	2200      	movs	r2, #0
 801001e:	4620      	mov	r0, r4
 8010020:	4629      	mov	r1, r5
 8010022:	f7f0 f933 	bl	800028c <__adddf3>
 8010026:	4602      	mov	r2, r0
 8010028:	460b      	mov	r3, r1
 801002a:	4630      	mov	r0, r6
 801002c:	4639      	mov	r1, r7
 801002e:	f7f0 fc0d 	bl	800084c <__aeabi_ddiv>
 8010032:	f04f 0a01 	mov.w	sl, #1
 8010036:	4604      	mov	r4, r0
 8010038:	460d      	mov	r5, r1
 801003a:	e765      	b.n	800ff08 <atan+0xc8>
 801003c:	4b47      	ldr	r3, [pc, #284]	@ (801015c <atan+0x31c>)
 801003e:	429e      	cmp	r6, r3
 8010040:	d21c      	bcs.n	801007c <atan+0x23c>
 8010042:	4b47      	ldr	r3, [pc, #284]	@ (8010160 <atan+0x320>)
 8010044:	2200      	movs	r2, #0
 8010046:	4620      	mov	r0, r4
 8010048:	4629      	mov	r1, r5
 801004a:	f7f0 f91d 	bl	8000288 <__aeabi_dsub>
 801004e:	4b44      	ldr	r3, [pc, #272]	@ (8010160 <atan+0x320>)
 8010050:	4606      	mov	r6, r0
 8010052:	460f      	mov	r7, r1
 8010054:	2200      	movs	r2, #0
 8010056:	4620      	mov	r0, r4
 8010058:	4629      	mov	r1, r5
 801005a:	f7f0 facd 	bl	80005f8 <__aeabi_dmul>
 801005e:	4b3d      	ldr	r3, [pc, #244]	@ (8010154 <atan+0x314>)
 8010060:	2200      	movs	r2, #0
 8010062:	f7f0 f913 	bl	800028c <__adddf3>
 8010066:	4602      	mov	r2, r0
 8010068:	460b      	mov	r3, r1
 801006a:	4630      	mov	r0, r6
 801006c:	4639      	mov	r1, r7
 801006e:	f7f0 fbed 	bl	800084c <__aeabi_ddiv>
 8010072:	f04f 0a02 	mov.w	sl, #2
 8010076:	4604      	mov	r4, r0
 8010078:	460d      	mov	r5, r1
 801007a:	e745      	b.n	800ff08 <atan+0xc8>
 801007c:	4622      	mov	r2, r4
 801007e:	462b      	mov	r3, r5
 8010080:	4938      	ldr	r1, [pc, #224]	@ (8010164 <atan+0x324>)
 8010082:	2000      	movs	r0, #0
 8010084:	f7f0 fbe2 	bl	800084c <__aeabi_ddiv>
 8010088:	f04f 0a03 	mov.w	sl, #3
 801008c:	4604      	mov	r4, r0
 801008e:	460d      	mov	r5, r1
 8010090:	e73a      	b.n	800ff08 <atan+0xc8>
 8010092:	4b35      	ldr	r3, [pc, #212]	@ (8010168 <atan+0x328>)
 8010094:	4e35      	ldr	r6, [pc, #212]	@ (801016c <atan+0x32c>)
 8010096:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801009a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801009e:	f7f0 f8f3 	bl	8000288 <__aeabi_dsub>
 80100a2:	4622      	mov	r2, r4
 80100a4:	462b      	mov	r3, r5
 80100a6:	f7f0 f8ef 	bl	8000288 <__aeabi_dsub>
 80100aa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80100ae:	4602      	mov	r2, r0
 80100b0:	460b      	mov	r3, r1
 80100b2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80100b6:	f7f0 f8e7 	bl	8000288 <__aeabi_dsub>
 80100ba:	f1bb 0f00 	cmp.w	fp, #0
 80100be:	4604      	mov	r4, r0
 80100c0:	460d      	mov	r5, r1
 80100c2:	f6bf aedc 	bge.w	800fe7e <atan+0x3e>
 80100c6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80100ca:	461d      	mov	r5, r3
 80100cc:	e6d7      	b.n	800fe7e <atan+0x3e>
 80100ce:	a51c      	add	r5, pc, #112	@ (adr r5, 8010140 <atan+0x300>)
 80100d0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80100d4:	e6d3      	b.n	800fe7e <atan+0x3e>
 80100d6:	bf00      	nop
 80100d8:	54442d18 	.word	0x54442d18
 80100dc:	3ff921fb 	.word	0x3ff921fb
 80100e0:	8800759c 	.word	0x8800759c
 80100e4:	7e37e43c 	.word	0x7e37e43c
 80100e8:	e322da11 	.word	0xe322da11
 80100ec:	3f90ad3a 	.word	0x3f90ad3a
 80100f0:	24760deb 	.word	0x24760deb
 80100f4:	3fa97b4b 	.word	0x3fa97b4b
 80100f8:	a0d03d51 	.word	0xa0d03d51
 80100fc:	3fb10d66 	.word	0x3fb10d66
 8010100:	c54c206e 	.word	0xc54c206e
 8010104:	3fb745cd 	.word	0x3fb745cd
 8010108:	920083ff 	.word	0x920083ff
 801010c:	3fc24924 	.word	0x3fc24924
 8010110:	5555550d 	.word	0x5555550d
 8010114:	3fd55555 	.word	0x3fd55555
 8010118:	2c6a6c2f 	.word	0x2c6a6c2f
 801011c:	bfa2b444 	.word	0xbfa2b444
 8010120:	52defd9a 	.word	0x52defd9a
 8010124:	3fadde2d 	.word	0x3fadde2d
 8010128:	af749a6d 	.word	0xaf749a6d
 801012c:	3fb3b0f2 	.word	0x3fb3b0f2
 8010130:	fe231671 	.word	0xfe231671
 8010134:	3fbc71c6 	.word	0x3fbc71c6
 8010138:	9998ebc4 	.word	0x9998ebc4
 801013c:	3fc99999 	.word	0x3fc99999
 8010140:	54442d18 	.word	0x54442d18
 8010144:	bff921fb 	.word	0xbff921fb
 8010148:	440fffff 	.word	0x440fffff
 801014c:	7ff00000 	.word	0x7ff00000
 8010150:	3fdbffff 	.word	0x3fdbffff
 8010154:	3ff00000 	.word	0x3ff00000
 8010158:	3ff2ffff 	.word	0x3ff2ffff
 801015c:	40038000 	.word	0x40038000
 8010160:	3ff80000 	.word	0x3ff80000
 8010164:	bff00000 	.word	0xbff00000
 8010168:	080111f0 	.word	0x080111f0
 801016c:	08011210 	.word	0x08011210

08010170 <fabs>:
 8010170:	ec51 0b10 	vmov	r0, r1, d0
 8010174:	4602      	mov	r2, r0
 8010176:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801017a:	ec43 2b10 	vmov	d0, r2, r3
 801017e:	4770      	bx	lr

08010180 <_init>:
 8010180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010182:	bf00      	nop
 8010184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010186:	bc08      	pop	{r3}
 8010188:	469e      	mov	lr, r3
 801018a:	4770      	bx	lr

0801018c <_fini>:
 801018c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801018e:	bf00      	nop
 8010190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010192:	bc08      	pop	{r3}
 8010194:	469e      	mov	lr, r3
 8010196:	4770      	bx	lr
