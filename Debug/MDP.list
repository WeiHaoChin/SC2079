
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011140  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001148  080112d0  080112d0  000122d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012418  08012418  00014200  2**0
                  CONTENTS
  4 .ARM          00000008  08012418  08012418  00013418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012420  08012420  00014200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012420  08012420  00013420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012424  08012424  00013424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08012428  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014200  2**0
                  CONTENTS
 10 .bss          000052b8  20000200  20000200  00014200  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200054b8  200054b8  00014200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ef1b  00000000  00000000  00014230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040f8  00000000  00000000  0003314b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c78  00000000  00000000  00037248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000166b  00000000  00000000  00038ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000062e9  00000000  00000000  0003a52b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020bf9  00000000  00000000  00040814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea1b5  00000000  00000000  0006140d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014b5c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008f18  00000000  00000000  0014b608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  00154520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080112b8 	.word	0x080112b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	080112b8 	.word	0x080112b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <MahonyQuaternionUpdate>:
	q[2]=q2 * recipNorm;
	q[3]=q3 * recipNorm;
	}

void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz,float deltat,float q[4])
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b098      	sub	sp, #96	@ 0x60
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	ed87 0a07 	vstr	s0, [r7, #28]
 8000f82:	edc7 0a06 	vstr	s1, [r7, #24]
 8000f86:	ed87 1a05 	vstr	s2, [r7, #20]
 8000f8a:	edc7 1a04 	vstr	s3, [r7, #16]
 8000f8e:	ed87 2a03 	vstr	s4, [r7, #12]
 8000f92:	edc7 2a02 	vstr	s5, [r7, #8]
 8000f96:	ed87 3a01 	vstr	s6, [r7, #4]
 8000f9a:	6038      	str	r0, [r7, #0]
	float Kp =(2.0f * 0.5f);
 8000f9c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000fa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
	float Ki =0;//(2.0f * 0.5f);
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	65bb      	str	r3, [r7, #88]	@ 0x58

	float q0 = q[0], q1 = q[1], q2 = q[2], q3 = q[3];
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	657b      	str	r3, [r7, #84]	@ 0x54
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8000fc0:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fcc:	d10e      	bne.n	8000fec <MahonyQuaternionUpdate+0x74>
 8000fce:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fda:	d107      	bne.n	8000fec <MahonyQuaternionUpdate+0x74>
 8000fdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fe0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe8:	f000 8117 	beq.w	800121a <MahonyQuaternionUpdate+0x2a2>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8000fec:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ff0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ff4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ff8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001000:	edd7 7a05 	vldr	s15, [r7, #20]
 8001004:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800100c:	eeb0 0a67 	vmov.f32	s0, s15
 8001010:	f000 fa5e 	bl	80014d0 <invSqrt>
 8001014:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax *= recipNorm;
 8001018:	ed97 7a07 	vldr	s14, [r7, #28]
 800101c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001024:	edc7 7a07 	vstr	s15, [r7, #28]
		ay *= recipNorm;
 8001028:	ed97 7a06 	vldr	s14, [r7, #24]
 800102c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001034:	edc7 7a06 	vstr	s15, [r7, #24]
		az *= recipNorm;
 8001038:	ed97 7a05 	vldr	s14, [r7, #20]
 800103c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001044:	edc7 7a05 	vstr	s15, [r7, #20]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q1 * q3 - q0 * q2;
 8001048:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800104c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001050:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001054:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001058:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800105c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001064:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q0 * q1 + q2 * q3;
 8001068:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800106c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001070:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001074:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8001078:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800107c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001084:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q0 * q0 - 0.5f + q3 * q3;
 8001088:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800108c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001090:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001094:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001098:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800109c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
 80010a8:	ed97 7a06 	vldr	s14, [r7, #24]
 80010ac:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80010b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010b4:	edd7 6a05 	vldr	s13, [r7, #20]
 80010b8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80010bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az * halfvx - ax * halfvz);
 80010c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80010cc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80010d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80010d8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80010dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax * halfvy - ay * halfvx);
 80010e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80010ec:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80010f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010f4:	edd7 6a06 	vldr	s13, [r7, #24]
 80010f8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80010fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001104:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(Ki > 0.0f) {
 8001108:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800110c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001114:	dd51      	ble.n	80011ba <MahonyQuaternionUpdate+0x242>
			eInt[0] += Ki * halfex * deltat;	// integral error scaled by Ki
 8001116:	4bb2      	ldr	r3, [pc, #712]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 8001118:	ed93 7a00 	vldr	s14, [r3]
 800111c:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001120:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001124:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001128:	edd7 7a01 	vldr	s15, [r7, #4]
 800112c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001134:	4baa      	ldr	r3, [pc, #680]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 8001136:	edc3 7a00 	vstr	s15, [r3]
			eInt[1] += Ki * halfey * deltat;
 800113a:	4ba9      	ldr	r3, [pc, #676]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 800113c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001140:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001144:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001148:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800114c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001150:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001158:	4ba1      	ldr	r3, [pc, #644]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 800115a:	edc3 7a01 	vstr	s15, [r3, #4]
			eInt[2] += Ki * halfez * deltat;
 800115e:	4ba0      	ldr	r3, [pc, #640]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 8001160:	ed93 7a02 	vldr	s14, [r3, #8]
 8001164:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001168:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800116c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001170:	edd7 7a01 	vldr	s15, [r7, #4]
 8001174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117c:	4b98      	ldr	r3, [pc, #608]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 800117e:	edc3 7a02 	vstr	s15, [r3, #8]
			gx += eInt[0];	// apply integral feedback
 8001182:	4b97      	ldr	r3, [pc, #604]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 8001184:	edd3 7a00 	vldr	s15, [r3]
 8001188:	ed97 7a04 	vldr	s14, [r7, #16]
 800118c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001190:	edc7 7a04 	vstr	s15, [r7, #16]
			gy += eInt[1];
 8001194:	4b92      	ldr	r3, [pc, #584]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 8001196:	edd3 7a01 	vldr	s15, [r3, #4]
 800119a:	ed97 7a03 	vldr	s14, [r7, #12]
 800119e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a2:	edc7 7a03 	vstr	s15, [r7, #12]
			gz += eInt[2];
 80011a6:	4b8e      	ldr	r3, [pc, #568]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 80011a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80011ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80011b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b4:	edc7 7a02 	vstr	s15, [r7, #8]
 80011b8:	e00b      	b.n	80011d2 <MahonyQuaternionUpdate+0x25a>
		}
		else {
			eInt[0] = 0.0f;	// prevent integral windup
 80011ba:	4b89      	ldr	r3, [pc, #548]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
			eInt[1] = 0.0f;
 80011c2:	4b87      	ldr	r3, [pc, #540]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	605a      	str	r2, [r3, #4]
			eInt[2] = 0.0f;
 80011ca:	4b85      	ldr	r3, [pc, #532]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
		}

		// Apply proportional feedback
		gx += Kp * halfex;
 80011d2:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80011d6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80011da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011de:	ed97 7a04 	vldr	s14, [r7, #16]
 80011e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e6:	edc7 7a04 	vstr	s15, [r7, #16]
		gy += Kp * halfey;
 80011ea:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80011ee:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80011f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80011fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fe:	edc7 7a03 	vstr	s15, [r7, #12]
		gz += Kp * halfez;
 8001202:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001206:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800120a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800120e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001216:	edc7 7a02 	vstr	s15, [r7, #8]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * deltat);		// pre-multiply common factors
 800121a:	edd7 7a01 	vldr	s15, [r7, #4]
 800121e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001226:	ed97 7a04 	vldr	s14, [r7, #16]
 800122a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800122e:	edc7 7a04 	vstr	s15, [r7, #16]
	gy *= (0.5f * deltat);
 8001232:	edd7 7a01 	vldr	s15, [r7, #4]
 8001236:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800123a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800123e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001246:	edc7 7a03 	vstr	s15, [r7, #12]
	gz *= (0.5f * deltat);
 800124a:	edd7 7a01 	vldr	s15, [r7, #4]
 800124e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001256:	ed97 7a02 	vldr	s14, [r7, #8]
 800125a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125e:	edc7 7a02 	vstr	s15, [r7, #8]
	qa = q0;
 8001262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001264:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q1;
 8001266:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q2;
 800126a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800126c:	623b      	str	r3, [r7, #32]
	q0 += (-qb * gx - qc * gy - q3 * gz);
 800126e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001272:	eeb1 7a67 	vneg.f32	s14, s15
 8001276:	edd7 7a04 	vldr	s15, [r7, #16]
 800127a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001282:	edd7 7a03 	vldr	s15, [r7, #12]
 8001286:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800128a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800128e:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001292:	edd7 7a02 	vldr	s15, [r7, #8]
 8001296:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800129a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800129e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80012a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a6:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	q1 += (qa * gx + qc * gz - q3 * gy);
 80012aa:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80012ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012b6:	edd7 6a08 	vldr	s13, [r7, #32]
 80012ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80012be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012c6:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80012ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80012da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012de:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
	q2 += (qa * gy - qb * gz + q3 * gx);
 80012e2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80012e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ee:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80012f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80012f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012fe:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001302:	edd7 7a04 	vldr	s15, [r7, #16]
 8001306:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800130a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001316:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
	q3 += (qa * gz + qb * gy - qc * gx);
 800131a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800131e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001322:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001326:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800132a:	edd7 7a03 	vldr	s15, [r7, #12]
 800132e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001332:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001336:	edd7 6a08 	vldr	s13, [r7, #32]
 800133a:	edd7 7a04 	vldr	s15, [r7, #16]
 800133e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001342:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001346:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800134a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001352:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001356:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800135a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800135e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001362:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001366:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800136a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800136e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001372:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001376:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800137a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137e:	eeb0 0a67 	vmov.f32	s0, s15
 8001382:	f000 f8a5 	bl	80014d0 <invSqrt>
 8001386:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0]=q0 * recipNorm;
 800138a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800138e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	edc3 7a00 	vstr	s15, [r3]
	q[1]=q1 * recipNorm;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	3304      	adds	r3, #4
 80013a0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80013a4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80013a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ac:	edc3 7a00 	vstr	s15, [r3]
	q[2]=q2 * recipNorm;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	3308      	adds	r3, #8
 80013b4:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80013b8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80013bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c0:	edc3 7a00 	vstr	s15, [r3]
	q[3]=q3 * recipNorm;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	330c      	adds	r3, #12
 80013c8:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80013cc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80013d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d4:	edc3 7a00 	vstr	s15, [r3]
	}
 80013d8:	bf00      	nop
 80013da:	3760      	adds	r7, #96	@ 0x60
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	2000021c 	.word	0x2000021c
 80013e4:	00000000 	.word	0x00000000

080013e8 <GetYawFromQ>:
float GetYawFromQ(float q[4])
{
 80013e8:	b5b0      	push	{r4, r5, r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	return atan2(2.0f * (q[1] * q[2] + q[0] * q[3]),
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3304      	adds	r3, #4
 80013f4:	ed93 7a00 	vldr	s14, [r3]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3308      	adds	r3, #8
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	edd3 6a00 	vldr	s13, [r3]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	330c      	adds	r3, #12
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800141e:	ee17 0a90 	vmov	r0, s15
 8001422:	f7ff f891 	bl	8000548 <__aeabi_f2d>
 8001426:	4604      	mov	r4, r0
 8001428:	460d      	mov	r5, r1
	       q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3])*(180.0f/3.14159265359);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	ed93 7a00 	vldr	s14, [r3]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	ee27 7a27 	vmul.f32	s14, s14, s15
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3304      	adds	r3, #4
 800143e:	edd3 6a00 	vldr	s13, [r3]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3304      	adds	r3, #4
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800144e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3308      	adds	r3, #8
 8001456:	edd3 6a00 	vldr	s13, [r3]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3308      	adds	r3, #8
 800145e:	edd3 7a00 	vldr	s15, [r3]
 8001462:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001466:	ee37 7a67 	vsub.f32	s14, s14, s15
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	330c      	adds	r3, #12
 800146e:	edd3 6a00 	vldr	s13, [r3]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	330c      	adds	r3, #12
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800147e:	ee77 7a67 	vsub.f32	s15, s14, s15
	return atan2(2.0f * (q[1] * q[2] + q[0] * q[3]),
 8001482:	ee17 0a90 	vmov	r0, s15
 8001486:	f7ff f85f 	bl	8000548 <__aeabi_f2d>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	ec43 2b11 	vmov	d1, r2, r3
 8001492:	ec45 4b10 	vmov	d0, r4, r5
 8001496:	f00e fd4d 	bl	800ff34 <atan2>
 800149a:	ec51 0b10 	vmov	r0, r1, d0
	       q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3])*(180.0f/3.14159265359);
 800149e:	a30a      	add	r3, pc, #40	@ (adr r3, 80014c8 <GetYawFromQ+0xe0>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	f7ff f8a8 	bl	80005f8 <__aeabi_dmul>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f7ff fb9a 	bl	8000be8 <__aeabi_d2f>
 80014b4:	4603      	mov	r3, r0
 80014b6:	ee07 3a90 	vmov	s15, r3
	}
 80014ba:	eeb0 0a67 	vmov.f32	s0, s15
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bdb0      	pop	{r4, r5, r7, pc}
 80014c4:	f3af 8000 	nop.w
 80014c8:	1a63bfe5 	.word	0x1a63bfe5
 80014cc:	404ca5dc 	.word	0x404ca5dc

080014d0 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80014da:	edd7 7a01 	vldr	s15, [r7, #4]
 80014de:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80014e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e6:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	105a      	asrs	r2, r3, #1
 80014fa:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <invSqrt+0x74>)
 80014fc:	1a9b      	subs	r3, r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001508:	ed97 7a04 	vldr	s14, [r7, #16]
 800150c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001510:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001514:	edd7 7a04 	vldr	s15, [r7, #16]
 8001518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001520:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001524:	edd7 7a04 	vldr	s15, [r7, #16]
 8001528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152c:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	ee07 3a90 	vmov	s15, r3
}
 8001536:	eeb0 0a67 	vmov.f32	s0, s15
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	5f3759df 	.word	0x5f3759df

08001548 <PID_Init>:
    float output_max;   // Maximum output value
    uint32_t prevtick;
} PIDController;

// Initialize PID controller
void PID_Init(PIDController *pid, float Kp, float Ki, float Kd, float setpoint, float output_min, float output_max) {
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	@ 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	61f8      	str	r0, [r7, #28]
 8001550:	ed87 0a06 	vstr	s0, [r7, #24]
 8001554:	edc7 0a05 	vstr	s1, [r7, #20]
 8001558:	ed87 1a04 	vstr	s2, [r7, #16]
 800155c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001560:	ed87 2a02 	vstr	s4, [r7, #8]
 8001564:	edc7 2a01 	vstr	s5, [r7, #4]
    pid->Kp = Kp;
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	609a      	str	r2, [r3, #8]
    pid->setpoint = setpoint;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
    pid->prev_error = 0.0f;
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
    pid->output_min = output_min;
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	61da      	str	r2, [r3, #28]
    pid->output_max = output_max;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	621a      	str	r2, [r3, #32]
    pid->prevtick=0;
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	2200      	movs	r2, #0
 80015a0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80015a2:	bf00      	nop
 80015a4:	3724      	adds	r7, #36	@ 0x24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <PID_Update>:

// Update PID controller
float PID_Update(PIDController *pid, float measured_value) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	ed87 0a00 	vstr	s0, [r7]
	if(pid->prevtick==0)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d104      	bne.n	80015ce <PID_Update+0x1e>
		pid->prevtick=HAL_GetTick();
 80015c4:	f002 ffba 	bl	800453c <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	625a      	str	r2, [r3, #36]	@ 0x24

	float dt  = (HAL_GetTick() - pid->prevtick) *0.001f;
 80015ce:	f002 ffb5 	bl	800453c <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	ee07 3a90 	vmov	s15, r3
 80015de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015e2:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001718 <PID_Update+0x168>
 80015e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ea:	edc7 7a06 	vstr	s15, [r7, #24]
    float error = pid->setpoint - measured_value;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	ed93 7a03 	vldr	s14, [r3, #12]
 80015f4:	edd7 7a00 	vldr	s15, [r7]
 80015f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015fc:	edc7 7a05 	vstr	s15, [r7, #20]
    float proportional = pid->Kp * error;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	ed97 7a05 	vldr	s14, [r7, #20]
 800160a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160e:	edc7 7a04 	vstr	s15, [r7, #16]

    // Integral term with anti-windup
    pid->integral += pid->Ki * error * dt;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	ed93 7a04 	vldr	s14, [r3, #16]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	edd3 6a01 	vldr	s13, [r3, #4]
 800161e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001622:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001626:	edd7 7a06 	vldr	s15, [r7, #24]
 800162a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800162e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	edc3 7a04 	vstr	s15, [r3, #16]

    float derivative = pid->Kd * (error - pid->prev_error) / dt;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	ed93 7a02 	vldr	s14, [r3, #8]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	edd3 7a06 	vldr	s15, [r3, #24]
 8001644:	edd7 6a05 	vldr	s13, [r7, #20]
 8001648:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800164c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001650:	ed97 7a06 	vldr	s14, [r7, #24]
 8001654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001658:	edc7 7a03 	vstr	s15, [r7, #12]

    float output = proportional + pid->integral + derivative;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001662:	edd7 7a04 	vldr	s15, [r7, #16]
 8001666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166a:	ed97 7a03 	vldr	s14, [r7, #12]
 800166e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001672:	edc7 7a07 	vstr	s15, [r7, #28]

    // Apply output limits
    if (output > pid->output_max) {
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	edd3 7a08 	vldr	s15, [r3, #32]
 800167c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001680:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001688:	dd16      	ble.n	80016b8 <PID_Update+0x108>
        output = pid->output_max;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	61fb      	str	r3, [r7, #28]
        // Anti-windup: Limit integral term
        pid->integral -= pid->Ki * error * dt;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	ed93 7a04 	vldr	s14, [r3, #16]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	edd3 6a01 	vldr	s13, [r3, #4]
 800169c:	edd7 7a05 	vldr	s15, [r7, #20]
 80016a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80016a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	edc3 7a04 	vstr	s15, [r3, #16]
 80016b6:	e01f      	b.n	80016f8 <PID_Update+0x148>
    } else if (output < pid->output_min) {
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	edd3 7a07 	vldr	s15, [r3, #28]
 80016be:	ed97 7a07 	vldr	s14, [r7, #28]
 80016c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ca:	d515      	bpl.n	80016f8 <PID_Update+0x148>
        output = pid->output_min;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	61fb      	str	r3, [r7, #28]
        // Anti-windup: Limit integral term
        pid->integral -= pid->Ki * error * dt;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	ed93 7a04 	vldr	s14, [r3, #16]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	edd3 6a01 	vldr	s13, [r3, #4]
 80016de:	edd7 7a05 	vldr	s15, [r7, #20]
 80016e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	edc3 7a04 	vstr	s15, [r3, #16]
    }

    pid->prev_error = error;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	619a      	str	r2, [r3, #24]
    pid->prevtick =HAL_GetTick();
 80016fe:	f002 ff1d 	bl	800453c <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	625a      	str	r2, [r3, #36]	@ 0x24
    return output;
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	ee07 3a90 	vmov	s15, r3
}
 800170e:	eeb0 0a67 	vmov.f32	s0, s15
 8001712:	3720      	adds	r7, #32
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	3a83126f 	.word	0x3a83126f

0800171c <PID_Reset>:

void PID_Reset(PIDController* pid) {
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	pid->setpoint=0;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
    pid->prev_error = 0.0f;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
    pid->prevtick = 0;//HAL_GetTick();
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <Set_Motor_Direction>:
/* USER CODE BEGIN 0 */
uint8_t aRxBuffer[3]={0};
uint8_t buf[7]={0};

//SET both wheel direction 0BACK 1FORWARD
void Set_Motor_Direction(int foward_flag,int backward_flag) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, //AIn1 is forward AIn2 is backward
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf14      	ite	ne
 8001760:	2301      	movne	r3, #1
 8001762:	2300      	moveq	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	461a      	mov	r2, r3
 8001768:	2108      	movs	r1, #8
 800176a:	4814      	ldr	r0, [pc, #80]	@ (80017bc <Set_Motor_Direction+0x6c>)
 800176c:	f003 fe6e 	bl	800544c <HAL_GPIO_WritePin>
			((foward_flag) ? GPIO_PIN_SET : GPIO_PIN_RESET));
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	bf0c      	ite	eq
 8001776:	2301      	moveq	r3, #1
 8001778:	2300      	movne	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	2104      	movs	r1, #4
 8001780:	480e      	ldr	r0, [pc, #56]	@ (80017bc <Set_Motor_Direction+0x6c>)
 8001782:	f003 fe63 	bl	800544c <HAL_GPIO_WritePin>
			((foward_flag) ? GPIO_PIN_RESET : GPIO_PIN_SET));
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, //BIn1 is forward BIn2 is backward
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf0c      	ite	eq
 800178c:	2301      	moveq	r3, #1
 800178e:	2300      	movne	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	461a      	mov	r2, r3
 8001794:	2120      	movs	r1, #32
 8001796:	4809      	ldr	r0, [pc, #36]	@ (80017bc <Set_Motor_Direction+0x6c>)
 8001798:	f003 fe58 	bl	800544c <HAL_GPIO_WritePin>
			((backward_flag) ? GPIO_PIN_RESET : GPIO_PIN_SET));
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin,
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bf14      	ite	ne
 80017a2:	2301      	movne	r3, #1
 80017a4:	2300      	moveq	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	461a      	mov	r2, r3
 80017aa:	2110      	movs	r1, #16
 80017ac:	4803      	ldr	r0, [pc, #12]	@ (80017bc <Set_Motor_Direction+0x6c>)
 80017ae:	f003 fe4d 	bl	800544c <HAL_GPIO_WritePin>
			((backward_flag) ? GPIO_PIN_SET : GPIO_PIN_RESET));
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40020000 	.word	0x40020000

080017c0 <delay_us>:
void delay_us(uint16_t us)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6,0);
 80017ca:	4b09      	ldr	r3, [pc, #36]	@ (80017f0 <delay_us+0x30>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2200      	movs	r2, #0
 80017d0:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6)<us);
 80017d2:	bf00      	nop
 80017d4:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <delay_us+0x30>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d3f9      	bcc.n	80017d4 <delay_us+0x14>

}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000454 	.word	0x20000454

080017f4 <resetYaw>:
void resetYaw()
{	q[0]=1; q[1]=0; q[2]=0; q[3]=0;
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001830 <resetYaw+0x3c>)
 80017fa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <resetYaw+0x3c>)
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <resetYaw+0x3c>)
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <resetYaw+0x3c>)
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	60da      	str	r2, [r3, #12]
yaw=0;
 8001818:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <resetYaw+0x40>)
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
PID_Reset(&LMotorPID);
 8001820:	4805      	ldr	r0, [pc, #20]	@ (8001838 <resetYaw+0x44>)
 8001822:	f7ff ff7b 	bl	800171c <PID_Reset>
PID_Reset(&RMotorPID);
 8001826:	4805      	ldr	r0, [pc, #20]	@ (800183c <resetYaw+0x48>)
 8001828:	f7ff ff78 	bl	800171c <PID_Reset>
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000004 	.word	0x20000004
 8001834:	20000590 	.word	0x20000590
 8001838:	20000594 	.word	0x20000594
 800183c:	200005bc 	.word	0x200005bc

08001840 <updateYaw>:
void updateYaw()//update yaw reading using filter
{
 8001840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001842:	ed2d 8b04 	vpush	{d8-d9}
 8001846:	af00      	add	r7, sp, #0
	static uint32_t prevtick=0;

	if(HAL_GetTick()-prevtick>1000L)//RST if never update for more than 1 second
 8001848:	f002 fe78 	bl	800453c <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	4b4c      	ldr	r3, [pc, #304]	@ (8001980 <updateYaw+0x140>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001858:	d905      	bls.n	8001866 <updateYaw+0x26>
	{prevtick=HAL_GetTick();return;}
 800185a:	f002 fe6f 	bl	800453c <HAL_GetTick>
 800185e:	4603      	mov	r3, r0
 8001860:	4a47      	ldr	r2, [pc, #284]	@ (8001980 <updateYaw+0x140>)
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	e084      	b.n	8001970 <updateYaw+0x130>
	ICM20948_readAccelerometer_all(&hi2c1,0,ACCEL_SENS,&accel);
 8001866:	4b47      	ldr	r3, [pc, #284]	@ (8001984 <updateYaw+0x144>)
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	4846      	ldr	r0, [pc, #280]	@ (8001988 <updateYaw+0x148>)
 800186e:	f008 fadb 	bl	8009e28 <ICM20948_readAccelerometer_all>
	ICM20948_readGyroscope_all(&hi2c1, 0, GYRO_SENS, &gyro);
 8001872:	4b46      	ldr	r3, [pc, #280]	@ (800198c <updateYaw+0x14c>)
 8001874:	2203      	movs	r2, #3
 8001876:	2100      	movs	r1, #0
 8001878:	4843      	ldr	r0, [pc, #268]	@ (8001988 <updateYaw+0x148>)
 800187a:	f008 f9bd 	bl	8009bf8 <ICM20948_readGyroscope_all>
	//ICM20948_readMagnetometer_all(&hi2c1,&mag);
	//magcal_adjust(&mag,&mag_params);

	//Madgwick Mahony
	MahonyQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 800187e:	4b41      	ldr	r3, [pc, #260]	@ (8001984 <updateYaw+0x144>)
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001990 <updateYaw+0x150>
 8001888:	ee27 8a87 	vmul.f32	s16, s15, s14
 800188c:	4b3d      	ldr	r3, [pc, #244]	@ (8001984 <updateYaw+0x144>)
 800188e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001892:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001990 <updateYaw+0x150>
 8001896:	ee67 8a87 	vmul.f32	s17, s15, s14
 800189a:	4b3a      	ldr	r3, [pc, #232]	@ (8001984 <updateYaw+0x144>)
 800189c:	edd3 7a02 	vldr	s15, [r3, #8]
 80018a0:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001990 <updateYaw+0x150>
 80018a4:	ee27 9a87 	vmul.f32	s18, s15, s14
			gyro.x*DEG_TO_RAD,-gyro.y*DEG_TO_RAD,gyro.z*DEG_TO_RAD,
 80018a8:	4b38      	ldr	r3, [pc, #224]	@ (800198c <updateYaw+0x14c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fe4b 	bl	8000548 <__aeabi_f2d>
 80018b2:	a331      	add	r3, pc, #196	@ (adr r3, 8001978 <updateYaw+0x138>)
 80018b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b8:	f7fe fe9e 	bl	80005f8 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
	MahonyQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f7ff f990 	bl	8000be8 <__aeabi_d2f>
 80018c8:	4604      	mov	r4, r0
			gyro.x*DEG_TO_RAD,-gyro.y*DEG_TO_RAD,gyro.z*DEG_TO_RAD,
 80018ca:	4b30      	ldr	r3, [pc, #192]	@ (800198c <updateYaw+0x14c>)
 80018cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80018d0:	eef1 7a67 	vneg.f32	s15, s15
 80018d4:	ee17 3a90 	vmov	r3, s15
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe35 	bl	8000548 <__aeabi_f2d>
 80018de:	a326      	add	r3, pc, #152	@ (adr r3, 8001978 <updateYaw+0x138>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe fe88 	bl	80005f8 <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
	MahonyQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f7ff f97a 	bl	8000be8 <__aeabi_d2f>
 80018f4:	4605      	mov	r5, r0
			gyro.x*DEG_TO_RAD,-gyro.y*DEG_TO_RAD,gyro.z*DEG_TO_RAD,
 80018f6:	4b25      	ldr	r3, [pc, #148]	@ (800198c <updateYaw+0x14c>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fe24 	bl	8000548 <__aeabi_f2d>
 8001900:	a31d      	add	r3, pc, #116	@ (adr r3, 8001978 <updateYaw+0x138>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f7fe fe77 	bl	80005f8 <__aeabi_dmul>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
	MahonyQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	f7ff f969 	bl	8000be8 <__aeabi_d2f>
 8001916:	4606      	mov	r6, r0
			(HAL_GetTick()-prevtick)*0.001f,q);
 8001918:	f002 fe10 	bl	800453c <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	4b18      	ldr	r3, [pc, #96]	@ (8001980 <updateYaw+0x140>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	1ad3      	subs	r3, r2, r3
	MahonyQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 8001924:	ee07 3a90 	vmov	s15, r3
 8001928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800192c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001994 <updateYaw+0x154>
 8001930:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001934:	4818      	ldr	r0, [pc, #96]	@ (8001998 <updateYaw+0x158>)
 8001936:	eeb0 3a67 	vmov.f32	s6, s15
 800193a:	ee02 6a90 	vmov	s5, r6
 800193e:	ee02 5a10 	vmov	s4, r5
 8001942:	ee01 4a90 	vmov	s3, r4
 8001946:	eeb0 1a49 	vmov.f32	s2, s18
 800194a:	eef0 0a68 	vmov.f32	s1, s17
 800194e:	eeb0 0a48 	vmov.f32	s0, s16
 8001952:	f7ff fb11 	bl	8000f78 <MahonyQuaternionUpdate>

	prevtick=HAL_GetTick();
 8001956:	f002 fdf1 	bl	800453c <HAL_GetTick>
 800195a:	4603      	mov	r3, r0
 800195c:	4a08      	ldr	r2, [pc, #32]	@ (8001980 <updateYaw+0x140>)
 800195e:	6013      	str	r3, [r2, #0]
	yaw = GetYawFromQ(q);
 8001960:	480d      	ldr	r0, [pc, #52]	@ (8001998 <updateYaw+0x158>)
 8001962:	f7ff fd41 	bl	80013e8 <GetYawFromQ>
 8001966:	eef0 7a40 	vmov.f32	s15, s0
 800196a:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <updateYaw+0x15c>)
 800196c:	edc3 7a00 	vstr	s15, [r3]
}
 8001970:	46bd      	mov	sp, r7
 8001972:	ecbd 8b04 	vpop	{d8-d9}
 8001976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001978:	a2529e84 	.word	0xa2529e84
 800197c:	3f91df46 	.word	0x3f91df46
 8001980:	20000604 	.word	0x20000604
 8001984:	20000578 	.word	0x20000578
 8001988:	200002e0 	.word	0x200002e0
 800198c:	20000584 	.word	0x20000584
 8001990:	411cf5c3 	.word	0x411cf5c3
 8001994:	3a83126f 	.word	0x3a83126f
 8001998:	20000004 	.word	0x20000004
 800199c:	20000590 	.word	0x20000590

080019a0 <FLeft>:
	int32_t L=(int32_t)PID_Update(&LMotorPID, RPS_L);
	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
	set_motor_pwm(L, R);
}
void FLeft(int target)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	//		set_servo_angle(Left);
	//		osDelay(300);
	//		//resetYaw();
	//		bTurn=0;
	//	}
	uint8_t bTurn=1;
 80019a8:	2301      	movs	r3, #1
 80019aa:	75fb      	strb	r3, [r7, #23]
	int32_t L=0,R=0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
	//osDelay(10);

	do
	{
		if(bTurn)
 80019b4:	7dfb      	ldrb	r3, [r7, #23]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00b      	beq.n	80019d2 <FLeft+0x32>
		{
			set_servo_angle(Left);
 80019ba:	208c      	movs	r0, #140	@ 0x8c
 80019bc:	f000 fdb6 	bl	800252c <set_servo_angle>
			osDelay(350);
 80019c0:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 80019c4:	f008 fd50 	bl	800a468 <osDelay>
			bTurn=0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	75fb      	strb	r3, [r7, #23]
			//osDelay(300);
			resetYaw();
 80019cc:	f7ff ff12 	bl	80017f4 <resetYaw>
 80019d0:	e037      	b.n	8001a42 <FLeft+0xa2>
		} else{
			updateYaw();
 80019d2:	f7ff ff35 	bl	8001840 <updateYaw>

			LMotorPID.setpoint=1;
 80019d6:	4b37      	ldr	r3, [pc, #220]	@ (8001ab4 <FLeft+0x114>)
 80019d8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80019dc:	60da      	str	r2, [r3, #12]
			RMotorPID.setpoint=3;
 80019de:	4b36      	ldr	r3, [pc, #216]	@ (8001ab8 <FLeft+0x118>)
 80019e0:	4a36      	ldr	r2, [pc, #216]	@ (8001abc <FLeft+0x11c>)
 80019e2:	60da      	str	r2, [r3, #12]
			L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 80019e4:	4b36      	ldr	r3, [pc, #216]	@ (8001ac0 <FLeft+0x120>)
 80019e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	f7ff f8fb 	bl	8000be8 <__aeabi_d2f>
 80019f2:	4603      	mov	r3, r0
 80019f4:	ee00 3a10 	vmov	s0, r3
 80019f8:	482e      	ldr	r0, [pc, #184]	@ (8001ab4 <FLeft+0x114>)
 80019fa:	f7ff fdd9 	bl	80015b0 <PID_Update>
 80019fe:	eef0 7a40 	vmov.f32	s15, s0
 8001a02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a06:	ee17 3a90 	vmov	r3, s15
 8001a0a:	613b      	str	r3, [r7, #16]
			R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac4 <FLeft+0x124>)
 8001a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	f7ff f8e7 	bl	8000be8 <__aeabi_d2f>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	ee00 3a10 	vmov	s0, r3
 8001a20:	4825      	ldr	r0, [pc, #148]	@ (8001ab8 <FLeft+0x118>)
 8001a22:	f7ff fdc5 	bl	80015b0 <PID_Update>
 8001a26:	eef0 7a40 	vmov.f32	s15, s0
 8001a2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a2e:	ee17 3a90 	vmov	r3, s15
 8001a32:	60fb      	str	r3, [r7, #12]
			osDelay(10);
 8001a34:	200a      	movs	r0, #10
 8001a36:	f008 fd17 	bl	800a468 <osDelay>
			set_motor_pwm(L, R);
 8001a3a:	68f9      	ldr	r1, [r7, #12]
 8001a3c:	6938      	ldr	r0, [r7, #16]
 8001a3e:	f000 fd2d 	bl	800249c <set_motor_pwm>
		}

		//osDelay(10);

	}while(!(yaw > target - 2.0f && yaw < target + 2.0f));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	ee07 3a90 	vmov	s15, r3
 8001a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a4c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001a50:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001a54:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac8 <FLeft+0x128>)
 8001a56:	edd3 7a00 	vldr	s15, [r3]
 8001a5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a62:	bf4c      	ite	mi
 8001a64:	2301      	movmi	r3, #1
 8001a66:	2300      	movpl	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	f083 0301 	eor.w	r3, r3, #1
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d19f      	bne.n	80019b4 <FLeft+0x14>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	ee07 3a90 	vmov	s15, r3
 8001a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001a82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a86:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <FLeft+0x128>)
 8001a88:	edd3 7a00 	vldr	s15, [r3]
 8001a8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a94:	bfcc      	ite	gt
 8001a96:	2301      	movgt	r3, #1
 8001a98:	2300      	movle	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f083 0301 	eor.w	r3, r3, #1
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d186      	bne.n	80019b4 <FLeft+0x14>
	Motor_Stop();
 8001aa6:	f001 fdff 	bl	80036a8 <Motor_Stop>
	//		LMotorPID.setpoint=0.5;
	//		RMotorPID.setpoint=0.5;//0.35
	//	}


}
 8001aaa:	bf00      	nop
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000594 	.word	0x20000594
 8001ab8:	200005bc 	.word	0x200005bc
 8001abc:	40400000 	.word	0x40400000
 8001ac0:	20000568 	.word	0x20000568
 8001ac4:	20000570 	.word	0x20000570
 8001ac8:	20000590 	.word	0x20000590

08001acc <FL>:
void FL(int target)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	//		set_servo_angle(Left);
	//		osDelay(300);
	//		//resetYaw();
	//		bTurn=0;
	//	}
	uint8_t bTurn=1;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	75fb      	strb	r3, [r7, #23]
	int32_t L=0,R=0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
	//osDelay(10);

	do
	{
		if(bTurn)
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00b      	beq.n	8001afe <FL+0x32>
		{
			set_servo_angle(Left);
 8001ae6:	208c      	movs	r0, #140	@ 0x8c
 8001ae8:	f000 fd20 	bl	800252c <set_servo_angle>
			osDelay(350);
 8001aec:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8001af0:	f008 fcba 	bl	800a468 <osDelay>
			bTurn=0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	75fb      	strb	r3, [r7, #23]
			//osDelay(300);
			resetYaw();
 8001af8:	f7ff fe7c 	bl	80017f4 <resetYaw>
 8001afc:	e038      	b.n	8001b70 <FL+0xa4>
		} else{
			updateYaw();
 8001afe:	f7ff fe9f 	bl	8001840 <updateYaw>

			LMotorPID.setpoint=1;
 8001b02:	4b37      	ldr	r3, [pc, #220]	@ (8001be0 <FL+0x114>)
 8001b04:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b08:	60da      	str	r2, [r3, #12]
			RMotorPID.setpoint=4;
 8001b0a:	4b36      	ldr	r3, [pc, #216]	@ (8001be4 <FL+0x118>)
 8001b0c:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8001b10:	60da      	str	r2, [r3, #12]
			L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8001b12:	4b35      	ldr	r3, [pc, #212]	@ (8001be8 <FL+0x11c>)
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f7ff f864 	bl	8000be8 <__aeabi_d2f>
 8001b20:	4603      	mov	r3, r0
 8001b22:	ee00 3a10 	vmov	s0, r3
 8001b26:	482e      	ldr	r0, [pc, #184]	@ (8001be0 <FL+0x114>)
 8001b28:	f7ff fd42 	bl	80015b0 <PID_Update>
 8001b2c:	eef0 7a40 	vmov.f32	s15, s0
 8001b30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b34:	ee17 3a90 	vmov	r3, s15
 8001b38:	613b      	str	r3, [r7, #16]
			R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8001b3a:	4b2c      	ldr	r3, [pc, #176]	@ (8001bec <FL+0x120>)
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	f7ff f850 	bl	8000be8 <__aeabi_d2f>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	ee00 3a10 	vmov	s0, r3
 8001b4e:	4825      	ldr	r0, [pc, #148]	@ (8001be4 <FL+0x118>)
 8001b50:	f7ff fd2e 	bl	80015b0 <PID_Update>
 8001b54:	eef0 7a40 	vmov.f32	s15, s0
 8001b58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b5c:	ee17 3a90 	vmov	r3, s15
 8001b60:	60fb      	str	r3, [r7, #12]
			osDelay(10);
 8001b62:	200a      	movs	r0, #10
 8001b64:	f008 fc80 	bl	800a468 <osDelay>
			set_motor_pwm(L, R);
 8001b68:	68f9      	ldr	r1, [r7, #12]
 8001b6a:	6938      	ldr	r0, [r7, #16]
 8001b6c:	f000 fc96 	bl	800249c <set_motor_pwm>
		}

		//osDelay(10);

	}while(!(yaw > target - 2.0f && yaw < target + 2.0f));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b7a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001b7e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001b82:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf0 <FL+0x124>)
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b90:	bf4c      	ite	mi
 8001b92:	2301      	movmi	r3, #1
 8001b94:	2300      	movpl	r3, #0
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	f083 0301 	eor.w	r3, r3, #1
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d19e      	bne.n	8001ae0 <FL+0x14>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	ee07 3a90 	vmov	s15, r3
 8001ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bac:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001bb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <FL+0x124>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc2:	bfcc      	ite	gt
 8001bc4:	2301      	movgt	r3, #1
 8001bc6:	2300      	movle	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f083 0301 	eor.w	r3, r3, #1
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d185      	bne.n	8001ae0 <FL+0x14>
	Motor_Stop();
 8001bd4:	f001 fd68 	bl	80036a8 <Motor_Stop>
}
 8001bd8:	bf00      	nop
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000594 	.word	0x20000594
 8001be4:	200005bc 	.word	0x200005bc
 8001be8:	20000568 	.word	0x20000568
 8001bec:	20000570 	.word	0x20000570
 8001bf0:	20000590 	.word	0x20000590

08001bf4 <FR>:
void FR(int target)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	//		set_servo_angle(Left);
	//		osDelay(300);
	//		//resetYaw();
	//		bTurn=0;
	//	}
	uint8_t bTurn=1;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	75fb      	strb	r3, [r7, #23]
	int32_t L=0,R=0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
	//osDelay(10);

	do
	{
		if(bTurn)
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <FR+0x32>
		{
			set_servo_angle(Right);
 8001c0e:	2014      	movs	r0, #20
 8001c10:	f000 fc8c 	bl	800252c <set_servo_angle>
			osDelay(350);
 8001c14:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8001c18:	f008 fc26 	bl	800a468 <osDelay>
			bTurn=0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	75fb      	strb	r3, [r7, #23]
			//osDelay(300);
			resetYaw();
 8001c20:	f7ff fde8 	bl	80017f4 <resetYaw>
 8001c24:	e038      	b.n	8001c98 <FR+0xa4>
		} else{
			updateYaw();
 8001c26:	f7ff fe0b 	bl	8001840 <updateYaw>

			LMotorPID.setpoint=4;
 8001c2a:	4b37      	ldr	r3, [pc, #220]	@ (8001d08 <FR+0x114>)
 8001c2c:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8001c30:	60da      	str	r2, [r3, #12]
			RMotorPID.setpoint=1;
 8001c32:	4b36      	ldr	r3, [pc, #216]	@ (8001d0c <FR+0x118>)
 8001c34:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001c38:	60da      	str	r2, [r3, #12]
			L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8001c3a:	4b35      	ldr	r3, [pc, #212]	@ (8001d10 <FR+0x11c>)
 8001c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	f7fe ffd0 	bl	8000be8 <__aeabi_d2f>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	ee00 3a10 	vmov	s0, r3
 8001c4e:	482e      	ldr	r0, [pc, #184]	@ (8001d08 <FR+0x114>)
 8001c50:	f7ff fcae 	bl	80015b0 <PID_Update>
 8001c54:	eef0 7a40 	vmov.f32	s15, s0
 8001c58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c5c:	ee17 3a90 	vmov	r3, s15
 8001c60:	613b      	str	r3, [r7, #16]
			R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8001c62:	4b2c      	ldr	r3, [pc, #176]	@ (8001d14 <FR+0x120>)
 8001c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f7fe ffbc 	bl	8000be8 <__aeabi_d2f>
 8001c70:	4603      	mov	r3, r0
 8001c72:	ee00 3a10 	vmov	s0, r3
 8001c76:	4825      	ldr	r0, [pc, #148]	@ (8001d0c <FR+0x118>)
 8001c78:	f7ff fc9a 	bl	80015b0 <PID_Update>
 8001c7c:	eef0 7a40 	vmov.f32	s15, s0
 8001c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c84:	ee17 3a90 	vmov	r3, s15
 8001c88:	60fb      	str	r3, [r7, #12]
			osDelay(10);
 8001c8a:	200a      	movs	r0, #10
 8001c8c:	f008 fbec 	bl	800a468 <osDelay>
			set_motor_pwm(L, R);
 8001c90:	68f9      	ldr	r1, [r7, #12]
 8001c92:	6938      	ldr	r0, [r7, #16]
 8001c94:	f000 fc02 	bl	800249c <set_motor_pwm>
		}

		//osDelay(10);

	}while(!(yaw > target - 2.0f && yaw < target + 2.0f));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	ee07 3a90 	vmov	s15, r3
 8001c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001ca6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001caa:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <FR+0x124>)
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb8:	bf4c      	ite	mi
 8001cba:	2301      	movmi	r3, #1
 8001cbc:	2300      	movpl	r3, #0
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	f083 0301 	eor.w	r3, r3, #1
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d19e      	bne.n	8001c08 <FR+0x14>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	ee07 3a90 	vmov	s15, r3
 8001cd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001cd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8001d18 <FR+0x124>)
 8001cde:	edd3 7a00 	vldr	s15, [r3]
 8001ce2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cea:	bfcc      	ite	gt
 8001cec:	2301      	movgt	r3, #1
 8001cee:	2300      	movle	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f083 0301 	eor.w	r3, r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d185      	bne.n	8001c08 <FR+0x14>
	Motor_Stop();
 8001cfc:	f001 fcd4 	bl	80036a8 <Motor_Stop>
}
 8001d00:	bf00      	nop
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000594 	.word	0x20000594
 8001d0c:	200005bc 	.word	0x200005bc
 8001d10:	20000568 	.word	0x20000568
 8001d14:	20000570 	.word	0x20000570
 8001d18:	20000590 	.word	0x20000590

08001d1c <FRight>:
void FRight(int target)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	//		set_servo_angle(Left);
	//		osDelay(300);
	//		//resetYaw();
	//		bTurn=0;
	//	}
	uint8_t bTurn=1;
 8001d24:	2301      	movs	r3, #1
 8001d26:	75fb      	strb	r3, [r7, #23]
	int32_t L=0,R=0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
	//osDelay(10);

	do
	{
		if(bTurn)
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00b      	beq.n	8001d4e <FRight+0x32>
		{
			set_servo_angle(Right);
 8001d36:	2014      	movs	r0, #20
 8001d38:	f000 fbf8 	bl	800252c <set_servo_angle>
			osDelay(350);
 8001d3c:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8001d40:	f008 fb92 	bl	800a468 <osDelay>
			bTurn=0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	75fb      	strb	r3, [r7, #23]
			//osDelay(300);
			resetYaw();
 8001d48:	f7ff fd54 	bl	80017f4 <resetYaw>
 8001d4c:	e037      	b.n	8001dbe <FRight+0xa2>
		} else{
			updateYaw();
 8001d4e:	f7ff fd77 	bl	8001840 <updateYaw>

			LMotorPID.setpoint=3;
 8001d52:	4b37      	ldr	r3, [pc, #220]	@ (8001e30 <FRight+0x114>)
 8001d54:	4a37      	ldr	r2, [pc, #220]	@ (8001e34 <FRight+0x118>)
 8001d56:	60da      	str	r2, [r3, #12]
			RMotorPID.setpoint=1;
 8001d58:	4b37      	ldr	r3, [pc, #220]	@ (8001e38 <FRight+0x11c>)
 8001d5a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001d5e:	60da      	str	r2, [r3, #12]
			L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8001d60:	4b36      	ldr	r3, [pc, #216]	@ (8001e3c <FRight+0x120>)
 8001d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f7fe ff3d 	bl	8000be8 <__aeabi_d2f>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	ee00 3a10 	vmov	s0, r3
 8001d74:	482e      	ldr	r0, [pc, #184]	@ (8001e30 <FRight+0x114>)
 8001d76:	f7ff fc1b 	bl	80015b0 <PID_Update>
 8001d7a:	eef0 7a40 	vmov.f32	s15, s0
 8001d7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d82:	ee17 3a90 	vmov	r3, s15
 8001d86:	613b      	str	r3, [r7, #16]
			R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8001d88:	4b2d      	ldr	r3, [pc, #180]	@ (8001e40 <FRight+0x124>)
 8001d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8e:	4610      	mov	r0, r2
 8001d90:	4619      	mov	r1, r3
 8001d92:	f7fe ff29 	bl	8000be8 <__aeabi_d2f>
 8001d96:	4603      	mov	r3, r0
 8001d98:	ee00 3a10 	vmov	s0, r3
 8001d9c:	4826      	ldr	r0, [pc, #152]	@ (8001e38 <FRight+0x11c>)
 8001d9e:	f7ff fc07 	bl	80015b0 <PID_Update>
 8001da2:	eef0 7a40 	vmov.f32	s15, s0
 8001da6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001daa:	ee17 3a90 	vmov	r3, s15
 8001dae:	60fb      	str	r3, [r7, #12]
			osDelay(10);
 8001db0:	200a      	movs	r0, #10
 8001db2:	f008 fb59 	bl	800a468 <osDelay>
			set_motor_pwm(L, R);
 8001db6:	68f9      	ldr	r1, [r7, #12]
 8001db8:	6938      	ldr	r0, [r7, #16]
 8001dba:	f000 fb6f 	bl	800249c <set_motor_pwm>
		}

		//osDelay(10);

	}while(!(yaw > target - 2.0f && yaw < target + 2.0f));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001dcc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e44 <FRight+0x128>)
 8001dd2:	edd3 7a00 	vldr	s15, [r3]
 8001dd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dde:	bf4c      	ite	mi
 8001de0:	2301      	movmi	r3, #1
 8001de2:	2300      	movpl	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	f083 0301 	eor.w	r3, r3, #1
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d19f      	bne.n	8001d30 <FRight+0x14>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	ee07 3a90 	vmov	s15, r3
 8001df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dfa:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001dfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001e02:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <FRight+0x128>)
 8001e04:	edd3 7a00 	vldr	s15, [r3]
 8001e08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e10:	bfcc      	ite	gt
 8001e12:	2301      	movgt	r3, #1
 8001e14:	2300      	movle	r3, #0
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f083 0301 	eor.w	r3, r3, #1
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d186      	bne.n	8001d30 <FRight+0x14>
	Motor_Stop();
 8001e22:	f001 fc41 	bl	80036a8 <Motor_Stop>
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000594 	.word	0x20000594
 8001e34:	40400000 	.word	0x40400000
 8001e38:	200005bc 	.word	0x200005bc
 8001e3c:	20000568 	.word	0x20000568
 8001e40:	20000570 	.word	0x20000570
 8001e44:	20000590 	.word	0x20000590

08001e48 <FIR>:
void FIR(int target,int IR)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
	distanceTraveled=0;
 8001e52:	4b57      	ldr	r3, [pc, #348]	@ (8001fb0 <FIR+0x168>)
 8001e54:	f04f 0200 	mov.w	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
	int pass=0,IRUsed;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
	uint8_t bTurn=1;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	76fb      	strb	r3, [r7, #27]
	int32_t L=0,R=0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
	do
	{
		if(IR==0)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d103      	bne.n	8001e78 <FIR+0x30>
		{
			IRUsed=iDistanceL;
 8001e70:	4b50      	ldr	r3, [pc, #320]	@ (8001fb4 <FIR+0x16c>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	e005      	b.n	8001e84 <FIR+0x3c>
		}
		else if(IR==1){
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d102      	bne.n	8001e84 <FIR+0x3c>
			IRUsed=iDistanceR;
 8001e7e:	4b4e      	ldr	r3, [pc, #312]	@ (8001fb8 <FIR+0x170>)
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	61fb      	str	r3, [r7, #28]
		}
		if(bTurn)
 8001e84:	7efb      	ldrb	r3, [r7, #27]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d009      	beq.n	8001e9e <FIR+0x56>
		{
			set_servo_angle(Center);
 8001e8a:	205f      	movs	r0, #95	@ 0x5f
 8001e8c:	f000 fb4e 	bl	800252c <set_servo_angle>
			bTurn=0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	76fb      	strb	r3, [r7, #27]
			osDelay(250);
 8001e94:	20fa      	movs	r0, #250	@ 0xfa
 8001e96:	f008 fae7 	bl	800a468 <osDelay>
			resetYaw();
 8001e9a:	f7ff fcab 	bl	80017f4 <resetYaw>
		}
		updateYaw();
 8001e9e:	f7ff fccf 	bl	8001840 <updateYaw>
		//osDelay(10);
		LMotorPID.setpoint=4;
 8001ea2:	4b46      	ldr	r3, [pc, #280]	@ (8001fbc <FIR+0x174>)
 8001ea4:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8001ea8:	60da      	str	r2, [r3, #12]
		RMotorPID.setpoint=4;
 8001eaa:	4b45      	ldr	r3, [pc, #276]	@ (8001fc0 <FIR+0x178>)
 8001eac:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8001eb0:	60da      	str	r2, [r3, #12]
		if(yaw > -0.1f)
 8001eb2:	4b44      	ldr	r3, [pc, #272]	@ (8001fc4 <FIR+0x17c>)
 8001eb4:	edd3 7a00 	vldr	s15, [r3]
 8001eb8:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8001fc8 <FIR+0x180>
 8001ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec4:	dd03      	ble.n	8001ece <FIR+0x86>
		{
			set_servo_angle(Slight_Right);
 8001ec6:	205a      	movs	r0, #90	@ 0x5a
 8001ec8:	f000 fb30 	bl	800252c <set_servo_angle>
 8001ecc:	e00c      	b.n	8001ee8 <FIR+0xa0>
		}
		else if(yaw < 0.1f)
 8001ece:	4b3d      	ldr	r3, [pc, #244]	@ (8001fc4 <FIR+0x17c>)
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
 8001ed4:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001fcc <FIR+0x184>
 8001ed8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee0:	d502      	bpl.n	8001ee8 <FIR+0xa0>
		{
			set_servo_angle(Slight_Left);
 8001ee2:	2064      	movs	r0, #100	@ 0x64
 8001ee4:	f000 fb22 	bl	800252c <set_servo_angle>
		}

		L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8001ee8:	4b39      	ldr	r3, [pc, #228]	@ (8001fd0 <FIR+0x188>)
 8001eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f7fe fe79 	bl	8000be8 <__aeabi_d2f>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	ee00 3a10 	vmov	s0, r3
 8001efc:	482f      	ldr	r0, [pc, #188]	@ (8001fbc <FIR+0x174>)
 8001efe:	f7ff fb57 	bl	80015b0 <PID_Update>
 8001f02:	eef0 7a40 	vmov.f32	s15, s0
 8001f06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f0a:	ee17 3a90 	vmov	r3, s15
 8001f0e:	613b      	str	r3, [r7, #16]
		R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8001f10:	4b30      	ldr	r3, [pc, #192]	@ (8001fd4 <FIR+0x18c>)
 8001f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f7fe fe65 	bl	8000be8 <__aeabi_d2f>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	ee00 3a10 	vmov	s0, r3
 8001f24:	4826      	ldr	r0, [pc, #152]	@ (8001fc0 <FIR+0x178>)
 8001f26:	f7ff fb43 	bl	80015b0 <PID_Update>
 8001f2a:	eef0 7a40 	vmov.f32	s15, s0
 8001f2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f32:	ee17 3a90 	vmov	r3, s15
 8001f36:	60fb      	str	r3, [r7, #12]

		set_motor_pwm(L, R);
 8001f38:	68f9      	ldr	r1, [r7, #12]
 8001f3a:	6938      	ldr	r0, [r7, #16]
 8001f3c:	f000 faae 	bl	800249c <set_motor_pwm>
		osDelay(10);
 8001f40:	200a      	movs	r0, #10
 8001f42:	f008 fa91 	bl	800a468 <osDelay>
	}while(IRUsed<target);
 8001f46:	69fa      	ldr	r2, [r7, #28]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	db8d      	blt.n	8001e6a <FIR+0x22>
	if(distanceTraveled<60){
 8001f4e:	4b18      	ldr	r3, [pc, #96]	@ (8001fb0 <FIR+0x168>)
 8001f50:	edd3 7a00 	vldr	s15, [r3]
 8001f54:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001fd8 <FIR+0x190>
 8001f58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f60:	d506      	bpl.n	8001f70 <FIR+0x128>
		reverse=15;
 8001f62:	4b1e      	ldr	r3, [pc, #120]	@ (8001fdc <FIR+0x194>)
 8001f64:	220f      	movs	r2, #15
 8001f66:	601a      	str	r2, [r3, #0]
		adjustment=0;
 8001f68:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe0 <FIR+0x198>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	e019      	b.n	8001fa4 <FIR+0x15c>
	}
	else if(distanceTraveled>60){
 8001f70:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <FIR+0x168>)
 8001f72:	edd3 7a00 	vldr	s15, [r3]
 8001f76:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001fd8 <FIR+0x190>
 8001f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f82:	dd0f      	ble.n	8001fa4 <FIR+0x15c>
		reverse=distanceTraveled/2;
 8001f84:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb0 <FIR+0x168>)
 8001f86:	ed93 7a00 	vldr	s14, [r3]
 8001f8a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001f8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f96:	ee17 2a90 	vmov	r2, s15
 8001f9a:	4b10      	ldr	r3, [pc, #64]	@ (8001fdc <FIR+0x194>)
 8001f9c:	601a      	str	r2, [r3, #0]
		adjustment=1;
 8001f9e:	4b10      	ldr	r3, [pc, #64]	@ (8001fe0 <FIR+0x198>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]
	}
	Motor_Stop();
 8001fa4:	f001 fb80 	bl	80036a8 <Motor_Stop>
}
 8001fa8:	bf00      	nop
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000228 	.word	0x20000228
 8001fb4:	20000244 	.word	0x20000244
 8001fb8:	20000246 	.word	0x20000246
 8001fbc:	20000594 	.word	0x20000594
 8001fc0:	200005bc 	.word	0x200005bc
 8001fc4:	20000590 	.word	0x20000590
 8001fc8:	bdcccccd 	.word	0xbdcccccd
 8001fcc:	3dcccccd 	.word	0x3dcccccd
 8001fd0:	20000568 	.word	0x20000568
 8001fd4:	20000570 	.word	0x20000570
 8001fd8:	42700000 	.word	0x42700000
 8001fdc:	2000023c 	.word	0x2000023c
 8001fe0:	20000240 	.word	0x20000240

08001fe4 <F>:
//Forward til Ultra sonic reach target
void F(int target)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

	uint8_t bTurn=1;
 8001fec:	2301      	movs	r3, #1
 8001fee:	75fb      	strb	r3, [r7, #23]
	int32_t L=0,R=0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]

	do
	{
		if(bTurn)
 8001ff8:	7dfb      	ldrb	r3, [r7, #23]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <F+0x2e>
		{
			set_servo_angle(Center);
 8001ffe:	205f      	movs	r0, #95	@ 0x5f
 8002000:	f000 fa94 	bl	800252c <set_servo_angle>
			bTurn=0;
 8002004:	2300      	movs	r3, #0
 8002006:	75fb      	strb	r3, [r7, #23]
			osDelay(250);
 8002008:	20fa      	movs	r0, #250	@ 0xfa
 800200a:	f008 fa2d 	bl	800a468 <osDelay>
			resetYaw();
 800200e:	f7ff fbf1 	bl	80017f4 <resetYaw>
		}
		updateYaw();
 8002012:	f7ff fc15 	bl	8001840 <updateYaw>
		//osDelay(10);
		LMotorPID.setpoint=4;
 8002016:	4b32      	ldr	r3, [pc, #200]	@ (80020e0 <F+0xfc>)
 8002018:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800201c:	60da      	str	r2, [r3, #12]
		RMotorPID.setpoint=4;
 800201e:	4b31      	ldr	r3, [pc, #196]	@ (80020e4 <F+0x100>)
 8002020:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8002024:	60da      	str	r2, [r3, #12]
		if(yaw > -0.1f)
 8002026:	4b30      	ldr	r3, [pc, #192]	@ (80020e8 <F+0x104>)
 8002028:	edd3 7a00 	vldr	s15, [r3]
 800202c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80020ec <F+0x108>
 8002030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002038:	dd03      	ble.n	8002042 <F+0x5e>
		{
			set_servo_angle(Slight_Right);
 800203a:	205a      	movs	r0, #90	@ 0x5a
 800203c:	f000 fa76 	bl	800252c <set_servo_angle>
 8002040:	e00c      	b.n	800205c <F+0x78>
		}
		else if(yaw < 0.1f)
 8002042:	4b29      	ldr	r3, [pc, #164]	@ (80020e8 <F+0x104>)
 8002044:	edd3 7a00 	vldr	s15, [r3]
 8002048:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80020f0 <F+0x10c>
 800204c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002054:	d502      	bpl.n	800205c <F+0x78>
		{
			set_servo_angle(Slight_Left);
 8002056:	2064      	movs	r0, #100	@ 0x64
 8002058:	f000 fa68 	bl	800252c <set_servo_angle>
		}

		L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 800205c:	4b25      	ldr	r3, [pc, #148]	@ (80020f4 <F+0x110>)
 800205e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	f7fe fdbf 	bl	8000be8 <__aeabi_d2f>
 800206a:	4603      	mov	r3, r0
 800206c:	ee00 3a10 	vmov	s0, r3
 8002070:	481b      	ldr	r0, [pc, #108]	@ (80020e0 <F+0xfc>)
 8002072:	f7ff fa9d 	bl	80015b0 <PID_Update>
 8002076:	eef0 7a40 	vmov.f32	s15, s0
 800207a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800207e:	ee17 3a90 	vmov	r3, s15
 8002082:	613b      	str	r3, [r7, #16]
		R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8002084:	4b1c      	ldr	r3, [pc, #112]	@ (80020f8 <F+0x114>)
 8002086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208a:	4610      	mov	r0, r2
 800208c:	4619      	mov	r1, r3
 800208e:	f7fe fdab 	bl	8000be8 <__aeabi_d2f>
 8002092:	4603      	mov	r3, r0
 8002094:	ee00 3a10 	vmov	s0, r3
 8002098:	4812      	ldr	r0, [pc, #72]	@ (80020e4 <F+0x100>)
 800209a:	f7ff fa89 	bl	80015b0 <PID_Update>
 800209e:	eef0 7a40 	vmov.f32	s15, s0
 80020a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020a6:	ee17 3a90 	vmov	r3, s15
 80020aa:	60fb      	str	r3, [r7, #12]

		set_motor_pwm(L, R);
 80020ac:	68f9      	ldr	r1, [r7, #12]
 80020ae:	6938      	ldr	r0, [r7, #16]
 80020b0:	f000 f9f4 	bl	800249c <set_motor_pwm>
		osDelay(10);
 80020b4:	200a      	movs	r0, #10
 80020b6:	f008 f9d7 	bl	800a468 <osDelay>
	}while(g_distanceUS>target);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	ee07 3a90 	vmov	s15, r3
 80020c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020c4:	4b0d      	ldr	r3, [pc, #52]	@ (80020fc <F+0x118>)
 80020c6:	edd3 7a00 	vldr	s15, [r3]
 80020ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d2:	d491      	bmi.n	8001ff8 <F+0x14>

	Motor_Stop();
 80020d4:	f001 fae8 	bl	80036a8 <Motor_Stop>
}
 80020d8:	bf00      	nop
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000594 	.word	0x20000594
 80020e4:	200005bc 	.word	0x200005bc
 80020e8:	20000590 	.word	0x20000590
 80020ec:	bdcccccd 	.word	0xbdcccccd
 80020f0:	3dcccccd 	.word	0x3dcccccd
 80020f4:	20000568 	.word	0x20000568
 80020f8:	20000570 	.word	0x20000570
 80020fc:	2000054c 	.word	0x2000054c

08002100 <B>:
//Back using the Ultra sonic
void B(int target)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]

	uint8_t bTurn=1;
 8002108:	2301      	movs	r3, #1
 800210a:	75fb      	strb	r3, [r7, #23]
	int32_t L=0,R=0;
 800210c:	2300      	movs	r3, #0
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	2300      	movs	r3, #0
 8002112:	60fb      	str	r3, [r7, #12]
Set_Motor_Direction(0, 0);
 8002114:	2100      	movs	r1, #0
 8002116:	2000      	movs	r0, #0
 8002118:	f7ff fb1a 	bl	8001750 <Set_Motor_Direction>
	do
	{
		if(bTurn)
 800211c:	7dfb      	ldrb	r3, [r7, #23]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d009      	beq.n	8002136 <B+0x36>
		{
			set_servo_angle(Center);
 8002122:	205f      	movs	r0, #95	@ 0x5f
 8002124:	f000 fa02 	bl	800252c <set_servo_angle>
			bTurn=0;
 8002128:	2300      	movs	r3, #0
 800212a:	75fb      	strb	r3, [r7, #23]
			osDelay(250);
 800212c:	20fa      	movs	r0, #250	@ 0xfa
 800212e:	f008 f99b 	bl	800a468 <osDelay>
			resetYaw();
 8002132:	f7ff fb5f 	bl	80017f4 <resetYaw>
		}
		updateYaw();
 8002136:	f7ff fb83 	bl	8001840 <updateYaw>
		//osDelay(10);
		LMotorPID.setpoint=3;
 800213a:	4b33      	ldr	r3, [pc, #204]	@ (8002208 <B+0x108>)
 800213c:	4a33      	ldr	r2, [pc, #204]	@ (800220c <B+0x10c>)
 800213e:	60da      	str	r2, [r3, #12]
		RMotorPID.setpoint=3;
 8002140:	4b33      	ldr	r3, [pc, #204]	@ (8002210 <B+0x110>)
 8002142:	4a32      	ldr	r2, [pc, #200]	@ (800220c <B+0x10c>)
 8002144:	60da      	str	r2, [r3, #12]
		if(yaw > -0.1f)
 8002146:	4b33      	ldr	r3, [pc, #204]	@ (8002214 <B+0x114>)
 8002148:	edd3 7a00 	vldr	s15, [r3]
 800214c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002218 <B+0x118>
 8002150:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002158:	dd03      	ble.n	8002162 <B+0x62>
		{
			set_servo_angle(Slight_Right);
 800215a:	205a      	movs	r0, #90	@ 0x5a
 800215c:	f000 f9e6 	bl	800252c <set_servo_angle>
 8002160:	e00c      	b.n	800217c <B+0x7c>
		}
		else if(yaw < 0.1f)
 8002162:	4b2c      	ldr	r3, [pc, #176]	@ (8002214 <B+0x114>)
 8002164:	edd3 7a00 	vldr	s15, [r3]
 8002168:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800221c <B+0x11c>
 800216c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002174:	d502      	bpl.n	800217c <B+0x7c>
		{
			set_servo_angle(Slight_Left);
 8002176:	2064      	movs	r0, #100	@ 0x64
 8002178:	f000 f9d8 	bl	800252c <set_servo_angle>
		}

		L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 800217c:	4b28      	ldr	r3, [pc, #160]	@ (8002220 <B+0x120>)
 800217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	f7fe fd2f 	bl	8000be8 <__aeabi_d2f>
 800218a:	4603      	mov	r3, r0
 800218c:	ee00 3a10 	vmov	s0, r3
 8002190:	481d      	ldr	r0, [pc, #116]	@ (8002208 <B+0x108>)
 8002192:	f7ff fa0d 	bl	80015b0 <PID_Update>
 8002196:	eef0 7a40 	vmov.f32	s15, s0
 800219a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800219e:	ee17 3a90 	vmov	r3, s15
 80021a2:	613b      	str	r3, [r7, #16]
		R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 80021a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002224 <B+0x124>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	f7fe fd1b 	bl	8000be8 <__aeabi_d2f>
 80021b2:	4603      	mov	r3, r0
 80021b4:	ee00 3a10 	vmov	s0, r3
 80021b8:	4815      	ldr	r0, [pc, #84]	@ (8002210 <B+0x110>)
 80021ba:	f7ff f9f9 	bl	80015b0 <PID_Update>
 80021be:	eef0 7a40 	vmov.f32	s15, s0
 80021c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021c6:	ee17 3a90 	vmov	r3, s15
 80021ca:	60fb      	str	r3, [r7, #12]

		set_motor_pwm(L, R);
 80021cc:	68f9      	ldr	r1, [r7, #12]
 80021ce:	6938      	ldr	r0, [r7, #16]
 80021d0:	f000 f964 	bl	800249c <set_motor_pwm>
		osDelay(10);
 80021d4:	200a      	movs	r0, #10
 80021d6:	f008 f947 	bl	800a468 <osDelay>
	}while(g_distanceUS<target);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	ee07 3a90 	vmov	s15, r3
 80021e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021e4:	4b10      	ldr	r3, [pc, #64]	@ (8002228 <B+0x128>)
 80021e6:	edd3 7a00 	vldr	s15, [r3]
 80021ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f2:	dc93      	bgt.n	800211c <B+0x1c>

	Motor_Stop();
 80021f4:	f001 fa58 	bl	80036a8 <Motor_Stop>
	Set_Motor_Direction(1, 1);//set back to forward direction
 80021f8:	2101      	movs	r1, #1
 80021fa:	2001      	movs	r0, #1
 80021fc:	f7ff faa8 	bl	8001750 <Set_Motor_Direction>

}
 8002200:	bf00      	nop
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000594 	.word	0x20000594
 800220c:	40400000 	.word	0x40400000
 8002210:	200005bc 	.word	0x200005bc
 8002214:	20000590 	.word	0x20000590
 8002218:	bdcccccd 	.word	0xbdcccccd
 800221c:	3dcccccd 	.word	0x3dcccccd
 8002220:	20000568 	.word	0x20000568
 8002224:	20000570 	.word	0x20000570
 8002228:	2000054c 	.word	0x2000054c

0800222c <ForwardDistance>:
void ForwardDistance(int target)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	distanceTraveled=0;
 8002234:	4b43      	ldr	r3, [pc, #268]	@ (8002344 <ForwardDistance+0x118>)
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
	Set_Motor_Direction(1, 1);
 800223c:	2101      	movs	r1, #1
 800223e:	2001      	movs	r0, #1
 8002240:	f7ff fa86 	bl	8001750 <Set_Motor_Direction>
	uint8_t bTurn=1;
 8002244:	2301      	movs	r3, #1
 8002246:	75fb      	strb	r3, [r7, #23]
	int32_t L=0,R=0;
 8002248:	2300      	movs	r3, #0
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]

	do
	{
		if(bTurn)
 8002250:	7dfb      	ldrb	r3, [r7, #23]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <ForwardDistance+0x40>
		{
			set_servo_angle(Center);
 8002256:	205f      	movs	r0, #95	@ 0x5f
 8002258:	f000 f968 	bl	800252c <set_servo_angle>
			bTurn=0;
 800225c:	2300      	movs	r3, #0
 800225e:	75fb      	strb	r3, [r7, #23]
			osDelay(350);
 8002260:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8002264:	f008 f900 	bl	800a468 <osDelay>
			resetYaw();
 8002268:	f7ff fac4 	bl	80017f4 <resetYaw>
		}
		updateYaw();
 800226c:	f7ff fae8 	bl	8001840 <updateYaw>
		//osDelay(10);
		LMotorPID.setpoint=4;
 8002270:	4b35      	ldr	r3, [pc, #212]	@ (8002348 <ForwardDistance+0x11c>)
 8002272:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8002276:	60da      	str	r2, [r3, #12]
		RMotorPID.setpoint=4;
 8002278:	4b34      	ldr	r3, [pc, #208]	@ (800234c <ForwardDistance+0x120>)
 800227a:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800227e:	60da      	str	r2, [r3, #12]
		if(yaw > -0.1f)
 8002280:	4b33      	ldr	r3, [pc, #204]	@ (8002350 <ForwardDistance+0x124>)
 8002282:	edd3 7a00 	vldr	s15, [r3]
 8002286:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8002354 <ForwardDistance+0x128>
 800228a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800228e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002292:	dd03      	ble.n	800229c <ForwardDistance+0x70>
		{
			set_servo_angle(Slight_Right);
 8002294:	205a      	movs	r0, #90	@ 0x5a
 8002296:	f000 f949 	bl	800252c <set_servo_angle>
 800229a:	e00c      	b.n	80022b6 <ForwardDistance+0x8a>
		}
		else if(yaw < 0.1f)
 800229c:	4b2c      	ldr	r3, [pc, #176]	@ (8002350 <ForwardDistance+0x124>)
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002358 <ForwardDistance+0x12c>
 80022a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022ae:	d502      	bpl.n	80022b6 <ForwardDistance+0x8a>
		{
			set_servo_angle(Slight_Left);
 80022b0:	2064      	movs	r0, #100	@ 0x64
 80022b2:	f000 f93b 	bl	800252c <set_servo_angle>
		}

		L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 80022b6:	4b29      	ldr	r3, [pc, #164]	@ (800235c <ForwardDistance+0x130>)
 80022b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022bc:	4610      	mov	r0, r2
 80022be:	4619      	mov	r1, r3
 80022c0:	f7fe fc92 	bl	8000be8 <__aeabi_d2f>
 80022c4:	4603      	mov	r3, r0
 80022c6:	ee00 3a10 	vmov	s0, r3
 80022ca:	481f      	ldr	r0, [pc, #124]	@ (8002348 <ForwardDistance+0x11c>)
 80022cc:	f7ff f970 	bl	80015b0 <PID_Update>
 80022d0:	eef0 7a40 	vmov.f32	s15, s0
 80022d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022d8:	ee17 3a90 	vmov	r3, s15
 80022dc:	613b      	str	r3, [r7, #16]
		R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 80022de:	4b20      	ldr	r3, [pc, #128]	@ (8002360 <ForwardDistance+0x134>)
 80022e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e4:	4610      	mov	r0, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	f7fe fc7e 	bl	8000be8 <__aeabi_d2f>
 80022ec:	4603      	mov	r3, r0
 80022ee:	ee00 3a10 	vmov	s0, r3
 80022f2:	4816      	ldr	r0, [pc, #88]	@ (800234c <ForwardDistance+0x120>)
 80022f4:	f7ff f95c 	bl	80015b0 <PID_Update>
 80022f8:	eef0 7a40 	vmov.f32	s15, s0
 80022fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002300:	ee17 3a90 	vmov	r3, s15
 8002304:	60fb      	str	r3, [r7, #12]

		set_motor_pwm(L, R);
 8002306:	68f9      	ldr	r1, [r7, #12]
 8002308:	6938      	ldr	r0, [r7, #16]
 800230a:	f000 f8c7 	bl	800249c <set_motor_pwm>
		osDelay(10);
 800230e:	200a      	movs	r0, #10
 8002310:	f008 f8aa 	bl	800a468 <osDelay>
	}while(distanceTraveled<target);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	ee07 3a90 	vmov	s15, r3
 800231a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800231e:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <ForwardDistance+0x118>)
 8002320:	edd3 7a00 	vldr	s15, [r3]
 8002324:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232c:	dc90      	bgt.n	8002250 <ForwardDistance+0x24>

	Motor_Stop();
 800232e:	f001 f9bb 	bl	80036a8 <Motor_Stop>
	Set_Motor_Direction(1, 1);//set back for forward direction
 8002332:	2101      	movs	r1, #1
 8002334:	2001      	movs	r0, #1
 8002336:	f7ff fa0b 	bl	8001750 <Set_Motor_Direction>

}
 800233a:	bf00      	nop
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000228 	.word	0x20000228
 8002348:	20000594 	.word	0x20000594
 800234c:	200005bc 	.word	0x200005bc
 8002350:	20000590 	.word	0x20000590
 8002354:	bdcccccd 	.word	0xbdcccccd
 8002358:	3dcccccd 	.word	0x3dcccccd
 800235c:	20000568 	.word	0x20000568
 8002360:	20000570 	.word	0x20000570

08002364 <BackDistance>:
//move back by distance
void BackDistance(int target)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	distanceTraveled=0;
 800236c:	4b43      	ldr	r3, [pc, #268]	@ (800247c <BackDistance+0x118>)
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
	Set_Motor_Direction(0, 0);
 8002374:	2100      	movs	r1, #0
 8002376:	2000      	movs	r0, #0
 8002378:	f7ff f9ea 	bl	8001750 <Set_Motor_Direction>
	uint8_t bTurn=1;
 800237c:	2301      	movs	r3, #1
 800237e:	75fb      	strb	r3, [r7, #23]
	int32_t L=0,R=0;
 8002380:	2300      	movs	r3, #0
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]

	do
	{
		if(bTurn)
 8002388:	7dfb      	ldrb	r3, [r7, #23]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00a      	beq.n	80023a4 <BackDistance+0x40>
		{
			set_servo_angle(Center);
 800238e:	205f      	movs	r0, #95	@ 0x5f
 8002390:	f000 f8cc 	bl	800252c <set_servo_angle>
			bTurn=0;
 8002394:	2300      	movs	r3, #0
 8002396:	75fb      	strb	r3, [r7, #23]
			osDelay(350);
 8002398:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 800239c:	f008 f864 	bl	800a468 <osDelay>
			resetYaw();
 80023a0:	f7ff fa28 	bl	80017f4 <resetYaw>
		}
		updateYaw();
 80023a4:	f7ff fa4c 	bl	8001840 <updateYaw>
		//osDelay(10);
		LMotorPID.setpoint=4;
 80023a8:	4b35      	ldr	r3, [pc, #212]	@ (8002480 <BackDistance+0x11c>)
 80023aa:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80023ae:	60da      	str	r2, [r3, #12]
		RMotorPID.setpoint=4;
 80023b0:	4b34      	ldr	r3, [pc, #208]	@ (8002484 <BackDistance+0x120>)
 80023b2:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80023b6:	60da      	str	r2, [r3, #12]
		if(yaw > -0.1f)
 80023b8:	4b33      	ldr	r3, [pc, #204]	@ (8002488 <BackDistance+0x124>)
 80023ba:	edd3 7a00 	vldr	s15, [r3]
 80023be:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800248c <BackDistance+0x128>
 80023c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ca:	dd03      	ble.n	80023d4 <BackDistance+0x70>
		{
			set_servo_angle(Slight_Right);
 80023cc:	205a      	movs	r0, #90	@ 0x5a
 80023ce:	f000 f8ad 	bl	800252c <set_servo_angle>
 80023d2:	e00c      	b.n	80023ee <BackDistance+0x8a>
		}
		else if(yaw < 0.1f)
 80023d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002488 <BackDistance+0x124>)
 80023d6:	edd3 7a00 	vldr	s15, [r3]
 80023da:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002490 <BackDistance+0x12c>
 80023de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e6:	d502      	bpl.n	80023ee <BackDistance+0x8a>
		{
			set_servo_angle(Slight_Left);
 80023e8:	2064      	movs	r0, #100	@ 0x64
 80023ea:	f000 f89f 	bl	800252c <set_servo_angle>
		}

		L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 80023ee:	4b29      	ldr	r3, [pc, #164]	@ (8002494 <BackDistance+0x130>)
 80023f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	f7fe fbf6 	bl	8000be8 <__aeabi_d2f>
 80023fc:	4603      	mov	r3, r0
 80023fe:	ee00 3a10 	vmov	s0, r3
 8002402:	481f      	ldr	r0, [pc, #124]	@ (8002480 <BackDistance+0x11c>)
 8002404:	f7ff f8d4 	bl	80015b0 <PID_Update>
 8002408:	eef0 7a40 	vmov.f32	s15, s0
 800240c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002410:	ee17 3a90 	vmov	r3, s15
 8002414:	613b      	str	r3, [r7, #16]
		R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8002416:	4b20      	ldr	r3, [pc, #128]	@ (8002498 <BackDistance+0x134>)
 8002418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241c:	4610      	mov	r0, r2
 800241e:	4619      	mov	r1, r3
 8002420:	f7fe fbe2 	bl	8000be8 <__aeabi_d2f>
 8002424:	4603      	mov	r3, r0
 8002426:	ee00 3a10 	vmov	s0, r3
 800242a:	4816      	ldr	r0, [pc, #88]	@ (8002484 <BackDistance+0x120>)
 800242c:	f7ff f8c0 	bl	80015b0 <PID_Update>
 8002430:	eef0 7a40 	vmov.f32	s15, s0
 8002434:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002438:	ee17 3a90 	vmov	r3, s15
 800243c:	60fb      	str	r3, [r7, #12]

		set_motor_pwm(L, R);
 800243e:	68f9      	ldr	r1, [r7, #12]
 8002440:	6938      	ldr	r0, [r7, #16]
 8002442:	f000 f82b 	bl	800249c <set_motor_pwm>
		osDelay(10);
 8002446:	200a      	movs	r0, #10
 8002448:	f008 f80e 	bl	800a468 <osDelay>
	}while(distanceTraveled<target);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	ee07 3a90 	vmov	s15, r3
 8002452:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002456:	4b09      	ldr	r3, [pc, #36]	@ (800247c <BackDistance+0x118>)
 8002458:	edd3 7a00 	vldr	s15, [r3]
 800245c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002464:	dc90      	bgt.n	8002388 <BackDistance+0x24>

	Motor_Stop();
 8002466:	f001 f91f 	bl	80036a8 <Motor_Stop>
	Set_Motor_Direction(1, 1);//set back for forward direction
 800246a:	2101      	movs	r1, #1
 800246c:	2001      	movs	r0, #1
 800246e:	f7ff f96f 	bl	8001750 <Set_Motor_Direction>

}
 8002472:	bf00      	nop
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000228 	.word	0x20000228
 8002480:	20000594 	.word	0x20000594
 8002484:	200005bc 	.word	0x200005bc
 8002488:	20000590 	.word	0x20000590
 800248c:	bdcccccd 	.word	0xbdcccccd
 8002490:	3dcccccd 	.word	0x3dcccccd
 8002494:	20000568 	.word	0x20000568
 8002498:	20000570 	.word	0x20000570

0800249c <set_motor_pwm>:

void set_motor_pwm(int32_t L,int32_t R)
{	//4k max pwm
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]

	pwmValL=L;
 80024a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002520 <set_motor_pwm+0x84>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6013      	str	r3, [r2, #0]
	pwmValR=R;
 80024ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002524 <set_motor_pwm+0x88>)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	6013      	str	r3, [r2, #0]
	if(pwmValL<0)
 80024b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002520 <set_motor_pwm+0x84>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	da04      	bge.n	80024c4 <set_motor_pwm+0x28>
		pwmValL=500;
 80024ba:	4b19      	ldr	r3, [pc, #100]	@ (8002520 <set_motor_pwm+0x84>)
 80024bc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	e009      	b.n	80024d8 <set_motor_pwm+0x3c>
	else if(pwmValL>5000)
 80024c4:	4b16      	ldr	r3, [pc, #88]	@ (8002520 <set_motor_pwm+0x84>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024cc:	4293      	cmp	r3, r2
 80024ce:	dd03      	ble.n	80024d8 <set_motor_pwm+0x3c>
		pwmValL=5000;
 80024d0:	4b13      	ldr	r3, [pc, #76]	@ (8002520 <set_motor_pwm+0x84>)
 80024d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024d6:	601a      	str	r2, [r3, #0]

	if(pwmValR<0)
 80024d8:	4b12      	ldr	r3, [pc, #72]	@ (8002524 <set_motor_pwm+0x88>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	da04      	bge.n	80024ea <set_motor_pwm+0x4e>
		pwmValR=500;
 80024e0:	4b10      	ldr	r3, [pc, #64]	@ (8002524 <set_motor_pwm+0x88>)
 80024e2:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	e009      	b.n	80024fe <set_motor_pwm+0x62>
	else if(pwmValR>5000)
 80024ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002524 <set_motor_pwm+0x88>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f2:	4293      	cmp	r3, r2
 80024f4:	dd03      	ble.n	80024fe <set_motor_pwm+0x62>
		pwmValR=5000;
 80024f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002524 <set_motor_pwm+0x88>)
 80024f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024fc:	601a      	str	r2, [r3, #0]

	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValL);
 80024fe:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <set_motor_pwm+0x84>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	4b09      	ldr	r3, [pc, #36]	@ (8002528 <set_motor_pwm+0x8c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmValR);
 8002508:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <set_motor_pwm+0x88>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b06      	ldr	r3, [pc, #24]	@ (8002528 <set_motor_pwm+0x8c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	639a      	str	r2, [r3, #56]	@ 0x38

	osDelay(1);
 8002512:	2001      	movs	r0, #1
 8002514:	f007 ffa8 	bl	800a468 <osDelay>
}
 8002518:	bf00      	nop
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	200005e4 	.word	0x200005e4
 8002524:	200005e8 	.word	0x200005e8
 8002528:	2000049c 	.word	0x2000049c

0800252c <set_servo_angle>:
		servo_pwm = MAX_SERVO;
	}
	htim1.Instance->CCR4 = servo_pwm;
}
void set_servo_angle(uint8_t value)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
	if (value > 180) value = 180;
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	2bb4      	cmp	r3, #180	@ 0xb4
 800253a:	d901      	bls.n	8002540 <set_servo_angle+0x14>
 800253c:	23b4      	movs	r3, #180	@ 0xb4
 800253e:	71fb      	strb	r3, [r7, #7]
	if (value < 0) value = 0;

	servo_pwm = 240 - ((value * (240 - 60)) / 180);
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8002546:	4a08      	ldr	r2, [pc, #32]	@ (8002568 <set_servo_angle+0x3c>)
 8002548:	6013      	str	r3, [r2, #0]
    if(servo_pwm > MAX_SERVO)
    {
    	servo_pwm = MAX_SERVO;

    }*/
	angle=value;
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	4a07      	ldr	r2, [pc, #28]	@ (800256c <set_servo_angle+0x40>)
 800254e:	6013      	str	r3, [r2, #0]
	htim1.Instance->CCR4 = servo_pwm;
 8002550:	4b05      	ldr	r3, [pc, #20]	@ (8002568 <set_servo_angle+0x3c>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <set_servo_angle+0x44>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	641a      	str	r2, [r3, #64]	@ 0x40

}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000014 	.word	0x20000014
 800256c:	200005f0 	.word	0x200005f0
 8002570:	20000334 	.word	0x20000334

08002574 <MoveTo10By10>:
//    {moveRight2Function,30, {MoveTo3, MoveRight2}},    // MoveRight2
//    {moveTo3Function,	30,    {MoveTo3, MoveTo3}}        // MoveTo3
};
State_t *CurrentState=NULL;  // pointer to the current state
void MoveTo10By10()
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0

		F(30);
 8002578:	201e      	movs	r0, #30
 800257a:	f7ff fd33 	bl	8001fe4 <F>

		flagDone=1;
 800257e:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <MoveTo10By10+0x34>)
 8002580:	2201      	movs	r2, #1
 8002582:	601a      	str	r2, [r3, #0]
		flagReceived=0;
 8002584:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <MoveTo10By10+0x38>)
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3,(uint8_t *)"ACK\r\n",5,0xFFFF);
 800258a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800258e:	2205      	movs	r2, #5
 8002590:	4907      	ldr	r1, [pc, #28]	@ (80025b0 <MoveTo10By10+0x3c>)
 8002592:	4808      	ldr	r0, [pc, #32]	@ (80025b4 <MoveTo10By10+0x40>)
 8002594:	f006 f9d4 	bl	8008940 <HAL_UART_Transmit>
		CurrentState=CurrentState->next[Duncare];//
 8002598:	4b07      	ldr	r3, [pc, #28]	@ (80025b8 <MoveTo10By10+0x44>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4a06      	ldr	r2, [pc, #24]	@ (80025b8 <MoveTo10By10+0x44>)
 80025a0:	6013      	str	r3, [r2, #0]
//	else if(aRxBuffer[0]=='R')
//		{
//		CurrentState=CurrentState->next[RightState];
//		}

}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000230 	.word	0x20000230
 80025ac:	20000234 	.word	0x20000234
 80025b0:	0801139c 	.word	0x0801139c
 80025b4:	200004e4 	.word	0x200004e4
 80025b8:	20000600 	.word	0x20000600

080025bc <FirstDir>:
void FirstDir()
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
	//DEBUG
//	if(mode==0)
//		CurrentState=CurrentState->next[LeftState];
//	else if(mode==1)
//		CurrentState=CurrentState->next[RightState];
	if(aRxBuffer[0]=='A')
 80025c0:	4b0b      	ldr	r3, [pc, #44]	@ (80025f0 <FirstDir+0x34>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b41      	cmp	r3, #65	@ 0x41
 80025c6:	d105      	bne.n	80025d4 <FirstDir+0x18>
		CurrentState=CurrentState->next[LeftState];
 80025c8:	4b0a      	ldr	r3, [pc, #40]	@ (80025f4 <FirstDir+0x38>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4a09      	ldr	r2, [pc, #36]	@ (80025f4 <FirstDir+0x38>)
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e008      	b.n	80025e6 <FirstDir+0x2a>
	else if(aRxBuffer[0]=='D')
 80025d4:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <FirstDir+0x34>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b44      	cmp	r3, #68	@ 0x44
 80025da:	d104      	bne.n	80025e6 <FirstDir+0x2a>
			CurrentState=CurrentState->next[RightState];
 80025dc:	4b05      	ldr	r3, [pc, #20]	@ (80025f4 <FirstDir+0x38>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	4a04      	ldr	r2, [pc, #16]	@ (80025f4 <FirstDir+0x38>)
 80025e4:	6013      	str	r3, [r2, #0]
	else if(aRxBuffer[0]=='X')//ggwp we ball
	{
		//RANDOM DIR AND WHACK TO BE DONE!!!!
	}
	osDelay(10);
 80025e6:	200a      	movs	r0, #10
 80025e8:	f007 ff3e 	bl	800a468 <osDelay>
	}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	200005f4 	.word	0x200005f4
 80025f4:	20000600 	.word	0x20000600

080025f8 <SecondDir>:
void SecondDir()
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
	//=CurrentState->next[RightState];
//	if(mode==0)
//		CurrentState=CurrentState->next[RightState];
//	else if(mode==1)
//		CurrentState=CurrentState->next[RightState];
	if(aRxBuffer[0]=='A')
 80025fc:	4b0b      	ldr	r3, [pc, #44]	@ (800262c <SecondDir+0x34>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b41      	cmp	r3, #65	@ 0x41
 8002602:	d105      	bne.n	8002610 <SecondDir+0x18>
		CurrentState=CurrentState->next[LeftState];
 8002604:	4b0a      	ldr	r3, [pc, #40]	@ (8002630 <SecondDir+0x38>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4a09      	ldr	r2, [pc, #36]	@ (8002630 <SecondDir+0x38>)
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e008      	b.n	8002622 <SecondDir+0x2a>
	else if(aRxBuffer[0]=='D')
 8002610:	4b06      	ldr	r3, [pc, #24]	@ (800262c <SecondDir+0x34>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b44      	cmp	r3, #68	@ 0x44
 8002616:	d104      	bne.n	8002622 <SecondDir+0x2a>
			CurrentState=CurrentState->next[RightState];
 8002618:	4b05      	ldr	r3, [pc, #20]	@ (8002630 <SecondDir+0x38>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	4a04      	ldr	r2, [pc, #16]	@ (8002630 <SecondDir+0x38>)
 8002620:	6013      	str	r3, [r2, #0]
	else if(aRxBuffer[0]=='X')//ggwp we ball
	{
		//RANDOM DIR AND WHACK TO BE DONE!!!!
	}
	osDelay(10);
 8002622:	200a      	movs	r0, #10
 8002624:	f007 ff20 	bl	800a468 <osDelay>
	}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}
 800262c:	200005f4 	.word	0x200005f4
 8002630:	20000600 	.word	0x20000600

08002634 <GoLeft>:
void GoLeft()
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
	FLeft(41.5);
 8002638:	2029      	movs	r0, #41	@ 0x29
 800263a:	f7ff f9b1 	bl	80019a0 <FLeft>
	osDelay(100);
 800263e:	2064      	movs	r0, #100	@ 0x64
 8002640:	f007 ff12 	bl	800a468 <osDelay>
	FRight(-90);
 8002644:	f06f 0059 	mvn.w	r0, #89	@ 0x59
 8002648:	f7ff fb68 	bl	8001d1c <FRight>
	osDelay(100);
 800264c:	2064      	movs	r0, #100	@ 0x64
 800264e:	f007 ff0b 	bl	800a468 <osDelay>
	BackDistance(5);
 8002652:	2005      	movs	r0, #5
 8002654:	f7ff fe86 	bl	8002364 <BackDistance>
	osDelay(100);
 8002658:	2064      	movs	r0, #100	@ 0x64
 800265a:	f007 ff05 	bl	800a468 <osDelay>
	FLeft(46.5);
 800265e:	202e      	movs	r0, #46	@ 0x2e
 8002660:	f7ff f99e 	bl	80019a0 <FLeft>

	CurrentState=CurrentState->next[Duncare];
 8002664:	4b03      	ldr	r3, [pc, #12]	@ (8002674 <GoLeft+0x40>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4a02      	ldr	r2, [pc, #8]	@ (8002674 <GoLeft+0x40>)
 800266c:	6013      	str	r3, [r2, #0]
	}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000600 	.word	0x20000600

08002678 <GoRight>:
void GoRight()
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
	FRight(-41.5);
 800267c:	f06f 0028 	mvn.w	r0, #40	@ 0x28
 8002680:	f7ff fb4c 	bl	8001d1c <FRight>
	osDelay(100);
 8002684:	2064      	movs	r0, #100	@ 0x64
 8002686:	f007 feef 	bl	800a468 <osDelay>
	FLeft(90);
 800268a:	205a      	movs	r0, #90	@ 0x5a
 800268c:	f7ff f988 	bl	80019a0 <FLeft>
	osDelay(100);
 8002690:	2064      	movs	r0, #100	@ 0x64
 8002692:	f007 fee9 	bl	800a468 <osDelay>
	BackDistance(10);
 8002696:	200a      	movs	r0, #10
 8002698:	f7ff fe64 	bl	8002364 <BackDistance>
	osDelay(100);
 800269c:	2064      	movs	r0, #100	@ 0x64
 800269e:	f007 fee3 	bl	800a468 <osDelay>
	FRight(-47.5);
 80026a2:	f06f 002e 	mvn.w	r0, #46	@ 0x2e
 80026a6:	f7ff fb39 	bl	8001d1c <FRight>

	CurrentState=CurrentState->next[Duncare];
 80026aa:	4b03      	ldr	r3, [pc, #12]	@ (80026b8 <GoRight+0x40>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	4a01      	ldr	r2, [pc, #4]	@ (80026b8 <GoRight+0x40>)
 80026b2:	6013      	str	r3, [r2, #0]
	}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000600 	.word	0x20000600

080026bc <MoveTo2nd>:

//Do your adjustment to 2nd Obstacle if necessary
void MoveTo2nd()
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
	osDelay(100);
 80026c0:	2064      	movs	r0, #100	@ 0x64
 80026c2:	f007 fed1 	bl	800a468 <osDelay>
	count=g_distanceUS+40;
 80026c6:	4b23      	ldr	r3, [pc, #140]	@ (8002754 <MoveTo2nd+0x98>)
 80026c8:	edd3 7a00 	vldr	s15, [r3]
 80026cc:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002758 <MoveTo2nd+0x9c>
 80026d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026d8:	ee17 2a90 	vmov	r2, s15
 80026dc:	4b1f      	ldr	r3, [pc, #124]	@ (800275c <MoveTo2nd+0xa0>)
 80026de:	601a      	str	r2, [r3, #0]
	if(g_distanceUS<30)
 80026e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002754 <MoveTo2nd+0x98>)
 80026e2:	edd3 7a00 	vldr	s15, [r3]
 80026e6:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80026ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f2:	d508      	bpl.n	8002706 <MoveTo2nd+0x4a>
	{
		B(30);
 80026f4:	201e      	movs	r0, #30
 80026f6:	f7ff fd03 	bl	8002100 <B>
		count=count+30;
 80026fa:	4b18      	ldr	r3, [pc, #96]	@ (800275c <MoveTo2nd+0xa0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	331e      	adds	r3, #30
 8002700:	4a16      	ldr	r2, [pc, #88]	@ (800275c <MoveTo2nd+0xa0>)
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	e011      	b.n	800272a <MoveTo2nd+0x6e>
	}
	else if(g_distanceUS>30){
 8002706:	4b13      	ldr	r3, [pc, #76]	@ (8002754 <MoveTo2nd+0x98>)
 8002708:	edd3 7a00 	vldr	s15, [r3]
 800270c:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8002710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002718:	dd07      	ble.n	800272a <MoveTo2nd+0x6e>
		F(40);
 800271a:	2028      	movs	r0, #40	@ 0x28
 800271c:	f7ff fc62 	bl	8001fe4 <F>
		count=count+40;
 8002720:	4b0e      	ldr	r3, [pc, #56]	@ (800275c <MoveTo2nd+0xa0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	3328      	adds	r3, #40	@ 0x28
 8002726:	4a0d      	ldr	r2, [pc, #52]	@ (800275c <MoveTo2nd+0xa0>)
 8002728:	6013      	str	r3, [r2, #0]
	}
	HAL_UART_Transmit(&huart3,(uint8_t *)"ACK\r\n",5,0xFFFF);
 800272a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800272e:	2205      	movs	r2, #5
 8002730:	490b      	ldr	r1, [pc, #44]	@ (8002760 <MoveTo2nd+0xa4>)
 8002732:	480c      	ldr	r0, [pc, #48]	@ (8002764 <MoveTo2nd+0xa8>)
 8002734:	f006 f904 	bl	8008940 <HAL_UART_Transmit>
	memset(aRxBuffer,"0",sizeof(aRxBuffer));
 8002738:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <MoveTo2nd+0xac>)
 800273a:	2203      	movs	r2, #3
 800273c:	4619      	mov	r1, r3
 800273e:	480b      	ldr	r0, [pc, #44]	@ (800276c <MoveTo2nd+0xb0>)
 8002740:	f00b fb1d 	bl	800dd7e <memset>
	CurrentState=CurrentState->next[Duncare];//change to waiting dir2
 8002744:	4b0a      	ldr	r3, [pc, #40]	@ (8002770 <MoveTo2nd+0xb4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4a09      	ldr	r2, [pc, #36]	@ (8002770 <MoveTo2nd+0xb4>)
 800274c:	6013      	str	r3, [r2, #0]
	}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	2000054c 	.word	0x2000054c
 8002758:	42200000 	.word	0x42200000
 800275c:	20000238 	.word	0x20000238
 8002760:	0801139c 	.word	0x0801139c
 8002764:	200004e4 	.word	0x200004e4
 8002768:	080113a4 	.word	0x080113a4
 800276c:	200005f4 	.word	0x200005f4
 8002770:	20000600 	.word	0x20000600

08002774 <GoLeft2>:

void GoLeft2()
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
	FLeft(84);
 8002778:	2054      	movs	r0, #84	@ 0x54
 800277a:	f7ff f911 	bl	80019a0 <FLeft>
	FIR(400,1);
 800277e:	2101      	movs	r1, #1
 8002780:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002784:	f7ff fb60 	bl	8001e48 <FIR>
	FR(-166);
 8002788:	f06f 00a5 	mvn.w	r0, #165	@ 0xa5
 800278c:	f7ff fa32 	bl	8001bf4 <FR>
	ForwardDistance(10);
 8002790:	200a      	movs	r0, #10
 8002792:	f7ff fd4b 	bl	800222c <ForwardDistance>
	FIR(400,1); //0 for Left 1 for Right
 8002796:	2101      	movs	r1, #1
 8002798:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800279c:	f7ff fb54 	bl	8001e48 <FIR>
	FRight(-80);
 80027a0:	f06f 004f 	mvn.w	r0, #79	@ 0x4f
 80027a4:	f7ff faba 	bl	8001d1c <FRight>
	ForwardDistance(count);
 80027a8:	4b13      	ldr	r3, [pc, #76]	@ (80027f8 <GoLeft2+0x84>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fd3d 	bl	800222c <ForwardDistance>
	//FIR(600,1);
	FRight(-80);
 80027b2:	f06f 004f 	mvn.w	r0, #79	@ 0x4f
 80027b6:	f7ff fab1 	bl	8001d1c <FRight>
	if(adjustment){
 80027ba:	4b10      	ldr	r3, [pc, #64]	@ (80027fc <GoLeft2+0x88>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <GoLeft2+0x64>
		reverse=reverse-45;
 80027c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002800 <GoLeft2+0x8c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	3b2d      	subs	r3, #45	@ 0x2d
 80027c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002800 <GoLeft2+0x8c>)
 80027ca:	6013      	str	r3, [r2, #0]
		ForwardDistance(reverse);
 80027cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002800 <GoLeft2+0x8c>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff fd2b 	bl	800222c <ForwardDistance>
 80027d6:	e004      	b.n	80027e2 <GoLeft2+0x6e>
	}
	else{
		BackDistance(reverse);
 80027d8:	4b09      	ldr	r3, [pc, #36]	@ (8002800 <GoLeft2+0x8c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff fdc1 	bl	8002364 <BackDistance>
	}
	FLeft(80);
 80027e2:	2050      	movs	r0, #80	@ 0x50
 80027e4:	f7ff f8dc 	bl	80019a0 <FLeft>
	CurrentState=CurrentState->next[Duncare];//change to waiting dir2
 80027e8:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <GoLeft2+0x90>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	4a05      	ldr	r2, [pc, #20]	@ (8002804 <GoLeft2+0x90>)
 80027f0:	6013      	str	r3, [r2, #0]
	}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000238 	.word	0x20000238
 80027fc:	20000240 	.word	0x20000240
 8002800:	2000023c 	.word	0x2000023c
 8002804:	20000600 	.word	0x20000600

08002808 <GoRight2>:

void GoRight2()
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
	FRight(-84);
 800280c:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 8002810:	f7ff fa84 	bl	8001d1c <FRight>
	FIR(400,0);
 8002814:	2100      	movs	r1, #0
 8002816:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800281a:	f7ff fb15 	bl	8001e48 <FIR>
	FL(161);
 800281e:	20a1      	movs	r0, #161	@ 0xa1
 8002820:	f7ff f954 	bl	8001acc <FL>
	ForwardDistance(10);
 8002824:	200a      	movs	r0, #10
 8002826:	f7ff fd01 	bl	800222c <ForwardDistance>
	FIR(400,0); //0 for Left 1 for Right
 800282a:	2100      	movs	r1, #0
 800282c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002830:	f7ff fb0a 	bl	8001e48 <FIR>
	FLeft(80);
 8002834:	2050      	movs	r0, #80	@ 0x50
 8002836:	f7ff f8b3 	bl	80019a0 <FLeft>
	ForwardDistance(count);
 800283a:	4b13      	ldr	r3, [pc, #76]	@ (8002888 <GoRight2+0x80>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff fcf4 	bl	800222c <ForwardDistance>
	//FIR(600,1);
	FLeft(80);
 8002844:	2050      	movs	r0, #80	@ 0x50
 8002846:	f7ff f8ab 	bl	80019a0 <FLeft>
	if(adjustment){
 800284a:	4b10      	ldr	r3, [pc, #64]	@ (800288c <GoRight2+0x84>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <GoRight2+0x60>
		reverse=reverse-45;
 8002852:	4b0f      	ldr	r3, [pc, #60]	@ (8002890 <GoRight2+0x88>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	3b2d      	subs	r3, #45	@ 0x2d
 8002858:	4a0d      	ldr	r2, [pc, #52]	@ (8002890 <GoRight2+0x88>)
 800285a:	6013      	str	r3, [r2, #0]
		ForwardDistance(reverse);
 800285c:	4b0c      	ldr	r3, [pc, #48]	@ (8002890 <GoRight2+0x88>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fce3 	bl	800222c <ForwardDistance>
 8002866:	e004      	b.n	8002872 <GoRight2+0x6a>
	}
	else{
		BackDistance(reverse);
 8002868:	4b09      	ldr	r3, [pc, #36]	@ (8002890 <GoRight2+0x88>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fd79 	bl	8002364 <BackDistance>
	}

	FRight(-80);
 8002872:	f06f 004f 	mvn.w	r0, #79	@ 0x4f
 8002876:	f7ff fa51 	bl	8001d1c <FRight>
	CurrentState=CurrentState->next[Duncare];//change to waiting dir2
 800287a:	4b06      	ldr	r3, [pc, #24]	@ (8002894 <GoRight2+0x8c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a04      	ldr	r2, [pc, #16]	@ (8002894 <GoRight2+0x8c>)
 8002882:	6013      	str	r3, [r2, #0]
	}
 8002884:	bf00      	nop
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20000238 	.word	0x20000238
 800288c:	20000240 	.word	0x20000240
 8002890:	2000023c 	.word	0x2000023c
 8002894:	20000600 	.word	0x20000600

08002898 <GoBackHome>:
void GoBackHome()
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
	F(30);
 800289c:	201e      	movs	r0, #30
 800289e:	f7ff fba1 	bl	8001fe4 <F>
	CurrentState=CurrentState->next[Duncare];//change to waiting dir2
 80028a2:	4b03      	ldr	r3, [pc, #12]	@ (80028b0 <GoBackHome+0x18>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4a01      	ldr	r2, [pc, #4]	@ (80028b0 <GoBackHome+0x18>)
 80028aa:	6013      	str	r3, [r2, #0]
	}
 80028ac:	bf00      	nop
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000600 	.word	0x20000600

080028b4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80028b8:	f001 fdda 	bl	8004470 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80028bc:	f000 f8d4 	bl	8002a68 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80028c0:	f000 fcc2 	bl	8003248 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80028c4:	f000 fc96 	bl	80031f4 <MX_USART3_UART_Init>
	MX_TIM3_Init();
 80028c8:	f000 faf0 	bl	8002eac <MX_TIM3_Init>
	MX_TIM6_Init();
 80028cc:	f000 fbb2 	bl	8003034 <MX_TIM6_Init>
	MX_TIM1_Init();
 80028d0:	f000 f9fa 	bl	8002cc8 <MX_TIM1_Init>
	MX_TIM8_Init();
 80028d4:	f000 fbe4 	bl	80030a0 <MX_TIM8_Init>
	MX_I2C1_Init();
 80028d8:	f000 f9c8 	bl	8002c6c <MX_I2C1_Init>
	MX_TIM2_Init();
 80028dc:	f000 fa92 	bl	8002e04 <MX_TIM2_Init>
	MX_TIM4_Init();
 80028e0:	f000 fb38 	bl	8002f54 <MX_TIM4_Init>
	MX_ADC1_Init();
 80028e4:	f000 f91e 	bl	8002b24 <MX_ADC1_Init>
	MX_ADC2_Init();
 80028e8:	f000 f96e 	bl	8002bc8 <MX_ADC2_Init>
	/* USER CODE BEGIN 2 */
	OLED_Init();
 80028ec:	f00a fc0a 	bl	800d104 <OLED_Init>
	ICM20948_init(&hi2c1,0,GYRO_SENS,ACCEL_SENS);
 80028f0:	2300      	movs	r3, #0
 80028f2:	2203      	movs	r2, #3
 80028f4:	2100      	movs	r1, #0
 80028f6:	483f      	ldr	r0, [pc, #252]	@ (80029f4 <main+0x140>)
 80028f8:	f007 f8f9 	bl	8009aee <ICM20948_init>

	OLED_ShowString(10, 10, "Press to Start\0");
 80028fc:	4a3e      	ldr	r2, [pc, #248]	@ (80029f8 <main+0x144>)
 80028fe:	210a      	movs	r1, #10
 8002900:	200a      	movs	r0, #10
 8002902:	f00a fbcd 	bl	800d0a0 <OLED_ShowString>
	OLED_Refresh_Gram();
 8002906:	f00a fa57 	bl	800cdb8 <OLED_Refresh_Gram>
	while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8)!=0);
 800290a:	bf00      	nop
 800290c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002910:	483a      	ldr	r0, [pc, #232]	@ (80029fc <main+0x148>)
 8002912:	f002 fd83 	bl	800541c <HAL_GPIO_ReadPin>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1f7      	bne.n	800290c <main+0x58>
	HAL_Delay(200);
 800291c:	20c8      	movs	r0, #200	@ 0xc8
 800291e:	f001 fe19 	bl	8004554 <HAL_Delay>
	ICM20948_CalibrateAccel(&hi2c1, ACCEL_SENS, 250);
 8002922:	22fa      	movs	r2, #250	@ 0xfa
 8002924:	2100      	movs	r1, #0
 8002926:	4833      	ldr	r0, [pc, #204]	@ (80029f4 <main+0x140>)
 8002928:	f007 fc2a 	bl	800a180 <ICM20948_CalibrateAccel>
	ICM20948_CalibrateGyro(&hi2c1,GYRO_SENS, 250);
 800292c:	22fa      	movs	r2, #250	@ 0xfa
 800292e:	2103      	movs	r1, #3
 8002930:	4830      	ldr	r0, [pc, #192]	@ (80029f4 <main+0x140>)
 8002932:	f007 fb7d 	bl	800a030 <ICM20948_CalibrateGyro>
	OLED_Clear();
 8002936:	f00a fac1 	bl	800cebc <OLED_Clear>

	HAL_TIM_Base_Start(&htim6);// for microseond delay
 800293a:	4831      	ldr	r0, [pc, #196]	@ (8002a00 <main+0x14c>)
 800293c:	f004 fac6 	bl	8006ecc <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);//Timer for ultra sonic
 8002940:	2100      	movs	r1, #0
 8002942:	4830      	ldr	r0, [pc, #192]	@ (8002a04 <main+0x150>)
 8002944:	f004 fca6 	bl	8007294 <HAL_TIM_IC_Start_IT>
	HAL_UART_Receive_IT(&huart3,(uint8_t *)aRxBuffer,RECEIVE_BUFFER_SIZE);//Receive data from uart
 8002948:	2204      	movs	r2, #4
 800294a:	492f      	ldr	r1, [pc, #188]	@ (8002a08 <main+0x154>)
 800294c:	482f      	ldr	r0, [pc, #188]	@ (8002a0c <main+0x158>)
 800294e:	f006 f882 	bl	8008a56 <HAL_UART_Receive_IT>


	PID_Init(&LMotorPID, 3.0*100.0f, 25 *100.0f,0 , 0, 1000, 5000);
 8002952:	eddf 2a2f 	vldr	s5, [pc, #188]	@ 8002a10 <main+0x15c>
 8002956:	ed9f 2a2f 	vldr	s4, [pc, #188]	@ 8002a14 <main+0x160>
 800295a:	eddf 1a2f 	vldr	s3, [pc, #188]	@ 8002a18 <main+0x164>
 800295e:	ed9f 1a2e 	vldr	s2, [pc, #184]	@ 8002a18 <main+0x164>
 8002962:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 8002a1c <main+0x168>
 8002966:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8002a20 <main+0x16c>
 800296a:	482e      	ldr	r0, [pc, #184]	@ (8002a24 <main+0x170>)
 800296c:	f7fe fdec 	bl	8001548 <PID_Init>
	PID_Init(&RMotorPID, 3.0*100.0f, 25 *100.0f,0 , 0, 1000, 5000);
 8002970:	eddf 2a27 	vldr	s5, [pc, #156]	@ 8002a10 <main+0x15c>
 8002974:	ed9f 2a27 	vldr	s4, [pc, #156]	@ 8002a14 <main+0x160>
 8002978:	eddf 1a27 	vldr	s3, [pc, #156]	@ 8002a18 <main+0x164>
 800297c:	ed9f 1a26 	vldr	s2, [pc, #152]	@ 8002a18 <main+0x164>
 8002980:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8002a1c <main+0x168>
 8002984:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8002a20 <main+0x16c>
 8002988:	4827      	ldr	r0, [pc, #156]	@ (8002a28 <main+0x174>)
 800298a:	f7fe fddd 	bl	8001548 <PID_Init>
	Set_Motor_Direction(1,1);//Keep forget put lmao
 800298e:	2101      	movs	r1, #1
 8002990:	2001      	movs	r0, #1
 8002992:	f7fe fedd 	bl	8001750 <Set_Motor_Direction>
	functionCheck();
#endif
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8002996:	f007 fc8b 	bl	800a2b0 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800299a:	4a24      	ldr	r2, [pc, #144]	@ (8002a2c <main+0x178>)
 800299c:	2100      	movs	r1, #0
 800299e:	4824      	ldr	r0, [pc, #144]	@ (8002a30 <main+0x17c>)
 80029a0:	f007 fcd0 	bl	800a344 <osThreadNew>
 80029a4:	4603      	mov	r3, r0
 80029a6:	4a23      	ldr	r2, [pc, #140]	@ (8002a34 <main+0x180>)
 80029a8:	6013      	str	r3, [r2, #0]

	/* creation of oledTask */
	oledTaskHandle = osThreadNew(StartOledTask, NULL, &oledTask_attributes);
 80029aa:	4a23      	ldr	r2, [pc, #140]	@ (8002a38 <main+0x184>)
 80029ac:	2100      	movs	r1, #0
 80029ae:	4823      	ldr	r0, [pc, #140]	@ (8002a3c <main+0x188>)
 80029b0:	f007 fcc8 	bl	800a344 <osThreadNew>
 80029b4:	4603      	mov	r3, r0
 80029b6:	4a22      	ldr	r2, [pc, #136]	@ (8002a40 <main+0x18c>)
 80029b8:	6013      	str	r3, [r2, #0]

	/* creation of sensorTask */
	sensorTaskHandle = osThreadNew(Startsensor, NULL, &sensorTask_attributes);
 80029ba:	4a22      	ldr	r2, [pc, #136]	@ (8002a44 <main+0x190>)
 80029bc:	2100      	movs	r1, #0
 80029be:	4822      	ldr	r0, [pc, #136]	@ (8002a48 <main+0x194>)
 80029c0:	f007 fcc0 	bl	800a344 <osThreadNew>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4a21      	ldr	r2, [pc, #132]	@ (8002a4c <main+0x198>)
 80029c8:	6013      	str	r3, [r2, #0]

	/* creation of encoderTask */
	encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 80029ca:	4a21      	ldr	r2, [pc, #132]	@ (8002a50 <main+0x19c>)
 80029cc:	2100      	movs	r1, #0
 80029ce:	4821      	ldr	r0, [pc, #132]	@ (8002a54 <main+0x1a0>)
 80029d0:	f007 fcb8 	bl	800a344 <osThreadNew>
 80029d4:	4603      	mov	r3, r0
 80029d6:	4a20      	ldr	r2, [pc, #128]	@ (8002a58 <main+0x1a4>)
 80029d8:	6013      	str	r3, [r2, #0]

	/* creation of robotTask */
	robotTaskHandle = osThreadNew(startrobotTask, NULL, &robotTask_attributes);
 80029da:	4a20      	ldr	r2, [pc, #128]	@ (8002a5c <main+0x1a8>)
 80029dc:	2100      	movs	r1, #0
 80029de:	4820      	ldr	r0, [pc, #128]	@ (8002a60 <main+0x1ac>)
 80029e0:	f007 fcb0 	bl	800a344 <osThreadNew>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a64 <main+0x1b0>)
 80029e8:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80029ea:	f007 fc85 	bl	800a2f8 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80029ee:	bf00      	nop
 80029f0:	e7fd      	b.n	80029ee <main+0x13a>
 80029f2:	bf00      	nop
 80029f4:	200002e0 	.word	0x200002e0
 80029f8:	080113d4 	.word	0x080113d4
 80029fc:	40020c00 	.word	0x40020c00
 8002a00:	20000454 	.word	0x20000454
 8002a04:	2000040c 	.word	0x2000040c
 8002a08:	200005f4 	.word	0x200005f4
 8002a0c:	200004e4 	.word	0x200004e4
 8002a10:	459c4000 	.word	0x459c4000
 8002a14:	447a0000 	.word	0x447a0000
 8002a18:	00000000 	.word	0x00000000
 8002a1c:	451c4000 	.word	0x451c4000
 8002a20:	43960000 	.word	0x43960000
 8002a24:	20000594 	.word	0x20000594
 8002a28:	200005bc 	.word	0x200005bc
 8002a2c:	0801146c 	.word	0x0801146c
 8002a30:	08003711 	.word	0x08003711
 8002a34:	2000052c 	.word	0x2000052c
 8002a38:	08011490 	.word	0x08011490
 8002a3c:	08003735 	.word	0x08003735
 8002a40:	20000530 	.word	0x20000530
 8002a44:	080114b4 	.word	0x080114b4
 8002a48:	08003849 	.word	0x08003849
 8002a4c:	20000534 	.word	0x20000534
 8002a50:	080114d8 	.word	0x080114d8
 8002a54:	08003899 	.word	0x08003899
 8002a58:	20000538 	.word	0x20000538
 8002a5c:	080114fc 	.word	0x080114fc
 8002a60:	08003b51 	.word	0x08003b51
 8002a64:	2000053c 	.word	0x2000053c

08002a68 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b094      	sub	sp, #80	@ 0x50
 8002a6c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a6e:	f107 0320 	add.w	r3, r7, #32
 8002a72:	2230      	movs	r2, #48	@ 0x30
 8002a74:	2100      	movs	r1, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f00b f981 	bl	800dd7e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a7c:	f107 030c 	add.w	r3, r7, #12
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	4b22      	ldr	r3, [pc, #136]	@ (8002b1c <SystemClock_Config+0xb4>)
 8002a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a94:	4a21      	ldr	r2, [pc, #132]	@ (8002b1c <SystemClock_Config+0xb4>)
 8002a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002b1c <SystemClock_Config+0xb4>)
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	607b      	str	r3, [r7, #4]
 8002aac:	4b1c      	ldr	r3, [pc, #112]	@ (8002b20 <SystemClock_Config+0xb8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b20 <SystemClock_Config+0xb8>)
 8002ab2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	4b19      	ldr	r3, [pc, #100]	@ (8002b20 <SystemClock_Config+0xb8>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ac0:	607b      	str	r3, [r7, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002acc:	2310      	movs	r3, #16
 8002ace:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ad4:	f107 0320 	add.w	r3, r7, #32
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f003 fd4f 	bl	800657c <HAL_RCC_OscConfig>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <SystemClock_Config+0x80>
	{
		Error_Handler();
 8002ae4:	f001 f8ba 	bl	8003c5c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ae8:	230f      	movs	r3, #15
 8002aea:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002aec:	2300      	movs	r3, #0
 8002aee:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002afc:	f107 030c 	add.w	r3, r7, #12
 8002b00:	2100      	movs	r1, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f003 ffb2 	bl	8006a6c <HAL_RCC_ClockConfig>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <SystemClock_Config+0xaa>
	{
		Error_Handler();
 8002b0e:	f001 f8a5 	bl	8003c5c <Error_Handler>
	}
}
 8002b12:	bf00      	nop
 8002b14:	3750      	adds	r7, #80	@ 0x50
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40007000 	.word	0x40007000

08002b24 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8002b2a:	463b      	mov	r3, r7
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8002b36:	4b21      	ldr	r3, [pc, #132]	@ (8002bbc <MX_ADC1_Init+0x98>)
 8002b38:	4a21      	ldr	r2, [pc, #132]	@ (8002bc0 <MX_ADC1_Init+0x9c>)
 8002b3a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bbc <MX_ADC1_Init+0x98>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b42:	4b1e      	ldr	r3, [pc, #120]	@ (8002bbc <MX_ADC1_Init+0x98>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8002b48:	4b1c      	ldr	r3, [pc, #112]	@ (8002bbc <MX_ADC1_Init+0x98>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bbc <MX_ADC1_Init+0x98>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b54:	4b19      	ldr	r3, [pc, #100]	@ (8002bbc <MX_ADC1_Init+0x98>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b5c:	4b17      	ldr	r3, [pc, #92]	@ (8002bbc <MX_ADC1_Init+0x98>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b62:	4b16      	ldr	r3, [pc, #88]	@ (8002bbc <MX_ADC1_Init+0x98>)
 8002b64:	4a17      	ldr	r2, [pc, #92]	@ (8002bc4 <MX_ADC1_Init+0xa0>)
 8002b66:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b68:	4b14      	ldr	r3, [pc, #80]	@ (8002bbc <MX_ADC1_Init+0x98>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8002b6e:	4b13      	ldr	r3, [pc, #76]	@ (8002bbc <MX_ADC1_Init+0x98>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b74:	4b11      	ldr	r3, [pc, #68]	@ (8002bbc <MX_ADC1_Init+0x98>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bbc <MX_ADC1_Init+0x98>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b82:	480e      	ldr	r0, [pc, #56]	@ (8002bbc <MX_ADC1_Init+0x98>)
 8002b84:	f001 fd0a 	bl	800459c <HAL_ADC_Init>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 8002b8e:	f001 f865 	bl	8003c5c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8002b92:	2300      	movs	r3, #0
 8002b94:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8002b96:	2301      	movs	r3, #1
 8002b98:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b9e:	463b      	mov	r3, r7
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4806      	ldr	r0, [pc, #24]	@ (8002bbc <MX_ADC1_Init+0x98>)
 8002ba4:	f001 fedc 	bl	8004960 <HAL_ADC_ConfigChannel>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_ADC1_Init+0x8e>
	{
		Error_Handler();
 8002bae:	f001 f855 	bl	8003c5c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000250 	.word	0x20000250
 8002bc0:	40012000 	.word	0x40012000
 8002bc4:	0f000001 	.word	0x0f000001

08002bc8 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8002bce:	463b      	mov	r3, r7
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC2_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 8002bda:	4b21      	ldr	r3, [pc, #132]	@ (8002c60 <MX_ADC2_Init+0x98>)
 8002bdc:	4a21      	ldr	r2, [pc, #132]	@ (8002c64 <MX_ADC2_Init+0x9c>)
 8002bde:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002be0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c60 <MX_ADC2_Init+0x98>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002be6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c60 <MX_ADC2_Init+0x98>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 8002bec:	4b1c      	ldr	r3, [pc, #112]	@ (8002c60 <MX_ADC2_Init+0x98>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8002bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c60 <MX_ADC2_Init+0x98>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002bf8:	4b19      	ldr	r3, [pc, #100]	@ (8002c60 <MX_ADC2_Init+0x98>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c00:	4b17      	ldr	r3, [pc, #92]	@ (8002c60 <MX_ADC2_Init+0x98>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c06:	4b16      	ldr	r3, [pc, #88]	@ (8002c60 <MX_ADC2_Init+0x98>)
 8002c08:	4a17      	ldr	r2, [pc, #92]	@ (8002c68 <MX_ADC2_Init+0xa0>)
 8002c0a:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c0c:	4b14      	ldr	r3, [pc, #80]	@ (8002c60 <MX_ADC2_Init+0x98>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8002c12:	4b13      	ldr	r3, [pc, #76]	@ (8002c60 <MX_ADC2_Init+0x98>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8002c18:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <MX_ADC2_Init+0x98>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c20:	4b0f      	ldr	r3, [pc, #60]	@ (8002c60 <MX_ADC2_Init+0x98>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002c26:	480e      	ldr	r0, [pc, #56]	@ (8002c60 <MX_ADC2_Init+0x98>)
 8002c28:	f001 fcb8 	bl	800459c <HAL_ADC_Init>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_ADC2_Init+0x6e>
	{
		Error_Handler();
 8002c32:	f001 f813 	bl	8003c5c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8002c36:	2301      	movs	r3, #1
 8002c38:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002c42:	463b      	mov	r3, r7
 8002c44:	4619      	mov	r1, r3
 8002c46:	4806      	ldr	r0, [pc, #24]	@ (8002c60 <MX_ADC2_Init+0x98>)
 8002c48:	f001 fe8a 	bl	8004960 <HAL_ADC_ConfigChannel>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_ADC2_Init+0x8e>
	{
		Error_Handler();
 8002c52:	f001 f803 	bl	8003c5c <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8002c56:	bf00      	nop
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000298 	.word	0x20000298
 8002c64:	40012100 	.word	0x40012100
 8002c68:	0f000001 	.word	0x0f000001

08002c6c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002c70:	4b12      	ldr	r3, [pc, #72]	@ (8002cbc <MX_I2C1_Init+0x50>)
 8002c72:	4a13      	ldr	r2, [pc, #76]	@ (8002cc0 <MX_I2C1_Init+0x54>)
 8002c74:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8002c76:	4b11      	ldr	r3, [pc, #68]	@ (8002cbc <MX_I2C1_Init+0x50>)
 8002c78:	4a12      	ldr	r2, [pc, #72]	@ (8002cc4 <MX_I2C1_Init+0x58>)
 8002c7a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002cbc <MX_I2C1_Init+0x50>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002c82:	4b0e      	ldr	r3, [pc, #56]	@ (8002cbc <MX_I2C1_Init+0x50>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c88:	4b0c      	ldr	r3, [pc, #48]	@ (8002cbc <MX_I2C1_Init+0x50>)
 8002c8a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002c8e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c90:	4b0a      	ldr	r3, [pc, #40]	@ (8002cbc <MX_I2C1_Init+0x50>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002c96:	4b09      	ldr	r3, [pc, #36]	@ (8002cbc <MX_I2C1_Init+0x50>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c9c:	4b07      	ldr	r3, [pc, #28]	@ (8002cbc <MX_I2C1_Init+0x50>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ca2:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <MX_I2C1_Init+0x50>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ca8:	4804      	ldr	r0, [pc, #16]	@ (8002cbc <MX_I2C1_Init+0x50>)
 8002caa:	f002 fc1b 	bl	80054e4 <HAL_I2C_Init>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8002cb4:	f000 ffd2 	bl	8003c5c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002cb8:	bf00      	nop
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	200002e0 	.word	0x200002e0
 8002cc0:	40005400 	.word	0x40005400
 8002cc4:	000186a0 	.word	0x000186a0

08002cc8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b096      	sub	sp, #88	@ 0x58
 8002ccc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	605a      	str	r2, [r3, #4]
 8002cd8:	609a      	str	r2, [r3, #8]
 8002cda:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cdc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	609a      	str	r2, [r3, #8]
 8002cf2:	60da      	str	r2, [r3, #12]
 8002cf4:	611a      	str	r2, [r3, #16]
 8002cf6:	615a      	str	r2, [r3, #20]
 8002cf8:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002cfa:	1d3b      	adds	r3, r7, #4
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f00b f83c 	bl	800dd7e <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002d06:	4b3d      	ldr	r3, [pc, #244]	@ (8002dfc <MX_TIM1_Init+0x134>)
 8002d08:	4a3d      	ldr	r2, [pc, #244]	@ (8002e00 <MX_TIM1_Init+0x138>)
 8002d0a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 160;
 8002d0c:	4b3b      	ldr	r3, [pc, #236]	@ (8002dfc <MX_TIM1_Init+0x134>)
 8002d0e:	22a0      	movs	r2, #160	@ 0xa0
 8002d10:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d12:	4b3a      	ldr	r3, [pc, #232]	@ (8002dfc <MX_TIM1_Init+0x134>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8002d18:	4b38      	ldr	r3, [pc, #224]	@ (8002dfc <MX_TIM1_Init+0x134>)
 8002d1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d1e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d20:	4b36      	ldr	r3, [pc, #216]	@ (8002dfc <MX_TIM1_Init+0x134>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002d26:	4b35      	ldr	r3, [pc, #212]	@ (8002dfc <MX_TIM1_Init+0x134>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d2c:	4b33      	ldr	r3, [pc, #204]	@ (8002dfc <MX_TIM1_Init+0x134>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d32:	4832      	ldr	r0, [pc, #200]	@ (8002dfc <MX_TIM1_Init+0x134>)
 8002d34:	f004 f87a 	bl	8006e2c <HAL_TIM_Base_Init>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_TIM1_Init+0x7a>
	{
		Error_Handler();
 8002d3e:	f000 ff8d 	bl	8003c5c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d46:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d48:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	482b      	ldr	r0, [pc, #172]	@ (8002dfc <MX_TIM1_Init+0x134>)
 8002d50:	f004 ff4a 	bl	8007be8 <HAL_TIM_ConfigClockSource>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <MX_TIM1_Init+0x96>
	{
		Error_Handler();
 8002d5a:	f000 ff7f 	bl	8003c5c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d5e:	4827      	ldr	r0, [pc, #156]	@ (8002dfc <MX_TIM1_Init+0x134>)
 8002d60:	f004 f91c 	bl	8006f9c <HAL_TIM_PWM_Init>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <MX_TIM1_Init+0xa6>
	{
		Error_Handler();
 8002d6a:	f000 ff77 	bl	8003c5c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d76:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	481f      	ldr	r0, [pc, #124]	@ (8002dfc <MX_TIM1_Init+0x134>)
 8002d7e:	f005 fcad 	bl	80086dc <HAL_TIMEx_MasterConfigSynchronization>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_TIM1_Init+0xc4>
	{
		Error_Handler();
 8002d88:	f000 ff68 	bl	8003c5c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d8c:	2360      	movs	r3, #96	@ 0x60
 8002d8e:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d94:	2300      	movs	r3, #0
 8002d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002da0:	2300      	movs	r3, #0
 8002da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002da4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002da8:	220c      	movs	r2, #12
 8002daa:	4619      	mov	r1, r3
 8002dac:	4813      	ldr	r0, [pc, #76]	@ (8002dfc <MX_TIM1_Init+0x134>)
 8002dae:	f004 fe59 	bl	8007a64 <HAL_TIM_PWM_ConfigChannel>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <MX_TIM1_Init+0xf4>
	{
		Error_Handler();
 8002db8:	f000 ff50 	bl	8003c5c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002dd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002dd4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002dda:	1d3b      	adds	r3, r7, #4
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4807      	ldr	r0, [pc, #28]	@ (8002dfc <MX_TIM1_Init+0x134>)
 8002de0:	f005 fcf8 	bl	80087d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_TIM1_Init+0x126>
	{
		Error_Handler();
 8002dea:	f000 ff37 	bl	8003c5c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8002dee:	4803      	ldr	r0, [pc, #12]	@ (8002dfc <MX_TIM1_Init+0x134>)
 8002df0:	f001 f96e 	bl	80040d0 <HAL_TIM_MspPostInit>

}
 8002df4:	bf00      	nop
 8002df6:	3758      	adds	r7, #88	@ 0x58
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000334 	.word	0x20000334
 8002e00:	40010000 	.word	0x40010000

08002e04 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08c      	sub	sp, #48	@ 0x30
 8002e08:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8002e0a:	f107 030c 	add.w	r3, r7, #12
 8002e0e:	2224      	movs	r2, #36	@ 0x24
 8002e10:	2100      	movs	r1, #0
 8002e12:	4618      	mov	r0, r3
 8002e14:	f00a ffb3 	bl	800dd7e <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e18:	1d3b      	adds	r3, r7, #4
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002e20:	4b21      	ldr	r3, [pc, #132]	@ (8002ea8 <MX_TIM2_Init+0xa4>)
 8002e22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e26:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002e28:	4b1f      	ldr	r3, [pc, #124]	@ (8002ea8 <MX_TIM2_Init+0xa4>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea8 <MX_TIM2_Init+0xa4>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8002e34:	4b1c      	ldr	r3, [pc, #112]	@ (8002ea8 <MX_TIM2_Init+0xa4>)
 8002e36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e3a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea8 <MX_TIM2_Init+0xa4>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e42:	4b19      	ldr	r3, [pc, #100]	@ (8002ea8 <MX_TIM2_Init+0xa4>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e50:	2301      	movs	r3, #1
 8002e52:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e54:	2300      	movs	r3, #0
 8002e56:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 8002e58:	230a      	movs	r3, #10
 8002e5a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e60:	2301      	movs	r3, #1
 8002e62:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e64:	2300      	movs	r3, #0
 8002e66:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 10;
 8002e68:	230a      	movs	r3, #10
 8002e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002e6c:	f107 030c 	add.w	r3, r7, #12
 8002e70:	4619      	mov	r1, r3
 8002e72:	480d      	ldr	r0, [pc, #52]	@ (8002ea8 <MX_TIM2_Init+0xa4>)
 8002e74:	f004 fb36 	bl	80074e4 <HAL_TIM_Encoder_Init>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_TIM2_Init+0x7e>
	{
		Error_Handler();
 8002e7e:	f000 feed 	bl	8003c5c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e82:	2300      	movs	r3, #0
 8002e84:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e8a:	1d3b      	adds	r3, r7, #4
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4806      	ldr	r0, [pc, #24]	@ (8002ea8 <MX_TIM2_Init+0xa4>)
 8002e90:	f005 fc24 	bl	80086dc <HAL_TIMEx_MasterConfigSynchronization>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_TIM2_Init+0x9a>
	{
		Error_Handler();
 8002e9a:	f000 fedf 	bl	8003c5c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002e9e:	bf00      	nop
 8002ea0:	3730      	adds	r7, #48	@ 0x30
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	2000037c 	.word	0x2000037c

08002eac <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08c      	sub	sp, #48	@ 0x30
 8002eb0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8002eb2:	f107 030c 	add.w	r3, r7, #12
 8002eb6:	2224      	movs	r2, #36	@ 0x24
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f00a ff5f 	bl	800dd7e <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec0:	1d3b      	adds	r3, r7, #4
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002ec8:	4b20      	ldr	r3, [pc, #128]	@ (8002f4c <MX_TIM3_Init+0xa0>)
 8002eca:	4a21      	ldr	r2, [pc, #132]	@ (8002f50 <MX_TIM3_Init+0xa4>)
 8002ecc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8002ece:	4b1f      	ldr	r3, [pc, #124]	@ (8002f4c <MX_TIM3_Init+0xa0>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f4c <MX_TIM3_Init+0xa0>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8002eda:	4b1c      	ldr	r3, [pc, #112]	@ (8002f4c <MX_TIM3_Init+0xa0>)
 8002edc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ee0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f4c <MX_TIM3_Init+0xa0>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ee8:	4b18      	ldr	r3, [pc, #96]	@ (8002f4c <MX_TIM3_Init+0xa0>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 8002efe:	230a      	movs	r3, #10
 8002f00:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002f02:	2300      	movs	r3, #0
 8002f04:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002f06:	2301      	movs	r3, #1
 8002f08:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 10;
 8002f0e:	230a      	movs	r3, #10
 8002f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002f12:	f107 030c 	add.w	r3, r7, #12
 8002f16:	4619      	mov	r1, r3
 8002f18:	480c      	ldr	r0, [pc, #48]	@ (8002f4c <MX_TIM3_Init+0xa0>)
 8002f1a:	f004 fae3 	bl	80074e4 <HAL_TIM_Encoder_Init>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_TIM3_Init+0x7c>
	{
		Error_Handler();
 8002f24:	f000 fe9a 	bl	8003c5c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f30:	1d3b      	adds	r3, r7, #4
 8002f32:	4619      	mov	r1, r3
 8002f34:	4805      	ldr	r0, [pc, #20]	@ (8002f4c <MX_TIM3_Init+0xa0>)
 8002f36:	f005 fbd1 	bl	80086dc <HAL_TIMEx_MasterConfigSynchronization>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <MX_TIM3_Init+0x98>
	{
		Error_Handler();
 8002f40:	f000 fe8c 	bl	8003c5c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8002f44:	bf00      	nop
 8002f46:	3730      	adds	r7, #48	@ 0x30
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	200003c4 	.word	0x200003c4
 8002f50:	40000400 	.word	0x40000400

08002f54 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08a      	sub	sp, #40	@ 0x28
 8002f58:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f5a:	f107 0318 	add.w	r3, r7, #24
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	605a      	str	r2, [r3, #4]
 8002f64:	609a      	str	r2, [r3, #8]
 8002f66:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f68:	f107 0310 	add.w	r3, r7, #16
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8002f72:	463b      	mov	r3, r7
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002f7e:	4b2b      	ldr	r3, [pc, #172]	@ (800302c <MX_TIM4_Init+0xd8>)
 8002f80:	4a2b      	ldr	r2, [pc, #172]	@ (8003030 <MX_TIM4_Init+0xdc>)
 8002f82:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 16-1;
 8002f84:	4b29      	ldr	r3, [pc, #164]	@ (800302c <MX_TIM4_Init+0xd8>)
 8002f86:	220f      	movs	r2, #15
 8002f88:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f8a:	4b28      	ldr	r3, [pc, #160]	@ (800302c <MX_TIM4_Init+0xd8>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8002f90:	4b26      	ldr	r3, [pc, #152]	@ (800302c <MX_TIM4_Init+0xd8>)
 8002f92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f96:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f98:	4b24      	ldr	r3, [pc, #144]	@ (800302c <MX_TIM4_Init+0xd8>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f9e:	4b23      	ldr	r3, [pc, #140]	@ (800302c <MX_TIM4_Init+0xd8>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002fa4:	4821      	ldr	r0, [pc, #132]	@ (800302c <MX_TIM4_Init+0xd8>)
 8002fa6:	f003 ff41 	bl	8006e2c <HAL_TIM_Base_Init>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <MX_TIM4_Init+0x60>
	{
		Error_Handler();
 8002fb0:	f000 fe54 	bl	8003c5c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fb8:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002fba:	f107 0318 	add.w	r3, r7, #24
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	481a      	ldr	r0, [pc, #104]	@ (800302c <MX_TIM4_Init+0xd8>)
 8002fc2:	f004 fe11 	bl	8007be8 <HAL_TIM_ConfigClockSource>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <MX_TIM4_Init+0x7c>
	{
		Error_Handler();
 8002fcc:	f000 fe46 	bl	8003c5c <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8002fd0:	4816      	ldr	r0, [pc, #88]	@ (800302c <MX_TIM4_Init+0xd8>)
 8002fd2:	f004 f905 	bl	80071e0 <HAL_TIM_IC_Init>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_TIM4_Init+0x8c>
	{
		Error_Handler();
 8002fdc:	f000 fe3e 	bl	8003c5c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002fe8:	f107 0310 	add.w	r3, r7, #16
 8002fec:	4619      	mov	r1, r3
 8002fee:	480f      	ldr	r0, [pc, #60]	@ (800302c <MX_TIM4_Init+0xd8>)
 8002ff0:	f005 fb74 	bl	80086dc <HAL_TIMEx_MasterConfigSynchronization>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <MX_TIM4_Init+0xaa>
	{
		Error_Handler();
 8002ffa:	f000 fe2f 	bl	8003c5c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002ffe:	230a      	movs	r3, #10
 8003000:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003002:	2301      	movs	r3, #1
 8003004:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003006:	2300      	movs	r3, #0
 8003008:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800300e:	463b      	mov	r3, r7
 8003010:	2200      	movs	r2, #0
 8003012:	4619      	mov	r1, r3
 8003014:	4805      	ldr	r0, [pc, #20]	@ (800302c <MX_TIM4_Init+0xd8>)
 8003016:	f004 fc89 	bl	800792c <HAL_TIM_IC_ConfigChannel>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_TIM4_Init+0xd0>
	{
		Error_Handler();
 8003020:	f000 fe1c 	bl	8003c5c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8003024:	bf00      	nop
 8003026:	3728      	adds	r7, #40	@ 0x28
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	2000040c 	.word	0x2000040c
 8003030:	40000800 	.word	0x40000800

08003034 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800303a:	463b      	mov	r3, r7
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8003042:	4b15      	ldr	r3, [pc, #84]	@ (8003098 <MX_TIM6_Init+0x64>)
 8003044:	4a15      	ldr	r2, [pc, #84]	@ (800309c <MX_TIM6_Init+0x68>)
 8003046:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 16-1;
 8003048:	4b13      	ldr	r3, [pc, #76]	@ (8003098 <MX_TIM6_Init+0x64>)
 800304a:	220f      	movs	r2, #15
 800304c:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800304e:	4b12      	ldr	r3, [pc, #72]	@ (8003098 <MX_TIM6_Init+0x64>)
 8003050:	2200      	movs	r2, #0
 8003052:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 65535;
 8003054:	4b10      	ldr	r3, [pc, #64]	@ (8003098 <MX_TIM6_Init+0x64>)
 8003056:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800305a:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800305c:	4b0e      	ldr	r3, [pc, #56]	@ (8003098 <MX_TIM6_Init+0x64>)
 800305e:	2200      	movs	r2, #0
 8003060:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003062:	480d      	ldr	r0, [pc, #52]	@ (8003098 <MX_TIM6_Init+0x64>)
 8003064:	f003 fee2 	bl	8006e2c <HAL_TIM_Base_Init>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <MX_TIM6_Init+0x3e>
	{
		Error_Handler();
 800306e:	f000 fdf5 	bl	8003c5c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003072:	2300      	movs	r3, #0
 8003074:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003076:	2300      	movs	r3, #0
 8003078:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800307a:	463b      	mov	r3, r7
 800307c:	4619      	mov	r1, r3
 800307e:	4806      	ldr	r0, [pc, #24]	@ (8003098 <MX_TIM6_Init+0x64>)
 8003080:	f005 fb2c 	bl	80086dc <HAL_TIMEx_MasterConfigSynchronization>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <MX_TIM6_Init+0x5a>
	{
		Error_Handler();
 800308a:	f000 fde7 	bl	8003c5c <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20000454 	.word	0x20000454
 800309c:	40001000 	.word	0x40001000

080030a0 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b096      	sub	sp, #88	@ 0x58
 80030a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030a6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80030aa:	2200      	movs	r2, #0
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	605a      	str	r2, [r3, #4]
 80030b0:	609a      	str	r2, [r3, #8]
 80030b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80030be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]
 80030c8:	609a      	str	r2, [r3, #8]
 80030ca:	60da      	str	r2, [r3, #12]
 80030cc:	611a      	str	r2, [r3, #16]
 80030ce:	615a      	str	r2, [r3, #20]
 80030d0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80030d2:	1d3b      	adds	r3, r7, #4
 80030d4:	2220      	movs	r2, #32
 80030d6:	2100      	movs	r1, #0
 80030d8:	4618      	mov	r0, r3
 80030da:	f00a fe50 	bl	800dd7e <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 80030de:	4b43      	ldr	r3, [pc, #268]	@ (80031ec <MX_TIM8_Init+0x14c>)
 80030e0:	4a43      	ldr	r2, [pc, #268]	@ (80031f0 <MX_TIM8_Init+0x150>)
 80030e2:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 80030e4:	4b41      	ldr	r3, [pc, #260]	@ (80031ec <MX_TIM8_Init+0x14c>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030ea:	4b40      	ldr	r3, [pc, #256]	@ (80031ec <MX_TIM8_Init+0x14c>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 7199;
 80030f0:	4b3e      	ldr	r3, [pc, #248]	@ (80031ec <MX_TIM8_Init+0x14c>)
 80030f2:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80030f6:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030f8:	4b3c      	ldr	r3, [pc, #240]	@ (80031ec <MX_TIM8_Init+0x14c>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 80030fe:	4b3b      	ldr	r3, [pc, #236]	@ (80031ec <MX_TIM8_Init+0x14c>)
 8003100:	2200      	movs	r2, #0
 8003102:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003104:	4b39      	ldr	r3, [pc, #228]	@ (80031ec <MX_TIM8_Init+0x14c>)
 8003106:	2200      	movs	r2, #0
 8003108:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800310a:	4838      	ldr	r0, [pc, #224]	@ (80031ec <MX_TIM8_Init+0x14c>)
 800310c:	f003 fe8e 	bl	8006e2c <HAL_TIM_Base_Init>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <MX_TIM8_Init+0x7a>
	{
		Error_Handler();
 8003116:	f000 fda1 	bl	8003c5c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800311a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800311e:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003120:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003124:	4619      	mov	r1, r3
 8003126:	4831      	ldr	r0, [pc, #196]	@ (80031ec <MX_TIM8_Init+0x14c>)
 8003128:	f004 fd5e 	bl	8007be8 <HAL_TIM_ConfigClockSource>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <MX_TIM8_Init+0x96>
	{
		Error_Handler();
 8003132:	f000 fd93 	bl	8003c5c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003136:	482d      	ldr	r0, [pc, #180]	@ (80031ec <MX_TIM8_Init+0x14c>)
 8003138:	f003 ff30 	bl	8006f9c <HAL_TIM_PWM_Init>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <MX_TIM8_Init+0xa6>
	{
		Error_Handler();
 8003142:	f000 fd8b 	bl	8003c5c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003146:	2300      	movs	r3, #0
 8003148:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800314a:	2300      	movs	r3, #0
 800314c:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800314e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003152:	4619      	mov	r1, r3
 8003154:	4825      	ldr	r0, [pc, #148]	@ (80031ec <MX_TIM8_Init+0x14c>)
 8003156:	f005 fac1 	bl	80086dc <HAL_TIMEx_MasterConfigSynchronization>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <MX_TIM8_Init+0xc4>
	{
		Error_Handler();
 8003160:	f000 fd7c 	bl	8003c5c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003164:	2360      	movs	r3, #96	@ 0x60
 8003166:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800316c:	2300      	movs	r3, #0
 800316e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003170:	2300      	movs	r3, #0
 8003172:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003174:	2300      	movs	r3, #0
 8003176:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003178:	2300      	movs	r3, #0
 800317a:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800317c:	2300      	movs	r3, #0
 800317e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003180:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003184:	2200      	movs	r2, #0
 8003186:	4619      	mov	r1, r3
 8003188:	4818      	ldr	r0, [pc, #96]	@ (80031ec <MX_TIM8_Init+0x14c>)
 800318a:	f004 fc6b 	bl	8007a64 <HAL_TIM_PWM_ConfigChannel>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <MX_TIM8_Init+0xf8>
	{
		Error_Handler();
 8003194:	f000 fd62 	bl	8003c5c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003198:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800319c:	2204      	movs	r2, #4
 800319e:	4619      	mov	r1, r3
 80031a0:	4812      	ldr	r0, [pc, #72]	@ (80031ec <MX_TIM8_Init+0x14c>)
 80031a2:	f004 fc5f 	bl	8007a64 <HAL_TIM_PWM_ConfigChannel>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <MX_TIM8_Init+0x110>
	{
		Error_Handler();
 80031ac:	f000 fd56 	bl	8003c5c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80031b0:	2300      	movs	r3, #0
 80031b2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80031c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031c8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80031ca:	2300      	movs	r3, #0
 80031cc:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	4619      	mov	r1, r3
 80031d2:	4806      	ldr	r0, [pc, #24]	@ (80031ec <MX_TIM8_Init+0x14c>)
 80031d4:	f005 fafe 	bl	80087d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <MX_TIM8_Init+0x142>
	{
		Error_Handler();
 80031de:	f000 fd3d 	bl	8003c5c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 80031e2:	bf00      	nop
 80031e4:	3758      	adds	r7, #88	@ 0x58
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	2000049c 	.word	0x2000049c
 80031f0:	40010400 	.word	0x40010400

080031f4 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80031f8:	4b11      	ldr	r3, [pc, #68]	@ (8003240 <MX_USART3_UART_Init+0x4c>)
 80031fa:	4a12      	ldr	r2, [pc, #72]	@ (8003244 <MX_USART3_UART_Init+0x50>)
 80031fc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80031fe:	4b10      	ldr	r3, [pc, #64]	@ (8003240 <MX_USART3_UART_Init+0x4c>)
 8003200:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003204:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003206:	4b0e      	ldr	r3, [pc, #56]	@ (8003240 <MX_USART3_UART_Init+0x4c>)
 8003208:	2200      	movs	r2, #0
 800320a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800320c:	4b0c      	ldr	r3, [pc, #48]	@ (8003240 <MX_USART3_UART_Init+0x4c>)
 800320e:	2200      	movs	r2, #0
 8003210:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8003212:	4b0b      	ldr	r3, [pc, #44]	@ (8003240 <MX_USART3_UART_Init+0x4c>)
 8003214:	2200      	movs	r2, #0
 8003216:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8003218:	4b09      	ldr	r3, [pc, #36]	@ (8003240 <MX_USART3_UART_Init+0x4c>)
 800321a:	220c      	movs	r2, #12
 800321c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800321e:	4b08      	ldr	r3, [pc, #32]	@ (8003240 <MX_USART3_UART_Init+0x4c>)
 8003220:	2200      	movs	r2, #0
 8003222:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003224:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <MX_USART3_UART_Init+0x4c>)
 8003226:	2200      	movs	r2, #0
 8003228:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800322a:	4805      	ldr	r0, [pc, #20]	@ (8003240 <MX_USART3_UART_Init+0x4c>)
 800322c:	f005 fb38 	bl	80088a0 <HAL_UART_Init>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8003236:	f000 fd11 	bl	8003c5c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	200004e4 	.word	0x200004e4
 8003244:	40004800 	.word	0x40004800

08003248 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08a      	sub	sp, #40	@ 0x28
 800324c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800324e:	f107 0314 	add.w	r3, r7, #20
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	609a      	str	r2, [r3, #8]
 800325a:	60da      	str	r2, [r3, #12]
 800325c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	4b49      	ldr	r3, [pc, #292]	@ (8003388 <MX_GPIO_Init+0x140>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	4a48      	ldr	r2, [pc, #288]	@ (8003388 <MX_GPIO_Init+0x140>)
 8003268:	f043 0310 	orr.w	r3, r3, #16
 800326c:	6313      	str	r3, [r2, #48]	@ 0x30
 800326e:	4b46      	ldr	r3, [pc, #280]	@ (8003388 <MX_GPIO_Init+0x140>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	4b42      	ldr	r3, [pc, #264]	@ (8003388 <MX_GPIO_Init+0x140>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	4a41      	ldr	r2, [pc, #260]	@ (8003388 <MX_GPIO_Init+0x140>)
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	6313      	str	r3, [r2, #48]	@ 0x30
 800328a:	4b3f      	ldr	r3, [pc, #252]	@ (8003388 <MX_GPIO_Init+0x140>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	4b3b      	ldr	r3, [pc, #236]	@ (8003388 <MX_GPIO_Init+0x140>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329e:	4a3a      	ldr	r2, [pc, #232]	@ (8003388 <MX_GPIO_Init+0x140>)
 80032a0:	f043 0308 	orr.w	r3, r3, #8
 80032a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032a6:	4b38      	ldr	r3, [pc, #224]	@ (8003388 <MX_GPIO_Init+0x140>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	607b      	str	r3, [r7, #4]
 80032b6:	4b34      	ldr	r3, [pc, #208]	@ (8003388 <MX_GPIO_Init+0x140>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ba:	4a33      	ldr	r2, [pc, #204]	@ (8003388 <MX_GPIO_Init+0x140>)
 80032bc:	f043 0304 	orr.w	r3, r3, #4
 80032c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032c2:	4b31      	ldr	r3, [pc, #196]	@ (8003388 <MX_GPIO_Init+0x140>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	607b      	str	r3, [r7, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80032ce:	2300      	movs	r3, #0
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	4b2d      	ldr	r3, [pc, #180]	@ (8003388 <MX_GPIO_Init+0x140>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003388 <MX_GPIO_Init+0x140>)
 80032d8:	f043 0302 	orr.w	r3, r3, #2
 80032dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032de:	4b2a      	ldr	r3, [pc, #168]	@ (8003388 <MX_GPIO_Init+0x140>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80032ea:	2200      	movs	r2, #0
 80032ec:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 80032f0:	4826      	ldr	r0, [pc, #152]	@ (800338c <MX_GPIO_Init+0x144>)
 80032f2:	f002 f8ab 	bl	800544c <HAL_GPIO_WritePin>
			|TRIG_Pin|LED3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80032f6:	2200      	movs	r2, #0
 80032f8:	213c      	movs	r1, #60	@ 0x3c
 80032fa:	4825      	ldr	r0, [pc, #148]	@ (8003390 <MX_GPIO_Init+0x148>)
 80032fc:	f002 f8a6 	bl	800544c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           TRIG_Pin LED3_Pin */
	GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8003300:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003304:	617b      	str	r3, [r7, #20]
			|TRIG_Pin|LED3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003306:	2301      	movs	r3, #1
 8003308:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330e:	2300      	movs	r3, #0
 8003310:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003312:	f107 0314 	add.w	r3, r7, #20
 8003316:	4619      	mov	r1, r3
 8003318:	481c      	ldr	r0, [pc, #112]	@ (800338c <MX_GPIO_Init+0x144>)
 800331a:	f001 fee3 	bl	80050e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
	GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 800331e:	233c      	movs	r3, #60	@ 0x3c
 8003320:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003322:	2301      	movs	r3, #1
 8003324:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800332a:	2302      	movs	r3, #2
 800332c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800332e:	f107 0314 	add.w	r3, r7, #20
 8003332:	4619      	mov	r1, r3
 8003334:	4816      	ldr	r0, [pc, #88]	@ (8003390 <MX_GPIO_Init+0x148>)
 8003336:	f001 fed5 	bl	80050e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 800333a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800333e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003340:	2300      	movs	r3, #0
 8003342:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003344:	2300      	movs	r3, #0
 8003346:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003348:	f107 0314 	add.w	r3, r7, #20
 800334c:	4619      	mov	r1, r3
 800334e:	4811      	ldr	r0, [pc, #68]	@ (8003394 <MX_GPIO_Init+0x14c>)
 8003350:	f001 fec8 	bl	80050e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : SWITCH_Pin */
	GPIO_InitStruct.Pin = SWITCH_Pin;
 8003354:	2301      	movs	r3, #1
 8003356:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003358:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800335c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 8003362:	f107 0314 	add.w	r3, r7, #20
 8003366:	4619      	mov	r1, r3
 8003368:	4808      	ldr	r0, [pc, #32]	@ (800338c <MX_GPIO_Init+0x144>)
 800336a:	f001 febb 	bl	80050e4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800336e:	2200      	movs	r2, #0
 8003370:	2105      	movs	r1, #5
 8003372:	2006      	movs	r0, #6
 8003374:	f001 fded 	bl	8004f52 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003378:	2006      	movs	r0, #6
 800337a:	f001 fe06 	bl	8004f8a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800337e:	bf00      	nop
 8003380:	3728      	adds	r7, #40	@ 0x28
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800
 800338c:	40021000 	.word	0x40021000
 8003390:	40020000 	.word	0x40020000
 8003394:	40020c00 	.word	0x40020c00

08003398 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//Interrupt Serial callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af02      	add	r7, sp, #8
 800339e:	6078      	str	r0, [r7, #4]
	//prevent unused argument
	UNUSED(huart);
	snprintf(buf,sizeof(buf),"%5.2f",g_distanceUS);
 80033a0:	4b1a      	ldr	r3, [pc, #104]	@ (800340c <HAL_UART_RxCpltCallback+0x74>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fd f8cf 	bl	8000548 <__aeabi_f2d>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	e9cd 2300 	strd	r2, r3, [sp]
 80033b2:	4a17      	ldr	r2, [pc, #92]	@ (8003410 <HAL_UART_RxCpltCallback+0x78>)
 80033b4:	2107      	movs	r1, #7
 80033b6:	4817      	ldr	r0, [pc, #92]	@ (8003414 <HAL_UART_RxCpltCallback+0x7c>)
 80033b8:	f00a fc4a 	bl	800dc50 <sniprintf>
	sprintf(buf, "%s\r\n", buf);
 80033bc:	4a15      	ldr	r2, [pc, #84]	@ (8003414 <HAL_UART_RxCpltCallback+0x7c>)
 80033be:	4916      	ldr	r1, [pc, #88]	@ (8003418 <HAL_UART_RxCpltCallback+0x80>)
 80033c0:	4814      	ldr	r0, [pc, #80]	@ (8003414 <HAL_UART_RxCpltCallback+0x7c>)
 80033c2:	f00a fc79 	bl	800dcb8 <siprintf>
	if (strncmp(aRxBuffer, "RUSD",4) == 0)
 80033c6:	2204      	movs	r2, #4
 80033c8:	4914      	ldr	r1, [pc, #80]	@ (800341c <HAL_UART_RxCpltCallback+0x84>)
 80033ca:	4815      	ldr	r0, [pc, #84]	@ (8003420 <HAL_UART_RxCpltCallback+0x88>)
 80033cc:	f00a fcdf 	bl	800dd8e <strncmp>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <HAL_UART_RxCpltCallback+0x4c>
	{
		HAL_UART_Transmit(&huart3, (uint8_t*)buf,7,0XFFFF);
 80033d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033da:	2207      	movs	r2, #7
 80033dc:	490d      	ldr	r1, [pc, #52]	@ (8003414 <HAL_UART_RxCpltCallback+0x7c>)
 80033de:	4811      	ldr	r0, [pc, #68]	@ (8003424 <HAL_UART_RxCpltCallback+0x8c>)
 80033e0:	f005 faae 	bl	8008940 <HAL_UART_Transmit>
	}
	//HAL_UART_Transmit(&huart3,(uint8_t *)aRxBuffer,4,0xFFFF);
	if(flagReceived !=1){
 80033e4:	4b10      	ldr	r3, [pc, #64]	@ (8003428 <HAL_UART_RxCpltCallback+0x90>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d00b      	beq.n	8003404 <HAL_UART_RxCpltCallback+0x6c>
		flagReceived=1;
 80033ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003428 <HAL_UART_RxCpltCallback+0x90>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	601a      	str	r2, [r3, #0]
		distanceTraveled=0;
 80033f2:	4b0e      	ldr	r3, [pc, #56]	@ (800342c <HAL_UART_RxCpltCallback+0x94>)
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3,(uint8_t *)aRxBuffer,RECEIVE_BUFFER_SIZE);
 80033fa:	2204      	movs	r2, #4
 80033fc:	4908      	ldr	r1, [pc, #32]	@ (8003420 <HAL_UART_RxCpltCallback+0x88>)
 80033fe:	4809      	ldr	r0, [pc, #36]	@ (8003424 <HAL_UART_RxCpltCallback+0x8c>)
 8003400:	f005 fb29 	bl	8008a56 <HAL_UART_Receive_IT>

	}
	// servo_pwm  = atoi(aRxBuffer);
	//memset(aRxBuffer,0,sizeof(aRxBuffer));

}
 8003404:	bf00      	nop
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	2000054c 	.word	0x2000054c
 8003410:	080113e4 	.word	0x080113e4
 8003414:	200005f8 	.word	0x200005f8
 8003418:	080113ec 	.word	0x080113ec
 800341c:	080113f4 	.word	0x080113f4
 8003420:	200005f4 	.word	0x200005f4
 8003424:	200004e4 	.word	0x200004e4
 8003428:	20000234 	.word	0x20000234
 800342c:	20000228 	.word	0x20000228

08003430 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
	//timer 3 for the ultrasonic echo
	if(htim==&htim4)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a41      	ldr	r2, [pc, #260]	@ (8003540 <HAL_TIM_IC_CaptureCallback+0x110>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d174      	bne.n	800352a <HAL_TIM_IC_CaptureCallback+0xfa>
	{
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12)==1)//rising edge
 8003440:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003444:	483f      	ldr	r0, [pc, #252]	@ (8003544 <HAL_TIM_IC_CaptureCallback+0x114>)
 8003446:	f001 ffe9 	bl	800541c <HAL_GPIO_ReadPin>
 800344a:	4603      	mov	r3, r0
 800344c:	2b01      	cmp	r3, #1
 800344e:	d108      	bne.n	8003462 <HAL_TIM_IC_CaptureCallback+0x32>
		{
			tc1=HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8003450:	2100      	movs	r1, #0
 8003452:	483b      	ldr	r0, [pc, #236]	@ (8003540 <HAL_TIM_IC_CaptureCallback+0x110>)
 8003454:	f004 fc90 	bl	8007d78 <HAL_TIM_ReadCapturedValue>
 8003458:	4603      	mov	r3, r0
 800345a:	461a      	mov	r2, r3
 800345c:	4b3a      	ldr	r3, [pc, #232]	@ (8003548 <HAL_TIM_IC_CaptureCallback+0x118>)
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	e01e      	b.n	80034a0 <HAL_TIM_IC_CaptureCallback+0x70>

		}
		else
		{
			tc2=HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8003462:	2100      	movs	r1, #0
 8003464:	4836      	ldr	r0, [pc, #216]	@ (8003540 <HAL_TIM_IC_CaptureCallback+0x110>)
 8003466:	f004 fc87 	bl	8007d78 <HAL_TIM_ReadCapturedValue>
 800346a:	4603      	mov	r3, r0
 800346c:	461a      	mov	r2, r3
 800346e:	4b37      	ldr	r3, [pc, #220]	@ (800354c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8003470:	601a      	str	r2, [r3, #0]
			if(tc2>tc1)
 8003472:	4b36      	ldr	r3, [pc, #216]	@ (800354c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4b34      	ldr	r3, [pc, #208]	@ (8003548 <HAL_TIM_IC_CaptureCallback+0x118>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	dd07      	ble.n	800348e <HAL_TIM_IC_CaptureCallback+0x5e>
				echo = (tc2-tc1);
 800347e:	4b33      	ldr	r3, [pc, #204]	@ (800354c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	4b31      	ldr	r3, [pc, #196]	@ (8003548 <HAL_TIM_IC_CaptureCallback+0x118>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	4a31      	ldr	r2, [pc, #196]	@ (8003550 <HAL_TIM_IC_CaptureCallback+0x120>)
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	e008      	b.n	80034a0 <HAL_TIM_IC_CaptureCallback+0x70>
			else //tc2 overflow
				echo=((65536-tc1)+tc2);
 800348e:	4b2e      	ldr	r3, [pc, #184]	@ (8003548 <HAL_TIM_IC_CaptureCallback+0x118>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8003496:	4b2d      	ldr	r3, [pc, #180]	@ (800354c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4413      	add	r3, r2
 800349c:	4a2c      	ldr	r2, [pc, #176]	@ (8003550 <HAL_TIM_IC_CaptureCallback+0x120>)
 800349e:	6013      	str	r3, [r2, #0]
		}g_distanceUS = (tc2 > tc1 ? (tc2 - tc1) : (65535 - tc1 + tc2)) * 0.034 / 2;
 80034a0:	4b2a      	ldr	r3, [pc, #168]	@ (800354c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4b28      	ldr	r3, [pc, #160]	@ (8003548 <HAL_TIM_IC_CaptureCallback+0x118>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	dd08      	ble.n	80034be <HAL_TIM_IC_CaptureCallback+0x8e>
 80034ac:	4b27      	ldr	r3, [pc, #156]	@ (800354c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4b25      	ldr	r3, [pc, #148]	@ (8003548 <HAL_TIM_IC_CaptureCallback+0x118>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd f834 	bl	8000524 <__aeabi_i2d>
 80034bc:	e00a      	b.n	80034d4 <HAL_TIM_IC_CaptureCallback+0xa4>
 80034be:	4b22      	ldr	r3, [pc, #136]	@ (8003548 <HAL_TIM_IC_CaptureCallback+0x118>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 80034c6:	33ff      	adds	r3, #255	@ 0xff
 80034c8:	4a20      	ldr	r2, [pc, #128]	@ (800354c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	4413      	add	r3, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fd f828 	bl	8000524 <__aeabi_i2d>
 80034d4:	a318      	add	r3, pc, #96	@ (adr r3, 8003538 <HAL_TIM_IC_CaptureCallback+0x108>)
 80034d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034da:	f7fd f88d 	bl	80005f8 <__aeabi_dmul>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	4610      	mov	r0, r2
 80034e4:	4619      	mov	r1, r3
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80034ee:	f7fd f9ad 	bl	800084c <__aeabi_ddiv>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4610      	mov	r0, r2
 80034f8:	4619      	mov	r1, r3
 80034fa:	f7fd fb75 	bl	8000be8 <__aeabi_d2f>
 80034fe:	4603      	mov	r3, r0
 8003500:	4a14      	ldr	r2, [pc, #80]	@ (8003554 <HAL_TIM_IC_CaptureCallback+0x124>)
 8003502:	6013      	str	r3, [r2, #0]
		if(g_distanceUS>400)
 8003504:	4b13      	ldr	r3, [pc, #76]	@ (8003554 <HAL_TIM_IC_CaptureCallback+0x124>)
 8003506:	edd3 7a00 	vldr	s15, [r3]
 800350a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8003558 <HAL_TIM_IC_CaptureCallback+0x128>
 800350e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003516:	dd04      	ble.n	8003522 <HAL_TIM_IC_CaptureCallback+0xf2>
		{
			g_distanceUS=last_valid;
 8003518:	4b10      	ldr	r3, [pc, #64]	@ (800355c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a0d      	ldr	r2, [pc, #52]	@ (8003554 <HAL_TIM_IC_CaptureCallback+0x124>)
 800351e:	6013      	str	r3, [r2, #0]
		else{
			last_valid=g_distanceUS;
		}
	}

}
 8003520:	e003      	b.n	800352a <HAL_TIM_IC_CaptureCallback+0xfa>
			last_valid=g_distanceUS;
 8003522:	4b0c      	ldr	r3, [pc, #48]	@ (8003554 <HAL_TIM_IC_CaptureCallback+0x124>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a0d      	ldr	r2, [pc, #52]	@ (800355c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8003528:	6013      	str	r3, [r2, #0]
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	f3af 8000 	nop.w
 8003538:	b020c49c 	.word	0xb020c49c
 800353c:	3fa16872 	.word	0x3fa16872
 8003540:	2000040c 	.word	0x2000040c
 8003544:	40020c00 	.word	0x40020c00
 8003548:	20000540 	.word	0x20000540
 800354c:	20000544 	.word	0x20000544
 8003550:	20000548 	.word	0x20000548
 8003554:	2000054c 	.word	0x2000054c
 8003558:	43c80000 	.word	0x43c80000
 800355c:	20000550 	.word	0x20000550

08003560 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);
	if(HAL_GPIO_ReadPin(GPIOE, SWITCH_Pin)==0) {
 800356a:	2101      	movs	r1, #1
 800356c:	480c      	ldr	r0, [pc, #48]	@ (80035a0 <HAL_GPIO_EXTI_Callback+0x40>)
 800356e:	f001 ff55 	bl	800541c <HAL_GPIO_ReadPin>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d103      	bne.n	8003580 <HAL_GPIO_EXTI_Callback+0x20>
		//set value for LAB
		mode=0;
 8003578:	4b0a      	ldr	r3, [pc, #40]	@ (80035a4 <HAL_GPIO_EXTI_Callback+0x44>)
 800357a:	2200      	movs	r2, #0
 800357c:	701a      	strb	r2, [r3, #0]
		mode=1;
	}else{
		__NOP();
	}

}
 800357e:	e00b      	b.n	8003598 <HAL_GPIO_EXTI_Callback+0x38>
	} else if(HAL_GPIO_ReadPin(GPIOE, SWITCH_Pin)==1) {
 8003580:	2101      	movs	r1, #1
 8003582:	4807      	ldr	r0, [pc, #28]	@ (80035a0 <HAL_GPIO_EXTI_Callback+0x40>)
 8003584:	f001 ff4a 	bl	800541c <HAL_GPIO_ReadPin>
 8003588:	4603      	mov	r3, r0
 800358a:	2b01      	cmp	r3, #1
 800358c:	d103      	bne.n	8003596 <HAL_GPIO_EXTI_Callback+0x36>
		mode=1;
 800358e:	4b05      	ldr	r3, [pc, #20]	@ (80035a4 <HAL_GPIO_EXTI_Callback+0x44>)
 8003590:	2201      	movs	r2, #1
 8003592:	701a      	strb	r2, [r3, #0]
}
 8003594:	e000      	b.n	8003598 <HAL_GPIO_EXTI_Callback+0x38>
		__NOP();
 8003596:	bf00      	nop
}
 8003598:	bf00      	nop
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40021000 	.word	0x40021000
 80035a4:	200005ff 	.word	0x200005ff

080035a8 <IR_Left_Read>:

void IR_Left_Read() {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 80035ac:	481c      	ldr	r0, [pc, #112]	@ (8003620 <IR_Left_Read+0x78>)
 80035ae:	f001 f839 	bl	8004624 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 10);
 80035b2:	210a      	movs	r1, #10
 80035b4:	481a      	ldr	r0, [pc, #104]	@ (8003620 <IR_Left_Read+0x78>)
 80035b6:	f001 f93a 	bl	800482e <HAL_ADC_PollForConversion>
	iDistanceL = HAL_ADC_GetValue(&hadc2);
 80035ba:	4819      	ldr	r0, [pc, #100]	@ (8003620 <IR_Left_Read+0x78>)
 80035bc:	f001 f9c2 	bl	8004944 <HAL_ADC_GetValue>
 80035c0:	4603      	mov	r3, r0
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	4b17      	ldr	r3, [pc, #92]	@ (8003624 <IR_Left_Read+0x7c>)
 80035c6:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 80035c8:	4815      	ldr	r0, [pc, #84]	@ (8003620 <IR_Left_Read+0x78>)
 80035ca:	f001 f8fd 	bl	80047c8 <HAL_ADC_Stop>

	//	filtered_irreading = (FILTER_ALPHA2 * iDistanceL) + ((1 - FILTER_ALPHA2) * filtered_irreading);
	//	filtered_irreading_int = (int) filtered_irreading;
	//iDistanceL=(int)pow(10, -1.754*(log10((float) iDistanceL))+7.064);
	//iDistanceL=(int)(iDistanceL*-4.286e-03)+2.189e+01;
	iDistanceL=(int)163690.8 * pow(iDistanceL, -0.9039361);
 80035ce:	4b15      	ldr	r3, [pc, #84]	@ (8003624 <IR_Left_Read+0x7c>)
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fc ff96 	bl	8000504 <__aeabi_ui2d>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	ed9f 1b0c 	vldr	d1, [pc, #48]	@ 8003610 <IR_Left_Read+0x68>
 80035e0:	ec43 2b10 	vmov	d0, r2, r3
 80035e4:	f00c fca8 	bl	800ff38 <pow>
 80035e8:	ec51 0b10 	vmov	r0, r1, d0
 80035ec:	a30a      	add	r3, pc, #40	@ (adr r3, 8003618 <IR_Left_Read+0x70>)
 80035ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f2:	f7fd f801 	bl	80005f8 <__aeabi_dmul>
 80035f6:	4602      	mov	r2, r0
 80035f8:	460b      	mov	r3, r1
 80035fa:	4610      	mov	r0, r2
 80035fc:	4619      	mov	r1, r3
 80035fe:	f7fd fad3 	bl	8000ba8 <__aeabi_d2uiz>
 8003602:	4603      	mov	r3, r0
 8003604:	b29a      	uxth	r2, r3
 8003606:	4b07      	ldr	r3, [pc, #28]	@ (8003624 <IR_Left_Read+0x7c>)
 8003608:	801a      	strh	r2, [r3, #0]
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	66658fa7 	.word	0x66658fa7
 8003614:	bfeced0b 	.word	0xbfeced0b
 8003618:	00000000 	.word	0x00000000
 800361c:	4103fb50 	.word	0x4103fb50
 8003620:	20000298 	.word	0x20000298
 8003624:	20000244 	.word	0x20000244

08003628 <IR_Right_Read>:

void IR_Right_Read() {
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 800362c:	481c      	ldr	r0, [pc, #112]	@ (80036a0 <IR_Right_Read+0x78>)
 800362e:	f000 fff9 	bl	8004624 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8003632:	210a      	movs	r1, #10
 8003634:	481a      	ldr	r0, [pc, #104]	@ (80036a0 <IR_Right_Read+0x78>)
 8003636:	f001 f8fa 	bl	800482e <HAL_ADC_PollForConversion>
	iDistanceR = HAL_ADC_GetValue(&hadc1);
 800363a:	4819      	ldr	r0, [pc, #100]	@ (80036a0 <IR_Right_Read+0x78>)
 800363c:	f001 f982 	bl	8004944 <HAL_ADC_GetValue>
 8003640:	4603      	mov	r3, r0
 8003642:	b29a      	uxth	r2, r3
 8003644:	4b17      	ldr	r3, [pc, #92]	@ (80036a4 <IR_Right_Read+0x7c>)
 8003646:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8003648:	4815      	ldr	r0, [pc, #84]	@ (80036a0 <IR_Right_Read+0x78>)
 800364a:	f001 f8bd 	bl	80047c8 <HAL_ADC_Stop>
	iDistanceR=(int)163690.8 * pow(iDistanceR, -0.9039361);
 800364e:	4b15      	ldr	r3, [pc, #84]	@ (80036a4 <IR_Right_Read+0x7c>)
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fc ff56 	bl	8000504 <__aeabi_ui2d>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	ed9f 1b0c 	vldr	d1, [pc, #48]	@ 8003690 <IR_Right_Read+0x68>
 8003660:	ec43 2b10 	vmov	d0, r2, r3
 8003664:	f00c fc68 	bl	800ff38 <pow>
 8003668:	ec51 0b10 	vmov	r0, r1, d0
 800366c:	a30a      	add	r3, pc, #40	@ (adr r3, 8003698 <IR_Right_Read+0x70>)
 800366e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003672:	f7fc ffc1 	bl	80005f8 <__aeabi_dmul>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4610      	mov	r0, r2
 800367c:	4619      	mov	r1, r3
 800367e:	f7fd fa93 	bl	8000ba8 <__aeabi_d2uiz>
 8003682:	4603      	mov	r3, r0
 8003684:	b29a      	uxth	r2, r3
 8003686:	4b07      	ldr	r3, [pc, #28]	@ (80036a4 <IR_Right_Read+0x7c>)
 8003688:	801a      	strh	r2, [r3, #0]
//	iDistanceR=(int)(iDistanceR*-4.286e-03)+2.189e+01;
}
 800368a:	bf00      	nop
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	66658fa7 	.word	0x66658fa7
 8003694:	bfeced0b 	.word	0xbfeced0b
 8003698:	00000000 	.word	0x00000000
 800369c:	4103fb50 	.word	0x4103fb50
 80036a0:	20000250 	.word	0x20000250
 80036a4:	20000246 	.word	0x20000246

080036a8 <Motor_Stop>:

void Motor_Stop()
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
	resetYaw();
 80036ac:	f7fe f8a2 	bl	80017f4 <resetYaw>
	PID_Reset(&LMotorPID);
 80036b0:	4811      	ldr	r0, [pc, #68]	@ (80036f8 <Motor_Stop+0x50>)
 80036b2:	f7fe f833 	bl	800171c <PID_Reset>
	PID_Reset(&RMotorPID);
 80036b6:	4811      	ldr	r0, [pc, #68]	@ (80036fc <Motor_Stop+0x54>)
 80036b8:	f7fe f830 	bl	800171c <PID_Reset>
	distanceTraveled=0;
 80036bc:	4b10      	ldr	r3, [pc, #64]	@ (8003700 <Motor_Stop+0x58>)
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
	pwmValL = 0;
 80036c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003704 <Motor_Stop+0x5c>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
	pwmValR = 0;
 80036ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003708 <Motor_Stop+0x60>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValL); // Stop left motor
 80036d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003704 <Motor_Stop+0x5c>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	4b0d      	ldr	r3, [pc, #52]	@ (800370c <Motor_Stop+0x64>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmValR); // Stop right motor
 80036da:	4b0b      	ldr	r3, [pc, #44]	@ (8003708 <Motor_Stop+0x60>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <Motor_Stop+0x64>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	639a      	str	r2, [r3, #56]	@ 0x38
	set_servo_angle(Center);
 80036e4:	205f      	movs	r0, #95	@ 0x5f
 80036e6:	f7fe ff21 	bl	800252c <set_servo_angle>
	osDelay(350);
 80036ea:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 80036ee:	f006 febb 	bl	800a468 <osDelay>
	//reset_gyro_at_rest();
	//  count++;
}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000594 	.word	0x20000594
 80036fc:	200005bc 	.word	0x200005bc
 8003700:	20000228 	.word	0x20000228
 8003704:	200005e4 	.word	0x200005e4
 8003708:	200005e8 	.word	0x200005e8
 800370c:	2000049c 	.word	0x2000049c

08003710 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOE,LED3_Pin);
 8003718:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800371c:	4804      	ldr	r0, [pc, #16]	@ (8003730 <StartDefaultTask+0x20>)
 800371e:	f001 feae 	bl	800547e <HAL_GPIO_TogglePin>
		osDelay(1000);
 8003722:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003726:	f006 fe9f 	bl	800a468 <osDelay>
		HAL_GPIO_TogglePin(GPIOE,LED3_Pin);
 800372a:	bf00      	nop
 800372c:	e7f4      	b.n	8003718 <StartDefaultTask+0x8>
 800372e:	bf00      	nop
 8003730:	40021000 	.word	0x40021000

08003734 <StartOledTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOledTask */
void StartOledTask(void *argument)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b096      	sub	sp, #88	@ 0x58
 8003738:	af02      	add	r7, sp, #8
 800373a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartOledTask */
	char text[16]={};
 800373c:	2300      	movs	r3, #0
 800373e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003740:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	605a      	str	r2, [r3, #4]
 800374a:	609a      	str	r2, [r3, #8]
	char temp[50]={};
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	f107 0310 	add.w	r3, r7, #16
 8003754:	222e      	movs	r2, #46	@ 0x2e
 8003756:	2100      	movs	r1, #0
 8003758:	4618      	mov	r0, r3
 800375a:	f00a fb10 	bl	800dd7e <memset>
	//	RMotorPID.setpoint = 1;

	/* Infinite loop */
	for(;;)
	{
		snprintf(text, sizeof(text), "DistanceR:%d", reverse);
 800375e:	4b30      	ldr	r3, [pc, #192]	@ (8003820 <StartOledTask+0xec>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8003766:	4a2f      	ldr	r2, [pc, #188]	@ (8003824 <StartOledTask+0xf0>)
 8003768:	2110      	movs	r1, #16
 800376a:	f00a fa71 	bl	800dc50 <sniprintf>
		OLED_ShowString(10, 20, text);
 800376e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003772:	461a      	mov	r2, r3
 8003774:	2114      	movs	r1, #20
 8003776:	200a      	movs	r0, #10
 8003778:	f009 fc92 	bl	800d0a0 <OLED_ShowString>
		snprintf(text, sizeof(text), "degree :%5.2f", yaw);//BEFORE DEGREE
 800377c:	4b2a      	ldr	r3, [pc, #168]	@ (8003828 <StartOledTask+0xf4>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f7fc fee1 	bl	8000548 <__aeabi_f2d>
 8003786:	4602      	mov	r2, r0
 8003788:	460b      	mov	r3, r1
 800378a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800378e:	e9cd 2300 	strd	r2, r3, [sp]
 8003792:	4a26      	ldr	r2, [pc, #152]	@ (800382c <StartOledTask+0xf8>)
 8003794:	2110      	movs	r1, #16
 8003796:	f00a fa5b 	bl	800dc50 <sniprintf>
		OLED_ShowString(10, 30, text);
 800379a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800379e:	461a      	mov	r2, r3
 80037a0:	211e      	movs	r1, #30
 80037a2:	200a      	movs	r0, #10
 80037a4:	f009 fc7c 	bl	800d0a0 <OLED_ShowString>
		OLED_Refresh_Gram();
 80037a8:	f009 fb06 	bl	800cdb8 <OLED_Refresh_Gram>
		snprintf(text, sizeof(text), "Distance: %f m", distanceTraveled);
 80037ac:	4b20      	ldr	r3, [pc, #128]	@ (8003830 <StartOledTask+0xfc>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fc fec9 	bl	8000548 <__aeabi_f2d>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80037be:	e9cd 2300 	strd	r2, r3, [sp]
 80037c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003834 <StartOledTask+0x100>)
 80037c4:	2110      	movs	r1, #16
 80037c6:	f00a fa43 	bl	800dc50 <sniprintf>
		OLED_ShowString(10, 10, text);
 80037ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80037ce:	461a      	mov	r2, r3
 80037d0:	210a      	movs	r1, #10
 80037d2:	200a      	movs	r0, #10
 80037d4:	f009 fc64 	bl	800d0a0 <OLED_ShowString>
		snprintf(text, sizeof(text), "DistanceIRL:%d m", iDistanceL);
 80037d8:	4b17      	ldr	r3, [pc, #92]	@ (8003838 <StartOledTask+0x104>)
 80037da:	881b      	ldrh	r3, [r3, #0]
 80037dc:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80037e0:	4a16      	ldr	r2, [pc, #88]	@ (800383c <StartOledTask+0x108>)
 80037e2:	2110      	movs	r1, #16
 80037e4:	f00a fa34 	bl	800dc50 <sniprintf>
		OLED_ShowString(10, 40, text);
 80037e8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80037ec:	461a      	mov	r2, r3
 80037ee:	2128      	movs	r1, #40	@ 0x28
 80037f0:	200a      	movs	r0, #10
 80037f2:	f009 fc55 	bl	800d0a0 <OLED_ShowString>
		snprintf(text, sizeof(text), "DistanceIRR %d m", iDistanceR);
 80037f6:	4b12      	ldr	r3, [pc, #72]	@ (8003840 <StartOledTask+0x10c>)
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80037fe:	4a11      	ldr	r2, [pc, #68]	@ (8003844 <StartOledTask+0x110>)
 8003800:	2110      	movs	r1, #16
 8003802:	f00a fa25 	bl	800dc50 <sniprintf>
		OLED_ShowString(10, 50, text);
 8003806:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800380a:	461a      	mov	r2, r3
 800380c:	2132      	movs	r1, #50	@ 0x32
 800380e:	200a      	movs	r0, #10
 8003810:	f009 fc46 	bl	800d0a0 <OLED_ShowString>
		//			if(t==0)
		//				t=1;
		//			LMotorPID.setpoint=t;
		//			RMotorPID.setpoint=t;
		//		}
		osDelay(200);
 8003814:	20c8      	movs	r0, #200	@ 0xc8
 8003816:	f006 fe27 	bl	800a468 <osDelay>
		snprintf(text, sizeof(text), "DistanceR:%d", reverse);
 800381a:	bf00      	nop
 800381c:	e79f      	b.n	800375e <StartOledTask+0x2a>
 800381e:	bf00      	nop
 8003820:	2000023c 	.word	0x2000023c
 8003824:	080113fc 	.word	0x080113fc
 8003828:	20000590 	.word	0x20000590
 800382c:	0801140c 	.word	0x0801140c
 8003830:	20000228 	.word	0x20000228
 8003834:	0801141c 	.word	0x0801141c
 8003838:	20000244 	.word	0x20000244
 800383c:	0801142c 	.word	0x0801142c
 8003840:	20000246 	.word	0x20000246
 8003844:	08011440 	.word	0x08011440

08003848 <Startsensor>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Startsensor */
void Startsensor(void *argument)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Startsensor */
	/* Infinite loop */
	HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_RESET);
 8003850:	2200      	movs	r2, #0
 8003852:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003856:	480f      	ldr	r0, [pc, #60]	@ (8003894 <Startsensor+0x4c>)
 8003858:	f001 fdf8 	bl	800544c <HAL_GPIO_WritePin>
	for(;;)
	{
		HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_SET);
 800385c:	2201      	movs	r2, #1
 800385e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003862:	480c      	ldr	r0, [pc, #48]	@ (8003894 <Startsensor+0x4c>)
 8003864:	f001 fdf2 	bl	800544c <HAL_GPIO_WritePin>
		delay_us(10);
 8003868:	200a      	movs	r0, #10
 800386a:	f7fd ffa9 	bl	80017c0 <delay_us>
		HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_RESET);
 800386e:	2200      	movs	r2, #0
 8003870:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003874:	4807      	ldr	r0, [pc, #28]	@ (8003894 <Startsensor+0x4c>)
 8003876:	f001 fde9 	bl	800544c <HAL_GPIO_WritePin>
		//g_distanceUS = (tc2 > tc1 ? (tc2 - tc1) : (65535 - tc1 + tc2)) * 0.034 / 2; //echo/1000000.0f *343.0f/2.0f *100.0f equivalent
		osDelay(1);
 800387a:	2001      	movs	r0, #1
 800387c:	f006 fdf4 	bl	800a468 <osDelay>
		IR_Left_Read();
 8003880:	f7ff fe92 	bl	80035a8 <IR_Left_Read>
		IR_Right_Read();
 8003884:	f7ff fed0 	bl	8003628 <IR_Right_Read>
		osDelay(10);
 8003888:	200a      	movs	r0, #10
 800388a:	f006 fded 	bl	800a468 <osDelay>
		HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_SET);
 800388e:	bf00      	nop
 8003890:	e7e4      	b.n	800385c <Startsensor+0x14>
 8003892:	bf00      	nop
 8003894:	40021000 	.word	0x40021000

08003898 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08a      	sub	sp, #40	@ 0x28
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartEncoderTask */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80038a0:	213c      	movs	r1, #60	@ 0x3c
 80038a2:	48a1      	ldr	r0, [pc, #644]	@ (8003b28 <StartEncoderTask+0x290>)
 80038a4:	f003 fec4 	bl	8007630 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80038a8:	213c      	movs	r1, #60	@ 0x3c
 80038aa:	48a0      	ldr	r0, [pc, #640]	@ (8003b2c <StartEncoderTask+0x294>)
 80038ac:	f003 fec0 	bl	8007630 <HAL_TIM_Encoder_Start>

	int16_t cnt1L,cnt2L,diffL;
	int16_t cnt1R,cnt2R,diffR;
	uint32_t tick;
	cnt1L = __HAL_TIM_GET_COUNTER(&htim2);
 80038b0:	4b9d      	ldr	r3, [pc, #628]	@ (8003b28 <StartEncoderTask+0x290>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b6:	84fb      	strh	r3, [r7, #38]	@ 0x26
	cnt1R = __HAL_TIM_GET_COUNTER(&htim3);
 80038b8:	4b9c      	ldr	r3, [pc, #624]	@ (8003b2c <StartEncoderTask+0x294>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038be:	847b      	strh	r3, [r7, #34]	@ 0x22
	tick = HAL_GetTick(); // in milliseconds
 80038c0:	f000 fe3c 	bl	800453c <HAL_GetTick>
 80038c4:	61f8      	str	r0, [r7, #28]
	/* Infinite loop */
	for(;;)
	{
		if (HAL_GetTick() - tick > 10L) { // Checking per second
 80038c6:	f000 fe39 	bl	800453c <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b0a      	cmp	r3, #10
 80038d2:	f240 811e 	bls.w	8003b12 <StartEncoderTask+0x27a>
			cnt2L = __HAL_TIM_GET_COUNTER(&htim2);
 80038d6:	4b94      	ldr	r3, [pc, #592]	@ (8003b28 <StartEncoderTask+0x290>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038dc:	837b      	strh	r3, [r7, #26]
			cnt2R = __HAL_TIM_GET_COUNTER(&htim3);
 80038de:	4b93      	ldr	r3, [pc, #588]	@ (8003b2c <StartEncoderTask+0x294>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e4:	833b      	strh	r3, [r7, #24]

			//Left
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 80038e6:	4b90      	ldr	r3, [pc, #576]	@ (8003b28 <StartEncoderTask+0x290>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	2b10      	cmp	r3, #16
 80038f2:	d114      	bne.n	800391e <StartEncoderTask+0x86>
				diffL = (cnt2L < cnt1L) ? (cnt1L - cnt2L) : ((65535 - cnt2L) + cnt1L);
 80038f4:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80038f8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80038fc:	429a      	cmp	r2, r3
 80038fe:	da05      	bge.n	800390c <StartEncoderTask+0x74>
 8003900:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003902:	8b7b      	ldrh	r3, [r7, #26]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	b29b      	uxth	r3, r3
 8003908:	b21b      	sxth	r3, r3
 800390a:	e006      	b.n	800391a <StartEncoderTask+0x82>
 800390c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800390e:	8b7b      	ldrh	r3, [r7, #26]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29b      	uxth	r3, r3
 8003918:	b21b      	sxth	r3, r3
 800391a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800391c:	e013      	b.n	8003946 <StartEncoderTask+0xae>
			} else {
				diffL = (cnt2L > cnt1L) ? (cnt2L - cnt1L) : ((65535 - cnt1L) + cnt2L);
 800391e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8003922:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003926:	429a      	cmp	r2, r3
 8003928:	dd05      	ble.n	8003936 <StartEncoderTask+0x9e>
 800392a:	8b7a      	ldrh	r2, [r7, #26]
 800392c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	b29b      	uxth	r3, r3
 8003932:	b21b      	sxth	r3, r3
 8003934:	e006      	b.n	8003944 <StartEncoderTask+0xac>
 8003936:	8b7a      	ldrh	r2, [r7, #26]
 8003938:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	b29b      	uxth	r3, r3
 800393e:	3b01      	subs	r3, #1
 8003940:	b29b      	uxth	r3, r3
 8003942:	b21b      	sxth	r3, r3
 8003944:	84bb      	strh	r3, [r7, #36]	@ 0x24
			}

			//Right
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) {
 8003946:	4b79      	ldr	r3, [pc, #484]	@ (8003b2c <StartEncoderTask+0x294>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b10      	cmp	r3, #16
 8003952:	d114      	bne.n	800397e <StartEncoderTask+0xe6>
				diffR = (cnt2R < cnt1R) ? (cnt1R - cnt2R) : ((65535 - cnt2R) + cnt1R);
 8003954:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003958:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800395c:	429a      	cmp	r2, r3
 800395e:	da05      	bge.n	800396c <StartEncoderTask+0xd4>
 8003960:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003962:	8b3b      	ldrh	r3, [r7, #24]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	b29b      	uxth	r3, r3
 8003968:	b21b      	sxth	r3, r3
 800396a:	e006      	b.n	800397a <StartEncoderTask+0xe2>
 800396c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800396e:	8b3b      	ldrh	r3, [r7, #24]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	b29b      	uxth	r3, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	b29b      	uxth	r3, r3
 8003978:	b21b      	sxth	r3, r3
 800397a:	843b      	strh	r3, [r7, #32]
 800397c:	e013      	b.n	80039a6 <StartEncoderTask+0x10e>
			} else {
				diffR = (cnt2R > cnt1R) ? (cnt2R - cnt1R) : ((65535 - cnt1R) + cnt2R);
 800397e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003982:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003986:	429a      	cmp	r2, r3
 8003988:	dd05      	ble.n	8003996 <StartEncoderTask+0xfe>
 800398a:	8b3a      	ldrh	r2, [r7, #24]
 800398c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	b29b      	uxth	r3, r3
 8003992:	b21b      	sxth	r3, r3
 8003994:	e006      	b.n	80039a4 <StartEncoderTask+0x10c>
 8003996:	8b3a      	ldrh	r2, [r7, #24]
 8003998:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	b21b      	sxth	r3, r3
 80039a4:	843b      	strh	r3, [r7, #32]
			}
			// RPM Calculation
			RPM_L = ((float) diffL / (ENCODER_PULSES_PER_REVOLUTION * 4));// * 60.0;
 80039a6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80039aa:	ee07 3a90 	vmov	s15, r3
 80039ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039b2:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8003b30 <StartEncoderTask+0x298>
 80039b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80039ba:	ee16 0a90 	vmov	r0, s13
 80039be:	f7fc fdc3 	bl	8000548 <__aeabi_f2d>
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	495b      	ldr	r1, [pc, #364]	@ (8003b34 <StartEncoderTask+0x29c>)
 80039c8:	e9c1 2300 	strd	r2, r3, [r1]
			RPM_R = ((float) diffR / (ENCODER_PULSES_PER_REVOLUTION * 4));
 80039cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80039d0:	ee07 3a90 	vmov	s15, r3
 80039d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039d8:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8003b30 <StartEncoderTask+0x298>
 80039dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80039e0:	ee16 0a90 	vmov	r0, s13
 80039e4:	f7fc fdb0 	bl	8000548 <__aeabi_f2d>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4952      	ldr	r1, [pc, #328]	@ (8003b38 <StartEncoderTask+0x2a0>)
 80039ee:	e9c1 2300 	strd	r2, r3, [r1]

			float dt = (HAL_GetTick() - tick) * 0.001f;
 80039f2:	f000 fda3 	bl	800453c <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	ee07 3a90 	vmov	s15, r3
 8003a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a04:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003b3c <StartEncoderTask+0x2a4>
 8003a08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a0c:	edc7 7a05 	vstr	s15, [r7, #20]
			RPS_L=((float) diffL / (ENCODER_PULSES_PER_REVOLUTION * 4* dt));
 8003a10:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003a14:	ee07 3a90 	vmov	s15, r3
 8003a18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a20:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8003b30 <StartEncoderTask+0x298>
 8003a24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a28:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a2c:	ee16 0a90 	vmov	r0, s13
 8003a30:	f7fc fd8a 	bl	8000548 <__aeabi_f2d>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4941      	ldr	r1, [pc, #260]	@ (8003b40 <StartEncoderTask+0x2a8>)
 8003a3a:	e9c1 2300 	strd	r2, r3, [r1]
			RPS_R=((float) diffR / (ENCODER_PULSES_PER_REVOLUTION * 4 *dt));
 8003a3e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a4e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003b30 <StartEncoderTask+0x298>
 8003a52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a56:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a5a:	ee16 0a90 	vmov	r0, s13
 8003a5e:	f7fc fd73 	bl	8000548 <__aeabi_f2d>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4937      	ldr	r1, [pc, #220]	@ (8003b44 <StartEncoderTask+0x2ac>)
 8003a68:	e9c1 2300 	strd	r2, r3, [r1]

			// Calculate the distance traveled by each wheel (in meters)
			float distanceLeftThisSecond = RPM_L * PI * WHEEL_DIAMETER;
 8003a6c:	4b31      	ldr	r3, [pc, #196]	@ (8003b34 <StartEncoderTask+0x29c>)
 8003a6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a72:	a32b      	add	r3, pc, #172	@ (adr r3, 8003b20 <StartEncoderTask+0x288>)
 8003a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a78:	f7fc fdbe 	bl	80005f8 <__aeabi_dmul>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4610      	mov	r0, r2
 8003a82:	4619      	mov	r1, r3
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	4b2f      	ldr	r3, [pc, #188]	@ (8003b48 <StartEncoderTask+0x2b0>)
 8003a8a:	f7fc fdb5 	bl	80005f8 <__aeabi_dmul>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	460b      	mov	r3, r1
 8003a92:	4610      	mov	r0, r2
 8003a94:	4619      	mov	r1, r3
 8003a96:	f7fd f8a7 	bl	8000be8 <__aeabi_d2f>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	613b      	str	r3, [r7, #16]
			float distanceRightThisSecond = RPM_R * PI * WHEEL_DIAMETER;
 8003a9e:	4b26      	ldr	r3, [pc, #152]	@ (8003b38 <StartEncoderTask+0x2a0>)
 8003aa0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003aa4:	a31e      	add	r3, pc, #120	@ (adr r3, 8003b20 <StartEncoderTask+0x288>)
 8003aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aaa:	f7fc fda5 	bl	80005f8 <__aeabi_dmul>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	4b23      	ldr	r3, [pc, #140]	@ (8003b48 <StartEncoderTask+0x2b0>)
 8003abc:	f7fc fd9c 	bl	80005f8 <__aeabi_dmul>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	460b      	mov	r3, r1
 8003ac4:	4610      	mov	r0, r2
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	f7fd f88e 	bl	8000be8 <__aeabi_d2f>
 8003acc:	4603      	mov	r3, r0
 8003ace:	60fb      	str	r3, [r7, #12]

			// Average the distances to account for potential minor differences in wheel speed
			float distanceThisSecond = (distanceLeftThisSecond + distanceRightThisSecond) / 2.0;
 8003ad0:	ed97 7a04 	vldr	s14, [r7, #16]
 8003ad4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ad8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003adc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003ae0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ae4:	edc7 7a02 	vstr	s15, [r7, #8]
			distanceTraveled += distanceThisSecond;
 8003ae8:	4b18      	ldr	r3, [pc, #96]	@ (8003b4c <StartEncoderTask+0x2b4>)
 8003aea:	ed93 7a00 	vldr	s14, [r3]
 8003aee:	edd7 7a02 	vldr	s15, [r7, #8]
 8003af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003af6:	4b15      	ldr	r3, [pc, #84]	@ (8003b4c <StartEncoderTask+0x2b4>)
 8003af8:	edc3 7a00 	vstr	s15, [r3]
			// Accumulate the total distance traveled
			cnt1L = __HAL_TIM_GET_COUNTER(&htim2);
 8003afc:	4b0a      	ldr	r3, [pc, #40]	@ (8003b28 <StartEncoderTask+0x290>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b02:	84fb      	strh	r3, [r7, #38]	@ 0x26
			cnt1R = __HAL_TIM_GET_COUNTER(&htim3);
 8003b04:	4b09      	ldr	r3, [pc, #36]	@ (8003b2c <StartEncoderTask+0x294>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0a:	847b      	strh	r3, [r7, #34]	@ 0x22
			tick = HAL_GetTick();
 8003b0c:	f000 fd16 	bl	800453c <HAL_GetTick>
 8003b10:	61f8      	str	r0, [r7, #28]
		}
		osDelay(50);
 8003b12:	2032      	movs	r0, #50	@ 0x32
 8003b14:	f006 fca8 	bl	800a468 <osDelay>
		if (HAL_GetTick() - tick > 10L) { // Checking per second
 8003b18:	e6d5      	b.n	80038c6 <StartEncoderTask+0x2e>
 8003b1a:	bf00      	nop
 8003b1c:	f3af 8000 	nop.w
 8003b20:	54442eea 	.word	0x54442eea
 8003b24:	400921fb 	.word	0x400921fb
 8003b28:	2000037c 	.word	0x2000037c
 8003b2c:	200003c4 	.word	0x200003c4
 8003b30:	44a50000 	.word	0x44a50000
 8003b34:	20000558 	.word	0x20000558
 8003b38:	20000560 	.word	0x20000560
 8003b3c:	3a83126f 	.word	0x3a83126f
 8003b40:	20000568 	.word	0x20000568
 8003b44:	20000570 	.word	0x20000570
 8003b48:	401a0000 	.word	0x401a0000
 8003b4c:	20000228 	.word	0x20000228

08003b50 <startrobotTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startrobotTask */
void startrobotTask(void *argument)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startrobotTask */
	/* Infinite loop */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);//Start servo pwm timer
 8003b58:	210c      	movs	r1, #12
 8003b5a:	4832      	ldr	r0, [pc, #200]	@ (8003c24 <startrobotTask+0xd4>)
 8003b5c:	f003 fa78 	bl	8007050 <HAL_TIM_PWM_Start>
	degree=0;
 8003b60:	4b31      	ldr	r3, [pc, #196]	@ (8003c28 <startrobotTask+0xd8>)
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8003b68:	2100      	movs	r1, #0
 8003b6a:	4830      	ldr	r0, [pc, #192]	@ (8003c2c <startrobotTask+0xdc>)
 8003b6c:	f003 fa70 	bl	8007050 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8003b70:	2104      	movs	r1, #4
 8003b72:	482e      	ldr	r0, [pc, #184]	@ (8003c2c <startrobotTask+0xdc>)
 8003b74:	f003 fa6c 	bl	8007050 <HAL_TIM_PWM_Start>

	//while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8)==1);
	int labTarget=87;
 8003b78:	2357      	movs	r3, #87	@ 0x57
 8003b7a:	60fb      	str	r3, [r7, #12]
	//	else
	//		labTarget=166;

	//{osDelay(200);osThreadYield();}
	//
	tempflag=0;
 8003b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8003c30 <startrobotTask+0xe0>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
	set_servo_angle(Center);
 8003b82:	205f      	movs	r0, #95	@ 0x5f
 8003b84:	f7fe fcd2 	bl	800252c <set_servo_angle>
	osDelay(200);
 8003b88:	20c8      	movs	r0, #200	@ 0xc8
 8003b8a:	f006 fc6d 	bl	800a468 <osDelay>
	start_time = HAL_GetTick();
 8003b8e:	f000 fcd5 	bl	800453c <HAL_GetTick>
 8003b92:	4603      	mov	r3, r0
 8003b94:	4a27      	ldr	r2, [pc, #156]	@ (8003c34 <startrobotTask+0xe4>)
 8003b96:	6013      	str	r3, [r2, #0]
	end_time = HAL_GetTick();  // Record end time
 8003b98:	f000 fcd0 	bl	800453c <HAL_GetTick>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	4a26      	ldr	r2, [pc, #152]	@ (8003c38 <startrobotTask+0xe8>)
 8003ba0:	6013      	str	r3, [r2, #0]
	delta_time_sec= (end_time - start_time) * 0.001f; // Time difference in ms
 8003ba2:	4b25      	ldr	r3, [pc, #148]	@ (8003c38 <startrobotTask+0xe8>)
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	4b23      	ldr	r3, [pc, #140]	@ (8003c34 <startrobotTask+0xe4>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	ee07 3a90 	vmov	s15, r3
 8003bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003c3c <startrobotTask+0xec>
 8003bb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bbc:	4b20      	ldr	r3, [pc, #128]	@ (8003c40 <startrobotTask+0xf0>)
 8003bbe:	edc3 7a00 	vstr	s15, [r3]
	{

		//TEST TURN SEGMENT
		//	  {
		//
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8)==0)
 8003bc2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003bc6:	481f      	ldr	r0, [pc, #124]	@ (8003c44 <startrobotTask+0xf4>)
 8003bc8:	f001 fc28 	bl	800541c <HAL_GPIO_ReadPin>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d105      	bne.n	8003bde <startrobotTask+0x8e>
		{
			//resetYaw();
			//yaw=0;
			tempflag=1;
 8003bd2:	4b17      	ldr	r3, [pc, #92]	@ (8003c30 <startrobotTask+0xe0>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
			CurrentState=MoveToBlock;
 8003bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c48 <startrobotTask+0xf8>)
 8003bda:	4a1c      	ldr	r2, [pc, #112]	@ (8003c4c <startrobotTask+0xfc>)
 8003bdc:	601a      	str	r2, [r3, #0]

			//target=85;
			//set_servo_angle(Right);
			//osDelay(550);
		}
		if(flagReceived==1&&flagDone!=1)
 8003bde:	4b1c      	ldr	r3, [pc, #112]	@ (8003c50 <startrobotTask+0x100>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d10a      	bne.n	8003bfc <startrobotTask+0xac>
 8003be6:	4b1b      	ldr	r3, [pc, #108]	@ (8003c54 <startrobotTask+0x104>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d006      	beq.n	8003bfc <startrobotTask+0xac>
		{
		if(aRxBuffer[0]=='G')//Start by rpi from android
 8003bee:	4b1a      	ldr	r3, [pc, #104]	@ (8003c58 <startrobotTask+0x108>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b47      	cmp	r3, #71	@ 0x47
 8003bf4:	d102      	bne.n	8003bfc <startrobotTask+0xac>
			{
			CurrentState=MoveToBlock;
 8003bf6:	4b14      	ldr	r3, [pc, #80]	@ (8003c48 <startrobotTask+0xf8>)
 8003bf8:	4a14      	ldr	r2, [pc, #80]	@ (8003c4c <startrobotTask+0xfc>)
 8003bfa:	601a      	str	r2, [r3, #0]
			}
		}

		if(CurrentState!=NULL)
 8003bfc:	4b12      	ldr	r3, [pc, #72]	@ (8003c48 <startrobotTask+0xf8>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <startrobotTask+0xbc>
			CurrentState->stateFunction();
 8003c04:	4b10      	ldr	r3, [pc, #64]	@ (8003c48 <startrobotTask+0xf8>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4798      	blx	r3
		//////
		if(tempflag==1)
 8003c0c:	4b08      	ldr	r3, [pc, #32]	@ (8003c30 <startrobotTask+0xe0>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d102      	bne.n	8003c1a <startrobotTask+0xca>
//			FLeft(43.5);
//			distanceTraveled=0;
//			Backward(0);
//			Motor_Stop();
//			Set_Motor_Direction(1,1);
			tempflag=0;
 8003c14:	4b06      	ldr	r3, [pc, #24]	@ (8003c30 <startrobotTask+0xe0>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]
//			HAL_UART_Transmit(&huart3,(uint8_t *)"ACK\r\n",5,0xFFFF);
//			flagReceived=0;
//			flagDone = 0;
//		}

		osDelay(10);
 8003c1a:	200a      	movs	r0, #10
 8003c1c:	f006 fc24 	bl	800a468 <osDelay>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8)==0)
 8003c20:	e7cf      	b.n	8003bc2 <startrobotTask+0x72>
 8003c22:	bf00      	nop
 8003c24:	20000334 	.word	0x20000334
 8003c28:	200005ec 	.word	0x200005ec
 8003c2c:	2000049c 	.word	0x2000049c
 8003c30:	20000000 	.word	0x20000000
 8003c34:	20000248 	.word	0x20000248
 8003c38:	2000024c 	.word	0x2000024c
 8003c3c:	3a83126f 	.word	0x3a83126f
 8003c40:	2000022c 	.word	0x2000022c
 8003c44:	40020c00 	.word	0x40020c00
 8003c48:	20000600 	.word	0x20000600
 8003c4c:	08011520 	.word	0x08011520
 8003c50:	20000234 	.word	0x20000234
 8003c54:	20000230 	.word	0x20000230
 8003c58:	200005f4 	.word	0x200005f4

08003c5c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c60:	b672      	cpsid	i
}
 8003c62:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003c64:	bf00      	nop
 8003c66:	e7fd      	b.n	8003c64 <Error_Handler+0x8>

08003c68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	607b      	str	r3, [r7, #4]
 8003c72:	4b12      	ldr	r3, [pc, #72]	@ (8003cbc <HAL_MspInit+0x54>)
 8003c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c76:	4a11      	ldr	r2, [pc, #68]	@ (8003cbc <HAL_MspInit+0x54>)
 8003c78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8003cbc <HAL_MspInit+0x54>)
 8003c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c86:	607b      	str	r3, [r7, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	603b      	str	r3, [r7, #0]
 8003c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003cbc <HAL_MspInit+0x54>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	4a0a      	ldr	r2, [pc, #40]	@ (8003cbc <HAL_MspInit+0x54>)
 8003c94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c9a:	4b08      	ldr	r3, [pc, #32]	@ (8003cbc <HAL_MspInit+0x54>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	210f      	movs	r1, #15
 8003caa:	f06f 0001 	mvn.w	r0, #1
 8003cae:	f001 f950 	bl	8004f52 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40023800 	.word	0x40023800

08003cc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08c      	sub	sp, #48	@ 0x30
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc8:	f107 031c 	add.w	r3, r7, #28
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	609a      	str	r2, [r3, #8]
 8003cd4:	60da      	str	r2, [r3, #12]
 8003cd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8003d98 <HAL_ADC_MspInit+0xd8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d128      	bne.n	8003d34 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	4b2d      	ldr	r3, [pc, #180]	@ (8003d9c <HAL_ADC_MspInit+0xdc>)
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cea:	4a2c      	ldr	r2, [pc, #176]	@ (8003d9c <HAL_ADC_MspInit+0xdc>)
 8003cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8003d9c <HAL_ADC_MspInit+0xdc>)
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	4b26      	ldr	r3, [pc, #152]	@ (8003d9c <HAL_ADC_MspInit+0xdc>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d06:	4a25      	ldr	r2, [pc, #148]	@ (8003d9c <HAL_ADC_MspInit+0xdc>)
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d0e:	4b23      	ldr	r3, [pc, #140]	@ (8003d9c <HAL_ADC_MspInit+0xdc>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d26:	f107 031c 	add.w	r3, r7, #28
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	481c      	ldr	r0, [pc, #112]	@ (8003da0 <HAL_ADC_MspInit+0xe0>)
 8003d2e:	f001 f9d9 	bl	80050e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003d32:	e02c      	b.n	8003d8e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a1a      	ldr	r2, [pc, #104]	@ (8003da4 <HAL_ADC_MspInit+0xe4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d127      	bne.n	8003d8e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003d3e:	2300      	movs	r3, #0
 8003d40:	613b      	str	r3, [r7, #16]
 8003d42:	4b16      	ldr	r3, [pc, #88]	@ (8003d9c <HAL_ADC_MspInit+0xdc>)
 8003d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d46:	4a15      	ldr	r2, [pc, #84]	@ (8003d9c <HAL_ADC_MspInit+0xdc>)
 8003d48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d4e:	4b13      	ldr	r3, [pc, #76]	@ (8003d9c <HAL_ADC_MspInit+0xdc>)
 8003d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d56:	613b      	str	r3, [r7, #16]
 8003d58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d9c <HAL_ADC_MspInit+0xdc>)
 8003d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d62:	4a0e      	ldr	r2, [pc, #56]	@ (8003d9c <HAL_ADC_MspInit+0xdc>)
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d9c <HAL_ADC_MspInit+0xdc>)
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003d76:	2302      	movs	r3, #2
 8003d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d82:	f107 031c 	add.w	r3, r7, #28
 8003d86:	4619      	mov	r1, r3
 8003d88:	4805      	ldr	r0, [pc, #20]	@ (8003da0 <HAL_ADC_MspInit+0xe0>)
 8003d8a:	f001 f9ab 	bl	80050e4 <HAL_GPIO_Init>
}
 8003d8e:	bf00      	nop
 8003d90:	3730      	adds	r7, #48	@ 0x30
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40012000 	.word	0x40012000
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	40020000 	.word	0x40020000
 8003da4:	40012100 	.word	0x40012100

08003da8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08a      	sub	sp, #40	@ 0x28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db0:	f107 0314 	add.w	r3, r7, #20
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	605a      	str	r2, [r3, #4]
 8003dba:	609a      	str	r2, [r3, #8]
 8003dbc:	60da      	str	r2, [r3, #12]
 8003dbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a19      	ldr	r2, [pc, #100]	@ (8003e2c <HAL_I2C_MspInit+0x84>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d12c      	bne.n	8003e24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	613b      	str	r3, [r7, #16]
 8003dce:	4b18      	ldr	r3, [pc, #96]	@ (8003e30 <HAL_I2C_MspInit+0x88>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd2:	4a17      	ldr	r2, [pc, #92]	@ (8003e30 <HAL_I2C_MspInit+0x88>)
 8003dd4:	f043 0302 	orr.w	r3, r3, #2
 8003dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dda:	4b15      	ldr	r3, [pc, #84]	@ (8003e30 <HAL_I2C_MspInit+0x88>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003de6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dec:	2312      	movs	r3, #18
 8003dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df4:	2303      	movs	r3, #3
 8003df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003df8:	2304      	movs	r3, #4
 8003dfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dfc:	f107 0314 	add.w	r3, r7, #20
 8003e00:	4619      	mov	r1, r3
 8003e02:	480c      	ldr	r0, [pc, #48]	@ (8003e34 <HAL_I2C_MspInit+0x8c>)
 8003e04:	f001 f96e 	bl	80050e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	4b08      	ldr	r3, [pc, #32]	@ (8003e30 <HAL_I2C_MspInit+0x88>)
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	4a07      	ldr	r2, [pc, #28]	@ (8003e30 <HAL_I2C_MspInit+0x88>)
 8003e12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e16:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e18:	4b05      	ldr	r3, [pc, #20]	@ (8003e30 <HAL_I2C_MspInit+0x88>)
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003e24:	bf00      	nop
 8003e26:	3728      	adds	r7, #40	@ 0x28
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40005400 	.word	0x40005400
 8003e30:	40023800 	.word	0x40023800
 8003e34:	40020400 	.word	0x40020400

08003e38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08e      	sub	sp, #56	@ 0x38
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	605a      	str	r2, [r3, #4]
 8003e4a:	609a      	str	r2, [r3, #8]
 8003e4c:	60da      	str	r2, [r3, #12]
 8003e4e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a4a      	ldr	r2, [pc, #296]	@ (8003f80 <HAL_TIM_Base_MspInit+0x148>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d10e      	bne.n	8003e78 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	623b      	str	r3, [r7, #32]
 8003e5e:	4b49      	ldr	r3, [pc, #292]	@ (8003f84 <HAL_TIM_Base_MspInit+0x14c>)
 8003e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e62:	4a48      	ldr	r2, [pc, #288]	@ (8003f84 <HAL_TIM_Base_MspInit+0x14c>)
 8003e64:	f043 0301 	orr.w	r3, r3, #1
 8003e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e6a:	4b46      	ldr	r3, [pc, #280]	@ (8003f84 <HAL_TIM_Base_MspInit+0x14c>)
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	623b      	str	r3, [r7, #32]
 8003e74:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003e76:	e07f      	b.n	8003f78 <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM4)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a42      	ldr	r2, [pc, #264]	@ (8003f88 <HAL_TIM_Base_MspInit+0x150>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d135      	bne.n	8003eee <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003e82:	2300      	movs	r3, #0
 8003e84:	61fb      	str	r3, [r7, #28]
 8003e86:	4b3f      	ldr	r3, [pc, #252]	@ (8003f84 <HAL_TIM_Base_MspInit+0x14c>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8a:	4a3e      	ldr	r2, [pc, #248]	@ (8003f84 <HAL_TIM_Base_MspInit+0x14c>)
 8003e8c:	f043 0304 	orr.w	r3, r3, #4
 8003e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e92:	4b3c      	ldr	r3, [pc, #240]	@ (8003f84 <HAL_TIM_Base_MspInit+0x14c>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	61fb      	str	r3, [r7, #28]
 8003e9c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	61bb      	str	r3, [r7, #24]
 8003ea2:	4b38      	ldr	r3, [pc, #224]	@ (8003f84 <HAL_TIM_Base_MspInit+0x14c>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea6:	4a37      	ldr	r2, [pc, #220]	@ (8003f84 <HAL_TIM_Base_MspInit+0x14c>)
 8003ea8:	f043 0308 	orr.w	r3, r3, #8
 8003eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eae:	4b35      	ldr	r3, [pc, #212]	@ (8003f84 <HAL_TIM_Base_MspInit+0x14c>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003eba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ebe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003ecc:	2302      	movs	r3, #2
 8003ece:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ed0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	482d      	ldr	r0, [pc, #180]	@ (8003f8c <HAL_TIM_Base_MspInit+0x154>)
 8003ed8:	f001 f904 	bl	80050e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003edc:	2200      	movs	r2, #0
 8003ede:	2105      	movs	r1, #5
 8003ee0:	201e      	movs	r0, #30
 8003ee2:	f001 f836 	bl	8004f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003ee6:	201e      	movs	r0, #30
 8003ee8:	f001 f84f 	bl	8004f8a <HAL_NVIC_EnableIRQ>
}
 8003eec:	e044      	b.n	8003f78 <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM6)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a27      	ldr	r2, [pc, #156]	@ (8003f90 <HAL_TIM_Base_MspInit+0x158>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d10e      	bne.n	8003f16 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	4b21      	ldr	r3, [pc, #132]	@ (8003f84 <HAL_TIM_Base_MspInit+0x14c>)
 8003efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f00:	4a20      	ldr	r2, [pc, #128]	@ (8003f84 <HAL_TIM_Base_MspInit+0x14c>)
 8003f02:	f043 0310 	orr.w	r3, r3, #16
 8003f06:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f08:	4b1e      	ldr	r3, [pc, #120]	@ (8003f84 <HAL_TIM_Base_MspInit+0x14c>)
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	697b      	ldr	r3, [r7, #20]
}
 8003f14:	e030      	b.n	8003f78 <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM8)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003f94 <HAL_TIM_Base_MspInit+0x15c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d12b      	bne.n	8003f78 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003f20:	2300      	movs	r3, #0
 8003f22:	613b      	str	r3, [r7, #16]
 8003f24:	4b17      	ldr	r3, [pc, #92]	@ (8003f84 <HAL_TIM_Base_MspInit+0x14c>)
 8003f26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f28:	4a16      	ldr	r2, [pc, #88]	@ (8003f84 <HAL_TIM_Base_MspInit+0x14c>)
 8003f2a:	f043 0302 	orr.w	r3, r3, #2
 8003f2e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f30:	4b14      	ldr	r3, [pc, #80]	@ (8003f84 <HAL_TIM_Base_MspInit+0x14c>)
 8003f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	4b10      	ldr	r3, [pc, #64]	@ (8003f84 <HAL_TIM_Base_MspInit+0x14c>)
 8003f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f44:	4a0f      	ldr	r2, [pc, #60]	@ (8003f84 <HAL_TIM_Base_MspInit+0x14c>)
 8003f46:	f043 0304 	orr.w	r3, r3, #4
 8003f4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f84 <HAL_TIM_Base_MspInit+0x14c>)
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f58:	23c0      	movs	r3, #192	@ 0xc0
 8003f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f64:	2300      	movs	r3, #0
 8003f66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f70:	4619      	mov	r1, r3
 8003f72:	4809      	ldr	r0, [pc, #36]	@ (8003f98 <HAL_TIM_Base_MspInit+0x160>)
 8003f74:	f001 f8b6 	bl	80050e4 <HAL_GPIO_Init>
}
 8003f78:	bf00      	nop
 8003f7a:	3738      	adds	r7, #56	@ 0x38
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40010000 	.word	0x40010000
 8003f84:	40023800 	.word	0x40023800
 8003f88:	40000800 	.word	0x40000800
 8003f8c:	40020c00 	.word	0x40020c00
 8003f90:	40001000 	.word	0x40001000
 8003f94:	40010400 	.word	0x40010400
 8003f98:	40020800 	.word	0x40020800

08003f9c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08c      	sub	sp, #48	@ 0x30
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa4:	f107 031c 	add.w	r3, r7, #28
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	609a      	str	r2, [r3, #8]
 8003fb0:	60da      	str	r2, [r3, #12]
 8003fb2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fbc:	d14b      	bne.n	8004056 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61bb      	str	r3, [r7, #24]
 8003fc2:	4b3f      	ldr	r3, [pc, #252]	@ (80040c0 <HAL_TIM_Encoder_MspInit+0x124>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	4a3e      	ldr	r2, [pc, #248]	@ (80040c0 <HAL_TIM_Encoder_MspInit+0x124>)
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fce:	4b3c      	ldr	r3, [pc, #240]	@ (80040c0 <HAL_TIM_Encoder_MspInit+0x124>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	61bb      	str	r3, [r7, #24]
 8003fd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	617b      	str	r3, [r7, #20]
 8003fde:	4b38      	ldr	r3, [pc, #224]	@ (80040c0 <HAL_TIM_Encoder_MspInit+0x124>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe2:	4a37      	ldr	r2, [pc, #220]	@ (80040c0 <HAL_TIM_Encoder_MspInit+0x124>)
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fea:	4b35      	ldr	r3, [pc, #212]	@ (80040c0 <HAL_TIM_Encoder_MspInit+0x124>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	617b      	str	r3, [r7, #20]
 8003ff4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	613b      	str	r3, [r7, #16]
 8003ffa:	4b31      	ldr	r3, [pc, #196]	@ (80040c0 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffe:	4a30      	ldr	r2, [pc, #192]	@ (80040c0 <HAL_TIM_Encoder_MspInit+0x124>)
 8004000:	f043 0302 	orr.w	r3, r3, #2
 8004004:	6313      	str	r3, [r2, #48]	@ 0x30
 8004006:	4b2e      	ldr	r3, [pc, #184]	@ (80040c0 <HAL_TIM_Encoder_MspInit+0x124>)
 8004008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	613b      	str	r3, [r7, #16]
 8004010:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004012:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004018:	2302      	movs	r3, #2
 800401a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401c:	2300      	movs	r3, #0
 800401e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004020:	2300      	movs	r3, #0
 8004022:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004024:	2301      	movs	r3, #1
 8004026:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004028:	f107 031c 	add.w	r3, r7, #28
 800402c:	4619      	mov	r1, r3
 800402e:	4825      	ldr	r0, [pc, #148]	@ (80040c4 <HAL_TIM_Encoder_MspInit+0x128>)
 8004030:	f001 f858 	bl	80050e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004034:	2308      	movs	r3, #8
 8004036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004038:	2302      	movs	r3, #2
 800403a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403c:	2300      	movs	r3, #0
 800403e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004040:	2300      	movs	r3, #0
 8004042:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004044:	2301      	movs	r3, #1
 8004046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004048:	f107 031c 	add.w	r3, r7, #28
 800404c:	4619      	mov	r1, r3
 800404e:	481e      	ldr	r0, [pc, #120]	@ (80040c8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8004050:	f001 f848 	bl	80050e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004054:	e030      	b.n	80040b8 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a1c      	ldr	r2, [pc, #112]	@ (80040cc <HAL_TIM_Encoder_MspInit+0x130>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d12b      	bne.n	80040b8 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	4b16      	ldr	r3, [pc, #88]	@ (80040c0 <HAL_TIM_Encoder_MspInit+0x124>)
 8004066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004068:	4a15      	ldr	r2, [pc, #84]	@ (80040c0 <HAL_TIM_Encoder_MspInit+0x124>)
 800406a:	f043 0302 	orr.w	r3, r3, #2
 800406e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004070:	4b13      	ldr	r3, [pc, #76]	@ (80040c0 <HAL_TIM_Encoder_MspInit+0x124>)
 8004072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800407c:	2300      	movs	r3, #0
 800407e:	60bb      	str	r3, [r7, #8]
 8004080:	4b0f      	ldr	r3, [pc, #60]	@ (80040c0 <HAL_TIM_Encoder_MspInit+0x124>)
 8004082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004084:	4a0e      	ldr	r2, [pc, #56]	@ (80040c0 <HAL_TIM_Encoder_MspInit+0x124>)
 8004086:	f043 0301 	orr.w	r3, r3, #1
 800408a:	6313      	str	r3, [r2, #48]	@ 0x30
 800408c:	4b0c      	ldr	r3, [pc, #48]	@ (80040c0 <HAL_TIM_Encoder_MspInit+0x124>)
 800408e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004098:	23c0      	movs	r3, #192	@ 0xc0
 800409a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409c:	2302      	movs	r3, #2
 800409e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a4:	2300      	movs	r3, #0
 80040a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040a8:	2302      	movs	r3, #2
 80040aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ac:	f107 031c 	add.w	r3, r7, #28
 80040b0:	4619      	mov	r1, r3
 80040b2:	4804      	ldr	r0, [pc, #16]	@ (80040c4 <HAL_TIM_Encoder_MspInit+0x128>)
 80040b4:	f001 f816 	bl	80050e4 <HAL_GPIO_Init>
}
 80040b8:	bf00      	nop
 80040ba:	3730      	adds	r7, #48	@ 0x30
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40023800 	.word	0x40023800
 80040c4:	40020000 	.word	0x40020000
 80040c8:	40020400 	.word	0x40020400
 80040cc:	40000400 	.word	0x40000400

080040d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040d8:	f107 030c 	add.w	r3, r7, #12
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	605a      	str	r2, [r3, #4]
 80040e2:	609a      	str	r2, [r3, #8]
 80040e4:	60da      	str	r2, [r3, #12]
 80040e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a12      	ldr	r2, [pc, #72]	@ (8004138 <HAL_TIM_MspPostInit+0x68>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d11e      	bne.n	8004130 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80040f2:	2300      	movs	r3, #0
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	4b11      	ldr	r3, [pc, #68]	@ (800413c <HAL_TIM_MspPostInit+0x6c>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fa:	4a10      	ldr	r2, [pc, #64]	@ (800413c <HAL_TIM_MspPostInit+0x6c>)
 80040fc:	f043 0310 	orr.w	r3, r3, #16
 8004100:	6313      	str	r3, [r2, #48]	@ 0x30
 8004102:	4b0e      	ldr	r3, [pc, #56]	@ (800413c <HAL_TIM_MspPostInit+0x6c>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	60bb      	str	r3, [r7, #8]
 800410c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800410e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004112:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004114:	2302      	movs	r3, #2
 8004116:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004118:	2300      	movs	r3, #0
 800411a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800411c:	2300      	movs	r3, #0
 800411e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004120:	2301      	movs	r3, #1
 8004122:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004124:	f107 030c 	add.w	r3, r7, #12
 8004128:	4619      	mov	r1, r3
 800412a:	4805      	ldr	r0, [pc, #20]	@ (8004140 <HAL_TIM_MspPostInit+0x70>)
 800412c:	f000 ffda 	bl	80050e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004130:	bf00      	nop
 8004132:	3720      	adds	r7, #32
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40010000 	.word	0x40010000
 800413c:	40023800 	.word	0x40023800
 8004140:	40021000 	.word	0x40021000

08004144 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08a      	sub	sp, #40	@ 0x28
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800414c:	f107 0314 	add.w	r3, r7, #20
 8004150:	2200      	movs	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	605a      	str	r2, [r3, #4]
 8004156:	609a      	str	r2, [r3, #8]
 8004158:	60da      	str	r2, [r3, #12]
 800415a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a1d      	ldr	r2, [pc, #116]	@ (80041d8 <HAL_UART_MspInit+0x94>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d134      	bne.n	80041d0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004166:	2300      	movs	r3, #0
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	4b1c      	ldr	r3, [pc, #112]	@ (80041dc <HAL_UART_MspInit+0x98>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	4a1b      	ldr	r2, [pc, #108]	@ (80041dc <HAL_UART_MspInit+0x98>)
 8004170:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004174:	6413      	str	r3, [r2, #64]	@ 0x40
 8004176:	4b19      	ldr	r3, [pc, #100]	@ (80041dc <HAL_UART_MspInit+0x98>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800417e:	613b      	str	r3, [r7, #16]
 8004180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	4b15      	ldr	r3, [pc, #84]	@ (80041dc <HAL_UART_MspInit+0x98>)
 8004188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418a:	4a14      	ldr	r2, [pc, #80]	@ (80041dc <HAL_UART_MspInit+0x98>)
 800418c:	f043 0304 	orr.w	r3, r3, #4
 8004190:	6313      	str	r3, [r2, #48]	@ 0x30
 8004192:	4b12      	ldr	r3, [pc, #72]	@ (80041dc <HAL_UART_MspInit+0x98>)
 8004194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800419e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80041a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a4:	2302      	movs	r3, #2
 80041a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ac:	2303      	movs	r3, #3
 80041ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80041b0:	2307      	movs	r3, #7
 80041b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041b4:	f107 0314 	add.w	r3, r7, #20
 80041b8:	4619      	mov	r1, r3
 80041ba:	4809      	ldr	r0, [pc, #36]	@ (80041e0 <HAL_UART_MspInit+0x9c>)
 80041bc:	f000 ff92 	bl	80050e4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80041c0:	2200      	movs	r2, #0
 80041c2:	2105      	movs	r1, #5
 80041c4:	2027      	movs	r0, #39	@ 0x27
 80041c6:	f000 fec4 	bl	8004f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80041ca:	2027      	movs	r0, #39	@ 0x27
 80041cc:	f000 fedd 	bl	8004f8a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80041d0:	bf00      	nop
 80041d2:	3728      	adds	r7, #40	@ 0x28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40004800 	.word	0x40004800
 80041dc:	40023800 	.word	0x40023800
 80041e0:	40020800 	.word	0x40020800

080041e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041e8:	bf00      	nop
 80041ea:	e7fd      	b.n	80041e8 <NMI_Handler+0x4>

080041ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041f0:	bf00      	nop
 80041f2:	e7fd      	b.n	80041f0 <HardFault_Handler+0x4>

080041f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041f8:	bf00      	nop
 80041fa:	e7fd      	b.n	80041f8 <MemManage_Handler+0x4>

080041fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004200:	bf00      	nop
 8004202:	e7fd      	b.n	8004200 <BusFault_Handler+0x4>

08004204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004208:	bf00      	nop
 800420a:	e7fd      	b.n	8004208 <UsageFault_Handler+0x4>

0800420c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004210:	bf00      	nop
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800421e:	f000 f979 	bl	8004514 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004222:	f007 fd49 	bl	800bcb8 <xTaskGetSchedulerState>
 8004226:	4603      	mov	r3, r0
 8004228:	2b01      	cmp	r3, #1
 800422a:	d001      	beq.n	8004230 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800422c:	f008 fb44 	bl	800c8b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004230:	bf00      	nop
 8004232:	bd80      	pop	{r7, pc}

08004234 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWITCH_Pin);
 8004238:	2001      	movs	r0, #1
 800423a:	f001 f93b 	bl	80054b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800423e:	bf00      	nop
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004248:	4802      	ldr	r0, [pc, #8]	@ (8004254 <TIM4_IRQHandler+0x10>)
 800424a:	f003 fa7f 	bl	800774c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	2000040c 	.word	0x2000040c

08004258 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800425c:	4802      	ldr	r0, [pc, #8]	@ (8004268 <USART3_IRQHandler+0x10>)
 800425e:	f004 fc1f 	bl	8008aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004262:	bf00      	nop
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	200004e4 	.word	0x200004e4

0800426c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
	return 1;
 8004270:	2301      	movs	r3, #1
}
 8004272:	4618      	mov	r0, r3
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <_kill>:

int _kill(int pid, int sig)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004286:	f009 fddf 	bl	800de48 <__errno>
 800428a:	4603      	mov	r3, r0
 800428c:	2216      	movs	r2, #22
 800428e:	601a      	str	r2, [r3, #0]
	return -1;
 8004290:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004294:	4618      	mov	r0, r3
 8004296:	3708      	adds	r7, #8
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <_exit>:

void _exit (int status)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80042a4:	f04f 31ff 	mov.w	r1, #4294967295
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff ffe7 	bl	800427c <_kill>
	while (1) {}		/* Make sure we hang here */
 80042ae:	bf00      	nop
 80042b0:	e7fd      	b.n	80042ae <_exit+0x12>

080042b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b086      	sub	sp, #24
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	60f8      	str	r0, [r7, #12]
 80042ba:	60b9      	str	r1, [r7, #8]
 80042bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	e00a      	b.n	80042da <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80042c4:	f3af 8000 	nop.w
 80042c8:	4601      	mov	r1, r0
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	60ba      	str	r2, [r7, #8]
 80042d0:	b2ca      	uxtb	r2, r1
 80042d2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	3301      	adds	r3, #1
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	429a      	cmp	r2, r3
 80042e0:	dbf0      	blt.n	80042c4 <_read+0x12>
	}

return len;
 80042e2:	687b      	ldr	r3, [r7, #4]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	e009      	b.n	8004312 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	60ba      	str	r2, [r7, #8]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	3301      	adds	r3, #1
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	429a      	cmp	r2, r3
 8004318:	dbf1      	blt.n	80042fe <_write+0x12>
	}
	return len;
 800431a:	687b      	ldr	r3, [r7, #4]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3718      	adds	r7, #24
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <_close>:

int _close(int file)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
	return -1;
 800432c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800434c:	605a      	str	r2, [r3, #4]
	return 0;
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <_isatty>:

int _isatty(int file)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
	return 1;
 8004364:	2301      	movs	r3, #1
}
 8004366:	4618      	mov	r0, r3
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004372:	b480      	push	{r7}
 8004374:	b085      	sub	sp, #20
 8004376:	af00      	add	r7, sp, #0
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	607a      	str	r2, [r7, #4]
	return 0;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004394:	4a14      	ldr	r2, [pc, #80]	@ (80043e8 <_sbrk+0x5c>)
 8004396:	4b15      	ldr	r3, [pc, #84]	@ (80043ec <_sbrk+0x60>)
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043a0:	4b13      	ldr	r3, [pc, #76]	@ (80043f0 <_sbrk+0x64>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d102      	bne.n	80043ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043a8:	4b11      	ldr	r3, [pc, #68]	@ (80043f0 <_sbrk+0x64>)
 80043aa:	4a12      	ldr	r2, [pc, #72]	@ (80043f4 <_sbrk+0x68>)
 80043ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043ae:	4b10      	ldr	r3, [pc, #64]	@ (80043f0 <_sbrk+0x64>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4413      	add	r3, r2
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d207      	bcs.n	80043cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043bc:	f009 fd44 	bl	800de48 <__errno>
 80043c0:	4603      	mov	r3, r0
 80043c2:	220c      	movs	r2, #12
 80043c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043c6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ca:	e009      	b.n	80043e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043cc:	4b08      	ldr	r3, [pc, #32]	@ (80043f0 <_sbrk+0x64>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043d2:	4b07      	ldr	r3, [pc, #28]	@ (80043f0 <_sbrk+0x64>)
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4413      	add	r3, r2
 80043da:	4a05      	ldr	r2, [pc, #20]	@ (80043f0 <_sbrk+0x64>)
 80043dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043de:	68fb      	ldr	r3, [r7, #12]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20020000 	.word	0x20020000
 80043ec:	00000400 	.word	0x00000400
 80043f0:	20000608 	.word	0x20000608
 80043f4:	200054b8 	.word	0x200054b8

080043f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80043fc:	4b06      	ldr	r3, [pc, #24]	@ (8004418 <SystemInit+0x20>)
 80043fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004402:	4a05      	ldr	r2, [pc, #20]	@ (8004418 <SystemInit+0x20>)
 8004404:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004408:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800440c:	bf00      	nop
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	e000ed00 	.word	0xe000ed00

0800441c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800441c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004454 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004420:	480d      	ldr	r0, [pc, #52]	@ (8004458 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004422:	490e      	ldr	r1, [pc, #56]	@ (800445c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004424:	4a0e      	ldr	r2, [pc, #56]	@ (8004460 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004428:	e002      	b.n	8004430 <LoopCopyDataInit>

0800442a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800442a:	58d4      	ldr	r4, [r2, r3]
   str r4, [r0, r3]
 800442c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800442e:	3304      	adds	r3, #4

08004430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004434:	d3f9      	bcc.n	800442a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004436:	4a0b      	ldr	r2, [pc, #44]	@ (8004464 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004438:	4c0b      	ldr	r4, [pc, #44]	@ (8004468 <LoopFillZerobss+0x26>)
  movs r3, #0
 800443a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800443c:	e001      	b.n	8004442 <LoopFillZerobss>

0800443e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800443e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004440:	3204      	adds	r2, #4

08004442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004444:	d3fb      	bcc.n	800443e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004446:	f7ff ffd7 	bl	80043f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800444a:	f009 fd03 	bl	800de54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800444e:	f7fe fa31 	bl	80028b4 <main>
  bx  lr    
 8004452:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004454:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800445c:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8004460:	08012428 	.word	0x08012428
  ldr r2, =_sbss
 8004464:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8004468:	200054b8 	.word	0x200054b8

0800446c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800446c:	e7fe      	b.n	800446c <ADC_IRQHandler>
	...

08004470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004474:	4b0e      	ldr	r3, [pc, #56]	@ (80044b0 <HAL_Init+0x40>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a0d      	ldr	r2, [pc, #52]	@ (80044b0 <HAL_Init+0x40>)
 800447a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800447e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004480:	4b0b      	ldr	r3, [pc, #44]	@ (80044b0 <HAL_Init+0x40>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a0a      	ldr	r2, [pc, #40]	@ (80044b0 <HAL_Init+0x40>)
 8004486:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800448a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800448c:	4b08      	ldr	r3, [pc, #32]	@ (80044b0 <HAL_Init+0x40>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a07      	ldr	r2, [pc, #28]	@ (80044b0 <HAL_Init+0x40>)
 8004492:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004496:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004498:	2003      	movs	r0, #3
 800449a:	f000 fd4f 	bl	8004f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800449e:	200f      	movs	r0, #15
 80044a0:	f000 f808 	bl	80044b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044a4:	f7ff fbe0 	bl	8003c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	40023c00 	.word	0x40023c00

080044b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044bc:	4b12      	ldr	r3, [pc, #72]	@ (8004508 <HAL_InitTick+0x54>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	4b12      	ldr	r3, [pc, #72]	@ (800450c <HAL_InitTick+0x58>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	4619      	mov	r1, r3
 80044c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80044ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80044ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fd67 	bl	8004fa6 <HAL_SYSTICK_Config>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e00e      	b.n	8004500 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b0f      	cmp	r3, #15
 80044e6:	d80a      	bhi.n	80044fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044e8:	2200      	movs	r2, #0
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	f04f 30ff 	mov.w	r0, #4294967295
 80044f0:	f000 fd2f 	bl	8004f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044f4:	4a06      	ldr	r2, [pc, #24]	@ (8004510 <HAL_InitTick+0x5c>)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e000      	b.n	8004500 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
}
 8004500:	4618      	mov	r0, r3
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	20000018 	.word	0x20000018
 800450c:	20000020 	.word	0x20000020
 8004510:	2000001c 	.word	0x2000001c

08004514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004518:	4b06      	ldr	r3, [pc, #24]	@ (8004534 <HAL_IncTick+0x20>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	461a      	mov	r2, r3
 800451e:	4b06      	ldr	r3, [pc, #24]	@ (8004538 <HAL_IncTick+0x24>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4413      	add	r3, r2
 8004524:	4a04      	ldr	r2, [pc, #16]	@ (8004538 <HAL_IncTick+0x24>)
 8004526:	6013      	str	r3, [r2, #0]
}
 8004528:	bf00      	nop
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	20000020 	.word	0x20000020
 8004538:	2000060c 	.word	0x2000060c

0800453c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return uwTick;
 8004540:	4b03      	ldr	r3, [pc, #12]	@ (8004550 <HAL_GetTick+0x14>)
 8004542:	681b      	ldr	r3, [r3, #0]
}
 8004544:	4618      	mov	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	2000060c 	.word	0x2000060c

08004554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800455c:	f7ff ffee 	bl	800453c <HAL_GetTick>
 8004560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456c:	d005      	beq.n	800457a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800456e:	4b0a      	ldr	r3, [pc, #40]	@ (8004598 <HAL_Delay+0x44>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4413      	add	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800457a:	bf00      	nop
 800457c:	f7ff ffde 	bl	800453c <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	429a      	cmp	r2, r3
 800458a:	d8f7      	bhi.n	800457c <HAL_Delay+0x28>
  {
  }
}
 800458c:	bf00      	nop
 800458e:	bf00      	nop
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20000020 	.word	0x20000020

0800459c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e033      	b.n	800461a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d109      	bne.n	80045ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7ff fb80 	bl	8003cc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d2:	f003 0310 	and.w	r3, r3, #16
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d118      	bne.n	800460c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045de:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80045e2:	f023 0302 	bic.w	r3, r3, #2
 80045e6:	f043 0202 	orr.w	r2, r3, #2
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fad8 	bl	8004ba4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fe:	f023 0303 	bic.w	r3, r3, #3
 8004602:	f043 0201 	orr.w	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	641a      	str	r2, [r3, #64]	@ 0x40
 800460a:	e001      	b.n	8004610 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004618:	7bfb      	ldrb	r3, [r7, #15]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
	...

08004624 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_ADC_Start+0x1a>
 800463a:	2302      	movs	r3, #2
 800463c:	e0b2      	b.n	80047a4 <HAL_ADC_Start+0x180>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b01      	cmp	r3, #1
 8004652:	d018      	beq.n	8004686 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004664:	4b52      	ldr	r3, [pc, #328]	@ (80047b0 <HAL_ADC_Start+0x18c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a52      	ldr	r2, [pc, #328]	@ (80047b4 <HAL_ADC_Start+0x190>)
 800466a:	fba2 2303 	umull	r2, r3, r2, r3
 800466e:	0c9a      	lsrs	r2, r3, #18
 8004670:	4613      	mov	r3, r2
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	4413      	add	r3, r2
 8004676:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004678:	e002      	b.n	8004680 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	3b01      	subs	r3, #1
 800467e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f9      	bne.n	800467a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b01      	cmp	r3, #1
 8004692:	d17a      	bne.n	800478a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004698:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800469c:	f023 0301 	bic.w	r3, r3, #1
 80046a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d007      	beq.n	80046c6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80046be:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046d2:	d106      	bne.n	80046e2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d8:	f023 0206 	bic.w	r2, r3, #6
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	645a      	str	r2, [r3, #68]	@ 0x44
 80046e0:	e002      	b.n	80046e8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80046f0:	4b31      	ldr	r3, [pc, #196]	@ (80047b8 <HAL_ADC_Start+0x194>)
 80046f2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80046fc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f003 031f 	and.w	r3, r3, #31
 8004706:	2b00      	cmp	r3, #0
 8004708:	d12a      	bne.n	8004760 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a2b      	ldr	r2, [pc, #172]	@ (80047bc <HAL_ADC_Start+0x198>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d015      	beq.n	8004740 <HAL_ADC_Start+0x11c>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a29      	ldr	r2, [pc, #164]	@ (80047c0 <HAL_ADC_Start+0x19c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d105      	bne.n	800472a <HAL_ADC_Start+0x106>
 800471e:	4b26      	ldr	r3, [pc, #152]	@ (80047b8 <HAL_ADC_Start+0x194>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f003 031f 	and.w	r3, r3, #31
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a25      	ldr	r2, [pc, #148]	@ (80047c4 <HAL_ADC_Start+0x1a0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d136      	bne.n	80047a2 <HAL_ADC_Start+0x17e>
 8004734:	4b20      	ldr	r3, [pc, #128]	@ (80047b8 <HAL_ADC_Start+0x194>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f003 0310 	and.w	r3, r3, #16
 800473c:	2b00      	cmp	r3, #0
 800473e:	d130      	bne.n	80047a2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d129      	bne.n	80047a2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800475c:	609a      	str	r2, [r3, #8]
 800475e:	e020      	b.n	80047a2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a15      	ldr	r2, [pc, #84]	@ (80047bc <HAL_ADC_Start+0x198>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d11b      	bne.n	80047a2 <HAL_ADC_Start+0x17e>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d114      	bne.n	80047a2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004786:	609a      	str	r2, [r3, #8]
 8004788:	e00b      	b.n	80047a2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478e:	f043 0210 	orr.w	r2, r3, #16
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479a:	f043 0201 	orr.w	r2, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	20000018 	.word	0x20000018
 80047b4:	431bde83 	.word	0x431bde83
 80047b8:	40012300 	.word	0x40012300
 80047bc:	40012000 	.word	0x40012000
 80047c0:	40012100 	.word	0x40012100
 80047c4:	40012200 	.word	0x40012200

080047c8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HAL_ADC_Stop+0x16>
 80047da:	2302      	movs	r3, #2
 80047dc:	e021      	b.n	8004822 <HAL_ADC_Stop+0x5a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0201 	bic.w	r2, r2, #1
 80047f4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d109      	bne.n	8004818 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004808:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800480c:	f023 0301 	bic.w	r3, r3, #1
 8004810:	f043 0201 	orr.w	r2, r3, #1
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b084      	sub	sp, #16
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
 8004836:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800484a:	d113      	bne.n	8004874 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800485a:	d10b      	bne.n	8004874 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004860:	f043 0220 	orr.w	r2, r3, #32
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e063      	b.n	800493c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004874:	f7ff fe62 	bl	800453c <HAL_GetTick>
 8004878:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800487a:	e021      	b.n	80048c0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004882:	d01d      	beq.n	80048c0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d007      	beq.n	800489a <HAL_ADC_PollForConversion+0x6c>
 800488a:	f7ff fe57 	bl	800453c <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d212      	bcs.n	80048c0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d00b      	beq.n	80048c0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ac:	f043 0204 	orr.w	r2, r3, #4
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e03d      	b.n	800493c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d1d6      	bne.n	800487c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f06f 0212 	mvn.w	r2, #18
 80048d6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048dc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d123      	bne.n	800493a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d11f      	bne.n	800493a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004900:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004904:	2b00      	cmp	r3, #0
 8004906:	d006      	beq.n	8004916 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004912:	2b00      	cmp	r3, #0
 8004914:	d111      	bne.n	800493a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004926:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d105      	bne.n	800493a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004932:	f043 0201 	orr.w	r2, r3, #1
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004952:	4618      	mov	r0, r3
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
	...

08004960 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_ADC_ConfigChannel+0x1c>
 8004978:	2302      	movs	r3, #2
 800497a:	e105      	b.n	8004b88 <HAL_ADC_ConfigChannel+0x228>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b09      	cmp	r3, #9
 800498a:	d925      	bls.n	80049d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68d9      	ldr	r1, [r3, #12]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	b29b      	uxth	r3, r3
 8004998:	461a      	mov	r2, r3
 800499a:	4613      	mov	r3, r2
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	4413      	add	r3, r2
 80049a0:	3b1e      	subs	r3, #30
 80049a2:	2207      	movs	r2, #7
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	43da      	mvns	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	400a      	ands	r2, r1
 80049b0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68d9      	ldr	r1, [r3, #12]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	4618      	mov	r0, r3
 80049c4:	4603      	mov	r3, r0
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	4403      	add	r3, r0
 80049ca:	3b1e      	subs	r3, #30
 80049cc:	409a      	lsls	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	60da      	str	r2, [r3, #12]
 80049d6:	e022      	b.n	8004a1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6919      	ldr	r1, [r3, #16]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	461a      	mov	r2, r3
 80049e6:	4613      	mov	r3, r2
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	4413      	add	r3, r2
 80049ec:	2207      	movs	r2, #7
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43da      	mvns	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	400a      	ands	r2, r1
 80049fa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6919      	ldr	r1, [r3, #16]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	689a      	ldr	r2, [r3, #8]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	4603      	mov	r3, r0
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	4403      	add	r3, r0
 8004a14:	409a      	lsls	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b06      	cmp	r3, #6
 8004a24:	d824      	bhi.n	8004a70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	3b05      	subs	r3, #5
 8004a38:	221f      	movs	r2, #31
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	43da      	mvns	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	400a      	ands	r2, r1
 8004a46:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	4618      	mov	r0, r3
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	3b05      	subs	r3, #5
 8004a62:	fa00 f203 	lsl.w	r2, r0, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a6e:	e04c      	b.n	8004b0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b0c      	cmp	r3, #12
 8004a76:	d824      	bhi.n	8004ac2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	3b23      	subs	r3, #35	@ 0x23
 8004a8a:	221f      	movs	r2, #31
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	43da      	mvns	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	400a      	ands	r2, r1
 8004a98:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	3b23      	subs	r3, #35	@ 0x23
 8004ab4:	fa00 f203 	lsl.w	r2, r0, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ac0:	e023      	b.n	8004b0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3b41      	subs	r3, #65	@ 0x41
 8004ad4:	221f      	movs	r2, #31
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	43da      	mvns	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	400a      	ands	r2, r1
 8004ae2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	4618      	mov	r0, r3
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	3b41      	subs	r3, #65	@ 0x41
 8004afe:	fa00 f203 	lsl.w	r2, r0, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b0a:	4b22      	ldr	r3, [pc, #136]	@ (8004b94 <HAL_ADC_ConfigChannel+0x234>)
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a21      	ldr	r2, [pc, #132]	@ (8004b98 <HAL_ADC_ConfigChannel+0x238>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d109      	bne.n	8004b2c <HAL_ADC_ConfigChannel+0x1cc>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b12      	cmp	r3, #18
 8004b1e:	d105      	bne.n	8004b2c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a19      	ldr	r2, [pc, #100]	@ (8004b98 <HAL_ADC_ConfigChannel+0x238>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d123      	bne.n	8004b7e <HAL_ADC_ConfigChannel+0x21e>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b10      	cmp	r3, #16
 8004b3c:	d003      	beq.n	8004b46 <HAL_ADC_ConfigChannel+0x1e6>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b11      	cmp	r3, #17
 8004b44:	d11b      	bne.n	8004b7e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b10      	cmp	r3, #16
 8004b58:	d111      	bne.n	8004b7e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b5a:	4b10      	ldr	r3, [pc, #64]	@ (8004b9c <HAL_ADC_ConfigChannel+0x23c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a10      	ldr	r2, [pc, #64]	@ (8004ba0 <HAL_ADC_ConfigChannel+0x240>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	0c9a      	lsrs	r2, r3, #18
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004b70:	e002      	b.n	8004b78 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	3b01      	subs	r3, #1
 8004b76:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f9      	bne.n	8004b72 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	40012300 	.word	0x40012300
 8004b98:	40012000 	.word	0x40012000
 8004b9c:	20000018 	.word	0x20000018
 8004ba0:	431bde83 	.word	0x431bde83

08004ba4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004bac:	4b79      	ldr	r3, [pc, #484]	@ (8004d94 <ADC_Init+0x1f0>)
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6859      	ldr	r1, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	021a      	lsls	r2, r3, #8
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004bfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6859      	ldr	r1, [r3, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6899      	ldr	r1, [r3, #8]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c36:	4a58      	ldr	r2, [pc, #352]	@ (8004d98 <ADC_Init+0x1f4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d022      	beq.n	8004c82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004c4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6899      	ldr	r1, [r3, #8]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004c6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6899      	ldr	r1, [r3, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	609a      	str	r2, [r3, #8]
 8004c80:	e00f      	b.n	8004ca2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004c90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004ca0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0202 	bic.w	r2, r2, #2
 8004cb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6899      	ldr	r1, [r3, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	7e1b      	ldrb	r3, [r3, #24]
 8004cbc:	005a      	lsls	r2, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01b      	beq.n	8004d08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cde:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004cee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6859      	ldr	r1, [r3, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	035a      	lsls	r2, r3, #13
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]
 8004d06:	e007      	b.n	8004d18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d16:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004d26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	051a      	lsls	r2, r3, #20
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004d4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6899      	ldr	r1, [r3, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004d5a:	025a      	lsls	r2, r3, #9
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6899      	ldr	r1, [r3, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	029a      	lsls	r2, r3, #10
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	609a      	str	r2, [r3, #8]
}
 8004d88:	bf00      	nop
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr
 8004d94:	40012300 	.word	0x40012300
 8004d98:	0f000001 	.word	0x0f000001

08004d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004dac:	4b0c      	ldr	r3, [pc, #48]	@ (8004de0 <__NVIC_SetPriorityGrouping+0x44>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004db8:	4013      	ands	r3, r2
 8004dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004dc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dce:	4a04      	ldr	r2, [pc, #16]	@ (8004de0 <__NVIC_SetPriorityGrouping+0x44>)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	60d3      	str	r3, [r2, #12]
}
 8004dd4:	bf00      	nop
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	e000ed00 	.word	0xe000ed00

08004de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004de8:	4b04      	ldr	r3, [pc, #16]	@ (8004dfc <__NVIC_GetPriorityGrouping+0x18>)
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	0a1b      	lsrs	r3, r3, #8
 8004dee:	f003 0307 	and.w	r3, r3, #7
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	e000ed00 	.word	0xe000ed00

08004e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	4603      	mov	r3, r0
 8004e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	db0b      	blt.n	8004e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e12:	79fb      	ldrb	r3, [r7, #7]
 8004e14:	f003 021f 	and.w	r2, r3, #31
 8004e18:	4907      	ldr	r1, [pc, #28]	@ (8004e38 <__NVIC_EnableIRQ+0x38>)
 8004e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1e:	095b      	lsrs	r3, r3, #5
 8004e20:	2001      	movs	r0, #1
 8004e22:	fa00 f202 	lsl.w	r2, r0, r2
 8004e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	e000e100 	.word	0xe000e100

08004e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	4603      	mov	r3, r0
 8004e44:	6039      	str	r1, [r7, #0]
 8004e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	db0a      	blt.n	8004e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	490c      	ldr	r1, [pc, #48]	@ (8004e88 <__NVIC_SetPriority+0x4c>)
 8004e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e5a:	0112      	lsls	r2, r2, #4
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	440b      	add	r3, r1
 8004e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e64:	e00a      	b.n	8004e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	4908      	ldr	r1, [pc, #32]	@ (8004e8c <__NVIC_SetPriority+0x50>)
 8004e6c:	79fb      	ldrb	r3, [r7, #7]
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	3b04      	subs	r3, #4
 8004e74:	0112      	lsls	r2, r2, #4
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	440b      	add	r3, r1
 8004e7a:	761a      	strb	r2, [r3, #24]
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	e000e100 	.word	0xe000e100
 8004e8c:	e000ed00 	.word	0xe000ed00

08004e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b089      	sub	sp, #36	@ 0x24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f003 0307 	and.w	r3, r3, #7
 8004ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	f1c3 0307 	rsb	r3, r3, #7
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	bf28      	it	cs
 8004eae:	2304      	movcs	r3, #4
 8004eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	2b06      	cmp	r3, #6
 8004eb8:	d902      	bls.n	8004ec0 <NVIC_EncodePriority+0x30>
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	3b03      	subs	r3, #3
 8004ebe:	e000      	b.n	8004ec2 <NVIC_EncodePriority+0x32>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	43da      	mvns	r2, r3
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	401a      	ands	r2, r3
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee2:	43d9      	mvns	r1, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ee8:	4313      	orrs	r3, r2
         );
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3724      	adds	r7, #36	@ 0x24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
	...

08004ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f08:	d301      	bcc.n	8004f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e00f      	b.n	8004f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8004f38 <SysTick_Config+0x40>)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f16:	210f      	movs	r1, #15
 8004f18:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1c:	f7ff ff8e 	bl	8004e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f20:	4b05      	ldr	r3, [pc, #20]	@ (8004f38 <SysTick_Config+0x40>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f26:	4b04      	ldr	r3, [pc, #16]	@ (8004f38 <SysTick_Config+0x40>)
 8004f28:	2207      	movs	r2, #7
 8004f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	e000e010 	.word	0xe000e010

08004f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff ff29 	bl	8004d9c <__NVIC_SetPriorityGrouping>
}
 8004f4a:	bf00      	nop
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b086      	sub	sp, #24
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	4603      	mov	r3, r0
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	607a      	str	r2, [r7, #4]
 8004f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f64:	f7ff ff3e 	bl	8004de4 <__NVIC_GetPriorityGrouping>
 8004f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	68b9      	ldr	r1, [r7, #8]
 8004f6e:	6978      	ldr	r0, [r7, #20]
 8004f70:	f7ff ff8e 	bl	8004e90 <NVIC_EncodePriority>
 8004f74:	4602      	mov	r2, r0
 8004f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff ff5d 	bl	8004e3c <__NVIC_SetPriority>
}
 8004f82:	bf00      	nop
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b082      	sub	sp, #8
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	4603      	mov	r3, r0
 8004f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff ff31 	bl	8004e00 <__NVIC_EnableIRQ>
}
 8004f9e:	bf00      	nop
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b082      	sub	sp, #8
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff ffa2 	bl	8004ef8 <SysTick_Config>
 8004fb4:	4603      	mov	r3, r0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004fcc:	f7ff fab6 	bl	800453c <HAL_GetTick>
 8004fd0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d008      	beq.n	8004ff0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2280      	movs	r2, #128	@ 0x80
 8004fe2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e052      	b.n	8005096 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0216 	bic.w	r2, r2, #22
 8004ffe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695a      	ldr	r2, [r3, #20]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800500e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005014:	2b00      	cmp	r3, #0
 8005016:	d103      	bne.n	8005020 <HAL_DMA_Abort+0x62>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800501c:	2b00      	cmp	r3, #0
 800501e:	d007      	beq.n	8005030 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0208 	bic.w	r2, r2, #8
 800502e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f022 0201 	bic.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005040:	e013      	b.n	800506a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005042:	f7ff fa7b 	bl	800453c <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b05      	cmp	r3, #5
 800504e:	d90c      	bls.n	800506a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2220      	movs	r2, #32
 8005054:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2203      	movs	r2, #3
 800505a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e015      	b.n	8005096 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e4      	bne.n	8005042 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800507c:	223f      	movs	r2, #63	@ 0x3f
 800507e:	409a      	lsls	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d004      	beq.n	80050bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2280      	movs	r2, #128	@ 0x80
 80050b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e00c      	b.n	80050d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2205      	movs	r2, #5
 80050c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0201 	bic.w	r2, r2, #1
 80050d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
	...

080050e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b089      	sub	sp, #36	@ 0x24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050fa:	2300      	movs	r3, #0
 80050fc:	61fb      	str	r3, [r7, #28]
 80050fe:	e16b      	b.n	80053d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005100:	2201      	movs	r2, #1
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4013      	ands	r3, r2
 8005112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	429a      	cmp	r2, r3
 800511a:	f040 815a 	bne.w	80053d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f003 0303 	and.w	r3, r3, #3
 8005126:	2b01      	cmp	r3, #1
 8005128:	d005      	beq.n	8005136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005132:	2b02      	cmp	r3, #2
 8005134:	d130      	bne.n	8005198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	2203      	movs	r2, #3
 8005142:	fa02 f303 	lsl.w	r3, r2, r3
 8005146:	43db      	mvns	r3, r3
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	4013      	ands	r3, r2
 800514c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	4313      	orrs	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800516c:	2201      	movs	r2, #1
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	43db      	mvns	r3, r3
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	4013      	ands	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	091b      	lsrs	r3, r3, #4
 8005182:	f003 0201 	and.w	r2, r3, #1
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	4313      	orrs	r3, r2
 8005190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d017      	beq.n	80051d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	2203      	movs	r2, #3
 80051b0:	fa02 f303 	lsl.w	r3, r2, r3
 80051b4:	43db      	mvns	r3, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4013      	ands	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	fa02 f303 	lsl.w	r3, r2, r3
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f003 0303 	and.w	r3, r3, #3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d123      	bne.n	8005228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	08da      	lsrs	r2, r3, #3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	3208      	adds	r2, #8
 80051e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	220f      	movs	r2, #15
 80051f8:	fa02 f303 	lsl.w	r3, r2, r3
 80051fc:	43db      	mvns	r3, r3
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	4013      	ands	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	691a      	ldr	r2, [r3, #16]
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	fa02 f303 	lsl.w	r3, r2, r3
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	4313      	orrs	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	08da      	lsrs	r2, r3, #3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	3208      	adds	r2, #8
 8005222:	69b9      	ldr	r1, [r7, #24]
 8005224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	2203      	movs	r2, #3
 8005234:	fa02 f303 	lsl.w	r3, r2, r3
 8005238:	43db      	mvns	r3, r3
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	4013      	ands	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f003 0203 	and.w	r2, r3, #3
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	4313      	orrs	r3, r2
 8005254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 80b4 	beq.w	80053d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800526a:	2300      	movs	r3, #0
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	4b60      	ldr	r3, [pc, #384]	@ (80053f0 <HAL_GPIO_Init+0x30c>)
 8005270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005272:	4a5f      	ldr	r2, [pc, #380]	@ (80053f0 <HAL_GPIO_Init+0x30c>)
 8005274:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005278:	6453      	str	r3, [r2, #68]	@ 0x44
 800527a:	4b5d      	ldr	r3, [pc, #372]	@ (80053f0 <HAL_GPIO_Init+0x30c>)
 800527c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005286:	4a5b      	ldr	r2, [pc, #364]	@ (80053f4 <HAL_GPIO_Init+0x310>)
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	089b      	lsrs	r3, r3, #2
 800528c:	3302      	adds	r3, #2
 800528e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	220f      	movs	r2, #15
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	43db      	mvns	r3, r3
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	4013      	ands	r3, r2
 80052a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a52      	ldr	r2, [pc, #328]	@ (80053f8 <HAL_GPIO_Init+0x314>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d02b      	beq.n	800530a <HAL_GPIO_Init+0x226>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a51      	ldr	r2, [pc, #324]	@ (80053fc <HAL_GPIO_Init+0x318>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d025      	beq.n	8005306 <HAL_GPIO_Init+0x222>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a50      	ldr	r2, [pc, #320]	@ (8005400 <HAL_GPIO_Init+0x31c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01f      	beq.n	8005302 <HAL_GPIO_Init+0x21e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a4f      	ldr	r2, [pc, #316]	@ (8005404 <HAL_GPIO_Init+0x320>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d019      	beq.n	80052fe <HAL_GPIO_Init+0x21a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a4e      	ldr	r2, [pc, #312]	@ (8005408 <HAL_GPIO_Init+0x324>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d013      	beq.n	80052fa <HAL_GPIO_Init+0x216>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a4d      	ldr	r2, [pc, #308]	@ (800540c <HAL_GPIO_Init+0x328>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00d      	beq.n	80052f6 <HAL_GPIO_Init+0x212>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a4c      	ldr	r2, [pc, #304]	@ (8005410 <HAL_GPIO_Init+0x32c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d007      	beq.n	80052f2 <HAL_GPIO_Init+0x20e>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a4b      	ldr	r2, [pc, #300]	@ (8005414 <HAL_GPIO_Init+0x330>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d101      	bne.n	80052ee <HAL_GPIO_Init+0x20a>
 80052ea:	2307      	movs	r3, #7
 80052ec:	e00e      	b.n	800530c <HAL_GPIO_Init+0x228>
 80052ee:	2308      	movs	r3, #8
 80052f0:	e00c      	b.n	800530c <HAL_GPIO_Init+0x228>
 80052f2:	2306      	movs	r3, #6
 80052f4:	e00a      	b.n	800530c <HAL_GPIO_Init+0x228>
 80052f6:	2305      	movs	r3, #5
 80052f8:	e008      	b.n	800530c <HAL_GPIO_Init+0x228>
 80052fa:	2304      	movs	r3, #4
 80052fc:	e006      	b.n	800530c <HAL_GPIO_Init+0x228>
 80052fe:	2303      	movs	r3, #3
 8005300:	e004      	b.n	800530c <HAL_GPIO_Init+0x228>
 8005302:	2302      	movs	r3, #2
 8005304:	e002      	b.n	800530c <HAL_GPIO_Init+0x228>
 8005306:	2301      	movs	r3, #1
 8005308:	e000      	b.n	800530c <HAL_GPIO_Init+0x228>
 800530a:	2300      	movs	r3, #0
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	f002 0203 	and.w	r2, r2, #3
 8005312:	0092      	lsls	r2, r2, #2
 8005314:	4093      	lsls	r3, r2
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	4313      	orrs	r3, r2
 800531a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800531c:	4935      	ldr	r1, [pc, #212]	@ (80053f4 <HAL_GPIO_Init+0x310>)
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	089b      	lsrs	r3, r3, #2
 8005322:	3302      	adds	r3, #2
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800532a:	4b3b      	ldr	r3, [pc, #236]	@ (8005418 <HAL_GPIO_Init+0x334>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	43db      	mvns	r3, r3
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	4013      	ands	r3, r2
 8005338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800534e:	4a32      	ldr	r2, [pc, #200]	@ (8005418 <HAL_GPIO_Init+0x334>)
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005354:	4b30      	ldr	r3, [pc, #192]	@ (8005418 <HAL_GPIO_Init+0x334>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	43db      	mvns	r3, r3
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	4013      	ands	r3, r2
 8005362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	4313      	orrs	r3, r2
 8005376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005378:	4a27      	ldr	r2, [pc, #156]	@ (8005418 <HAL_GPIO_Init+0x334>)
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800537e:	4b26      	ldr	r3, [pc, #152]	@ (8005418 <HAL_GPIO_Init+0x334>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	43db      	mvns	r3, r3
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	4013      	ands	r3, r2
 800538c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005418 <HAL_GPIO_Init+0x334>)
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005418 <HAL_GPIO_Init+0x334>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	43db      	mvns	r3, r3
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	4013      	ands	r3, r2
 80053b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053cc:	4a12      	ldr	r2, [pc, #72]	@ (8005418 <HAL_GPIO_Init+0x334>)
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	3301      	adds	r3, #1
 80053d6:	61fb      	str	r3, [r7, #28]
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	2b0f      	cmp	r3, #15
 80053dc:	f67f ae90 	bls.w	8005100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053e0:	bf00      	nop
 80053e2:	bf00      	nop
 80053e4:	3724      	adds	r7, #36	@ 0x24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40023800 	.word	0x40023800
 80053f4:	40013800 	.word	0x40013800
 80053f8:	40020000 	.word	0x40020000
 80053fc:	40020400 	.word	0x40020400
 8005400:	40020800 	.word	0x40020800
 8005404:	40020c00 	.word	0x40020c00
 8005408:	40021000 	.word	0x40021000
 800540c:	40021400 	.word	0x40021400
 8005410:	40021800 	.word	0x40021800
 8005414:	40021c00 	.word	0x40021c00
 8005418:	40013c00 	.word	0x40013c00

0800541c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	460b      	mov	r3, r1
 8005426:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	887b      	ldrh	r3, [r7, #2]
 800542e:	4013      	ands	r3, r2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005434:	2301      	movs	r3, #1
 8005436:	73fb      	strb	r3, [r7, #15]
 8005438:	e001      	b.n	800543e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800543a:	2300      	movs	r3, #0
 800543c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800543e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	807b      	strh	r3, [r7, #2]
 8005458:	4613      	mov	r3, r2
 800545a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800545c:	787b      	ldrb	r3, [r7, #1]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005462:	887a      	ldrh	r2, [r7, #2]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005468:	e003      	b.n	8005472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800546a:	887b      	ldrh	r3, [r7, #2]
 800546c:	041a      	lsls	r2, r3, #16
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	619a      	str	r2, [r3, #24]
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800547e:	b480      	push	{r7}
 8005480:	b085      	sub	sp, #20
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
 8005486:	460b      	mov	r3, r1
 8005488:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005490:	887a      	ldrh	r2, [r7, #2]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4013      	ands	r3, r2
 8005496:	041a      	lsls	r2, r3, #16
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	43d9      	mvns	r1, r3
 800549c:	887b      	ldrh	r3, [r7, #2]
 800549e:	400b      	ands	r3, r1
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	619a      	str	r2, [r3, #24]
}
 80054a6:	bf00      	nop
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
	...

080054b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	4603      	mov	r3, r0
 80054bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80054be:	4b08      	ldr	r3, [pc, #32]	@ (80054e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054c0:	695a      	ldr	r2, [r3, #20]
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	4013      	ands	r3, r2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d006      	beq.n	80054d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80054ca:	4a05      	ldr	r2, [pc, #20]	@ (80054e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80054cc:	88fb      	ldrh	r3, [r7, #6]
 80054ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80054d0:	88fb      	ldrh	r3, [r7, #6]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fe f844 	bl	8003560 <HAL_GPIO_EXTI_Callback>
  }
}
 80054d8:	bf00      	nop
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40013c00 	.word	0x40013c00

080054e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e12b      	b.n	800574e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fe fc4c 	bl	8003da8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2224      	movs	r2, #36	@ 0x24
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f022 0201 	bic.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005536:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005546:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005548:	f001 fc48 	bl	8006ddc <HAL_RCC_GetPCLK1Freq>
 800554c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	4a81      	ldr	r2, [pc, #516]	@ (8005758 <HAL_I2C_Init+0x274>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d807      	bhi.n	8005568 <HAL_I2C_Init+0x84>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4a80      	ldr	r2, [pc, #512]	@ (800575c <HAL_I2C_Init+0x278>)
 800555c:	4293      	cmp	r3, r2
 800555e:	bf94      	ite	ls
 8005560:	2301      	movls	r3, #1
 8005562:	2300      	movhi	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	e006      	b.n	8005576 <HAL_I2C_Init+0x92>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4a7d      	ldr	r2, [pc, #500]	@ (8005760 <HAL_I2C_Init+0x27c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	bf94      	ite	ls
 8005570:	2301      	movls	r3, #1
 8005572:	2300      	movhi	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e0e7      	b.n	800574e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4a78      	ldr	r2, [pc, #480]	@ (8005764 <HAL_I2C_Init+0x280>)
 8005582:	fba2 2303 	umull	r2, r3, r2, r3
 8005586:	0c9b      	lsrs	r3, r3, #18
 8005588:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	430a      	orrs	r2, r1
 800559c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	4a6a      	ldr	r2, [pc, #424]	@ (8005758 <HAL_I2C_Init+0x274>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d802      	bhi.n	80055b8 <HAL_I2C_Init+0xd4>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	3301      	adds	r3, #1
 80055b6:	e009      	b.n	80055cc <HAL_I2C_Init+0xe8>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80055be:	fb02 f303 	mul.w	r3, r2, r3
 80055c2:	4a69      	ldr	r2, [pc, #420]	@ (8005768 <HAL_I2C_Init+0x284>)
 80055c4:	fba2 2303 	umull	r2, r3, r2, r3
 80055c8:	099b      	lsrs	r3, r3, #6
 80055ca:	3301      	adds	r3, #1
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	6812      	ldr	r2, [r2, #0]
 80055d0:	430b      	orrs	r3, r1
 80055d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80055de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	495c      	ldr	r1, [pc, #368]	@ (8005758 <HAL_I2C_Init+0x274>)
 80055e8:	428b      	cmp	r3, r1
 80055ea:	d819      	bhi.n	8005620 <HAL_I2C_Init+0x13c>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	1e59      	subs	r1, r3, #1
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80055fa:	1c59      	adds	r1, r3, #1
 80055fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005600:	400b      	ands	r3, r1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <HAL_I2C_Init+0x138>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1e59      	subs	r1, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	fbb1 f3f3 	udiv	r3, r1, r3
 8005614:	3301      	adds	r3, #1
 8005616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800561a:	e051      	b.n	80056c0 <HAL_I2C_Init+0x1dc>
 800561c:	2304      	movs	r3, #4
 800561e:	e04f      	b.n	80056c0 <HAL_I2C_Init+0x1dc>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d111      	bne.n	800564c <HAL_I2C_Init+0x168>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	1e58      	subs	r0, r3, #1
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6859      	ldr	r1, [r3, #4]
 8005630:	460b      	mov	r3, r1
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	440b      	add	r3, r1
 8005636:	fbb0 f3f3 	udiv	r3, r0, r3
 800563a:	3301      	adds	r3, #1
 800563c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005640:	2b00      	cmp	r3, #0
 8005642:	bf0c      	ite	eq
 8005644:	2301      	moveq	r3, #1
 8005646:	2300      	movne	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	e012      	b.n	8005672 <HAL_I2C_Init+0x18e>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	1e58      	subs	r0, r3, #1
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6859      	ldr	r1, [r3, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	0099      	lsls	r1, r3, #2
 800565c:	440b      	add	r3, r1
 800565e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005662:	3301      	adds	r3, #1
 8005664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005668:	2b00      	cmp	r3, #0
 800566a:	bf0c      	ite	eq
 800566c:	2301      	moveq	r3, #1
 800566e:	2300      	movne	r3, #0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <HAL_I2C_Init+0x196>
 8005676:	2301      	movs	r3, #1
 8005678:	e022      	b.n	80056c0 <HAL_I2C_Init+0x1dc>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10e      	bne.n	80056a0 <HAL_I2C_Init+0x1bc>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	1e58      	subs	r0, r3, #1
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6859      	ldr	r1, [r3, #4]
 800568a:	460b      	mov	r3, r1
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	440b      	add	r3, r1
 8005690:	fbb0 f3f3 	udiv	r3, r0, r3
 8005694:	3301      	adds	r3, #1
 8005696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800569a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800569e:	e00f      	b.n	80056c0 <HAL_I2C_Init+0x1dc>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	1e58      	subs	r0, r3, #1
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6859      	ldr	r1, [r3, #4]
 80056a8:	460b      	mov	r3, r1
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	0099      	lsls	r1, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80056b6:	3301      	adds	r3, #1
 80056b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	6809      	ldr	r1, [r1, #0]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69da      	ldr	r2, [r3, #28]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	431a      	orrs	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80056ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6911      	ldr	r1, [r2, #16]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	68d2      	ldr	r2, [r2, #12]
 80056fa:	4311      	orrs	r1, r2
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6812      	ldr	r2, [r2, #0]
 8005700:	430b      	orrs	r3, r1
 8005702:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	695a      	ldr	r2, [r3, #20]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0201 	orr.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2220      	movs	r2, #32
 800573a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	000186a0 	.word	0x000186a0
 800575c:	001e847f 	.word	0x001e847f
 8005760:	003d08ff 	.word	0x003d08ff
 8005764:	431bde83 	.word	0x431bde83
 8005768:	10624dd3 	.word	0x10624dd3

0800576c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af02      	add	r7, sp, #8
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	4608      	mov	r0, r1
 8005776:	4611      	mov	r1, r2
 8005778:	461a      	mov	r2, r3
 800577a:	4603      	mov	r3, r0
 800577c:	817b      	strh	r3, [r7, #10]
 800577e:	460b      	mov	r3, r1
 8005780:	813b      	strh	r3, [r7, #8]
 8005782:	4613      	mov	r3, r2
 8005784:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005786:	f7fe fed9 	bl	800453c <HAL_GetTick>
 800578a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b20      	cmp	r3, #32
 8005796:	f040 80d9 	bne.w	800594c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	2319      	movs	r3, #25
 80057a0:	2201      	movs	r2, #1
 80057a2:	496d      	ldr	r1, [pc, #436]	@ (8005958 <HAL_I2C_Mem_Write+0x1ec>)
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f000 fc8b 	bl	80060c0 <I2C_WaitOnFlagUntilTimeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80057b0:	2302      	movs	r3, #2
 80057b2:	e0cc      	b.n	800594e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d101      	bne.n	80057c2 <HAL_I2C_Mem_Write+0x56>
 80057be:	2302      	movs	r3, #2
 80057c0:	e0c5      	b.n	800594e <HAL_I2C_Mem_Write+0x1e2>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d007      	beq.n	80057e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0201 	orr.w	r2, r2, #1
 80057e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2221      	movs	r2, #33	@ 0x21
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2240      	movs	r2, #64	@ 0x40
 8005804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a3a      	ldr	r2, [r7, #32]
 8005812:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005818:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800581e:	b29a      	uxth	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4a4d      	ldr	r2, [pc, #308]	@ (800595c <HAL_I2C_Mem_Write+0x1f0>)
 8005828:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800582a:	88f8      	ldrh	r0, [r7, #6]
 800582c:	893a      	ldrh	r2, [r7, #8]
 800582e:	8979      	ldrh	r1, [r7, #10]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	9301      	str	r3, [sp, #4]
 8005834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	4603      	mov	r3, r0
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 fac2 	bl	8005dc4 <I2C_RequestMemoryWrite>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d052      	beq.n	80058ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e081      	b.n	800594e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 fd50 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00d      	beq.n	8005876 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585e:	2b04      	cmp	r3, #4
 8005860:	d107      	bne.n	8005872 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005870:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e06b      	b.n	800594e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587a:	781a      	ldrb	r2, [r3, #0]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800589c:	b29b      	uxth	r3, r3
 800589e:	3b01      	subs	r3, #1
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d11b      	bne.n	80058ec <HAL_I2C_Mem_Write+0x180>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d017      	beq.n	80058ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c0:	781a      	ldrb	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058d6:	3b01      	subs	r3, #1
 80058d8:	b29a      	uxth	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1aa      	bne.n	800584a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 fd43 	bl	8006384 <I2C_WaitOnBTFFlagUntilTimeout>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00d      	beq.n	8005920 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005908:	2b04      	cmp	r3, #4
 800590a:	d107      	bne.n	800591c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800591a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e016      	b.n	800594e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800592e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	e000      	b.n	800594e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800594c:	2302      	movs	r3, #2
  }
}
 800594e:	4618      	mov	r0, r3
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	00100002 	.word	0x00100002
 800595c:	ffff0000 	.word	0xffff0000

08005960 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b08c      	sub	sp, #48	@ 0x30
 8005964:	af02      	add	r7, sp, #8
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	4608      	mov	r0, r1
 800596a:	4611      	mov	r1, r2
 800596c:	461a      	mov	r2, r3
 800596e:	4603      	mov	r3, r0
 8005970:	817b      	strh	r3, [r7, #10]
 8005972:	460b      	mov	r3, r1
 8005974:	813b      	strh	r3, [r7, #8]
 8005976:	4613      	mov	r3, r2
 8005978:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800597a:	f7fe fddf 	bl	800453c <HAL_GetTick>
 800597e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b20      	cmp	r3, #32
 800598a:	f040 8214 	bne.w	8005db6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	2319      	movs	r3, #25
 8005994:	2201      	movs	r2, #1
 8005996:	497b      	ldr	r1, [pc, #492]	@ (8005b84 <HAL_I2C_Mem_Read+0x224>)
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 fb91 	bl	80060c0 <I2C_WaitOnFlagUntilTimeout>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80059a4:	2302      	movs	r3, #2
 80059a6:	e207      	b.n	8005db8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d101      	bne.n	80059b6 <HAL_I2C_Mem_Read+0x56>
 80059b2:	2302      	movs	r3, #2
 80059b4:	e200      	b.n	8005db8 <HAL_I2C_Mem_Read+0x458>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d007      	beq.n	80059dc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2222      	movs	r2, #34	@ 0x22
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2240      	movs	r2, #64	@ 0x40
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a06:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4a5b      	ldr	r2, [pc, #364]	@ (8005b88 <HAL_I2C_Mem_Read+0x228>)
 8005a1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a1e:	88f8      	ldrh	r0, [r7, #6]
 8005a20:	893a      	ldrh	r2, [r7, #8]
 8005a22:	8979      	ldrh	r1, [r7, #10]
 8005a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a26:	9301      	str	r3, [sp, #4]
 8005a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 fa5e 	bl	8005ef0 <I2C_RequestMemoryRead>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e1bc      	b.n	8005db8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d113      	bne.n	8005a6e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a46:	2300      	movs	r3, #0
 8005a48:	623b      	str	r3, [r7, #32]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	623b      	str	r3, [r7, #32]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	623b      	str	r3, [r7, #32]
 8005a5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	e190      	b.n	8005d90 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d11b      	bne.n	8005aae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a86:	2300      	movs	r3, #0
 8005a88:	61fb      	str	r3, [r7, #28]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	61fb      	str	r3, [r7, #28]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	61fb      	str	r3, [r7, #28]
 8005a9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	e170      	b.n	8005d90 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d11b      	bne.n	8005aee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ac4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ad4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61bb      	str	r3, [r7, #24]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	61bb      	str	r3, [r7, #24]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	61bb      	str	r3, [r7, #24]
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	e150      	b.n	8005d90 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aee:	2300      	movs	r3, #0
 8005af0:	617b      	str	r3, [r7, #20]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	617b      	str	r3, [r7, #20]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005b04:	e144      	b.n	8005d90 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b0a:	2b03      	cmp	r3, #3
 8005b0c:	f200 80f1 	bhi.w	8005cf2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d123      	bne.n	8005b60 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b1a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 fc79 	bl	8006414 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e145      	b.n	8005db8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	691a      	ldr	r2, [r3, #16]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3e:	1c5a      	adds	r2, r3, #1
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005b5e:	e117      	b.n	8005d90 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d14e      	bne.n	8005c06 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6e:	2200      	movs	r2, #0
 8005b70:	4906      	ldr	r1, [pc, #24]	@ (8005b8c <HAL_I2C_Mem_Read+0x22c>)
 8005b72:	68f8      	ldr	r0, [r7, #12]
 8005b74:	f000 faa4 	bl	80060c0 <I2C_WaitOnFlagUntilTimeout>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d008      	beq.n	8005b90 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e11a      	b.n	8005db8 <HAL_I2C_Mem_Read+0x458>
 8005b82:	bf00      	nop
 8005b84:	00100002 	.word	0x00100002
 8005b88:	ffff0000 	.word	0xffff0000
 8005b8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691a      	ldr	r2, [r3, #16]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005baa:	b2d2      	uxtb	r2, r2
 8005bac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c04:	e0c4      	b.n	8005d90 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	496c      	ldr	r1, [pc, #432]	@ (8005dc0 <HAL_I2C_Mem_Read+0x460>)
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 fa55 	bl	80060c0 <I2C_WaitOnFlagUntilTimeout>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e0cb      	b.n	8005db8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691a      	ldr	r2, [r3, #16]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3a:	b2d2      	uxtb	r2, r2
 8005c3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c68:	2200      	movs	r2, #0
 8005c6a:	4955      	ldr	r1, [pc, #340]	@ (8005dc0 <HAL_I2C_Mem_Read+0x460>)
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 fa27 	bl	80060c0 <I2C_WaitOnFlagUntilTimeout>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e09d      	b.n	8005db8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	691a      	ldr	r2, [r3, #16]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c96:	b2d2      	uxtb	r2, r2
 8005c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9e:	1c5a      	adds	r2, r3, #1
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b29a      	uxth	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	691a      	ldr	r2, [r3, #16]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd0:	1c5a      	adds	r2, r3, #1
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005cf0:	e04e      	b.n	8005d90 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cf4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f000 fb8c 	bl	8006414 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d001      	beq.n	8005d06 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e058      	b.n	8005db8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691a      	ldr	r2, [r3, #16]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d10:	b2d2      	uxtb	r2, r2
 8005d12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d22:	3b01      	subs	r3, #1
 8005d24:	b29a      	uxth	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f003 0304 	and.w	r3, r3, #4
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d124      	bne.n	8005d90 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d107      	bne.n	8005d5e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d5c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	691a      	ldr	r2, [r3, #16]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f47f aeb6 	bne.w	8005b06 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005db2:	2300      	movs	r3, #0
 8005db4:	e000      	b.n	8005db8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005db6:	2302      	movs	r3, #2
  }
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3728      	adds	r7, #40	@ 0x28
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	00010004 	.word	0x00010004

08005dc4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af02      	add	r7, sp, #8
 8005dca:	60f8      	str	r0, [r7, #12]
 8005dcc:	4608      	mov	r0, r1
 8005dce:	4611      	mov	r1, r2
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	817b      	strh	r3, [r7, #10]
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	813b      	strh	r3, [r7, #8]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 f960 	bl	80060c0 <I2C_WaitOnFlagUntilTimeout>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00d      	beq.n	8005e22 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e14:	d103      	bne.n	8005e1e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e05f      	b.n	8005ee2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e22:	897b      	ldrh	r3, [r7, #10]
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	461a      	mov	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e34:	6a3a      	ldr	r2, [r7, #32]
 8005e36:	492d      	ldr	r1, [pc, #180]	@ (8005eec <I2C_RequestMemoryWrite+0x128>)
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 f9bb 	bl	80061b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e04c      	b.n	8005ee2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e48:	2300      	movs	r3, #0
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e60:	6a39      	ldr	r1, [r7, #32]
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f000 fa46 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00d      	beq.n	8005e8a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d107      	bne.n	8005e86 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e02b      	b.n	8005ee2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e8a:	88fb      	ldrh	r3, [r7, #6]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d105      	bne.n	8005e9c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e90:	893b      	ldrh	r3, [r7, #8]
 8005e92:	b2da      	uxtb	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	611a      	str	r2, [r3, #16]
 8005e9a:	e021      	b.n	8005ee0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e9c:	893b      	ldrh	r3, [r7, #8]
 8005e9e:	0a1b      	lsrs	r3, r3, #8
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eac:	6a39      	ldr	r1, [r7, #32]
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 fa20 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00d      	beq.n	8005ed6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	d107      	bne.n	8005ed2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ed0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e005      	b.n	8005ee2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ed6:	893b      	ldrh	r3, [r7, #8]
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	00010002 	.word	0x00010002

08005ef0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af02      	add	r7, sp, #8
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	4608      	mov	r0, r1
 8005efa:	4611      	mov	r1, r2
 8005efc:	461a      	mov	r2, r3
 8005efe:	4603      	mov	r3, r0
 8005f00:	817b      	strh	r3, [r7, #10]
 8005f02:	460b      	mov	r3, r1
 8005f04:	813b      	strh	r3, [r7, #8]
 8005f06:	4613      	mov	r3, r2
 8005f08:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f18:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 f8c2 	bl	80060c0 <I2C_WaitOnFlagUntilTimeout>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00d      	beq.n	8005f5e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f50:	d103      	bne.n	8005f5a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f58:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e0aa      	b.n	80060b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f5e:	897b      	ldrh	r3, [r7, #10]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	461a      	mov	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005f6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f70:	6a3a      	ldr	r2, [r7, #32]
 8005f72:	4952      	ldr	r1, [pc, #328]	@ (80060bc <I2C_RequestMemoryRead+0x1cc>)
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 f91d 	bl	80061b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e097      	b.n	80060b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f84:	2300      	movs	r3, #0
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	617b      	str	r3, [r7, #20]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	617b      	str	r3, [r7, #20]
 8005f98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f9c:	6a39      	ldr	r1, [r7, #32]
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 f9a8 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00d      	beq.n	8005fc6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	d107      	bne.n	8005fc2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e076      	b.n	80060b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fc6:	88fb      	ldrh	r3, [r7, #6]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d105      	bne.n	8005fd8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fcc:	893b      	ldrh	r3, [r7, #8]
 8005fce:	b2da      	uxtb	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	611a      	str	r2, [r3, #16]
 8005fd6:	e021      	b.n	800601c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fd8:	893b      	ldrh	r3, [r7, #8]
 8005fda:	0a1b      	lsrs	r3, r3, #8
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	b2da      	uxtb	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fe8:	6a39      	ldr	r1, [r7, #32]
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 f982 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00d      	beq.n	8006012 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d107      	bne.n	800600e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800600c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e050      	b.n	80060b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006012:	893b      	ldrh	r3, [r7, #8]
 8006014:	b2da      	uxtb	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800601c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800601e:	6a39      	ldr	r1, [r7, #32]
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 f967 	bl	80062f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00d      	beq.n	8006048 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006030:	2b04      	cmp	r3, #4
 8006032:	d107      	bne.n	8006044 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006042:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e035      	b.n	80060b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006056:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	2200      	movs	r2, #0
 8006060:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 f82b 	bl	80060c0 <I2C_WaitOnFlagUntilTimeout>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00d      	beq.n	800608c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800607a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800607e:	d103      	bne.n	8006088 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006086:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e013      	b.n	80060b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800608c:	897b      	ldrh	r3, [r7, #10]
 800608e:	b2db      	uxtb	r3, r3
 8006090:	f043 0301 	orr.w	r3, r3, #1
 8006094:	b2da      	uxtb	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800609c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609e:	6a3a      	ldr	r2, [r7, #32]
 80060a0:	4906      	ldr	r1, [pc, #24]	@ (80060bc <I2C_RequestMemoryRead+0x1cc>)
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 f886 	bl	80061b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e000      	b.n	80060b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3718      	adds	r7, #24
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	00010002 	.word	0x00010002

080060c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	603b      	str	r3, [r7, #0]
 80060cc:	4613      	mov	r3, r2
 80060ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060d0:	e048      	b.n	8006164 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d8:	d044      	beq.n	8006164 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060da:	f7fe fa2f 	bl	800453c <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d302      	bcc.n	80060f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d139      	bne.n	8006164 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	0c1b      	lsrs	r3, r3, #16
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d10d      	bne.n	8006116 <I2C_WaitOnFlagUntilTimeout+0x56>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	43da      	mvns	r2, r3
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	4013      	ands	r3, r2
 8006106:	b29b      	uxth	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	bf0c      	ite	eq
 800610c:	2301      	moveq	r3, #1
 800610e:	2300      	movne	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	e00c      	b.n	8006130 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	43da      	mvns	r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	4013      	ands	r3, r2
 8006122:	b29b      	uxth	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	bf0c      	ite	eq
 8006128:	2301      	moveq	r3, #1
 800612a:	2300      	movne	r3, #0
 800612c:	b2db      	uxtb	r3, r3
 800612e:	461a      	mov	r2, r3
 8006130:	79fb      	ldrb	r3, [r7, #7]
 8006132:	429a      	cmp	r2, r3
 8006134:	d116      	bne.n	8006164 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2220      	movs	r2, #32
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006150:	f043 0220 	orr.w	r2, r3, #32
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e023      	b.n	80061ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	0c1b      	lsrs	r3, r3, #16
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b01      	cmp	r3, #1
 800616c:	d10d      	bne.n	800618a <I2C_WaitOnFlagUntilTimeout+0xca>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	43da      	mvns	r2, r3
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	4013      	ands	r3, r2
 800617a:	b29b      	uxth	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	bf0c      	ite	eq
 8006180:	2301      	moveq	r3, #1
 8006182:	2300      	movne	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	461a      	mov	r2, r3
 8006188:	e00c      	b.n	80061a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	43da      	mvns	r2, r3
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	4013      	ands	r3, r2
 8006196:	b29b      	uxth	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	bf0c      	ite	eq
 800619c:	2301      	moveq	r3, #1
 800619e:	2300      	movne	r3, #0
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	79fb      	ldrb	r3, [r7, #7]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d093      	beq.n	80060d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061c2:	e071      	b.n	80062a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061d2:	d123      	bne.n	800621c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80061ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006208:	f043 0204 	orr.w	r2, r3, #4
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e067      	b.n	80062ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006222:	d041      	beq.n	80062a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006224:	f7fe f98a 	bl	800453c <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	429a      	cmp	r2, r3
 8006232:	d302      	bcc.n	800623a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d136      	bne.n	80062a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	0c1b      	lsrs	r3, r3, #16
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b01      	cmp	r3, #1
 8006242:	d10c      	bne.n	800625e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695b      	ldr	r3, [r3, #20]
 800624a:	43da      	mvns	r2, r3
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4013      	ands	r3, r2
 8006250:	b29b      	uxth	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	bf14      	ite	ne
 8006256:	2301      	movne	r3, #1
 8006258:	2300      	moveq	r3, #0
 800625a:	b2db      	uxtb	r3, r3
 800625c:	e00b      	b.n	8006276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	43da      	mvns	r2, r3
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	4013      	ands	r3, r2
 800626a:	b29b      	uxth	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	bf14      	ite	ne
 8006270:	2301      	movne	r3, #1
 8006272:	2300      	moveq	r3, #0
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d016      	beq.n	80062a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2220      	movs	r2, #32
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006294:	f043 0220 	orr.w	r2, r3, #32
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e021      	b.n	80062ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	0c1b      	lsrs	r3, r3, #16
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d10c      	bne.n	80062cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	43da      	mvns	r2, r3
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	4013      	ands	r3, r2
 80062be:	b29b      	uxth	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	bf14      	ite	ne
 80062c4:	2301      	movne	r3, #1
 80062c6:	2300      	moveq	r3, #0
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	e00b      	b.n	80062e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	43da      	mvns	r2, r3
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4013      	ands	r3, r2
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	bf14      	ite	ne
 80062de:	2301      	movne	r3, #1
 80062e0:	2300      	moveq	r3, #0
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f47f af6d 	bne.w	80061c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006300:	e034      	b.n	800636c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 f8e3 	bl	80064ce <I2C_IsAcknowledgeFailed>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e034      	b.n	800637c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006318:	d028      	beq.n	800636c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800631a:	f7fe f90f 	bl	800453c <HAL_GetTick>
 800631e:	4602      	mov	r2, r0
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	429a      	cmp	r2, r3
 8006328:	d302      	bcc.n	8006330 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d11d      	bne.n	800636c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800633a:	2b80      	cmp	r3, #128	@ 0x80
 800633c:	d016      	beq.n	800636c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006358:	f043 0220 	orr.w	r2, r3, #32
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e007      	b.n	800637c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006376:	2b80      	cmp	r3, #128	@ 0x80
 8006378:	d1c3      	bne.n	8006302 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006390:	e034      	b.n	80063fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 f89b 	bl	80064ce <I2C_IsAcknowledgeFailed>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d001      	beq.n	80063a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e034      	b.n	800640c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a8:	d028      	beq.n	80063fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063aa:	f7fe f8c7 	bl	800453c <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d302      	bcc.n	80063c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d11d      	bne.n	80063fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d016      	beq.n	80063fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2220      	movs	r2, #32
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e8:	f043 0220 	orr.w	r2, r3, #32
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e007      	b.n	800640c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	f003 0304 	and.w	r3, r3, #4
 8006406:	2b04      	cmp	r3, #4
 8006408:	d1c3      	bne.n	8006392 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006420:	e049      	b.n	80064b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	f003 0310 	and.w	r3, r3, #16
 800642c:	2b10      	cmp	r3, #16
 800642e:	d119      	bne.n	8006464 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f06f 0210 	mvn.w	r2, #16
 8006438:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2220      	movs	r2, #32
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e030      	b.n	80064c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006464:	f7fe f86a 	bl	800453c <HAL_GetTick>
 8006468:	4602      	mov	r2, r0
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	68ba      	ldr	r2, [r7, #8]
 8006470:	429a      	cmp	r2, r3
 8006472:	d302      	bcc.n	800647a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d11d      	bne.n	80064b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006484:	2b40      	cmp	r3, #64	@ 0x40
 8006486:	d016      	beq.n	80064b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2220      	movs	r2, #32
 8006492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a2:	f043 0220 	orr.w	r2, r3, #32
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e007      	b.n	80064c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c0:	2b40      	cmp	r3, #64	@ 0x40
 80064c2:	d1ae      	bne.n	8006422 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b083      	sub	sp, #12
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064e4:	d11b      	bne.n	800651e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80064ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800650a:	f043 0204 	orr.w	r2, r3, #4
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e000      	b.n	8006520 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006532:	4b06      	ldr	r3, [pc, #24]	@ (800654c <HAL_PWR_EnableBkUpAccess+0x20>)
 8006534:	2201      	movs	r2, #1
 8006536:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006538:	4b05      	ldr	r3, [pc, #20]	@ (8006550 <HAL_PWR_EnableBkUpAccess+0x24>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800653e:	687b      	ldr	r3, [r7, #4]
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	420e0020 	.word	0x420e0020
 8006550:	40007000 	.word	0x40007000

08006554 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800655a:	4b06      	ldr	r3, [pc, #24]	@ (8006574 <HAL_PWR_DisableBkUpAccess+0x20>)
 800655c:	2200      	movs	r2, #0
 800655e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006560:	4b05      	ldr	r3, [pc, #20]	@ (8006578 <HAL_PWR_DisableBkUpAccess+0x24>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006566:	687b      	ldr	r3, [r7, #4]
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	420e0020 	.word	0x420e0020
 8006578:	40007000 	.word	0x40007000

0800657c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e267      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d075      	beq.n	8006686 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800659a:	4b88      	ldr	r3, [pc, #544]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	f003 030c 	and.w	r3, r3, #12
 80065a2:	2b04      	cmp	r3, #4
 80065a4:	d00c      	beq.n	80065c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065a6:	4b85      	ldr	r3, [pc, #532]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80065ae:	2b08      	cmp	r3, #8
 80065b0:	d112      	bne.n	80065d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065b2:	4b82      	ldr	r3, [pc, #520]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065be:	d10b      	bne.n	80065d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065c0:	4b7e      	ldr	r3, [pc, #504]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d05b      	beq.n	8006684 <HAL_RCC_OscConfig+0x108>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d157      	bne.n	8006684 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e242      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065e0:	d106      	bne.n	80065f0 <HAL_RCC_OscConfig+0x74>
 80065e2:	4b76      	ldr	r3, [pc, #472]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a75      	ldr	r2, [pc, #468]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 80065e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	e01d      	b.n	800662c <HAL_RCC_OscConfig+0xb0>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065f8:	d10c      	bne.n	8006614 <HAL_RCC_OscConfig+0x98>
 80065fa:	4b70      	ldr	r3, [pc, #448]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a6f      	ldr	r2, [pc, #444]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 8006600:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006604:	6013      	str	r3, [r2, #0]
 8006606:	4b6d      	ldr	r3, [pc, #436]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a6c      	ldr	r2, [pc, #432]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 800660c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006610:	6013      	str	r3, [r2, #0]
 8006612:	e00b      	b.n	800662c <HAL_RCC_OscConfig+0xb0>
 8006614:	4b69      	ldr	r3, [pc, #420]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a68      	ldr	r2, [pc, #416]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 800661a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	4b66      	ldr	r3, [pc, #408]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a65      	ldr	r2, [pc, #404]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 8006626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800662a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d013      	beq.n	800665c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006634:	f7fd ff82 	bl	800453c <HAL_GetTick>
 8006638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800663a:	e008      	b.n	800664e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800663c:	f7fd ff7e 	bl	800453c <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	2b64      	cmp	r3, #100	@ 0x64
 8006648:	d901      	bls.n	800664e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e207      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800664e:	4b5b      	ldr	r3, [pc, #364]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0f0      	beq.n	800663c <HAL_RCC_OscConfig+0xc0>
 800665a:	e014      	b.n	8006686 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800665c:	f7fd ff6e 	bl	800453c <HAL_GetTick>
 8006660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006662:	e008      	b.n	8006676 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006664:	f7fd ff6a 	bl	800453c <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	2b64      	cmp	r3, #100	@ 0x64
 8006670:	d901      	bls.n	8006676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e1f3      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006676:	4b51      	ldr	r3, [pc, #324]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1f0      	bne.n	8006664 <HAL_RCC_OscConfig+0xe8>
 8006682:	e000      	b.n	8006686 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0302 	and.w	r3, r3, #2
 800668e:	2b00      	cmp	r3, #0
 8006690:	d063      	beq.n	800675a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006692:	4b4a      	ldr	r3, [pc, #296]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 030c 	and.w	r3, r3, #12
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00b      	beq.n	80066b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800669e:	4b47      	ldr	r3, [pc, #284]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80066a6:	2b08      	cmp	r3, #8
 80066a8:	d11c      	bne.n	80066e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066aa:	4b44      	ldr	r3, [pc, #272]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d116      	bne.n	80066e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066b6:	4b41      	ldr	r3, [pc, #260]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d005      	beq.n	80066ce <HAL_RCC_OscConfig+0x152>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68db      	ldr	r3, [r3, #12]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d001      	beq.n	80066ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e1c7      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ce:	4b3b      	ldr	r3, [pc, #236]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	00db      	lsls	r3, r3, #3
 80066dc:	4937      	ldr	r1, [pc, #220]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066e2:	e03a      	b.n	800675a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d020      	beq.n	800672e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066ec:	4b34      	ldr	r3, [pc, #208]	@ (80067c0 <HAL_RCC_OscConfig+0x244>)
 80066ee:	2201      	movs	r2, #1
 80066f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f2:	f7fd ff23 	bl	800453c <HAL_GetTick>
 80066f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066f8:	e008      	b.n	800670c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066fa:	f7fd ff1f 	bl	800453c <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	2b02      	cmp	r3, #2
 8006706:	d901      	bls.n	800670c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e1a8      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800670c:	4b2b      	ldr	r3, [pc, #172]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0302 	and.w	r3, r3, #2
 8006714:	2b00      	cmp	r3, #0
 8006716:	d0f0      	beq.n	80066fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006718:	4b28      	ldr	r3, [pc, #160]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	00db      	lsls	r3, r3, #3
 8006726:	4925      	ldr	r1, [pc, #148]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 8006728:	4313      	orrs	r3, r2
 800672a:	600b      	str	r3, [r1, #0]
 800672c:	e015      	b.n	800675a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800672e:	4b24      	ldr	r3, [pc, #144]	@ (80067c0 <HAL_RCC_OscConfig+0x244>)
 8006730:	2200      	movs	r2, #0
 8006732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006734:	f7fd ff02 	bl	800453c <HAL_GetTick>
 8006738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800673a:	e008      	b.n	800674e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800673c:	f7fd fefe 	bl	800453c <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b02      	cmp	r3, #2
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e187      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800674e:	4b1b      	ldr	r3, [pc, #108]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0302 	and.w	r3, r3, #2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1f0      	bne.n	800673c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0308 	and.w	r3, r3, #8
 8006762:	2b00      	cmp	r3, #0
 8006764:	d036      	beq.n	80067d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d016      	beq.n	800679c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800676e:	4b15      	ldr	r3, [pc, #84]	@ (80067c4 <HAL_RCC_OscConfig+0x248>)
 8006770:	2201      	movs	r2, #1
 8006772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006774:	f7fd fee2 	bl	800453c <HAL_GetTick>
 8006778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800677c:	f7fd fede 	bl	800453c <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e167      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800678e:	4b0b      	ldr	r3, [pc, #44]	@ (80067bc <HAL_RCC_OscConfig+0x240>)
 8006790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d0f0      	beq.n	800677c <HAL_RCC_OscConfig+0x200>
 800679a:	e01b      	b.n	80067d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800679c:	4b09      	ldr	r3, [pc, #36]	@ (80067c4 <HAL_RCC_OscConfig+0x248>)
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067a2:	f7fd fecb 	bl	800453c <HAL_GetTick>
 80067a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067a8:	e00e      	b.n	80067c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067aa:	f7fd fec7 	bl	800453c <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d907      	bls.n	80067c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e150      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
 80067bc:	40023800 	.word	0x40023800
 80067c0:	42470000 	.word	0x42470000
 80067c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067c8:	4b88      	ldr	r3, [pc, #544]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 80067ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1ea      	bne.n	80067aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 8097 	beq.w	8006910 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067e2:	2300      	movs	r3, #0
 80067e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067e6:	4b81      	ldr	r3, [pc, #516]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 80067e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10f      	bne.n	8006812 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067f2:	2300      	movs	r3, #0
 80067f4:	60bb      	str	r3, [r7, #8]
 80067f6:	4b7d      	ldr	r3, [pc, #500]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 80067f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067fa:	4a7c      	ldr	r2, [pc, #496]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 80067fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006800:	6413      	str	r3, [r2, #64]	@ 0x40
 8006802:	4b7a      	ldr	r3, [pc, #488]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 8006804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800680a:	60bb      	str	r3, [r7, #8]
 800680c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800680e:	2301      	movs	r3, #1
 8006810:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006812:	4b77      	ldr	r3, [pc, #476]	@ (80069f0 <HAL_RCC_OscConfig+0x474>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800681a:	2b00      	cmp	r3, #0
 800681c:	d118      	bne.n	8006850 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800681e:	4b74      	ldr	r3, [pc, #464]	@ (80069f0 <HAL_RCC_OscConfig+0x474>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a73      	ldr	r2, [pc, #460]	@ (80069f0 <HAL_RCC_OscConfig+0x474>)
 8006824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006828:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800682a:	f7fd fe87 	bl	800453c <HAL_GetTick>
 800682e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006830:	e008      	b.n	8006844 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006832:	f7fd fe83 	bl	800453c <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	2b02      	cmp	r3, #2
 800683e:	d901      	bls.n	8006844 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e10c      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006844:	4b6a      	ldr	r3, [pc, #424]	@ (80069f0 <HAL_RCC_OscConfig+0x474>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800684c:	2b00      	cmp	r3, #0
 800684e:	d0f0      	beq.n	8006832 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d106      	bne.n	8006866 <HAL_RCC_OscConfig+0x2ea>
 8006858:	4b64      	ldr	r3, [pc, #400]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 800685a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800685c:	4a63      	ldr	r2, [pc, #396]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 800685e:	f043 0301 	orr.w	r3, r3, #1
 8006862:	6713      	str	r3, [r2, #112]	@ 0x70
 8006864:	e01c      	b.n	80068a0 <HAL_RCC_OscConfig+0x324>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	2b05      	cmp	r3, #5
 800686c:	d10c      	bne.n	8006888 <HAL_RCC_OscConfig+0x30c>
 800686e:	4b5f      	ldr	r3, [pc, #380]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 8006870:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006872:	4a5e      	ldr	r2, [pc, #376]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 8006874:	f043 0304 	orr.w	r3, r3, #4
 8006878:	6713      	str	r3, [r2, #112]	@ 0x70
 800687a:	4b5c      	ldr	r3, [pc, #368]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 800687c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800687e:	4a5b      	ldr	r2, [pc, #364]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 8006880:	f043 0301 	orr.w	r3, r3, #1
 8006884:	6713      	str	r3, [r2, #112]	@ 0x70
 8006886:	e00b      	b.n	80068a0 <HAL_RCC_OscConfig+0x324>
 8006888:	4b58      	ldr	r3, [pc, #352]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 800688a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800688c:	4a57      	ldr	r2, [pc, #348]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 800688e:	f023 0301 	bic.w	r3, r3, #1
 8006892:	6713      	str	r3, [r2, #112]	@ 0x70
 8006894:	4b55      	ldr	r3, [pc, #340]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 8006896:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006898:	4a54      	ldr	r2, [pc, #336]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 800689a:	f023 0304 	bic.w	r3, r3, #4
 800689e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d015      	beq.n	80068d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068a8:	f7fd fe48 	bl	800453c <HAL_GetTick>
 80068ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ae:	e00a      	b.n	80068c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068b0:	f7fd fe44 	bl	800453c <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068be:	4293      	cmp	r3, r2
 80068c0:	d901      	bls.n	80068c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e0cb      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068c6:	4b49      	ldr	r3, [pc, #292]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 80068c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d0ee      	beq.n	80068b0 <HAL_RCC_OscConfig+0x334>
 80068d2:	e014      	b.n	80068fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068d4:	f7fd fe32 	bl	800453c <HAL_GetTick>
 80068d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068da:	e00a      	b.n	80068f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068dc:	f7fd fe2e 	bl	800453c <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e0b5      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068f2:	4b3e      	ldr	r3, [pc, #248]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 80068f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1ee      	bne.n	80068dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80068fe:	7dfb      	ldrb	r3, [r7, #23]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d105      	bne.n	8006910 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006904:	4b39      	ldr	r3, [pc, #228]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 8006906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006908:	4a38      	ldr	r2, [pc, #224]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 800690a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800690e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 80a1 	beq.w	8006a5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800691a:	4b34      	ldr	r3, [pc, #208]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f003 030c 	and.w	r3, r3, #12
 8006922:	2b08      	cmp	r3, #8
 8006924:	d05c      	beq.n	80069e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	2b02      	cmp	r3, #2
 800692c:	d141      	bne.n	80069b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800692e:	4b31      	ldr	r3, [pc, #196]	@ (80069f4 <HAL_RCC_OscConfig+0x478>)
 8006930:	2200      	movs	r2, #0
 8006932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006934:	f7fd fe02 	bl	800453c <HAL_GetTick>
 8006938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800693a:	e008      	b.n	800694e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800693c:	f7fd fdfe 	bl	800453c <HAL_GetTick>
 8006940:	4602      	mov	r2, r0
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	2b02      	cmp	r3, #2
 8006948:	d901      	bls.n	800694e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e087      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800694e:	4b27      	ldr	r3, [pc, #156]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1f0      	bne.n	800693c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69da      	ldr	r2, [r3, #28]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	431a      	orrs	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006968:	019b      	lsls	r3, r3, #6
 800696a:	431a      	orrs	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006970:	085b      	lsrs	r3, r3, #1
 8006972:	3b01      	subs	r3, #1
 8006974:	041b      	lsls	r3, r3, #16
 8006976:	431a      	orrs	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697c:	061b      	lsls	r3, r3, #24
 800697e:	491b      	ldr	r1, [pc, #108]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 8006980:	4313      	orrs	r3, r2
 8006982:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006984:	4b1b      	ldr	r3, [pc, #108]	@ (80069f4 <HAL_RCC_OscConfig+0x478>)
 8006986:	2201      	movs	r2, #1
 8006988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800698a:	f7fd fdd7 	bl	800453c <HAL_GetTick>
 800698e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006990:	e008      	b.n	80069a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006992:	f7fd fdd3 	bl	800453c <HAL_GetTick>
 8006996:	4602      	mov	r2, r0
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	2b02      	cmp	r3, #2
 800699e:	d901      	bls.n	80069a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e05c      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069a4:	4b11      	ldr	r3, [pc, #68]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0f0      	beq.n	8006992 <HAL_RCC_OscConfig+0x416>
 80069b0:	e054      	b.n	8006a5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069b2:	4b10      	ldr	r3, [pc, #64]	@ (80069f4 <HAL_RCC_OscConfig+0x478>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b8:	f7fd fdc0 	bl	800453c <HAL_GetTick>
 80069bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c0:	f7fd fdbc 	bl	800453c <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e045      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069d2:	4b06      	ldr	r3, [pc, #24]	@ (80069ec <HAL_RCC_OscConfig+0x470>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1f0      	bne.n	80069c0 <HAL_RCC_OscConfig+0x444>
 80069de:	e03d      	b.n	8006a5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	699b      	ldr	r3, [r3, #24]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d107      	bne.n	80069f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e038      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
 80069ec:	40023800 	.word	0x40023800
 80069f0:	40007000 	.word	0x40007000
 80069f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80069f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006a68 <HAL_RCC_OscConfig+0x4ec>)
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d028      	beq.n	8006a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d121      	bne.n	8006a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d11a      	bne.n	8006a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a28:	4013      	ands	r3, r2
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d111      	bne.n	8006a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a3e:	085b      	lsrs	r3, r3, #1
 8006a40:	3b01      	subs	r3, #1
 8006a42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d107      	bne.n	8006a58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d001      	beq.n	8006a5c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e000      	b.n	8006a5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	40023800 	.word	0x40023800

08006a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e0cc      	b.n	8006c1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a80:	4b68      	ldr	r3, [pc, #416]	@ (8006c24 <HAL_RCC_ClockConfig+0x1b8>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0307 	and.w	r3, r3, #7
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d90c      	bls.n	8006aa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a8e:	4b65      	ldr	r3, [pc, #404]	@ (8006c24 <HAL_RCC_ClockConfig+0x1b8>)
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	b2d2      	uxtb	r2, r2
 8006a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a96:	4b63      	ldr	r3, [pc, #396]	@ (8006c24 <HAL_RCC_ClockConfig+0x1b8>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0307 	and.w	r3, r3, #7
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d001      	beq.n	8006aa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e0b8      	b.n	8006c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0302 	and.w	r3, r3, #2
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d020      	beq.n	8006af6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0304 	and.w	r3, r3, #4
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d005      	beq.n	8006acc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ac0:	4b59      	ldr	r3, [pc, #356]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	4a58      	ldr	r2, [pc, #352]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006aca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0308 	and.w	r3, r3, #8
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d005      	beq.n	8006ae4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ad8:	4b53      	ldr	r3, [pc, #332]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	4a52      	ldr	r2, [pc, #328]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006ade:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006ae2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ae4:	4b50      	ldr	r3, [pc, #320]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	494d      	ldr	r1, [pc, #308]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d044      	beq.n	8006b8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d107      	bne.n	8006b1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b0a:	4b47      	ldr	r3, [pc, #284]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d119      	bne.n	8006b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e07f      	b.n	8006c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d003      	beq.n	8006b2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d107      	bne.n	8006b3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d109      	bne.n	8006b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e06f      	b.n	8006c1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e067      	b.n	8006c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b4a:	4b37      	ldr	r3, [pc, #220]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f023 0203 	bic.w	r2, r3, #3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	4934      	ldr	r1, [pc, #208]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b5c:	f7fd fcee 	bl	800453c <HAL_GetTick>
 8006b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b62:	e00a      	b.n	8006b7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b64:	f7fd fcea 	bl	800453c <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d901      	bls.n	8006b7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e04f      	b.n	8006c1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f003 020c 	and.w	r2, r3, #12
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d1eb      	bne.n	8006b64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b8c:	4b25      	ldr	r3, [pc, #148]	@ (8006c24 <HAL_RCC_ClockConfig+0x1b8>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0307 	and.w	r3, r3, #7
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d20c      	bcs.n	8006bb4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b9a:	4b22      	ldr	r3, [pc, #136]	@ (8006c24 <HAL_RCC_ClockConfig+0x1b8>)
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	b2d2      	uxtb	r2, r2
 8006ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ba2:	4b20      	ldr	r3, [pc, #128]	@ (8006c24 <HAL_RCC_ClockConfig+0x1b8>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0307 	and.w	r3, r3, #7
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d001      	beq.n	8006bb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e032      	b.n	8006c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0304 	and.w	r3, r3, #4
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d008      	beq.n	8006bd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bc0:	4b19      	ldr	r3, [pc, #100]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	4916      	ldr	r1, [pc, #88]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0308 	and.w	r3, r3, #8
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d009      	beq.n	8006bf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bde:	4b12      	ldr	r3, [pc, #72]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	490e      	ldr	r1, [pc, #56]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006bf2:	f000 f821 	bl	8006c38 <HAL_RCC_GetSysClockFreq>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8006c28 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	091b      	lsrs	r3, r3, #4
 8006bfe:	f003 030f 	and.w	r3, r3, #15
 8006c02:	490a      	ldr	r1, [pc, #40]	@ (8006c2c <HAL_RCC_ClockConfig+0x1c0>)
 8006c04:	5ccb      	ldrb	r3, [r1, r3]
 8006c06:	fa22 f303 	lsr.w	r3, r2, r3
 8006c0a:	4a09      	ldr	r2, [pc, #36]	@ (8006c30 <HAL_RCC_ClockConfig+0x1c4>)
 8006c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006c0e:	4b09      	ldr	r3, [pc, #36]	@ (8006c34 <HAL_RCC_ClockConfig+0x1c8>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7fd fc4e 	bl	80044b4 <HAL_InitTick>

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	40023c00 	.word	0x40023c00
 8006c28:	40023800 	.word	0x40023800
 8006c2c:	0801158c 	.word	0x0801158c
 8006c30:	20000018 	.word	0x20000018
 8006c34:	2000001c 	.word	0x2000001c

08006c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c3c:	b090      	sub	sp, #64	@ 0x40
 8006c3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006c44:	2300      	movs	r3, #0
 8006c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c50:	4b59      	ldr	r3, [pc, #356]	@ (8006db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f003 030c 	and.w	r3, r3, #12
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d00d      	beq.n	8006c78 <HAL_RCC_GetSysClockFreq+0x40>
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	f200 80a1 	bhi.w	8006da4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d002      	beq.n	8006c6c <HAL_RCC_GetSysClockFreq+0x34>
 8006c66:	2b04      	cmp	r3, #4
 8006c68:	d003      	beq.n	8006c72 <HAL_RCC_GetSysClockFreq+0x3a>
 8006c6a:	e09b      	b.n	8006da4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c6c:	4b53      	ldr	r3, [pc, #332]	@ (8006dbc <HAL_RCC_GetSysClockFreq+0x184>)
 8006c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006c70:	e09b      	b.n	8006daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c72:	4b53      	ldr	r3, [pc, #332]	@ (8006dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006c74:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006c76:	e098      	b.n	8006daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c78:	4b4f      	ldr	r3, [pc, #316]	@ (8006db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c80:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c82:	4b4d      	ldr	r3, [pc, #308]	@ (8006db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d028      	beq.n	8006ce0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c8e:	4b4a      	ldr	r3, [pc, #296]	@ (8006db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	099b      	lsrs	r3, r3, #6
 8006c94:	2200      	movs	r2, #0
 8006c96:	623b      	str	r3, [r7, #32]
 8006c98:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	4b47      	ldr	r3, [pc, #284]	@ (8006dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ca4:	fb03 f201 	mul.w	r2, r3, r1
 8006ca8:	2300      	movs	r3, #0
 8006caa:	fb00 f303 	mul.w	r3, r0, r3
 8006cae:	4413      	add	r3, r2
 8006cb0:	4a43      	ldr	r2, [pc, #268]	@ (8006dc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006cb2:	fba0 1202 	umull	r1, r2, r0, r2
 8006cb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cb8:	460a      	mov	r2, r1
 8006cba:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cbe:	4413      	add	r3, r2
 8006cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	61bb      	str	r3, [r7, #24]
 8006cc8:	61fa      	str	r2, [r7, #28]
 8006cca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006cd2:	f7f9 ffd9 	bl	8000c88 <__aeabi_uldivmod>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	4613      	mov	r3, r2
 8006cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cde:	e053      	b.n	8006d88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ce0:	4b35      	ldr	r3, [pc, #212]	@ (8006db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	099b      	lsrs	r3, r3, #6
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	613b      	str	r3, [r7, #16]
 8006cea:	617a      	str	r2, [r7, #20]
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006cf2:	f04f 0b00 	mov.w	fp, #0
 8006cf6:	4652      	mov	r2, sl
 8006cf8:	465b      	mov	r3, fp
 8006cfa:	f04f 0000 	mov.w	r0, #0
 8006cfe:	f04f 0100 	mov.w	r1, #0
 8006d02:	0159      	lsls	r1, r3, #5
 8006d04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d08:	0150      	lsls	r0, r2, #5
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	ebb2 080a 	subs.w	r8, r2, sl
 8006d12:	eb63 090b 	sbc.w	r9, r3, fp
 8006d16:	f04f 0200 	mov.w	r2, #0
 8006d1a:	f04f 0300 	mov.w	r3, #0
 8006d1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006d22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006d26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006d2a:	ebb2 0408 	subs.w	r4, r2, r8
 8006d2e:	eb63 0509 	sbc.w	r5, r3, r9
 8006d32:	f04f 0200 	mov.w	r2, #0
 8006d36:	f04f 0300 	mov.w	r3, #0
 8006d3a:	00eb      	lsls	r3, r5, #3
 8006d3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d40:	00e2      	lsls	r2, r4, #3
 8006d42:	4614      	mov	r4, r2
 8006d44:	461d      	mov	r5, r3
 8006d46:	eb14 030a 	adds.w	r3, r4, sl
 8006d4a:	603b      	str	r3, [r7, #0]
 8006d4c:	eb45 030b 	adc.w	r3, r5, fp
 8006d50:	607b      	str	r3, [r7, #4]
 8006d52:	f04f 0200 	mov.w	r2, #0
 8006d56:	f04f 0300 	mov.w	r3, #0
 8006d5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d5e:	4629      	mov	r1, r5
 8006d60:	028b      	lsls	r3, r1, #10
 8006d62:	4621      	mov	r1, r4
 8006d64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d68:	4621      	mov	r1, r4
 8006d6a:	028a      	lsls	r2, r1, #10
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d72:	2200      	movs	r2, #0
 8006d74:	60bb      	str	r3, [r7, #8]
 8006d76:	60fa      	str	r2, [r7, #12]
 8006d78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d7c:	f7f9 ff84 	bl	8000c88 <__aeabi_uldivmod>
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	4613      	mov	r3, r2
 8006d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006d88:	4b0b      	ldr	r3, [pc, #44]	@ (8006db8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	0c1b      	lsrs	r3, r3, #16
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	3301      	adds	r3, #1
 8006d94:	005b      	lsls	r3, r3, #1
 8006d96:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006d98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006da2:	e002      	b.n	8006daa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006da4:	4b05      	ldr	r3, [pc, #20]	@ (8006dbc <HAL_RCC_GetSysClockFreq+0x184>)
 8006da6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3740      	adds	r7, #64	@ 0x40
 8006db0:	46bd      	mov	sp, r7
 8006db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006db6:	bf00      	nop
 8006db8:	40023800 	.word	0x40023800
 8006dbc:	00f42400 	.word	0x00f42400
 8006dc0:	017d7840 	.word	0x017d7840

08006dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006dc8:	4b03      	ldr	r3, [pc, #12]	@ (8006dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006dca:	681b      	ldr	r3, [r3, #0]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	20000018 	.word	0x20000018

08006ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006de0:	f7ff fff0 	bl	8006dc4 <HAL_RCC_GetHCLKFreq>
 8006de4:	4602      	mov	r2, r0
 8006de6:	4b05      	ldr	r3, [pc, #20]	@ (8006dfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	0a9b      	lsrs	r3, r3, #10
 8006dec:	f003 0307 	and.w	r3, r3, #7
 8006df0:	4903      	ldr	r1, [pc, #12]	@ (8006e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006df2:	5ccb      	ldrb	r3, [r1, r3]
 8006df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	40023800 	.word	0x40023800
 8006e00:	0801159c 	.word	0x0801159c

08006e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e08:	f7ff ffdc 	bl	8006dc4 <HAL_RCC_GetHCLKFreq>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	4b05      	ldr	r3, [pc, #20]	@ (8006e24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	0b5b      	lsrs	r3, r3, #13
 8006e14:	f003 0307 	and.w	r3, r3, #7
 8006e18:	4903      	ldr	r1, [pc, #12]	@ (8006e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e1a:	5ccb      	ldrb	r3, [r1, r3]
 8006e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	40023800 	.word	0x40023800
 8006e28:	0801159c 	.word	0x0801159c

08006e2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e041      	b.n	8006ec2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d106      	bne.n	8006e58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7fc fff0 	bl	8003e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3304      	adds	r3, #4
 8006e68:	4619      	mov	r1, r3
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	f000 fff0 	bl	8007e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
	...

08006ecc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d001      	beq.n	8006ee4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e046      	b.n	8006f72 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a23      	ldr	r2, [pc, #140]	@ (8006f80 <HAL_TIM_Base_Start+0xb4>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d022      	beq.n	8006f3c <HAL_TIM_Base_Start+0x70>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006efe:	d01d      	beq.n	8006f3c <HAL_TIM_Base_Start+0x70>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a1f      	ldr	r2, [pc, #124]	@ (8006f84 <HAL_TIM_Base_Start+0xb8>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d018      	beq.n	8006f3c <HAL_TIM_Base_Start+0x70>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8006f88 <HAL_TIM_Base_Start+0xbc>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d013      	beq.n	8006f3c <HAL_TIM_Base_Start+0x70>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a1c      	ldr	r2, [pc, #112]	@ (8006f8c <HAL_TIM_Base_Start+0xc0>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d00e      	beq.n	8006f3c <HAL_TIM_Base_Start+0x70>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a1b      	ldr	r2, [pc, #108]	@ (8006f90 <HAL_TIM_Base_Start+0xc4>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d009      	beq.n	8006f3c <HAL_TIM_Base_Start+0x70>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a19      	ldr	r2, [pc, #100]	@ (8006f94 <HAL_TIM_Base_Start+0xc8>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d004      	beq.n	8006f3c <HAL_TIM_Base_Start+0x70>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a18      	ldr	r2, [pc, #96]	@ (8006f98 <HAL_TIM_Base_Start+0xcc>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d111      	bne.n	8006f60 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2b06      	cmp	r3, #6
 8006f4c:	d010      	beq.n	8006f70 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f042 0201 	orr.w	r2, r2, #1
 8006f5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f5e:	e007      	b.n	8006f70 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 0201 	orr.w	r2, r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	40010000 	.word	0x40010000
 8006f84:	40000400 	.word	0x40000400
 8006f88:	40000800 	.word	0x40000800
 8006f8c:	40000c00 	.word	0x40000c00
 8006f90:	40010400 	.word	0x40010400
 8006f94:	40014000 	.word	0x40014000
 8006f98:	40001800 	.word	0x40001800

08006f9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e041      	b.n	8007032 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d106      	bne.n	8006fc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f839 	bl	800703a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2202      	movs	r2, #2
 8006fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	3304      	adds	r3, #4
 8006fd8:	4619      	mov	r1, r3
 8006fda:	4610      	mov	r0, r2
 8006fdc:	f000 ff38 	bl	8007e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007030:	2300      	movs	r3, #0
}
 8007032:	4618      	mov	r0, r3
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800703a:	b480      	push	{r7}
 800703c:	b083      	sub	sp, #12
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007042:	bf00      	nop
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
	...

08007050 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d109      	bne.n	8007074 <HAL_TIM_PWM_Start+0x24>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b01      	cmp	r3, #1
 800706a:	bf14      	ite	ne
 800706c:	2301      	movne	r3, #1
 800706e:	2300      	moveq	r3, #0
 8007070:	b2db      	uxtb	r3, r3
 8007072:	e022      	b.n	80070ba <HAL_TIM_PWM_Start+0x6a>
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	2b04      	cmp	r3, #4
 8007078:	d109      	bne.n	800708e <HAL_TIM_PWM_Start+0x3e>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b01      	cmp	r3, #1
 8007084:	bf14      	ite	ne
 8007086:	2301      	movne	r3, #1
 8007088:	2300      	moveq	r3, #0
 800708a:	b2db      	uxtb	r3, r3
 800708c:	e015      	b.n	80070ba <HAL_TIM_PWM_Start+0x6a>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2b08      	cmp	r3, #8
 8007092:	d109      	bne.n	80070a8 <HAL_TIM_PWM_Start+0x58>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b01      	cmp	r3, #1
 800709e:	bf14      	ite	ne
 80070a0:	2301      	movne	r3, #1
 80070a2:	2300      	moveq	r3, #0
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	e008      	b.n	80070ba <HAL_TIM_PWM_Start+0x6a>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	bf14      	ite	ne
 80070b4:	2301      	movne	r3, #1
 80070b6:	2300      	moveq	r3, #0
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e07c      	b.n	80071bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d104      	bne.n	80070d2 <HAL_TIM_PWM_Start+0x82>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070d0:	e013      	b.n	80070fa <HAL_TIM_PWM_Start+0xaa>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b04      	cmp	r3, #4
 80070d6:	d104      	bne.n	80070e2 <HAL_TIM_PWM_Start+0x92>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070e0:	e00b      	b.n	80070fa <HAL_TIM_PWM_Start+0xaa>
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	2b08      	cmp	r3, #8
 80070e6:	d104      	bne.n	80070f2 <HAL_TIM_PWM_Start+0xa2>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2202      	movs	r2, #2
 80070ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070f0:	e003      	b.n	80070fa <HAL_TIM_PWM_Start+0xaa>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2202      	movs	r2, #2
 80070f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2201      	movs	r2, #1
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	4618      	mov	r0, r3
 8007104:	f001 fac4 	bl	8008690 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a2d      	ldr	r2, [pc, #180]	@ (80071c4 <HAL_TIM_PWM_Start+0x174>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d004      	beq.n	800711c <HAL_TIM_PWM_Start+0xcc>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a2c      	ldr	r2, [pc, #176]	@ (80071c8 <HAL_TIM_PWM_Start+0x178>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d101      	bne.n	8007120 <HAL_TIM_PWM_Start+0xd0>
 800711c:	2301      	movs	r3, #1
 800711e:	e000      	b.n	8007122 <HAL_TIM_PWM_Start+0xd2>
 8007120:	2300      	movs	r3, #0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d007      	beq.n	8007136 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007134:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a22      	ldr	r2, [pc, #136]	@ (80071c4 <HAL_TIM_PWM_Start+0x174>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d022      	beq.n	8007186 <HAL_TIM_PWM_Start+0x136>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007148:	d01d      	beq.n	8007186 <HAL_TIM_PWM_Start+0x136>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a1f      	ldr	r2, [pc, #124]	@ (80071cc <HAL_TIM_PWM_Start+0x17c>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d018      	beq.n	8007186 <HAL_TIM_PWM_Start+0x136>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a1d      	ldr	r2, [pc, #116]	@ (80071d0 <HAL_TIM_PWM_Start+0x180>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d013      	beq.n	8007186 <HAL_TIM_PWM_Start+0x136>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a1c      	ldr	r2, [pc, #112]	@ (80071d4 <HAL_TIM_PWM_Start+0x184>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d00e      	beq.n	8007186 <HAL_TIM_PWM_Start+0x136>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a16      	ldr	r2, [pc, #88]	@ (80071c8 <HAL_TIM_PWM_Start+0x178>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d009      	beq.n	8007186 <HAL_TIM_PWM_Start+0x136>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a18      	ldr	r2, [pc, #96]	@ (80071d8 <HAL_TIM_PWM_Start+0x188>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d004      	beq.n	8007186 <HAL_TIM_PWM_Start+0x136>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a16      	ldr	r2, [pc, #88]	@ (80071dc <HAL_TIM_PWM_Start+0x18c>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d111      	bne.n	80071aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f003 0307 	and.w	r3, r3, #7
 8007190:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2b06      	cmp	r3, #6
 8007196:	d010      	beq.n	80071ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f042 0201 	orr.w	r2, r2, #1
 80071a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071a8:	e007      	b.n	80071ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f042 0201 	orr.w	r2, r2, #1
 80071b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	40010000 	.word	0x40010000
 80071c8:	40010400 	.word	0x40010400
 80071cc:	40000400 	.word	0x40000400
 80071d0:	40000800 	.word	0x40000800
 80071d4:	40000c00 	.word	0x40000c00
 80071d8:	40014000 	.word	0x40014000
 80071dc:	40001800 	.word	0x40001800

080071e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e041      	b.n	8007276 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d106      	bne.n	800720c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f839 	bl	800727e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2202      	movs	r2, #2
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	3304      	adds	r3, #4
 800721c:	4619      	mov	r1, r3
 800721e:	4610      	mov	r0, r2
 8007220:	f000 fe16 	bl	8007e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800727e:	b480      	push	{r7}
 8007280:	b083      	sub	sp, #12
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007286:	bf00      	nop
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
	...

08007294 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d104      	bne.n	80072b2 <HAL_TIM_IC_Start_IT+0x1e>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	e013      	b.n	80072da <HAL_TIM_IC_Start_IT+0x46>
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2b04      	cmp	r3, #4
 80072b6:	d104      	bne.n	80072c2 <HAL_TIM_IC_Start_IT+0x2e>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	e00b      	b.n	80072da <HAL_TIM_IC_Start_IT+0x46>
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2b08      	cmp	r3, #8
 80072c6:	d104      	bne.n	80072d2 <HAL_TIM_IC_Start_IT+0x3e>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	e003      	b.n	80072da <HAL_TIM_IC_Start_IT+0x46>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d104      	bne.n	80072ec <HAL_TIM_IC_Start_IT+0x58>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	e013      	b.n	8007314 <HAL_TIM_IC_Start_IT+0x80>
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d104      	bne.n	80072fc <HAL_TIM_IC_Start_IT+0x68>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	e00b      	b.n	8007314 <HAL_TIM_IC_Start_IT+0x80>
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	2b08      	cmp	r3, #8
 8007300:	d104      	bne.n	800730c <HAL_TIM_IC_Start_IT+0x78>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007308:	b2db      	uxtb	r3, r3
 800730a:	e003      	b.n	8007314 <HAL_TIM_IC_Start_IT+0x80>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007312:	b2db      	uxtb	r3, r3
 8007314:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007316:	7bbb      	ldrb	r3, [r7, #14]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d102      	bne.n	8007322 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800731c:	7b7b      	ldrb	r3, [r7, #13]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d001      	beq.n	8007326 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e0cc      	b.n	80074c0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d104      	bne.n	8007336 <HAL_TIM_IC_Start_IT+0xa2>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007334:	e013      	b.n	800735e <HAL_TIM_IC_Start_IT+0xca>
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	2b04      	cmp	r3, #4
 800733a:	d104      	bne.n	8007346 <HAL_TIM_IC_Start_IT+0xb2>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007344:	e00b      	b.n	800735e <HAL_TIM_IC_Start_IT+0xca>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2b08      	cmp	r3, #8
 800734a:	d104      	bne.n	8007356 <HAL_TIM_IC_Start_IT+0xc2>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2202      	movs	r2, #2
 8007350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007354:	e003      	b.n	800735e <HAL_TIM_IC_Start_IT+0xca>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2202      	movs	r2, #2
 800735a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d104      	bne.n	800736e <HAL_TIM_IC_Start_IT+0xda>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2202      	movs	r2, #2
 8007368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800736c:	e013      	b.n	8007396 <HAL_TIM_IC_Start_IT+0x102>
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	2b04      	cmp	r3, #4
 8007372:	d104      	bne.n	800737e <HAL_TIM_IC_Start_IT+0xea>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2202      	movs	r2, #2
 8007378:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800737c:	e00b      	b.n	8007396 <HAL_TIM_IC_Start_IT+0x102>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b08      	cmp	r3, #8
 8007382:	d104      	bne.n	800738e <HAL_TIM_IC_Start_IT+0xfa>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800738c:	e003      	b.n	8007396 <HAL_TIM_IC_Start_IT+0x102>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2202      	movs	r2, #2
 8007392:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b0c      	cmp	r3, #12
 800739a:	d841      	bhi.n	8007420 <HAL_TIM_IC_Start_IT+0x18c>
 800739c:	a201      	add	r2, pc, #4	@ (adr r2, 80073a4 <HAL_TIM_IC_Start_IT+0x110>)
 800739e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a2:	bf00      	nop
 80073a4:	080073d9 	.word	0x080073d9
 80073a8:	08007421 	.word	0x08007421
 80073ac:	08007421 	.word	0x08007421
 80073b0:	08007421 	.word	0x08007421
 80073b4:	080073eb 	.word	0x080073eb
 80073b8:	08007421 	.word	0x08007421
 80073bc:	08007421 	.word	0x08007421
 80073c0:	08007421 	.word	0x08007421
 80073c4:	080073fd 	.word	0x080073fd
 80073c8:	08007421 	.word	0x08007421
 80073cc:	08007421 	.word	0x08007421
 80073d0:	08007421 	.word	0x08007421
 80073d4:	0800740f 	.word	0x0800740f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68da      	ldr	r2, [r3, #12]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f042 0202 	orr.w	r2, r2, #2
 80073e6:	60da      	str	r2, [r3, #12]
      break;
 80073e8:	e01d      	b.n	8007426 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68da      	ldr	r2, [r3, #12]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f042 0204 	orr.w	r2, r2, #4
 80073f8:	60da      	str	r2, [r3, #12]
      break;
 80073fa:	e014      	b.n	8007426 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68da      	ldr	r2, [r3, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0208 	orr.w	r2, r2, #8
 800740a:	60da      	str	r2, [r3, #12]
      break;
 800740c:	e00b      	b.n	8007426 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68da      	ldr	r2, [r3, #12]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f042 0210 	orr.w	r2, r2, #16
 800741c:	60da      	str	r2, [r3, #12]
      break;
 800741e:	e002      	b.n	8007426 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	73fb      	strb	r3, [r7, #15]
      break;
 8007424:	bf00      	nop
  }

  if (status == HAL_OK)
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d148      	bne.n	80074be <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2201      	movs	r2, #1
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	4618      	mov	r0, r3
 8007436:	f001 f92b 	bl	8008690 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a22      	ldr	r2, [pc, #136]	@ (80074c8 <HAL_TIM_IC_Start_IT+0x234>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d022      	beq.n	800748a <HAL_TIM_IC_Start_IT+0x1f6>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800744c:	d01d      	beq.n	800748a <HAL_TIM_IC_Start_IT+0x1f6>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a1e      	ldr	r2, [pc, #120]	@ (80074cc <HAL_TIM_IC_Start_IT+0x238>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d018      	beq.n	800748a <HAL_TIM_IC_Start_IT+0x1f6>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a1c      	ldr	r2, [pc, #112]	@ (80074d0 <HAL_TIM_IC_Start_IT+0x23c>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d013      	beq.n	800748a <HAL_TIM_IC_Start_IT+0x1f6>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a1b      	ldr	r2, [pc, #108]	@ (80074d4 <HAL_TIM_IC_Start_IT+0x240>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d00e      	beq.n	800748a <HAL_TIM_IC_Start_IT+0x1f6>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a19      	ldr	r2, [pc, #100]	@ (80074d8 <HAL_TIM_IC_Start_IT+0x244>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d009      	beq.n	800748a <HAL_TIM_IC_Start_IT+0x1f6>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a18      	ldr	r2, [pc, #96]	@ (80074dc <HAL_TIM_IC_Start_IT+0x248>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d004      	beq.n	800748a <HAL_TIM_IC_Start_IT+0x1f6>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a16      	ldr	r2, [pc, #88]	@ (80074e0 <HAL_TIM_IC_Start_IT+0x24c>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d111      	bne.n	80074ae <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f003 0307 	and.w	r3, r3, #7
 8007494:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2b06      	cmp	r3, #6
 800749a:	d010      	beq.n	80074be <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f042 0201 	orr.w	r2, r2, #1
 80074aa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80074ac:	e007      	b.n	80074be <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f042 0201 	orr.w	r2, r2, #1
 80074bc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80074be:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	40010000 	.word	0x40010000
 80074cc:	40000400 	.word	0x40000400
 80074d0:	40000800 	.word	0x40000800
 80074d4:	40000c00 	.word	0x40000c00
 80074d8:	40010400 	.word	0x40010400
 80074dc:	40014000 	.word	0x40014000
 80074e0:	40001800 	.word	0x40001800

080074e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e097      	b.n	8007628 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	d106      	bne.n	8007512 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7fc fd45 	bl	8003f9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2202      	movs	r2, #2
 8007516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6812      	ldr	r2, [r2, #0]
 8007524:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007528:	f023 0307 	bic.w	r3, r3, #7
 800752c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	3304      	adds	r3, #4
 8007536:	4619      	mov	r1, r3
 8007538:	4610      	mov	r0, r2
 800753a:	f000 fc89 	bl	8007e50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	4313      	orrs	r3, r2
 800755e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007566:	f023 0303 	bic.w	r3, r3, #3
 800756a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	699b      	ldr	r3, [r3, #24]
 8007574:	021b      	lsls	r3, r3, #8
 8007576:	4313      	orrs	r3, r2
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	4313      	orrs	r3, r2
 800757c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007584:	f023 030c 	bic.w	r3, r3, #12
 8007588:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007590:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007594:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	68da      	ldr	r2, [r3, #12]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	69db      	ldr	r3, [r3, #28]
 800759e:	021b      	lsls	r3, r3, #8
 80075a0:	4313      	orrs	r3, r2
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	011a      	lsls	r2, r3, #4
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	031b      	lsls	r3, r3, #12
 80075b4:	4313      	orrs	r3, r2
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80075c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80075ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	695b      	ldr	r3, [r3, #20]
 80075d4:	011b      	lsls	r3, r3, #4
 80075d6:	4313      	orrs	r3, r2
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	4313      	orrs	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3718      	adds	r7, #24
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007640:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007648:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007650:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007658:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d110      	bne.n	8007682 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007660:	7bfb      	ldrb	r3, [r7, #15]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d102      	bne.n	800766c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007666:	7b7b      	ldrb	r3, [r7, #13]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d001      	beq.n	8007670 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e069      	b.n	8007744 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007680:	e031      	b.n	80076e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b04      	cmp	r3, #4
 8007686:	d110      	bne.n	80076aa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007688:	7bbb      	ldrb	r3, [r7, #14]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d102      	bne.n	8007694 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800768e:	7b3b      	ldrb	r3, [r7, #12]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d001      	beq.n	8007698 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e055      	b.n	8007744 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2202      	movs	r2, #2
 800769c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80076a8:	e01d      	b.n	80076e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d108      	bne.n	80076c2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80076b0:	7bbb      	ldrb	r3, [r7, #14]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d105      	bne.n	80076c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076b6:	7b7b      	ldrb	r3, [r7, #13]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d102      	bne.n	80076c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80076bc:	7b3b      	ldrb	r3, [r7, #12]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d001      	beq.n	80076c6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e03e      	b.n	8007744 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2202      	movs	r2, #2
 80076ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2202      	movs	r2, #2
 80076d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2202      	movs	r2, #2
 80076da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2202      	movs	r2, #2
 80076e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d003      	beq.n	80076f4 <HAL_TIM_Encoder_Start+0xc4>
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	2b04      	cmp	r3, #4
 80076f0:	d008      	beq.n	8007704 <HAL_TIM_Encoder_Start+0xd4>
 80076f2:	e00f      	b.n	8007714 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2201      	movs	r2, #1
 80076fa:	2100      	movs	r1, #0
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 ffc7 	bl	8008690 <TIM_CCxChannelCmd>
      break;
 8007702:	e016      	b.n	8007732 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2201      	movs	r2, #1
 800770a:	2104      	movs	r1, #4
 800770c:	4618      	mov	r0, r3
 800770e:	f000 ffbf 	bl	8008690 <TIM_CCxChannelCmd>
      break;
 8007712:	e00e      	b.n	8007732 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2201      	movs	r2, #1
 800771a:	2100      	movs	r1, #0
 800771c:	4618      	mov	r0, r3
 800771e:	f000 ffb7 	bl	8008690 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2201      	movs	r2, #1
 8007728:	2104      	movs	r1, #4
 800772a:	4618      	mov	r0, r3
 800772c:	f000 ffb0 	bl	8008690 <TIM_CCxChannelCmd>
      break;
 8007730:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f042 0201 	orr.w	r2, r2, #1
 8007740:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b00      	cmp	r3, #0
 800776c:	d020      	beq.n	80077b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b00      	cmp	r3, #0
 8007776:	d01b      	beq.n	80077b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f06f 0202 	mvn.w	r2, #2
 8007780:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	699b      	ldr	r3, [r3, #24]
 800778e:	f003 0303 	and.w	r3, r3, #3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7fb fe4a 	bl	8003430 <HAL_TIM_IC_CaptureCallback>
 800779c:	e005      	b.n	80077aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fb38 	bl	8007e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fb3f 	bl	8007e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f003 0304 	and.w	r3, r3, #4
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d020      	beq.n	80077fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f003 0304 	and.w	r3, r3, #4
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d01b      	beq.n	80077fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f06f 0204 	mvn.w	r2, #4
 80077cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2202      	movs	r2, #2
 80077d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7fb fe24 	bl	8003430 <HAL_TIM_IC_CaptureCallback>
 80077e8:	e005      	b.n	80077f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fb12 	bl	8007e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fb19 	bl	8007e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f003 0308 	and.w	r3, r3, #8
 8007802:	2b00      	cmp	r3, #0
 8007804:	d020      	beq.n	8007848 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f003 0308 	and.w	r3, r3, #8
 800780c:	2b00      	cmp	r3, #0
 800780e:	d01b      	beq.n	8007848 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f06f 0208 	mvn.w	r2, #8
 8007818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2204      	movs	r2, #4
 800781e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	f003 0303 	and.w	r3, r3, #3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7fb fdfe 	bl	8003430 <HAL_TIM_IC_CaptureCallback>
 8007834:	e005      	b.n	8007842 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 faec 	bl	8007e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 faf3 	bl	8007e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	f003 0310 	and.w	r3, r3, #16
 800784e:	2b00      	cmp	r3, #0
 8007850:	d020      	beq.n	8007894 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f003 0310 	and.w	r3, r3, #16
 8007858:	2b00      	cmp	r3, #0
 800785a:	d01b      	beq.n	8007894 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f06f 0210 	mvn.w	r2, #16
 8007864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2208      	movs	r2, #8
 800786a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7fb fdd8 	bl	8003430 <HAL_TIM_IC_CaptureCallback>
 8007880:	e005      	b.n	800788e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fac6 	bl	8007e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 facd 	bl	8007e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f003 0301 	and.w	r3, r3, #1
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00c      	beq.n	80078b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d007      	beq.n	80078b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f06f 0201 	mvn.w	r2, #1
 80078b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 faa4 	bl	8007e00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00c      	beq.n	80078dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d007      	beq.n	80078dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80078d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 ffd8 	bl	800888c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00c      	beq.n	8007900 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d007      	beq.n	8007900 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80078f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fa9e 	bl	8007e3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	f003 0320 	and.w	r3, r3, #32
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00c      	beq.n	8007924 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f003 0320 	and.w	r3, r3, #32
 8007910:	2b00      	cmp	r3, #0
 8007912:	d007      	beq.n	8007924 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f06f 0220 	mvn.w	r2, #32
 800791c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 ffaa 	bl	8008878 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007924:	bf00      	nop
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b086      	sub	sp, #24
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007938:	2300      	movs	r3, #0
 800793a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007942:	2b01      	cmp	r3, #1
 8007944:	d101      	bne.n	800794a <HAL_TIM_IC_ConfigChannel+0x1e>
 8007946:	2302      	movs	r3, #2
 8007948:	e088      	b.n	8007a5c <HAL_TIM_IC_ConfigChannel+0x130>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2201      	movs	r2, #1
 800794e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d11b      	bne.n	8007990 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007968:	f000 fcce 	bl	8008308 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	699a      	ldr	r2, [r3, #24]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f022 020c 	bic.w	r2, r2, #12
 800797a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6999      	ldr	r1, [r3, #24]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	689a      	ldr	r2, [r3, #8]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	430a      	orrs	r2, r1
 800798c:	619a      	str	r2, [r3, #24]
 800798e:	e060      	b.n	8007a52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b04      	cmp	r3, #4
 8007994:	d11c      	bne.n	80079d0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80079a6:	f000 fd52 	bl	800844e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	699a      	ldr	r2, [r3, #24]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80079b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	6999      	ldr	r1, [r3, #24]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	021a      	lsls	r2, r3, #8
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	430a      	orrs	r2, r1
 80079cc:	619a      	str	r2, [r3, #24]
 80079ce:	e040      	b.n	8007a52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b08      	cmp	r3, #8
 80079d4:	d11b      	bne.n	8007a0e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80079e6:	f000 fd9f 	bl	8008528 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	69da      	ldr	r2, [r3, #28]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f022 020c 	bic.w	r2, r2, #12
 80079f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	69d9      	ldr	r1, [r3, #28]
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	689a      	ldr	r2, [r3, #8]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	430a      	orrs	r2, r1
 8007a0a:	61da      	str	r2, [r3, #28]
 8007a0c:	e021      	b.n	8007a52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2b0c      	cmp	r3, #12
 8007a12:	d11c      	bne.n	8007a4e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007a24:	f000 fdbc 	bl	80085a0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	69da      	ldr	r2, [r3, #28]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007a36:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	69d9      	ldr	r1, [r3, #28]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	021a      	lsls	r2, r3, #8
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	61da      	str	r2, [r3, #28]
 8007a4c:	e001      	b.n	8007a52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3718      	adds	r7, #24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a70:	2300      	movs	r3, #0
 8007a72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d101      	bne.n	8007a82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a7e:	2302      	movs	r3, #2
 8007a80:	e0ae      	b.n	8007be0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2b0c      	cmp	r3, #12
 8007a8e:	f200 809f 	bhi.w	8007bd0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007a92:	a201      	add	r2, pc, #4	@ (adr r2, 8007a98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a98:	08007acd 	.word	0x08007acd
 8007a9c:	08007bd1 	.word	0x08007bd1
 8007aa0:	08007bd1 	.word	0x08007bd1
 8007aa4:	08007bd1 	.word	0x08007bd1
 8007aa8:	08007b0d 	.word	0x08007b0d
 8007aac:	08007bd1 	.word	0x08007bd1
 8007ab0:	08007bd1 	.word	0x08007bd1
 8007ab4:	08007bd1 	.word	0x08007bd1
 8007ab8:	08007b4f 	.word	0x08007b4f
 8007abc:	08007bd1 	.word	0x08007bd1
 8007ac0:	08007bd1 	.word	0x08007bd1
 8007ac4:	08007bd1 	.word	0x08007bd1
 8007ac8:	08007b8f 	.word	0x08007b8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68b9      	ldr	r1, [r7, #8]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 fa68 	bl	8007fa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	699a      	ldr	r2, [r3, #24]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f042 0208 	orr.w	r2, r2, #8
 8007ae6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	699a      	ldr	r2, [r3, #24]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 0204 	bic.w	r2, r2, #4
 8007af6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6999      	ldr	r1, [r3, #24]
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	691a      	ldr	r2, [r3, #16]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	619a      	str	r2, [r3, #24]
      break;
 8007b0a:	e064      	b.n	8007bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 fab8 	bl	8008088 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	699a      	ldr	r2, [r3, #24]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	699a      	ldr	r2, [r3, #24]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6999      	ldr	r1, [r3, #24]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	021a      	lsls	r2, r3, #8
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	619a      	str	r2, [r3, #24]
      break;
 8007b4c:	e043      	b.n	8007bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68b9      	ldr	r1, [r7, #8]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f000 fb0d 	bl	8008174 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	69da      	ldr	r2, [r3, #28]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f042 0208 	orr.w	r2, r2, #8
 8007b68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	69da      	ldr	r2, [r3, #28]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f022 0204 	bic.w	r2, r2, #4
 8007b78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	69d9      	ldr	r1, [r3, #28]
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	691a      	ldr	r2, [r3, #16]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	61da      	str	r2, [r3, #28]
      break;
 8007b8c:	e023      	b.n	8007bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68b9      	ldr	r1, [r7, #8]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 fb61 	bl	800825c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	69da      	ldr	r2, [r3, #28]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	69da      	ldr	r2, [r3, #28]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	69d9      	ldr	r1, [r3, #28]
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	021a      	lsls	r2, r3, #8
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	61da      	str	r2, [r3, #28]
      break;
 8007bce:	e002      	b.n	8007bd6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8007bd4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d101      	bne.n	8007c04 <HAL_TIM_ConfigClockSource+0x1c>
 8007c00:	2302      	movs	r3, #2
 8007c02:	e0b4      	b.n	8007d6e <HAL_TIM_ConfigClockSource+0x186>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c3c:	d03e      	beq.n	8007cbc <HAL_TIM_ConfigClockSource+0xd4>
 8007c3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c42:	f200 8087 	bhi.w	8007d54 <HAL_TIM_ConfigClockSource+0x16c>
 8007c46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c4a:	f000 8086 	beq.w	8007d5a <HAL_TIM_ConfigClockSource+0x172>
 8007c4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c52:	d87f      	bhi.n	8007d54 <HAL_TIM_ConfigClockSource+0x16c>
 8007c54:	2b70      	cmp	r3, #112	@ 0x70
 8007c56:	d01a      	beq.n	8007c8e <HAL_TIM_ConfigClockSource+0xa6>
 8007c58:	2b70      	cmp	r3, #112	@ 0x70
 8007c5a:	d87b      	bhi.n	8007d54 <HAL_TIM_ConfigClockSource+0x16c>
 8007c5c:	2b60      	cmp	r3, #96	@ 0x60
 8007c5e:	d050      	beq.n	8007d02 <HAL_TIM_ConfigClockSource+0x11a>
 8007c60:	2b60      	cmp	r3, #96	@ 0x60
 8007c62:	d877      	bhi.n	8007d54 <HAL_TIM_ConfigClockSource+0x16c>
 8007c64:	2b50      	cmp	r3, #80	@ 0x50
 8007c66:	d03c      	beq.n	8007ce2 <HAL_TIM_ConfigClockSource+0xfa>
 8007c68:	2b50      	cmp	r3, #80	@ 0x50
 8007c6a:	d873      	bhi.n	8007d54 <HAL_TIM_ConfigClockSource+0x16c>
 8007c6c:	2b40      	cmp	r3, #64	@ 0x40
 8007c6e:	d058      	beq.n	8007d22 <HAL_TIM_ConfigClockSource+0x13a>
 8007c70:	2b40      	cmp	r3, #64	@ 0x40
 8007c72:	d86f      	bhi.n	8007d54 <HAL_TIM_ConfigClockSource+0x16c>
 8007c74:	2b30      	cmp	r3, #48	@ 0x30
 8007c76:	d064      	beq.n	8007d42 <HAL_TIM_ConfigClockSource+0x15a>
 8007c78:	2b30      	cmp	r3, #48	@ 0x30
 8007c7a:	d86b      	bhi.n	8007d54 <HAL_TIM_ConfigClockSource+0x16c>
 8007c7c:	2b20      	cmp	r3, #32
 8007c7e:	d060      	beq.n	8007d42 <HAL_TIM_ConfigClockSource+0x15a>
 8007c80:	2b20      	cmp	r3, #32
 8007c82:	d867      	bhi.n	8007d54 <HAL_TIM_ConfigClockSource+0x16c>
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d05c      	beq.n	8007d42 <HAL_TIM_ConfigClockSource+0x15a>
 8007c88:	2b10      	cmp	r3, #16
 8007c8a:	d05a      	beq.n	8007d42 <HAL_TIM_ConfigClockSource+0x15a>
 8007c8c:	e062      	b.n	8007d54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007c9e:	f000 fcd7 	bl	8008650 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007cb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68ba      	ldr	r2, [r7, #8]
 8007cb8:	609a      	str	r2, [r3, #8]
      break;
 8007cba:	e04f      	b.n	8007d5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ccc:	f000 fcc0 	bl	8008650 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	689a      	ldr	r2, [r3, #8]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007cde:	609a      	str	r2, [r3, #8]
      break;
 8007ce0:	e03c      	b.n	8007d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cee:	461a      	mov	r2, r3
 8007cf0:	f000 fb7e 	bl	80083f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2150      	movs	r1, #80	@ 0x50
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 fc8d 	bl	800861a <TIM_ITRx_SetConfig>
      break;
 8007d00:	e02c      	b.n	8007d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f000 fbda 	bl	80084c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2160      	movs	r1, #96	@ 0x60
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f000 fc7d 	bl	800861a <TIM_ITRx_SetConfig>
      break;
 8007d20:	e01c      	b.n	8007d5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d2e:	461a      	mov	r2, r3
 8007d30:	f000 fb5e 	bl	80083f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2140      	movs	r1, #64	@ 0x40
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 fc6d 	bl	800861a <TIM_ITRx_SetConfig>
      break;
 8007d40:	e00c      	b.n	8007d5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	f000 fc64 	bl	800861a <TIM_ITRx_SetConfig>
      break;
 8007d52:	e003      	b.n	8007d5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	73fb      	strb	r3, [r7, #15]
      break;
 8007d58:	e000      	b.n	8007d5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007d5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
	...

08007d78 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007d82:	2300      	movs	r3, #0
 8007d84:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	2b0c      	cmp	r3, #12
 8007d8a:	d831      	bhi.n	8007df0 <HAL_TIM_ReadCapturedValue+0x78>
 8007d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8007d94 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d92:	bf00      	nop
 8007d94:	08007dc9 	.word	0x08007dc9
 8007d98:	08007df1 	.word	0x08007df1
 8007d9c:	08007df1 	.word	0x08007df1
 8007da0:	08007df1 	.word	0x08007df1
 8007da4:	08007dd3 	.word	0x08007dd3
 8007da8:	08007df1 	.word	0x08007df1
 8007dac:	08007df1 	.word	0x08007df1
 8007db0:	08007df1 	.word	0x08007df1
 8007db4:	08007ddd 	.word	0x08007ddd
 8007db8:	08007df1 	.word	0x08007df1
 8007dbc:	08007df1 	.word	0x08007df1
 8007dc0:	08007df1 	.word	0x08007df1
 8007dc4:	08007de7 	.word	0x08007de7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dce:	60fb      	str	r3, [r7, #12]

      break;
 8007dd0:	e00f      	b.n	8007df2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd8:	60fb      	str	r3, [r7, #12]

      break;
 8007dda:	e00a      	b.n	8007df2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007de2:	60fb      	str	r3, [r7, #12]

      break;
 8007de4:	e005      	b.n	8007df2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dec:	60fb      	str	r3, [r7, #12]

      break;
 8007dee:	e000      	b.n	8007df2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007df0:	bf00      	nop
  }

  return tmpreg;
 8007df2:	68fb      	ldr	r3, [r7, #12]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a46      	ldr	r2, [pc, #280]	@ (8007f7c <TIM_Base_SetConfig+0x12c>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d013      	beq.n	8007e90 <TIM_Base_SetConfig+0x40>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e6e:	d00f      	beq.n	8007e90 <TIM_Base_SetConfig+0x40>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a43      	ldr	r2, [pc, #268]	@ (8007f80 <TIM_Base_SetConfig+0x130>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d00b      	beq.n	8007e90 <TIM_Base_SetConfig+0x40>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a42      	ldr	r2, [pc, #264]	@ (8007f84 <TIM_Base_SetConfig+0x134>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d007      	beq.n	8007e90 <TIM_Base_SetConfig+0x40>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a41      	ldr	r2, [pc, #260]	@ (8007f88 <TIM_Base_SetConfig+0x138>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d003      	beq.n	8007e90 <TIM_Base_SetConfig+0x40>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a40      	ldr	r2, [pc, #256]	@ (8007f8c <TIM_Base_SetConfig+0x13c>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d108      	bne.n	8007ea2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a35      	ldr	r2, [pc, #212]	@ (8007f7c <TIM_Base_SetConfig+0x12c>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d02b      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eb0:	d027      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a32      	ldr	r2, [pc, #200]	@ (8007f80 <TIM_Base_SetConfig+0x130>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d023      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a31      	ldr	r2, [pc, #196]	@ (8007f84 <TIM_Base_SetConfig+0x134>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d01f      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a30      	ldr	r2, [pc, #192]	@ (8007f88 <TIM_Base_SetConfig+0x138>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d01b      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a2f      	ldr	r2, [pc, #188]	@ (8007f8c <TIM_Base_SetConfig+0x13c>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d017      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a2e      	ldr	r2, [pc, #184]	@ (8007f90 <TIM_Base_SetConfig+0x140>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d013      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a2d      	ldr	r2, [pc, #180]	@ (8007f94 <TIM_Base_SetConfig+0x144>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d00f      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a2c      	ldr	r2, [pc, #176]	@ (8007f98 <TIM_Base_SetConfig+0x148>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d00b      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a2b      	ldr	r2, [pc, #172]	@ (8007f9c <TIM_Base_SetConfig+0x14c>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d007      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a2a      	ldr	r2, [pc, #168]	@ (8007fa0 <TIM_Base_SetConfig+0x150>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d003      	beq.n	8007f02 <TIM_Base_SetConfig+0xb2>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a29      	ldr	r2, [pc, #164]	@ (8007fa4 <TIM_Base_SetConfig+0x154>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d108      	bne.n	8007f14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	689a      	ldr	r2, [r3, #8]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4a10      	ldr	r2, [pc, #64]	@ (8007f7c <TIM_Base_SetConfig+0x12c>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d003      	beq.n	8007f48 <TIM_Base_SetConfig+0xf8>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a12      	ldr	r2, [pc, #72]	@ (8007f8c <TIM_Base_SetConfig+0x13c>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d103      	bne.n	8007f50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	691a      	ldr	r2, [r3, #16]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d105      	bne.n	8007f6e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	f023 0201 	bic.w	r2, r3, #1
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	611a      	str	r2, [r3, #16]
  }
}
 8007f6e:	bf00      	nop
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	40010000 	.word	0x40010000
 8007f80:	40000400 	.word	0x40000400
 8007f84:	40000800 	.word	0x40000800
 8007f88:	40000c00 	.word	0x40000c00
 8007f8c:	40010400 	.word	0x40010400
 8007f90:	40014000 	.word	0x40014000
 8007f94:	40014400 	.word	0x40014400
 8007f98:	40014800 	.word	0x40014800
 8007f9c:	40001800 	.word	0x40001800
 8007fa0:	40001c00 	.word	0x40001c00
 8007fa4:	40002000 	.word	0x40002000

08007fa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b087      	sub	sp, #28
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a1b      	ldr	r3, [r3, #32]
 8007fb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a1b      	ldr	r3, [r3, #32]
 8007fbc:	f023 0201 	bic.w	r2, r3, #1
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f023 0303 	bic.w	r3, r3, #3
 8007fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f023 0302 	bic.w	r3, r3, #2
 8007ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a20      	ldr	r2, [pc, #128]	@ (8008080 <TIM_OC1_SetConfig+0xd8>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d003      	beq.n	800800c <TIM_OC1_SetConfig+0x64>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a1f      	ldr	r2, [pc, #124]	@ (8008084 <TIM_OC1_SetConfig+0xdc>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d10c      	bne.n	8008026 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	f023 0308 	bic.w	r3, r3, #8
 8008012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	4313      	orrs	r3, r2
 800801c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f023 0304 	bic.w	r3, r3, #4
 8008024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a15      	ldr	r2, [pc, #84]	@ (8008080 <TIM_OC1_SetConfig+0xd8>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d003      	beq.n	8008036 <TIM_OC1_SetConfig+0x8e>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a14      	ldr	r2, [pc, #80]	@ (8008084 <TIM_OC1_SetConfig+0xdc>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d111      	bne.n	800805a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800803c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008044:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	693a      	ldr	r2, [r7, #16]
 800804c:	4313      	orrs	r3, r2
 800804e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	4313      	orrs	r3, r2
 8008058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	685a      	ldr	r2, [r3, #4]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	621a      	str	r2, [r3, #32]
}
 8008074:	bf00      	nop
 8008076:	371c      	adds	r7, #28
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr
 8008080:	40010000 	.word	0x40010000
 8008084:	40010400 	.word	0x40010400

08008088 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008088:	b480      	push	{r7}
 800808a:	b087      	sub	sp, #28
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a1b      	ldr	r3, [r3, #32]
 8008096:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a1b      	ldr	r3, [r3, #32]
 800809c:	f023 0210 	bic.w	r2, r3, #16
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	021b      	lsls	r3, r3, #8
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f023 0320 	bic.w	r3, r3, #32
 80080d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	011b      	lsls	r3, r3, #4
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	4313      	orrs	r3, r2
 80080de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a22      	ldr	r2, [pc, #136]	@ (800816c <TIM_OC2_SetConfig+0xe4>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d003      	beq.n	80080f0 <TIM_OC2_SetConfig+0x68>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a21      	ldr	r2, [pc, #132]	@ (8008170 <TIM_OC2_SetConfig+0xe8>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d10d      	bne.n	800810c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	011b      	lsls	r3, r3, #4
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	4313      	orrs	r3, r2
 8008102:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800810a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a17      	ldr	r2, [pc, #92]	@ (800816c <TIM_OC2_SetConfig+0xe4>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d003      	beq.n	800811c <TIM_OC2_SetConfig+0x94>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a16      	ldr	r2, [pc, #88]	@ (8008170 <TIM_OC2_SetConfig+0xe8>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d113      	bne.n	8008144 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008122:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800812a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	4313      	orrs	r3, r2
 8008136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	4313      	orrs	r3, r2
 8008142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	697a      	ldr	r2, [r7, #20]
 800815c:	621a      	str	r2, [r3, #32]
}
 800815e:	bf00      	nop
 8008160:	371c      	adds	r7, #28
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	40010000 	.word	0x40010000
 8008170:	40010400 	.word	0x40010400

08008174 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008174:	b480      	push	{r7}
 8008176:	b087      	sub	sp, #28
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a1b      	ldr	r3, [r3, #32]
 8008188:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	69db      	ldr	r3, [r3, #28]
 800819a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f023 0303 	bic.w	r3, r3, #3
 80081aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	4313      	orrs	r3, r2
 80081b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80081bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	021b      	lsls	r3, r3, #8
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a21      	ldr	r2, [pc, #132]	@ (8008254 <TIM_OC3_SetConfig+0xe0>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d003      	beq.n	80081da <TIM_OC3_SetConfig+0x66>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a20      	ldr	r2, [pc, #128]	@ (8008258 <TIM_OC3_SetConfig+0xe4>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d10d      	bne.n	80081f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80081e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	021b      	lsls	r3, r3, #8
 80081e8:	697a      	ldr	r2, [r7, #20]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a16      	ldr	r2, [pc, #88]	@ (8008254 <TIM_OC3_SetConfig+0xe0>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d003      	beq.n	8008206 <TIM_OC3_SetConfig+0x92>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a15      	ldr	r2, [pc, #84]	@ (8008258 <TIM_OC3_SetConfig+0xe4>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d113      	bne.n	800822e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800820c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008214:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	011b      	lsls	r3, r3, #4
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	4313      	orrs	r3, r2
 8008220:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	011b      	lsls	r3, r3, #4
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	4313      	orrs	r3, r2
 800822c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	693a      	ldr	r2, [r7, #16]
 8008232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	685a      	ldr	r2, [r3, #4]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	697a      	ldr	r2, [r7, #20]
 8008246:	621a      	str	r2, [r3, #32]
}
 8008248:	bf00      	nop
 800824a:	371c      	adds	r7, #28
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr
 8008254:	40010000 	.word	0x40010000
 8008258:	40010400 	.word	0x40010400

0800825c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800825c:	b480      	push	{r7}
 800825e:	b087      	sub	sp, #28
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6a1b      	ldr	r3, [r3, #32]
 8008270:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800828a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008292:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	021b      	lsls	r3, r3, #8
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	4313      	orrs	r3, r2
 800829e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80082a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	031b      	lsls	r3, r3, #12
 80082ae:	693a      	ldr	r2, [r7, #16]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a12      	ldr	r2, [pc, #72]	@ (8008300 <TIM_OC4_SetConfig+0xa4>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d003      	beq.n	80082c4 <TIM_OC4_SetConfig+0x68>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a11      	ldr	r2, [pc, #68]	@ (8008304 <TIM_OC4_SetConfig+0xa8>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d109      	bne.n	80082d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	695b      	ldr	r3, [r3, #20]
 80082d0:	019b      	lsls	r3, r3, #6
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	685a      	ldr	r2, [r3, #4]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	621a      	str	r2, [r3, #32]
}
 80082f2:	bf00      	nop
 80082f4:	371c      	adds	r7, #28
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	40010000 	.word	0x40010000
 8008304:	40010400 	.word	0x40010400

08008308 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008308:	b480      	push	{r7}
 800830a:	b087      	sub	sp, #28
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
 8008314:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6a1b      	ldr	r3, [r3, #32]
 800831a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6a1b      	ldr	r3, [r3, #32]
 8008320:	f023 0201 	bic.w	r2, r3, #1
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	4a28      	ldr	r2, [pc, #160]	@ (80083d4 <TIM_TI1_SetConfig+0xcc>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d01b      	beq.n	800836e <TIM_TI1_SetConfig+0x66>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800833c:	d017      	beq.n	800836e <TIM_TI1_SetConfig+0x66>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	4a25      	ldr	r2, [pc, #148]	@ (80083d8 <TIM_TI1_SetConfig+0xd0>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d013      	beq.n	800836e <TIM_TI1_SetConfig+0x66>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	4a24      	ldr	r2, [pc, #144]	@ (80083dc <TIM_TI1_SetConfig+0xd4>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d00f      	beq.n	800836e <TIM_TI1_SetConfig+0x66>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	4a23      	ldr	r2, [pc, #140]	@ (80083e0 <TIM_TI1_SetConfig+0xd8>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d00b      	beq.n	800836e <TIM_TI1_SetConfig+0x66>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	4a22      	ldr	r2, [pc, #136]	@ (80083e4 <TIM_TI1_SetConfig+0xdc>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d007      	beq.n	800836e <TIM_TI1_SetConfig+0x66>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	4a21      	ldr	r2, [pc, #132]	@ (80083e8 <TIM_TI1_SetConfig+0xe0>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d003      	beq.n	800836e <TIM_TI1_SetConfig+0x66>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	4a20      	ldr	r2, [pc, #128]	@ (80083ec <TIM_TI1_SetConfig+0xe4>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d101      	bne.n	8008372 <TIM_TI1_SetConfig+0x6a>
 800836e:	2301      	movs	r3, #1
 8008370:	e000      	b.n	8008374 <TIM_TI1_SetConfig+0x6c>
 8008372:	2300      	movs	r3, #0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d008      	beq.n	800838a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f023 0303 	bic.w	r3, r3, #3
 800837e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4313      	orrs	r3, r2
 8008386:	617b      	str	r3, [r7, #20]
 8008388:	e003      	b.n	8008392 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	f043 0301 	orr.w	r3, r3, #1
 8008390:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008398:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	011b      	lsls	r3, r3, #4
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	f023 030a 	bic.w	r3, r3, #10
 80083ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	f003 030a 	and.w	r3, r3, #10
 80083b4:	693a      	ldr	r2, [r7, #16]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	697a      	ldr	r2, [r7, #20]
 80083be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	621a      	str	r2, [r3, #32]
}
 80083c6:	bf00      	nop
 80083c8:	371c      	adds	r7, #28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	40010000 	.word	0x40010000
 80083d8:	40000400 	.word	0x40000400
 80083dc:	40000800 	.word	0x40000800
 80083e0:	40000c00 	.word	0x40000c00
 80083e4:	40010400 	.word	0x40010400
 80083e8:	40014000 	.word	0x40014000
 80083ec:	40001800 	.word	0x40001800

080083f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b087      	sub	sp, #28
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6a1b      	ldr	r3, [r3, #32]
 8008400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	6a1b      	ldr	r3, [r3, #32]
 8008406:	f023 0201 	bic.w	r2, r3, #1
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	699b      	ldr	r3, [r3, #24]
 8008412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800841a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	011b      	lsls	r3, r3, #4
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	4313      	orrs	r3, r2
 8008424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	f023 030a 	bic.w	r3, r3, #10
 800842c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800842e:	697a      	ldr	r2, [r7, #20]
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	4313      	orrs	r3, r2
 8008434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	693a      	ldr	r2, [r7, #16]
 800843a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	697a      	ldr	r2, [r7, #20]
 8008440:	621a      	str	r2, [r3, #32]
}
 8008442:	bf00      	nop
 8008444:	371c      	adds	r7, #28
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr

0800844e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800844e:	b480      	push	{r7}
 8008450:	b087      	sub	sp, #28
 8008452:	af00      	add	r7, sp, #0
 8008454:	60f8      	str	r0, [r7, #12]
 8008456:	60b9      	str	r1, [r7, #8]
 8008458:	607a      	str	r2, [r7, #4]
 800845a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6a1b      	ldr	r3, [r3, #32]
 8008460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	f023 0210 	bic.w	r2, r3, #16
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800847a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	021b      	lsls	r3, r3, #8
 8008480:	693a      	ldr	r2, [r7, #16]
 8008482:	4313      	orrs	r3, r2
 8008484:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800848c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	031b      	lsls	r3, r3, #12
 8008492:	b29b      	uxth	r3, r3
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	4313      	orrs	r3, r2
 8008498:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80084a0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	011b      	lsls	r3, r3, #4
 80084a6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80084aa:	697a      	ldr	r2, [r7, #20]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	621a      	str	r2, [r3, #32]
}
 80084bc:	bf00      	nop
 80084be:	371c      	adds	r7, #28
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6a1b      	ldr	r3, [r3, #32]
 80084d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6a1b      	ldr	r3, [r3, #32]
 80084de:	f023 0210 	bic.w	r2, r3, #16
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80084f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	031b      	lsls	r3, r3, #12
 80084f8:	693a      	ldr	r2, [r7, #16]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008504:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	011b      	lsls	r3, r3, #4
 800850a:	697a      	ldr	r2, [r7, #20]
 800850c:	4313      	orrs	r3, r2
 800850e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	621a      	str	r2, [r3, #32]
}
 800851c:	bf00      	nop
 800851e:	371c      	adds	r7, #28
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008528:	b480      	push	{r7}
 800852a:	b087      	sub	sp, #28
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
 8008534:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6a1b      	ldr	r3, [r3, #32]
 800853a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6a1b      	ldr	r3, [r3, #32]
 8008540:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	69db      	ldr	r3, [r3, #28]
 800854c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	f023 0303 	bic.w	r3, r3, #3
 8008554:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008556:	693a      	ldr	r2, [r7, #16]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4313      	orrs	r3, r2
 800855c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008564:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	011b      	lsls	r3, r3, #4
 800856a:	b2db      	uxtb	r3, r3
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	4313      	orrs	r3, r2
 8008570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008578:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	021b      	lsls	r3, r3, #8
 800857e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	4313      	orrs	r3, r2
 8008586:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	697a      	ldr	r2, [r7, #20]
 8008592:	621a      	str	r2, [r3, #32]
}
 8008594:	bf00      	nop
 8008596:	371c      	adds	r7, #28
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
 80085ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6a1b      	ldr	r3, [r3, #32]
 80085b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6a1b      	ldr	r3, [r3, #32]
 80085b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085cc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	021b      	lsls	r3, r3, #8
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80085de:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	031b      	lsls	r3, r3, #12
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80085f2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	031b      	lsls	r3, r3, #12
 80085f8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	4313      	orrs	r3, r2
 8008600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	693a      	ldr	r2, [r7, #16]
 8008606:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	621a      	str	r2, [r3, #32]
}
 800860e:	bf00      	nop
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800861a:	b480      	push	{r7}
 800861c:	b085      	sub	sp, #20
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	4313      	orrs	r3, r2
 8008638:	f043 0307 	orr.w	r3, r3, #7
 800863c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	609a      	str	r2, [r3, #8]
}
 8008644:	bf00      	nop
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008650:	b480      	push	{r7}
 8008652:	b087      	sub	sp, #28
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
 800865c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800866a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	021a      	lsls	r2, r3, #8
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	431a      	orrs	r2, r3
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	4313      	orrs	r3, r2
 8008678:	697a      	ldr	r2, [r7, #20]
 800867a:	4313      	orrs	r3, r2
 800867c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	697a      	ldr	r2, [r7, #20]
 8008682:	609a      	str	r2, [r3, #8]
}
 8008684:	bf00      	nop
 8008686:	371c      	adds	r7, #28
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008690:	b480      	push	{r7}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	f003 031f 	and.w	r3, r3, #31
 80086a2:	2201      	movs	r2, #1
 80086a4:	fa02 f303 	lsl.w	r3, r2, r3
 80086a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6a1a      	ldr	r2, [r3, #32]
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	43db      	mvns	r3, r3
 80086b2:	401a      	ands	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6a1a      	ldr	r2, [r3, #32]
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	f003 031f 	and.w	r3, r3, #31
 80086c2:	6879      	ldr	r1, [r7, #4]
 80086c4:	fa01 f303 	lsl.w	r3, r1, r3
 80086c8:	431a      	orrs	r2, r3
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	621a      	str	r2, [r3, #32]
}
 80086ce:	bf00      	nop
 80086d0:	371c      	adds	r7, #28
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
	...

080086dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d101      	bne.n	80086f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086f0:	2302      	movs	r3, #2
 80086f2:	e05a      	b.n	80087aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2202      	movs	r2, #2
 8008700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800871a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	4313      	orrs	r3, r2
 8008724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a21      	ldr	r2, [pc, #132]	@ (80087b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d022      	beq.n	800877e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008740:	d01d      	beq.n	800877e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a1d      	ldr	r2, [pc, #116]	@ (80087bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d018      	beq.n	800877e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a1b      	ldr	r2, [pc, #108]	@ (80087c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d013      	beq.n	800877e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a1a      	ldr	r2, [pc, #104]	@ (80087c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d00e      	beq.n	800877e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a18      	ldr	r2, [pc, #96]	@ (80087c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d009      	beq.n	800877e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a17      	ldr	r2, [pc, #92]	@ (80087cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d004      	beq.n	800877e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a15      	ldr	r2, [pc, #84]	@ (80087d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d10c      	bne.n	8008798 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008784:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	4313      	orrs	r3, r2
 800878e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	40010000 	.word	0x40010000
 80087bc:	40000400 	.word	0x40000400
 80087c0:	40000800 	.word	0x40000800
 80087c4:	40000c00 	.word	0x40000c00
 80087c8:	40010400 	.word	0x40010400
 80087cc:	40014000 	.word	0x40014000
 80087d0:	40001800 	.word	0x40001800

080087d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80087de:	2300      	movs	r3, #0
 80087e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d101      	bne.n	80087f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80087ec:	2302      	movs	r3, #2
 80087ee:	e03d      	b.n	800886c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	4313      	orrs	r3, r2
 8008804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	4313      	orrs	r3, r2
 8008812:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	4313      	orrs	r3, r2
 8008820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4313      	orrs	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	691b      	ldr	r3, [r3, #16]
 800883a:	4313      	orrs	r3, r2
 800883c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	4313      	orrs	r3, r2
 800884a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	4313      	orrs	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d101      	bne.n	80088b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e042      	b.n	8008938 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d106      	bne.n	80088cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7fb fc3c 	bl	8004144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2224      	movs	r2, #36	@ 0x24
 80088d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68da      	ldr	r2, [r3, #12]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80088e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 fdbd 	bl	8009464 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	691a      	ldr	r2, [r3, #16]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80088f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	695a      	ldr	r2, [r3, #20]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008908:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	68da      	ldr	r2, [r3, #12]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008918:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2220      	movs	r2, #32
 8008924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2220      	movs	r2, #32
 800892c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3708      	adds	r7, #8
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b08a      	sub	sp, #40	@ 0x28
 8008944:	af02      	add	r7, sp, #8
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	603b      	str	r3, [r7, #0]
 800894c:	4613      	mov	r3, r2
 800894e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008950:	2300      	movs	r3, #0
 8008952:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800895a:	b2db      	uxtb	r3, r3
 800895c:	2b20      	cmp	r3, #32
 800895e:	d175      	bne.n	8008a4c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d002      	beq.n	800896c <HAL_UART_Transmit+0x2c>
 8008966:	88fb      	ldrh	r3, [r7, #6]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d101      	bne.n	8008970 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e06e      	b.n	8008a4e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2200      	movs	r2, #0
 8008974:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2221      	movs	r2, #33	@ 0x21
 800897a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800897e:	f7fb fddd 	bl	800453c <HAL_GetTick>
 8008982:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	88fa      	ldrh	r2, [r7, #6]
 8008988:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	88fa      	ldrh	r2, [r7, #6]
 800898e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008998:	d108      	bne.n	80089ac <HAL_UART_Transmit+0x6c>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d104      	bne.n	80089ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80089a2:	2300      	movs	r3, #0
 80089a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	61bb      	str	r3, [r7, #24]
 80089aa:	e003      	b.n	80089b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089b0:	2300      	movs	r3, #0
 80089b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80089b4:	e02e      	b.n	8008a14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	2200      	movs	r2, #0
 80089be:	2180      	movs	r1, #128	@ 0x80
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f000 fb1f 	bl	8009004 <UART_WaitOnFlagUntilTimeout>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d005      	beq.n	80089d8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2220      	movs	r2, #32
 80089d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80089d4:	2303      	movs	r3, #3
 80089d6:	e03a      	b.n	8008a4e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10b      	bne.n	80089f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	881b      	ldrh	r3, [r3, #0]
 80089e2:	461a      	mov	r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	3302      	adds	r3, #2
 80089f2:	61bb      	str	r3, [r7, #24]
 80089f4:	e007      	b.n	8008a06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	781a      	ldrb	r2, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	3301      	adds	r3, #1
 8008a04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1cb      	bne.n	80089b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	9300      	str	r3, [sp, #0]
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	2200      	movs	r2, #0
 8008a26:	2140      	movs	r1, #64	@ 0x40
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f000 faeb 	bl	8009004 <UART_WaitOnFlagUntilTimeout>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d005      	beq.n	8008a40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2220      	movs	r2, #32
 8008a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	e006      	b.n	8008a4e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2220      	movs	r2, #32
 8008a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	e000      	b.n	8008a4e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008a4c:	2302      	movs	r3, #2
  }
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3720      	adds	r7, #32
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b084      	sub	sp, #16
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	4613      	mov	r3, r2
 8008a62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b20      	cmp	r3, #32
 8008a6e:	d112      	bne.n	8008a96 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d002      	beq.n	8008a7c <HAL_UART_Receive_IT+0x26>
 8008a76:	88fb      	ldrh	r3, [r7, #6]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d101      	bne.n	8008a80 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e00b      	b.n	8008a98 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2200      	movs	r2, #0
 8008a84:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008a86:	88fb      	ldrh	r3, [r7, #6]
 8008a88:	461a      	mov	r2, r3
 8008a8a:	68b9      	ldr	r1, [r7, #8]
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f000 fb12 	bl	80090b6 <UART_Start_Receive_IT>
 8008a92:	4603      	mov	r3, r0
 8008a94:	e000      	b.n	8008a98 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008a96:	2302      	movs	r3, #2
  }
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b0ba      	sub	sp, #232	@ 0xe8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008acc:	2300      	movs	r3, #0
 8008ace:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ad6:	f003 030f 	and.w	r3, r3, #15
 8008ada:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008ade:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d10f      	bne.n	8008b06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008aea:	f003 0320 	and.w	r3, r3, #32
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d009      	beq.n	8008b06 <HAL_UART_IRQHandler+0x66>
 8008af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008af6:	f003 0320 	and.w	r3, r3, #32
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d003      	beq.n	8008b06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fbf2 	bl	80092e8 <UART_Receive_IT>
      return;
 8008b04:	e25b      	b.n	8008fbe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008b06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 80de 	beq.w	8008ccc <HAL_UART_IRQHandler+0x22c>
 8008b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b14:	f003 0301 	and.w	r3, r3, #1
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d106      	bne.n	8008b2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b20:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f000 80d1 	beq.w	8008ccc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b2e:	f003 0301 	and.w	r3, r3, #1
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00b      	beq.n	8008b4e <HAL_UART_IRQHandler+0xae>
 8008b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d005      	beq.n	8008b4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b46:	f043 0201 	orr.w	r2, r3, #1
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b52:	f003 0304 	and.w	r3, r3, #4
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00b      	beq.n	8008b72 <HAL_UART_IRQHandler+0xd2>
 8008b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b5e:	f003 0301 	and.w	r3, r3, #1
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d005      	beq.n	8008b72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b6a:	f043 0202 	orr.w	r2, r3, #2
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b76:	f003 0302 	and.w	r3, r3, #2
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00b      	beq.n	8008b96 <HAL_UART_IRQHandler+0xf6>
 8008b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b82:	f003 0301 	and.w	r3, r3, #1
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d005      	beq.n	8008b96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b8e:	f043 0204 	orr.w	r2, r3, #4
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b9a:	f003 0308 	and.w	r3, r3, #8
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d011      	beq.n	8008bc6 <HAL_UART_IRQHandler+0x126>
 8008ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ba6:	f003 0320 	and.w	r3, r3, #32
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d105      	bne.n	8008bba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d005      	beq.n	8008bc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bbe:	f043 0208 	orr.w	r2, r3, #8
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f000 81f2 	beq.w	8008fb4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bd4:	f003 0320 	and.w	r3, r3, #32
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d008      	beq.n	8008bee <HAL_UART_IRQHandler+0x14e>
 8008bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008be0:	f003 0320 	and.w	r3, r3, #32
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d002      	beq.n	8008bee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f000 fb7d 	bl	80092e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	695b      	ldr	r3, [r3, #20]
 8008bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bf8:	2b40      	cmp	r3, #64	@ 0x40
 8008bfa:	bf0c      	ite	eq
 8008bfc:	2301      	moveq	r3, #1
 8008bfe:	2300      	movne	r3, #0
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c0a:	f003 0308 	and.w	r3, r3, #8
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d103      	bne.n	8008c1a <HAL_UART_IRQHandler+0x17a>
 8008c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d04f      	beq.n	8008cba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fa85 	bl	800912a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c2a:	2b40      	cmp	r3, #64	@ 0x40
 8008c2c:	d141      	bne.n	8008cb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3314      	adds	r3, #20
 8008c34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c3c:	e853 3f00 	ldrex	r3, [r3]
 8008c40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3314      	adds	r3, #20
 8008c56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c5a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008c5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008c66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008c6a:	e841 2300 	strex	r3, r2, [r1]
 8008c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008c72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1d9      	bne.n	8008c2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d013      	beq.n	8008caa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c86:	4a7e      	ldr	r2, [pc, #504]	@ (8008e80 <HAL_UART_IRQHandler+0x3e0>)
 8008c88:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7fc fa05 	bl	800509e <HAL_DMA_Abort_IT>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d016      	beq.n	8008cc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ca8:	e00e      	b.n	8008cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f994 	bl	8008fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cb0:	e00a      	b.n	8008cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f990 	bl	8008fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cb8:	e006      	b.n	8008cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f98c 	bl	8008fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008cc6:	e175      	b.n	8008fb4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cc8:	bf00      	nop
    return;
 8008cca:	e173      	b.n	8008fb4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	f040 814f 	bne.w	8008f74 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cda:	f003 0310 	and.w	r3, r3, #16
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f000 8148 	beq.w	8008f74 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ce8:	f003 0310 	and.w	r3, r3, #16
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f000 8141 	beq.w	8008f74 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	60bb      	str	r3, [r7, #8]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	60bb      	str	r3, [r7, #8]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	60bb      	str	r3, [r7, #8]
 8008d06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	695b      	ldr	r3, [r3, #20]
 8008d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d12:	2b40      	cmp	r3, #64	@ 0x40
 8008d14:	f040 80b6 	bne.w	8008e84 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008d24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f000 8145 	beq.w	8008fb8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008d32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008d36:	429a      	cmp	r2, r3
 8008d38:	f080 813e 	bcs.w	8008fb8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008d42:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d48:	69db      	ldr	r3, [r3, #28]
 8008d4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d4e:	f000 8088 	beq.w	8008e62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	330c      	adds	r3, #12
 8008d58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008d60:	e853 3f00 	ldrex	r3, [r3]
 8008d64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008d68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	330c      	adds	r3, #12
 8008d7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008d7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008d82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d86:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008d8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d8e:	e841 2300 	strex	r3, r2, [r1]
 8008d92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008d96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1d9      	bne.n	8008d52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	3314      	adds	r3, #20
 8008da4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008da8:	e853 3f00 	ldrex	r3, [r3]
 8008dac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008dae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008db0:	f023 0301 	bic.w	r3, r3, #1
 8008db4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3314      	adds	r3, #20
 8008dbe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008dc2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008dc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008dca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008dce:	e841 2300 	strex	r3, r2, [r1]
 8008dd2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008dd4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1e1      	bne.n	8008d9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	3314      	adds	r3, #20
 8008de0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008de4:	e853 3f00 	ldrex	r3, [r3]
 8008de8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008dea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008dec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008df0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	3314      	adds	r3, #20
 8008dfa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008dfe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008e00:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e02:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008e04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008e06:	e841 2300 	strex	r3, r2, [r1]
 8008e0a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008e0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1e3      	bne.n	8008dda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2220      	movs	r2, #32
 8008e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	330c      	adds	r3, #12
 8008e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e2a:	e853 3f00 	ldrex	r3, [r3]
 8008e2e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008e30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e32:	f023 0310 	bic.w	r3, r3, #16
 8008e36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	330c      	adds	r3, #12
 8008e40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008e44:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008e46:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e4a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e4c:	e841 2300 	strex	r3, r2, [r1]
 8008e50:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1e3      	bne.n	8008e20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7fc f8ae 	bl	8004fbe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2202      	movs	r2, #2
 8008e66:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	4619      	mov	r1, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 f8b7 	bl	8008fec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e7e:	e09b      	b.n	8008fb8 <HAL_UART_IRQHandler+0x518>
 8008e80:	080091f1 	.word	0x080091f1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f000 808e 	beq.w	8008fbc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008ea0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 8089 	beq.w	8008fbc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	330c      	adds	r3, #12
 8008eb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb4:	e853 3f00 	ldrex	r3, [r3]
 8008eb8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ebc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ec0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	330c      	adds	r3, #12
 8008eca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008ece:	647a      	str	r2, [r7, #68]	@ 0x44
 8008ed0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ed4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ed6:	e841 2300 	strex	r3, r2, [r1]
 8008eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1e3      	bne.n	8008eaa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	3314      	adds	r3, #20
 8008ee8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eec:	e853 3f00 	ldrex	r3, [r3]
 8008ef0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ef2:	6a3b      	ldr	r3, [r7, #32]
 8008ef4:	f023 0301 	bic.w	r3, r3, #1
 8008ef8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3314      	adds	r3, #20
 8008f02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008f06:	633a      	str	r2, [r7, #48]	@ 0x30
 8008f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f0e:	e841 2300 	strex	r3, r2, [r1]
 8008f12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1e3      	bne.n	8008ee2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2220      	movs	r2, #32
 8008f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	330c      	adds	r3, #12
 8008f2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	e853 3f00 	ldrex	r3, [r3]
 8008f36:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f023 0310 	bic.w	r3, r3, #16
 8008f3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	330c      	adds	r3, #12
 8008f48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008f4c:	61fa      	str	r2, [r7, #28]
 8008f4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f50:	69b9      	ldr	r1, [r7, #24]
 8008f52:	69fa      	ldr	r2, [r7, #28]
 8008f54:	e841 2300 	strex	r3, r2, [r1]
 8008f58:	617b      	str	r3, [r7, #20]
   return(result);
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1e3      	bne.n	8008f28 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2202      	movs	r2, #2
 8008f64:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f83d 	bl	8008fec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f72:	e023      	b.n	8008fbc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d009      	beq.n	8008f94 <HAL_UART_IRQHandler+0x4f4>
 8008f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d003      	beq.n	8008f94 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 f943 	bl	8009218 <UART_Transmit_IT>
    return;
 8008f92:	e014      	b.n	8008fbe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00e      	beq.n	8008fbe <HAL_UART_IRQHandler+0x51e>
 8008fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d008      	beq.n	8008fbe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f983 	bl	80092b8 <UART_EndTransmit_IT>
    return;
 8008fb2:	e004      	b.n	8008fbe <HAL_UART_IRQHandler+0x51e>
    return;
 8008fb4:	bf00      	nop
 8008fb6:	e002      	b.n	8008fbe <HAL_UART_IRQHandler+0x51e>
      return;
 8008fb8:	bf00      	nop
 8008fba:	e000      	b.n	8008fbe <HAL_UART_IRQHandler+0x51e>
      return;
 8008fbc:	bf00      	nop
  }
}
 8008fbe:	37e8      	adds	r7, #232	@ 0xe8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008fcc:	bf00      	nop
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008fe0:	bf00      	nop
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b086      	sub	sp, #24
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	603b      	str	r3, [r7, #0]
 8009010:	4613      	mov	r3, r2
 8009012:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009014:	e03b      	b.n	800908e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009016:	6a3b      	ldr	r3, [r7, #32]
 8009018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800901c:	d037      	beq.n	800908e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800901e:	f7fb fa8d 	bl	800453c <HAL_GetTick>
 8009022:	4602      	mov	r2, r0
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	1ad3      	subs	r3, r2, r3
 8009028:	6a3a      	ldr	r2, [r7, #32]
 800902a:	429a      	cmp	r2, r3
 800902c:	d302      	bcc.n	8009034 <UART_WaitOnFlagUntilTimeout+0x30>
 800902e:	6a3b      	ldr	r3, [r7, #32]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d101      	bne.n	8009038 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009034:	2303      	movs	r3, #3
 8009036:	e03a      	b.n	80090ae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	f003 0304 	and.w	r3, r3, #4
 8009042:	2b00      	cmp	r3, #0
 8009044:	d023      	beq.n	800908e <UART_WaitOnFlagUntilTimeout+0x8a>
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	2b80      	cmp	r3, #128	@ 0x80
 800904a:	d020      	beq.n	800908e <UART_WaitOnFlagUntilTimeout+0x8a>
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	2b40      	cmp	r3, #64	@ 0x40
 8009050:	d01d      	beq.n	800908e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 0308 	and.w	r3, r3, #8
 800905c:	2b08      	cmp	r3, #8
 800905e:	d116      	bne.n	800908e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009060:	2300      	movs	r3, #0
 8009062:	617b      	str	r3, [r7, #20]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	617b      	str	r3, [r7, #20]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	617b      	str	r3, [r7, #20]
 8009074:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	f000 f857 	bl	800912a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2208      	movs	r2, #8
 8009080:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e00f      	b.n	80090ae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	4013      	ands	r3, r2
 8009098:	68ba      	ldr	r2, [r7, #8]
 800909a:	429a      	cmp	r2, r3
 800909c:	bf0c      	ite	eq
 800909e:	2301      	moveq	r3, #1
 80090a0:	2300      	movne	r3, #0
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	461a      	mov	r2, r3
 80090a6:	79fb      	ldrb	r3, [r7, #7]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d0b4      	beq.n	8009016 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3718      	adds	r7, #24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b085      	sub	sp, #20
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	60f8      	str	r0, [r7, #12]
 80090be:	60b9      	str	r1, [r7, #8]
 80090c0:	4613      	mov	r3, r2
 80090c2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	88fa      	ldrh	r2, [r7, #6]
 80090ce:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	88fa      	ldrh	r2, [r7, #6]
 80090d4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2222      	movs	r2, #34	@ 0x22
 80090e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d007      	beq.n	80090fc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68da      	ldr	r2, [r3, #12]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80090fa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	695a      	ldr	r2, [r3, #20]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f042 0201 	orr.w	r2, r2, #1
 800910a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68da      	ldr	r2, [r3, #12]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f042 0220 	orr.w	r2, r2, #32
 800911a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr

0800912a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800912a:	b480      	push	{r7}
 800912c:	b095      	sub	sp, #84	@ 0x54
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	330c      	adds	r3, #12
 8009138:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800913c:	e853 3f00 	ldrex	r3, [r3]
 8009140:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009144:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009148:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	330c      	adds	r3, #12
 8009150:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009152:	643a      	str	r2, [r7, #64]	@ 0x40
 8009154:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009156:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009158:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800915a:	e841 2300 	strex	r3, r2, [r1]
 800915e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1e5      	bne.n	8009132 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3314      	adds	r3, #20
 800916c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916e:	6a3b      	ldr	r3, [r7, #32]
 8009170:	e853 3f00 	ldrex	r3, [r3]
 8009174:	61fb      	str	r3, [r7, #28]
   return(result);
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	f023 0301 	bic.w	r3, r3, #1
 800917c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3314      	adds	r3, #20
 8009184:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009186:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009188:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800918c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800918e:	e841 2300 	strex	r3, r2, [r1]
 8009192:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1e5      	bne.n	8009166 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d119      	bne.n	80091d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	330c      	adds	r3, #12
 80091a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	e853 3f00 	ldrex	r3, [r3]
 80091b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	f023 0310 	bic.w	r3, r3, #16
 80091b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	330c      	adds	r3, #12
 80091c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091c2:	61ba      	str	r2, [r7, #24]
 80091c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c6:	6979      	ldr	r1, [r7, #20]
 80091c8:	69ba      	ldr	r2, [r7, #24]
 80091ca:	e841 2300 	strex	r3, r2, [r1]
 80091ce:	613b      	str	r3, [r7, #16]
   return(result);
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1e5      	bne.n	80091a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2220      	movs	r2, #32
 80091da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80091e4:	bf00      	nop
 80091e6:	3754      	adds	r7, #84	@ 0x54
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f7ff fee4 	bl	8008fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009210:	bf00      	nop
 8009212:	3710      	adds	r7, #16
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009226:	b2db      	uxtb	r3, r3
 8009228:	2b21      	cmp	r3, #33	@ 0x21
 800922a:	d13e      	bne.n	80092aa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009234:	d114      	bne.n	8009260 <UART_Transmit_IT+0x48>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d110      	bne.n	8009260 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a1b      	ldr	r3, [r3, #32]
 8009242:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	881b      	ldrh	r3, [r3, #0]
 8009248:	461a      	mov	r2, r3
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009252:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6a1b      	ldr	r3, [r3, #32]
 8009258:	1c9a      	adds	r2, r3, #2
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	621a      	str	r2, [r3, #32]
 800925e:	e008      	b.n	8009272 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6a1b      	ldr	r3, [r3, #32]
 8009264:	1c59      	adds	r1, r3, #1
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	6211      	str	r1, [r2, #32]
 800926a:	781a      	ldrb	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009276:	b29b      	uxth	r3, r3
 8009278:	3b01      	subs	r3, #1
 800927a:	b29b      	uxth	r3, r3
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	4619      	mov	r1, r3
 8009280:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009282:	2b00      	cmp	r3, #0
 8009284:	d10f      	bne.n	80092a6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	68da      	ldr	r2, [r3, #12]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009294:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68da      	ldr	r2, [r3, #12]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80092a4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	e000      	b.n	80092ac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80092aa:	2302      	movs	r3, #2
  }
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	68da      	ldr	r2, [r3, #12]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2220      	movs	r2, #32
 80092d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f7ff fe73 	bl	8008fc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b08c      	sub	sp, #48	@ 0x30
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	2b22      	cmp	r3, #34	@ 0x22
 80092fa:	f040 80ae 	bne.w	800945a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009306:	d117      	bne.n	8009338 <UART_Receive_IT+0x50>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d113      	bne.n	8009338 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009310:	2300      	movs	r3, #0
 8009312:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009318:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	b29b      	uxth	r3, r3
 8009322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009326:	b29a      	uxth	r2, r3
 8009328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800932a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009330:	1c9a      	adds	r2, r3, #2
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	629a      	str	r2, [r3, #40]	@ 0x28
 8009336:	e026      	b.n	8009386 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800933c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800933e:	2300      	movs	r3, #0
 8009340:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	689b      	ldr	r3, [r3, #8]
 8009346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800934a:	d007      	beq.n	800935c <UART_Receive_IT+0x74>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10a      	bne.n	800936a <UART_Receive_IT+0x82>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d106      	bne.n	800936a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	b2da      	uxtb	r2, r3
 8009364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009366:	701a      	strb	r2, [r3, #0]
 8009368:	e008      	b.n	800937c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	b2db      	uxtb	r3, r3
 8009372:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009376:	b2da      	uxtb	r2, r3
 8009378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800937a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009380:	1c5a      	adds	r2, r3, #1
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800938a:	b29b      	uxth	r3, r3
 800938c:	3b01      	subs	r3, #1
 800938e:	b29b      	uxth	r3, r3
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	4619      	mov	r1, r3
 8009394:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009396:	2b00      	cmp	r3, #0
 8009398:	d15d      	bne.n	8009456 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68da      	ldr	r2, [r3, #12]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f022 0220 	bic.w	r2, r2, #32
 80093a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	68da      	ldr	r2, [r3, #12]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80093b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	695a      	ldr	r2, [r3, #20]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f022 0201 	bic.w	r2, r2, #1
 80093c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2220      	movs	r2, #32
 80093ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d135      	bne.n	800944c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	330c      	adds	r3, #12
 80093ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	e853 3f00 	ldrex	r3, [r3]
 80093f4:	613b      	str	r3, [r7, #16]
   return(result);
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	f023 0310 	bic.w	r3, r3, #16
 80093fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	330c      	adds	r3, #12
 8009404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009406:	623a      	str	r2, [r7, #32]
 8009408:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940a:	69f9      	ldr	r1, [r7, #28]
 800940c:	6a3a      	ldr	r2, [r7, #32]
 800940e:	e841 2300 	strex	r3, r2, [r1]
 8009412:	61bb      	str	r3, [r7, #24]
   return(result);
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1e5      	bne.n	80093e6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f003 0310 	and.w	r3, r3, #16
 8009424:	2b10      	cmp	r3, #16
 8009426:	d10a      	bne.n	800943e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009428:	2300      	movs	r3, #0
 800942a:	60fb      	str	r3, [r7, #12]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	60fb      	str	r3, [r7, #12]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	60fb      	str	r3, [r7, #12]
 800943c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009442:	4619      	mov	r1, r3
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f7ff fdd1 	bl	8008fec <HAL_UARTEx_RxEventCallback>
 800944a:	e002      	b.n	8009452 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f7f9 ffa3 	bl	8003398 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009452:	2300      	movs	r3, #0
 8009454:	e002      	b.n	800945c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009456:	2300      	movs	r3, #0
 8009458:	e000      	b.n	800945c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800945a:	2302      	movs	r3, #2
  }
}
 800945c:	4618      	mov	r0, r3
 800945e:	3730      	adds	r7, #48	@ 0x30
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009468:	b0c0      	sub	sp, #256	@ 0x100
 800946a:	af00      	add	r7, sp, #0
 800946c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800947c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009480:	68d9      	ldr	r1, [r3, #12]
 8009482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	ea40 0301 	orr.w	r3, r0, r1
 800948c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800948e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009492:	689a      	ldr	r2, [r3, #8]
 8009494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	431a      	orrs	r2, r3
 800949c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094a0:	695b      	ldr	r3, [r3, #20]
 80094a2:	431a      	orrs	r2, r3
 80094a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094a8:	69db      	ldr	r3, [r3, #28]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80094b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80094bc:	f021 010c 	bic.w	r1, r1, #12
 80094c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80094ca:	430b      	orrs	r3, r1
 80094cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80094ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	695b      	ldr	r3, [r3, #20]
 80094d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80094da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094de:	6999      	ldr	r1, [r3, #24]
 80094e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	ea40 0301 	orr.w	r3, r0, r1
 80094ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80094ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	4b8f      	ldr	r3, [pc, #572]	@ (8009730 <UART_SetConfig+0x2cc>)
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d005      	beq.n	8009504 <UART_SetConfig+0xa0>
 80094f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	4b8d      	ldr	r3, [pc, #564]	@ (8009734 <UART_SetConfig+0x2d0>)
 8009500:	429a      	cmp	r2, r3
 8009502:	d104      	bne.n	800950e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009504:	f7fd fc7e 	bl	8006e04 <HAL_RCC_GetPCLK2Freq>
 8009508:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800950c:	e003      	b.n	8009516 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800950e:	f7fd fc65 	bl	8006ddc <HAL_RCC_GetPCLK1Freq>
 8009512:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800951a:	69db      	ldr	r3, [r3, #28]
 800951c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009520:	f040 810c 	bne.w	800973c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009528:	2200      	movs	r2, #0
 800952a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800952e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009532:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009536:	4622      	mov	r2, r4
 8009538:	462b      	mov	r3, r5
 800953a:	1891      	adds	r1, r2, r2
 800953c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800953e:	415b      	adcs	r3, r3
 8009540:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009542:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009546:	4621      	mov	r1, r4
 8009548:	eb12 0801 	adds.w	r8, r2, r1
 800954c:	4629      	mov	r1, r5
 800954e:	eb43 0901 	adc.w	r9, r3, r1
 8009552:	f04f 0200 	mov.w	r2, #0
 8009556:	f04f 0300 	mov.w	r3, #0
 800955a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800955e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009562:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009566:	4690      	mov	r8, r2
 8009568:	4699      	mov	r9, r3
 800956a:	4623      	mov	r3, r4
 800956c:	eb18 0303 	adds.w	r3, r8, r3
 8009570:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009574:	462b      	mov	r3, r5
 8009576:	eb49 0303 	adc.w	r3, r9, r3
 800957a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800957e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800958a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800958e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009592:	460b      	mov	r3, r1
 8009594:	18db      	adds	r3, r3, r3
 8009596:	653b      	str	r3, [r7, #80]	@ 0x50
 8009598:	4613      	mov	r3, r2
 800959a:	eb42 0303 	adc.w	r3, r2, r3
 800959e:	657b      	str	r3, [r7, #84]	@ 0x54
 80095a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80095a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80095a8:	f7f7 fb6e 	bl	8000c88 <__aeabi_uldivmod>
 80095ac:	4602      	mov	r2, r0
 80095ae:	460b      	mov	r3, r1
 80095b0:	4b61      	ldr	r3, [pc, #388]	@ (8009738 <UART_SetConfig+0x2d4>)
 80095b2:	fba3 2302 	umull	r2, r3, r3, r2
 80095b6:	095b      	lsrs	r3, r3, #5
 80095b8:	011c      	lsls	r4, r3, #4
 80095ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095be:	2200      	movs	r2, #0
 80095c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80095c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80095c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80095cc:	4642      	mov	r2, r8
 80095ce:	464b      	mov	r3, r9
 80095d0:	1891      	adds	r1, r2, r2
 80095d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80095d4:	415b      	adcs	r3, r3
 80095d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80095dc:	4641      	mov	r1, r8
 80095de:	eb12 0a01 	adds.w	sl, r2, r1
 80095e2:	4649      	mov	r1, r9
 80095e4:	eb43 0b01 	adc.w	fp, r3, r1
 80095e8:	f04f 0200 	mov.w	r2, #0
 80095ec:	f04f 0300 	mov.w	r3, #0
 80095f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80095f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80095f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80095fc:	4692      	mov	sl, r2
 80095fe:	469b      	mov	fp, r3
 8009600:	4643      	mov	r3, r8
 8009602:	eb1a 0303 	adds.w	r3, sl, r3
 8009606:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800960a:	464b      	mov	r3, r9
 800960c:	eb4b 0303 	adc.w	r3, fp, r3
 8009610:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009620:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009624:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009628:	460b      	mov	r3, r1
 800962a:	18db      	adds	r3, r3, r3
 800962c:	643b      	str	r3, [r7, #64]	@ 0x40
 800962e:	4613      	mov	r3, r2
 8009630:	eb42 0303 	adc.w	r3, r2, r3
 8009634:	647b      	str	r3, [r7, #68]	@ 0x44
 8009636:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800963a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800963e:	f7f7 fb23 	bl	8000c88 <__aeabi_uldivmod>
 8009642:	4602      	mov	r2, r0
 8009644:	460b      	mov	r3, r1
 8009646:	4611      	mov	r1, r2
 8009648:	4b3b      	ldr	r3, [pc, #236]	@ (8009738 <UART_SetConfig+0x2d4>)
 800964a:	fba3 2301 	umull	r2, r3, r3, r1
 800964e:	095b      	lsrs	r3, r3, #5
 8009650:	2264      	movs	r2, #100	@ 0x64
 8009652:	fb02 f303 	mul.w	r3, r2, r3
 8009656:	1acb      	subs	r3, r1, r3
 8009658:	00db      	lsls	r3, r3, #3
 800965a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800965e:	4b36      	ldr	r3, [pc, #216]	@ (8009738 <UART_SetConfig+0x2d4>)
 8009660:	fba3 2302 	umull	r2, r3, r3, r2
 8009664:	095b      	lsrs	r3, r3, #5
 8009666:	005b      	lsls	r3, r3, #1
 8009668:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800966c:	441c      	add	r4, r3
 800966e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009672:	2200      	movs	r2, #0
 8009674:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009678:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800967c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009680:	4642      	mov	r2, r8
 8009682:	464b      	mov	r3, r9
 8009684:	1891      	adds	r1, r2, r2
 8009686:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009688:	415b      	adcs	r3, r3
 800968a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800968c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009690:	4641      	mov	r1, r8
 8009692:	1851      	adds	r1, r2, r1
 8009694:	6339      	str	r1, [r7, #48]	@ 0x30
 8009696:	4649      	mov	r1, r9
 8009698:	414b      	adcs	r3, r1
 800969a:	637b      	str	r3, [r7, #52]	@ 0x34
 800969c:	f04f 0200 	mov.w	r2, #0
 80096a0:	f04f 0300 	mov.w	r3, #0
 80096a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80096a8:	4659      	mov	r1, fp
 80096aa:	00cb      	lsls	r3, r1, #3
 80096ac:	4651      	mov	r1, sl
 80096ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096b2:	4651      	mov	r1, sl
 80096b4:	00ca      	lsls	r2, r1, #3
 80096b6:	4610      	mov	r0, r2
 80096b8:	4619      	mov	r1, r3
 80096ba:	4603      	mov	r3, r0
 80096bc:	4642      	mov	r2, r8
 80096be:	189b      	adds	r3, r3, r2
 80096c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80096c4:	464b      	mov	r3, r9
 80096c6:	460a      	mov	r2, r1
 80096c8:	eb42 0303 	adc.w	r3, r2, r3
 80096cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80096d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80096dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80096e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80096e4:	460b      	mov	r3, r1
 80096e6:	18db      	adds	r3, r3, r3
 80096e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80096ea:	4613      	mov	r3, r2
 80096ec:	eb42 0303 	adc.w	r3, r2, r3
 80096f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80096f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80096fa:	f7f7 fac5 	bl	8000c88 <__aeabi_uldivmod>
 80096fe:	4602      	mov	r2, r0
 8009700:	460b      	mov	r3, r1
 8009702:	4b0d      	ldr	r3, [pc, #52]	@ (8009738 <UART_SetConfig+0x2d4>)
 8009704:	fba3 1302 	umull	r1, r3, r3, r2
 8009708:	095b      	lsrs	r3, r3, #5
 800970a:	2164      	movs	r1, #100	@ 0x64
 800970c:	fb01 f303 	mul.w	r3, r1, r3
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	00db      	lsls	r3, r3, #3
 8009714:	3332      	adds	r3, #50	@ 0x32
 8009716:	4a08      	ldr	r2, [pc, #32]	@ (8009738 <UART_SetConfig+0x2d4>)
 8009718:	fba2 2303 	umull	r2, r3, r2, r3
 800971c:	095b      	lsrs	r3, r3, #5
 800971e:	f003 0207 	and.w	r2, r3, #7
 8009722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4422      	add	r2, r4
 800972a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800972c:	e106      	b.n	800993c <UART_SetConfig+0x4d8>
 800972e:	bf00      	nop
 8009730:	40011000 	.word	0x40011000
 8009734:	40011400 	.word	0x40011400
 8009738:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800973c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009740:	2200      	movs	r2, #0
 8009742:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009746:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800974a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800974e:	4642      	mov	r2, r8
 8009750:	464b      	mov	r3, r9
 8009752:	1891      	adds	r1, r2, r2
 8009754:	6239      	str	r1, [r7, #32]
 8009756:	415b      	adcs	r3, r3
 8009758:	627b      	str	r3, [r7, #36]	@ 0x24
 800975a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800975e:	4641      	mov	r1, r8
 8009760:	1854      	adds	r4, r2, r1
 8009762:	4649      	mov	r1, r9
 8009764:	eb43 0501 	adc.w	r5, r3, r1
 8009768:	f04f 0200 	mov.w	r2, #0
 800976c:	f04f 0300 	mov.w	r3, #0
 8009770:	00eb      	lsls	r3, r5, #3
 8009772:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009776:	00e2      	lsls	r2, r4, #3
 8009778:	4614      	mov	r4, r2
 800977a:	461d      	mov	r5, r3
 800977c:	4643      	mov	r3, r8
 800977e:	18e3      	adds	r3, r4, r3
 8009780:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009784:	464b      	mov	r3, r9
 8009786:	eb45 0303 	adc.w	r3, r5, r3
 800978a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800978e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800979a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800979e:	f04f 0200 	mov.w	r2, #0
 80097a2:	f04f 0300 	mov.w	r3, #0
 80097a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80097aa:	4629      	mov	r1, r5
 80097ac:	008b      	lsls	r3, r1, #2
 80097ae:	4621      	mov	r1, r4
 80097b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097b4:	4621      	mov	r1, r4
 80097b6:	008a      	lsls	r2, r1, #2
 80097b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80097bc:	f7f7 fa64 	bl	8000c88 <__aeabi_uldivmod>
 80097c0:	4602      	mov	r2, r0
 80097c2:	460b      	mov	r3, r1
 80097c4:	4b60      	ldr	r3, [pc, #384]	@ (8009948 <UART_SetConfig+0x4e4>)
 80097c6:	fba3 2302 	umull	r2, r3, r3, r2
 80097ca:	095b      	lsrs	r3, r3, #5
 80097cc:	011c      	lsls	r4, r3, #4
 80097ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097d2:	2200      	movs	r2, #0
 80097d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80097d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80097dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80097e0:	4642      	mov	r2, r8
 80097e2:	464b      	mov	r3, r9
 80097e4:	1891      	adds	r1, r2, r2
 80097e6:	61b9      	str	r1, [r7, #24]
 80097e8:	415b      	adcs	r3, r3
 80097ea:	61fb      	str	r3, [r7, #28]
 80097ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80097f0:	4641      	mov	r1, r8
 80097f2:	1851      	adds	r1, r2, r1
 80097f4:	6139      	str	r1, [r7, #16]
 80097f6:	4649      	mov	r1, r9
 80097f8:	414b      	adcs	r3, r1
 80097fa:	617b      	str	r3, [r7, #20]
 80097fc:	f04f 0200 	mov.w	r2, #0
 8009800:	f04f 0300 	mov.w	r3, #0
 8009804:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009808:	4659      	mov	r1, fp
 800980a:	00cb      	lsls	r3, r1, #3
 800980c:	4651      	mov	r1, sl
 800980e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009812:	4651      	mov	r1, sl
 8009814:	00ca      	lsls	r2, r1, #3
 8009816:	4610      	mov	r0, r2
 8009818:	4619      	mov	r1, r3
 800981a:	4603      	mov	r3, r0
 800981c:	4642      	mov	r2, r8
 800981e:	189b      	adds	r3, r3, r2
 8009820:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009824:	464b      	mov	r3, r9
 8009826:	460a      	mov	r2, r1
 8009828:	eb42 0303 	adc.w	r3, r2, r3
 800982c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	67bb      	str	r3, [r7, #120]	@ 0x78
 800983a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800983c:	f04f 0200 	mov.w	r2, #0
 8009840:	f04f 0300 	mov.w	r3, #0
 8009844:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009848:	4649      	mov	r1, r9
 800984a:	008b      	lsls	r3, r1, #2
 800984c:	4641      	mov	r1, r8
 800984e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009852:	4641      	mov	r1, r8
 8009854:	008a      	lsls	r2, r1, #2
 8009856:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800985a:	f7f7 fa15 	bl	8000c88 <__aeabi_uldivmod>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	4611      	mov	r1, r2
 8009864:	4b38      	ldr	r3, [pc, #224]	@ (8009948 <UART_SetConfig+0x4e4>)
 8009866:	fba3 2301 	umull	r2, r3, r3, r1
 800986a:	095b      	lsrs	r3, r3, #5
 800986c:	2264      	movs	r2, #100	@ 0x64
 800986e:	fb02 f303 	mul.w	r3, r2, r3
 8009872:	1acb      	subs	r3, r1, r3
 8009874:	011b      	lsls	r3, r3, #4
 8009876:	3332      	adds	r3, #50	@ 0x32
 8009878:	4a33      	ldr	r2, [pc, #204]	@ (8009948 <UART_SetConfig+0x4e4>)
 800987a:	fba2 2303 	umull	r2, r3, r2, r3
 800987e:	095b      	lsrs	r3, r3, #5
 8009880:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009884:	441c      	add	r4, r3
 8009886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800988a:	2200      	movs	r2, #0
 800988c:	673b      	str	r3, [r7, #112]	@ 0x70
 800988e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009890:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009894:	4642      	mov	r2, r8
 8009896:	464b      	mov	r3, r9
 8009898:	1891      	adds	r1, r2, r2
 800989a:	60b9      	str	r1, [r7, #8]
 800989c:	415b      	adcs	r3, r3
 800989e:	60fb      	str	r3, [r7, #12]
 80098a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80098a4:	4641      	mov	r1, r8
 80098a6:	1851      	adds	r1, r2, r1
 80098a8:	6039      	str	r1, [r7, #0]
 80098aa:	4649      	mov	r1, r9
 80098ac:	414b      	adcs	r3, r1
 80098ae:	607b      	str	r3, [r7, #4]
 80098b0:	f04f 0200 	mov.w	r2, #0
 80098b4:	f04f 0300 	mov.w	r3, #0
 80098b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80098bc:	4659      	mov	r1, fp
 80098be:	00cb      	lsls	r3, r1, #3
 80098c0:	4651      	mov	r1, sl
 80098c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098c6:	4651      	mov	r1, sl
 80098c8:	00ca      	lsls	r2, r1, #3
 80098ca:	4610      	mov	r0, r2
 80098cc:	4619      	mov	r1, r3
 80098ce:	4603      	mov	r3, r0
 80098d0:	4642      	mov	r2, r8
 80098d2:	189b      	adds	r3, r3, r2
 80098d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80098d6:	464b      	mov	r3, r9
 80098d8:	460a      	mov	r2, r1
 80098da:	eb42 0303 	adc.w	r3, r2, r3
 80098de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80098e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80098ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80098ec:	f04f 0200 	mov.w	r2, #0
 80098f0:	f04f 0300 	mov.w	r3, #0
 80098f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80098f8:	4649      	mov	r1, r9
 80098fa:	008b      	lsls	r3, r1, #2
 80098fc:	4641      	mov	r1, r8
 80098fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009902:	4641      	mov	r1, r8
 8009904:	008a      	lsls	r2, r1, #2
 8009906:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800990a:	f7f7 f9bd 	bl	8000c88 <__aeabi_uldivmod>
 800990e:	4602      	mov	r2, r0
 8009910:	460b      	mov	r3, r1
 8009912:	4b0d      	ldr	r3, [pc, #52]	@ (8009948 <UART_SetConfig+0x4e4>)
 8009914:	fba3 1302 	umull	r1, r3, r3, r2
 8009918:	095b      	lsrs	r3, r3, #5
 800991a:	2164      	movs	r1, #100	@ 0x64
 800991c:	fb01 f303 	mul.w	r3, r1, r3
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	011b      	lsls	r3, r3, #4
 8009924:	3332      	adds	r3, #50	@ 0x32
 8009926:	4a08      	ldr	r2, [pc, #32]	@ (8009948 <UART_SetConfig+0x4e4>)
 8009928:	fba2 2303 	umull	r2, r3, r2, r3
 800992c:	095b      	lsrs	r3, r3, #5
 800992e:	f003 020f 	and.w	r2, r3, #15
 8009932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4422      	add	r2, r4
 800993a:	609a      	str	r2, [r3, #8]
}
 800993c:	bf00      	nop
 800993e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009942:	46bd      	mov	sp, r7
 8009944:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009948:	51eb851f 	.word	0x51eb851f

0800994c <_ICM20948_SelectUserBank>:

#include "ICM20948.h"

static float accel_offset[3] = {0,0,0};

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 800994c:	b580      	push	{r7, lr}
 800994e:	b08a      	sub	sp, #40	@ 0x28
 8009950:	af04      	add	r7, sp, #16
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	460b      	mov	r3, r1
 8009956:	607a      	str	r2, [r7, #4]
 8009958:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 800995a:	2300      	movs	r3, #0
 800995c:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	b2db      	uxtb	r3, r3
 8009962:	011b      	lsls	r3, r3, #4
 8009964:	b2db      	uxtb	r3, r3
 8009966:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8009968:	7afb      	ldrb	r3, [r7, #11]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d101      	bne.n	8009972 <_ICM20948_SelectUserBank+0x26>
 800996e:	2368      	movs	r3, #104	@ 0x68
 8009970:	e000      	b.n	8009974 <_ICM20948_SelectUserBank+0x28>
 8009972:	2369      	movs	r3, #105	@ 0x69
 8009974:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 8009976:	7dbb      	ldrb	r3, [r7, #22]
 8009978:	b29b      	uxth	r3, r3
 800997a:	005b      	lsls	r3, r3, #1
 800997c:	b299      	uxth	r1, r3
 800997e:	230a      	movs	r3, #10
 8009980:	9302      	str	r3, [sp, #8]
 8009982:	2301      	movs	r3, #1
 8009984:	9301      	str	r3, [sp, #4]
 8009986:	f107 0315 	add.w	r3, r7, #21
 800998a:	9300      	str	r3, [sp, #0]
 800998c:	2301      	movs	r3, #1
 800998e:	227f      	movs	r2, #127	@ 0x7f
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f7fb feeb 	bl	800576c <HAL_I2C_Mem_Write>
 8009996:	4603      	mov	r3, r0
 8009998:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800999a:	7dfb      	ldrb	r3, [r7, #23]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3718      	adds	r7, #24
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b088      	sub	sp, #32
 80099a8:	af04      	add	r7, sp, #16
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	4608      	mov	r0, r1
 80099ae:	4611      	mov	r1, r2
 80099b0:	461a      	mov	r2, r3
 80099b2:	4603      	mov	r3, r0
 80099b4:	70fb      	strb	r3, [r7, #3]
 80099b6:	460b      	mov	r3, r1
 80099b8:	70bb      	strb	r3, [r7, #2]
 80099ba:	4613      	mov	r3, r2
 80099bc:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 80099c2:	78fb      	ldrb	r3, [r7, #3]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d101      	bne.n	80099cc <_ICM20948_WriteByte+0x28>
 80099c8:	2368      	movs	r3, #104	@ 0x68
 80099ca:	e000      	b.n	80099ce <_ICM20948_WriteByte+0x2a>
 80099cc:	2369      	movs	r3, #105	@ 0x69
 80099ce:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 80099d0:	7bbb      	ldrb	r3, [r7, #14]
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	005b      	lsls	r3, r3, #1
 80099d6:	b299      	uxth	r1, r3
 80099d8:	78bb      	ldrb	r3, [r7, #2]
 80099da:	b29a      	uxth	r2, r3
 80099dc:	230a      	movs	r3, #10
 80099de:	9302      	str	r3, [sp, #8]
 80099e0:	2301      	movs	r3, #1
 80099e2:	9301      	str	r3, [sp, #4]
 80099e4:	1c7b      	adds	r3, r7, #1
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	2301      	movs	r3, #1
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f7fb febe 	bl	800576c <HAL_I2C_Mem_Write>
 80099f0:	4603      	mov	r3, r0
 80099f2:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <_ICM20948_BrustRead>:
			10);

	return status;
}

HAL_StatusTypeDef _ICM20948_BrustRead(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const startAddress, uint16_t const amountOfRegistersToRead, uint8_t * readData) {
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b088      	sub	sp, #32
 8009a02:	af04      	add	r7, sp, #16
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	4608      	mov	r0, r1
 8009a08:	4611      	mov	r1, r2
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	70fb      	strb	r3, [r7, #3]
 8009a10:	460b      	mov	r3, r1
 8009a12:	70bb      	strb	r3, [r7, #2]
 8009a14:	4613      	mov	r3, r2
 8009a16:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8009a1c:	78fb      	ldrb	r3, [r7, #3]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d101      	bne.n	8009a26 <_ICM20948_BrustRead+0x28>
 8009a22:	2368      	movs	r3, #104	@ 0x68
 8009a24:	e000      	b.n	8009a28 <_ICM20948_BrustRead+0x2a>
 8009a26:	2369      	movs	r3, #105	@ 0x69
 8009a28:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(
 8009a2a:	7bbb      	ldrb	r3, [r7, #14]
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	005b      	lsls	r3, r3, #1
 8009a30:	b299      	uxth	r1, r3
 8009a32:	78bb      	ldrb	r3, [r7, #2]
 8009a34:	b29a      	uxth	r2, r3
 8009a36:	230a      	movs	r3, #10
 8009a38:	9302      	str	r3, [sp, #8]
 8009a3a:	883b      	ldrh	r3, [r7, #0]
 8009a3c:	9301      	str	r3, [sp, #4]
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	2301      	movs	r3, #1
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f7fb ff8b 	bl	8005960 <HAL_I2C_Mem_Read>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			amountOfRegistersToRead * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8009a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3710      	adds	r7, #16
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <_ICM20948_BurstWrite>:

HAL_StatusTypeDef _ICM20948_BurstWrite(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const startAddress, uint16_t const amountOfRegistersToWrite, uint8_t * writeData) {
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b088      	sub	sp, #32
 8009a5c:	af04      	add	r7, sp, #16
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	4608      	mov	r0, r1
 8009a62:	4611      	mov	r1, r2
 8009a64:	461a      	mov	r2, r3
 8009a66:	4603      	mov	r3, r0
 8009a68:	70fb      	strb	r3, [r7, #3]
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	70bb      	strb	r3, [r7, #2]
 8009a6e:	4613      	mov	r3, r2
 8009a70:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8009a72:	2300      	movs	r3, #0
 8009a74:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8009a76:	78fb      	ldrb	r3, [r7, #3]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d101      	bne.n	8009a80 <_ICM20948_BurstWrite+0x28>
 8009a7c:	2368      	movs	r3, #104	@ 0x68
 8009a7e:	e000      	b.n	8009a82 <_ICM20948_BurstWrite+0x2a>
 8009a80:	2369      	movs	r3, #105	@ 0x69
 8009a82:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8009a84:	7bbb      	ldrb	r3, [r7, #14]
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	005b      	lsls	r3, r3, #1
 8009a8a:	b299      	uxth	r1, r3
 8009a8c:	78bb      	ldrb	r3, [r7, #2]
 8009a8e:	b29a      	uxth	r2, r3
 8009a90:	230a      	movs	r3, #10
 8009a92:	9302      	str	r3, [sp, #8]
 8009a94:	883b      	ldrh	r3, [r7, #0]
 8009a96:	9301      	str	r3, [sp, #4]
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f7fb fe64 	bl	800576c <HAL_I2C_Mem_Write>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			writeData,
			amountOfRegistersToWrite * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8009aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <_AK09916_WriteByte>:

HAL_StatusTypeDef _AK09916_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const registerAddress, uint8_t writeData) {
 8009ab2:	b580      	push	{r7, lr}
 8009ab4:	b088      	sub	sp, #32
 8009ab6:	af04      	add	r7, sp, #16
 8009ab8:	6078      	str	r0, [r7, #4]
 8009aba:	460b      	mov	r3, r1
 8009abc:	70fb      	strb	r3, [r7, #3]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 8009ac6:	78fb      	ldrb	r3, [r7, #3]
 8009ac8:	b29a      	uxth	r2, r3
 8009aca:	230a      	movs	r3, #10
 8009acc:	9302      	str	r3, [sp, #8]
 8009ace:	2301      	movs	r3, #1
 8009ad0:	9301      	str	r3, [sp, #4]
 8009ad2:	1cbb      	adds	r3, r7, #2
 8009ad4:	9300      	str	r3, [sp, #0]
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	2118      	movs	r1, #24
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7fb fe46 	bl	800576c <HAL_I2C_Mem_Write>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <ICM20948_init>:
	}
	
	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity) {
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b084      	sub	sp, #16
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
 8009af6:	4608      	mov	r0, r1
 8009af8:	4611      	mov	r1, r2
 8009afa:	461a      	mov	r2, r3
 8009afc:	4603      	mov	r3, r0
 8009afe:	70fb      	strb	r3, [r7, #3]
 8009b00:	460b      	mov	r3, r1
 8009b02:	70bb      	strb	r3, [r7, #2]
 8009b04:	4613      	mov	r3, r2
 8009b06:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8009b0c:	78fb      	ldrb	r3, [r7, #3]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	4619      	mov	r1, r3
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f7ff ff1a 	bl	800994c <_ICM20948_SelectUserBank>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	73fb      	strb	r3, [r7, #15]

	do{
	status = _ICM20948_WriteByte(
 8009b1c:	78f9      	ldrb	r1, [r7, #3]
 8009b1e:	2380      	movs	r3, #128	@ 0x80
 8009b20:	2206      	movs	r2, #6
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f7ff ff3e 	bl	80099a4 <_ICM20948_WriteByte>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);
	}
	while(status!=HAL_OK);
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1f4      	bne.n	8009b1c <ICM20948_init+0x2e>


	HAL_Delay(200);
 8009b32:	20c8      	movs	r0, #200	@ 0xc8
 8009b34:	f7fa fd0e 	bl	8004554 <HAL_Delay>

	status = _ICM20948_WriteByte(
 8009b38:	78f9      	ldrb	r1, [r7, #3]
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	2206      	movs	r2, #6
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7ff ff30 	bl	80099a4 <_ICM20948_WriteByte>
 8009b44:	4603      	mov	r3, r0
 8009b46:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_AUTO_SELECT_CLOCK);

	//enable both gyroscope and accelerometer
	status = _ICM20948_WriteByte(
 8009b48:	78f9      	ldrb	r1, [r7, #3]
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	2207      	movs	r2, #7
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f7ff ff28 	bl	80099a4 <_ICM20948_WriteByte>
 8009b54:	4603      	mov	r3, r0
 8009b56:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); // For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 8009b58:	78fb      	ldrb	r3, [r7, #3]
 8009b5a:	2202      	movs	r2, #2
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f7ff fef4 	bl	800994c <_ICM20948_SelectUserBank>
 8009b64:	4603      	mov	r3, r0
 8009b66:	73fb      	strb	r3, [r7, #15]
	//gyroscope sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			0 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << GYRO_FS_SEL_BIT|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 8009b68:	78bb      	ldrb	r3, [r7, #2]
 8009b6a:	005b      	lsls	r3, r3, #1
 8009b6c:	b25b      	sxtb	r3, r3
 8009b6e:	f043 0301 	orr.w	r3, r3, #1
 8009b72:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	78f9      	ldrb	r1, [r7, #3]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f7ff ff12 	bl	80099a4 <_ICM20948_WriteByte>
 8009b80:	4603      	mov	r3, r0
 8009b82:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 8009b84:	78f9      	ldrb	r1, [r7, #3]
 8009b86:	2304      	movs	r3, #4
 8009b88:	2200      	movs	r2, #0
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7ff ff0a 	bl	80099a4 <_ICM20948_WriteByte>
 8009b90:	4603      	mov	r3, r0
 8009b92:	73fb      	strb	r3, [r7, #15]
	//accelerometer sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
			1 << ACCEL_DLPFCFG_BIT|selectAccelSensitivity << ACCEL_FS_SEL_BIT|0x01 << ACCEL_FCHOICE_BIT);
 8009b94:	787b      	ldrb	r3, [r7, #1]
 8009b96:	005b      	lsls	r3, r3, #1
 8009b98:	b25b      	sxtb	r3, r3
 8009b9a:	f043 0309 	orr.w	r3, r3, #9
 8009b9e:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	78f9      	ldrb	r1, [r7, #3]
 8009ba4:	2214      	movs	r2, #20
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7ff fefc 	bl	80099a4 <_ICM20948_WriteByte>
 8009bac:	4603      	mov	r3, r0
 8009bae:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 8009bb0:	78f9      	ldrb	r1, [r7, #3]
 8009bb2:	2304      	movs	r3, #4
 8009bb4:	2211      	movs	r2, #17
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f7ff fef4 	bl	80099a4 <_ICM20948_WriteByte>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
			4);


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8009bc0:	78fb      	ldrb	r3, [r7, #3]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7ff fec0 	bl	800994c <_ICM20948_SelectUserBank>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 8009bd0:	78f9      	ldrb	r1, [r7, #3]
 8009bd2:	2302      	movs	r3, #2
 8009bd4:	220f      	movs	r2, #15
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f7ff fee4 	bl	80099a4 <_ICM20948_WriteByte>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

	status = _AK09916_WriteByte(
 8009be0:	2208      	movs	r2, #8
 8009be2:	2131      	movs	r1, #49	@ 0x31
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f7ff ff64 	bl	8009ab2 <_AK09916_WriteByte>
 8009bea:	4603      	mov	r3, r0
 8009bec:	73fb      	strb	r3, [r7, #15]
			hi2c,
			AK09916__CNTL2__REGISTER,
			0x08);
}
 8009bee:	bf00      	nop
 8009bf0:	3710      	adds	r7, #16
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
	...

08009bf8 <ICM20948_readGyroscope_all>:
			break;
	}

}

void ICM20948_readGyroscope_all(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, float reading[3]) {
 8009bf8:	b590      	push	{r4, r7, lr}
 8009bfa:	b08f      	sub	sp, #60	@ 0x3c
 8009bfc:	af02      	add	r7, sp, #8
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	607b      	str	r3, [r7, #4]
 8009c02:	460b      	mov	r3, r1
 8009c04:	72fb      	strb	r3, [r7, #11]
 8009c06:	4613      	mov	r3, r2
 8009c08:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[6];

	//_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__GYRO_XOUT_H__REGISTER, 6, readData);
 8009c0a:	7af9      	ldrb	r1, [r7, #11]
 8009c0c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009c10:	9300      	str	r3, [sp, #0]
 8009c12:	2306      	movs	r3, #6
 8009c14:	2233      	movs	r2, #51	@ 0x33
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f7ff fef1 	bl	80099fe <_ICM20948_BrustRead>

	int16_t rD_int[3];
		rD_int[X] = readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE];
 8009c1c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009c20:	021b      	lsls	r3, r3, #8
 8009c22:	b21a      	sxth	r2, r3
 8009c24:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009c28:	b21b      	sxth	r3, r3
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	b21b      	sxth	r3, r3
 8009c2e:	843b      	strh	r3, [r7, #32]
		rD_int[Y] = readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE];
 8009c30:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009c34:	021b      	lsls	r3, r3, #8
 8009c36:	b21a      	sxth	r2, r3
 8009c38:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009c3c:	b21b      	sxth	r3, r3
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	b21b      	sxth	r3, r3
 8009c42:	847b      	strh	r3, [r7, #34]	@ 0x22
		rD_int[Z] = readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE];
 8009c44:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009c48:	021b      	lsls	r3, r3, #8
 8009c4a:	b21a      	sxth	r2, r3
 8009c4c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8009c50:	b21b      	sxth	r3, r3
 8009c52:	4313      	orrs	r3, r2
 8009c54:	b21b      	sxth	r3, r3
 8009c56:	84bb      	strh	r3, [r7, #36]	@ 0x24

		float rD[3];
		rD[X] = (float) rD_int[X];
 8009c58:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009c5c:	ee07 3a90 	vmov	s15, r3
 8009c60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c64:	edc7 7a05 	vstr	s15, [r7, #20]
		rD[Y] = (float) rD_int[Y];
 8009c68:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8009c6c:	ee07 3a90 	vmov	s15, r3
 8009c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c74:	edc7 7a06 	vstr	s15, [r7, #24]
		rD[Z] = (float) rD_int[Z];
 8009c78:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8009c7c:	ee07 3a90 	vmov	s15, r3
 8009c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c84:	edc7 7a07 	vstr	s15, [r7, #28]

	//*gyroZ = (float) -reading;
	switch (selectGyroSensitivity) {
 8009c88:	7abb      	ldrb	r3, [r7, #10]
 8009c8a:	2b03      	cmp	r3, #3
 8009c8c:	f200 80bc 	bhi.w	8009e08 <ICM20948_readGyroscope_all+0x210>
 8009c90:	a201      	add	r2, pc, #4	@ (adr r2, 8009c98 <ICM20948_readGyroscope_all+0xa0>)
 8009c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c96:	bf00      	nop
 8009c98:	08009ca9 	.word	0x08009ca9
 8009c9c:	08009ce5 	.word	0x08009ce5
 8009ca0:	08009d21 	.word	0x08009d21
 8009ca4:	08009d95 	.word	0x08009d95
		case GYRO_FULL_SCALE_250DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 8009ca8:	ed97 7a05 	vldr	s14, [r7, #20]
 8009cac:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 8009e20 <ICM20948_readGyroscope_all+0x228>
 8009cb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	edc3 7a00 	vstr	s15, [r3]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 8009cba:	ed97 7a06 	vldr	s14, [r7, #24]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	3304      	adds	r3, #4
 8009cc2:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8009e20 <ICM20948_readGyroscope_all+0x228>
 8009cc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009cca:	edc3 7a00 	vstr	s15, [r3]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 8009cce:	ed97 7a07 	vldr	s14, [r7, #28]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	3308      	adds	r3, #8
 8009cd6:	eddf 6a52 	vldr	s13, [pc, #328]	@ 8009e20 <ICM20948_readGyroscope_all+0x228>
 8009cda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009cde:	edc3 7a00 	vstr	s15, [r3]
			break;
 8009ce2:	e091      	b.n	8009e08 <ICM20948_readGyroscope_all+0x210>
		case GYRO_FULL_SCALE_500DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 8009ce4:	ed97 7a05 	vldr	s14, [r7, #20]
 8009ce8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009e24 <ICM20948_readGyroscope_all+0x22c>
 8009cec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	edc3 7a00 	vstr	s15, [r3]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 8009cf6:	ed97 7a06 	vldr	s14, [r7, #24]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	3304      	adds	r3, #4
 8009cfe:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8009e24 <ICM20948_readGyroscope_all+0x22c>
 8009d02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d06:	edc3 7a00 	vstr	s15, [r3]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 8009d0a:	ed97 7a07 	vldr	s14, [r7, #28]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	3308      	adds	r3, #8
 8009d12:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8009e24 <ICM20948_readGyroscope_all+0x22c>
 8009d16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009d1a:	edc3 7a00 	vstr	s15, [r3]
			break;
 8009d1e:	e073      	b.n	8009e08 <ICM20948_readGyroscope_all+0x210>
		case GYRO_FULL_SCALE_1000DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	4618      	mov	r0, r3
 8009d24:	f7f6 fc10 	bl	8000548 <__aeabi_f2d>
 8009d28:	a339      	add	r3, pc, #228	@ (adr r3, 8009e10 <ICM20948_readGyroscope_all+0x218>)
 8009d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2e:	f7f6 fd8d 	bl	800084c <__aeabi_ddiv>
 8009d32:	4602      	mov	r2, r0
 8009d34:	460b      	mov	r3, r1
 8009d36:	4610      	mov	r0, r2
 8009d38:	4619      	mov	r1, r3
 8009d3a:	f7f6 ff55 	bl	8000be8 <__aeabi_d2f>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	601a      	str	r2, [r3, #0]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	4618      	mov	r0, r3
 8009d48:	f7f6 fbfe 	bl	8000548 <__aeabi_f2d>
 8009d4c:	a330      	add	r3, pc, #192	@ (adr r3, 8009e10 <ICM20948_readGyroscope_all+0x218>)
 8009d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d52:	f7f6 fd7b 	bl	800084c <__aeabi_ddiv>
 8009d56:	4602      	mov	r2, r0
 8009d58:	460b      	mov	r3, r1
 8009d5a:	4610      	mov	r0, r2
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	1d1c      	adds	r4, r3, #4
 8009d62:	f7f6 ff41 	bl	8000be8 <__aeabi_d2f>
 8009d66:	4603      	mov	r3, r0
 8009d68:	6023      	str	r3, [r4, #0]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7f6 fbeb 	bl	8000548 <__aeabi_f2d>
 8009d72:	a327      	add	r3, pc, #156	@ (adr r3, 8009e10 <ICM20948_readGyroscope_all+0x218>)
 8009d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d78:	f7f6 fd68 	bl	800084c <__aeabi_ddiv>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	4610      	mov	r0, r2
 8009d82:	4619      	mov	r1, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f103 0408 	add.w	r4, r3, #8
 8009d8a:	f7f6 ff2d 	bl	8000be8 <__aeabi_d2f>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	6023      	str	r3, [r4, #0]
			break;
 8009d92:	e039      	b.n	8009e08 <ICM20948_readGyroscope_all+0x210>
		case GYRO_FULL_SCALE_2000DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7f6 fbd6 	bl	8000548 <__aeabi_f2d>
 8009d9c:	a31e      	add	r3, pc, #120	@ (adr r3, 8009e18 <ICM20948_readGyroscope_all+0x220>)
 8009d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da2:	f7f6 fd53 	bl	800084c <__aeabi_ddiv>
 8009da6:	4602      	mov	r2, r0
 8009da8:	460b      	mov	r3, r1
 8009daa:	4610      	mov	r0, r2
 8009dac:	4619      	mov	r1, r3
 8009dae:	f7f6 ff1b 	bl	8000be8 <__aeabi_d2f>
 8009db2:	4602      	mov	r2, r0
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	601a      	str	r2, [r3, #0]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7f6 fbc4 	bl	8000548 <__aeabi_f2d>
 8009dc0:	a315      	add	r3, pc, #84	@ (adr r3, 8009e18 <ICM20948_readGyroscope_all+0x220>)
 8009dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc6:	f7f6 fd41 	bl	800084c <__aeabi_ddiv>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	460b      	mov	r3, r1
 8009dce:	4610      	mov	r0, r2
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	1d1c      	adds	r4, r3, #4
 8009dd6:	f7f6 ff07 	bl	8000be8 <__aeabi_d2f>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	6023      	str	r3, [r4, #0]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7f6 fbb1 	bl	8000548 <__aeabi_f2d>
 8009de6:	a30c      	add	r3, pc, #48	@ (adr r3, 8009e18 <ICM20948_readGyroscope_all+0x220>)
 8009de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dec:	f7f6 fd2e 	bl	800084c <__aeabi_ddiv>
 8009df0:	4602      	mov	r2, r0
 8009df2:	460b      	mov	r3, r1
 8009df4:	4610      	mov	r0, r2
 8009df6:	4619      	mov	r1, r3
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f103 0408 	add.w	r4, r3, #8
 8009dfe:	f7f6 fef3 	bl	8000be8 <__aeabi_d2f>
 8009e02:	4603      	mov	r3, r0
 8009e04:	6023      	str	r3, [r4, #0]
			break;
 8009e06:	bf00      	nop
	}

}
 8009e08:	bf00      	nop
 8009e0a:	3734      	adds	r7, #52	@ 0x34
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd90      	pop	{r4, r7, pc}
 8009e10:	66666666 	.word	0x66666666
 8009e14:	40406666 	.word	0x40406666
 8009e18:	66666666 	.word	0x66666666
 8009e1c:	40306666 	.word	0x40306666
 8009e20:	43030000 	.word	0x43030000
 8009e24:	42830000 	.word	0x42830000

08009e28 <ICM20948_readAccelerometer_all>:

void ICM20948_readAccelerometer_all(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectAccelSensitivity, float readings[3]) {
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b08e      	sub	sp, #56	@ 0x38
 8009e2c:	af02      	add	r7, sp, #8
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	607b      	str	r3, [r7, #4]
 8009e32:	460b      	mov	r3, r1
 8009e34:	72fb      	strb	r3, [r7, #11]
 8009e36:	4613      	mov	r3, r2
 8009e38:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[6];

//	_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__ACCEL_XOUT_H__REGISTER, 6, readData);
 8009e3a:	7af9      	ldrb	r1, [r7, #11]
 8009e3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009e40:	9300      	str	r3, [sp, #0]
 8009e42:	2306      	movs	r3, #6
 8009e44:	222d      	movs	r2, #45	@ 0x2d
 8009e46:	68f8      	ldr	r0, [r7, #12]
 8009e48:	f7ff fdd9 	bl	80099fe <_ICM20948_BrustRead>


	int16_t rD_int[3];
	rD_int[X] = readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE];
 8009e4c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009e50:	021b      	lsls	r3, r3, #8
 8009e52:	b21a      	sxth	r2, r3
 8009e54:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009e58:	b21b      	sxth	r3, r3
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	b21b      	sxth	r3, r3
 8009e5e:	843b      	strh	r3, [r7, #32]
	rD_int[Y] = readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE];
 8009e60:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009e64:	021b      	lsls	r3, r3, #8
 8009e66:	b21a      	sxth	r2, r3
 8009e68:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009e6c:	b21b      	sxth	r3, r3
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	b21b      	sxth	r3, r3
 8009e72:	847b      	strh	r3, [r7, #34]	@ 0x22
	rD_int[Z] = readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE];
 8009e74:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009e78:	021b      	lsls	r3, r3, #8
 8009e7a:	b21a      	sxth	r2, r3
 8009e7c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8009e80:	b21b      	sxth	r3, r3
 8009e82:	4313      	orrs	r3, r2
 8009e84:	b21b      	sxth	r3, r3
 8009e86:	84bb      	strh	r3, [r7, #36]	@ 0x24

	float rD[3];
	rD[X] = (float) rD_int[X];
 8009e88:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009e8c:	ee07 3a90 	vmov	s15, r3
 8009e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009e94:	edc7 7a05 	vstr	s15, [r7, #20]
	rD[Y] = (float) rD_int[Y];
 8009e98:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8009e9c:	ee07 3a90 	vmov	s15, r3
 8009ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ea4:	edc7 7a06 	vstr	s15, [r7, #24]
	rD[Z] = (float) rD_int[Z];
 8009ea8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8009eac:	ee07 3a90 	vmov	s15, r3
 8009eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009eb4:	edc7 7a07 	vstr	s15, [r7, #28]

	switch (selectAccelSensitivity) {
 8009eb8:	7abb      	ldrb	r3, [r7, #10]
 8009eba:	2b03      	cmp	r3, #3
 8009ebc:	f200 8084 	bhi.w	8009fc8 <ICM20948_readAccelerometer_all+0x1a0>
 8009ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8009ec8 <ICM20948_readAccelerometer_all+0xa0>)
 8009ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec6:	bf00      	nop
 8009ec8:	08009ed9 	.word	0x08009ed9
 8009ecc:	08009f15 	.word	0x08009f15
 8009ed0:	08009f51 	.word	0x08009f51
 8009ed4:	08009f8d 	.word	0x08009f8d
		case ACCEL_FULL_SCALE_2G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 8009ed8:	ed97 7a05 	vldr	s14, [r7, #20]
 8009edc:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a01c <ICM20948_readAccelerometer_all+0x1f4>
 8009ee0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 8009eea:	ed97 7a06 	vldr	s14, [r7, #24]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	3304      	adds	r3, #4
 8009ef2:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 800a01c <ICM20948_readAccelerometer_all+0x1f4>
 8009ef6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009efa:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 8009efe:	ed97 7a07 	vldr	s14, [r7, #28]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	3308      	adds	r3, #8
 8009f06:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800a01c <ICM20948_readAccelerometer_all+0x1f4>
 8009f0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009f0e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8009f12:	e059      	b.n	8009fc8 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_4G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 8009f14:	ed97 7a05 	vldr	s14, [r7, #20]
 8009f18:	eddf 6a41 	vldr	s13, [pc, #260]	@ 800a020 <ICM20948_readAccelerometer_all+0x1f8>
 8009f1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 8009f26:	ed97 7a06 	vldr	s14, [r7, #24]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	3304      	adds	r3, #4
 8009f2e:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 800a020 <ICM20948_readAccelerometer_all+0x1f8>
 8009f32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009f36:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 8009f3a:	ed97 7a07 	vldr	s14, [r7, #28]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	3308      	adds	r3, #8
 8009f42:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800a020 <ICM20948_readAccelerometer_all+0x1f8>
 8009f46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009f4a:	edc3 7a00 	vstr	s15, [r3]
			break;
 8009f4e:	e03b      	b.n	8009fc8 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_8G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 8009f50:	ed97 7a05 	vldr	s14, [r7, #20]
 8009f54:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800a024 <ICM20948_readAccelerometer_all+0x1fc>
 8009f58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 8009f62:	ed97 7a06 	vldr	s14, [r7, #24]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	3304      	adds	r3, #4
 8009f6a:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 800a024 <ICM20948_readAccelerometer_all+0x1fc>
 8009f6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009f72:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 8009f76:	ed97 7a07 	vldr	s14, [r7, #28]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	3308      	adds	r3, #8
 8009f7e:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800a024 <ICM20948_readAccelerometer_all+0x1fc>
 8009f82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009f86:	edc3 7a00 	vstr	s15, [r3]
			break;
 8009f8a:	e01d      	b.n	8009fc8 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_16G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 8009f8c:	ed97 7a05 	vldr	s14, [r7, #20]
 8009f90:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800a028 <ICM20948_readAccelerometer_all+0x200>
 8009f94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 8009f9e:	ed97 7a06 	vldr	s14, [r7, #24]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	3304      	adds	r3, #4
 8009fa6:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800a028 <ICM20948_readAccelerometer_all+0x200>
 8009faa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009fae:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 8009fb2:	ed97 7a07 	vldr	s14, [r7, #28]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	3308      	adds	r3, #8
 8009fba:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 800a028 <ICM20948_readAccelerometer_all+0x200>
 8009fbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009fc2:	edc3 7a00 	vstr	s15, [r3]
			break;
 8009fc6:	bf00      	nop
	}
	readings[X] -=accel_offset[X];
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	ed93 7a00 	vldr	s14, [r3]
 8009fce:	4b17      	ldr	r3, [pc, #92]	@ (800a02c <ICM20948_readAccelerometer_all+0x204>)
 8009fd0:	edd3 7a00 	vldr	s15, [r3]
 8009fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	edc3 7a00 	vstr	s15, [r3]
	readings[Y] -=accel_offset[Y];
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	3304      	adds	r3, #4
 8009fe2:	ed93 7a00 	vldr	s14, [r3]
 8009fe6:	4b11      	ldr	r3, [pc, #68]	@ (800a02c <ICM20948_readAccelerometer_all+0x204>)
 8009fe8:	edd3 7a01 	vldr	s15, [r3, #4]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	3304      	adds	r3, #4
 8009ff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ff4:	edc3 7a00 	vstr	s15, [r3]
	readings[Z] -=accel_offset[Z];
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	3308      	adds	r3, #8
 8009ffc:	ed93 7a00 	vldr	s14, [r3]
 800a000:	4b0a      	ldr	r3, [pc, #40]	@ (800a02c <ICM20948_readAccelerometer_all+0x204>)
 800a002:	edd3 7a02 	vldr	s15, [r3, #8]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	3308      	adds	r3, #8
 800a00a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a00e:	edc3 7a00 	vstr	s15, [r3]
}
 800a012:	bf00      	nop
 800a014:	3730      	adds	r7, #48	@ 0x30
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	46800000 	.word	0x46800000
 800a020:	46000000 	.word	0x46000000
 800a024:	45800000 	.word	0x45800000
 800a028:	45000000 	.word	0x45000000
 800a02c:	20000610 	.word	0x20000610

0800a030 <ICM20948_CalibrateGyro>:
			mag[i] = reading * MAG_SENSITIVITY_SCALE_FACTOR;
		}
	}

void ICM20948_CalibrateGyro(I2C_HandleTypeDef * hi2c,const uint8_t sensitivity,int samples)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b090      	sub	sp, #64	@ 0x40
 800a034:	af02      	add	r7, sp, #8
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	460b      	mov	r3, r1
 800a03a:	607a      	str	r2, [r7, #4]
 800a03c:	72fb      	strb	r3, [r7, #11]
	//float temp[3]={};
	int32_t gyro_bias[3] = {0};
 800a03e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a042:	2200      	movs	r2, #0
 800a044:	601a      	str	r2, [r3, #0]
 800a046:	605a      	str	r2, [r3, #4]
 800a048:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 800a04a:	2300      	movs	r3, #0
 800a04c:	623b      	str	r3, [r7, #32]
 800a04e:	2300      	movs	r3, #0
 800a050:	84bb      	strh	r3, [r7, #36]	@ 0x24

		for(int i = 0; i < samples; i++)
 800a052:	2300      	movs	r3, #0
 800a054:	637b      	str	r3, [r7, #52]	@ 0x34
 800a056:	e032      	b.n	800a0be <ICM20948_CalibrateGyro+0x8e>
		{
			uint8_t readData[6];
			//_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
			_ICM20948_BrustRead(hi2c, 0, ICM20948__USER_BANK_0__GYRO_XOUT_H__REGISTER, 6, readData);
 800a058:	f107 0318 	add.w	r3, r7, #24
 800a05c:	9300      	str	r3, [sp, #0]
 800a05e:	2306      	movs	r3, #6
 800a060:	2233      	movs	r2, #51	@ 0x33
 800a062:	2100      	movs	r1, #0
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f7ff fcca 	bl	80099fe <_ICM20948_BrustRead>

			int16_t temp[3];
			temp[X] = readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE];
 800a06a:	7e3b      	ldrb	r3, [r7, #24]
 800a06c:	021b      	lsls	r3, r3, #8
 800a06e:	b21a      	sxth	r2, r3
 800a070:	7e7b      	ldrb	r3, [r7, #25]
 800a072:	b21b      	sxth	r3, r3
 800a074:	4313      	orrs	r3, r2
 800a076:	b21b      	sxth	r3, r3
 800a078:	823b      	strh	r3, [r7, #16]
			temp[Y] = readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE];
 800a07a:	7ebb      	ldrb	r3, [r7, #26]
 800a07c:	021b      	lsls	r3, r3, #8
 800a07e:	b21a      	sxth	r2, r3
 800a080:	7efb      	ldrb	r3, [r7, #27]
 800a082:	b21b      	sxth	r3, r3
 800a084:	4313      	orrs	r3, r2
 800a086:	b21b      	sxth	r3, r3
 800a088:	827b      	strh	r3, [r7, #18]
			temp[Z] = readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE];
 800a08a:	7f3b      	ldrb	r3, [r7, #28]
 800a08c:	021b      	lsls	r3, r3, #8
 800a08e:	b21a      	sxth	r2, r3
 800a090:	7f7b      	ldrb	r3, [r7, #29]
 800a092:	b21b      	sxth	r3, r3
 800a094:	4313      	orrs	r3, r2
 800a096:	b21b      	sxth	r3, r3
 800a098:	82bb      	strh	r3, [r7, #20]

			gyro_bias[0] += temp[0];
 800a09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a09c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	62bb      	str	r3, [r7, #40]	@ 0x28
			gyro_bias[1] += temp[1];
 800a0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0a6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			gyro_bias[2] += temp[2];
 800a0ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	633b      	str	r3, [r7, #48]	@ 0x30
		for(int i = 0; i < samples; i++)
 800a0b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	dbc8      	blt.n	800a058 <ICM20948_CalibrateGyro+0x28>
		}

		gyro_bias[0] /= samples;
 800a0c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	fb92 f3f3 	sdiv	r3, r2, r3
 800a0ce:	62bb      	str	r3, [r7, #40]	@ 0x28
		gyro_bias[1] /= samples;
 800a0d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	fb92 f3f3 	sdiv	r3, r2, r3
 800a0d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		gyro_bias[2] /= samples;
 800a0da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	fb92 f3f3 	sdiv	r3, r2, r3
 800a0e2:	633b      	str	r3, [r7, #48]	@ 0x30

		// Construct the gyro biases for push to the hardware gyro bias registers,
		// which are reset to zero upon device startup.
		// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
		// Biases are additive, so change sign on calculated average gyro biases
		gyro_offset[0] = (-gyro_bias[0] * 2  >> 8) & 0xFF;
 800a0e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	07db      	lsls	r3, r3, #31
 800a0ea:	1a9b      	subs	r3, r3, r2
 800a0ec:	005b      	lsls	r3, r3, #1
 800a0ee:	121b      	asrs	r3, r3, #8
 800a0f0:	b2db      	uxtb	r3, r3
 800a0f2:	f887 3020 	strb.w	r3, [r7, #32]
		gyro_offset[1] = (-gyro_bias[0] * 2)       & 0xFF;
 800a0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	01d2      	lsls	r2, r2, #7
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	005b      	lsls	r3, r3, #1
 800a102:	b2db      	uxtb	r3, r3
 800a104:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		gyro_offset[2] = (-gyro_bias[1] * 2  >> 8) & 0xFF;
 800a108:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a10a:	4613      	mov	r3, r2
 800a10c:	07db      	lsls	r3, r3, #31
 800a10e:	1a9b      	subs	r3, r3, r2
 800a110:	005b      	lsls	r3, r3, #1
 800a112:	121b      	asrs	r3, r3, #8
 800a114:	b2db      	uxtb	r3, r3
 800a116:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		gyro_offset[3] = (-gyro_bias[1] * 2)       & 0xFF;
 800a11a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	461a      	mov	r2, r3
 800a120:	01d2      	lsls	r2, r2, #7
 800a122:	1ad3      	subs	r3, r2, r3
 800a124:	005b      	lsls	r3, r3, #1
 800a126:	b2db      	uxtb	r3, r3
 800a128:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		gyro_offset[4] = (-gyro_bias[2] * 2  >> 8) & 0xFF;
 800a12c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a12e:	4613      	mov	r3, r2
 800a130:	07db      	lsls	r3, r3, #31
 800a132:	1a9b      	subs	r3, r3, r2
 800a134:	005b      	lsls	r3, r3, #1
 800a136:	121b      	asrs	r3, r3, #8
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		gyro_offset[5] = (-gyro_bias[2] * 2)       & 0xFF;
 800a13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a140:	b2db      	uxtb	r3, r3
 800a142:	461a      	mov	r2, r3
 800a144:	01d2      	lsls	r2, r2, #7
 800a146:	1ad3      	subs	r3, r2, r3
 800a148:	005b      	lsls	r3, r3, #1
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		_ICM20948_SelectUserBank(hi2c,0, USER_BANK_2);
 800a150:	2202      	movs	r2, #2
 800a152:	2100      	movs	r1, #0
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f7ff fbf9 	bl	800994c <_ICM20948_SelectUserBank>
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+2,gyro_offset[2]);
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+3,gyro_offset[3]);
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+4,gyro_offset[4]);
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+5,gyro_offset[5]);

		_ICM20948_BurstWrite(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER,6,gyro_offset);
 800a15a:	f107 0320 	add.w	r3, r7, #32
 800a15e:	9300      	str	r3, [sp, #0]
 800a160:	2306      	movs	r3, #6
 800a162:	2203      	movs	r2, #3
 800a164:	2100      	movs	r1, #0
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f7ff fc76 	bl	8009a58 <_ICM20948_BurstWrite>
		_ICM20948_SelectUserBank(hi2c,0, USER_BANK_0);
 800a16c:	2200      	movs	r2, #0
 800a16e:	2100      	movs	r1, #0
 800a170:	68f8      	ldr	r0, [r7, #12]
 800a172:	f7ff fbeb 	bl	800994c <_ICM20948_SelectUserBank>
	}
 800a176:	bf00      	nop
 800a178:	3738      	adds	r7, #56	@ 0x38
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
	...

0800a180 <ICM20948_CalibrateAccel>:

void ICM20948_CalibrateAccel(I2C_HandleTypeDef * hi2c,const uint8_t sensitivity,int samples)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b08c      	sub	sp, #48	@ 0x30
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	460b      	mov	r3, r1
 800a18a:	607a      	str	r2, [r7, #4]
 800a18c:	72fb      	strb	r3, [r7, #11]
	float accel_bias[3] = {0};
 800a18e:	f107 0320 	add.w	r3, r7, #32
 800a192:	2200      	movs	r2, #0
 800a194:	601a      	str	r2, [r3, #0]
 800a196:	605a      	str	r2, [r3, #4]
 800a198:	609a      	str	r2, [r3, #8]

			for(int i = 0; i < samples; i++)
 800a19a:	2300      	movs	r3, #0
 800a19c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a19e:	e025      	b.n	800a1ec <ICM20948_CalibrateAccel+0x6c>
			{

				//_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
				float temp[3];
				ICM20948_readAccelerometer_all(hi2c, 0, sensitivity, temp);
 800a1a0:	f107 0314 	add.w	r3, r7, #20
 800a1a4:	7afa      	ldrb	r2, [r7, #11]
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f7ff fe3d 	bl	8009e28 <ICM20948_readAccelerometer_all>


				accel_bias[0] += temp[0];
 800a1ae:	ed97 7a08 	vldr	s14, [r7, #32]
 800a1b2:	edd7 7a05 	vldr	s15, [r7, #20]
 800a1b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1ba:	edc7 7a08 	vstr	s15, [r7, #32]
				accel_bias[1] += temp[1];
 800a1be:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800a1c2:	edd7 7a06 	vldr	s15, [r7, #24]
 800a1c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1ca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
				accel_bias[2] += (temp[2]-1.0f);//ignore the gravity
 800a1ce:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800a1d2:	edd7 7a07 	vldr	s15, [r7, #28]
 800a1d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a1de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1e2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			for(int i = 0; i < samples; i++)
 800a1e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	429a      	cmp	r2, r3
 800a1f2:	dbd5      	blt.n	800a1a0 <ICM20948_CalibrateAccel+0x20>
			}

			accel_offset[0] =accel_bias[0]/ samples;
 800a1f4:	edd7 6a08 	vldr	s13, [r7, #32]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	ee07 3a90 	vmov	s15, r3
 800a1fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a206:	4b0f      	ldr	r3, [pc, #60]	@ (800a244 <ICM20948_CalibrateAccel+0xc4>)
 800a208:	edc3 7a00 	vstr	s15, [r3]
			accel_offset[1] =accel_bias[1]/ samples;
 800a20c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	ee07 3a90 	vmov	s15, r3
 800a216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a21a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a21e:	4b09      	ldr	r3, [pc, #36]	@ (800a244 <ICM20948_CalibrateAccel+0xc4>)
 800a220:	edc3 7a01 	vstr	s15, [r3, #4]
			accel_offset[2] =accel_bias[2]/ samples;
 800a224:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	ee07 3a90 	vmov	s15, r3
 800a22e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a236:	4b03      	ldr	r3, [pc, #12]	@ (800a244 <ICM20948_CalibrateAccel+0xc4>)
 800a238:	edc3 7a02 	vstr	s15, [r3, #8]
	}
 800a23c:	bf00      	nop
 800a23e:	3730      	adds	r7, #48	@ 0x30
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	20000610 	.word	0x20000610

0800a248 <__NVIC_SetPriority>:
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	4603      	mov	r3, r0
 800a250:	6039      	str	r1, [r7, #0]
 800a252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	db0a      	blt.n	800a272 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	b2da      	uxtb	r2, r3
 800a260:	490c      	ldr	r1, [pc, #48]	@ (800a294 <__NVIC_SetPriority+0x4c>)
 800a262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a266:	0112      	lsls	r2, r2, #4
 800a268:	b2d2      	uxtb	r2, r2
 800a26a:	440b      	add	r3, r1
 800a26c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a270:	e00a      	b.n	800a288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	b2da      	uxtb	r2, r3
 800a276:	4908      	ldr	r1, [pc, #32]	@ (800a298 <__NVIC_SetPriority+0x50>)
 800a278:	79fb      	ldrb	r3, [r7, #7]
 800a27a:	f003 030f 	and.w	r3, r3, #15
 800a27e:	3b04      	subs	r3, #4
 800a280:	0112      	lsls	r2, r2, #4
 800a282:	b2d2      	uxtb	r2, r2
 800a284:	440b      	add	r3, r1
 800a286:	761a      	strb	r2, [r3, #24]
}
 800a288:	bf00      	nop
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr
 800a294:	e000e100 	.word	0xe000e100
 800a298:	e000ed00 	.word	0xe000ed00

0800a29c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a29c:	b580      	push	{r7, lr}
 800a29e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	f06f 0004 	mvn.w	r0, #4
 800a2a6:	f7ff ffcf 	bl	800a248 <__NVIC_SetPriority>
#endif
}
 800a2aa:	bf00      	nop
 800a2ac:	bd80      	pop	{r7, pc}
	...

0800a2b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2b6:	f3ef 8305 	mrs	r3, IPSR
 800a2ba:	603b      	str	r3, [r7, #0]
  return(result);
 800a2bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d003      	beq.n	800a2ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a2c2:	f06f 0305 	mvn.w	r3, #5
 800a2c6:	607b      	str	r3, [r7, #4]
 800a2c8:	e00c      	b.n	800a2e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a2ca:	4b0a      	ldr	r3, [pc, #40]	@ (800a2f4 <osKernelInitialize+0x44>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d105      	bne.n	800a2de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a2d2:	4b08      	ldr	r3, [pc, #32]	@ (800a2f4 <osKernelInitialize+0x44>)
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	607b      	str	r3, [r7, #4]
 800a2dc:	e002      	b.n	800a2e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a2de:	f04f 33ff 	mov.w	r3, #4294967295
 800a2e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a2e4:	687b      	ldr	r3, [r7, #4]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	370c      	adds	r7, #12
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	2000061c 	.word	0x2000061c

0800a2f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2fe:	f3ef 8305 	mrs	r3, IPSR
 800a302:	603b      	str	r3, [r7, #0]
  return(result);
 800a304:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a306:	2b00      	cmp	r3, #0
 800a308:	d003      	beq.n	800a312 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a30a:	f06f 0305 	mvn.w	r3, #5
 800a30e:	607b      	str	r3, [r7, #4]
 800a310:	e010      	b.n	800a334 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a312:	4b0b      	ldr	r3, [pc, #44]	@ (800a340 <osKernelStart+0x48>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2b01      	cmp	r3, #1
 800a318:	d109      	bne.n	800a32e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a31a:	f7ff ffbf 	bl	800a29c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a31e:	4b08      	ldr	r3, [pc, #32]	@ (800a340 <osKernelStart+0x48>)
 800a320:	2202      	movs	r2, #2
 800a322:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a324:	f001 f87a 	bl	800b41c <vTaskStartScheduler>
      stat = osOK;
 800a328:	2300      	movs	r3, #0
 800a32a:	607b      	str	r3, [r7, #4]
 800a32c:	e002      	b.n	800a334 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a32e:	f04f 33ff 	mov.w	r3, #4294967295
 800a332:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a334:	687b      	ldr	r3, [r7, #4]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3708      	adds	r7, #8
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	2000061c 	.word	0x2000061c

0800a344 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a344:	b580      	push	{r7, lr}
 800a346:	b08e      	sub	sp, #56	@ 0x38
 800a348:	af04      	add	r7, sp, #16
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a350:	2300      	movs	r3, #0
 800a352:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a354:	f3ef 8305 	mrs	r3, IPSR
 800a358:	617b      	str	r3, [r7, #20]
  return(result);
 800a35a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d17e      	bne.n	800a45e <osThreadNew+0x11a>
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d07b      	beq.n	800a45e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a366:	2380      	movs	r3, #128	@ 0x80
 800a368:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a36a:	2318      	movs	r3, #24
 800a36c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a36e:	2300      	movs	r3, #0
 800a370:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a372:	f04f 33ff 	mov.w	r3, #4294967295
 800a376:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d045      	beq.n	800a40a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d002      	beq.n	800a38c <osThreadNew+0x48>
        name = attr->name;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	699b      	ldr	r3, [r3, #24]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d002      	beq.n	800a39a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	699b      	ldr	r3, [r3, #24]
 800a398:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d008      	beq.n	800a3b2 <osThreadNew+0x6e>
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	2b38      	cmp	r3, #56	@ 0x38
 800a3a4:	d805      	bhi.n	800a3b2 <osThreadNew+0x6e>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	f003 0301 	and.w	r3, r3, #1
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d001      	beq.n	800a3b6 <osThreadNew+0x72>
        return (NULL);
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	e054      	b.n	800a460 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	695b      	ldr	r3, [r3, #20]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d003      	beq.n	800a3c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	695b      	ldr	r3, [r3, #20]
 800a3c2:	089b      	lsrs	r3, r3, #2
 800a3c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00e      	beq.n	800a3ec <osThreadNew+0xa8>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	2b5b      	cmp	r3, #91	@ 0x5b
 800a3d4:	d90a      	bls.n	800a3ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d006      	beq.n	800a3ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	695b      	ldr	r3, [r3, #20]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d002      	beq.n	800a3ec <osThreadNew+0xa8>
        mem = 1;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	61bb      	str	r3, [r7, #24]
 800a3ea:	e010      	b.n	800a40e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d10c      	bne.n	800a40e <osThreadNew+0xca>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d108      	bne.n	800a40e <osThreadNew+0xca>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	691b      	ldr	r3, [r3, #16]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d104      	bne.n	800a40e <osThreadNew+0xca>
          mem = 0;
 800a404:	2300      	movs	r3, #0
 800a406:	61bb      	str	r3, [r7, #24]
 800a408:	e001      	b.n	800a40e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a40a:	2300      	movs	r3, #0
 800a40c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d110      	bne.n	800a436 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a41c:	9202      	str	r2, [sp, #8]
 800a41e:	9301      	str	r3, [sp, #4]
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	9300      	str	r3, [sp, #0]
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	6a3a      	ldr	r2, [r7, #32]
 800a428:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a42a:	68f8      	ldr	r0, [r7, #12]
 800a42c:	f000 fe1a 	bl	800b064 <xTaskCreateStatic>
 800a430:	4603      	mov	r3, r0
 800a432:	613b      	str	r3, [r7, #16]
 800a434:	e013      	b.n	800a45e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d110      	bne.n	800a45e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a43c:	6a3b      	ldr	r3, [r7, #32]
 800a43e:	b29a      	uxth	r2, r3
 800a440:	f107 0310 	add.w	r3, r7, #16
 800a444:	9301      	str	r3, [sp, #4]
 800a446:	69fb      	ldr	r3, [r7, #28]
 800a448:	9300      	str	r3, [sp, #0]
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	f000 fe68 	bl	800b124 <xTaskCreate>
 800a454:	4603      	mov	r3, r0
 800a456:	2b01      	cmp	r3, #1
 800a458:	d001      	beq.n	800a45e <osThreadNew+0x11a>
            hTask = NULL;
 800a45a:	2300      	movs	r3, #0
 800a45c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a45e:	693b      	ldr	r3, [r7, #16]
}
 800a460:	4618      	mov	r0, r3
 800a462:	3728      	adds	r7, #40	@ 0x28
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a470:	f3ef 8305 	mrs	r3, IPSR
 800a474:	60bb      	str	r3, [r7, #8]
  return(result);
 800a476:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d003      	beq.n	800a484 <osDelay+0x1c>
    stat = osErrorISR;
 800a47c:	f06f 0305 	mvn.w	r3, #5
 800a480:	60fb      	str	r3, [r7, #12]
 800a482:	e007      	b.n	800a494 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a484:	2300      	movs	r3, #0
 800a486:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d002      	beq.n	800a494 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 ff8e 	bl	800b3b0 <vTaskDelay>
    }
  }

  return (stat);
 800a494:	68fb      	ldr	r3, [r7, #12]
}
 800a496:	4618      	mov	r0, r3
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
	...

0800a4a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	4a07      	ldr	r2, [pc, #28]	@ (800a4cc <vApplicationGetIdleTaskMemory+0x2c>)
 800a4b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	4a06      	ldr	r2, [pc, #24]	@ (800a4d0 <vApplicationGetIdleTaskMemory+0x30>)
 800a4b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2280      	movs	r2, #128	@ 0x80
 800a4bc:	601a      	str	r2, [r3, #0]
}
 800a4be:	bf00      	nop
 800a4c0:	3714      	adds	r7, #20
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	20000620 	.word	0x20000620
 800a4d0:	2000067c 	.word	0x2000067c

0800a4d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	4a07      	ldr	r2, [pc, #28]	@ (800a500 <vApplicationGetTimerTaskMemory+0x2c>)
 800a4e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	4a06      	ldr	r2, [pc, #24]	@ (800a504 <vApplicationGetTimerTaskMemory+0x30>)
 800a4ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a4f2:	601a      	str	r2, [r3, #0]
}
 800a4f4:	bf00      	nop
 800a4f6:	3714      	adds	r7, #20
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr
 800a500:	2000087c 	.word	0x2000087c
 800a504:	200008d8 	.word	0x200008d8

0800a508 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a508:	b480      	push	{r7}
 800a50a:	b083      	sub	sp, #12
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f103 0208 	add.w	r2, r3, #8
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f04f 32ff 	mov.w	r2, #4294967295
 800a520:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f103 0208 	add.w	r2, r3, #8
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f103 0208 	add.w	r2, r3, #8
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2200      	movs	r2, #0
 800a53a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a53c:	bf00      	nop
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2200      	movs	r2, #0
 800a554:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a556:	bf00      	nop
 800a558:	370c      	adds	r7, #12
 800a55a:	46bd      	mov	sp, r7
 800a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a560:	4770      	bx	lr

0800a562 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a562:	b480      	push	{r7}
 800a564:	b085      	sub	sp, #20
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	689a      	ldr	r2, [r3, #8]
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	683a      	ldr	r2, [r7, #0]
 800a586:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	683a      	ldr	r2, [r7, #0]
 800a58c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	1c5a      	adds	r2, r3, #1
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	601a      	str	r2, [r3, #0]
}
 800a59e:	bf00      	nop
 800a5a0:	3714      	adds	r7, #20
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a5aa:	b480      	push	{r7}
 800a5ac:	b085      	sub	sp, #20
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
 800a5b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c0:	d103      	bne.n	800a5ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	60fb      	str	r3, [r7, #12]
 800a5c8:	e00c      	b.n	800a5e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	3308      	adds	r3, #8
 800a5ce:	60fb      	str	r3, [r7, #12]
 800a5d0:	e002      	b.n	800a5d8 <vListInsert+0x2e>
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	60fb      	str	r3, [r7, #12]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	68ba      	ldr	r2, [r7, #8]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d2f6      	bcs.n	800a5d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	683a      	ldr	r2, [r7, #0]
 800a5f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	683a      	ldr	r2, [r7, #0]
 800a5fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	1c5a      	adds	r2, r3, #1
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	601a      	str	r2, [r3, #0]
}
 800a610:	bf00      	nop
 800a612:	3714      	adds	r7, #20
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	691b      	ldr	r3, [r3, #16]
 800a628:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	6892      	ldr	r2, [r2, #8]
 800a632:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	6852      	ldr	r2, [r2, #4]
 800a63c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	429a      	cmp	r2, r3
 800a646:	d103      	bne.n	800a650 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	689a      	ldr	r2, [r3, #8]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	1e5a      	subs	r2, r3, #1
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681b      	ldr	r3, [r3, #0]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3714      	adds	r7, #20
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d10b      	bne.n	800a69c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a688:	f383 8811 	msr	BASEPRI, r3
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a696:	bf00      	nop
 800a698:	bf00      	nop
 800a69a:	e7fd      	b.n	800a698 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a69c:	f002 f87c 	bl	800c798 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6a8:	68f9      	ldr	r1, [r7, #12]
 800a6aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a6ac:	fb01 f303 	mul.w	r3, r1, r3
 800a6b0:	441a      	add	r2, r3
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	68f9      	ldr	r1, [r7, #12]
 800a6d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a6d2:	fb01 f303 	mul.w	r3, r1, r3
 800a6d6:	441a      	add	r2, r3
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	22ff      	movs	r2, #255	@ 0xff
 800a6e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	22ff      	movs	r2, #255	@ 0xff
 800a6e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d114      	bne.n	800a71c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d01a      	beq.n	800a730 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	3310      	adds	r3, #16
 800a6fe:	4618      	mov	r0, r3
 800a700:	f001 f91a 	bl	800b938 <xTaskRemoveFromEventList>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d012      	beq.n	800a730 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a70a:	4b0d      	ldr	r3, [pc, #52]	@ (800a740 <xQueueGenericReset+0xd0>)
 800a70c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a710:	601a      	str	r2, [r3, #0]
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	f3bf 8f6f 	isb	sy
 800a71a:	e009      	b.n	800a730 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	3310      	adds	r3, #16
 800a720:	4618      	mov	r0, r3
 800a722:	f7ff fef1 	bl	800a508 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	3324      	adds	r3, #36	@ 0x24
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7ff feec 	bl	800a508 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a730:	f002 f864 	bl	800c7fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a734:	2301      	movs	r3, #1
}
 800a736:	4618      	mov	r0, r3
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	e000ed04 	.word	0xe000ed04

0800a744 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a744:	b580      	push	{r7, lr}
 800a746:	b08e      	sub	sp, #56	@ 0x38
 800a748:	af02      	add	r7, sp, #8
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
 800a750:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10b      	bne.n	800a770 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a75c:	f383 8811 	msr	BASEPRI, r3
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a76a:	bf00      	nop
 800a76c:	bf00      	nop
 800a76e:	e7fd      	b.n	800a76c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d10b      	bne.n	800a78e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a77a:	f383 8811 	msr	BASEPRI, r3
 800a77e:	f3bf 8f6f 	isb	sy
 800a782:	f3bf 8f4f 	dsb	sy
 800a786:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a788:	bf00      	nop
 800a78a:	bf00      	nop
 800a78c:	e7fd      	b.n	800a78a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d002      	beq.n	800a79a <xQueueGenericCreateStatic+0x56>
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d001      	beq.n	800a79e <xQueueGenericCreateStatic+0x5a>
 800a79a:	2301      	movs	r3, #1
 800a79c:	e000      	b.n	800a7a0 <xQueueGenericCreateStatic+0x5c>
 800a79e:	2300      	movs	r3, #0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d10b      	bne.n	800a7bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a8:	f383 8811 	msr	BASEPRI, r3
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f3bf 8f4f 	dsb	sy
 800a7b4:	623b      	str	r3, [r7, #32]
}
 800a7b6:	bf00      	nop
 800a7b8:	bf00      	nop
 800a7ba:	e7fd      	b.n	800a7b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d102      	bne.n	800a7c8 <xQueueGenericCreateStatic+0x84>
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d101      	bne.n	800a7cc <xQueueGenericCreateStatic+0x88>
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	e000      	b.n	800a7ce <xQueueGenericCreateStatic+0x8a>
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d10b      	bne.n	800a7ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a7d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d6:	f383 8811 	msr	BASEPRI, r3
 800a7da:	f3bf 8f6f 	isb	sy
 800a7de:	f3bf 8f4f 	dsb	sy
 800a7e2:	61fb      	str	r3, [r7, #28]
}
 800a7e4:	bf00      	nop
 800a7e6:	bf00      	nop
 800a7e8:	e7fd      	b.n	800a7e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a7ea:	2350      	movs	r3, #80	@ 0x50
 800a7ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	2b50      	cmp	r3, #80	@ 0x50
 800a7f2:	d00b      	beq.n	800a80c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a7f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f8:	f383 8811 	msr	BASEPRI, r3
 800a7fc:	f3bf 8f6f 	isb	sy
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	61bb      	str	r3, [r7, #24]
}
 800a806:	bf00      	nop
 800a808:	bf00      	nop
 800a80a:	e7fd      	b.n	800a808 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a80c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00d      	beq.n	800a834 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a820:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	4613      	mov	r3, r2
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	68b9      	ldr	r1, [r7, #8]
 800a82e:	68f8      	ldr	r0, [r7, #12]
 800a830:	f000 f805 	bl	800a83e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a836:	4618      	mov	r0, r3
 800a838:	3730      	adds	r7, #48	@ 0x30
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b084      	sub	sp, #16
 800a842:	af00      	add	r7, sp, #0
 800a844:	60f8      	str	r0, [r7, #12]
 800a846:	60b9      	str	r1, [r7, #8]
 800a848:	607a      	str	r2, [r7, #4]
 800a84a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d103      	bne.n	800a85a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	69ba      	ldr	r2, [r7, #24]
 800a856:	601a      	str	r2, [r3, #0]
 800a858:	e002      	b.n	800a860 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	68fa      	ldr	r2, [r7, #12]
 800a864:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a866:	69bb      	ldr	r3, [r7, #24]
 800a868:	68ba      	ldr	r2, [r7, #8]
 800a86a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a86c:	2101      	movs	r1, #1
 800a86e:	69b8      	ldr	r0, [r7, #24]
 800a870:	f7ff fefe 	bl	800a670 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	78fa      	ldrb	r2, [r7, #3]
 800a878:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a87c:	bf00      	nop
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b08e      	sub	sp, #56	@ 0x38
 800a888:	af00      	add	r7, sp, #0
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	60b9      	str	r1, [r7, #8]
 800a88e:	607a      	str	r2, [r7, #4]
 800a890:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a892:	2300      	movs	r3, #0
 800a894:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a89a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d10b      	bne.n	800a8b8 <xQueueGenericSend+0x34>
	__asm volatile
 800a8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8a4:	f383 8811 	msr	BASEPRI, r3
 800a8a8:	f3bf 8f6f 	isb	sy
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a8b2:	bf00      	nop
 800a8b4:	bf00      	nop
 800a8b6:	e7fd      	b.n	800a8b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d103      	bne.n	800a8c6 <xQueueGenericSend+0x42>
 800a8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d101      	bne.n	800a8ca <xQueueGenericSend+0x46>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e000      	b.n	800a8cc <xQueueGenericSend+0x48>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10b      	bne.n	800a8e8 <xQueueGenericSend+0x64>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a8e2:	bf00      	nop
 800a8e4:	bf00      	nop
 800a8e6:	e7fd      	b.n	800a8e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	d103      	bne.n	800a8f6 <xQueueGenericSend+0x72>
 800a8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d101      	bne.n	800a8fa <xQueueGenericSend+0x76>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e000      	b.n	800a8fc <xQueueGenericSend+0x78>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d10b      	bne.n	800a918 <xQueueGenericSend+0x94>
	__asm volatile
 800a900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	623b      	str	r3, [r7, #32]
}
 800a912:	bf00      	nop
 800a914:	bf00      	nop
 800a916:	e7fd      	b.n	800a914 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a918:	f001 f9ce 	bl	800bcb8 <xTaskGetSchedulerState>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d102      	bne.n	800a928 <xQueueGenericSend+0xa4>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d101      	bne.n	800a92c <xQueueGenericSend+0xa8>
 800a928:	2301      	movs	r3, #1
 800a92a:	e000      	b.n	800a92e <xQueueGenericSend+0xaa>
 800a92c:	2300      	movs	r3, #0
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d10b      	bne.n	800a94a <xQueueGenericSend+0xc6>
	__asm volatile
 800a932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a936:	f383 8811 	msr	BASEPRI, r3
 800a93a:	f3bf 8f6f 	isb	sy
 800a93e:	f3bf 8f4f 	dsb	sy
 800a942:	61fb      	str	r3, [r7, #28]
}
 800a944:	bf00      	nop
 800a946:	bf00      	nop
 800a948:	e7fd      	b.n	800a946 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a94a:	f001 ff25 	bl	800c798 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a950:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a956:	429a      	cmp	r2, r3
 800a958:	d302      	bcc.n	800a960 <xQueueGenericSend+0xdc>
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	2b02      	cmp	r3, #2
 800a95e:	d129      	bne.n	800a9b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a960:	683a      	ldr	r2, [r7, #0]
 800a962:	68b9      	ldr	r1, [r7, #8]
 800a964:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a966:	f000 fa0f 	bl	800ad88 <prvCopyDataToQueue>
 800a96a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a96e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a970:	2b00      	cmp	r3, #0
 800a972:	d010      	beq.n	800a996 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a976:	3324      	adds	r3, #36	@ 0x24
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 ffdd 	bl	800b938 <xTaskRemoveFromEventList>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d013      	beq.n	800a9ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a984:	4b3f      	ldr	r3, [pc, #252]	@ (800aa84 <xQueueGenericSend+0x200>)
 800a986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a98a:	601a      	str	r2, [r3, #0]
 800a98c:	f3bf 8f4f 	dsb	sy
 800a990:	f3bf 8f6f 	isb	sy
 800a994:	e00a      	b.n	800a9ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d007      	beq.n	800a9ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a99c:	4b39      	ldr	r3, [pc, #228]	@ (800aa84 <xQueueGenericSend+0x200>)
 800a99e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9a2:	601a      	str	r2, [r3, #0]
 800a9a4:	f3bf 8f4f 	dsb	sy
 800a9a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a9ac:	f001 ff26 	bl	800c7fc <vPortExitCritical>
				return pdPASS;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e063      	b.n	800aa7c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d103      	bne.n	800a9c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9ba:	f001 ff1f 	bl	800c7fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	e05c      	b.n	800aa7c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d106      	bne.n	800a9d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9c8:	f107 0314 	add.w	r3, r7, #20
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f001 f817 	bl	800ba00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9d6:	f001 ff11 	bl	800c7fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9da:	f000 fd87 	bl	800b4ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9de:	f001 fedb 	bl	800c798 <vPortEnterCritical>
 800a9e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9e8:	b25b      	sxtb	r3, r3
 800a9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ee:	d103      	bne.n	800a9f8 <xQueueGenericSend+0x174>
 800a9f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9fe:	b25b      	sxtb	r3, r3
 800aa00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa04:	d103      	bne.n	800aa0e <xQueueGenericSend+0x18a>
 800aa06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa0e:	f001 fef5 	bl	800c7fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa12:	1d3a      	adds	r2, r7, #4
 800aa14:	f107 0314 	add.w	r3, r7, #20
 800aa18:	4611      	mov	r1, r2
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f001 f806 	bl	800ba2c <xTaskCheckForTimeOut>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d124      	bne.n	800aa70 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aa26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa28:	f000 faa6 	bl	800af78 <prvIsQueueFull>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d018      	beq.n	800aa64 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aa32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa34:	3310      	adds	r3, #16
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	4611      	mov	r1, r2
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f000 ff2a 	bl	800b894 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aa40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa42:	f000 fa31 	bl	800aea8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aa46:	f000 fd5f 	bl	800b508 <xTaskResumeAll>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f47f af7c 	bne.w	800a94a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800aa52:	4b0c      	ldr	r3, [pc, #48]	@ (800aa84 <xQueueGenericSend+0x200>)
 800aa54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa58:	601a      	str	r2, [r3, #0]
 800aa5a:	f3bf 8f4f 	dsb	sy
 800aa5e:	f3bf 8f6f 	isb	sy
 800aa62:	e772      	b.n	800a94a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aa64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa66:	f000 fa1f 	bl	800aea8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa6a:	f000 fd4d 	bl	800b508 <xTaskResumeAll>
 800aa6e:	e76c      	b.n	800a94a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aa70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa72:	f000 fa19 	bl	800aea8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa76:	f000 fd47 	bl	800b508 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aa7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3738      	adds	r7, #56	@ 0x38
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	e000ed04 	.word	0xe000ed04

0800aa88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b090      	sub	sp, #64	@ 0x40
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	60b9      	str	r1, [r7, #8]
 800aa92:	607a      	str	r2, [r7, #4]
 800aa94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800aa9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d10b      	bne.n	800aab8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800aaa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800aab2:	bf00      	nop
 800aab4:	bf00      	nop
 800aab6:	e7fd      	b.n	800aab4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d103      	bne.n	800aac6 <xQueueGenericSendFromISR+0x3e>
 800aabe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d101      	bne.n	800aaca <xQueueGenericSendFromISR+0x42>
 800aac6:	2301      	movs	r3, #1
 800aac8:	e000      	b.n	800aacc <xQueueGenericSendFromISR+0x44>
 800aaca:	2300      	movs	r3, #0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d10b      	bne.n	800aae8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800aad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aad4:	f383 8811 	msr	BASEPRI, r3
 800aad8:	f3bf 8f6f 	isb	sy
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aae2:	bf00      	nop
 800aae4:	bf00      	nop
 800aae6:	e7fd      	b.n	800aae4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d103      	bne.n	800aaf6 <xQueueGenericSendFromISR+0x6e>
 800aaee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d101      	bne.n	800aafa <xQueueGenericSendFromISR+0x72>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e000      	b.n	800aafc <xQueueGenericSendFromISR+0x74>
 800aafa:	2300      	movs	r3, #0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d10b      	bne.n	800ab18 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ab00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	623b      	str	r3, [r7, #32]
}
 800ab12:	bf00      	nop
 800ab14:	bf00      	nop
 800ab16:	e7fd      	b.n	800ab14 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab18:	f001 ff1e 	bl	800c958 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ab1c:	f3ef 8211 	mrs	r2, BASEPRI
 800ab20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab24:	f383 8811 	msr	BASEPRI, r3
 800ab28:	f3bf 8f6f 	isb	sy
 800ab2c:	f3bf 8f4f 	dsb	sy
 800ab30:	61fa      	str	r2, [r7, #28]
 800ab32:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ab34:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab36:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d302      	bcc.n	800ab4a <xQueueGenericSendFromISR+0xc2>
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	d12f      	bne.n	800abaa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab58:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab5a:	683a      	ldr	r2, [r7, #0]
 800ab5c:	68b9      	ldr	r1, [r7, #8]
 800ab5e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ab60:	f000 f912 	bl	800ad88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab64:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ab68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab6c:	d112      	bne.n	800ab94 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d016      	beq.n	800aba4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab78:	3324      	adds	r3, #36	@ 0x24
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f000 fedc 	bl	800b938 <xTaskRemoveFromEventList>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d00e      	beq.n	800aba4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00b      	beq.n	800aba4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	601a      	str	r2, [r3, #0]
 800ab92:	e007      	b.n	800aba4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ab98:	3301      	adds	r3, #1
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	b25a      	sxtb	r2, r3
 800ab9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800aba4:	2301      	movs	r3, #1
 800aba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800aba8:	e001      	b.n	800abae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800abaa:	2300      	movs	r3, #0
 800abac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abb0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800abb8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800abba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3740      	adds	r7, #64	@ 0x40
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b08c      	sub	sp, #48	@ 0x30
 800abc8:	af00      	add	r7, sp, #0
 800abca:	60f8      	str	r0, [r7, #12]
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800abd0:	2300      	movs	r3, #0
 800abd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800abd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d10b      	bne.n	800abf6 <xQueueReceive+0x32>
	__asm volatile
 800abde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe2:	f383 8811 	msr	BASEPRI, r3
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	623b      	str	r3, [r7, #32]
}
 800abf0:	bf00      	nop
 800abf2:	bf00      	nop
 800abf4:	e7fd      	b.n	800abf2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d103      	bne.n	800ac04 <xQueueReceive+0x40>
 800abfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d101      	bne.n	800ac08 <xQueueReceive+0x44>
 800ac04:	2301      	movs	r3, #1
 800ac06:	e000      	b.n	800ac0a <xQueueReceive+0x46>
 800ac08:	2300      	movs	r3, #0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d10b      	bne.n	800ac26 <xQueueReceive+0x62>
	__asm volatile
 800ac0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac12:	f383 8811 	msr	BASEPRI, r3
 800ac16:	f3bf 8f6f 	isb	sy
 800ac1a:	f3bf 8f4f 	dsb	sy
 800ac1e:	61fb      	str	r3, [r7, #28]
}
 800ac20:	bf00      	nop
 800ac22:	bf00      	nop
 800ac24:	e7fd      	b.n	800ac22 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac26:	f001 f847 	bl	800bcb8 <xTaskGetSchedulerState>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d102      	bne.n	800ac36 <xQueueReceive+0x72>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d101      	bne.n	800ac3a <xQueueReceive+0x76>
 800ac36:	2301      	movs	r3, #1
 800ac38:	e000      	b.n	800ac3c <xQueueReceive+0x78>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d10b      	bne.n	800ac58 <xQueueReceive+0x94>
	__asm volatile
 800ac40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac44:	f383 8811 	msr	BASEPRI, r3
 800ac48:	f3bf 8f6f 	isb	sy
 800ac4c:	f3bf 8f4f 	dsb	sy
 800ac50:	61bb      	str	r3, [r7, #24]
}
 800ac52:	bf00      	nop
 800ac54:	bf00      	nop
 800ac56:	e7fd      	b.n	800ac54 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac58:	f001 fd9e 	bl	800c798 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac60:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d01f      	beq.n	800aca8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac68:	68b9      	ldr	r1, [r7, #8]
 800ac6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac6c:	f000 f8f6 	bl	800ae5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac72:	1e5a      	subs	r2, r3, #1
 800ac74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac76:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac7a:	691b      	ldr	r3, [r3, #16]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00f      	beq.n	800aca0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac82:	3310      	adds	r3, #16
 800ac84:	4618      	mov	r0, r3
 800ac86:	f000 fe57 	bl	800b938 <xTaskRemoveFromEventList>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d007      	beq.n	800aca0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac90:	4b3c      	ldr	r3, [pc, #240]	@ (800ad84 <xQueueReceive+0x1c0>)
 800ac92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac96:	601a      	str	r2, [r3, #0]
 800ac98:	f3bf 8f4f 	dsb	sy
 800ac9c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aca0:	f001 fdac 	bl	800c7fc <vPortExitCritical>
				return pdPASS;
 800aca4:	2301      	movs	r3, #1
 800aca6:	e069      	b.n	800ad7c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d103      	bne.n	800acb6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800acae:	f001 fda5 	bl	800c7fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800acb2:	2300      	movs	r3, #0
 800acb4:	e062      	b.n	800ad7c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800acb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d106      	bne.n	800acca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800acbc:	f107 0310 	add.w	r3, r7, #16
 800acc0:	4618      	mov	r0, r3
 800acc2:	f000 fe9d 	bl	800ba00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800acc6:	2301      	movs	r3, #1
 800acc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800acca:	f001 fd97 	bl	800c7fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800acce:	f000 fc0d 	bl	800b4ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800acd2:	f001 fd61 	bl	800c798 <vPortEnterCritical>
 800acd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800acdc:	b25b      	sxtb	r3, r3
 800acde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace2:	d103      	bne.n	800acec <xQueueReceive+0x128>
 800ace4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace6:	2200      	movs	r2, #0
 800ace8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800acec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800acf2:	b25b      	sxtb	r3, r3
 800acf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf8:	d103      	bne.n	800ad02 <xQueueReceive+0x13e>
 800acfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acfc:	2200      	movs	r2, #0
 800acfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad02:	f001 fd7b 	bl	800c7fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad06:	1d3a      	adds	r2, r7, #4
 800ad08:	f107 0310 	add.w	r3, r7, #16
 800ad0c:	4611      	mov	r1, r2
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f000 fe8c 	bl	800ba2c <xTaskCheckForTimeOut>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d123      	bne.n	800ad62 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad1c:	f000 f916 	bl	800af4c <prvIsQueueEmpty>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d017      	beq.n	800ad56 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad28:	3324      	adds	r3, #36	@ 0x24
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	4611      	mov	r1, r2
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f000 fdb0 	bl	800b894 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad36:	f000 f8b7 	bl	800aea8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad3a:	f000 fbe5 	bl	800b508 <xTaskResumeAll>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d189      	bne.n	800ac58 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ad44:	4b0f      	ldr	r3, [pc, #60]	@ (800ad84 <xQueueReceive+0x1c0>)
 800ad46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad4a:	601a      	str	r2, [r3, #0]
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	f3bf 8f6f 	isb	sy
 800ad54:	e780      	b.n	800ac58 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ad56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad58:	f000 f8a6 	bl	800aea8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad5c:	f000 fbd4 	bl	800b508 <xTaskResumeAll>
 800ad60:	e77a      	b.n	800ac58 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ad62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad64:	f000 f8a0 	bl	800aea8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad68:	f000 fbce 	bl	800b508 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad6e:	f000 f8ed 	bl	800af4c <prvIsQueueEmpty>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f43f af6f 	beq.w	800ac58 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3730      	adds	r7, #48	@ 0x30
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	e000ed04 	.word	0xe000ed04

0800ad88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b086      	sub	sp, #24
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ad94:	2300      	movs	r3, #0
 800ad96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10d      	bne.n	800adc2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d14d      	bne.n	800ae4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	4618      	mov	r0, r3
 800adb4:	f000 ff9e 	bl	800bcf4 <xTaskPriorityDisinherit>
 800adb8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	609a      	str	r2, [r3, #8]
 800adc0:	e043      	b.n	800ae4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d119      	bne.n	800adfc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6858      	ldr	r0, [r3, #4]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800add0:	461a      	mov	r2, r3
 800add2:	68b9      	ldr	r1, [r7, #8]
 800add4:	f003 f865 	bl	800dea2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	685a      	ldr	r2, [r3, #4]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ade0:	441a      	add	r2, r3
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	685a      	ldr	r2, [r3, #4]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	689b      	ldr	r3, [r3, #8]
 800adee:	429a      	cmp	r2, r3
 800adf0:	d32b      	bcc.n	800ae4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	605a      	str	r2, [r3, #4]
 800adfa:	e026      	b.n	800ae4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	68d8      	ldr	r0, [r3, #12]
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae04:	461a      	mov	r2, r3
 800ae06:	68b9      	ldr	r1, [r7, #8]
 800ae08:	f003 f84b 	bl	800dea2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	68da      	ldr	r2, [r3, #12]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae14:	425b      	negs	r3, r3
 800ae16:	441a      	add	r2, r3
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	68da      	ldr	r2, [r3, #12]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d207      	bcs.n	800ae38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	689a      	ldr	r2, [r3, #8]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae30:	425b      	negs	r3, r3
 800ae32:	441a      	add	r2, r3
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d105      	bne.n	800ae4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d002      	beq.n	800ae4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	3b01      	subs	r3, #1
 800ae48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	1c5a      	adds	r2, r3, #1
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ae52:	697b      	ldr	r3, [r7, #20]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3718      	adds	r7, #24
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd80      	pop	{r7, pc}

0800ae5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d018      	beq.n	800aea0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	68da      	ldr	r2, [r3, #12]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae76:	441a      	add	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	68da      	ldr	r2, [r3, #12]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d303      	bcc.n	800ae90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	68d9      	ldr	r1, [r3, #12]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae98:	461a      	mov	r2, r3
 800ae9a:	6838      	ldr	r0, [r7, #0]
 800ae9c:	f003 f801 	bl	800dea2 <memcpy>
	}
}
 800aea0:	bf00      	nop
 800aea2:	3708      	adds	r7, #8
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aeb0:	f001 fc72 	bl	800c798 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aeba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aebc:	e011      	b.n	800aee2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d012      	beq.n	800aeec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	3324      	adds	r3, #36	@ 0x24
 800aeca:	4618      	mov	r0, r3
 800aecc:	f000 fd34 	bl	800b938 <xTaskRemoveFromEventList>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d001      	beq.n	800aeda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aed6:	f000 fe0d 	bl	800baf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aeda:	7bfb      	ldrb	r3, [r7, #15]
 800aedc:	3b01      	subs	r3, #1
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	dce9      	bgt.n	800aebe <prvUnlockQueue+0x16>
 800aeea:	e000      	b.n	800aeee <prvUnlockQueue+0x46>
					break;
 800aeec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	22ff      	movs	r2, #255	@ 0xff
 800aef2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800aef6:	f001 fc81 	bl	800c7fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aefa:	f001 fc4d 	bl	800c798 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af04:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af06:	e011      	b.n	800af2c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	691b      	ldr	r3, [r3, #16]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d012      	beq.n	800af36 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	3310      	adds	r3, #16
 800af14:	4618      	mov	r0, r3
 800af16:	f000 fd0f 	bl	800b938 <xTaskRemoveFromEventList>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d001      	beq.n	800af24 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800af20:	f000 fde8 	bl	800baf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800af24:	7bbb      	ldrb	r3, [r7, #14]
 800af26:	3b01      	subs	r3, #1
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af30:	2b00      	cmp	r3, #0
 800af32:	dce9      	bgt.n	800af08 <prvUnlockQueue+0x60>
 800af34:	e000      	b.n	800af38 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800af36:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	22ff      	movs	r2, #255	@ 0xff
 800af3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800af40:	f001 fc5c 	bl	800c7fc <vPortExitCritical>
}
 800af44:	bf00      	nop
 800af46:	3710      	adds	r7, #16
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af54:	f001 fc20 	bl	800c798 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d102      	bne.n	800af66 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800af60:	2301      	movs	r3, #1
 800af62:	60fb      	str	r3, [r7, #12]
 800af64:	e001      	b.n	800af6a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800af66:	2300      	movs	r3, #0
 800af68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af6a:	f001 fc47 	bl	800c7fc <vPortExitCritical>

	return xReturn;
 800af6e:	68fb      	ldr	r3, [r7, #12]
}
 800af70:	4618      	mov	r0, r3
 800af72:	3710      	adds	r7, #16
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af80:	f001 fc0a 	bl	800c798 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d102      	bne.n	800af96 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800af90:	2301      	movs	r3, #1
 800af92:	60fb      	str	r3, [r7, #12]
 800af94:	e001      	b.n	800af9a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800af96:	2300      	movs	r3, #0
 800af98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af9a:	f001 fc2f 	bl	800c7fc <vPortExitCritical>

	return xReturn;
 800af9e:	68fb      	ldr	r3, [r7, #12]
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3710      	adds	r7, #16
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800afa8:	b480      	push	{r7}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afb2:	2300      	movs	r3, #0
 800afb4:	60fb      	str	r3, [r7, #12]
 800afb6:	e014      	b.n	800afe2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800afb8:	4a0f      	ldr	r2, [pc, #60]	@ (800aff8 <vQueueAddToRegistry+0x50>)
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d10b      	bne.n	800afdc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800afc4:	490c      	ldr	r1, [pc, #48]	@ (800aff8 <vQueueAddToRegistry+0x50>)
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	683a      	ldr	r2, [r7, #0]
 800afca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800afce:	4a0a      	ldr	r2, [pc, #40]	@ (800aff8 <vQueueAddToRegistry+0x50>)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	00db      	lsls	r3, r3, #3
 800afd4:	4413      	add	r3, r2
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800afda:	e006      	b.n	800afea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	3301      	adds	r3, #1
 800afe0:	60fb      	str	r3, [r7, #12]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2b07      	cmp	r3, #7
 800afe6:	d9e7      	bls.n	800afb8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800afe8:	bf00      	nop
 800afea:	bf00      	nop
 800afec:	3714      	adds	r7, #20
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr
 800aff6:	bf00      	nop
 800aff8:	20000cd8 	.word	0x20000cd8

0800affc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800affc:	b580      	push	{r7, lr}
 800affe:	b086      	sub	sp, #24
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b00c:	f001 fbc4 	bl	800c798 <vPortEnterCritical>
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b016:	b25b      	sxtb	r3, r3
 800b018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b01c:	d103      	bne.n	800b026 <vQueueWaitForMessageRestricted+0x2a>
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	2200      	movs	r2, #0
 800b022:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b02c:	b25b      	sxtb	r3, r3
 800b02e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b032:	d103      	bne.n	800b03c <vQueueWaitForMessageRestricted+0x40>
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	2200      	movs	r2, #0
 800b038:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b03c:	f001 fbde 	bl	800c7fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b044:	2b00      	cmp	r3, #0
 800b046:	d106      	bne.n	800b056 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b048:	697b      	ldr	r3, [r7, #20]
 800b04a:	3324      	adds	r3, #36	@ 0x24
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	68b9      	ldr	r1, [r7, #8]
 800b050:	4618      	mov	r0, r3
 800b052:	f000 fc45 	bl	800b8e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b056:	6978      	ldr	r0, [r7, #20]
 800b058:	f7ff ff26 	bl	800aea8 <prvUnlockQueue>
	}
 800b05c:	bf00      	nop
 800b05e:	3718      	adds	r7, #24
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b064:	b580      	push	{r7, lr}
 800b066:	b08e      	sub	sp, #56	@ 0x38
 800b068:	af04      	add	r7, sp, #16
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	607a      	str	r2, [r7, #4]
 800b070:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b074:	2b00      	cmp	r3, #0
 800b076:	d10b      	bne.n	800b090 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b07c:	f383 8811 	msr	BASEPRI, r3
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	f3bf 8f4f 	dsb	sy
 800b088:	623b      	str	r3, [r7, #32]
}
 800b08a:	bf00      	nop
 800b08c:	bf00      	nop
 800b08e:	e7fd      	b.n	800b08c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b092:	2b00      	cmp	r3, #0
 800b094:	d10b      	bne.n	800b0ae <xTaskCreateStatic+0x4a>
	__asm volatile
 800b096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b09a:	f383 8811 	msr	BASEPRI, r3
 800b09e:	f3bf 8f6f 	isb	sy
 800b0a2:	f3bf 8f4f 	dsb	sy
 800b0a6:	61fb      	str	r3, [r7, #28]
}
 800b0a8:	bf00      	nop
 800b0aa:	bf00      	nop
 800b0ac:	e7fd      	b.n	800b0aa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b0ae:	235c      	movs	r3, #92	@ 0x5c
 800b0b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	2b5c      	cmp	r3, #92	@ 0x5c
 800b0b6:	d00b      	beq.n	800b0d0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0bc:	f383 8811 	msr	BASEPRI, r3
 800b0c0:	f3bf 8f6f 	isb	sy
 800b0c4:	f3bf 8f4f 	dsb	sy
 800b0c8:	61bb      	str	r3, [r7, #24]
}
 800b0ca:	bf00      	nop
 800b0cc:	bf00      	nop
 800b0ce:	e7fd      	b.n	800b0cc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b0d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d01e      	beq.n	800b116 <xTaskCreateStatic+0xb2>
 800b0d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d01b      	beq.n	800b116 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b0de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b0e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ea:	2202      	movs	r2, #2
 800b0ec:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	9303      	str	r3, [sp, #12]
 800b0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f6:	9302      	str	r3, [sp, #8]
 800b0f8:	f107 0314 	add.w	r3, r7, #20
 800b0fc:	9301      	str	r3, [sp, #4]
 800b0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b100:	9300      	str	r3, [sp, #0]
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	68b9      	ldr	r1, [r7, #8]
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f000 f850 	bl	800b1ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b10e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b110:	f000 f8de 	bl	800b2d0 <prvAddNewTaskToReadyList>
 800b114:	e001      	b.n	800b11a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b116:	2300      	movs	r3, #0
 800b118:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b11a:	697b      	ldr	r3, [r7, #20]
	}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3728      	adds	r7, #40	@ 0x28
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b124:	b580      	push	{r7, lr}
 800b126:	b08c      	sub	sp, #48	@ 0x30
 800b128:	af04      	add	r7, sp, #16
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	603b      	str	r3, [r7, #0]
 800b130:	4613      	mov	r3, r2
 800b132:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b134:	88fb      	ldrh	r3, [r7, #6]
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	4618      	mov	r0, r3
 800b13a:	f001 fc4f 	bl	800c9dc <pvPortMalloc>
 800b13e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00e      	beq.n	800b164 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b146:	205c      	movs	r0, #92	@ 0x5c
 800b148:	f001 fc48 	bl	800c9dc <pvPortMalloc>
 800b14c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b14e:	69fb      	ldr	r3, [r7, #28]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d003      	beq.n	800b15c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	697a      	ldr	r2, [r7, #20]
 800b158:	631a      	str	r2, [r3, #48]	@ 0x30
 800b15a:	e005      	b.n	800b168 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b15c:	6978      	ldr	r0, [r7, #20]
 800b15e:	f001 fd0b 	bl	800cb78 <vPortFree>
 800b162:	e001      	b.n	800b168 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b164:	2300      	movs	r3, #0
 800b166:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b168:	69fb      	ldr	r3, [r7, #28]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d017      	beq.n	800b19e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	2200      	movs	r2, #0
 800b172:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b176:	88fa      	ldrh	r2, [r7, #6]
 800b178:	2300      	movs	r3, #0
 800b17a:	9303      	str	r3, [sp, #12]
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	9302      	str	r3, [sp, #8]
 800b180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b182:	9301      	str	r3, [sp, #4]
 800b184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b186:	9300      	str	r3, [sp, #0]
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	68b9      	ldr	r1, [r7, #8]
 800b18c:	68f8      	ldr	r0, [r7, #12]
 800b18e:	f000 f80e 	bl	800b1ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b192:	69f8      	ldr	r0, [r7, #28]
 800b194:	f000 f89c 	bl	800b2d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b198:	2301      	movs	r3, #1
 800b19a:	61bb      	str	r3, [r7, #24]
 800b19c:	e002      	b.n	800b1a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b19e:	f04f 33ff 	mov.w	r3, #4294967295
 800b1a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b1a4:	69bb      	ldr	r3, [r7, #24]
	}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3720      	adds	r7, #32
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b088      	sub	sp, #32
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	60f8      	str	r0, [r7, #12]
 800b1b6:	60b9      	str	r1, [r7, #8]
 800b1b8:	607a      	str	r2, [r7, #4]
 800b1ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1be:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	21a5      	movs	r1, #165	@ 0xa5
 800b1c8:	f002 fdd9 	bl	800dd7e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	4413      	add	r3, r2
 800b1dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	f023 0307 	bic.w	r3, r3, #7
 800b1e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	f003 0307 	and.w	r3, r3, #7
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00b      	beq.n	800b208 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b1f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	617b      	str	r3, [r7, #20]
}
 800b202:	bf00      	nop
 800b204:	bf00      	nop
 800b206:	e7fd      	b.n	800b204 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d01f      	beq.n	800b24e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b20e:	2300      	movs	r3, #0
 800b210:	61fb      	str	r3, [r7, #28]
 800b212:	e012      	b.n	800b23a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b214:	68ba      	ldr	r2, [r7, #8]
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	4413      	add	r3, r2
 800b21a:	7819      	ldrb	r1, [r3, #0]
 800b21c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b21e:	69fb      	ldr	r3, [r7, #28]
 800b220:	4413      	add	r3, r2
 800b222:	3334      	adds	r3, #52	@ 0x34
 800b224:	460a      	mov	r2, r1
 800b226:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b228:	68ba      	ldr	r2, [r7, #8]
 800b22a:	69fb      	ldr	r3, [r7, #28]
 800b22c:	4413      	add	r3, r2
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d006      	beq.n	800b242 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b234:	69fb      	ldr	r3, [r7, #28]
 800b236:	3301      	adds	r3, #1
 800b238:	61fb      	str	r3, [r7, #28]
 800b23a:	69fb      	ldr	r3, [r7, #28]
 800b23c:	2b0f      	cmp	r3, #15
 800b23e:	d9e9      	bls.n	800b214 <prvInitialiseNewTask+0x66>
 800b240:	e000      	b.n	800b244 <prvInitialiseNewTask+0x96>
			{
				break;
 800b242:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b246:	2200      	movs	r2, #0
 800b248:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b24c:	e003      	b.n	800b256 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b250:	2200      	movs	r2, #0
 800b252:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b258:	2b37      	cmp	r3, #55	@ 0x37
 800b25a:	d901      	bls.n	800b260 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b25c:	2337      	movs	r3, #55	@ 0x37
 800b25e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b262:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b264:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b26a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b26e:	2200      	movs	r2, #0
 800b270:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b274:	3304      	adds	r3, #4
 800b276:	4618      	mov	r0, r3
 800b278:	f7ff f966 	bl	800a548 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b27e:	3318      	adds	r3, #24
 800b280:	4618      	mov	r0, r3
 800b282:	f7ff f961 	bl	800a548 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b28a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b28c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b28e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b294:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b298:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b29a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b29c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29e:	2200      	movs	r2, #0
 800b2a0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b2aa:	683a      	ldr	r2, [r7, #0]
 800b2ac:	68f9      	ldr	r1, [r7, #12]
 800b2ae:	69b8      	ldr	r0, [r7, #24]
 800b2b0:	f001 f93e 	bl	800c530 <pxPortInitialiseStack>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d002      	beq.n	800b2c6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2c6:	bf00      	nop
 800b2c8:	3720      	adds	r7, #32
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
	...

0800b2d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b082      	sub	sp, #8
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b2d8:	f001 fa5e 	bl	800c798 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b2dc:	4b2d      	ldr	r3, [pc, #180]	@ (800b394 <prvAddNewTaskToReadyList+0xc4>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	4a2c      	ldr	r2, [pc, #176]	@ (800b394 <prvAddNewTaskToReadyList+0xc4>)
 800b2e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b2e6:	4b2c      	ldr	r3, [pc, #176]	@ (800b398 <prvAddNewTaskToReadyList+0xc8>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d109      	bne.n	800b302 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b2ee:	4a2a      	ldr	r2, [pc, #168]	@ (800b398 <prvAddNewTaskToReadyList+0xc8>)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b2f4:	4b27      	ldr	r3, [pc, #156]	@ (800b394 <prvAddNewTaskToReadyList+0xc4>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d110      	bne.n	800b31e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b2fc:	f000 fc1e 	bl	800bb3c <prvInitialiseTaskLists>
 800b300:	e00d      	b.n	800b31e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b302:	4b26      	ldr	r3, [pc, #152]	@ (800b39c <prvAddNewTaskToReadyList+0xcc>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d109      	bne.n	800b31e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b30a:	4b23      	ldr	r3, [pc, #140]	@ (800b398 <prvAddNewTaskToReadyList+0xc8>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b314:	429a      	cmp	r2, r3
 800b316:	d802      	bhi.n	800b31e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b318:	4a1f      	ldr	r2, [pc, #124]	@ (800b398 <prvAddNewTaskToReadyList+0xc8>)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b31e:	4b20      	ldr	r3, [pc, #128]	@ (800b3a0 <prvAddNewTaskToReadyList+0xd0>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	3301      	adds	r3, #1
 800b324:	4a1e      	ldr	r2, [pc, #120]	@ (800b3a0 <prvAddNewTaskToReadyList+0xd0>)
 800b326:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b328:	4b1d      	ldr	r3, [pc, #116]	@ (800b3a0 <prvAddNewTaskToReadyList+0xd0>)
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b334:	4b1b      	ldr	r3, [pc, #108]	@ (800b3a4 <prvAddNewTaskToReadyList+0xd4>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d903      	bls.n	800b344 <prvAddNewTaskToReadyList+0x74>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b340:	4a18      	ldr	r2, [pc, #96]	@ (800b3a4 <prvAddNewTaskToReadyList+0xd4>)
 800b342:	6013      	str	r3, [r2, #0]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b348:	4613      	mov	r3, r2
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	4413      	add	r3, r2
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	4a15      	ldr	r2, [pc, #84]	@ (800b3a8 <prvAddNewTaskToReadyList+0xd8>)
 800b352:	441a      	add	r2, r3
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	3304      	adds	r3, #4
 800b358:	4619      	mov	r1, r3
 800b35a:	4610      	mov	r0, r2
 800b35c:	f7ff f901 	bl	800a562 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b360:	f001 fa4c 	bl	800c7fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b364:	4b0d      	ldr	r3, [pc, #52]	@ (800b39c <prvAddNewTaskToReadyList+0xcc>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d00e      	beq.n	800b38a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b36c:	4b0a      	ldr	r3, [pc, #40]	@ (800b398 <prvAddNewTaskToReadyList+0xc8>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b376:	429a      	cmp	r2, r3
 800b378:	d207      	bcs.n	800b38a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b37a:	4b0c      	ldr	r3, [pc, #48]	@ (800b3ac <prvAddNewTaskToReadyList+0xdc>)
 800b37c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b380:	601a      	str	r2, [r3, #0]
 800b382:	f3bf 8f4f 	dsb	sy
 800b386:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b38a:	bf00      	nop
 800b38c:	3708      	adds	r7, #8
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	200011ec 	.word	0x200011ec
 800b398:	20000d18 	.word	0x20000d18
 800b39c:	200011f8 	.word	0x200011f8
 800b3a0:	20001208 	.word	0x20001208
 800b3a4:	200011f4 	.word	0x200011f4
 800b3a8:	20000d1c 	.word	0x20000d1c
 800b3ac:	e000ed04 	.word	0xe000ed04

0800b3b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d018      	beq.n	800b3f4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b3c2:	4b14      	ldr	r3, [pc, #80]	@ (800b414 <vTaskDelay+0x64>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d00b      	beq.n	800b3e2 <vTaskDelay+0x32>
	__asm volatile
 800b3ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ce:	f383 8811 	msr	BASEPRI, r3
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	60bb      	str	r3, [r7, #8]
}
 800b3dc:	bf00      	nop
 800b3de:	bf00      	nop
 800b3e0:	e7fd      	b.n	800b3de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b3e2:	f000 f883 	bl	800b4ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f000 fcf3 	bl	800bdd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b3ee:	f000 f88b 	bl	800b508 <xTaskResumeAll>
 800b3f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d107      	bne.n	800b40a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b3fa:	4b07      	ldr	r3, [pc, #28]	@ (800b418 <vTaskDelay+0x68>)
 800b3fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b400:	601a      	str	r2, [r3, #0]
 800b402:	f3bf 8f4f 	dsb	sy
 800b406:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b40a:	bf00      	nop
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	20001214 	.word	0x20001214
 800b418:	e000ed04 	.word	0xe000ed04

0800b41c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b08a      	sub	sp, #40	@ 0x28
 800b420:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b422:	2300      	movs	r3, #0
 800b424:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b426:	2300      	movs	r3, #0
 800b428:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b42a:	463a      	mov	r2, r7
 800b42c:	1d39      	adds	r1, r7, #4
 800b42e:	f107 0308 	add.w	r3, r7, #8
 800b432:	4618      	mov	r0, r3
 800b434:	f7ff f834 	bl	800a4a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	68ba      	ldr	r2, [r7, #8]
 800b43e:	9202      	str	r2, [sp, #8]
 800b440:	9301      	str	r3, [sp, #4]
 800b442:	2300      	movs	r3, #0
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	2300      	movs	r3, #0
 800b448:	460a      	mov	r2, r1
 800b44a:	4922      	ldr	r1, [pc, #136]	@ (800b4d4 <vTaskStartScheduler+0xb8>)
 800b44c:	4822      	ldr	r0, [pc, #136]	@ (800b4d8 <vTaskStartScheduler+0xbc>)
 800b44e:	f7ff fe09 	bl	800b064 <xTaskCreateStatic>
 800b452:	4603      	mov	r3, r0
 800b454:	4a21      	ldr	r2, [pc, #132]	@ (800b4dc <vTaskStartScheduler+0xc0>)
 800b456:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b458:	4b20      	ldr	r3, [pc, #128]	@ (800b4dc <vTaskStartScheduler+0xc0>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d002      	beq.n	800b466 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b460:	2301      	movs	r3, #1
 800b462:	617b      	str	r3, [r7, #20]
 800b464:	e001      	b.n	800b46a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b466:	2300      	movs	r3, #0
 800b468:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d102      	bne.n	800b476 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b470:	f000 fd04 	bl	800be7c <xTimerCreateTimerTask>
 800b474:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d116      	bne.n	800b4aa <vTaskStartScheduler+0x8e>
	__asm volatile
 800b47c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b480:	f383 8811 	msr	BASEPRI, r3
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	f3bf 8f4f 	dsb	sy
 800b48c:	613b      	str	r3, [r7, #16]
}
 800b48e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b490:	4b13      	ldr	r3, [pc, #76]	@ (800b4e0 <vTaskStartScheduler+0xc4>)
 800b492:	f04f 32ff 	mov.w	r2, #4294967295
 800b496:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b498:	4b12      	ldr	r3, [pc, #72]	@ (800b4e4 <vTaskStartScheduler+0xc8>)
 800b49a:	2201      	movs	r2, #1
 800b49c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b49e:	4b12      	ldr	r3, [pc, #72]	@ (800b4e8 <vTaskStartScheduler+0xcc>)
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b4a4:	f001 f8d4 	bl	800c650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b4a8:	e00f      	b.n	800b4ca <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4b0:	d10b      	bne.n	800b4ca <vTaskStartScheduler+0xae>
	__asm volatile
 800b4b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b6:	f383 8811 	msr	BASEPRI, r3
 800b4ba:	f3bf 8f6f 	isb	sy
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	60fb      	str	r3, [r7, #12]
}
 800b4c4:	bf00      	nop
 800b4c6:	bf00      	nop
 800b4c8:	e7fd      	b.n	800b4c6 <vTaskStartScheduler+0xaa>
}
 800b4ca:	bf00      	nop
 800b4cc:	3718      	adds	r7, #24
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	08011454 	.word	0x08011454
 800b4d8:	0800bb0d 	.word	0x0800bb0d
 800b4dc:	20001210 	.word	0x20001210
 800b4e0:	2000120c 	.word	0x2000120c
 800b4e4:	200011f8 	.word	0x200011f8
 800b4e8:	200011f0 	.word	0x200011f0

0800b4ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b4f0:	4b04      	ldr	r3, [pc, #16]	@ (800b504 <vTaskSuspendAll+0x18>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	4a03      	ldr	r2, [pc, #12]	@ (800b504 <vTaskSuspendAll+0x18>)
 800b4f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b4fa:	bf00      	nop
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b502:	4770      	bx	lr
 800b504:	20001214 	.word	0x20001214

0800b508 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b50e:	2300      	movs	r3, #0
 800b510:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b512:	2300      	movs	r3, #0
 800b514:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b516:	4b42      	ldr	r3, [pc, #264]	@ (800b620 <xTaskResumeAll+0x118>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d10b      	bne.n	800b536 <xTaskResumeAll+0x2e>
	__asm volatile
 800b51e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b522:	f383 8811 	msr	BASEPRI, r3
 800b526:	f3bf 8f6f 	isb	sy
 800b52a:	f3bf 8f4f 	dsb	sy
 800b52e:	603b      	str	r3, [r7, #0]
}
 800b530:	bf00      	nop
 800b532:	bf00      	nop
 800b534:	e7fd      	b.n	800b532 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b536:	f001 f92f 	bl	800c798 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b53a:	4b39      	ldr	r3, [pc, #228]	@ (800b620 <xTaskResumeAll+0x118>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	3b01      	subs	r3, #1
 800b540:	4a37      	ldr	r2, [pc, #220]	@ (800b620 <xTaskResumeAll+0x118>)
 800b542:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b544:	4b36      	ldr	r3, [pc, #216]	@ (800b620 <xTaskResumeAll+0x118>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d162      	bne.n	800b612 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b54c:	4b35      	ldr	r3, [pc, #212]	@ (800b624 <xTaskResumeAll+0x11c>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d05e      	beq.n	800b612 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b554:	e02f      	b.n	800b5b6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b556:	4b34      	ldr	r3, [pc, #208]	@ (800b628 <xTaskResumeAll+0x120>)
 800b558:	68db      	ldr	r3, [r3, #12]
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	3318      	adds	r3, #24
 800b562:	4618      	mov	r0, r3
 800b564:	f7ff f85a 	bl	800a61c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	3304      	adds	r3, #4
 800b56c:	4618      	mov	r0, r3
 800b56e:	f7ff f855 	bl	800a61c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b576:	4b2d      	ldr	r3, [pc, #180]	@ (800b62c <xTaskResumeAll+0x124>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d903      	bls.n	800b586 <xTaskResumeAll+0x7e>
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b582:	4a2a      	ldr	r2, [pc, #168]	@ (800b62c <xTaskResumeAll+0x124>)
 800b584:	6013      	str	r3, [r2, #0]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b58a:	4613      	mov	r3, r2
 800b58c:	009b      	lsls	r3, r3, #2
 800b58e:	4413      	add	r3, r2
 800b590:	009b      	lsls	r3, r3, #2
 800b592:	4a27      	ldr	r2, [pc, #156]	@ (800b630 <xTaskResumeAll+0x128>)
 800b594:	441a      	add	r2, r3
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	3304      	adds	r3, #4
 800b59a:	4619      	mov	r1, r3
 800b59c:	4610      	mov	r0, r2
 800b59e:	f7fe ffe0 	bl	800a562 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5a6:	4b23      	ldr	r3, [pc, #140]	@ (800b634 <xTaskResumeAll+0x12c>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d302      	bcc.n	800b5b6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b5b0:	4b21      	ldr	r3, [pc, #132]	@ (800b638 <xTaskResumeAll+0x130>)
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5b6:	4b1c      	ldr	r3, [pc, #112]	@ (800b628 <xTaskResumeAll+0x120>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1cb      	bne.n	800b556 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d001      	beq.n	800b5c8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b5c4:	f000 fb58 	bl	800bc78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b5c8:	4b1c      	ldr	r3, [pc, #112]	@ (800b63c <xTaskResumeAll+0x134>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d010      	beq.n	800b5f6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b5d4:	f000 f846 	bl	800b664 <xTaskIncrementTick>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d002      	beq.n	800b5e4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b5de:	4b16      	ldr	r3, [pc, #88]	@ (800b638 <xTaskResumeAll+0x130>)
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	3b01      	subs	r3, #1
 800b5e8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d1f1      	bne.n	800b5d4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b5f0:	4b12      	ldr	r3, [pc, #72]	@ (800b63c <xTaskResumeAll+0x134>)
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b5f6:	4b10      	ldr	r3, [pc, #64]	@ (800b638 <xTaskResumeAll+0x130>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d009      	beq.n	800b612 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b5fe:	2301      	movs	r3, #1
 800b600:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b602:	4b0f      	ldr	r3, [pc, #60]	@ (800b640 <xTaskResumeAll+0x138>)
 800b604:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b608:	601a      	str	r2, [r3, #0]
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b612:	f001 f8f3 	bl	800c7fc <vPortExitCritical>

	return xAlreadyYielded;
 800b616:	68bb      	ldr	r3, [r7, #8]
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3710      	adds	r7, #16
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	20001214 	.word	0x20001214
 800b624:	200011ec 	.word	0x200011ec
 800b628:	200011ac 	.word	0x200011ac
 800b62c:	200011f4 	.word	0x200011f4
 800b630:	20000d1c 	.word	0x20000d1c
 800b634:	20000d18 	.word	0x20000d18
 800b638:	20001200 	.word	0x20001200
 800b63c:	200011fc 	.word	0x200011fc
 800b640:	e000ed04 	.word	0xe000ed04

0800b644 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b64a:	4b05      	ldr	r3, [pc, #20]	@ (800b660 <xTaskGetTickCount+0x1c>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b650:	687b      	ldr	r3, [r7, #4]
}
 800b652:	4618      	mov	r0, r3
 800b654:	370c      	adds	r7, #12
 800b656:	46bd      	mov	sp, r7
 800b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65c:	4770      	bx	lr
 800b65e:	bf00      	nop
 800b660:	200011f0 	.word	0x200011f0

0800b664 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b086      	sub	sp, #24
 800b668:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b66a:	2300      	movs	r3, #0
 800b66c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b66e:	4b4f      	ldr	r3, [pc, #316]	@ (800b7ac <xTaskIncrementTick+0x148>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	f040 8090 	bne.w	800b798 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b678:	4b4d      	ldr	r3, [pc, #308]	@ (800b7b0 <xTaskIncrementTick+0x14c>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	3301      	adds	r3, #1
 800b67e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b680:	4a4b      	ldr	r2, [pc, #300]	@ (800b7b0 <xTaskIncrementTick+0x14c>)
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d121      	bne.n	800b6d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b68c:	4b49      	ldr	r3, [pc, #292]	@ (800b7b4 <xTaskIncrementTick+0x150>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d00b      	beq.n	800b6ae <xTaskIncrementTick+0x4a>
	__asm volatile
 800b696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b69a:	f383 8811 	msr	BASEPRI, r3
 800b69e:	f3bf 8f6f 	isb	sy
 800b6a2:	f3bf 8f4f 	dsb	sy
 800b6a6:	603b      	str	r3, [r7, #0]
}
 800b6a8:	bf00      	nop
 800b6aa:	bf00      	nop
 800b6ac:	e7fd      	b.n	800b6aa <xTaskIncrementTick+0x46>
 800b6ae:	4b41      	ldr	r3, [pc, #260]	@ (800b7b4 <xTaskIncrementTick+0x150>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	60fb      	str	r3, [r7, #12]
 800b6b4:	4b40      	ldr	r3, [pc, #256]	@ (800b7b8 <xTaskIncrementTick+0x154>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a3e      	ldr	r2, [pc, #248]	@ (800b7b4 <xTaskIncrementTick+0x150>)
 800b6ba:	6013      	str	r3, [r2, #0]
 800b6bc:	4a3e      	ldr	r2, [pc, #248]	@ (800b7b8 <xTaskIncrementTick+0x154>)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	6013      	str	r3, [r2, #0]
 800b6c2:	4b3e      	ldr	r3, [pc, #248]	@ (800b7bc <xTaskIncrementTick+0x158>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	4a3c      	ldr	r2, [pc, #240]	@ (800b7bc <xTaskIncrementTick+0x158>)
 800b6ca:	6013      	str	r3, [r2, #0]
 800b6cc:	f000 fad4 	bl	800bc78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b6d0:	4b3b      	ldr	r3, [pc, #236]	@ (800b7c0 <xTaskIncrementTick+0x15c>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	693a      	ldr	r2, [r7, #16]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d349      	bcc.n	800b76e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6da:	4b36      	ldr	r3, [pc, #216]	@ (800b7b4 <xTaskIncrementTick+0x150>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d104      	bne.n	800b6ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6e4:	4b36      	ldr	r3, [pc, #216]	@ (800b7c0 <xTaskIncrementTick+0x15c>)
 800b6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ea:	601a      	str	r2, [r3, #0]
					break;
 800b6ec:	e03f      	b.n	800b76e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6ee:	4b31      	ldr	r3, [pc, #196]	@ (800b7b4 <xTaskIncrementTick+0x150>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b6fe:	693a      	ldr	r2, [r7, #16]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	429a      	cmp	r2, r3
 800b704:	d203      	bcs.n	800b70e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b706:	4a2e      	ldr	r2, [pc, #184]	@ (800b7c0 <xTaskIncrementTick+0x15c>)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b70c:	e02f      	b.n	800b76e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	3304      	adds	r3, #4
 800b712:	4618      	mov	r0, r3
 800b714:	f7fe ff82 	bl	800a61c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d004      	beq.n	800b72a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	3318      	adds	r3, #24
 800b724:	4618      	mov	r0, r3
 800b726:	f7fe ff79 	bl	800a61c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b72e:	4b25      	ldr	r3, [pc, #148]	@ (800b7c4 <xTaskIncrementTick+0x160>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	429a      	cmp	r2, r3
 800b734:	d903      	bls.n	800b73e <xTaskIncrementTick+0xda>
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b73a:	4a22      	ldr	r2, [pc, #136]	@ (800b7c4 <xTaskIncrementTick+0x160>)
 800b73c:	6013      	str	r3, [r2, #0]
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b742:	4613      	mov	r3, r2
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	4413      	add	r3, r2
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	4a1f      	ldr	r2, [pc, #124]	@ (800b7c8 <xTaskIncrementTick+0x164>)
 800b74c:	441a      	add	r2, r3
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	3304      	adds	r3, #4
 800b752:	4619      	mov	r1, r3
 800b754:	4610      	mov	r0, r2
 800b756:	f7fe ff04 	bl	800a562 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b75e:	4b1b      	ldr	r3, [pc, #108]	@ (800b7cc <xTaskIncrementTick+0x168>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b764:	429a      	cmp	r2, r3
 800b766:	d3b8      	bcc.n	800b6da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b768:	2301      	movs	r3, #1
 800b76a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b76c:	e7b5      	b.n	800b6da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b76e:	4b17      	ldr	r3, [pc, #92]	@ (800b7cc <xTaskIncrementTick+0x168>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b774:	4914      	ldr	r1, [pc, #80]	@ (800b7c8 <xTaskIncrementTick+0x164>)
 800b776:	4613      	mov	r3, r2
 800b778:	009b      	lsls	r3, r3, #2
 800b77a:	4413      	add	r3, r2
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	440b      	add	r3, r1
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	2b01      	cmp	r3, #1
 800b784:	d901      	bls.n	800b78a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b786:	2301      	movs	r3, #1
 800b788:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b78a:	4b11      	ldr	r3, [pc, #68]	@ (800b7d0 <xTaskIncrementTick+0x16c>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d007      	beq.n	800b7a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b792:	2301      	movs	r3, #1
 800b794:	617b      	str	r3, [r7, #20]
 800b796:	e004      	b.n	800b7a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b798:	4b0e      	ldr	r3, [pc, #56]	@ (800b7d4 <xTaskIncrementTick+0x170>)
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	3301      	adds	r3, #1
 800b79e:	4a0d      	ldr	r2, [pc, #52]	@ (800b7d4 <xTaskIncrementTick+0x170>)
 800b7a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b7a2:	697b      	ldr	r3, [r7, #20]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3718      	adds	r7, #24
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	20001214 	.word	0x20001214
 800b7b0:	200011f0 	.word	0x200011f0
 800b7b4:	200011a4 	.word	0x200011a4
 800b7b8:	200011a8 	.word	0x200011a8
 800b7bc:	20001204 	.word	0x20001204
 800b7c0:	2000120c 	.word	0x2000120c
 800b7c4:	200011f4 	.word	0x200011f4
 800b7c8:	20000d1c 	.word	0x20000d1c
 800b7cc:	20000d18 	.word	0x20000d18
 800b7d0:	20001200 	.word	0x20001200
 800b7d4:	200011fc 	.word	0x200011fc

0800b7d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b085      	sub	sp, #20
 800b7dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b7de:	4b28      	ldr	r3, [pc, #160]	@ (800b880 <vTaskSwitchContext+0xa8>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d003      	beq.n	800b7ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b7e6:	4b27      	ldr	r3, [pc, #156]	@ (800b884 <vTaskSwitchContext+0xac>)
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b7ec:	e042      	b.n	800b874 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b7ee:	4b25      	ldr	r3, [pc, #148]	@ (800b884 <vTaskSwitchContext+0xac>)
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7f4:	4b24      	ldr	r3, [pc, #144]	@ (800b888 <vTaskSwitchContext+0xb0>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	60fb      	str	r3, [r7, #12]
 800b7fa:	e011      	b.n	800b820 <vTaskSwitchContext+0x48>
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d10b      	bne.n	800b81a <vTaskSwitchContext+0x42>
	__asm volatile
 800b802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b806:	f383 8811 	msr	BASEPRI, r3
 800b80a:	f3bf 8f6f 	isb	sy
 800b80e:	f3bf 8f4f 	dsb	sy
 800b812:	607b      	str	r3, [r7, #4]
}
 800b814:	bf00      	nop
 800b816:	bf00      	nop
 800b818:	e7fd      	b.n	800b816 <vTaskSwitchContext+0x3e>
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	3b01      	subs	r3, #1
 800b81e:	60fb      	str	r3, [r7, #12]
 800b820:	491a      	ldr	r1, [pc, #104]	@ (800b88c <vTaskSwitchContext+0xb4>)
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	4613      	mov	r3, r2
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	4413      	add	r3, r2
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	440b      	add	r3, r1
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d0e3      	beq.n	800b7fc <vTaskSwitchContext+0x24>
 800b834:	68fa      	ldr	r2, [r7, #12]
 800b836:	4613      	mov	r3, r2
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	4413      	add	r3, r2
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	4a13      	ldr	r2, [pc, #76]	@ (800b88c <vTaskSwitchContext+0xb4>)
 800b840:	4413      	add	r3, r2
 800b842:	60bb      	str	r3, [r7, #8]
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	685a      	ldr	r2, [r3, #4]
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	605a      	str	r2, [r3, #4]
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	685a      	ldr	r2, [r3, #4]
 800b852:	68bb      	ldr	r3, [r7, #8]
 800b854:	3308      	adds	r3, #8
 800b856:	429a      	cmp	r2, r3
 800b858:	d104      	bne.n	800b864 <vTaskSwitchContext+0x8c>
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	685a      	ldr	r2, [r3, #4]
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	605a      	str	r2, [r3, #4]
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	68db      	ldr	r3, [r3, #12]
 800b86a:	4a09      	ldr	r2, [pc, #36]	@ (800b890 <vTaskSwitchContext+0xb8>)
 800b86c:	6013      	str	r3, [r2, #0]
 800b86e:	4a06      	ldr	r2, [pc, #24]	@ (800b888 <vTaskSwitchContext+0xb0>)
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6013      	str	r3, [r2, #0]
}
 800b874:	bf00      	nop
 800b876:	3714      	adds	r7, #20
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr
 800b880:	20001214 	.word	0x20001214
 800b884:	20001200 	.word	0x20001200
 800b888:	200011f4 	.word	0x200011f4
 800b88c:	20000d1c 	.word	0x20000d1c
 800b890:	20000d18 	.word	0x20000d18

0800b894 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b084      	sub	sp, #16
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d10b      	bne.n	800b8bc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b8a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a8:	f383 8811 	msr	BASEPRI, r3
 800b8ac:	f3bf 8f6f 	isb	sy
 800b8b0:	f3bf 8f4f 	dsb	sy
 800b8b4:	60fb      	str	r3, [r7, #12]
}
 800b8b6:	bf00      	nop
 800b8b8:	bf00      	nop
 800b8ba:	e7fd      	b.n	800b8b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8bc:	4b07      	ldr	r3, [pc, #28]	@ (800b8dc <vTaskPlaceOnEventList+0x48>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	3318      	adds	r3, #24
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f7fe fe70 	bl	800a5aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b8ca:	2101      	movs	r1, #1
 800b8cc:	6838      	ldr	r0, [r7, #0]
 800b8ce:	f000 fa81 	bl	800bdd4 <prvAddCurrentTaskToDelayedList>
}
 800b8d2:	bf00      	nop
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	20000d18 	.word	0x20000d18

0800b8e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b086      	sub	sp, #24
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d10b      	bne.n	800b90a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b8f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f6:	f383 8811 	msr	BASEPRI, r3
 800b8fa:	f3bf 8f6f 	isb	sy
 800b8fe:	f3bf 8f4f 	dsb	sy
 800b902:	617b      	str	r3, [r7, #20]
}
 800b904:	bf00      	nop
 800b906:	bf00      	nop
 800b908:	e7fd      	b.n	800b906 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b90a:	4b0a      	ldr	r3, [pc, #40]	@ (800b934 <vTaskPlaceOnEventListRestricted+0x54>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	3318      	adds	r3, #24
 800b910:	4619      	mov	r1, r3
 800b912:	68f8      	ldr	r0, [r7, #12]
 800b914:	f7fe fe25 	bl	800a562 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d002      	beq.n	800b924 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b91e:	f04f 33ff 	mov.w	r3, #4294967295
 800b922:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b924:	6879      	ldr	r1, [r7, #4]
 800b926:	68b8      	ldr	r0, [r7, #8]
 800b928:	f000 fa54 	bl	800bdd4 <prvAddCurrentTaskToDelayedList>
	}
 800b92c:	bf00      	nop
 800b92e:	3718      	adds	r7, #24
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}
 800b934:	20000d18 	.word	0x20000d18

0800b938 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b086      	sub	sp, #24
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	68db      	ldr	r3, [r3, #12]
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d10b      	bne.n	800b966 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b952:	f383 8811 	msr	BASEPRI, r3
 800b956:	f3bf 8f6f 	isb	sy
 800b95a:	f3bf 8f4f 	dsb	sy
 800b95e:	60fb      	str	r3, [r7, #12]
}
 800b960:	bf00      	nop
 800b962:	bf00      	nop
 800b964:	e7fd      	b.n	800b962 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	3318      	adds	r3, #24
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7fe fe56 	bl	800a61c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b970:	4b1d      	ldr	r3, [pc, #116]	@ (800b9e8 <xTaskRemoveFromEventList+0xb0>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d11d      	bne.n	800b9b4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	3304      	adds	r3, #4
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7fe fe4d 	bl	800a61c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b986:	4b19      	ldr	r3, [pc, #100]	@ (800b9ec <xTaskRemoveFromEventList+0xb4>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d903      	bls.n	800b996 <xTaskRemoveFromEventList+0x5e>
 800b98e:	693b      	ldr	r3, [r7, #16]
 800b990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b992:	4a16      	ldr	r2, [pc, #88]	@ (800b9ec <xTaskRemoveFromEventList+0xb4>)
 800b994:	6013      	str	r3, [r2, #0]
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b99a:	4613      	mov	r3, r2
 800b99c:	009b      	lsls	r3, r3, #2
 800b99e:	4413      	add	r3, r2
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	4a13      	ldr	r2, [pc, #76]	@ (800b9f0 <xTaskRemoveFromEventList+0xb8>)
 800b9a4:	441a      	add	r2, r3
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	3304      	adds	r3, #4
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	4610      	mov	r0, r2
 800b9ae:	f7fe fdd8 	bl	800a562 <vListInsertEnd>
 800b9b2:	e005      	b.n	800b9c0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	3318      	adds	r3, #24
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	480e      	ldr	r0, [pc, #56]	@ (800b9f4 <xTaskRemoveFromEventList+0xbc>)
 800b9bc:	f7fe fdd1 	bl	800a562 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9c4:	4b0c      	ldr	r3, [pc, #48]	@ (800b9f8 <xTaskRemoveFromEventList+0xc0>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d905      	bls.n	800b9da <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b9d2:	4b0a      	ldr	r3, [pc, #40]	@ (800b9fc <xTaskRemoveFromEventList+0xc4>)
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	601a      	str	r2, [r3, #0]
 800b9d8:	e001      	b.n	800b9de <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b9de:	697b      	ldr	r3, [r7, #20]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3718      	adds	r7, #24
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	20001214 	.word	0x20001214
 800b9ec:	200011f4 	.word	0x200011f4
 800b9f0:	20000d1c 	.word	0x20000d1c
 800b9f4:	200011ac 	.word	0x200011ac
 800b9f8:	20000d18 	.word	0x20000d18
 800b9fc:	20001200 	.word	0x20001200

0800ba00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba08:	4b06      	ldr	r3, [pc, #24]	@ (800ba24 <vTaskInternalSetTimeOutState+0x24>)
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba10:	4b05      	ldr	r3, [pc, #20]	@ (800ba28 <vTaskInternalSetTimeOutState+0x28>)
 800ba12:	681a      	ldr	r2, [r3, #0]
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	605a      	str	r2, [r3, #4]
}
 800ba18:	bf00      	nop
 800ba1a:	370c      	adds	r7, #12
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr
 800ba24:	20001204 	.word	0x20001204
 800ba28:	200011f0 	.word	0x200011f0

0800ba2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b088      	sub	sp, #32
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d10b      	bne.n	800ba54 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ba3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba40:	f383 8811 	msr	BASEPRI, r3
 800ba44:	f3bf 8f6f 	isb	sy
 800ba48:	f3bf 8f4f 	dsb	sy
 800ba4c:	613b      	str	r3, [r7, #16]
}
 800ba4e:	bf00      	nop
 800ba50:	bf00      	nop
 800ba52:	e7fd      	b.n	800ba50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d10b      	bne.n	800ba72 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ba5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba5e:	f383 8811 	msr	BASEPRI, r3
 800ba62:	f3bf 8f6f 	isb	sy
 800ba66:	f3bf 8f4f 	dsb	sy
 800ba6a:	60fb      	str	r3, [r7, #12]
}
 800ba6c:	bf00      	nop
 800ba6e:	bf00      	nop
 800ba70:	e7fd      	b.n	800ba6e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ba72:	f000 fe91 	bl	800c798 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba76:	4b1d      	ldr	r3, [pc, #116]	@ (800baec <xTaskCheckForTimeOut+0xc0>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	69ba      	ldr	r2, [r7, #24]
 800ba82:	1ad3      	subs	r3, r2, r3
 800ba84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba8e:	d102      	bne.n	800ba96 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba90:	2300      	movs	r3, #0
 800ba92:	61fb      	str	r3, [r7, #28]
 800ba94:	e023      	b.n	800bade <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	4b15      	ldr	r3, [pc, #84]	@ (800baf0 <xTaskCheckForTimeOut+0xc4>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	429a      	cmp	r2, r3
 800baa0:	d007      	beq.n	800bab2 <xTaskCheckForTimeOut+0x86>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	69ba      	ldr	r2, [r7, #24]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d302      	bcc.n	800bab2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800baac:	2301      	movs	r3, #1
 800baae:	61fb      	str	r3, [r7, #28]
 800bab0:	e015      	b.n	800bade <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	697a      	ldr	r2, [r7, #20]
 800bab8:	429a      	cmp	r2, r3
 800baba:	d20b      	bcs.n	800bad4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	1ad2      	subs	r2, r2, r3
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f7ff ff99 	bl	800ba00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bace:	2300      	movs	r3, #0
 800bad0:	61fb      	str	r3, [r7, #28]
 800bad2:	e004      	b.n	800bade <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	2200      	movs	r2, #0
 800bad8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bada:	2301      	movs	r3, #1
 800badc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bade:	f000 fe8d 	bl	800c7fc <vPortExitCritical>

	return xReturn;
 800bae2:	69fb      	ldr	r3, [r7, #28]
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3720      	adds	r7, #32
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	200011f0 	.word	0x200011f0
 800baf0:	20001204 	.word	0x20001204

0800baf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800baf4:	b480      	push	{r7}
 800baf6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800baf8:	4b03      	ldr	r3, [pc, #12]	@ (800bb08 <vTaskMissedYield+0x14>)
 800bafa:	2201      	movs	r2, #1
 800bafc:	601a      	str	r2, [r3, #0]
}
 800bafe:	bf00      	nop
 800bb00:	46bd      	mov	sp, r7
 800bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb06:	4770      	bx	lr
 800bb08:	20001200 	.word	0x20001200

0800bb0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb14:	f000 f852 	bl	800bbbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb18:	4b06      	ldr	r3, [pc, #24]	@ (800bb34 <prvIdleTask+0x28>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d9f9      	bls.n	800bb14 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb20:	4b05      	ldr	r3, [pc, #20]	@ (800bb38 <prvIdleTask+0x2c>)
 800bb22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb26:	601a      	str	r2, [r3, #0]
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bb30:	e7f0      	b.n	800bb14 <prvIdleTask+0x8>
 800bb32:	bf00      	nop
 800bb34:	20000d1c 	.word	0x20000d1c
 800bb38:	e000ed04 	.word	0xe000ed04

0800bb3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb42:	2300      	movs	r3, #0
 800bb44:	607b      	str	r3, [r7, #4]
 800bb46:	e00c      	b.n	800bb62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	4613      	mov	r3, r2
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	4413      	add	r3, r2
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	4a12      	ldr	r2, [pc, #72]	@ (800bb9c <prvInitialiseTaskLists+0x60>)
 800bb54:	4413      	add	r3, r2
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7fe fcd6 	bl	800a508 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	3301      	adds	r3, #1
 800bb60:	607b      	str	r3, [r7, #4]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2b37      	cmp	r3, #55	@ 0x37
 800bb66:	d9ef      	bls.n	800bb48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb68:	480d      	ldr	r0, [pc, #52]	@ (800bba0 <prvInitialiseTaskLists+0x64>)
 800bb6a:	f7fe fccd 	bl	800a508 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb6e:	480d      	ldr	r0, [pc, #52]	@ (800bba4 <prvInitialiseTaskLists+0x68>)
 800bb70:	f7fe fcca 	bl	800a508 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb74:	480c      	ldr	r0, [pc, #48]	@ (800bba8 <prvInitialiseTaskLists+0x6c>)
 800bb76:	f7fe fcc7 	bl	800a508 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb7a:	480c      	ldr	r0, [pc, #48]	@ (800bbac <prvInitialiseTaskLists+0x70>)
 800bb7c:	f7fe fcc4 	bl	800a508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb80:	480b      	ldr	r0, [pc, #44]	@ (800bbb0 <prvInitialiseTaskLists+0x74>)
 800bb82:	f7fe fcc1 	bl	800a508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb86:	4b0b      	ldr	r3, [pc, #44]	@ (800bbb4 <prvInitialiseTaskLists+0x78>)
 800bb88:	4a05      	ldr	r2, [pc, #20]	@ (800bba0 <prvInitialiseTaskLists+0x64>)
 800bb8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb8c:	4b0a      	ldr	r3, [pc, #40]	@ (800bbb8 <prvInitialiseTaskLists+0x7c>)
 800bb8e:	4a05      	ldr	r2, [pc, #20]	@ (800bba4 <prvInitialiseTaskLists+0x68>)
 800bb90:	601a      	str	r2, [r3, #0]
}
 800bb92:	bf00      	nop
 800bb94:	3708      	adds	r7, #8
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	20000d1c 	.word	0x20000d1c
 800bba0:	2000117c 	.word	0x2000117c
 800bba4:	20001190 	.word	0x20001190
 800bba8:	200011ac 	.word	0x200011ac
 800bbac:	200011c0 	.word	0x200011c0
 800bbb0:	200011d8 	.word	0x200011d8
 800bbb4:	200011a4 	.word	0x200011a4
 800bbb8:	200011a8 	.word	0x200011a8

0800bbbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbc2:	e019      	b.n	800bbf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bbc4:	f000 fde8 	bl	800c798 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbc8:	4b10      	ldr	r3, [pc, #64]	@ (800bc0c <prvCheckTasksWaitingTermination+0x50>)
 800bbca:	68db      	ldr	r3, [r3, #12]
 800bbcc:	68db      	ldr	r3, [r3, #12]
 800bbce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	3304      	adds	r3, #4
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f7fe fd21 	bl	800a61c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bbda:	4b0d      	ldr	r3, [pc, #52]	@ (800bc10 <prvCheckTasksWaitingTermination+0x54>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	3b01      	subs	r3, #1
 800bbe0:	4a0b      	ldr	r2, [pc, #44]	@ (800bc10 <prvCheckTasksWaitingTermination+0x54>)
 800bbe2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bbe4:	4b0b      	ldr	r3, [pc, #44]	@ (800bc14 <prvCheckTasksWaitingTermination+0x58>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	3b01      	subs	r3, #1
 800bbea:	4a0a      	ldr	r2, [pc, #40]	@ (800bc14 <prvCheckTasksWaitingTermination+0x58>)
 800bbec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bbee:	f000 fe05 	bl	800c7fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f000 f810 	bl	800bc18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbf8:	4b06      	ldr	r3, [pc, #24]	@ (800bc14 <prvCheckTasksWaitingTermination+0x58>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d1e1      	bne.n	800bbc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc00:	bf00      	nop
 800bc02:	bf00      	nop
 800bc04:	3708      	adds	r7, #8
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	200011c0 	.word	0x200011c0
 800bc10:	200011ec 	.word	0x200011ec
 800bc14:	200011d4 	.word	0x200011d4

0800bc18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b084      	sub	sp, #16
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d108      	bne.n	800bc3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f000 ffa2 	bl	800cb78 <vPortFree>
				vPortFree( pxTCB );
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 ff9f 	bl	800cb78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc3a:	e019      	b.n	800bc70 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d103      	bne.n	800bc4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 ff96 	bl	800cb78 <vPortFree>
	}
 800bc4c:	e010      	b.n	800bc70 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bc54:	2b02      	cmp	r3, #2
 800bc56:	d00b      	beq.n	800bc70 <prvDeleteTCB+0x58>
	__asm volatile
 800bc58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc5c:	f383 8811 	msr	BASEPRI, r3
 800bc60:	f3bf 8f6f 	isb	sy
 800bc64:	f3bf 8f4f 	dsb	sy
 800bc68:	60fb      	str	r3, [r7, #12]
}
 800bc6a:	bf00      	nop
 800bc6c:	bf00      	nop
 800bc6e:	e7fd      	b.n	800bc6c <prvDeleteTCB+0x54>
	}
 800bc70:	bf00      	nop
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc7e:	4b0c      	ldr	r3, [pc, #48]	@ (800bcb0 <prvResetNextTaskUnblockTime+0x38>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d104      	bne.n	800bc92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc88:	4b0a      	ldr	r3, [pc, #40]	@ (800bcb4 <prvResetNextTaskUnblockTime+0x3c>)
 800bc8a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc90:	e008      	b.n	800bca4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc92:	4b07      	ldr	r3, [pc, #28]	@ (800bcb0 <prvResetNextTaskUnblockTime+0x38>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	4a04      	ldr	r2, [pc, #16]	@ (800bcb4 <prvResetNextTaskUnblockTime+0x3c>)
 800bca2:	6013      	str	r3, [r2, #0]
}
 800bca4:	bf00      	nop
 800bca6:	370c      	adds	r7, #12
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr
 800bcb0:	200011a4 	.word	0x200011a4
 800bcb4:	2000120c 	.word	0x2000120c

0800bcb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bcb8:	b480      	push	{r7}
 800bcba:	b083      	sub	sp, #12
 800bcbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bcbe:	4b0b      	ldr	r3, [pc, #44]	@ (800bcec <xTaskGetSchedulerState+0x34>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d102      	bne.n	800bccc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	607b      	str	r3, [r7, #4]
 800bcca:	e008      	b.n	800bcde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bccc:	4b08      	ldr	r3, [pc, #32]	@ (800bcf0 <xTaskGetSchedulerState+0x38>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d102      	bne.n	800bcda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bcd4:	2302      	movs	r3, #2
 800bcd6:	607b      	str	r3, [r7, #4]
 800bcd8:	e001      	b.n	800bcde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bcde:	687b      	ldr	r3, [r7, #4]
	}
 800bce0:	4618      	mov	r0, r3
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr
 800bcec:	200011f8 	.word	0x200011f8
 800bcf0:	20001214 	.word	0x20001214

0800bcf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b086      	sub	sp, #24
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bd00:	2300      	movs	r3, #0
 800bd02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d058      	beq.n	800bdbc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bd0a:	4b2f      	ldr	r3, [pc, #188]	@ (800bdc8 <xTaskPriorityDisinherit+0xd4>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	693a      	ldr	r2, [r7, #16]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d00b      	beq.n	800bd2c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bd14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd18:	f383 8811 	msr	BASEPRI, r3
 800bd1c:	f3bf 8f6f 	isb	sy
 800bd20:	f3bf 8f4f 	dsb	sy
 800bd24:	60fb      	str	r3, [r7, #12]
}
 800bd26:	bf00      	nop
 800bd28:	bf00      	nop
 800bd2a:	e7fd      	b.n	800bd28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d10b      	bne.n	800bd4c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bd34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd38:	f383 8811 	msr	BASEPRI, r3
 800bd3c:	f3bf 8f6f 	isb	sy
 800bd40:	f3bf 8f4f 	dsb	sy
 800bd44:	60bb      	str	r3, [r7, #8]
}
 800bd46:	bf00      	nop
 800bd48:	bf00      	nop
 800bd4a:	e7fd      	b.n	800bd48 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd50:	1e5a      	subs	r2, r3, #1
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d02c      	beq.n	800bdbc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d128      	bne.n	800bdbc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd6a:	693b      	ldr	r3, [r7, #16]
 800bd6c:	3304      	adds	r3, #4
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7fe fc54 	bl	800a61c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd80:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd8c:	4b0f      	ldr	r3, [pc, #60]	@ (800bdcc <xTaskPriorityDisinherit+0xd8>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d903      	bls.n	800bd9c <xTaskPriorityDisinherit+0xa8>
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd98:	4a0c      	ldr	r2, [pc, #48]	@ (800bdcc <xTaskPriorityDisinherit+0xd8>)
 800bd9a:	6013      	str	r3, [r2, #0]
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bda0:	4613      	mov	r3, r2
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	4413      	add	r3, r2
 800bda6:	009b      	lsls	r3, r3, #2
 800bda8:	4a09      	ldr	r2, [pc, #36]	@ (800bdd0 <xTaskPriorityDisinherit+0xdc>)
 800bdaa:	441a      	add	r2, r3
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	3304      	adds	r3, #4
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	4610      	mov	r0, r2
 800bdb4:	f7fe fbd5 	bl	800a562 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bdb8:	2301      	movs	r3, #1
 800bdba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bdbc:	697b      	ldr	r3, [r7, #20]
	}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3718      	adds	r7, #24
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}
 800bdc6:	bf00      	nop
 800bdc8:	20000d18 	.word	0x20000d18
 800bdcc:	200011f4 	.word	0x200011f4
 800bdd0:	20000d1c 	.word	0x20000d1c

0800bdd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bdde:	4b21      	ldr	r3, [pc, #132]	@ (800be64 <prvAddCurrentTaskToDelayedList+0x90>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bde4:	4b20      	ldr	r3, [pc, #128]	@ (800be68 <prvAddCurrentTaskToDelayedList+0x94>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	3304      	adds	r3, #4
 800bdea:	4618      	mov	r0, r3
 800bdec:	f7fe fc16 	bl	800a61c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf6:	d10a      	bne.n	800be0e <prvAddCurrentTaskToDelayedList+0x3a>
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d007      	beq.n	800be0e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdfe:	4b1a      	ldr	r3, [pc, #104]	@ (800be68 <prvAddCurrentTaskToDelayedList+0x94>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	3304      	adds	r3, #4
 800be04:	4619      	mov	r1, r3
 800be06:	4819      	ldr	r0, [pc, #100]	@ (800be6c <prvAddCurrentTaskToDelayedList+0x98>)
 800be08:	f7fe fbab 	bl	800a562 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800be0c:	e026      	b.n	800be5c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	4413      	add	r3, r2
 800be14:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800be16:	4b14      	ldr	r3, [pc, #80]	@ (800be68 <prvAddCurrentTaskToDelayedList+0x94>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	68ba      	ldr	r2, [r7, #8]
 800be1c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800be1e:	68ba      	ldr	r2, [r7, #8]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	429a      	cmp	r2, r3
 800be24:	d209      	bcs.n	800be3a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be26:	4b12      	ldr	r3, [pc, #72]	@ (800be70 <prvAddCurrentTaskToDelayedList+0x9c>)
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	4b0f      	ldr	r3, [pc, #60]	@ (800be68 <prvAddCurrentTaskToDelayedList+0x94>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	3304      	adds	r3, #4
 800be30:	4619      	mov	r1, r3
 800be32:	4610      	mov	r0, r2
 800be34:	f7fe fbb9 	bl	800a5aa <vListInsert>
}
 800be38:	e010      	b.n	800be5c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800be3a:	4b0e      	ldr	r3, [pc, #56]	@ (800be74 <prvAddCurrentTaskToDelayedList+0xa0>)
 800be3c:	681a      	ldr	r2, [r3, #0]
 800be3e:	4b0a      	ldr	r3, [pc, #40]	@ (800be68 <prvAddCurrentTaskToDelayedList+0x94>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	3304      	adds	r3, #4
 800be44:	4619      	mov	r1, r3
 800be46:	4610      	mov	r0, r2
 800be48:	f7fe fbaf 	bl	800a5aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be4c:	4b0a      	ldr	r3, [pc, #40]	@ (800be78 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	68ba      	ldr	r2, [r7, #8]
 800be52:	429a      	cmp	r2, r3
 800be54:	d202      	bcs.n	800be5c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800be56:	4a08      	ldr	r2, [pc, #32]	@ (800be78 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	6013      	str	r3, [r2, #0]
}
 800be5c:	bf00      	nop
 800be5e:	3710      	adds	r7, #16
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}
 800be64:	200011f0 	.word	0x200011f0
 800be68:	20000d18 	.word	0x20000d18
 800be6c:	200011d8 	.word	0x200011d8
 800be70:	200011a8 	.word	0x200011a8
 800be74:	200011a4 	.word	0x200011a4
 800be78:	2000120c 	.word	0x2000120c

0800be7c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b08a      	sub	sp, #40	@ 0x28
 800be80:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800be82:	2300      	movs	r3, #0
 800be84:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800be86:	f000 fb13 	bl	800c4b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800be8a:	4b1d      	ldr	r3, [pc, #116]	@ (800bf00 <xTimerCreateTimerTask+0x84>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d021      	beq.n	800bed6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800be92:	2300      	movs	r3, #0
 800be94:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800be96:	2300      	movs	r3, #0
 800be98:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800be9a:	1d3a      	adds	r2, r7, #4
 800be9c:	f107 0108 	add.w	r1, r7, #8
 800bea0:	f107 030c 	add.w	r3, r7, #12
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7fe fb15 	bl	800a4d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800beaa:	6879      	ldr	r1, [r7, #4]
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	68fa      	ldr	r2, [r7, #12]
 800beb0:	9202      	str	r2, [sp, #8]
 800beb2:	9301      	str	r3, [sp, #4]
 800beb4:	2302      	movs	r3, #2
 800beb6:	9300      	str	r3, [sp, #0]
 800beb8:	2300      	movs	r3, #0
 800beba:	460a      	mov	r2, r1
 800bebc:	4911      	ldr	r1, [pc, #68]	@ (800bf04 <xTimerCreateTimerTask+0x88>)
 800bebe:	4812      	ldr	r0, [pc, #72]	@ (800bf08 <xTimerCreateTimerTask+0x8c>)
 800bec0:	f7ff f8d0 	bl	800b064 <xTaskCreateStatic>
 800bec4:	4603      	mov	r3, r0
 800bec6:	4a11      	ldr	r2, [pc, #68]	@ (800bf0c <xTimerCreateTimerTask+0x90>)
 800bec8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800beca:	4b10      	ldr	r3, [pc, #64]	@ (800bf0c <xTimerCreateTimerTask+0x90>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d001      	beq.n	800bed6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bed2:	2301      	movs	r3, #1
 800bed4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d10b      	bne.n	800bef4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bedc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bee0:	f383 8811 	msr	BASEPRI, r3
 800bee4:	f3bf 8f6f 	isb	sy
 800bee8:	f3bf 8f4f 	dsb	sy
 800beec:	613b      	str	r3, [r7, #16]
}
 800beee:	bf00      	nop
 800bef0:	bf00      	nop
 800bef2:	e7fd      	b.n	800bef0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bef4:	697b      	ldr	r3, [r7, #20]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3718      	adds	r7, #24
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop
 800bf00:	20001248 	.word	0x20001248
 800bf04:	0801145c 	.word	0x0801145c
 800bf08:	0800c049 	.word	0x0800c049
 800bf0c:	2000124c 	.word	0x2000124c

0800bf10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b08a      	sub	sp, #40	@ 0x28
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	60b9      	str	r1, [r7, #8]
 800bf1a:	607a      	str	r2, [r7, #4]
 800bf1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d10b      	bne.n	800bf40 <xTimerGenericCommand+0x30>
	__asm volatile
 800bf28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf2c:	f383 8811 	msr	BASEPRI, r3
 800bf30:	f3bf 8f6f 	isb	sy
 800bf34:	f3bf 8f4f 	dsb	sy
 800bf38:	623b      	str	r3, [r7, #32]
}
 800bf3a:	bf00      	nop
 800bf3c:	bf00      	nop
 800bf3e:	e7fd      	b.n	800bf3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bf40:	4b19      	ldr	r3, [pc, #100]	@ (800bfa8 <xTimerGenericCommand+0x98>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d02a      	beq.n	800bf9e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	2b05      	cmp	r3, #5
 800bf58:	dc18      	bgt.n	800bf8c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bf5a:	f7ff fead 	bl	800bcb8 <xTaskGetSchedulerState>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b02      	cmp	r3, #2
 800bf62:	d109      	bne.n	800bf78 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bf64:	4b10      	ldr	r3, [pc, #64]	@ (800bfa8 <xTimerGenericCommand+0x98>)
 800bf66:	6818      	ldr	r0, [r3, #0]
 800bf68:	f107 0110 	add.w	r1, r7, #16
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf70:	f7fe fc88 	bl	800a884 <xQueueGenericSend>
 800bf74:	6278      	str	r0, [r7, #36]	@ 0x24
 800bf76:	e012      	b.n	800bf9e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bf78:	4b0b      	ldr	r3, [pc, #44]	@ (800bfa8 <xTimerGenericCommand+0x98>)
 800bf7a:	6818      	ldr	r0, [r3, #0]
 800bf7c:	f107 0110 	add.w	r1, r7, #16
 800bf80:	2300      	movs	r3, #0
 800bf82:	2200      	movs	r2, #0
 800bf84:	f7fe fc7e 	bl	800a884 <xQueueGenericSend>
 800bf88:	6278      	str	r0, [r7, #36]	@ 0x24
 800bf8a:	e008      	b.n	800bf9e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bf8c:	4b06      	ldr	r3, [pc, #24]	@ (800bfa8 <xTimerGenericCommand+0x98>)
 800bf8e:	6818      	ldr	r0, [r3, #0]
 800bf90:	f107 0110 	add.w	r1, r7, #16
 800bf94:	2300      	movs	r3, #0
 800bf96:	683a      	ldr	r2, [r7, #0]
 800bf98:	f7fe fd76 	bl	800aa88 <xQueueGenericSendFromISR>
 800bf9c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3728      	adds	r7, #40	@ 0x28
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}
 800bfa8:	20001248 	.word	0x20001248

0800bfac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b088      	sub	sp, #32
 800bfb0:	af02      	add	r7, sp, #8
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfb6:	4b23      	ldr	r3, [pc, #140]	@ (800c044 <prvProcessExpiredTimer+0x98>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	68db      	ldr	r3, [r3, #12]
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	3304      	adds	r3, #4
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7fe fb29 	bl	800a61c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfd0:	f003 0304 	and.w	r3, r3, #4
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d023      	beq.n	800c020 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	699a      	ldr	r2, [r3, #24]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	18d1      	adds	r1, r2, r3
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	683a      	ldr	r2, [r7, #0]
 800bfe4:	6978      	ldr	r0, [r7, #20]
 800bfe6:	f000 f8d5 	bl	800c194 <prvInsertTimerInActiveList>
 800bfea:	4603      	mov	r3, r0
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d020      	beq.n	800c032 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bff0:	2300      	movs	r3, #0
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	2300      	movs	r3, #0
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	2100      	movs	r1, #0
 800bffa:	6978      	ldr	r0, [r7, #20]
 800bffc:	f7ff ff88 	bl	800bf10 <xTimerGenericCommand>
 800c000:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d114      	bne.n	800c032 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c00c:	f383 8811 	msr	BASEPRI, r3
 800c010:	f3bf 8f6f 	isb	sy
 800c014:	f3bf 8f4f 	dsb	sy
 800c018:	60fb      	str	r3, [r7, #12]
}
 800c01a:	bf00      	nop
 800c01c:	bf00      	nop
 800c01e:	e7fd      	b.n	800c01c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c026:	f023 0301 	bic.w	r3, r3, #1
 800c02a:	b2da      	uxtb	r2, r3
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	6a1b      	ldr	r3, [r3, #32]
 800c036:	6978      	ldr	r0, [r7, #20]
 800c038:	4798      	blx	r3
}
 800c03a:	bf00      	nop
 800c03c:	3718      	adds	r7, #24
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	20001240 	.word	0x20001240

0800c048 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b084      	sub	sp, #16
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c050:	f107 0308 	add.w	r3, r7, #8
 800c054:	4618      	mov	r0, r3
 800c056:	f000 f859 	bl	800c10c <prvGetNextExpireTime>
 800c05a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	4619      	mov	r1, r3
 800c060:	68f8      	ldr	r0, [r7, #12]
 800c062:	f000 f805 	bl	800c070 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c066:	f000 f8d7 	bl	800c218 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c06a:	bf00      	nop
 800c06c:	e7f0      	b.n	800c050 <prvTimerTask+0x8>
	...

0800c070 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c07a:	f7ff fa37 	bl	800b4ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c07e:	f107 0308 	add.w	r3, r7, #8
 800c082:	4618      	mov	r0, r3
 800c084:	f000 f866 	bl	800c154 <prvSampleTimeNow>
 800c088:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d130      	bne.n	800c0f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c090:	683b      	ldr	r3, [r7, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d10a      	bne.n	800c0ac <prvProcessTimerOrBlockTask+0x3c>
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d806      	bhi.n	800c0ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c09e:	f7ff fa33 	bl	800b508 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c0a2:	68f9      	ldr	r1, [r7, #12]
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f7ff ff81 	bl	800bfac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c0aa:	e024      	b.n	800c0f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d008      	beq.n	800c0c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c0b2:	4b13      	ldr	r3, [pc, #76]	@ (800c100 <prvProcessTimerOrBlockTask+0x90>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d101      	bne.n	800c0c0 <prvProcessTimerOrBlockTask+0x50>
 800c0bc:	2301      	movs	r3, #1
 800c0be:	e000      	b.n	800c0c2 <prvProcessTimerOrBlockTask+0x52>
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c0c4:	4b0f      	ldr	r3, [pc, #60]	@ (800c104 <prvProcessTimerOrBlockTask+0x94>)
 800c0c6:	6818      	ldr	r0, [r3, #0]
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	1ad3      	subs	r3, r2, r3
 800c0ce:	683a      	ldr	r2, [r7, #0]
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	f7fe ff93 	bl	800affc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c0d6:	f7ff fa17 	bl	800b508 <xTaskResumeAll>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d10a      	bne.n	800c0f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c0e0:	4b09      	ldr	r3, [pc, #36]	@ (800c108 <prvProcessTimerOrBlockTask+0x98>)
 800c0e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0e6:	601a      	str	r2, [r3, #0]
 800c0e8:	f3bf 8f4f 	dsb	sy
 800c0ec:	f3bf 8f6f 	isb	sy
}
 800c0f0:	e001      	b.n	800c0f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c0f2:	f7ff fa09 	bl	800b508 <xTaskResumeAll>
}
 800c0f6:	bf00      	nop
 800c0f8:	3710      	adds	r7, #16
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop
 800c100:	20001244 	.word	0x20001244
 800c104:	20001248 	.word	0x20001248
 800c108:	e000ed04 	.word	0xe000ed04

0800c10c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c10c:	b480      	push	{r7}
 800c10e:	b085      	sub	sp, #20
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c114:	4b0e      	ldr	r3, [pc, #56]	@ (800c150 <prvGetNextExpireTime+0x44>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d101      	bne.n	800c122 <prvGetNextExpireTime+0x16>
 800c11e:	2201      	movs	r2, #1
 800c120:	e000      	b.n	800c124 <prvGetNextExpireTime+0x18>
 800c122:	2200      	movs	r2, #0
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d105      	bne.n	800c13c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c130:	4b07      	ldr	r3, [pc, #28]	@ (800c150 <prvGetNextExpireTime+0x44>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	68db      	ldr	r3, [r3, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	60fb      	str	r3, [r7, #12]
 800c13a:	e001      	b.n	800c140 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c13c:	2300      	movs	r3, #0
 800c13e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c140:	68fb      	ldr	r3, [r7, #12]
}
 800c142:	4618      	mov	r0, r3
 800c144:	3714      	adds	r7, #20
 800c146:	46bd      	mov	sp, r7
 800c148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14c:	4770      	bx	lr
 800c14e:	bf00      	nop
 800c150:	20001240 	.word	0x20001240

0800c154 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c15c:	f7ff fa72 	bl	800b644 <xTaskGetTickCount>
 800c160:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c162:	4b0b      	ldr	r3, [pc, #44]	@ (800c190 <prvSampleTimeNow+0x3c>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	68fa      	ldr	r2, [r7, #12]
 800c168:	429a      	cmp	r2, r3
 800c16a:	d205      	bcs.n	800c178 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c16c:	f000 f93a 	bl	800c3e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2201      	movs	r2, #1
 800c174:	601a      	str	r2, [r3, #0]
 800c176:	e002      	b.n	800c17e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2200      	movs	r2, #0
 800c17c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c17e:	4a04      	ldr	r2, [pc, #16]	@ (800c190 <prvSampleTimeNow+0x3c>)
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c184:	68fb      	ldr	r3, [r7, #12]
}
 800c186:	4618      	mov	r0, r3
 800c188:	3710      	adds	r7, #16
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	20001250 	.word	0x20001250

0800c194 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b086      	sub	sp, #24
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	607a      	str	r2, [r7, #4]
 800c1a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	68ba      	ldr	r2, [r7, #8]
 800c1aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	68fa      	ldr	r2, [r7, #12]
 800c1b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c1b2:	68ba      	ldr	r2, [r7, #8]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d812      	bhi.n	800c1e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	1ad2      	subs	r2, r2, r3
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	699b      	ldr	r3, [r3, #24]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d302      	bcc.n	800c1ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	617b      	str	r3, [r7, #20]
 800c1cc:	e01b      	b.n	800c206 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c1ce:	4b10      	ldr	r3, [pc, #64]	@ (800c210 <prvInsertTimerInActiveList+0x7c>)
 800c1d0:	681a      	ldr	r2, [r3, #0]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	3304      	adds	r3, #4
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	4610      	mov	r0, r2
 800c1da:	f7fe f9e6 	bl	800a5aa <vListInsert>
 800c1de:	e012      	b.n	800c206 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d206      	bcs.n	800c1f6 <prvInsertTimerInActiveList+0x62>
 800c1e8:	68ba      	ldr	r2, [r7, #8]
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d302      	bcc.n	800c1f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	617b      	str	r3, [r7, #20]
 800c1f4:	e007      	b.n	800c206 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1f6:	4b07      	ldr	r3, [pc, #28]	@ (800c214 <prvInsertTimerInActiveList+0x80>)
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	3304      	adds	r3, #4
 800c1fe:	4619      	mov	r1, r3
 800c200:	4610      	mov	r0, r2
 800c202:	f7fe f9d2 	bl	800a5aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c206:	697b      	ldr	r3, [r7, #20]
}
 800c208:	4618      	mov	r0, r3
 800c20a:	3718      	adds	r7, #24
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}
 800c210:	20001244 	.word	0x20001244
 800c214:	20001240 	.word	0x20001240

0800c218 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b08e      	sub	sp, #56	@ 0x38
 800c21c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c21e:	e0ce      	b.n	800c3be <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2b00      	cmp	r3, #0
 800c224:	da19      	bge.n	800c25a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c226:	1d3b      	adds	r3, r7, #4
 800c228:	3304      	adds	r3, #4
 800c22a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c22c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d10b      	bne.n	800c24a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c236:	f383 8811 	msr	BASEPRI, r3
 800c23a:	f3bf 8f6f 	isb	sy
 800c23e:	f3bf 8f4f 	dsb	sy
 800c242:	61fb      	str	r3, [r7, #28]
}
 800c244:	bf00      	nop
 800c246:	bf00      	nop
 800c248:	e7fd      	b.n	800c246 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c250:	6850      	ldr	r0, [r2, #4]
 800c252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c254:	6892      	ldr	r2, [r2, #8]
 800c256:	4611      	mov	r1, r2
 800c258:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	f2c0 80ae 	blt.w	800c3be <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c268:	695b      	ldr	r3, [r3, #20]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d004      	beq.n	800c278 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c26e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c270:	3304      	adds	r3, #4
 800c272:	4618      	mov	r0, r3
 800c274:	f7fe f9d2 	bl	800a61c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c278:	463b      	mov	r3, r7
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7ff ff6a 	bl	800c154 <prvSampleTimeNow>
 800c280:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2b09      	cmp	r3, #9
 800c286:	f200 8097 	bhi.w	800c3b8 <prvProcessReceivedCommands+0x1a0>
 800c28a:	a201      	add	r2, pc, #4	@ (adr r2, 800c290 <prvProcessReceivedCommands+0x78>)
 800c28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c290:	0800c2b9 	.word	0x0800c2b9
 800c294:	0800c2b9 	.word	0x0800c2b9
 800c298:	0800c2b9 	.word	0x0800c2b9
 800c29c:	0800c32f 	.word	0x0800c32f
 800c2a0:	0800c343 	.word	0x0800c343
 800c2a4:	0800c38f 	.word	0x0800c38f
 800c2a8:	0800c2b9 	.word	0x0800c2b9
 800c2ac:	0800c2b9 	.word	0x0800c2b9
 800c2b0:	0800c32f 	.word	0x0800c32f
 800c2b4:	0800c343 	.word	0x0800c343
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c2b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2be:	f043 0301 	orr.w	r3, r3, #1
 800c2c2:	b2da      	uxtb	r2, r3
 800c2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c2ca:	68ba      	ldr	r2, [r7, #8]
 800c2cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ce:	699b      	ldr	r3, [r3, #24]
 800c2d0:	18d1      	adds	r1, r2, r3
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c2d8:	f7ff ff5c 	bl	800c194 <prvInsertTimerInActiveList>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d06c      	beq.n	800c3bc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2e4:	6a1b      	ldr	r3, [r3, #32]
 800c2e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c2e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2f0:	f003 0304 	and.w	r3, r3, #4
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d061      	beq.n	800c3bc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c2f8:	68ba      	ldr	r2, [r7, #8]
 800c2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2fc:	699b      	ldr	r3, [r3, #24]
 800c2fe:	441a      	add	r2, r3
 800c300:	2300      	movs	r3, #0
 800c302:	9300      	str	r3, [sp, #0]
 800c304:	2300      	movs	r3, #0
 800c306:	2100      	movs	r1, #0
 800c308:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c30a:	f7ff fe01 	bl	800bf10 <xTimerGenericCommand>
 800c30e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c310:	6a3b      	ldr	r3, [r7, #32]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d152      	bne.n	800c3bc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c31a:	f383 8811 	msr	BASEPRI, r3
 800c31e:	f3bf 8f6f 	isb	sy
 800c322:	f3bf 8f4f 	dsb	sy
 800c326:	61bb      	str	r3, [r7, #24]
}
 800c328:	bf00      	nop
 800c32a:	bf00      	nop
 800c32c:	e7fd      	b.n	800c32a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c32e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c330:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c334:	f023 0301 	bic.w	r3, r3, #1
 800c338:	b2da      	uxtb	r2, r3
 800c33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c33c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c340:	e03d      	b.n	800c3be <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c344:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c348:	f043 0301 	orr.w	r3, r3, #1
 800c34c:	b2da      	uxtb	r2, r3
 800c34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c350:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c354:	68ba      	ldr	r2, [r7, #8]
 800c356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c358:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c35a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c35c:	699b      	ldr	r3, [r3, #24]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d10b      	bne.n	800c37a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c366:	f383 8811 	msr	BASEPRI, r3
 800c36a:	f3bf 8f6f 	isb	sy
 800c36e:	f3bf 8f4f 	dsb	sy
 800c372:	617b      	str	r3, [r7, #20]
}
 800c374:	bf00      	nop
 800c376:	bf00      	nop
 800c378:	e7fd      	b.n	800c376 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c37c:	699a      	ldr	r2, [r3, #24]
 800c37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c380:	18d1      	adds	r1, r2, r3
 800c382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c386:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c388:	f7ff ff04 	bl	800c194 <prvInsertTimerInActiveList>
					break;
 800c38c:	e017      	b.n	800c3be <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c390:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c394:	f003 0302 	and.w	r3, r3, #2
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d103      	bne.n	800c3a4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c39c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c39e:	f000 fbeb 	bl	800cb78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c3a2:	e00c      	b.n	800c3be <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c3a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3aa:	f023 0301 	bic.w	r3, r3, #1
 800c3ae:	b2da      	uxtb	r2, r3
 800c3b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c3b6:	e002      	b.n	800c3be <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c3b8:	bf00      	nop
 800c3ba:	e000      	b.n	800c3be <prvProcessReceivedCommands+0x1a6>
					break;
 800c3bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c3be:	4b08      	ldr	r3, [pc, #32]	@ (800c3e0 <prvProcessReceivedCommands+0x1c8>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	1d39      	adds	r1, r7, #4
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7fe fbfc 	bl	800abc4 <xQueueReceive>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	f47f af26 	bne.w	800c220 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c3d4:	bf00      	nop
 800c3d6:	bf00      	nop
 800c3d8:	3730      	adds	r7, #48	@ 0x30
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	20001248 	.word	0x20001248

0800c3e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b088      	sub	sp, #32
 800c3e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c3ea:	e049      	b.n	800c480 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c3ec:	4b2e      	ldr	r3, [pc, #184]	@ (800c4a8 <prvSwitchTimerLists+0xc4>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	68db      	ldr	r3, [r3, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3f6:	4b2c      	ldr	r3, [pc, #176]	@ (800c4a8 <prvSwitchTimerLists+0xc4>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	68db      	ldr	r3, [r3, #12]
 800c3fc:	68db      	ldr	r3, [r3, #12]
 800c3fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	3304      	adds	r3, #4
 800c404:	4618      	mov	r0, r3
 800c406:	f7fe f909 	bl	800a61c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	6a1b      	ldr	r3, [r3, #32]
 800c40e:	68f8      	ldr	r0, [r7, #12]
 800c410:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c418:	f003 0304 	and.w	r3, r3, #4
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d02f      	beq.n	800c480 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	699b      	ldr	r3, [r3, #24]
 800c424:	693a      	ldr	r2, [r7, #16]
 800c426:	4413      	add	r3, r2
 800c428:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c42a:	68ba      	ldr	r2, [r7, #8]
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d90e      	bls.n	800c450 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	68ba      	ldr	r2, [r7, #8]
 800c436:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	68fa      	ldr	r2, [r7, #12]
 800c43c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c43e:	4b1a      	ldr	r3, [pc, #104]	@ (800c4a8 <prvSwitchTimerLists+0xc4>)
 800c440:	681a      	ldr	r2, [r3, #0]
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	3304      	adds	r3, #4
 800c446:	4619      	mov	r1, r3
 800c448:	4610      	mov	r0, r2
 800c44a:	f7fe f8ae 	bl	800a5aa <vListInsert>
 800c44e:	e017      	b.n	800c480 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c450:	2300      	movs	r3, #0
 800c452:	9300      	str	r3, [sp, #0]
 800c454:	2300      	movs	r3, #0
 800c456:	693a      	ldr	r2, [r7, #16]
 800c458:	2100      	movs	r1, #0
 800c45a:	68f8      	ldr	r0, [r7, #12]
 800c45c:	f7ff fd58 	bl	800bf10 <xTimerGenericCommand>
 800c460:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d10b      	bne.n	800c480 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c46c:	f383 8811 	msr	BASEPRI, r3
 800c470:	f3bf 8f6f 	isb	sy
 800c474:	f3bf 8f4f 	dsb	sy
 800c478:	603b      	str	r3, [r7, #0]
}
 800c47a:	bf00      	nop
 800c47c:	bf00      	nop
 800c47e:	e7fd      	b.n	800c47c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c480:	4b09      	ldr	r3, [pc, #36]	@ (800c4a8 <prvSwitchTimerLists+0xc4>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d1b0      	bne.n	800c3ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c48a:	4b07      	ldr	r3, [pc, #28]	@ (800c4a8 <prvSwitchTimerLists+0xc4>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c490:	4b06      	ldr	r3, [pc, #24]	@ (800c4ac <prvSwitchTimerLists+0xc8>)
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4a04      	ldr	r2, [pc, #16]	@ (800c4a8 <prvSwitchTimerLists+0xc4>)
 800c496:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c498:	4a04      	ldr	r2, [pc, #16]	@ (800c4ac <prvSwitchTimerLists+0xc8>)
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	6013      	str	r3, [r2, #0]
}
 800c49e:	bf00      	nop
 800c4a0:	3718      	adds	r7, #24
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	20001240 	.word	0x20001240
 800c4ac:	20001244 	.word	0x20001244

0800c4b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c4b6:	f000 f96f 	bl	800c798 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c4ba:	4b15      	ldr	r3, [pc, #84]	@ (800c510 <prvCheckForValidListAndQueue+0x60>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d120      	bne.n	800c504 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c4c2:	4814      	ldr	r0, [pc, #80]	@ (800c514 <prvCheckForValidListAndQueue+0x64>)
 800c4c4:	f7fe f820 	bl	800a508 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c4c8:	4813      	ldr	r0, [pc, #76]	@ (800c518 <prvCheckForValidListAndQueue+0x68>)
 800c4ca:	f7fe f81d 	bl	800a508 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c4ce:	4b13      	ldr	r3, [pc, #76]	@ (800c51c <prvCheckForValidListAndQueue+0x6c>)
 800c4d0:	4a10      	ldr	r2, [pc, #64]	@ (800c514 <prvCheckForValidListAndQueue+0x64>)
 800c4d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c4d4:	4b12      	ldr	r3, [pc, #72]	@ (800c520 <prvCheckForValidListAndQueue+0x70>)
 800c4d6:	4a10      	ldr	r2, [pc, #64]	@ (800c518 <prvCheckForValidListAndQueue+0x68>)
 800c4d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c4da:	2300      	movs	r3, #0
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	4b11      	ldr	r3, [pc, #68]	@ (800c524 <prvCheckForValidListAndQueue+0x74>)
 800c4e0:	4a11      	ldr	r2, [pc, #68]	@ (800c528 <prvCheckForValidListAndQueue+0x78>)
 800c4e2:	2110      	movs	r1, #16
 800c4e4:	200a      	movs	r0, #10
 800c4e6:	f7fe f92d 	bl	800a744 <xQueueGenericCreateStatic>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	4a08      	ldr	r2, [pc, #32]	@ (800c510 <prvCheckForValidListAndQueue+0x60>)
 800c4ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c4f0:	4b07      	ldr	r3, [pc, #28]	@ (800c510 <prvCheckForValidListAndQueue+0x60>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d005      	beq.n	800c504 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c4f8:	4b05      	ldr	r3, [pc, #20]	@ (800c510 <prvCheckForValidListAndQueue+0x60>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	490b      	ldr	r1, [pc, #44]	@ (800c52c <prvCheckForValidListAndQueue+0x7c>)
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7fe fd52 	bl	800afa8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c504:	f000 f97a 	bl	800c7fc <vPortExitCritical>
}
 800c508:	bf00      	nop
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	20001248 	.word	0x20001248
 800c514:	20001218 	.word	0x20001218
 800c518:	2000122c 	.word	0x2000122c
 800c51c:	20001240 	.word	0x20001240
 800c520:	20001244 	.word	0x20001244
 800c524:	200012f4 	.word	0x200012f4
 800c528:	20001254 	.word	0x20001254
 800c52c:	08011464 	.word	0x08011464

0800c530 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c530:	b480      	push	{r7}
 800c532:	b085      	sub	sp, #20
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	3b04      	subs	r3, #4
 800c540:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c548:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	3b04      	subs	r3, #4
 800c54e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	f023 0201 	bic.w	r2, r3, #1
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	3b04      	subs	r3, #4
 800c55e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c560:	4a0c      	ldr	r2, [pc, #48]	@ (800c594 <pxPortInitialiseStack+0x64>)
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	3b14      	subs	r3, #20
 800c56a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	3b04      	subs	r3, #4
 800c576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f06f 0202 	mvn.w	r2, #2
 800c57e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	3b20      	subs	r3, #32
 800c584:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c586:	68fb      	ldr	r3, [r7, #12]
}
 800c588:	4618      	mov	r0, r3
 800c58a:	3714      	adds	r7, #20
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr
 800c594:	0800c599 	.word	0x0800c599

0800c598 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c5a2:	4b13      	ldr	r3, [pc, #76]	@ (800c5f0 <prvTaskExitError+0x58>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5aa:	d00b      	beq.n	800c5c4 <prvTaskExitError+0x2c>
	__asm volatile
 800c5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5b0:	f383 8811 	msr	BASEPRI, r3
 800c5b4:	f3bf 8f6f 	isb	sy
 800c5b8:	f3bf 8f4f 	dsb	sy
 800c5bc:	60fb      	str	r3, [r7, #12]
}
 800c5be:	bf00      	nop
 800c5c0:	bf00      	nop
 800c5c2:	e7fd      	b.n	800c5c0 <prvTaskExitError+0x28>
	__asm volatile
 800c5c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5c8:	f383 8811 	msr	BASEPRI, r3
 800c5cc:	f3bf 8f6f 	isb	sy
 800c5d0:	f3bf 8f4f 	dsb	sy
 800c5d4:	60bb      	str	r3, [r7, #8]
}
 800c5d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c5d8:	bf00      	nop
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d0fc      	beq.n	800c5da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c5e0:	bf00      	nop
 800c5e2:	bf00      	nop
 800c5e4:	3714      	adds	r7, #20
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr
 800c5ee:	bf00      	nop
 800c5f0:	20000024 	.word	0x20000024
	...

0800c600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c600:	4b07      	ldr	r3, [pc, #28]	@ (800c620 <pxCurrentTCBConst2>)
 800c602:	6819      	ldr	r1, [r3, #0]
 800c604:	6808      	ldr	r0, [r1, #0]
 800c606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c60a:	f380 8809 	msr	PSP, r0
 800c60e:	f3bf 8f6f 	isb	sy
 800c612:	f04f 0000 	mov.w	r0, #0
 800c616:	f380 8811 	msr	BASEPRI, r0
 800c61a:	4770      	bx	lr
 800c61c:	f3af 8000 	nop.w

0800c620 <pxCurrentTCBConst2>:
 800c620:	20000d18 	.word	0x20000d18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c624:	bf00      	nop
 800c626:	bf00      	nop

0800c628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c628:	4808      	ldr	r0, [pc, #32]	@ (800c64c <prvPortStartFirstTask+0x24>)
 800c62a:	6800      	ldr	r0, [r0, #0]
 800c62c:	6800      	ldr	r0, [r0, #0]
 800c62e:	f380 8808 	msr	MSP, r0
 800c632:	f04f 0000 	mov.w	r0, #0
 800c636:	f380 8814 	msr	CONTROL, r0
 800c63a:	b662      	cpsie	i
 800c63c:	b661      	cpsie	f
 800c63e:	f3bf 8f4f 	dsb	sy
 800c642:	f3bf 8f6f 	isb	sy
 800c646:	df00      	svc	0
 800c648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c64a:	bf00      	nop
 800c64c:	e000ed08 	.word	0xe000ed08

0800c650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b086      	sub	sp, #24
 800c654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c656:	4b47      	ldr	r3, [pc, #284]	@ (800c774 <xPortStartScheduler+0x124>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4a47      	ldr	r2, [pc, #284]	@ (800c778 <xPortStartScheduler+0x128>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d10b      	bne.n	800c678 <xPortStartScheduler+0x28>
	__asm volatile
 800c660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c664:	f383 8811 	msr	BASEPRI, r3
 800c668:	f3bf 8f6f 	isb	sy
 800c66c:	f3bf 8f4f 	dsb	sy
 800c670:	613b      	str	r3, [r7, #16]
}
 800c672:	bf00      	nop
 800c674:	bf00      	nop
 800c676:	e7fd      	b.n	800c674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c678:	4b3e      	ldr	r3, [pc, #248]	@ (800c774 <xPortStartScheduler+0x124>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	4a3f      	ldr	r2, [pc, #252]	@ (800c77c <xPortStartScheduler+0x12c>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d10b      	bne.n	800c69a <xPortStartScheduler+0x4a>
	__asm volatile
 800c682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c686:	f383 8811 	msr	BASEPRI, r3
 800c68a:	f3bf 8f6f 	isb	sy
 800c68e:	f3bf 8f4f 	dsb	sy
 800c692:	60fb      	str	r3, [r7, #12]
}
 800c694:	bf00      	nop
 800c696:	bf00      	nop
 800c698:	e7fd      	b.n	800c696 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c69a:	4b39      	ldr	r3, [pc, #228]	@ (800c780 <xPortStartScheduler+0x130>)
 800c69c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	22ff      	movs	r2, #255	@ 0xff
 800c6aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c6b4:	78fb      	ldrb	r3, [r7, #3]
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c6bc:	b2da      	uxtb	r2, r3
 800c6be:	4b31      	ldr	r3, [pc, #196]	@ (800c784 <xPortStartScheduler+0x134>)
 800c6c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c6c2:	4b31      	ldr	r3, [pc, #196]	@ (800c788 <xPortStartScheduler+0x138>)
 800c6c4:	2207      	movs	r2, #7
 800c6c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c6c8:	e009      	b.n	800c6de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c6ca:	4b2f      	ldr	r3, [pc, #188]	@ (800c788 <xPortStartScheduler+0x138>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	3b01      	subs	r3, #1
 800c6d0:	4a2d      	ldr	r2, [pc, #180]	@ (800c788 <xPortStartScheduler+0x138>)
 800c6d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c6d4:	78fb      	ldrb	r3, [r7, #3]
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	005b      	lsls	r3, r3, #1
 800c6da:	b2db      	uxtb	r3, r3
 800c6dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c6de:	78fb      	ldrb	r3, [r7, #3]
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c6e6:	2b80      	cmp	r3, #128	@ 0x80
 800c6e8:	d0ef      	beq.n	800c6ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c6ea:	4b27      	ldr	r3, [pc, #156]	@ (800c788 <xPortStartScheduler+0x138>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f1c3 0307 	rsb	r3, r3, #7
 800c6f2:	2b04      	cmp	r3, #4
 800c6f4:	d00b      	beq.n	800c70e <xPortStartScheduler+0xbe>
	__asm volatile
 800c6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6fa:	f383 8811 	msr	BASEPRI, r3
 800c6fe:	f3bf 8f6f 	isb	sy
 800c702:	f3bf 8f4f 	dsb	sy
 800c706:	60bb      	str	r3, [r7, #8]
}
 800c708:	bf00      	nop
 800c70a:	bf00      	nop
 800c70c:	e7fd      	b.n	800c70a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c70e:	4b1e      	ldr	r3, [pc, #120]	@ (800c788 <xPortStartScheduler+0x138>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	021b      	lsls	r3, r3, #8
 800c714:	4a1c      	ldr	r2, [pc, #112]	@ (800c788 <xPortStartScheduler+0x138>)
 800c716:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c718:	4b1b      	ldr	r3, [pc, #108]	@ (800c788 <xPortStartScheduler+0x138>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c720:	4a19      	ldr	r2, [pc, #100]	@ (800c788 <xPortStartScheduler+0x138>)
 800c722:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	b2da      	uxtb	r2, r3
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c72c:	4b17      	ldr	r3, [pc, #92]	@ (800c78c <xPortStartScheduler+0x13c>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a16      	ldr	r2, [pc, #88]	@ (800c78c <xPortStartScheduler+0x13c>)
 800c732:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c736:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c738:	4b14      	ldr	r3, [pc, #80]	@ (800c78c <xPortStartScheduler+0x13c>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a13      	ldr	r2, [pc, #76]	@ (800c78c <xPortStartScheduler+0x13c>)
 800c73e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c742:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c744:	f000 f8da 	bl	800c8fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c748:	4b11      	ldr	r3, [pc, #68]	@ (800c790 <xPortStartScheduler+0x140>)
 800c74a:	2200      	movs	r2, #0
 800c74c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c74e:	f000 f8f9 	bl	800c944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c752:	4b10      	ldr	r3, [pc, #64]	@ (800c794 <xPortStartScheduler+0x144>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a0f      	ldr	r2, [pc, #60]	@ (800c794 <xPortStartScheduler+0x144>)
 800c758:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c75c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c75e:	f7ff ff63 	bl	800c628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c762:	f7ff f839 	bl	800b7d8 <vTaskSwitchContext>
	prvTaskExitError();
 800c766:	f7ff ff17 	bl	800c598 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c76a:	2300      	movs	r3, #0
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3718      	adds	r7, #24
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}
 800c774:	e000ed00 	.word	0xe000ed00
 800c778:	410fc271 	.word	0x410fc271
 800c77c:	410fc270 	.word	0x410fc270
 800c780:	e000e400 	.word	0xe000e400
 800c784:	20001344 	.word	0x20001344
 800c788:	20001348 	.word	0x20001348
 800c78c:	e000ed20 	.word	0xe000ed20
 800c790:	20000024 	.word	0x20000024
 800c794:	e000ef34 	.word	0xe000ef34

0800c798 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c798:	b480      	push	{r7}
 800c79a:	b083      	sub	sp, #12
 800c79c:	af00      	add	r7, sp, #0
	__asm volatile
 800c79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a2:	f383 8811 	msr	BASEPRI, r3
 800c7a6:	f3bf 8f6f 	isb	sy
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	607b      	str	r3, [r7, #4]
}
 800c7b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c7b2:	4b10      	ldr	r3, [pc, #64]	@ (800c7f4 <vPortEnterCritical+0x5c>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	3301      	adds	r3, #1
 800c7b8:	4a0e      	ldr	r2, [pc, #56]	@ (800c7f4 <vPortEnterCritical+0x5c>)
 800c7ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c7bc:	4b0d      	ldr	r3, [pc, #52]	@ (800c7f4 <vPortEnterCritical+0x5c>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d110      	bne.n	800c7e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c7c4:	4b0c      	ldr	r3, [pc, #48]	@ (800c7f8 <vPortEnterCritical+0x60>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d00b      	beq.n	800c7e6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7d2:	f383 8811 	msr	BASEPRI, r3
 800c7d6:	f3bf 8f6f 	isb	sy
 800c7da:	f3bf 8f4f 	dsb	sy
 800c7de:	603b      	str	r3, [r7, #0]
}
 800c7e0:	bf00      	nop
 800c7e2:	bf00      	nop
 800c7e4:	e7fd      	b.n	800c7e2 <vPortEnterCritical+0x4a>
	}
}
 800c7e6:	bf00      	nop
 800c7e8:	370c      	adds	r7, #12
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr
 800c7f2:	bf00      	nop
 800c7f4:	20000024 	.word	0x20000024
 800c7f8:	e000ed04 	.word	0xe000ed04

0800c7fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b083      	sub	sp, #12
 800c800:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c802:	4b12      	ldr	r3, [pc, #72]	@ (800c84c <vPortExitCritical+0x50>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d10b      	bne.n	800c822 <vPortExitCritical+0x26>
	__asm volatile
 800c80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c80e:	f383 8811 	msr	BASEPRI, r3
 800c812:	f3bf 8f6f 	isb	sy
 800c816:	f3bf 8f4f 	dsb	sy
 800c81a:	607b      	str	r3, [r7, #4]
}
 800c81c:	bf00      	nop
 800c81e:	bf00      	nop
 800c820:	e7fd      	b.n	800c81e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c822:	4b0a      	ldr	r3, [pc, #40]	@ (800c84c <vPortExitCritical+0x50>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	3b01      	subs	r3, #1
 800c828:	4a08      	ldr	r2, [pc, #32]	@ (800c84c <vPortExitCritical+0x50>)
 800c82a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c82c:	4b07      	ldr	r3, [pc, #28]	@ (800c84c <vPortExitCritical+0x50>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d105      	bne.n	800c840 <vPortExitCritical+0x44>
 800c834:	2300      	movs	r3, #0
 800c836:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	f383 8811 	msr	BASEPRI, r3
}
 800c83e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c840:	bf00      	nop
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr
 800c84c:	20000024 	.word	0x20000024

0800c850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c850:	f3ef 8009 	mrs	r0, PSP
 800c854:	f3bf 8f6f 	isb	sy
 800c858:	4b15      	ldr	r3, [pc, #84]	@ (800c8b0 <pxCurrentTCBConst>)
 800c85a:	681a      	ldr	r2, [r3, #0]
 800c85c:	f01e 0f10 	tst.w	lr, #16
 800c860:	bf08      	it	eq
 800c862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c86a:	6010      	str	r0, [r2, #0]
 800c86c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c870:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c874:	f380 8811 	msr	BASEPRI, r0
 800c878:	f3bf 8f4f 	dsb	sy
 800c87c:	f3bf 8f6f 	isb	sy
 800c880:	f7fe ffaa 	bl	800b7d8 <vTaskSwitchContext>
 800c884:	f04f 0000 	mov.w	r0, #0
 800c888:	f380 8811 	msr	BASEPRI, r0
 800c88c:	bc09      	pop	{r0, r3}
 800c88e:	6819      	ldr	r1, [r3, #0]
 800c890:	6808      	ldr	r0, [r1, #0]
 800c892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c896:	f01e 0f10 	tst.w	lr, #16
 800c89a:	bf08      	it	eq
 800c89c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c8a0:	f380 8809 	msr	PSP, r0
 800c8a4:	f3bf 8f6f 	isb	sy
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	f3af 8000 	nop.w

0800c8b0 <pxCurrentTCBConst>:
 800c8b0:	20000d18 	.word	0x20000d18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c8b4:	bf00      	nop
 800c8b6:	bf00      	nop

0800c8b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b082      	sub	sp, #8
 800c8bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8c2:	f383 8811 	msr	BASEPRI, r3
 800c8c6:	f3bf 8f6f 	isb	sy
 800c8ca:	f3bf 8f4f 	dsb	sy
 800c8ce:	607b      	str	r3, [r7, #4]
}
 800c8d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c8d2:	f7fe fec7 	bl	800b664 <xTaskIncrementTick>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d003      	beq.n	800c8e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c8dc:	4b06      	ldr	r3, [pc, #24]	@ (800c8f8 <xPortSysTickHandler+0x40>)
 800c8de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8e2:	601a      	str	r2, [r3, #0]
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	f383 8811 	msr	BASEPRI, r3
}
 800c8ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c8f0:	bf00      	nop
 800c8f2:	3708      	adds	r7, #8
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}
 800c8f8:	e000ed04 	.word	0xe000ed04

0800c8fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c900:	4b0b      	ldr	r3, [pc, #44]	@ (800c930 <vPortSetupTimerInterrupt+0x34>)
 800c902:	2200      	movs	r2, #0
 800c904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c906:	4b0b      	ldr	r3, [pc, #44]	@ (800c934 <vPortSetupTimerInterrupt+0x38>)
 800c908:	2200      	movs	r2, #0
 800c90a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c90c:	4b0a      	ldr	r3, [pc, #40]	@ (800c938 <vPortSetupTimerInterrupt+0x3c>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	4a0a      	ldr	r2, [pc, #40]	@ (800c93c <vPortSetupTimerInterrupt+0x40>)
 800c912:	fba2 2303 	umull	r2, r3, r2, r3
 800c916:	099b      	lsrs	r3, r3, #6
 800c918:	4a09      	ldr	r2, [pc, #36]	@ (800c940 <vPortSetupTimerInterrupt+0x44>)
 800c91a:	3b01      	subs	r3, #1
 800c91c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c91e:	4b04      	ldr	r3, [pc, #16]	@ (800c930 <vPortSetupTimerInterrupt+0x34>)
 800c920:	2207      	movs	r2, #7
 800c922:	601a      	str	r2, [r3, #0]
}
 800c924:	bf00      	nop
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	e000e010 	.word	0xe000e010
 800c934:	e000e018 	.word	0xe000e018
 800c938:	20000018 	.word	0x20000018
 800c93c:	10624dd3 	.word	0x10624dd3
 800c940:	e000e014 	.word	0xe000e014

0800c944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c944:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c954 <vPortEnableVFP+0x10>
 800c948:	6801      	ldr	r1, [r0, #0]
 800c94a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c94e:	6001      	str	r1, [r0, #0]
 800c950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c952:	bf00      	nop
 800c954:	e000ed88 	.word	0xe000ed88

0800c958 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c958:	b480      	push	{r7}
 800c95a:	b085      	sub	sp, #20
 800c95c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c95e:	f3ef 8305 	mrs	r3, IPSR
 800c962:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2b0f      	cmp	r3, #15
 800c968:	d915      	bls.n	800c996 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c96a:	4a18      	ldr	r2, [pc, #96]	@ (800c9cc <vPortValidateInterruptPriority+0x74>)
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	4413      	add	r3, r2
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c974:	4b16      	ldr	r3, [pc, #88]	@ (800c9d0 <vPortValidateInterruptPriority+0x78>)
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	7afa      	ldrb	r2, [r7, #11]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d20b      	bcs.n	800c996 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c982:	f383 8811 	msr	BASEPRI, r3
 800c986:	f3bf 8f6f 	isb	sy
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	607b      	str	r3, [r7, #4]
}
 800c990:	bf00      	nop
 800c992:	bf00      	nop
 800c994:	e7fd      	b.n	800c992 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c996:	4b0f      	ldr	r3, [pc, #60]	@ (800c9d4 <vPortValidateInterruptPriority+0x7c>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c99e:	4b0e      	ldr	r3, [pc, #56]	@ (800c9d8 <vPortValidateInterruptPriority+0x80>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d90b      	bls.n	800c9be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9aa:	f383 8811 	msr	BASEPRI, r3
 800c9ae:	f3bf 8f6f 	isb	sy
 800c9b2:	f3bf 8f4f 	dsb	sy
 800c9b6:	603b      	str	r3, [r7, #0]
}
 800c9b8:	bf00      	nop
 800c9ba:	bf00      	nop
 800c9bc:	e7fd      	b.n	800c9ba <vPortValidateInterruptPriority+0x62>
	}
 800c9be:	bf00      	nop
 800c9c0:	3714      	adds	r7, #20
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop
 800c9cc:	e000e3f0 	.word	0xe000e3f0
 800c9d0:	20001344 	.word	0x20001344
 800c9d4:	e000ed0c 	.word	0xe000ed0c
 800c9d8:	20001348 	.word	0x20001348

0800c9dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b08a      	sub	sp, #40	@ 0x28
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c9e8:	f7fe fd80 	bl	800b4ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c9ec:	4b5c      	ldr	r3, [pc, #368]	@ (800cb60 <pvPortMalloc+0x184>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d101      	bne.n	800c9f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c9f4:	f000 f924 	bl	800cc40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c9f8:	4b5a      	ldr	r3, [pc, #360]	@ (800cb64 <pvPortMalloc+0x188>)
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	4013      	ands	r3, r2
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	f040 8095 	bne.w	800cb30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d01e      	beq.n	800ca4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ca0c:	2208      	movs	r2, #8
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	4413      	add	r3, r2
 800ca12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f003 0307 	and.w	r3, r3, #7
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d015      	beq.n	800ca4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f023 0307 	bic.w	r3, r3, #7
 800ca24:	3308      	adds	r3, #8
 800ca26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f003 0307 	and.w	r3, r3, #7
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d00b      	beq.n	800ca4a <pvPortMalloc+0x6e>
	__asm volatile
 800ca32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca36:	f383 8811 	msr	BASEPRI, r3
 800ca3a:	f3bf 8f6f 	isb	sy
 800ca3e:	f3bf 8f4f 	dsb	sy
 800ca42:	617b      	str	r3, [r7, #20]
}
 800ca44:	bf00      	nop
 800ca46:	bf00      	nop
 800ca48:	e7fd      	b.n	800ca46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d06f      	beq.n	800cb30 <pvPortMalloc+0x154>
 800ca50:	4b45      	ldr	r3, [pc, #276]	@ (800cb68 <pvPortMalloc+0x18c>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	429a      	cmp	r2, r3
 800ca58:	d86a      	bhi.n	800cb30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ca5a:	4b44      	ldr	r3, [pc, #272]	@ (800cb6c <pvPortMalloc+0x190>)
 800ca5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ca5e:	4b43      	ldr	r3, [pc, #268]	@ (800cb6c <pvPortMalloc+0x190>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca64:	e004      	b.n	800ca70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ca66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ca6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	687a      	ldr	r2, [r7, #4]
 800ca76:	429a      	cmp	r2, r3
 800ca78:	d903      	bls.n	800ca82 <pvPortMalloc+0xa6>
 800ca7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d1f1      	bne.n	800ca66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ca82:	4b37      	ldr	r3, [pc, #220]	@ (800cb60 <pvPortMalloc+0x184>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d051      	beq.n	800cb30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ca8c:	6a3b      	ldr	r3, [r7, #32]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	2208      	movs	r2, #8
 800ca92:	4413      	add	r3, r2
 800ca94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ca96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca98:	681a      	ldr	r2, [r3, #0]
 800ca9a:	6a3b      	ldr	r3, [r7, #32]
 800ca9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ca9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa0:	685a      	ldr	r2, [r3, #4]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	1ad2      	subs	r2, r2, r3
 800caa6:	2308      	movs	r3, #8
 800caa8:	005b      	lsls	r3, r3, #1
 800caaa:	429a      	cmp	r2, r3
 800caac:	d920      	bls.n	800caf0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800caae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	4413      	add	r3, r2
 800cab4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	f003 0307 	and.w	r3, r3, #7
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d00b      	beq.n	800cad8 <pvPortMalloc+0xfc>
	__asm volatile
 800cac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cac4:	f383 8811 	msr	BASEPRI, r3
 800cac8:	f3bf 8f6f 	isb	sy
 800cacc:	f3bf 8f4f 	dsb	sy
 800cad0:	613b      	str	r3, [r7, #16]
}
 800cad2:	bf00      	nop
 800cad4:	bf00      	nop
 800cad6:	e7fd      	b.n	800cad4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cada:	685a      	ldr	r2, [r3, #4]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	1ad2      	subs	r2, r2, r3
 800cae0:	69bb      	ldr	r3, [r7, #24]
 800cae2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800caea:	69b8      	ldr	r0, [r7, #24]
 800caec:	f000 f90a 	bl	800cd04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800caf0:	4b1d      	ldr	r3, [pc, #116]	@ (800cb68 <pvPortMalloc+0x18c>)
 800caf2:	681a      	ldr	r2, [r3, #0]
 800caf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	1ad3      	subs	r3, r2, r3
 800cafa:	4a1b      	ldr	r2, [pc, #108]	@ (800cb68 <pvPortMalloc+0x18c>)
 800cafc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cafe:	4b1a      	ldr	r3, [pc, #104]	@ (800cb68 <pvPortMalloc+0x18c>)
 800cb00:	681a      	ldr	r2, [r3, #0]
 800cb02:	4b1b      	ldr	r3, [pc, #108]	@ (800cb70 <pvPortMalloc+0x194>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d203      	bcs.n	800cb12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cb0a:	4b17      	ldr	r3, [pc, #92]	@ (800cb68 <pvPortMalloc+0x18c>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4a18      	ldr	r2, [pc, #96]	@ (800cb70 <pvPortMalloc+0x194>)
 800cb10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cb12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb14:	685a      	ldr	r2, [r3, #4]
 800cb16:	4b13      	ldr	r3, [pc, #76]	@ (800cb64 <pvPortMalloc+0x188>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	431a      	orrs	r2, r3
 800cb1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cb20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb22:	2200      	movs	r2, #0
 800cb24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cb26:	4b13      	ldr	r3, [pc, #76]	@ (800cb74 <pvPortMalloc+0x198>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	4a11      	ldr	r2, [pc, #68]	@ (800cb74 <pvPortMalloc+0x198>)
 800cb2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cb30:	f7fe fcea 	bl	800b508 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	f003 0307 	and.w	r3, r3, #7
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d00b      	beq.n	800cb56 <pvPortMalloc+0x17a>
	__asm volatile
 800cb3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb42:	f383 8811 	msr	BASEPRI, r3
 800cb46:	f3bf 8f6f 	isb	sy
 800cb4a:	f3bf 8f4f 	dsb	sy
 800cb4e:	60fb      	str	r3, [r7, #12]
}
 800cb50:	bf00      	nop
 800cb52:	bf00      	nop
 800cb54:	e7fd      	b.n	800cb52 <pvPortMalloc+0x176>
	return pvReturn;
 800cb56:	69fb      	ldr	r3, [r7, #28]
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3728      	adds	r7, #40	@ 0x28
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}
 800cb60:	20004f54 	.word	0x20004f54
 800cb64:	20004f68 	.word	0x20004f68
 800cb68:	20004f58 	.word	0x20004f58
 800cb6c:	20004f4c 	.word	0x20004f4c
 800cb70:	20004f5c 	.word	0x20004f5c
 800cb74:	20004f60 	.word	0x20004f60

0800cb78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b086      	sub	sp, #24
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d04f      	beq.n	800cc2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cb8a:	2308      	movs	r3, #8
 800cb8c:	425b      	negs	r3, r3
 800cb8e:	697a      	ldr	r2, [r7, #20]
 800cb90:	4413      	add	r3, r2
 800cb92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	685a      	ldr	r2, [r3, #4]
 800cb9c:	4b25      	ldr	r3, [pc, #148]	@ (800cc34 <vPortFree+0xbc>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4013      	ands	r3, r2
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d10b      	bne.n	800cbbe <vPortFree+0x46>
	__asm volatile
 800cba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbaa:	f383 8811 	msr	BASEPRI, r3
 800cbae:	f3bf 8f6f 	isb	sy
 800cbb2:	f3bf 8f4f 	dsb	sy
 800cbb6:	60fb      	str	r3, [r7, #12]
}
 800cbb8:	bf00      	nop
 800cbba:	bf00      	nop
 800cbbc:	e7fd      	b.n	800cbba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cbbe:	693b      	ldr	r3, [r7, #16]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d00b      	beq.n	800cbde <vPortFree+0x66>
	__asm volatile
 800cbc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbca:	f383 8811 	msr	BASEPRI, r3
 800cbce:	f3bf 8f6f 	isb	sy
 800cbd2:	f3bf 8f4f 	dsb	sy
 800cbd6:	60bb      	str	r3, [r7, #8]
}
 800cbd8:	bf00      	nop
 800cbda:	bf00      	nop
 800cbdc:	e7fd      	b.n	800cbda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	685a      	ldr	r2, [r3, #4]
 800cbe2:	4b14      	ldr	r3, [pc, #80]	@ (800cc34 <vPortFree+0xbc>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4013      	ands	r3, r2
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d01e      	beq.n	800cc2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d11a      	bne.n	800cc2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	685a      	ldr	r2, [r3, #4]
 800cbf8:	4b0e      	ldr	r3, [pc, #56]	@ (800cc34 <vPortFree+0xbc>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	43db      	mvns	r3, r3
 800cbfe:	401a      	ands	r2, r3
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cc04:	f7fe fc72 	bl	800b4ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	685a      	ldr	r2, [r3, #4]
 800cc0c:	4b0a      	ldr	r3, [pc, #40]	@ (800cc38 <vPortFree+0xc0>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4413      	add	r3, r2
 800cc12:	4a09      	ldr	r2, [pc, #36]	@ (800cc38 <vPortFree+0xc0>)
 800cc14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cc16:	6938      	ldr	r0, [r7, #16]
 800cc18:	f000 f874 	bl	800cd04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cc1c:	4b07      	ldr	r3, [pc, #28]	@ (800cc3c <vPortFree+0xc4>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	3301      	adds	r3, #1
 800cc22:	4a06      	ldr	r2, [pc, #24]	@ (800cc3c <vPortFree+0xc4>)
 800cc24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cc26:	f7fe fc6f 	bl	800b508 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cc2a:	bf00      	nop
 800cc2c:	3718      	adds	r7, #24
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	20004f68 	.word	0x20004f68
 800cc38:	20004f58 	.word	0x20004f58
 800cc3c:	20004f64 	.word	0x20004f64

0800cc40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cc40:	b480      	push	{r7}
 800cc42:	b085      	sub	sp, #20
 800cc44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cc46:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800cc4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cc4c:	4b27      	ldr	r3, [pc, #156]	@ (800ccec <prvHeapInit+0xac>)
 800cc4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f003 0307 	and.w	r3, r3, #7
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d00c      	beq.n	800cc74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	3307      	adds	r3, #7
 800cc5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	f023 0307 	bic.w	r3, r3, #7
 800cc66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cc68:	68ba      	ldr	r2, [r7, #8]
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	1ad3      	subs	r3, r2, r3
 800cc6e:	4a1f      	ldr	r2, [pc, #124]	@ (800ccec <prvHeapInit+0xac>)
 800cc70:	4413      	add	r3, r2
 800cc72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cc78:	4a1d      	ldr	r2, [pc, #116]	@ (800ccf0 <prvHeapInit+0xb0>)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cc7e:	4b1c      	ldr	r3, [pc, #112]	@ (800ccf0 <prvHeapInit+0xb0>)
 800cc80:	2200      	movs	r2, #0
 800cc82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	68ba      	ldr	r2, [r7, #8]
 800cc88:	4413      	add	r3, r2
 800cc8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cc8c:	2208      	movs	r2, #8
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	1a9b      	subs	r3, r3, r2
 800cc92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	f023 0307 	bic.w	r3, r3, #7
 800cc9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	4a15      	ldr	r2, [pc, #84]	@ (800ccf4 <prvHeapInit+0xb4>)
 800cca0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cca2:	4b14      	ldr	r3, [pc, #80]	@ (800ccf4 <prvHeapInit+0xb4>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2200      	movs	r2, #0
 800cca8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ccaa:	4b12      	ldr	r3, [pc, #72]	@ (800ccf4 <prvHeapInit+0xb4>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	68fa      	ldr	r2, [r7, #12]
 800ccba:	1ad2      	subs	r2, r2, r3
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ccc0:	4b0c      	ldr	r3, [pc, #48]	@ (800ccf4 <prvHeapInit+0xb4>)
 800ccc2:	681a      	ldr	r2, [r3, #0]
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	685b      	ldr	r3, [r3, #4]
 800cccc:	4a0a      	ldr	r2, [pc, #40]	@ (800ccf8 <prvHeapInit+0xb8>)
 800ccce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	685b      	ldr	r3, [r3, #4]
 800ccd4:	4a09      	ldr	r2, [pc, #36]	@ (800ccfc <prvHeapInit+0xbc>)
 800ccd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ccd8:	4b09      	ldr	r3, [pc, #36]	@ (800cd00 <prvHeapInit+0xc0>)
 800ccda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ccde:	601a      	str	r2, [r3, #0]
}
 800cce0:	bf00      	nop
 800cce2:	3714      	adds	r7, #20
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr
 800ccec:	2000134c 	.word	0x2000134c
 800ccf0:	20004f4c 	.word	0x20004f4c
 800ccf4:	20004f54 	.word	0x20004f54
 800ccf8:	20004f5c 	.word	0x20004f5c
 800ccfc:	20004f58 	.word	0x20004f58
 800cd00:	20004f68 	.word	0x20004f68

0800cd04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cd04:	b480      	push	{r7}
 800cd06:	b085      	sub	sp, #20
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cd0c:	4b28      	ldr	r3, [pc, #160]	@ (800cdb0 <prvInsertBlockIntoFreeList+0xac>)
 800cd0e:	60fb      	str	r3, [r7, #12]
 800cd10:	e002      	b.n	800cd18 <prvInsertBlockIntoFreeList+0x14>
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	60fb      	str	r3, [r7, #12]
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d8f7      	bhi.n	800cd12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	68ba      	ldr	r2, [r7, #8]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d108      	bne.n	800cd46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	685a      	ldr	r2, [r3, #4]
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	441a      	add	r2, r3
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	68ba      	ldr	r2, [r7, #8]
 800cd50:	441a      	add	r2, r3
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d118      	bne.n	800cd8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	681a      	ldr	r2, [r3, #0]
 800cd5e:	4b15      	ldr	r3, [pc, #84]	@ (800cdb4 <prvInsertBlockIntoFreeList+0xb0>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d00d      	beq.n	800cd82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	685a      	ldr	r2, [r3, #4]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	685b      	ldr	r3, [r3, #4]
 800cd70:	441a      	add	r2, r3
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	601a      	str	r2, [r3, #0]
 800cd80:	e008      	b.n	800cd94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cd82:	4b0c      	ldr	r3, [pc, #48]	@ (800cdb4 <prvInsertBlockIntoFreeList+0xb0>)
 800cd84:	681a      	ldr	r2, [r3, #0]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	601a      	str	r2, [r3, #0]
 800cd8a:	e003      	b.n	800cd94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681a      	ldr	r2, [r3, #0]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cd94:	68fa      	ldr	r2, [r7, #12]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d002      	beq.n	800cda2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	687a      	ldr	r2, [r7, #4]
 800cda0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cda2:	bf00      	nop
 800cda4:	3714      	adds	r7, #20
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr
 800cdae:	bf00      	nop
 800cdb0:	20004f4c 	.word	0x20004f4c
 800cdb4:	20004f54 	.word	0x20004f54

0800cdb8 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	71fb      	strb	r3, [r7, #7]
 800cdc2:	e026      	b.n	800ce12 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800cdc4:	79fb      	ldrb	r3, [r7, #7]
 800cdc6:	3b50      	subs	r3, #80	@ 0x50
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	2100      	movs	r1, #0
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f000 f82b 	bl	800ce28 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800cdd2:	2100      	movs	r1, #0
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	f000 f827 	bl	800ce28 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800cdda:	2100      	movs	r1, #0
 800cddc:	2010      	movs	r0, #16
 800cdde:	f000 f823 	bl	800ce28 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800cde2:	2300      	movs	r3, #0
 800cde4:	71bb      	strb	r3, [r7, #6]
 800cde6:	e00d      	b.n	800ce04 <OLED_Refresh_Gram+0x4c>
 800cde8:	79ba      	ldrb	r2, [r7, #6]
 800cdea:	79fb      	ldrb	r3, [r7, #7]
 800cdec:	490d      	ldr	r1, [pc, #52]	@ (800ce24 <OLED_Refresh_Gram+0x6c>)
 800cdee:	00d2      	lsls	r2, r2, #3
 800cdf0:	440a      	add	r2, r1
 800cdf2:	4413      	add	r3, r2
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	2101      	movs	r1, #1
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f000 f815 	bl	800ce28 <OLED_WR_Byte>
 800cdfe:	79bb      	ldrb	r3, [r7, #6]
 800ce00:	3301      	adds	r3, #1
 800ce02:	71bb      	strb	r3, [r7, #6]
 800ce04:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	daed      	bge.n	800cde8 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800ce0c:	79fb      	ldrb	r3, [r7, #7]
 800ce0e:	3301      	adds	r3, #1
 800ce10:	71fb      	strb	r3, [r7, #7]
 800ce12:	79fb      	ldrb	r3, [r7, #7]
 800ce14:	2b07      	cmp	r3, #7
 800ce16:	d9d5      	bls.n	800cdc4 <OLED_Refresh_Gram+0xc>
	}   
}
 800ce18:	bf00      	nop
 800ce1a:	bf00      	nop
 800ce1c:	3708      	adds	r7, #8
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}
 800ce22:	bf00      	nop
 800ce24:	20004f6c 	.word	0x20004f6c

0800ce28 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b084      	sub	sp, #16
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	4603      	mov	r3, r0
 800ce30:	460a      	mov	r2, r1
 800ce32:	71fb      	strb	r3, [r7, #7]
 800ce34:	4613      	mov	r3, r2
 800ce36:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800ce38:	79bb      	ldrb	r3, [r7, #6]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d006      	beq.n	800ce4c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800ce3e:	2201      	movs	r2, #1
 800ce40:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ce44:	481c      	ldr	r0, [pc, #112]	@ (800ceb8 <OLED_WR_Byte+0x90>)
 800ce46:	f7f8 fb01 	bl	800544c <HAL_GPIO_WritePin>
 800ce4a:	e005      	b.n	800ce58 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ce52:	4819      	ldr	r0, [pc, #100]	@ (800ceb8 <OLED_WR_Byte+0x90>)
 800ce54:	f7f8 fafa 	bl	800544c <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800ce58:	2300      	movs	r3, #0
 800ce5a:	73fb      	strb	r3, [r7, #15]
 800ce5c:	e01e      	b.n	800ce9c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800ce5e:	2200      	movs	r2, #0
 800ce60:	2120      	movs	r1, #32
 800ce62:	4815      	ldr	r0, [pc, #84]	@ (800ceb8 <OLED_WR_Byte+0x90>)
 800ce64:	f7f8 faf2 	bl	800544c <HAL_GPIO_WritePin>
		if(dat&0x80)
 800ce68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	da05      	bge.n	800ce7c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800ce70:	2201      	movs	r2, #1
 800ce72:	2140      	movs	r1, #64	@ 0x40
 800ce74:	4810      	ldr	r0, [pc, #64]	@ (800ceb8 <OLED_WR_Byte+0x90>)
 800ce76:	f7f8 fae9 	bl	800544c <HAL_GPIO_WritePin>
 800ce7a:	e004      	b.n	800ce86 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	2140      	movs	r1, #64	@ 0x40
 800ce80:	480d      	ldr	r0, [pc, #52]	@ (800ceb8 <OLED_WR_Byte+0x90>)
 800ce82:	f7f8 fae3 	bl	800544c <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800ce86:	2201      	movs	r2, #1
 800ce88:	2120      	movs	r1, #32
 800ce8a:	480b      	ldr	r0, [pc, #44]	@ (800ceb8 <OLED_WR_Byte+0x90>)
 800ce8c:	f7f8 fade 	bl	800544c <HAL_GPIO_WritePin>
		dat<<=1;   
 800ce90:	79fb      	ldrb	r3, [r7, #7]
 800ce92:	005b      	lsls	r3, r3, #1
 800ce94:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800ce96:	7bfb      	ldrb	r3, [r7, #15]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	73fb      	strb	r3, [r7, #15]
 800ce9c:	7bfb      	ldrb	r3, [r7, #15]
 800ce9e:	2b07      	cmp	r3, #7
 800cea0:	d9dd      	bls.n	800ce5e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800cea2:	2201      	movs	r2, #1
 800cea4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cea8:	4803      	ldr	r0, [pc, #12]	@ (800ceb8 <OLED_WR_Byte+0x90>)
 800ceaa:	f7f8 facf 	bl	800544c <HAL_GPIO_WritePin>
} 
 800ceae:	bf00      	nop
 800ceb0:	3710      	adds	r7, #16
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	40021000 	.word	0x40021000

0800cebc <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800cec2:	2300      	movs	r3, #0
 800cec4:	71fb      	strb	r3, [r7, #7]
 800cec6:	e014      	b.n	800cef2 <OLED_Clear+0x36>
 800cec8:	2300      	movs	r3, #0
 800ceca:	71bb      	strb	r3, [r7, #6]
 800cecc:	e00a      	b.n	800cee4 <OLED_Clear+0x28>
 800cece:	79ba      	ldrb	r2, [r7, #6]
 800ced0:	79fb      	ldrb	r3, [r7, #7]
 800ced2:	490c      	ldr	r1, [pc, #48]	@ (800cf04 <OLED_Clear+0x48>)
 800ced4:	00d2      	lsls	r2, r2, #3
 800ced6:	440a      	add	r2, r1
 800ced8:	4413      	add	r3, r2
 800ceda:	2200      	movs	r2, #0
 800cedc:	701a      	strb	r2, [r3, #0]
 800cede:	79bb      	ldrb	r3, [r7, #6]
 800cee0:	3301      	adds	r3, #1
 800cee2:	71bb      	strb	r3, [r7, #6]
 800cee4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	daf0      	bge.n	800cece <OLED_Clear+0x12>
 800ceec:	79fb      	ldrb	r3, [r7, #7]
 800ceee:	3301      	adds	r3, #1
 800cef0:	71fb      	strb	r3, [r7, #7]
 800cef2:	79fb      	ldrb	r3, [r7, #7]
 800cef4:	2b07      	cmp	r3, #7
 800cef6:	d9e7      	bls.n	800cec8 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800cef8:	f7ff ff5e 	bl	800cdb8 <OLED_Refresh_Gram>
}
 800cefc:	bf00      	nop
 800cefe:	3708      	adds	r7, #8
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	20004f6c 	.word	0x20004f6c

0800cf08 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b085      	sub	sp, #20
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	4603      	mov	r3, r0
 800cf10:	71fb      	strb	r3, [r7, #7]
 800cf12:	460b      	mov	r3, r1
 800cf14:	71bb      	strb	r3, [r7, #6]
 800cf16:	4613      	mov	r3, r2
 800cf18:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800cf1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	db41      	blt.n	800cfaa <OLED_DrawPoint+0xa2>
 800cf26:	79bb      	ldrb	r3, [r7, #6]
 800cf28:	2b3f      	cmp	r3, #63	@ 0x3f
 800cf2a:	d83e      	bhi.n	800cfaa <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800cf2c:	79bb      	ldrb	r3, [r7, #6]
 800cf2e:	08db      	lsrs	r3, r3, #3
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	f1c3 0307 	rsb	r3, r3, #7
 800cf36:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800cf38:	79bb      	ldrb	r3, [r7, #6]
 800cf3a:	f003 0307 	and.w	r3, r3, #7
 800cf3e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800cf40:	7b7b      	ldrb	r3, [r7, #13]
 800cf42:	f1c3 0307 	rsb	r3, r3, #7
 800cf46:	2201      	movs	r2, #1
 800cf48:	fa02 f303 	lsl.w	r3, r2, r3
 800cf4c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800cf4e:	797b      	ldrb	r3, [r7, #5]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d012      	beq.n	800cf7a <OLED_DrawPoint+0x72>
 800cf54:	79fa      	ldrb	r2, [r7, #7]
 800cf56:	7bbb      	ldrb	r3, [r7, #14]
 800cf58:	4917      	ldr	r1, [pc, #92]	@ (800cfb8 <OLED_DrawPoint+0xb0>)
 800cf5a:	00d2      	lsls	r2, r2, #3
 800cf5c:	440a      	add	r2, r1
 800cf5e:	4413      	add	r3, r2
 800cf60:	7818      	ldrb	r0, [r3, #0]
 800cf62:	79fa      	ldrb	r2, [r7, #7]
 800cf64:	7bbb      	ldrb	r3, [r7, #14]
 800cf66:	7bf9      	ldrb	r1, [r7, #15]
 800cf68:	4301      	orrs	r1, r0
 800cf6a:	b2c8      	uxtb	r0, r1
 800cf6c:	4912      	ldr	r1, [pc, #72]	@ (800cfb8 <OLED_DrawPoint+0xb0>)
 800cf6e:	00d2      	lsls	r2, r2, #3
 800cf70:	440a      	add	r2, r1
 800cf72:	4413      	add	r3, r2
 800cf74:	4602      	mov	r2, r0
 800cf76:	701a      	strb	r2, [r3, #0]
 800cf78:	e018      	b.n	800cfac <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800cf7a:	79fa      	ldrb	r2, [r7, #7]
 800cf7c:	7bbb      	ldrb	r3, [r7, #14]
 800cf7e:	490e      	ldr	r1, [pc, #56]	@ (800cfb8 <OLED_DrawPoint+0xb0>)
 800cf80:	00d2      	lsls	r2, r2, #3
 800cf82:	440a      	add	r2, r1
 800cf84:	4413      	add	r3, r2
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	b25a      	sxtb	r2, r3
 800cf8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf8e:	43db      	mvns	r3, r3
 800cf90:	b25b      	sxtb	r3, r3
 800cf92:	4013      	ands	r3, r2
 800cf94:	b259      	sxtb	r1, r3
 800cf96:	79fa      	ldrb	r2, [r7, #7]
 800cf98:	7bbb      	ldrb	r3, [r7, #14]
 800cf9a:	b2c8      	uxtb	r0, r1
 800cf9c:	4906      	ldr	r1, [pc, #24]	@ (800cfb8 <OLED_DrawPoint+0xb0>)
 800cf9e:	00d2      	lsls	r2, r2, #3
 800cfa0:	440a      	add	r2, r1
 800cfa2:	4413      	add	r3, r2
 800cfa4:	4602      	mov	r2, r0
 800cfa6:	701a      	strb	r2, [r3, #0]
 800cfa8:	e000      	b.n	800cfac <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800cfaa:	bf00      	nop
}
 800cfac:	3714      	adds	r7, #20
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb4:	4770      	bx	lr
 800cfb6:	bf00      	nop
 800cfb8:	20004f6c 	.word	0x20004f6c

0800cfbc <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800cfbc:	b590      	push	{r4, r7, lr}
 800cfbe:	b085      	sub	sp, #20
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	4604      	mov	r4, r0
 800cfc4:	4608      	mov	r0, r1
 800cfc6:	4611      	mov	r1, r2
 800cfc8:	461a      	mov	r2, r3
 800cfca:	4623      	mov	r3, r4
 800cfcc:	71fb      	strb	r3, [r7, #7]
 800cfce:	4603      	mov	r3, r0
 800cfd0:	71bb      	strb	r3, [r7, #6]
 800cfd2:	460b      	mov	r3, r1
 800cfd4:	717b      	strb	r3, [r7, #5]
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800cfda:	79bb      	ldrb	r3, [r7, #6]
 800cfdc:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800cfde:	797b      	ldrb	r3, [r7, #5]
 800cfe0:	3b20      	subs	r3, #32
 800cfe2:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	73bb      	strb	r3, [r7, #14]
 800cfe8:	e04d      	b.n	800d086 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800cfea:	793b      	ldrb	r3, [r7, #4]
 800cfec:	2b0c      	cmp	r3, #12
 800cfee:	d10b      	bne.n	800d008 <OLED_ShowChar+0x4c>
 800cff0:	797a      	ldrb	r2, [r7, #5]
 800cff2:	7bb9      	ldrb	r1, [r7, #14]
 800cff4:	4828      	ldr	r0, [pc, #160]	@ (800d098 <OLED_ShowChar+0xdc>)
 800cff6:	4613      	mov	r3, r2
 800cff8:	005b      	lsls	r3, r3, #1
 800cffa:	4413      	add	r3, r2
 800cffc:	009b      	lsls	r3, r3, #2
 800cffe:	4403      	add	r3, r0
 800d000:	440b      	add	r3, r1
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	73fb      	strb	r3, [r7, #15]
 800d006:	e007      	b.n	800d018 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800d008:	797a      	ldrb	r2, [r7, #5]
 800d00a:	7bbb      	ldrb	r3, [r7, #14]
 800d00c:	4923      	ldr	r1, [pc, #140]	@ (800d09c <OLED_ShowChar+0xe0>)
 800d00e:	0112      	lsls	r2, r2, #4
 800d010:	440a      	add	r2, r1
 800d012:	4413      	add	r3, r2
 800d014:	781b      	ldrb	r3, [r3, #0]
 800d016:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800d018:	2300      	movs	r3, #0
 800d01a:	737b      	strb	r3, [r7, #13]
 800d01c:	e02d      	b.n	800d07a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800d01e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d022:	2b00      	cmp	r3, #0
 800d024:	da07      	bge.n	800d036 <OLED_ShowChar+0x7a>
 800d026:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d02a:	79b9      	ldrb	r1, [r7, #6]
 800d02c:	79fb      	ldrb	r3, [r7, #7]
 800d02e:	4618      	mov	r0, r3
 800d030:	f7ff ff6a 	bl	800cf08 <OLED_DrawPoint>
 800d034:	e00c      	b.n	800d050 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800d036:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	bf0c      	ite	eq
 800d03e:	2301      	moveq	r3, #1
 800d040:	2300      	movne	r3, #0
 800d042:	b2db      	uxtb	r3, r3
 800d044:	461a      	mov	r2, r3
 800d046:	79b9      	ldrb	r1, [r7, #6]
 800d048:	79fb      	ldrb	r3, [r7, #7]
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7ff ff5c 	bl	800cf08 <OLED_DrawPoint>
			temp<<=1;
 800d050:	7bfb      	ldrb	r3, [r7, #15]
 800d052:	005b      	lsls	r3, r3, #1
 800d054:	73fb      	strb	r3, [r7, #15]
			y++;
 800d056:	79bb      	ldrb	r3, [r7, #6]
 800d058:	3301      	adds	r3, #1
 800d05a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800d05c:	79ba      	ldrb	r2, [r7, #6]
 800d05e:	7b3b      	ldrb	r3, [r7, #12]
 800d060:	1ad2      	subs	r2, r2, r3
 800d062:	793b      	ldrb	r3, [r7, #4]
 800d064:	429a      	cmp	r2, r3
 800d066:	d105      	bne.n	800d074 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800d068:	7b3b      	ldrb	r3, [r7, #12]
 800d06a:	71bb      	strb	r3, [r7, #6]
				x++;
 800d06c:	79fb      	ldrb	r3, [r7, #7]
 800d06e:	3301      	adds	r3, #1
 800d070:	71fb      	strb	r3, [r7, #7]
				break;
 800d072:	e005      	b.n	800d080 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800d074:	7b7b      	ldrb	r3, [r7, #13]
 800d076:	3301      	adds	r3, #1
 800d078:	737b      	strb	r3, [r7, #13]
 800d07a:	7b7b      	ldrb	r3, [r7, #13]
 800d07c:	2b07      	cmp	r3, #7
 800d07e:	d9ce      	bls.n	800d01e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800d080:	7bbb      	ldrb	r3, [r7, #14]
 800d082:	3301      	adds	r3, #1
 800d084:	73bb      	strb	r3, [r7, #14]
 800d086:	7bba      	ldrb	r2, [r7, #14]
 800d088:	793b      	ldrb	r3, [r7, #4]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d3ad      	bcc.n	800cfea <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800d08e:	bf00      	nop
 800d090:	bf00      	nop
 800d092:	3714      	adds	r7, #20
 800d094:	46bd      	mov	sp, r7
 800d096:	bd90      	pop	{r4, r7, pc}
 800d098:	080115a4 	.word	0x080115a4
 800d09c:	08011a18 	.word	0x08011a18

0800d0a0 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	af02      	add	r7, sp, #8
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	603a      	str	r2, [r7, #0]
 800d0aa:	71fb      	strb	r3, [r7, #7]
 800d0ac:	460b      	mov	r3, r1
 800d0ae:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800d0b0:	e01f      	b.n	800d0f2 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800d0b2:	79fb      	ldrb	r3, [r7, #7]
 800d0b4:	2b7a      	cmp	r3, #122	@ 0x7a
 800d0b6:	d904      	bls.n	800d0c2 <OLED_ShowString+0x22>
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	71fb      	strb	r3, [r7, #7]
 800d0bc:	79bb      	ldrb	r3, [r7, #6]
 800d0be:	3310      	adds	r3, #16
 800d0c0:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800d0c2:	79bb      	ldrb	r3, [r7, #6]
 800d0c4:	2b3a      	cmp	r3, #58	@ 0x3a
 800d0c6:	d905      	bls.n	800d0d4 <OLED_ShowString+0x34>
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	71fb      	strb	r3, [r7, #7]
 800d0cc:	79fb      	ldrb	r3, [r7, #7]
 800d0ce:	71bb      	strb	r3, [r7, #6]
 800d0d0:	f7ff fef4 	bl	800cebc <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	781a      	ldrb	r2, [r3, #0]
 800d0d8:	79b9      	ldrb	r1, [r7, #6]
 800d0da:	79f8      	ldrb	r0, [r7, #7]
 800d0dc:	2301      	movs	r3, #1
 800d0de:	9300      	str	r3, [sp, #0]
 800d0e0:	230c      	movs	r3, #12
 800d0e2:	f7ff ff6b 	bl	800cfbc <OLED_ShowChar>
        x+=8;
 800d0e6:	79fb      	ldrb	r3, [r7, #7]
 800d0e8:	3308      	adds	r3, #8
 800d0ea:	71fb      	strb	r3, [r7, #7]
        p++;
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	3301      	adds	r3, #1
 800d0f0:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d1db      	bne.n	800d0b2 <OLED_ShowString+0x12>
    }  
}	 
 800d0fa:	bf00      	nop
 800d0fc:	bf00      	nop
 800d0fe:	3708      	adds	r7, #8
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <OLED_Init>:

void OLED_Init(void)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800d108:	f7f9 fa10 	bl	800652c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800d10c:	4b41      	ldr	r3, [pc, #260]	@ (800d214 <OLED_Init+0x110>)
 800d10e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d110:	4a40      	ldr	r2, [pc, #256]	@ (800d214 <OLED_Init+0x110>)
 800d112:	f023 0301 	bic.w	r3, r3, #1
 800d116:	6713      	str	r3, [r2, #112]	@ 0x70
 800d118:	4b3e      	ldr	r3, [pc, #248]	@ (800d214 <OLED_Init+0x110>)
 800d11a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d11c:	4a3d      	ldr	r2, [pc, #244]	@ (800d214 <OLED_Init+0x110>)
 800d11e:	f023 0304 	bic.w	r3, r3, #4
 800d122:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800d124:	f7f9 fa16 	bl	8006554 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800d128:	2200      	movs	r2, #0
 800d12a:	2180      	movs	r1, #128	@ 0x80
 800d12c:	483a      	ldr	r0, [pc, #232]	@ (800d218 <OLED_Init+0x114>)
 800d12e:	f7f8 f98d 	bl	800544c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800d132:	2064      	movs	r0, #100	@ 0x64
 800d134:	f7f7 fa0e 	bl	8004554 <HAL_Delay>
	OLED_RST_Set();
 800d138:	2201      	movs	r2, #1
 800d13a:	2180      	movs	r1, #128	@ 0x80
 800d13c:	4836      	ldr	r0, [pc, #216]	@ (800d218 <OLED_Init+0x114>)
 800d13e:	f7f8 f985 	bl	800544c <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800d142:	2100      	movs	r1, #0
 800d144:	20ae      	movs	r0, #174	@ 0xae
 800d146:	f7ff fe6f 	bl	800ce28 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800d14a:	2100      	movs	r1, #0
 800d14c:	20d5      	movs	r0, #213	@ 0xd5
 800d14e:	f7ff fe6b 	bl	800ce28 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800d152:	2100      	movs	r1, #0
 800d154:	2050      	movs	r0, #80	@ 0x50
 800d156:	f7ff fe67 	bl	800ce28 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800d15a:	2100      	movs	r1, #0
 800d15c:	20a8      	movs	r0, #168	@ 0xa8
 800d15e:	f7ff fe63 	bl	800ce28 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800d162:	2100      	movs	r1, #0
 800d164:	203f      	movs	r0, #63	@ 0x3f
 800d166:	f7ff fe5f 	bl	800ce28 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800d16a:	2100      	movs	r1, #0
 800d16c:	20d3      	movs	r0, #211	@ 0xd3
 800d16e:	f7ff fe5b 	bl	800ce28 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800d172:	2100      	movs	r1, #0
 800d174:	2000      	movs	r0, #0
 800d176:	f7ff fe57 	bl	800ce28 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800d17a:	2100      	movs	r1, #0
 800d17c:	2040      	movs	r0, #64	@ 0x40
 800d17e:	f7ff fe53 	bl	800ce28 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800d182:	2100      	movs	r1, #0
 800d184:	208d      	movs	r0, #141	@ 0x8d
 800d186:	f7ff fe4f 	bl	800ce28 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800d18a:	2100      	movs	r1, #0
 800d18c:	2014      	movs	r0, #20
 800d18e:	f7ff fe4b 	bl	800ce28 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800d192:	2100      	movs	r1, #0
 800d194:	2020      	movs	r0, #32
 800d196:	f7ff fe47 	bl	800ce28 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800d19a:	2100      	movs	r1, #0
 800d19c:	2002      	movs	r0, #2
 800d19e:	f7ff fe43 	bl	800ce28 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800d1a2:	2100      	movs	r1, #0
 800d1a4:	20a1      	movs	r0, #161	@ 0xa1
 800d1a6:	f7ff fe3f 	bl	800ce28 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800d1aa:	2100      	movs	r1, #0
 800d1ac:	20c0      	movs	r0, #192	@ 0xc0
 800d1ae:	f7ff fe3b 	bl	800ce28 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800d1b2:	2100      	movs	r1, #0
 800d1b4:	20da      	movs	r0, #218	@ 0xda
 800d1b6:	f7ff fe37 	bl	800ce28 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800d1ba:	2100      	movs	r1, #0
 800d1bc:	2012      	movs	r0, #18
 800d1be:	f7ff fe33 	bl	800ce28 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800d1c2:	2100      	movs	r1, #0
 800d1c4:	2081      	movs	r0, #129	@ 0x81
 800d1c6:	f7ff fe2f 	bl	800ce28 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800d1ca:	2100      	movs	r1, #0
 800d1cc:	20ef      	movs	r0, #239	@ 0xef
 800d1ce:	f7ff fe2b 	bl	800ce28 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800d1d2:	2100      	movs	r1, #0
 800d1d4:	20d9      	movs	r0, #217	@ 0xd9
 800d1d6:	f7ff fe27 	bl	800ce28 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800d1da:	2100      	movs	r1, #0
 800d1dc:	20f1      	movs	r0, #241	@ 0xf1
 800d1de:	f7ff fe23 	bl	800ce28 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800d1e2:	2100      	movs	r1, #0
 800d1e4:	20db      	movs	r0, #219	@ 0xdb
 800d1e6:	f7ff fe1f 	bl	800ce28 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800d1ea:	2100      	movs	r1, #0
 800d1ec:	2030      	movs	r0, #48	@ 0x30
 800d1ee:	f7ff fe1b 	bl	800ce28 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800d1f2:	2100      	movs	r1, #0
 800d1f4:	20a4      	movs	r0, #164	@ 0xa4
 800d1f6:	f7ff fe17 	bl	800ce28 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800d1fa:	2100      	movs	r1, #0
 800d1fc:	20a6      	movs	r0, #166	@ 0xa6
 800d1fe:	f7ff fe13 	bl	800ce28 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800d202:	2100      	movs	r1, #0
 800d204:	20af      	movs	r0, #175	@ 0xaf
 800d206:	f7ff fe0f 	bl	800ce28 <OLED_WR_Byte>
	OLED_Clear(); 
 800d20a:	f7ff fe57 	bl	800cebc <OLED_Clear>
 800d20e:	bf00      	nop
 800d210:	bd80      	pop	{r7, pc}
 800d212:	bf00      	nop
 800d214:	40023800 	.word	0x40023800
 800d218:	40021000 	.word	0x40021000

0800d21c <__cvt>:
 800d21c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d220:	ec57 6b10 	vmov	r6, r7, d0
 800d224:	2f00      	cmp	r7, #0
 800d226:	460c      	mov	r4, r1
 800d228:	4619      	mov	r1, r3
 800d22a:	463b      	mov	r3, r7
 800d22c:	bfbb      	ittet	lt
 800d22e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d232:	461f      	movlt	r7, r3
 800d234:	2300      	movge	r3, #0
 800d236:	232d      	movlt	r3, #45	@ 0x2d
 800d238:	700b      	strb	r3, [r1, #0]
 800d23a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d23c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d240:	4691      	mov	r9, r2
 800d242:	f023 0820 	bic.w	r8, r3, #32
 800d246:	bfbc      	itt	lt
 800d248:	4632      	movlt	r2, r6
 800d24a:	4616      	movlt	r6, r2
 800d24c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d250:	d005      	beq.n	800d25e <__cvt+0x42>
 800d252:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d256:	d100      	bne.n	800d25a <__cvt+0x3e>
 800d258:	3401      	adds	r4, #1
 800d25a:	2102      	movs	r1, #2
 800d25c:	e000      	b.n	800d260 <__cvt+0x44>
 800d25e:	2103      	movs	r1, #3
 800d260:	ab03      	add	r3, sp, #12
 800d262:	9301      	str	r3, [sp, #4]
 800d264:	ab02      	add	r3, sp, #8
 800d266:	9300      	str	r3, [sp, #0]
 800d268:	ec47 6b10 	vmov	d0, r6, r7
 800d26c:	4653      	mov	r3, sl
 800d26e:	4622      	mov	r2, r4
 800d270:	f000 feae 	bl	800dfd0 <_dtoa_r>
 800d274:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d278:	4605      	mov	r5, r0
 800d27a:	d119      	bne.n	800d2b0 <__cvt+0x94>
 800d27c:	f019 0f01 	tst.w	r9, #1
 800d280:	d00e      	beq.n	800d2a0 <__cvt+0x84>
 800d282:	eb00 0904 	add.w	r9, r0, r4
 800d286:	2200      	movs	r2, #0
 800d288:	2300      	movs	r3, #0
 800d28a:	4630      	mov	r0, r6
 800d28c:	4639      	mov	r1, r7
 800d28e:	f7f3 fc1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d292:	b108      	cbz	r0, 800d298 <__cvt+0x7c>
 800d294:	f8cd 900c 	str.w	r9, [sp, #12]
 800d298:	2230      	movs	r2, #48	@ 0x30
 800d29a:	9b03      	ldr	r3, [sp, #12]
 800d29c:	454b      	cmp	r3, r9
 800d29e:	d31e      	bcc.n	800d2de <__cvt+0xc2>
 800d2a0:	9b03      	ldr	r3, [sp, #12]
 800d2a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2a4:	1b5b      	subs	r3, r3, r5
 800d2a6:	4628      	mov	r0, r5
 800d2a8:	6013      	str	r3, [r2, #0]
 800d2aa:	b004      	add	sp, #16
 800d2ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d2b4:	eb00 0904 	add.w	r9, r0, r4
 800d2b8:	d1e5      	bne.n	800d286 <__cvt+0x6a>
 800d2ba:	7803      	ldrb	r3, [r0, #0]
 800d2bc:	2b30      	cmp	r3, #48	@ 0x30
 800d2be:	d10a      	bne.n	800d2d6 <__cvt+0xba>
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	4630      	mov	r0, r6
 800d2c6:	4639      	mov	r1, r7
 800d2c8:	f7f3 fbfe 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2cc:	b918      	cbnz	r0, 800d2d6 <__cvt+0xba>
 800d2ce:	f1c4 0401 	rsb	r4, r4, #1
 800d2d2:	f8ca 4000 	str.w	r4, [sl]
 800d2d6:	f8da 3000 	ldr.w	r3, [sl]
 800d2da:	4499      	add	r9, r3
 800d2dc:	e7d3      	b.n	800d286 <__cvt+0x6a>
 800d2de:	1c59      	adds	r1, r3, #1
 800d2e0:	9103      	str	r1, [sp, #12]
 800d2e2:	701a      	strb	r2, [r3, #0]
 800d2e4:	e7d9      	b.n	800d29a <__cvt+0x7e>

0800d2e6 <__exponent>:
 800d2e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2e8:	2900      	cmp	r1, #0
 800d2ea:	bfba      	itte	lt
 800d2ec:	4249      	neglt	r1, r1
 800d2ee:	232d      	movlt	r3, #45	@ 0x2d
 800d2f0:	232b      	movge	r3, #43	@ 0x2b
 800d2f2:	2909      	cmp	r1, #9
 800d2f4:	7002      	strb	r2, [r0, #0]
 800d2f6:	7043      	strb	r3, [r0, #1]
 800d2f8:	dd29      	ble.n	800d34e <__exponent+0x68>
 800d2fa:	f10d 0307 	add.w	r3, sp, #7
 800d2fe:	461d      	mov	r5, r3
 800d300:	270a      	movs	r7, #10
 800d302:	461a      	mov	r2, r3
 800d304:	fbb1 f6f7 	udiv	r6, r1, r7
 800d308:	fb07 1416 	mls	r4, r7, r6, r1
 800d30c:	3430      	adds	r4, #48	@ 0x30
 800d30e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d312:	460c      	mov	r4, r1
 800d314:	2c63      	cmp	r4, #99	@ 0x63
 800d316:	f103 33ff 	add.w	r3, r3, #4294967295
 800d31a:	4631      	mov	r1, r6
 800d31c:	dcf1      	bgt.n	800d302 <__exponent+0x1c>
 800d31e:	3130      	adds	r1, #48	@ 0x30
 800d320:	1e94      	subs	r4, r2, #2
 800d322:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d326:	1c41      	adds	r1, r0, #1
 800d328:	4623      	mov	r3, r4
 800d32a:	42ab      	cmp	r3, r5
 800d32c:	d30a      	bcc.n	800d344 <__exponent+0x5e>
 800d32e:	f10d 0309 	add.w	r3, sp, #9
 800d332:	1a9b      	subs	r3, r3, r2
 800d334:	42ac      	cmp	r4, r5
 800d336:	bf88      	it	hi
 800d338:	2300      	movhi	r3, #0
 800d33a:	3302      	adds	r3, #2
 800d33c:	4403      	add	r3, r0
 800d33e:	1a18      	subs	r0, r3, r0
 800d340:	b003      	add	sp, #12
 800d342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d344:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d348:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d34c:	e7ed      	b.n	800d32a <__exponent+0x44>
 800d34e:	2330      	movs	r3, #48	@ 0x30
 800d350:	3130      	adds	r1, #48	@ 0x30
 800d352:	7083      	strb	r3, [r0, #2]
 800d354:	70c1      	strb	r1, [r0, #3]
 800d356:	1d03      	adds	r3, r0, #4
 800d358:	e7f1      	b.n	800d33e <__exponent+0x58>
	...

0800d35c <_printf_float>:
 800d35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d360:	b08d      	sub	sp, #52	@ 0x34
 800d362:	460c      	mov	r4, r1
 800d364:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d368:	4616      	mov	r6, r2
 800d36a:	461f      	mov	r7, r3
 800d36c:	4605      	mov	r5, r0
 800d36e:	f000 fd21 	bl	800ddb4 <_localeconv_r>
 800d372:	6803      	ldr	r3, [r0, #0]
 800d374:	9304      	str	r3, [sp, #16]
 800d376:	4618      	mov	r0, r3
 800d378:	f7f2 ff7a 	bl	8000270 <strlen>
 800d37c:	2300      	movs	r3, #0
 800d37e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d380:	f8d8 3000 	ldr.w	r3, [r8]
 800d384:	9005      	str	r0, [sp, #20]
 800d386:	3307      	adds	r3, #7
 800d388:	f023 0307 	bic.w	r3, r3, #7
 800d38c:	f103 0208 	add.w	r2, r3, #8
 800d390:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d394:	f8d4 b000 	ldr.w	fp, [r4]
 800d398:	f8c8 2000 	str.w	r2, [r8]
 800d39c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d3a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d3a4:	9307      	str	r3, [sp, #28]
 800d3a6:	f8cd 8018 	str.w	r8, [sp, #24]
 800d3aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d3ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d3b2:	4b9c      	ldr	r3, [pc, #624]	@ (800d624 <_printf_float+0x2c8>)
 800d3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3b8:	f7f3 fbb8 	bl	8000b2c <__aeabi_dcmpun>
 800d3bc:	bb70      	cbnz	r0, 800d41c <_printf_float+0xc0>
 800d3be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d3c2:	4b98      	ldr	r3, [pc, #608]	@ (800d624 <_printf_float+0x2c8>)
 800d3c4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3c8:	f7f3 fb92 	bl	8000af0 <__aeabi_dcmple>
 800d3cc:	bb30      	cbnz	r0, 800d41c <_printf_float+0xc0>
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	4640      	mov	r0, r8
 800d3d4:	4649      	mov	r1, r9
 800d3d6:	f7f3 fb81 	bl	8000adc <__aeabi_dcmplt>
 800d3da:	b110      	cbz	r0, 800d3e2 <_printf_float+0x86>
 800d3dc:	232d      	movs	r3, #45	@ 0x2d
 800d3de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d3e2:	4a91      	ldr	r2, [pc, #580]	@ (800d628 <_printf_float+0x2cc>)
 800d3e4:	4b91      	ldr	r3, [pc, #580]	@ (800d62c <_printf_float+0x2d0>)
 800d3e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d3ea:	bf94      	ite	ls
 800d3ec:	4690      	movls	r8, r2
 800d3ee:	4698      	movhi	r8, r3
 800d3f0:	2303      	movs	r3, #3
 800d3f2:	6123      	str	r3, [r4, #16]
 800d3f4:	f02b 0304 	bic.w	r3, fp, #4
 800d3f8:	6023      	str	r3, [r4, #0]
 800d3fa:	f04f 0900 	mov.w	r9, #0
 800d3fe:	9700      	str	r7, [sp, #0]
 800d400:	4633      	mov	r3, r6
 800d402:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d404:	4621      	mov	r1, r4
 800d406:	4628      	mov	r0, r5
 800d408:	f000 f9d2 	bl	800d7b0 <_printf_common>
 800d40c:	3001      	adds	r0, #1
 800d40e:	f040 808d 	bne.w	800d52c <_printf_float+0x1d0>
 800d412:	f04f 30ff 	mov.w	r0, #4294967295
 800d416:	b00d      	add	sp, #52	@ 0x34
 800d418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d41c:	4642      	mov	r2, r8
 800d41e:	464b      	mov	r3, r9
 800d420:	4640      	mov	r0, r8
 800d422:	4649      	mov	r1, r9
 800d424:	f7f3 fb82 	bl	8000b2c <__aeabi_dcmpun>
 800d428:	b140      	cbz	r0, 800d43c <_printf_float+0xe0>
 800d42a:	464b      	mov	r3, r9
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	bfbc      	itt	lt
 800d430:	232d      	movlt	r3, #45	@ 0x2d
 800d432:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d436:	4a7e      	ldr	r2, [pc, #504]	@ (800d630 <_printf_float+0x2d4>)
 800d438:	4b7e      	ldr	r3, [pc, #504]	@ (800d634 <_printf_float+0x2d8>)
 800d43a:	e7d4      	b.n	800d3e6 <_printf_float+0x8a>
 800d43c:	6863      	ldr	r3, [r4, #4]
 800d43e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d442:	9206      	str	r2, [sp, #24]
 800d444:	1c5a      	adds	r2, r3, #1
 800d446:	d13b      	bne.n	800d4c0 <_printf_float+0x164>
 800d448:	2306      	movs	r3, #6
 800d44a:	6063      	str	r3, [r4, #4]
 800d44c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d450:	2300      	movs	r3, #0
 800d452:	6022      	str	r2, [r4, #0]
 800d454:	9303      	str	r3, [sp, #12]
 800d456:	ab0a      	add	r3, sp, #40	@ 0x28
 800d458:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d45c:	ab09      	add	r3, sp, #36	@ 0x24
 800d45e:	9300      	str	r3, [sp, #0]
 800d460:	6861      	ldr	r1, [r4, #4]
 800d462:	ec49 8b10 	vmov	d0, r8, r9
 800d466:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d46a:	4628      	mov	r0, r5
 800d46c:	f7ff fed6 	bl	800d21c <__cvt>
 800d470:	9b06      	ldr	r3, [sp, #24]
 800d472:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d474:	2b47      	cmp	r3, #71	@ 0x47
 800d476:	4680      	mov	r8, r0
 800d478:	d129      	bne.n	800d4ce <_printf_float+0x172>
 800d47a:	1cc8      	adds	r0, r1, #3
 800d47c:	db02      	blt.n	800d484 <_printf_float+0x128>
 800d47e:	6863      	ldr	r3, [r4, #4]
 800d480:	4299      	cmp	r1, r3
 800d482:	dd41      	ble.n	800d508 <_printf_float+0x1ac>
 800d484:	f1aa 0a02 	sub.w	sl, sl, #2
 800d488:	fa5f fa8a 	uxtb.w	sl, sl
 800d48c:	3901      	subs	r1, #1
 800d48e:	4652      	mov	r2, sl
 800d490:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d494:	9109      	str	r1, [sp, #36]	@ 0x24
 800d496:	f7ff ff26 	bl	800d2e6 <__exponent>
 800d49a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d49c:	1813      	adds	r3, r2, r0
 800d49e:	2a01      	cmp	r2, #1
 800d4a0:	4681      	mov	r9, r0
 800d4a2:	6123      	str	r3, [r4, #16]
 800d4a4:	dc02      	bgt.n	800d4ac <_printf_float+0x150>
 800d4a6:	6822      	ldr	r2, [r4, #0]
 800d4a8:	07d2      	lsls	r2, r2, #31
 800d4aa:	d501      	bpl.n	800d4b0 <_printf_float+0x154>
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	6123      	str	r3, [r4, #16]
 800d4b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d0a2      	beq.n	800d3fe <_printf_float+0xa2>
 800d4b8:	232d      	movs	r3, #45	@ 0x2d
 800d4ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d4be:	e79e      	b.n	800d3fe <_printf_float+0xa2>
 800d4c0:	9a06      	ldr	r2, [sp, #24]
 800d4c2:	2a47      	cmp	r2, #71	@ 0x47
 800d4c4:	d1c2      	bne.n	800d44c <_printf_float+0xf0>
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d1c0      	bne.n	800d44c <_printf_float+0xf0>
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	e7bd      	b.n	800d44a <_printf_float+0xee>
 800d4ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d4d2:	d9db      	bls.n	800d48c <_printf_float+0x130>
 800d4d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d4d8:	d118      	bne.n	800d50c <_printf_float+0x1b0>
 800d4da:	2900      	cmp	r1, #0
 800d4dc:	6863      	ldr	r3, [r4, #4]
 800d4de:	dd0b      	ble.n	800d4f8 <_printf_float+0x19c>
 800d4e0:	6121      	str	r1, [r4, #16]
 800d4e2:	b913      	cbnz	r3, 800d4ea <_printf_float+0x18e>
 800d4e4:	6822      	ldr	r2, [r4, #0]
 800d4e6:	07d0      	lsls	r0, r2, #31
 800d4e8:	d502      	bpl.n	800d4f0 <_printf_float+0x194>
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	440b      	add	r3, r1
 800d4ee:	6123      	str	r3, [r4, #16]
 800d4f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d4f2:	f04f 0900 	mov.w	r9, #0
 800d4f6:	e7db      	b.n	800d4b0 <_printf_float+0x154>
 800d4f8:	b913      	cbnz	r3, 800d500 <_printf_float+0x1a4>
 800d4fa:	6822      	ldr	r2, [r4, #0]
 800d4fc:	07d2      	lsls	r2, r2, #31
 800d4fe:	d501      	bpl.n	800d504 <_printf_float+0x1a8>
 800d500:	3302      	adds	r3, #2
 800d502:	e7f4      	b.n	800d4ee <_printf_float+0x192>
 800d504:	2301      	movs	r3, #1
 800d506:	e7f2      	b.n	800d4ee <_printf_float+0x192>
 800d508:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d50c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d50e:	4299      	cmp	r1, r3
 800d510:	db05      	blt.n	800d51e <_printf_float+0x1c2>
 800d512:	6823      	ldr	r3, [r4, #0]
 800d514:	6121      	str	r1, [r4, #16]
 800d516:	07d8      	lsls	r0, r3, #31
 800d518:	d5ea      	bpl.n	800d4f0 <_printf_float+0x194>
 800d51a:	1c4b      	adds	r3, r1, #1
 800d51c:	e7e7      	b.n	800d4ee <_printf_float+0x192>
 800d51e:	2900      	cmp	r1, #0
 800d520:	bfd4      	ite	le
 800d522:	f1c1 0202 	rsble	r2, r1, #2
 800d526:	2201      	movgt	r2, #1
 800d528:	4413      	add	r3, r2
 800d52a:	e7e0      	b.n	800d4ee <_printf_float+0x192>
 800d52c:	6823      	ldr	r3, [r4, #0]
 800d52e:	055a      	lsls	r2, r3, #21
 800d530:	d407      	bmi.n	800d542 <_printf_float+0x1e6>
 800d532:	6923      	ldr	r3, [r4, #16]
 800d534:	4642      	mov	r2, r8
 800d536:	4631      	mov	r1, r6
 800d538:	4628      	mov	r0, r5
 800d53a:	47b8      	blx	r7
 800d53c:	3001      	adds	r0, #1
 800d53e:	d12b      	bne.n	800d598 <_printf_float+0x23c>
 800d540:	e767      	b.n	800d412 <_printf_float+0xb6>
 800d542:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d546:	f240 80dd 	bls.w	800d704 <_printf_float+0x3a8>
 800d54a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d54e:	2200      	movs	r2, #0
 800d550:	2300      	movs	r3, #0
 800d552:	f7f3 fab9 	bl	8000ac8 <__aeabi_dcmpeq>
 800d556:	2800      	cmp	r0, #0
 800d558:	d033      	beq.n	800d5c2 <_printf_float+0x266>
 800d55a:	4a37      	ldr	r2, [pc, #220]	@ (800d638 <_printf_float+0x2dc>)
 800d55c:	2301      	movs	r3, #1
 800d55e:	4631      	mov	r1, r6
 800d560:	4628      	mov	r0, r5
 800d562:	47b8      	blx	r7
 800d564:	3001      	adds	r0, #1
 800d566:	f43f af54 	beq.w	800d412 <_printf_float+0xb6>
 800d56a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d56e:	4543      	cmp	r3, r8
 800d570:	db02      	blt.n	800d578 <_printf_float+0x21c>
 800d572:	6823      	ldr	r3, [r4, #0]
 800d574:	07d8      	lsls	r0, r3, #31
 800d576:	d50f      	bpl.n	800d598 <_printf_float+0x23c>
 800d578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d57c:	4631      	mov	r1, r6
 800d57e:	4628      	mov	r0, r5
 800d580:	47b8      	blx	r7
 800d582:	3001      	adds	r0, #1
 800d584:	f43f af45 	beq.w	800d412 <_printf_float+0xb6>
 800d588:	f04f 0900 	mov.w	r9, #0
 800d58c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d590:	f104 0a1a 	add.w	sl, r4, #26
 800d594:	45c8      	cmp	r8, r9
 800d596:	dc09      	bgt.n	800d5ac <_printf_float+0x250>
 800d598:	6823      	ldr	r3, [r4, #0]
 800d59a:	079b      	lsls	r3, r3, #30
 800d59c:	f100 8103 	bmi.w	800d7a6 <_printf_float+0x44a>
 800d5a0:	68e0      	ldr	r0, [r4, #12]
 800d5a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5a4:	4298      	cmp	r0, r3
 800d5a6:	bfb8      	it	lt
 800d5a8:	4618      	movlt	r0, r3
 800d5aa:	e734      	b.n	800d416 <_printf_float+0xba>
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	4652      	mov	r2, sl
 800d5b0:	4631      	mov	r1, r6
 800d5b2:	4628      	mov	r0, r5
 800d5b4:	47b8      	blx	r7
 800d5b6:	3001      	adds	r0, #1
 800d5b8:	f43f af2b 	beq.w	800d412 <_printf_float+0xb6>
 800d5bc:	f109 0901 	add.w	r9, r9, #1
 800d5c0:	e7e8      	b.n	800d594 <_printf_float+0x238>
 800d5c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	dc39      	bgt.n	800d63c <_printf_float+0x2e0>
 800d5c8:	4a1b      	ldr	r2, [pc, #108]	@ (800d638 <_printf_float+0x2dc>)
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	4631      	mov	r1, r6
 800d5ce:	4628      	mov	r0, r5
 800d5d0:	47b8      	blx	r7
 800d5d2:	3001      	adds	r0, #1
 800d5d4:	f43f af1d 	beq.w	800d412 <_printf_float+0xb6>
 800d5d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d5dc:	ea59 0303 	orrs.w	r3, r9, r3
 800d5e0:	d102      	bne.n	800d5e8 <_printf_float+0x28c>
 800d5e2:	6823      	ldr	r3, [r4, #0]
 800d5e4:	07d9      	lsls	r1, r3, #31
 800d5e6:	d5d7      	bpl.n	800d598 <_printf_float+0x23c>
 800d5e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d5ec:	4631      	mov	r1, r6
 800d5ee:	4628      	mov	r0, r5
 800d5f0:	47b8      	blx	r7
 800d5f2:	3001      	adds	r0, #1
 800d5f4:	f43f af0d 	beq.w	800d412 <_printf_float+0xb6>
 800d5f8:	f04f 0a00 	mov.w	sl, #0
 800d5fc:	f104 0b1a 	add.w	fp, r4, #26
 800d600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d602:	425b      	negs	r3, r3
 800d604:	4553      	cmp	r3, sl
 800d606:	dc01      	bgt.n	800d60c <_printf_float+0x2b0>
 800d608:	464b      	mov	r3, r9
 800d60a:	e793      	b.n	800d534 <_printf_float+0x1d8>
 800d60c:	2301      	movs	r3, #1
 800d60e:	465a      	mov	r2, fp
 800d610:	4631      	mov	r1, r6
 800d612:	4628      	mov	r0, r5
 800d614:	47b8      	blx	r7
 800d616:	3001      	adds	r0, #1
 800d618:	f43f aefb 	beq.w	800d412 <_printf_float+0xb6>
 800d61c:	f10a 0a01 	add.w	sl, sl, #1
 800d620:	e7ee      	b.n	800d600 <_printf_float+0x2a4>
 800d622:	bf00      	nop
 800d624:	7fefffff 	.word	0x7fefffff
 800d628:	08012008 	.word	0x08012008
 800d62c:	0801200c 	.word	0x0801200c
 800d630:	08012010 	.word	0x08012010
 800d634:	08012014 	.word	0x08012014
 800d638:	08012018 	.word	0x08012018
 800d63c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d63e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d642:	4553      	cmp	r3, sl
 800d644:	bfa8      	it	ge
 800d646:	4653      	movge	r3, sl
 800d648:	2b00      	cmp	r3, #0
 800d64a:	4699      	mov	r9, r3
 800d64c:	dc36      	bgt.n	800d6bc <_printf_float+0x360>
 800d64e:	f04f 0b00 	mov.w	fp, #0
 800d652:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d656:	f104 021a 	add.w	r2, r4, #26
 800d65a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d65c:	9306      	str	r3, [sp, #24]
 800d65e:	eba3 0309 	sub.w	r3, r3, r9
 800d662:	455b      	cmp	r3, fp
 800d664:	dc31      	bgt.n	800d6ca <_printf_float+0x36e>
 800d666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d668:	459a      	cmp	sl, r3
 800d66a:	dc3a      	bgt.n	800d6e2 <_printf_float+0x386>
 800d66c:	6823      	ldr	r3, [r4, #0]
 800d66e:	07da      	lsls	r2, r3, #31
 800d670:	d437      	bmi.n	800d6e2 <_printf_float+0x386>
 800d672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d674:	ebaa 0903 	sub.w	r9, sl, r3
 800d678:	9b06      	ldr	r3, [sp, #24]
 800d67a:	ebaa 0303 	sub.w	r3, sl, r3
 800d67e:	4599      	cmp	r9, r3
 800d680:	bfa8      	it	ge
 800d682:	4699      	movge	r9, r3
 800d684:	f1b9 0f00 	cmp.w	r9, #0
 800d688:	dc33      	bgt.n	800d6f2 <_printf_float+0x396>
 800d68a:	f04f 0800 	mov.w	r8, #0
 800d68e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d692:	f104 0b1a 	add.w	fp, r4, #26
 800d696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d698:	ebaa 0303 	sub.w	r3, sl, r3
 800d69c:	eba3 0309 	sub.w	r3, r3, r9
 800d6a0:	4543      	cmp	r3, r8
 800d6a2:	f77f af79 	ble.w	800d598 <_printf_float+0x23c>
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	465a      	mov	r2, fp
 800d6aa:	4631      	mov	r1, r6
 800d6ac:	4628      	mov	r0, r5
 800d6ae:	47b8      	blx	r7
 800d6b0:	3001      	adds	r0, #1
 800d6b2:	f43f aeae 	beq.w	800d412 <_printf_float+0xb6>
 800d6b6:	f108 0801 	add.w	r8, r8, #1
 800d6ba:	e7ec      	b.n	800d696 <_printf_float+0x33a>
 800d6bc:	4642      	mov	r2, r8
 800d6be:	4631      	mov	r1, r6
 800d6c0:	4628      	mov	r0, r5
 800d6c2:	47b8      	blx	r7
 800d6c4:	3001      	adds	r0, #1
 800d6c6:	d1c2      	bne.n	800d64e <_printf_float+0x2f2>
 800d6c8:	e6a3      	b.n	800d412 <_printf_float+0xb6>
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	4631      	mov	r1, r6
 800d6ce:	4628      	mov	r0, r5
 800d6d0:	9206      	str	r2, [sp, #24]
 800d6d2:	47b8      	blx	r7
 800d6d4:	3001      	adds	r0, #1
 800d6d6:	f43f ae9c 	beq.w	800d412 <_printf_float+0xb6>
 800d6da:	9a06      	ldr	r2, [sp, #24]
 800d6dc:	f10b 0b01 	add.w	fp, fp, #1
 800d6e0:	e7bb      	b.n	800d65a <_printf_float+0x2fe>
 800d6e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d6e6:	4631      	mov	r1, r6
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	47b8      	blx	r7
 800d6ec:	3001      	adds	r0, #1
 800d6ee:	d1c0      	bne.n	800d672 <_printf_float+0x316>
 800d6f0:	e68f      	b.n	800d412 <_printf_float+0xb6>
 800d6f2:	9a06      	ldr	r2, [sp, #24]
 800d6f4:	464b      	mov	r3, r9
 800d6f6:	4442      	add	r2, r8
 800d6f8:	4631      	mov	r1, r6
 800d6fa:	4628      	mov	r0, r5
 800d6fc:	47b8      	blx	r7
 800d6fe:	3001      	adds	r0, #1
 800d700:	d1c3      	bne.n	800d68a <_printf_float+0x32e>
 800d702:	e686      	b.n	800d412 <_printf_float+0xb6>
 800d704:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d708:	f1ba 0f01 	cmp.w	sl, #1
 800d70c:	dc01      	bgt.n	800d712 <_printf_float+0x3b6>
 800d70e:	07db      	lsls	r3, r3, #31
 800d710:	d536      	bpl.n	800d780 <_printf_float+0x424>
 800d712:	2301      	movs	r3, #1
 800d714:	4642      	mov	r2, r8
 800d716:	4631      	mov	r1, r6
 800d718:	4628      	mov	r0, r5
 800d71a:	47b8      	blx	r7
 800d71c:	3001      	adds	r0, #1
 800d71e:	f43f ae78 	beq.w	800d412 <_printf_float+0xb6>
 800d722:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d726:	4631      	mov	r1, r6
 800d728:	4628      	mov	r0, r5
 800d72a:	47b8      	blx	r7
 800d72c:	3001      	adds	r0, #1
 800d72e:	f43f ae70 	beq.w	800d412 <_printf_float+0xb6>
 800d732:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d736:	2200      	movs	r2, #0
 800d738:	2300      	movs	r3, #0
 800d73a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d73e:	f7f3 f9c3 	bl	8000ac8 <__aeabi_dcmpeq>
 800d742:	b9c0      	cbnz	r0, 800d776 <_printf_float+0x41a>
 800d744:	4653      	mov	r3, sl
 800d746:	f108 0201 	add.w	r2, r8, #1
 800d74a:	4631      	mov	r1, r6
 800d74c:	4628      	mov	r0, r5
 800d74e:	47b8      	blx	r7
 800d750:	3001      	adds	r0, #1
 800d752:	d10c      	bne.n	800d76e <_printf_float+0x412>
 800d754:	e65d      	b.n	800d412 <_printf_float+0xb6>
 800d756:	2301      	movs	r3, #1
 800d758:	465a      	mov	r2, fp
 800d75a:	4631      	mov	r1, r6
 800d75c:	4628      	mov	r0, r5
 800d75e:	47b8      	blx	r7
 800d760:	3001      	adds	r0, #1
 800d762:	f43f ae56 	beq.w	800d412 <_printf_float+0xb6>
 800d766:	f108 0801 	add.w	r8, r8, #1
 800d76a:	45d0      	cmp	r8, sl
 800d76c:	dbf3      	blt.n	800d756 <_printf_float+0x3fa>
 800d76e:	464b      	mov	r3, r9
 800d770:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d774:	e6df      	b.n	800d536 <_printf_float+0x1da>
 800d776:	f04f 0800 	mov.w	r8, #0
 800d77a:	f104 0b1a 	add.w	fp, r4, #26
 800d77e:	e7f4      	b.n	800d76a <_printf_float+0x40e>
 800d780:	2301      	movs	r3, #1
 800d782:	4642      	mov	r2, r8
 800d784:	e7e1      	b.n	800d74a <_printf_float+0x3ee>
 800d786:	2301      	movs	r3, #1
 800d788:	464a      	mov	r2, r9
 800d78a:	4631      	mov	r1, r6
 800d78c:	4628      	mov	r0, r5
 800d78e:	47b8      	blx	r7
 800d790:	3001      	adds	r0, #1
 800d792:	f43f ae3e 	beq.w	800d412 <_printf_float+0xb6>
 800d796:	f108 0801 	add.w	r8, r8, #1
 800d79a:	68e3      	ldr	r3, [r4, #12]
 800d79c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d79e:	1a5b      	subs	r3, r3, r1
 800d7a0:	4543      	cmp	r3, r8
 800d7a2:	dcf0      	bgt.n	800d786 <_printf_float+0x42a>
 800d7a4:	e6fc      	b.n	800d5a0 <_printf_float+0x244>
 800d7a6:	f04f 0800 	mov.w	r8, #0
 800d7aa:	f104 0919 	add.w	r9, r4, #25
 800d7ae:	e7f4      	b.n	800d79a <_printf_float+0x43e>

0800d7b0 <_printf_common>:
 800d7b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7b4:	4616      	mov	r6, r2
 800d7b6:	4698      	mov	r8, r3
 800d7b8:	688a      	ldr	r2, [r1, #8]
 800d7ba:	690b      	ldr	r3, [r1, #16]
 800d7bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	bfb8      	it	lt
 800d7c4:	4613      	movlt	r3, r2
 800d7c6:	6033      	str	r3, [r6, #0]
 800d7c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d7cc:	4607      	mov	r7, r0
 800d7ce:	460c      	mov	r4, r1
 800d7d0:	b10a      	cbz	r2, 800d7d6 <_printf_common+0x26>
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	6033      	str	r3, [r6, #0]
 800d7d6:	6823      	ldr	r3, [r4, #0]
 800d7d8:	0699      	lsls	r1, r3, #26
 800d7da:	bf42      	ittt	mi
 800d7dc:	6833      	ldrmi	r3, [r6, #0]
 800d7de:	3302      	addmi	r3, #2
 800d7e0:	6033      	strmi	r3, [r6, #0]
 800d7e2:	6825      	ldr	r5, [r4, #0]
 800d7e4:	f015 0506 	ands.w	r5, r5, #6
 800d7e8:	d106      	bne.n	800d7f8 <_printf_common+0x48>
 800d7ea:	f104 0a19 	add.w	sl, r4, #25
 800d7ee:	68e3      	ldr	r3, [r4, #12]
 800d7f0:	6832      	ldr	r2, [r6, #0]
 800d7f2:	1a9b      	subs	r3, r3, r2
 800d7f4:	42ab      	cmp	r3, r5
 800d7f6:	dc26      	bgt.n	800d846 <_printf_common+0x96>
 800d7f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d7fc:	6822      	ldr	r2, [r4, #0]
 800d7fe:	3b00      	subs	r3, #0
 800d800:	bf18      	it	ne
 800d802:	2301      	movne	r3, #1
 800d804:	0692      	lsls	r2, r2, #26
 800d806:	d42b      	bmi.n	800d860 <_printf_common+0xb0>
 800d808:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d80c:	4641      	mov	r1, r8
 800d80e:	4638      	mov	r0, r7
 800d810:	47c8      	blx	r9
 800d812:	3001      	adds	r0, #1
 800d814:	d01e      	beq.n	800d854 <_printf_common+0xa4>
 800d816:	6823      	ldr	r3, [r4, #0]
 800d818:	6922      	ldr	r2, [r4, #16]
 800d81a:	f003 0306 	and.w	r3, r3, #6
 800d81e:	2b04      	cmp	r3, #4
 800d820:	bf02      	ittt	eq
 800d822:	68e5      	ldreq	r5, [r4, #12]
 800d824:	6833      	ldreq	r3, [r6, #0]
 800d826:	1aed      	subeq	r5, r5, r3
 800d828:	68a3      	ldr	r3, [r4, #8]
 800d82a:	bf0c      	ite	eq
 800d82c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d830:	2500      	movne	r5, #0
 800d832:	4293      	cmp	r3, r2
 800d834:	bfc4      	itt	gt
 800d836:	1a9b      	subgt	r3, r3, r2
 800d838:	18ed      	addgt	r5, r5, r3
 800d83a:	2600      	movs	r6, #0
 800d83c:	341a      	adds	r4, #26
 800d83e:	42b5      	cmp	r5, r6
 800d840:	d11a      	bne.n	800d878 <_printf_common+0xc8>
 800d842:	2000      	movs	r0, #0
 800d844:	e008      	b.n	800d858 <_printf_common+0xa8>
 800d846:	2301      	movs	r3, #1
 800d848:	4652      	mov	r2, sl
 800d84a:	4641      	mov	r1, r8
 800d84c:	4638      	mov	r0, r7
 800d84e:	47c8      	blx	r9
 800d850:	3001      	adds	r0, #1
 800d852:	d103      	bne.n	800d85c <_printf_common+0xac>
 800d854:	f04f 30ff 	mov.w	r0, #4294967295
 800d858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d85c:	3501      	adds	r5, #1
 800d85e:	e7c6      	b.n	800d7ee <_printf_common+0x3e>
 800d860:	18e1      	adds	r1, r4, r3
 800d862:	1c5a      	adds	r2, r3, #1
 800d864:	2030      	movs	r0, #48	@ 0x30
 800d866:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d86a:	4422      	add	r2, r4
 800d86c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d870:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d874:	3302      	adds	r3, #2
 800d876:	e7c7      	b.n	800d808 <_printf_common+0x58>
 800d878:	2301      	movs	r3, #1
 800d87a:	4622      	mov	r2, r4
 800d87c:	4641      	mov	r1, r8
 800d87e:	4638      	mov	r0, r7
 800d880:	47c8      	blx	r9
 800d882:	3001      	adds	r0, #1
 800d884:	d0e6      	beq.n	800d854 <_printf_common+0xa4>
 800d886:	3601      	adds	r6, #1
 800d888:	e7d9      	b.n	800d83e <_printf_common+0x8e>
	...

0800d88c <_printf_i>:
 800d88c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d890:	7e0f      	ldrb	r7, [r1, #24]
 800d892:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d894:	2f78      	cmp	r7, #120	@ 0x78
 800d896:	4691      	mov	r9, r2
 800d898:	4680      	mov	r8, r0
 800d89a:	460c      	mov	r4, r1
 800d89c:	469a      	mov	sl, r3
 800d89e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d8a2:	d807      	bhi.n	800d8b4 <_printf_i+0x28>
 800d8a4:	2f62      	cmp	r7, #98	@ 0x62
 800d8a6:	d80a      	bhi.n	800d8be <_printf_i+0x32>
 800d8a8:	2f00      	cmp	r7, #0
 800d8aa:	f000 80d2 	beq.w	800da52 <_printf_i+0x1c6>
 800d8ae:	2f58      	cmp	r7, #88	@ 0x58
 800d8b0:	f000 80b9 	beq.w	800da26 <_printf_i+0x19a>
 800d8b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d8b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d8bc:	e03a      	b.n	800d934 <_printf_i+0xa8>
 800d8be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d8c2:	2b15      	cmp	r3, #21
 800d8c4:	d8f6      	bhi.n	800d8b4 <_printf_i+0x28>
 800d8c6:	a101      	add	r1, pc, #4	@ (adr r1, 800d8cc <_printf_i+0x40>)
 800d8c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d8cc:	0800d925 	.word	0x0800d925
 800d8d0:	0800d939 	.word	0x0800d939
 800d8d4:	0800d8b5 	.word	0x0800d8b5
 800d8d8:	0800d8b5 	.word	0x0800d8b5
 800d8dc:	0800d8b5 	.word	0x0800d8b5
 800d8e0:	0800d8b5 	.word	0x0800d8b5
 800d8e4:	0800d939 	.word	0x0800d939
 800d8e8:	0800d8b5 	.word	0x0800d8b5
 800d8ec:	0800d8b5 	.word	0x0800d8b5
 800d8f0:	0800d8b5 	.word	0x0800d8b5
 800d8f4:	0800d8b5 	.word	0x0800d8b5
 800d8f8:	0800da39 	.word	0x0800da39
 800d8fc:	0800d963 	.word	0x0800d963
 800d900:	0800d9f3 	.word	0x0800d9f3
 800d904:	0800d8b5 	.word	0x0800d8b5
 800d908:	0800d8b5 	.word	0x0800d8b5
 800d90c:	0800da5b 	.word	0x0800da5b
 800d910:	0800d8b5 	.word	0x0800d8b5
 800d914:	0800d963 	.word	0x0800d963
 800d918:	0800d8b5 	.word	0x0800d8b5
 800d91c:	0800d8b5 	.word	0x0800d8b5
 800d920:	0800d9fb 	.word	0x0800d9fb
 800d924:	6833      	ldr	r3, [r6, #0]
 800d926:	1d1a      	adds	r2, r3, #4
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	6032      	str	r2, [r6, #0]
 800d92c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d930:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d934:	2301      	movs	r3, #1
 800d936:	e09d      	b.n	800da74 <_printf_i+0x1e8>
 800d938:	6833      	ldr	r3, [r6, #0]
 800d93a:	6820      	ldr	r0, [r4, #0]
 800d93c:	1d19      	adds	r1, r3, #4
 800d93e:	6031      	str	r1, [r6, #0]
 800d940:	0606      	lsls	r6, r0, #24
 800d942:	d501      	bpl.n	800d948 <_printf_i+0xbc>
 800d944:	681d      	ldr	r5, [r3, #0]
 800d946:	e003      	b.n	800d950 <_printf_i+0xc4>
 800d948:	0645      	lsls	r5, r0, #25
 800d94a:	d5fb      	bpl.n	800d944 <_printf_i+0xb8>
 800d94c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d950:	2d00      	cmp	r5, #0
 800d952:	da03      	bge.n	800d95c <_printf_i+0xd0>
 800d954:	232d      	movs	r3, #45	@ 0x2d
 800d956:	426d      	negs	r5, r5
 800d958:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d95c:	4859      	ldr	r0, [pc, #356]	@ (800dac4 <_printf_i+0x238>)
 800d95e:	230a      	movs	r3, #10
 800d960:	e011      	b.n	800d986 <_printf_i+0xfa>
 800d962:	6821      	ldr	r1, [r4, #0]
 800d964:	6833      	ldr	r3, [r6, #0]
 800d966:	0608      	lsls	r0, r1, #24
 800d968:	f853 5b04 	ldr.w	r5, [r3], #4
 800d96c:	d402      	bmi.n	800d974 <_printf_i+0xe8>
 800d96e:	0649      	lsls	r1, r1, #25
 800d970:	bf48      	it	mi
 800d972:	b2ad      	uxthmi	r5, r5
 800d974:	2f6f      	cmp	r7, #111	@ 0x6f
 800d976:	4853      	ldr	r0, [pc, #332]	@ (800dac4 <_printf_i+0x238>)
 800d978:	6033      	str	r3, [r6, #0]
 800d97a:	bf14      	ite	ne
 800d97c:	230a      	movne	r3, #10
 800d97e:	2308      	moveq	r3, #8
 800d980:	2100      	movs	r1, #0
 800d982:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d986:	6866      	ldr	r6, [r4, #4]
 800d988:	60a6      	str	r6, [r4, #8]
 800d98a:	2e00      	cmp	r6, #0
 800d98c:	bfa2      	ittt	ge
 800d98e:	6821      	ldrge	r1, [r4, #0]
 800d990:	f021 0104 	bicge.w	r1, r1, #4
 800d994:	6021      	strge	r1, [r4, #0]
 800d996:	b90d      	cbnz	r5, 800d99c <_printf_i+0x110>
 800d998:	2e00      	cmp	r6, #0
 800d99a:	d04b      	beq.n	800da34 <_printf_i+0x1a8>
 800d99c:	4616      	mov	r6, r2
 800d99e:	fbb5 f1f3 	udiv	r1, r5, r3
 800d9a2:	fb03 5711 	mls	r7, r3, r1, r5
 800d9a6:	5dc7      	ldrb	r7, [r0, r7]
 800d9a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d9ac:	462f      	mov	r7, r5
 800d9ae:	42bb      	cmp	r3, r7
 800d9b0:	460d      	mov	r5, r1
 800d9b2:	d9f4      	bls.n	800d99e <_printf_i+0x112>
 800d9b4:	2b08      	cmp	r3, #8
 800d9b6:	d10b      	bne.n	800d9d0 <_printf_i+0x144>
 800d9b8:	6823      	ldr	r3, [r4, #0]
 800d9ba:	07df      	lsls	r7, r3, #31
 800d9bc:	d508      	bpl.n	800d9d0 <_printf_i+0x144>
 800d9be:	6923      	ldr	r3, [r4, #16]
 800d9c0:	6861      	ldr	r1, [r4, #4]
 800d9c2:	4299      	cmp	r1, r3
 800d9c4:	bfde      	ittt	le
 800d9c6:	2330      	movle	r3, #48	@ 0x30
 800d9c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d9cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d9d0:	1b92      	subs	r2, r2, r6
 800d9d2:	6122      	str	r2, [r4, #16]
 800d9d4:	f8cd a000 	str.w	sl, [sp]
 800d9d8:	464b      	mov	r3, r9
 800d9da:	aa03      	add	r2, sp, #12
 800d9dc:	4621      	mov	r1, r4
 800d9de:	4640      	mov	r0, r8
 800d9e0:	f7ff fee6 	bl	800d7b0 <_printf_common>
 800d9e4:	3001      	adds	r0, #1
 800d9e6:	d14a      	bne.n	800da7e <_printf_i+0x1f2>
 800d9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d9ec:	b004      	add	sp, #16
 800d9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9f2:	6823      	ldr	r3, [r4, #0]
 800d9f4:	f043 0320 	orr.w	r3, r3, #32
 800d9f8:	6023      	str	r3, [r4, #0]
 800d9fa:	4833      	ldr	r0, [pc, #204]	@ (800dac8 <_printf_i+0x23c>)
 800d9fc:	2778      	movs	r7, #120	@ 0x78
 800d9fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800da02:	6823      	ldr	r3, [r4, #0]
 800da04:	6831      	ldr	r1, [r6, #0]
 800da06:	061f      	lsls	r7, r3, #24
 800da08:	f851 5b04 	ldr.w	r5, [r1], #4
 800da0c:	d402      	bmi.n	800da14 <_printf_i+0x188>
 800da0e:	065f      	lsls	r7, r3, #25
 800da10:	bf48      	it	mi
 800da12:	b2ad      	uxthmi	r5, r5
 800da14:	6031      	str	r1, [r6, #0]
 800da16:	07d9      	lsls	r1, r3, #31
 800da18:	bf44      	itt	mi
 800da1a:	f043 0320 	orrmi.w	r3, r3, #32
 800da1e:	6023      	strmi	r3, [r4, #0]
 800da20:	b11d      	cbz	r5, 800da2a <_printf_i+0x19e>
 800da22:	2310      	movs	r3, #16
 800da24:	e7ac      	b.n	800d980 <_printf_i+0xf4>
 800da26:	4827      	ldr	r0, [pc, #156]	@ (800dac4 <_printf_i+0x238>)
 800da28:	e7e9      	b.n	800d9fe <_printf_i+0x172>
 800da2a:	6823      	ldr	r3, [r4, #0]
 800da2c:	f023 0320 	bic.w	r3, r3, #32
 800da30:	6023      	str	r3, [r4, #0]
 800da32:	e7f6      	b.n	800da22 <_printf_i+0x196>
 800da34:	4616      	mov	r6, r2
 800da36:	e7bd      	b.n	800d9b4 <_printf_i+0x128>
 800da38:	6833      	ldr	r3, [r6, #0]
 800da3a:	6825      	ldr	r5, [r4, #0]
 800da3c:	6961      	ldr	r1, [r4, #20]
 800da3e:	1d18      	adds	r0, r3, #4
 800da40:	6030      	str	r0, [r6, #0]
 800da42:	062e      	lsls	r6, r5, #24
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	d501      	bpl.n	800da4c <_printf_i+0x1c0>
 800da48:	6019      	str	r1, [r3, #0]
 800da4a:	e002      	b.n	800da52 <_printf_i+0x1c6>
 800da4c:	0668      	lsls	r0, r5, #25
 800da4e:	d5fb      	bpl.n	800da48 <_printf_i+0x1bc>
 800da50:	8019      	strh	r1, [r3, #0]
 800da52:	2300      	movs	r3, #0
 800da54:	6123      	str	r3, [r4, #16]
 800da56:	4616      	mov	r6, r2
 800da58:	e7bc      	b.n	800d9d4 <_printf_i+0x148>
 800da5a:	6833      	ldr	r3, [r6, #0]
 800da5c:	1d1a      	adds	r2, r3, #4
 800da5e:	6032      	str	r2, [r6, #0]
 800da60:	681e      	ldr	r6, [r3, #0]
 800da62:	6862      	ldr	r2, [r4, #4]
 800da64:	2100      	movs	r1, #0
 800da66:	4630      	mov	r0, r6
 800da68:	f7f2 fbb2 	bl	80001d0 <memchr>
 800da6c:	b108      	cbz	r0, 800da72 <_printf_i+0x1e6>
 800da6e:	1b80      	subs	r0, r0, r6
 800da70:	6060      	str	r0, [r4, #4]
 800da72:	6863      	ldr	r3, [r4, #4]
 800da74:	6123      	str	r3, [r4, #16]
 800da76:	2300      	movs	r3, #0
 800da78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da7c:	e7aa      	b.n	800d9d4 <_printf_i+0x148>
 800da7e:	6923      	ldr	r3, [r4, #16]
 800da80:	4632      	mov	r2, r6
 800da82:	4649      	mov	r1, r9
 800da84:	4640      	mov	r0, r8
 800da86:	47d0      	blx	sl
 800da88:	3001      	adds	r0, #1
 800da8a:	d0ad      	beq.n	800d9e8 <_printf_i+0x15c>
 800da8c:	6823      	ldr	r3, [r4, #0]
 800da8e:	079b      	lsls	r3, r3, #30
 800da90:	d413      	bmi.n	800daba <_printf_i+0x22e>
 800da92:	68e0      	ldr	r0, [r4, #12]
 800da94:	9b03      	ldr	r3, [sp, #12]
 800da96:	4298      	cmp	r0, r3
 800da98:	bfb8      	it	lt
 800da9a:	4618      	movlt	r0, r3
 800da9c:	e7a6      	b.n	800d9ec <_printf_i+0x160>
 800da9e:	2301      	movs	r3, #1
 800daa0:	4632      	mov	r2, r6
 800daa2:	4649      	mov	r1, r9
 800daa4:	4640      	mov	r0, r8
 800daa6:	47d0      	blx	sl
 800daa8:	3001      	adds	r0, #1
 800daaa:	d09d      	beq.n	800d9e8 <_printf_i+0x15c>
 800daac:	3501      	adds	r5, #1
 800daae:	68e3      	ldr	r3, [r4, #12]
 800dab0:	9903      	ldr	r1, [sp, #12]
 800dab2:	1a5b      	subs	r3, r3, r1
 800dab4:	42ab      	cmp	r3, r5
 800dab6:	dcf2      	bgt.n	800da9e <_printf_i+0x212>
 800dab8:	e7eb      	b.n	800da92 <_printf_i+0x206>
 800daba:	2500      	movs	r5, #0
 800dabc:	f104 0619 	add.w	r6, r4, #25
 800dac0:	e7f5      	b.n	800daae <_printf_i+0x222>
 800dac2:	bf00      	nop
 800dac4:	0801201a 	.word	0x0801201a
 800dac8:	0801202b 	.word	0x0801202b

0800dacc <std>:
 800dacc:	2300      	movs	r3, #0
 800dace:	b510      	push	{r4, lr}
 800dad0:	4604      	mov	r4, r0
 800dad2:	e9c0 3300 	strd	r3, r3, [r0]
 800dad6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dada:	6083      	str	r3, [r0, #8]
 800dadc:	8181      	strh	r1, [r0, #12]
 800dade:	6643      	str	r3, [r0, #100]	@ 0x64
 800dae0:	81c2      	strh	r2, [r0, #14]
 800dae2:	6183      	str	r3, [r0, #24]
 800dae4:	4619      	mov	r1, r3
 800dae6:	2208      	movs	r2, #8
 800dae8:	305c      	adds	r0, #92	@ 0x5c
 800daea:	f000 f948 	bl	800dd7e <memset>
 800daee:	4b0d      	ldr	r3, [pc, #52]	@ (800db24 <std+0x58>)
 800daf0:	6263      	str	r3, [r4, #36]	@ 0x24
 800daf2:	4b0d      	ldr	r3, [pc, #52]	@ (800db28 <std+0x5c>)
 800daf4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800daf6:	4b0d      	ldr	r3, [pc, #52]	@ (800db2c <std+0x60>)
 800daf8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dafa:	4b0d      	ldr	r3, [pc, #52]	@ (800db30 <std+0x64>)
 800dafc:	6323      	str	r3, [r4, #48]	@ 0x30
 800dafe:	4b0d      	ldr	r3, [pc, #52]	@ (800db34 <std+0x68>)
 800db00:	6224      	str	r4, [r4, #32]
 800db02:	429c      	cmp	r4, r3
 800db04:	d006      	beq.n	800db14 <std+0x48>
 800db06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800db0a:	4294      	cmp	r4, r2
 800db0c:	d002      	beq.n	800db14 <std+0x48>
 800db0e:	33d0      	adds	r3, #208	@ 0xd0
 800db10:	429c      	cmp	r4, r3
 800db12:	d105      	bne.n	800db20 <std+0x54>
 800db14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800db18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db1c:	f000 b9be 	b.w	800de9c <__retarget_lock_init_recursive>
 800db20:	bd10      	pop	{r4, pc}
 800db22:	bf00      	nop
 800db24:	0800dcf9 	.word	0x0800dcf9
 800db28:	0800dd1b 	.word	0x0800dd1b
 800db2c:	0800dd53 	.word	0x0800dd53
 800db30:	0800dd77 	.word	0x0800dd77
 800db34:	2000536c 	.word	0x2000536c

0800db38 <stdio_exit_handler>:
 800db38:	4a02      	ldr	r2, [pc, #8]	@ (800db44 <stdio_exit_handler+0xc>)
 800db3a:	4903      	ldr	r1, [pc, #12]	@ (800db48 <stdio_exit_handler+0x10>)
 800db3c:	4803      	ldr	r0, [pc, #12]	@ (800db4c <stdio_exit_handler+0x14>)
 800db3e:	f000 b869 	b.w	800dc14 <_fwalk_sglue>
 800db42:	bf00      	nop
 800db44:	20000028 	.word	0x20000028
 800db48:	0800f815 	.word	0x0800f815
 800db4c:	20000038 	.word	0x20000038

0800db50 <cleanup_stdio>:
 800db50:	6841      	ldr	r1, [r0, #4]
 800db52:	4b0c      	ldr	r3, [pc, #48]	@ (800db84 <cleanup_stdio+0x34>)
 800db54:	4299      	cmp	r1, r3
 800db56:	b510      	push	{r4, lr}
 800db58:	4604      	mov	r4, r0
 800db5a:	d001      	beq.n	800db60 <cleanup_stdio+0x10>
 800db5c:	f001 fe5a 	bl	800f814 <_fflush_r>
 800db60:	68a1      	ldr	r1, [r4, #8]
 800db62:	4b09      	ldr	r3, [pc, #36]	@ (800db88 <cleanup_stdio+0x38>)
 800db64:	4299      	cmp	r1, r3
 800db66:	d002      	beq.n	800db6e <cleanup_stdio+0x1e>
 800db68:	4620      	mov	r0, r4
 800db6a:	f001 fe53 	bl	800f814 <_fflush_r>
 800db6e:	68e1      	ldr	r1, [r4, #12]
 800db70:	4b06      	ldr	r3, [pc, #24]	@ (800db8c <cleanup_stdio+0x3c>)
 800db72:	4299      	cmp	r1, r3
 800db74:	d004      	beq.n	800db80 <cleanup_stdio+0x30>
 800db76:	4620      	mov	r0, r4
 800db78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db7c:	f001 be4a 	b.w	800f814 <_fflush_r>
 800db80:	bd10      	pop	{r4, pc}
 800db82:	bf00      	nop
 800db84:	2000536c 	.word	0x2000536c
 800db88:	200053d4 	.word	0x200053d4
 800db8c:	2000543c 	.word	0x2000543c

0800db90 <global_stdio_init.part.0>:
 800db90:	b510      	push	{r4, lr}
 800db92:	4b0b      	ldr	r3, [pc, #44]	@ (800dbc0 <global_stdio_init.part.0+0x30>)
 800db94:	4c0b      	ldr	r4, [pc, #44]	@ (800dbc4 <global_stdio_init.part.0+0x34>)
 800db96:	4a0c      	ldr	r2, [pc, #48]	@ (800dbc8 <global_stdio_init.part.0+0x38>)
 800db98:	601a      	str	r2, [r3, #0]
 800db9a:	4620      	mov	r0, r4
 800db9c:	2200      	movs	r2, #0
 800db9e:	2104      	movs	r1, #4
 800dba0:	f7ff ff94 	bl	800dacc <std>
 800dba4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dba8:	2201      	movs	r2, #1
 800dbaa:	2109      	movs	r1, #9
 800dbac:	f7ff ff8e 	bl	800dacc <std>
 800dbb0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dbb4:	2202      	movs	r2, #2
 800dbb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbba:	2112      	movs	r1, #18
 800dbbc:	f7ff bf86 	b.w	800dacc <std>
 800dbc0:	200054a4 	.word	0x200054a4
 800dbc4:	2000536c 	.word	0x2000536c
 800dbc8:	0800db39 	.word	0x0800db39

0800dbcc <__sfp_lock_acquire>:
 800dbcc:	4801      	ldr	r0, [pc, #4]	@ (800dbd4 <__sfp_lock_acquire+0x8>)
 800dbce:	f000 b966 	b.w	800de9e <__retarget_lock_acquire_recursive>
 800dbd2:	bf00      	nop
 800dbd4:	200054ad 	.word	0x200054ad

0800dbd8 <__sfp_lock_release>:
 800dbd8:	4801      	ldr	r0, [pc, #4]	@ (800dbe0 <__sfp_lock_release+0x8>)
 800dbda:	f000 b961 	b.w	800dea0 <__retarget_lock_release_recursive>
 800dbde:	bf00      	nop
 800dbe0:	200054ad 	.word	0x200054ad

0800dbe4 <__sinit>:
 800dbe4:	b510      	push	{r4, lr}
 800dbe6:	4604      	mov	r4, r0
 800dbe8:	f7ff fff0 	bl	800dbcc <__sfp_lock_acquire>
 800dbec:	6a23      	ldr	r3, [r4, #32]
 800dbee:	b11b      	cbz	r3, 800dbf8 <__sinit+0x14>
 800dbf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbf4:	f7ff bff0 	b.w	800dbd8 <__sfp_lock_release>
 800dbf8:	4b04      	ldr	r3, [pc, #16]	@ (800dc0c <__sinit+0x28>)
 800dbfa:	6223      	str	r3, [r4, #32]
 800dbfc:	4b04      	ldr	r3, [pc, #16]	@ (800dc10 <__sinit+0x2c>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d1f5      	bne.n	800dbf0 <__sinit+0xc>
 800dc04:	f7ff ffc4 	bl	800db90 <global_stdio_init.part.0>
 800dc08:	e7f2      	b.n	800dbf0 <__sinit+0xc>
 800dc0a:	bf00      	nop
 800dc0c:	0800db51 	.word	0x0800db51
 800dc10:	200054a4 	.word	0x200054a4

0800dc14 <_fwalk_sglue>:
 800dc14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc18:	4607      	mov	r7, r0
 800dc1a:	4688      	mov	r8, r1
 800dc1c:	4614      	mov	r4, r2
 800dc1e:	2600      	movs	r6, #0
 800dc20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc24:	f1b9 0901 	subs.w	r9, r9, #1
 800dc28:	d505      	bpl.n	800dc36 <_fwalk_sglue+0x22>
 800dc2a:	6824      	ldr	r4, [r4, #0]
 800dc2c:	2c00      	cmp	r4, #0
 800dc2e:	d1f7      	bne.n	800dc20 <_fwalk_sglue+0xc>
 800dc30:	4630      	mov	r0, r6
 800dc32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc36:	89ab      	ldrh	r3, [r5, #12]
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d907      	bls.n	800dc4c <_fwalk_sglue+0x38>
 800dc3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dc40:	3301      	adds	r3, #1
 800dc42:	d003      	beq.n	800dc4c <_fwalk_sglue+0x38>
 800dc44:	4629      	mov	r1, r5
 800dc46:	4638      	mov	r0, r7
 800dc48:	47c0      	blx	r8
 800dc4a:	4306      	orrs	r6, r0
 800dc4c:	3568      	adds	r5, #104	@ 0x68
 800dc4e:	e7e9      	b.n	800dc24 <_fwalk_sglue+0x10>

0800dc50 <sniprintf>:
 800dc50:	b40c      	push	{r2, r3}
 800dc52:	b530      	push	{r4, r5, lr}
 800dc54:	4b17      	ldr	r3, [pc, #92]	@ (800dcb4 <sniprintf+0x64>)
 800dc56:	1e0c      	subs	r4, r1, #0
 800dc58:	681d      	ldr	r5, [r3, #0]
 800dc5a:	b09d      	sub	sp, #116	@ 0x74
 800dc5c:	da08      	bge.n	800dc70 <sniprintf+0x20>
 800dc5e:	238b      	movs	r3, #139	@ 0x8b
 800dc60:	602b      	str	r3, [r5, #0]
 800dc62:	f04f 30ff 	mov.w	r0, #4294967295
 800dc66:	b01d      	add	sp, #116	@ 0x74
 800dc68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc6c:	b002      	add	sp, #8
 800dc6e:	4770      	bx	lr
 800dc70:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800dc74:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dc78:	bf14      	ite	ne
 800dc7a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dc7e:	4623      	moveq	r3, r4
 800dc80:	9304      	str	r3, [sp, #16]
 800dc82:	9307      	str	r3, [sp, #28]
 800dc84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dc88:	9002      	str	r0, [sp, #8]
 800dc8a:	9006      	str	r0, [sp, #24]
 800dc8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dc90:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800dc92:	ab21      	add	r3, sp, #132	@ 0x84
 800dc94:	a902      	add	r1, sp, #8
 800dc96:	4628      	mov	r0, r5
 800dc98:	9301      	str	r3, [sp, #4]
 800dc9a:	f001 fc3b 	bl	800f514 <_svfiprintf_r>
 800dc9e:	1c43      	adds	r3, r0, #1
 800dca0:	bfbc      	itt	lt
 800dca2:	238b      	movlt	r3, #139	@ 0x8b
 800dca4:	602b      	strlt	r3, [r5, #0]
 800dca6:	2c00      	cmp	r4, #0
 800dca8:	d0dd      	beq.n	800dc66 <sniprintf+0x16>
 800dcaa:	9b02      	ldr	r3, [sp, #8]
 800dcac:	2200      	movs	r2, #0
 800dcae:	701a      	strb	r2, [r3, #0]
 800dcb0:	e7d9      	b.n	800dc66 <sniprintf+0x16>
 800dcb2:	bf00      	nop
 800dcb4:	20000034 	.word	0x20000034

0800dcb8 <siprintf>:
 800dcb8:	b40e      	push	{r1, r2, r3}
 800dcba:	b500      	push	{lr}
 800dcbc:	b09c      	sub	sp, #112	@ 0x70
 800dcbe:	ab1d      	add	r3, sp, #116	@ 0x74
 800dcc0:	9002      	str	r0, [sp, #8]
 800dcc2:	9006      	str	r0, [sp, #24]
 800dcc4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800dcc8:	4809      	ldr	r0, [pc, #36]	@ (800dcf0 <siprintf+0x38>)
 800dcca:	9107      	str	r1, [sp, #28]
 800dccc:	9104      	str	r1, [sp, #16]
 800dcce:	4909      	ldr	r1, [pc, #36]	@ (800dcf4 <siprintf+0x3c>)
 800dcd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcd4:	9105      	str	r1, [sp, #20]
 800dcd6:	6800      	ldr	r0, [r0, #0]
 800dcd8:	9301      	str	r3, [sp, #4]
 800dcda:	a902      	add	r1, sp, #8
 800dcdc:	f001 fc1a 	bl	800f514 <_svfiprintf_r>
 800dce0:	9b02      	ldr	r3, [sp, #8]
 800dce2:	2200      	movs	r2, #0
 800dce4:	701a      	strb	r2, [r3, #0]
 800dce6:	b01c      	add	sp, #112	@ 0x70
 800dce8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcec:	b003      	add	sp, #12
 800dcee:	4770      	bx	lr
 800dcf0:	20000034 	.word	0x20000034
 800dcf4:	ffff0208 	.word	0xffff0208

0800dcf8 <__sread>:
 800dcf8:	b510      	push	{r4, lr}
 800dcfa:	460c      	mov	r4, r1
 800dcfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd00:	f000 f87e 	bl	800de00 <_read_r>
 800dd04:	2800      	cmp	r0, #0
 800dd06:	bfab      	itete	ge
 800dd08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dd0a:	89a3      	ldrhlt	r3, [r4, #12]
 800dd0c:	181b      	addge	r3, r3, r0
 800dd0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800dd12:	bfac      	ite	ge
 800dd14:	6563      	strge	r3, [r4, #84]	@ 0x54
 800dd16:	81a3      	strhlt	r3, [r4, #12]
 800dd18:	bd10      	pop	{r4, pc}

0800dd1a <__swrite>:
 800dd1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd1e:	461f      	mov	r7, r3
 800dd20:	898b      	ldrh	r3, [r1, #12]
 800dd22:	05db      	lsls	r3, r3, #23
 800dd24:	4605      	mov	r5, r0
 800dd26:	460c      	mov	r4, r1
 800dd28:	4616      	mov	r6, r2
 800dd2a:	d505      	bpl.n	800dd38 <__swrite+0x1e>
 800dd2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd30:	2302      	movs	r3, #2
 800dd32:	2200      	movs	r2, #0
 800dd34:	f000 f852 	bl	800dddc <_lseek_r>
 800dd38:	89a3      	ldrh	r3, [r4, #12]
 800dd3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dd42:	81a3      	strh	r3, [r4, #12]
 800dd44:	4632      	mov	r2, r6
 800dd46:	463b      	mov	r3, r7
 800dd48:	4628      	mov	r0, r5
 800dd4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd4e:	f000 b869 	b.w	800de24 <_write_r>

0800dd52 <__sseek>:
 800dd52:	b510      	push	{r4, lr}
 800dd54:	460c      	mov	r4, r1
 800dd56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd5a:	f000 f83f 	bl	800dddc <_lseek_r>
 800dd5e:	1c43      	adds	r3, r0, #1
 800dd60:	89a3      	ldrh	r3, [r4, #12]
 800dd62:	bf15      	itete	ne
 800dd64:	6560      	strne	r0, [r4, #84]	@ 0x54
 800dd66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800dd6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800dd6e:	81a3      	strheq	r3, [r4, #12]
 800dd70:	bf18      	it	ne
 800dd72:	81a3      	strhne	r3, [r4, #12]
 800dd74:	bd10      	pop	{r4, pc}

0800dd76 <__sclose>:
 800dd76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd7a:	f000 b81f 	b.w	800ddbc <_close_r>

0800dd7e <memset>:
 800dd7e:	4402      	add	r2, r0
 800dd80:	4603      	mov	r3, r0
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d100      	bne.n	800dd88 <memset+0xa>
 800dd86:	4770      	bx	lr
 800dd88:	f803 1b01 	strb.w	r1, [r3], #1
 800dd8c:	e7f9      	b.n	800dd82 <memset+0x4>

0800dd8e <strncmp>:
 800dd8e:	b510      	push	{r4, lr}
 800dd90:	b16a      	cbz	r2, 800ddae <strncmp+0x20>
 800dd92:	3901      	subs	r1, #1
 800dd94:	1884      	adds	r4, r0, r2
 800dd96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd9a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d103      	bne.n	800ddaa <strncmp+0x1c>
 800dda2:	42a0      	cmp	r0, r4
 800dda4:	d001      	beq.n	800ddaa <strncmp+0x1c>
 800dda6:	2a00      	cmp	r2, #0
 800dda8:	d1f5      	bne.n	800dd96 <strncmp+0x8>
 800ddaa:	1ad0      	subs	r0, r2, r3
 800ddac:	bd10      	pop	{r4, pc}
 800ddae:	4610      	mov	r0, r2
 800ddb0:	e7fc      	b.n	800ddac <strncmp+0x1e>
	...

0800ddb4 <_localeconv_r>:
 800ddb4:	4800      	ldr	r0, [pc, #0]	@ (800ddb8 <_localeconv_r+0x4>)
 800ddb6:	4770      	bx	lr
 800ddb8:	20000174 	.word	0x20000174

0800ddbc <_close_r>:
 800ddbc:	b538      	push	{r3, r4, r5, lr}
 800ddbe:	4d06      	ldr	r5, [pc, #24]	@ (800ddd8 <_close_r+0x1c>)
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	4608      	mov	r0, r1
 800ddc6:	602b      	str	r3, [r5, #0]
 800ddc8:	f7f6 faac 	bl	8004324 <_close>
 800ddcc:	1c43      	adds	r3, r0, #1
 800ddce:	d102      	bne.n	800ddd6 <_close_r+0x1a>
 800ddd0:	682b      	ldr	r3, [r5, #0]
 800ddd2:	b103      	cbz	r3, 800ddd6 <_close_r+0x1a>
 800ddd4:	6023      	str	r3, [r4, #0]
 800ddd6:	bd38      	pop	{r3, r4, r5, pc}
 800ddd8:	200054a8 	.word	0x200054a8

0800dddc <_lseek_r>:
 800dddc:	b538      	push	{r3, r4, r5, lr}
 800ddde:	4d07      	ldr	r5, [pc, #28]	@ (800ddfc <_lseek_r+0x20>)
 800dde0:	4604      	mov	r4, r0
 800dde2:	4608      	mov	r0, r1
 800dde4:	4611      	mov	r1, r2
 800dde6:	2200      	movs	r2, #0
 800dde8:	602a      	str	r2, [r5, #0]
 800ddea:	461a      	mov	r2, r3
 800ddec:	f7f6 fac1 	bl	8004372 <_lseek>
 800ddf0:	1c43      	adds	r3, r0, #1
 800ddf2:	d102      	bne.n	800ddfa <_lseek_r+0x1e>
 800ddf4:	682b      	ldr	r3, [r5, #0]
 800ddf6:	b103      	cbz	r3, 800ddfa <_lseek_r+0x1e>
 800ddf8:	6023      	str	r3, [r4, #0]
 800ddfa:	bd38      	pop	{r3, r4, r5, pc}
 800ddfc:	200054a8 	.word	0x200054a8

0800de00 <_read_r>:
 800de00:	b538      	push	{r3, r4, r5, lr}
 800de02:	4d07      	ldr	r5, [pc, #28]	@ (800de20 <_read_r+0x20>)
 800de04:	4604      	mov	r4, r0
 800de06:	4608      	mov	r0, r1
 800de08:	4611      	mov	r1, r2
 800de0a:	2200      	movs	r2, #0
 800de0c:	602a      	str	r2, [r5, #0]
 800de0e:	461a      	mov	r2, r3
 800de10:	f7f6 fa4f 	bl	80042b2 <_read>
 800de14:	1c43      	adds	r3, r0, #1
 800de16:	d102      	bne.n	800de1e <_read_r+0x1e>
 800de18:	682b      	ldr	r3, [r5, #0]
 800de1a:	b103      	cbz	r3, 800de1e <_read_r+0x1e>
 800de1c:	6023      	str	r3, [r4, #0]
 800de1e:	bd38      	pop	{r3, r4, r5, pc}
 800de20:	200054a8 	.word	0x200054a8

0800de24 <_write_r>:
 800de24:	b538      	push	{r3, r4, r5, lr}
 800de26:	4d07      	ldr	r5, [pc, #28]	@ (800de44 <_write_r+0x20>)
 800de28:	4604      	mov	r4, r0
 800de2a:	4608      	mov	r0, r1
 800de2c:	4611      	mov	r1, r2
 800de2e:	2200      	movs	r2, #0
 800de30:	602a      	str	r2, [r5, #0]
 800de32:	461a      	mov	r2, r3
 800de34:	f7f6 fa5a 	bl	80042ec <_write>
 800de38:	1c43      	adds	r3, r0, #1
 800de3a:	d102      	bne.n	800de42 <_write_r+0x1e>
 800de3c:	682b      	ldr	r3, [r5, #0]
 800de3e:	b103      	cbz	r3, 800de42 <_write_r+0x1e>
 800de40:	6023      	str	r3, [r4, #0]
 800de42:	bd38      	pop	{r3, r4, r5, pc}
 800de44:	200054a8 	.word	0x200054a8

0800de48 <__errno>:
 800de48:	4b01      	ldr	r3, [pc, #4]	@ (800de50 <__errno+0x8>)
 800de4a:	6818      	ldr	r0, [r3, #0]
 800de4c:	4770      	bx	lr
 800de4e:	bf00      	nop
 800de50:	20000034 	.word	0x20000034

0800de54 <__libc_init_array>:
 800de54:	b570      	push	{r4, r5, r6, lr}
 800de56:	4d0d      	ldr	r5, [pc, #52]	@ (800de8c <__libc_init_array+0x38>)
 800de58:	4c0d      	ldr	r4, [pc, #52]	@ (800de90 <__libc_init_array+0x3c>)
 800de5a:	1b64      	subs	r4, r4, r5
 800de5c:	10a4      	asrs	r4, r4, #2
 800de5e:	2600      	movs	r6, #0
 800de60:	42a6      	cmp	r6, r4
 800de62:	d109      	bne.n	800de78 <__libc_init_array+0x24>
 800de64:	4d0b      	ldr	r5, [pc, #44]	@ (800de94 <__libc_init_array+0x40>)
 800de66:	4c0c      	ldr	r4, [pc, #48]	@ (800de98 <__libc_init_array+0x44>)
 800de68:	f003 fa26 	bl	80112b8 <_init>
 800de6c:	1b64      	subs	r4, r4, r5
 800de6e:	10a4      	asrs	r4, r4, #2
 800de70:	2600      	movs	r6, #0
 800de72:	42a6      	cmp	r6, r4
 800de74:	d105      	bne.n	800de82 <__libc_init_array+0x2e>
 800de76:	bd70      	pop	{r4, r5, r6, pc}
 800de78:	f855 3b04 	ldr.w	r3, [r5], #4
 800de7c:	4798      	blx	r3
 800de7e:	3601      	adds	r6, #1
 800de80:	e7ee      	b.n	800de60 <__libc_init_array+0xc>
 800de82:	f855 3b04 	ldr.w	r3, [r5], #4
 800de86:	4798      	blx	r3
 800de88:	3601      	adds	r6, #1
 800de8a:	e7f2      	b.n	800de72 <__libc_init_array+0x1e>
 800de8c:	08012420 	.word	0x08012420
 800de90:	08012420 	.word	0x08012420
 800de94:	08012420 	.word	0x08012420
 800de98:	08012424 	.word	0x08012424

0800de9c <__retarget_lock_init_recursive>:
 800de9c:	4770      	bx	lr

0800de9e <__retarget_lock_acquire_recursive>:
 800de9e:	4770      	bx	lr

0800dea0 <__retarget_lock_release_recursive>:
 800dea0:	4770      	bx	lr

0800dea2 <memcpy>:
 800dea2:	440a      	add	r2, r1
 800dea4:	4291      	cmp	r1, r2
 800dea6:	f100 33ff 	add.w	r3, r0, #4294967295
 800deaa:	d100      	bne.n	800deae <memcpy+0xc>
 800deac:	4770      	bx	lr
 800deae:	b510      	push	{r4, lr}
 800deb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800deb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800deb8:	4291      	cmp	r1, r2
 800deba:	d1f9      	bne.n	800deb0 <memcpy+0xe>
 800debc:	bd10      	pop	{r4, pc}

0800debe <quorem>:
 800debe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dec2:	6903      	ldr	r3, [r0, #16]
 800dec4:	690c      	ldr	r4, [r1, #16]
 800dec6:	42a3      	cmp	r3, r4
 800dec8:	4607      	mov	r7, r0
 800deca:	db7e      	blt.n	800dfca <quorem+0x10c>
 800decc:	3c01      	subs	r4, #1
 800dece:	f101 0814 	add.w	r8, r1, #20
 800ded2:	00a3      	lsls	r3, r4, #2
 800ded4:	f100 0514 	add.w	r5, r0, #20
 800ded8:	9300      	str	r3, [sp, #0]
 800deda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dede:	9301      	str	r3, [sp, #4]
 800dee0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dee4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dee8:	3301      	adds	r3, #1
 800deea:	429a      	cmp	r2, r3
 800deec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800def0:	fbb2 f6f3 	udiv	r6, r2, r3
 800def4:	d32e      	bcc.n	800df54 <quorem+0x96>
 800def6:	f04f 0a00 	mov.w	sl, #0
 800defa:	46c4      	mov	ip, r8
 800defc:	46ae      	mov	lr, r5
 800defe:	46d3      	mov	fp, sl
 800df00:	f85c 3b04 	ldr.w	r3, [ip], #4
 800df04:	b298      	uxth	r0, r3
 800df06:	fb06 a000 	mla	r0, r6, r0, sl
 800df0a:	0c02      	lsrs	r2, r0, #16
 800df0c:	0c1b      	lsrs	r3, r3, #16
 800df0e:	fb06 2303 	mla	r3, r6, r3, r2
 800df12:	f8de 2000 	ldr.w	r2, [lr]
 800df16:	b280      	uxth	r0, r0
 800df18:	b292      	uxth	r2, r2
 800df1a:	1a12      	subs	r2, r2, r0
 800df1c:	445a      	add	r2, fp
 800df1e:	f8de 0000 	ldr.w	r0, [lr]
 800df22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df26:	b29b      	uxth	r3, r3
 800df28:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800df2c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800df30:	b292      	uxth	r2, r2
 800df32:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800df36:	45e1      	cmp	r9, ip
 800df38:	f84e 2b04 	str.w	r2, [lr], #4
 800df3c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800df40:	d2de      	bcs.n	800df00 <quorem+0x42>
 800df42:	9b00      	ldr	r3, [sp, #0]
 800df44:	58eb      	ldr	r3, [r5, r3]
 800df46:	b92b      	cbnz	r3, 800df54 <quorem+0x96>
 800df48:	9b01      	ldr	r3, [sp, #4]
 800df4a:	3b04      	subs	r3, #4
 800df4c:	429d      	cmp	r5, r3
 800df4e:	461a      	mov	r2, r3
 800df50:	d32f      	bcc.n	800dfb2 <quorem+0xf4>
 800df52:	613c      	str	r4, [r7, #16]
 800df54:	4638      	mov	r0, r7
 800df56:	f001 f979 	bl	800f24c <__mcmp>
 800df5a:	2800      	cmp	r0, #0
 800df5c:	db25      	blt.n	800dfaa <quorem+0xec>
 800df5e:	4629      	mov	r1, r5
 800df60:	2000      	movs	r0, #0
 800df62:	f858 2b04 	ldr.w	r2, [r8], #4
 800df66:	f8d1 c000 	ldr.w	ip, [r1]
 800df6a:	fa1f fe82 	uxth.w	lr, r2
 800df6e:	fa1f f38c 	uxth.w	r3, ip
 800df72:	eba3 030e 	sub.w	r3, r3, lr
 800df76:	4403      	add	r3, r0
 800df78:	0c12      	lsrs	r2, r2, #16
 800df7a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800df7e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800df82:	b29b      	uxth	r3, r3
 800df84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df88:	45c1      	cmp	r9, r8
 800df8a:	f841 3b04 	str.w	r3, [r1], #4
 800df8e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800df92:	d2e6      	bcs.n	800df62 <quorem+0xa4>
 800df94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800df98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800df9c:	b922      	cbnz	r2, 800dfa8 <quorem+0xea>
 800df9e:	3b04      	subs	r3, #4
 800dfa0:	429d      	cmp	r5, r3
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	d30b      	bcc.n	800dfbe <quorem+0x100>
 800dfa6:	613c      	str	r4, [r7, #16]
 800dfa8:	3601      	adds	r6, #1
 800dfaa:	4630      	mov	r0, r6
 800dfac:	b003      	add	sp, #12
 800dfae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfb2:	6812      	ldr	r2, [r2, #0]
 800dfb4:	3b04      	subs	r3, #4
 800dfb6:	2a00      	cmp	r2, #0
 800dfb8:	d1cb      	bne.n	800df52 <quorem+0x94>
 800dfba:	3c01      	subs	r4, #1
 800dfbc:	e7c6      	b.n	800df4c <quorem+0x8e>
 800dfbe:	6812      	ldr	r2, [r2, #0]
 800dfc0:	3b04      	subs	r3, #4
 800dfc2:	2a00      	cmp	r2, #0
 800dfc4:	d1ef      	bne.n	800dfa6 <quorem+0xe8>
 800dfc6:	3c01      	subs	r4, #1
 800dfc8:	e7ea      	b.n	800dfa0 <quorem+0xe2>
 800dfca:	2000      	movs	r0, #0
 800dfcc:	e7ee      	b.n	800dfac <quorem+0xee>
	...

0800dfd0 <_dtoa_r>:
 800dfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfd4:	69c7      	ldr	r7, [r0, #28]
 800dfd6:	b099      	sub	sp, #100	@ 0x64
 800dfd8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dfdc:	ec55 4b10 	vmov	r4, r5, d0
 800dfe0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800dfe2:	9109      	str	r1, [sp, #36]	@ 0x24
 800dfe4:	4683      	mov	fp, r0
 800dfe6:	920e      	str	r2, [sp, #56]	@ 0x38
 800dfe8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dfea:	b97f      	cbnz	r7, 800e00c <_dtoa_r+0x3c>
 800dfec:	2010      	movs	r0, #16
 800dfee:	f000 fdfd 	bl	800ebec <malloc>
 800dff2:	4602      	mov	r2, r0
 800dff4:	f8cb 001c 	str.w	r0, [fp, #28]
 800dff8:	b920      	cbnz	r0, 800e004 <_dtoa_r+0x34>
 800dffa:	4ba7      	ldr	r3, [pc, #668]	@ (800e298 <_dtoa_r+0x2c8>)
 800dffc:	21ef      	movs	r1, #239	@ 0xef
 800dffe:	48a7      	ldr	r0, [pc, #668]	@ (800e29c <_dtoa_r+0x2cc>)
 800e000:	f001 fc5a 	bl	800f8b8 <__assert_func>
 800e004:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e008:	6007      	str	r7, [r0, #0]
 800e00a:	60c7      	str	r7, [r0, #12]
 800e00c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e010:	6819      	ldr	r1, [r3, #0]
 800e012:	b159      	cbz	r1, 800e02c <_dtoa_r+0x5c>
 800e014:	685a      	ldr	r2, [r3, #4]
 800e016:	604a      	str	r2, [r1, #4]
 800e018:	2301      	movs	r3, #1
 800e01a:	4093      	lsls	r3, r2
 800e01c:	608b      	str	r3, [r1, #8]
 800e01e:	4658      	mov	r0, fp
 800e020:	f000 feda 	bl	800edd8 <_Bfree>
 800e024:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e028:	2200      	movs	r2, #0
 800e02a:	601a      	str	r2, [r3, #0]
 800e02c:	1e2b      	subs	r3, r5, #0
 800e02e:	bfb9      	ittee	lt
 800e030:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e034:	9303      	strlt	r3, [sp, #12]
 800e036:	2300      	movge	r3, #0
 800e038:	6033      	strge	r3, [r6, #0]
 800e03a:	9f03      	ldr	r7, [sp, #12]
 800e03c:	4b98      	ldr	r3, [pc, #608]	@ (800e2a0 <_dtoa_r+0x2d0>)
 800e03e:	bfbc      	itt	lt
 800e040:	2201      	movlt	r2, #1
 800e042:	6032      	strlt	r2, [r6, #0]
 800e044:	43bb      	bics	r3, r7
 800e046:	d112      	bne.n	800e06e <_dtoa_r+0x9e>
 800e048:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e04a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e04e:	6013      	str	r3, [r2, #0]
 800e050:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e054:	4323      	orrs	r3, r4
 800e056:	f000 854d 	beq.w	800eaf4 <_dtoa_r+0xb24>
 800e05a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e05c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e2b4 <_dtoa_r+0x2e4>
 800e060:	2b00      	cmp	r3, #0
 800e062:	f000 854f 	beq.w	800eb04 <_dtoa_r+0xb34>
 800e066:	f10a 0303 	add.w	r3, sl, #3
 800e06a:	f000 bd49 	b.w	800eb00 <_dtoa_r+0xb30>
 800e06e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e072:	2200      	movs	r2, #0
 800e074:	ec51 0b17 	vmov	r0, r1, d7
 800e078:	2300      	movs	r3, #0
 800e07a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e07e:	f7f2 fd23 	bl	8000ac8 <__aeabi_dcmpeq>
 800e082:	4680      	mov	r8, r0
 800e084:	b158      	cbz	r0, 800e09e <_dtoa_r+0xce>
 800e086:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e088:	2301      	movs	r3, #1
 800e08a:	6013      	str	r3, [r2, #0]
 800e08c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e08e:	b113      	cbz	r3, 800e096 <_dtoa_r+0xc6>
 800e090:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e092:	4b84      	ldr	r3, [pc, #528]	@ (800e2a4 <_dtoa_r+0x2d4>)
 800e094:	6013      	str	r3, [r2, #0]
 800e096:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e2b8 <_dtoa_r+0x2e8>
 800e09a:	f000 bd33 	b.w	800eb04 <_dtoa_r+0xb34>
 800e09e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e0a2:	aa16      	add	r2, sp, #88	@ 0x58
 800e0a4:	a917      	add	r1, sp, #92	@ 0x5c
 800e0a6:	4658      	mov	r0, fp
 800e0a8:	f001 f980 	bl	800f3ac <__d2b>
 800e0ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e0b0:	4681      	mov	r9, r0
 800e0b2:	2e00      	cmp	r6, #0
 800e0b4:	d077      	beq.n	800e1a6 <_dtoa_r+0x1d6>
 800e0b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e0b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e0bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e0c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e0cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	4b74      	ldr	r3, [pc, #464]	@ (800e2a8 <_dtoa_r+0x2d8>)
 800e0d6:	f7f2 f8d7 	bl	8000288 <__aeabi_dsub>
 800e0da:	a369      	add	r3, pc, #420	@ (adr r3, 800e280 <_dtoa_r+0x2b0>)
 800e0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e0:	f7f2 fa8a 	bl	80005f8 <__aeabi_dmul>
 800e0e4:	a368      	add	r3, pc, #416	@ (adr r3, 800e288 <_dtoa_r+0x2b8>)
 800e0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ea:	f7f2 f8cf 	bl	800028c <__adddf3>
 800e0ee:	4604      	mov	r4, r0
 800e0f0:	4630      	mov	r0, r6
 800e0f2:	460d      	mov	r5, r1
 800e0f4:	f7f2 fa16 	bl	8000524 <__aeabi_i2d>
 800e0f8:	a365      	add	r3, pc, #404	@ (adr r3, 800e290 <_dtoa_r+0x2c0>)
 800e0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fe:	f7f2 fa7b 	bl	80005f8 <__aeabi_dmul>
 800e102:	4602      	mov	r2, r0
 800e104:	460b      	mov	r3, r1
 800e106:	4620      	mov	r0, r4
 800e108:	4629      	mov	r1, r5
 800e10a:	f7f2 f8bf 	bl	800028c <__adddf3>
 800e10e:	4604      	mov	r4, r0
 800e110:	460d      	mov	r5, r1
 800e112:	f7f2 fd21 	bl	8000b58 <__aeabi_d2iz>
 800e116:	2200      	movs	r2, #0
 800e118:	4607      	mov	r7, r0
 800e11a:	2300      	movs	r3, #0
 800e11c:	4620      	mov	r0, r4
 800e11e:	4629      	mov	r1, r5
 800e120:	f7f2 fcdc 	bl	8000adc <__aeabi_dcmplt>
 800e124:	b140      	cbz	r0, 800e138 <_dtoa_r+0x168>
 800e126:	4638      	mov	r0, r7
 800e128:	f7f2 f9fc 	bl	8000524 <__aeabi_i2d>
 800e12c:	4622      	mov	r2, r4
 800e12e:	462b      	mov	r3, r5
 800e130:	f7f2 fcca 	bl	8000ac8 <__aeabi_dcmpeq>
 800e134:	b900      	cbnz	r0, 800e138 <_dtoa_r+0x168>
 800e136:	3f01      	subs	r7, #1
 800e138:	2f16      	cmp	r7, #22
 800e13a:	d851      	bhi.n	800e1e0 <_dtoa_r+0x210>
 800e13c:	4b5b      	ldr	r3, [pc, #364]	@ (800e2ac <_dtoa_r+0x2dc>)
 800e13e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e146:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e14a:	f7f2 fcc7 	bl	8000adc <__aeabi_dcmplt>
 800e14e:	2800      	cmp	r0, #0
 800e150:	d048      	beq.n	800e1e4 <_dtoa_r+0x214>
 800e152:	3f01      	subs	r7, #1
 800e154:	2300      	movs	r3, #0
 800e156:	9312      	str	r3, [sp, #72]	@ 0x48
 800e158:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e15a:	1b9b      	subs	r3, r3, r6
 800e15c:	1e5a      	subs	r2, r3, #1
 800e15e:	bf44      	itt	mi
 800e160:	f1c3 0801 	rsbmi	r8, r3, #1
 800e164:	2300      	movmi	r3, #0
 800e166:	9208      	str	r2, [sp, #32]
 800e168:	bf54      	ite	pl
 800e16a:	f04f 0800 	movpl.w	r8, #0
 800e16e:	9308      	strmi	r3, [sp, #32]
 800e170:	2f00      	cmp	r7, #0
 800e172:	db39      	blt.n	800e1e8 <_dtoa_r+0x218>
 800e174:	9b08      	ldr	r3, [sp, #32]
 800e176:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e178:	443b      	add	r3, r7
 800e17a:	9308      	str	r3, [sp, #32]
 800e17c:	2300      	movs	r3, #0
 800e17e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e182:	2b09      	cmp	r3, #9
 800e184:	d864      	bhi.n	800e250 <_dtoa_r+0x280>
 800e186:	2b05      	cmp	r3, #5
 800e188:	bfc4      	itt	gt
 800e18a:	3b04      	subgt	r3, #4
 800e18c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e18e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e190:	f1a3 0302 	sub.w	r3, r3, #2
 800e194:	bfcc      	ite	gt
 800e196:	2400      	movgt	r4, #0
 800e198:	2401      	movle	r4, #1
 800e19a:	2b03      	cmp	r3, #3
 800e19c:	d863      	bhi.n	800e266 <_dtoa_r+0x296>
 800e19e:	e8df f003 	tbb	[pc, r3]
 800e1a2:	372a      	.short	0x372a
 800e1a4:	5535      	.short	0x5535
 800e1a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e1aa:	441e      	add	r6, r3
 800e1ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e1b0:	2b20      	cmp	r3, #32
 800e1b2:	bfc1      	itttt	gt
 800e1b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e1b8:	409f      	lslgt	r7, r3
 800e1ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e1be:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e1c2:	bfd6      	itet	le
 800e1c4:	f1c3 0320 	rsble	r3, r3, #32
 800e1c8:	ea47 0003 	orrgt.w	r0, r7, r3
 800e1cc:	fa04 f003 	lslle.w	r0, r4, r3
 800e1d0:	f7f2 f998 	bl	8000504 <__aeabi_ui2d>
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e1da:	3e01      	subs	r6, #1
 800e1dc:	9214      	str	r2, [sp, #80]	@ 0x50
 800e1de:	e777      	b.n	800e0d0 <_dtoa_r+0x100>
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	e7b8      	b.n	800e156 <_dtoa_r+0x186>
 800e1e4:	9012      	str	r0, [sp, #72]	@ 0x48
 800e1e6:	e7b7      	b.n	800e158 <_dtoa_r+0x188>
 800e1e8:	427b      	negs	r3, r7
 800e1ea:	930a      	str	r3, [sp, #40]	@ 0x28
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	eba8 0807 	sub.w	r8, r8, r7
 800e1f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e1f4:	e7c4      	b.n	800e180 <_dtoa_r+0x1b0>
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e1fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	dc35      	bgt.n	800e26c <_dtoa_r+0x29c>
 800e200:	2301      	movs	r3, #1
 800e202:	9300      	str	r3, [sp, #0]
 800e204:	9307      	str	r3, [sp, #28]
 800e206:	461a      	mov	r2, r3
 800e208:	920e      	str	r2, [sp, #56]	@ 0x38
 800e20a:	e00b      	b.n	800e224 <_dtoa_r+0x254>
 800e20c:	2301      	movs	r3, #1
 800e20e:	e7f3      	b.n	800e1f8 <_dtoa_r+0x228>
 800e210:	2300      	movs	r3, #0
 800e212:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e214:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e216:	18fb      	adds	r3, r7, r3
 800e218:	9300      	str	r3, [sp, #0]
 800e21a:	3301      	adds	r3, #1
 800e21c:	2b01      	cmp	r3, #1
 800e21e:	9307      	str	r3, [sp, #28]
 800e220:	bfb8      	it	lt
 800e222:	2301      	movlt	r3, #1
 800e224:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e228:	2100      	movs	r1, #0
 800e22a:	2204      	movs	r2, #4
 800e22c:	f102 0514 	add.w	r5, r2, #20
 800e230:	429d      	cmp	r5, r3
 800e232:	d91f      	bls.n	800e274 <_dtoa_r+0x2a4>
 800e234:	6041      	str	r1, [r0, #4]
 800e236:	4658      	mov	r0, fp
 800e238:	f000 fd8e 	bl	800ed58 <_Balloc>
 800e23c:	4682      	mov	sl, r0
 800e23e:	2800      	cmp	r0, #0
 800e240:	d13c      	bne.n	800e2bc <_dtoa_r+0x2ec>
 800e242:	4b1b      	ldr	r3, [pc, #108]	@ (800e2b0 <_dtoa_r+0x2e0>)
 800e244:	4602      	mov	r2, r0
 800e246:	f240 11af 	movw	r1, #431	@ 0x1af
 800e24a:	e6d8      	b.n	800dffe <_dtoa_r+0x2e>
 800e24c:	2301      	movs	r3, #1
 800e24e:	e7e0      	b.n	800e212 <_dtoa_r+0x242>
 800e250:	2401      	movs	r4, #1
 800e252:	2300      	movs	r3, #0
 800e254:	9309      	str	r3, [sp, #36]	@ 0x24
 800e256:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e258:	f04f 33ff 	mov.w	r3, #4294967295
 800e25c:	9300      	str	r3, [sp, #0]
 800e25e:	9307      	str	r3, [sp, #28]
 800e260:	2200      	movs	r2, #0
 800e262:	2312      	movs	r3, #18
 800e264:	e7d0      	b.n	800e208 <_dtoa_r+0x238>
 800e266:	2301      	movs	r3, #1
 800e268:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e26a:	e7f5      	b.n	800e258 <_dtoa_r+0x288>
 800e26c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e26e:	9300      	str	r3, [sp, #0]
 800e270:	9307      	str	r3, [sp, #28]
 800e272:	e7d7      	b.n	800e224 <_dtoa_r+0x254>
 800e274:	3101      	adds	r1, #1
 800e276:	0052      	lsls	r2, r2, #1
 800e278:	e7d8      	b.n	800e22c <_dtoa_r+0x25c>
 800e27a:	bf00      	nop
 800e27c:	f3af 8000 	nop.w
 800e280:	636f4361 	.word	0x636f4361
 800e284:	3fd287a7 	.word	0x3fd287a7
 800e288:	8b60c8b3 	.word	0x8b60c8b3
 800e28c:	3fc68a28 	.word	0x3fc68a28
 800e290:	509f79fb 	.word	0x509f79fb
 800e294:	3fd34413 	.word	0x3fd34413
 800e298:	08012049 	.word	0x08012049
 800e29c:	08012060 	.word	0x08012060
 800e2a0:	7ff00000 	.word	0x7ff00000
 800e2a4:	08012019 	.word	0x08012019
 800e2a8:	3ff80000 	.word	0x3ff80000
 800e2ac:	08012158 	.word	0x08012158
 800e2b0:	080120b8 	.word	0x080120b8
 800e2b4:	08012045 	.word	0x08012045
 800e2b8:	08012018 	.word	0x08012018
 800e2bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e2c0:	6018      	str	r0, [r3, #0]
 800e2c2:	9b07      	ldr	r3, [sp, #28]
 800e2c4:	2b0e      	cmp	r3, #14
 800e2c6:	f200 80a4 	bhi.w	800e412 <_dtoa_r+0x442>
 800e2ca:	2c00      	cmp	r4, #0
 800e2cc:	f000 80a1 	beq.w	800e412 <_dtoa_r+0x442>
 800e2d0:	2f00      	cmp	r7, #0
 800e2d2:	dd33      	ble.n	800e33c <_dtoa_r+0x36c>
 800e2d4:	4bad      	ldr	r3, [pc, #692]	@ (800e58c <_dtoa_r+0x5bc>)
 800e2d6:	f007 020f 	and.w	r2, r7, #15
 800e2da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e2de:	ed93 7b00 	vldr	d7, [r3]
 800e2e2:	05f8      	lsls	r0, r7, #23
 800e2e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e2e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e2ec:	d516      	bpl.n	800e31c <_dtoa_r+0x34c>
 800e2ee:	4ba8      	ldr	r3, [pc, #672]	@ (800e590 <_dtoa_r+0x5c0>)
 800e2f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e2f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e2f8:	f7f2 faa8 	bl	800084c <__aeabi_ddiv>
 800e2fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e300:	f004 040f 	and.w	r4, r4, #15
 800e304:	2603      	movs	r6, #3
 800e306:	4da2      	ldr	r5, [pc, #648]	@ (800e590 <_dtoa_r+0x5c0>)
 800e308:	b954      	cbnz	r4, 800e320 <_dtoa_r+0x350>
 800e30a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e30e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e312:	f7f2 fa9b 	bl	800084c <__aeabi_ddiv>
 800e316:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e31a:	e028      	b.n	800e36e <_dtoa_r+0x39e>
 800e31c:	2602      	movs	r6, #2
 800e31e:	e7f2      	b.n	800e306 <_dtoa_r+0x336>
 800e320:	07e1      	lsls	r1, r4, #31
 800e322:	d508      	bpl.n	800e336 <_dtoa_r+0x366>
 800e324:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e328:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e32c:	f7f2 f964 	bl	80005f8 <__aeabi_dmul>
 800e330:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e334:	3601      	adds	r6, #1
 800e336:	1064      	asrs	r4, r4, #1
 800e338:	3508      	adds	r5, #8
 800e33a:	e7e5      	b.n	800e308 <_dtoa_r+0x338>
 800e33c:	f000 80d2 	beq.w	800e4e4 <_dtoa_r+0x514>
 800e340:	427c      	negs	r4, r7
 800e342:	4b92      	ldr	r3, [pc, #584]	@ (800e58c <_dtoa_r+0x5bc>)
 800e344:	4d92      	ldr	r5, [pc, #584]	@ (800e590 <_dtoa_r+0x5c0>)
 800e346:	f004 020f 	and.w	r2, r4, #15
 800e34a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e352:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e356:	f7f2 f94f 	bl	80005f8 <__aeabi_dmul>
 800e35a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e35e:	1124      	asrs	r4, r4, #4
 800e360:	2300      	movs	r3, #0
 800e362:	2602      	movs	r6, #2
 800e364:	2c00      	cmp	r4, #0
 800e366:	f040 80b2 	bne.w	800e4ce <_dtoa_r+0x4fe>
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d1d3      	bne.n	800e316 <_dtoa_r+0x346>
 800e36e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e370:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e374:	2b00      	cmp	r3, #0
 800e376:	f000 80b7 	beq.w	800e4e8 <_dtoa_r+0x518>
 800e37a:	4b86      	ldr	r3, [pc, #536]	@ (800e594 <_dtoa_r+0x5c4>)
 800e37c:	2200      	movs	r2, #0
 800e37e:	4620      	mov	r0, r4
 800e380:	4629      	mov	r1, r5
 800e382:	f7f2 fbab 	bl	8000adc <__aeabi_dcmplt>
 800e386:	2800      	cmp	r0, #0
 800e388:	f000 80ae 	beq.w	800e4e8 <_dtoa_r+0x518>
 800e38c:	9b07      	ldr	r3, [sp, #28]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	f000 80aa 	beq.w	800e4e8 <_dtoa_r+0x518>
 800e394:	9b00      	ldr	r3, [sp, #0]
 800e396:	2b00      	cmp	r3, #0
 800e398:	dd37      	ble.n	800e40a <_dtoa_r+0x43a>
 800e39a:	1e7b      	subs	r3, r7, #1
 800e39c:	9304      	str	r3, [sp, #16]
 800e39e:	4620      	mov	r0, r4
 800e3a0:	4b7d      	ldr	r3, [pc, #500]	@ (800e598 <_dtoa_r+0x5c8>)
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	4629      	mov	r1, r5
 800e3a6:	f7f2 f927 	bl	80005f8 <__aeabi_dmul>
 800e3aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3ae:	9c00      	ldr	r4, [sp, #0]
 800e3b0:	3601      	adds	r6, #1
 800e3b2:	4630      	mov	r0, r6
 800e3b4:	f7f2 f8b6 	bl	8000524 <__aeabi_i2d>
 800e3b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e3bc:	f7f2 f91c 	bl	80005f8 <__aeabi_dmul>
 800e3c0:	4b76      	ldr	r3, [pc, #472]	@ (800e59c <_dtoa_r+0x5cc>)
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f7f1 ff62 	bl	800028c <__adddf3>
 800e3c8:	4605      	mov	r5, r0
 800e3ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e3ce:	2c00      	cmp	r4, #0
 800e3d0:	f040 808d 	bne.w	800e4ee <_dtoa_r+0x51e>
 800e3d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3d8:	4b71      	ldr	r3, [pc, #452]	@ (800e5a0 <_dtoa_r+0x5d0>)
 800e3da:	2200      	movs	r2, #0
 800e3dc:	f7f1 ff54 	bl	8000288 <__aeabi_dsub>
 800e3e0:	4602      	mov	r2, r0
 800e3e2:	460b      	mov	r3, r1
 800e3e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e3e8:	462a      	mov	r2, r5
 800e3ea:	4633      	mov	r3, r6
 800e3ec:	f7f2 fb94 	bl	8000b18 <__aeabi_dcmpgt>
 800e3f0:	2800      	cmp	r0, #0
 800e3f2:	f040 828b 	bne.w	800e90c <_dtoa_r+0x93c>
 800e3f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3fa:	462a      	mov	r2, r5
 800e3fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e400:	f7f2 fb6c 	bl	8000adc <__aeabi_dcmplt>
 800e404:	2800      	cmp	r0, #0
 800e406:	f040 8128 	bne.w	800e65a <_dtoa_r+0x68a>
 800e40a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e40e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e412:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e414:	2b00      	cmp	r3, #0
 800e416:	f2c0 815a 	blt.w	800e6ce <_dtoa_r+0x6fe>
 800e41a:	2f0e      	cmp	r7, #14
 800e41c:	f300 8157 	bgt.w	800e6ce <_dtoa_r+0x6fe>
 800e420:	4b5a      	ldr	r3, [pc, #360]	@ (800e58c <_dtoa_r+0x5bc>)
 800e422:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e426:	ed93 7b00 	vldr	d7, [r3]
 800e42a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	ed8d 7b00 	vstr	d7, [sp]
 800e432:	da03      	bge.n	800e43c <_dtoa_r+0x46c>
 800e434:	9b07      	ldr	r3, [sp, #28]
 800e436:	2b00      	cmp	r3, #0
 800e438:	f340 8101 	ble.w	800e63e <_dtoa_r+0x66e>
 800e43c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e440:	4656      	mov	r6, sl
 800e442:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e446:	4620      	mov	r0, r4
 800e448:	4629      	mov	r1, r5
 800e44a:	f7f2 f9ff 	bl	800084c <__aeabi_ddiv>
 800e44e:	f7f2 fb83 	bl	8000b58 <__aeabi_d2iz>
 800e452:	4680      	mov	r8, r0
 800e454:	f7f2 f866 	bl	8000524 <__aeabi_i2d>
 800e458:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e45c:	f7f2 f8cc 	bl	80005f8 <__aeabi_dmul>
 800e460:	4602      	mov	r2, r0
 800e462:	460b      	mov	r3, r1
 800e464:	4620      	mov	r0, r4
 800e466:	4629      	mov	r1, r5
 800e468:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e46c:	f7f1 ff0c 	bl	8000288 <__aeabi_dsub>
 800e470:	f806 4b01 	strb.w	r4, [r6], #1
 800e474:	9d07      	ldr	r5, [sp, #28]
 800e476:	eba6 040a 	sub.w	r4, r6, sl
 800e47a:	42a5      	cmp	r5, r4
 800e47c:	4602      	mov	r2, r0
 800e47e:	460b      	mov	r3, r1
 800e480:	f040 8117 	bne.w	800e6b2 <_dtoa_r+0x6e2>
 800e484:	f7f1 ff02 	bl	800028c <__adddf3>
 800e488:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e48c:	4604      	mov	r4, r0
 800e48e:	460d      	mov	r5, r1
 800e490:	f7f2 fb42 	bl	8000b18 <__aeabi_dcmpgt>
 800e494:	2800      	cmp	r0, #0
 800e496:	f040 80f9 	bne.w	800e68c <_dtoa_r+0x6bc>
 800e49a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e49e:	4620      	mov	r0, r4
 800e4a0:	4629      	mov	r1, r5
 800e4a2:	f7f2 fb11 	bl	8000ac8 <__aeabi_dcmpeq>
 800e4a6:	b118      	cbz	r0, 800e4b0 <_dtoa_r+0x4e0>
 800e4a8:	f018 0f01 	tst.w	r8, #1
 800e4ac:	f040 80ee 	bne.w	800e68c <_dtoa_r+0x6bc>
 800e4b0:	4649      	mov	r1, r9
 800e4b2:	4658      	mov	r0, fp
 800e4b4:	f000 fc90 	bl	800edd8 <_Bfree>
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	7033      	strb	r3, [r6, #0]
 800e4bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e4be:	3701      	adds	r7, #1
 800e4c0:	601f      	str	r7, [r3, #0]
 800e4c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	f000 831d 	beq.w	800eb04 <_dtoa_r+0xb34>
 800e4ca:	601e      	str	r6, [r3, #0]
 800e4cc:	e31a      	b.n	800eb04 <_dtoa_r+0xb34>
 800e4ce:	07e2      	lsls	r2, r4, #31
 800e4d0:	d505      	bpl.n	800e4de <_dtoa_r+0x50e>
 800e4d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e4d6:	f7f2 f88f 	bl	80005f8 <__aeabi_dmul>
 800e4da:	3601      	adds	r6, #1
 800e4dc:	2301      	movs	r3, #1
 800e4de:	1064      	asrs	r4, r4, #1
 800e4e0:	3508      	adds	r5, #8
 800e4e2:	e73f      	b.n	800e364 <_dtoa_r+0x394>
 800e4e4:	2602      	movs	r6, #2
 800e4e6:	e742      	b.n	800e36e <_dtoa_r+0x39e>
 800e4e8:	9c07      	ldr	r4, [sp, #28]
 800e4ea:	9704      	str	r7, [sp, #16]
 800e4ec:	e761      	b.n	800e3b2 <_dtoa_r+0x3e2>
 800e4ee:	4b27      	ldr	r3, [pc, #156]	@ (800e58c <_dtoa_r+0x5bc>)
 800e4f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e4f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e4f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e4fa:	4454      	add	r4, sl
 800e4fc:	2900      	cmp	r1, #0
 800e4fe:	d053      	beq.n	800e5a8 <_dtoa_r+0x5d8>
 800e500:	4928      	ldr	r1, [pc, #160]	@ (800e5a4 <_dtoa_r+0x5d4>)
 800e502:	2000      	movs	r0, #0
 800e504:	f7f2 f9a2 	bl	800084c <__aeabi_ddiv>
 800e508:	4633      	mov	r3, r6
 800e50a:	462a      	mov	r2, r5
 800e50c:	f7f1 febc 	bl	8000288 <__aeabi_dsub>
 800e510:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e514:	4656      	mov	r6, sl
 800e516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e51a:	f7f2 fb1d 	bl	8000b58 <__aeabi_d2iz>
 800e51e:	4605      	mov	r5, r0
 800e520:	f7f2 f800 	bl	8000524 <__aeabi_i2d>
 800e524:	4602      	mov	r2, r0
 800e526:	460b      	mov	r3, r1
 800e528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e52c:	f7f1 feac 	bl	8000288 <__aeabi_dsub>
 800e530:	3530      	adds	r5, #48	@ 0x30
 800e532:	4602      	mov	r2, r0
 800e534:	460b      	mov	r3, r1
 800e536:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e53a:	f806 5b01 	strb.w	r5, [r6], #1
 800e53e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e542:	f7f2 facb 	bl	8000adc <__aeabi_dcmplt>
 800e546:	2800      	cmp	r0, #0
 800e548:	d171      	bne.n	800e62e <_dtoa_r+0x65e>
 800e54a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e54e:	4911      	ldr	r1, [pc, #68]	@ (800e594 <_dtoa_r+0x5c4>)
 800e550:	2000      	movs	r0, #0
 800e552:	f7f1 fe99 	bl	8000288 <__aeabi_dsub>
 800e556:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e55a:	f7f2 fabf 	bl	8000adc <__aeabi_dcmplt>
 800e55e:	2800      	cmp	r0, #0
 800e560:	f040 8095 	bne.w	800e68e <_dtoa_r+0x6be>
 800e564:	42a6      	cmp	r6, r4
 800e566:	f43f af50 	beq.w	800e40a <_dtoa_r+0x43a>
 800e56a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e56e:	4b0a      	ldr	r3, [pc, #40]	@ (800e598 <_dtoa_r+0x5c8>)
 800e570:	2200      	movs	r2, #0
 800e572:	f7f2 f841 	bl	80005f8 <__aeabi_dmul>
 800e576:	4b08      	ldr	r3, [pc, #32]	@ (800e598 <_dtoa_r+0x5c8>)
 800e578:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e57c:	2200      	movs	r2, #0
 800e57e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e582:	f7f2 f839 	bl	80005f8 <__aeabi_dmul>
 800e586:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e58a:	e7c4      	b.n	800e516 <_dtoa_r+0x546>
 800e58c:	08012158 	.word	0x08012158
 800e590:	08012130 	.word	0x08012130
 800e594:	3ff00000 	.word	0x3ff00000
 800e598:	40240000 	.word	0x40240000
 800e59c:	401c0000 	.word	0x401c0000
 800e5a0:	40140000 	.word	0x40140000
 800e5a4:	3fe00000 	.word	0x3fe00000
 800e5a8:	4631      	mov	r1, r6
 800e5aa:	4628      	mov	r0, r5
 800e5ac:	f7f2 f824 	bl	80005f8 <__aeabi_dmul>
 800e5b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e5b4:	9415      	str	r4, [sp, #84]	@ 0x54
 800e5b6:	4656      	mov	r6, sl
 800e5b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5bc:	f7f2 facc 	bl	8000b58 <__aeabi_d2iz>
 800e5c0:	4605      	mov	r5, r0
 800e5c2:	f7f1 ffaf 	bl	8000524 <__aeabi_i2d>
 800e5c6:	4602      	mov	r2, r0
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5ce:	f7f1 fe5b 	bl	8000288 <__aeabi_dsub>
 800e5d2:	3530      	adds	r5, #48	@ 0x30
 800e5d4:	f806 5b01 	strb.w	r5, [r6], #1
 800e5d8:	4602      	mov	r2, r0
 800e5da:	460b      	mov	r3, r1
 800e5dc:	42a6      	cmp	r6, r4
 800e5de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e5e2:	f04f 0200 	mov.w	r2, #0
 800e5e6:	d124      	bne.n	800e632 <_dtoa_r+0x662>
 800e5e8:	4bac      	ldr	r3, [pc, #688]	@ (800e89c <_dtoa_r+0x8cc>)
 800e5ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e5ee:	f7f1 fe4d 	bl	800028c <__adddf3>
 800e5f2:	4602      	mov	r2, r0
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5fa:	f7f2 fa8d 	bl	8000b18 <__aeabi_dcmpgt>
 800e5fe:	2800      	cmp	r0, #0
 800e600:	d145      	bne.n	800e68e <_dtoa_r+0x6be>
 800e602:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e606:	49a5      	ldr	r1, [pc, #660]	@ (800e89c <_dtoa_r+0x8cc>)
 800e608:	2000      	movs	r0, #0
 800e60a:	f7f1 fe3d 	bl	8000288 <__aeabi_dsub>
 800e60e:	4602      	mov	r2, r0
 800e610:	460b      	mov	r3, r1
 800e612:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e616:	f7f2 fa61 	bl	8000adc <__aeabi_dcmplt>
 800e61a:	2800      	cmp	r0, #0
 800e61c:	f43f aef5 	beq.w	800e40a <_dtoa_r+0x43a>
 800e620:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e622:	1e73      	subs	r3, r6, #1
 800e624:	9315      	str	r3, [sp, #84]	@ 0x54
 800e626:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e62a:	2b30      	cmp	r3, #48	@ 0x30
 800e62c:	d0f8      	beq.n	800e620 <_dtoa_r+0x650>
 800e62e:	9f04      	ldr	r7, [sp, #16]
 800e630:	e73e      	b.n	800e4b0 <_dtoa_r+0x4e0>
 800e632:	4b9b      	ldr	r3, [pc, #620]	@ (800e8a0 <_dtoa_r+0x8d0>)
 800e634:	f7f1 ffe0 	bl	80005f8 <__aeabi_dmul>
 800e638:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e63c:	e7bc      	b.n	800e5b8 <_dtoa_r+0x5e8>
 800e63e:	d10c      	bne.n	800e65a <_dtoa_r+0x68a>
 800e640:	4b98      	ldr	r3, [pc, #608]	@ (800e8a4 <_dtoa_r+0x8d4>)
 800e642:	2200      	movs	r2, #0
 800e644:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e648:	f7f1 ffd6 	bl	80005f8 <__aeabi_dmul>
 800e64c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e650:	f7f2 fa58 	bl	8000b04 <__aeabi_dcmpge>
 800e654:	2800      	cmp	r0, #0
 800e656:	f000 8157 	beq.w	800e908 <_dtoa_r+0x938>
 800e65a:	2400      	movs	r4, #0
 800e65c:	4625      	mov	r5, r4
 800e65e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e660:	43db      	mvns	r3, r3
 800e662:	9304      	str	r3, [sp, #16]
 800e664:	4656      	mov	r6, sl
 800e666:	2700      	movs	r7, #0
 800e668:	4621      	mov	r1, r4
 800e66a:	4658      	mov	r0, fp
 800e66c:	f000 fbb4 	bl	800edd8 <_Bfree>
 800e670:	2d00      	cmp	r5, #0
 800e672:	d0dc      	beq.n	800e62e <_dtoa_r+0x65e>
 800e674:	b12f      	cbz	r7, 800e682 <_dtoa_r+0x6b2>
 800e676:	42af      	cmp	r7, r5
 800e678:	d003      	beq.n	800e682 <_dtoa_r+0x6b2>
 800e67a:	4639      	mov	r1, r7
 800e67c:	4658      	mov	r0, fp
 800e67e:	f000 fbab 	bl	800edd8 <_Bfree>
 800e682:	4629      	mov	r1, r5
 800e684:	4658      	mov	r0, fp
 800e686:	f000 fba7 	bl	800edd8 <_Bfree>
 800e68a:	e7d0      	b.n	800e62e <_dtoa_r+0x65e>
 800e68c:	9704      	str	r7, [sp, #16]
 800e68e:	4633      	mov	r3, r6
 800e690:	461e      	mov	r6, r3
 800e692:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e696:	2a39      	cmp	r2, #57	@ 0x39
 800e698:	d107      	bne.n	800e6aa <_dtoa_r+0x6da>
 800e69a:	459a      	cmp	sl, r3
 800e69c:	d1f8      	bne.n	800e690 <_dtoa_r+0x6c0>
 800e69e:	9a04      	ldr	r2, [sp, #16]
 800e6a0:	3201      	adds	r2, #1
 800e6a2:	9204      	str	r2, [sp, #16]
 800e6a4:	2230      	movs	r2, #48	@ 0x30
 800e6a6:	f88a 2000 	strb.w	r2, [sl]
 800e6aa:	781a      	ldrb	r2, [r3, #0]
 800e6ac:	3201      	adds	r2, #1
 800e6ae:	701a      	strb	r2, [r3, #0]
 800e6b0:	e7bd      	b.n	800e62e <_dtoa_r+0x65e>
 800e6b2:	4b7b      	ldr	r3, [pc, #492]	@ (800e8a0 <_dtoa_r+0x8d0>)
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	f7f1 ff9f 	bl	80005f8 <__aeabi_dmul>
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	2300      	movs	r3, #0
 800e6be:	4604      	mov	r4, r0
 800e6c0:	460d      	mov	r5, r1
 800e6c2:	f7f2 fa01 	bl	8000ac8 <__aeabi_dcmpeq>
 800e6c6:	2800      	cmp	r0, #0
 800e6c8:	f43f aebb 	beq.w	800e442 <_dtoa_r+0x472>
 800e6cc:	e6f0      	b.n	800e4b0 <_dtoa_r+0x4e0>
 800e6ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e6d0:	2a00      	cmp	r2, #0
 800e6d2:	f000 80db 	beq.w	800e88c <_dtoa_r+0x8bc>
 800e6d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6d8:	2a01      	cmp	r2, #1
 800e6da:	f300 80bf 	bgt.w	800e85c <_dtoa_r+0x88c>
 800e6de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e6e0:	2a00      	cmp	r2, #0
 800e6e2:	f000 80b7 	beq.w	800e854 <_dtoa_r+0x884>
 800e6e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e6ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e6ec:	4646      	mov	r6, r8
 800e6ee:	9a08      	ldr	r2, [sp, #32]
 800e6f0:	2101      	movs	r1, #1
 800e6f2:	441a      	add	r2, r3
 800e6f4:	4658      	mov	r0, fp
 800e6f6:	4498      	add	r8, r3
 800e6f8:	9208      	str	r2, [sp, #32]
 800e6fa:	f000 fc21 	bl	800ef40 <__i2b>
 800e6fe:	4605      	mov	r5, r0
 800e700:	b15e      	cbz	r6, 800e71a <_dtoa_r+0x74a>
 800e702:	9b08      	ldr	r3, [sp, #32]
 800e704:	2b00      	cmp	r3, #0
 800e706:	dd08      	ble.n	800e71a <_dtoa_r+0x74a>
 800e708:	42b3      	cmp	r3, r6
 800e70a:	9a08      	ldr	r2, [sp, #32]
 800e70c:	bfa8      	it	ge
 800e70e:	4633      	movge	r3, r6
 800e710:	eba8 0803 	sub.w	r8, r8, r3
 800e714:	1af6      	subs	r6, r6, r3
 800e716:	1ad3      	subs	r3, r2, r3
 800e718:	9308      	str	r3, [sp, #32]
 800e71a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e71c:	b1f3      	cbz	r3, 800e75c <_dtoa_r+0x78c>
 800e71e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e720:	2b00      	cmp	r3, #0
 800e722:	f000 80b7 	beq.w	800e894 <_dtoa_r+0x8c4>
 800e726:	b18c      	cbz	r4, 800e74c <_dtoa_r+0x77c>
 800e728:	4629      	mov	r1, r5
 800e72a:	4622      	mov	r2, r4
 800e72c:	4658      	mov	r0, fp
 800e72e:	f000 fcc7 	bl	800f0c0 <__pow5mult>
 800e732:	464a      	mov	r2, r9
 800e734:	4601      	mov	r1, r0
 800e736:	4605      	mov	r5, r0
 800e738:	4658      	mov	r0, fp
 800e73a:	f000 fc17 	bl	800ef6c <__multiply>
 800e73e:	4649      	mov	r1, r9
 800e740:	9004      	str	r0, [sp, #16]
 800e742:	4658      	mov	r0, fp
 800e744:	f000 fb48 	bl	800edd8 <_Bfree>
 800e748:	9b04      	ldr	r3, [sp, #16]
 800e74a:	4699      	mov	r9, r3
 800e74c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e74e:	1b1a      	subs	r2, r3, r4
 800e750:	d004      	beq.n	800e75c <_dtoa_r+0x78c>
 800e752:	4649      	mov	r1, r9
 800e754:	4658      	mov	r0, fp
 800e756:	f000 fcb3 	bl	800f0c0 <__pow5mult>
 800e75a:	4681      	mov	r9, r0
 800e75c:	2101      	movs	r1, #1
 800e75e:	4658      	mov	r0, fp
 800e760:	f000 fbee 	bl	800ef40 <__i2b>
 800e764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e766:	4604      	mov	r4, r0
 800e768:	2b00      	cmp	r3, #0
 800e76a:	f000 81cf 	beq.w	800eb0c <_dtoa_r+0xb3c>
 800e76e:	461a      	mov	r2, r3
 800e770:	4601      	mov	r1, r0
 800e772:	4658      	mov	r0, fp
 800e774:	f000 fca4 	bl	800f0c0 <__pow5mult>
 800e778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	4604      	mov	r4, r0
 800e77e:	f300 8095 	bgt.w	800e8ac <_dtoa_r+0x8dc>
 800e782:	9b02      	ldr	r3, [sp, #8]
 800e784:	2b00      	cmp	r3, #0
 800e786:	f040 8087 	bne.w	800e898 <_dtoa_r+0x8c8>
 800e78a:	9b03      	ldr	r3, [sp, #12]
 800e78c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e790:	2b00      	cmp	r3, #0
 800e792:	f040 8089 	bne.w	800e8a8 <_dtoa_r+0x8d8>
 800e796:	9b03      	ldr	r3, [sp, #12]
 800e798:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e79c:	0d1b      	lsrs	r3, r3, #20
 800e79e:	051b      	lsls	r3, r3, #20
 800e7a0:	b12b      	cbz	r3, 800e7ae <_dtoa_r+0x7de>
 800e7a2:	9b08      	ldr	r3, [sp, #32]
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	9308      	str	r3, [sp, #32]
 800e7a8:	f108 0801 	add.w	r8, r8, #1
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	f000 81b0 	beq.w	800eb18 <_dtoa_r+0xb48>
 800e7b8:	6923      	ldr	r3, [r4, #16]
 800e7ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e7be:	6918      	ldr	r0, [r3, #16]
 800e7c0:	f000 fb72 	bl	800eea8 <__hi0bits>
 800e7c4:	f1c0 0020 	rsb	r0, r0, #32
 800e7c8:	9b08      	ldr	r3, [sp, #32]
 800e7ca:	4418      	add	r0, r3
 800e7cc:	f010 001f 	ands.w	r0, r0, #31
 800e7d0:	d077      	beq.n	800e8c2 <_dtoa_r+0x8f2>
 800e7d2:	f1c0 0320 	rsb	r3, r0, #32
 800e7d6:	2b04      	cmp	r3, #4
 800e7d8:	dd6b      	ble.n	800e8b2 <_dtoa_r+0x8e2>
 800e7da:	9b08      	ldr	r3, [sp, #32]
 800e7dc:	f1c0 001c 	rsb	r0, r0, #28
 800e7e0:	4403      	add	r3, r0
 800e7e2:	4480      	add	r8, r0
 800e7e4:	4406      	add	r6, r0
 800e7e6:	9308      	str	r3, [sp, #32]
 800e7e8:	f1b8 0f00 	cmp.w	r8, #0
 800e7ec:	dd05      	ble.n	800e7fa <_dtoa_r+0x82a>
 800e7ee:	4649      	mov	r1, r9
 800e7f0:	4642      	mov	r2, r8
 800e7f2:	4658      	mov	r0, fp
 800e7f4:	f000 fcbe 	bl	800f174 <__lshift>
 800e7f8:	4681      	mov	r9, r0
 800e7fa:	9b08      	ldr	r3, [sp, #32]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	dd05      	ble.n	800e80c <_dtoa_r+0x83c>
 800e800:	4621      	mov	r1, r4
 800e802:	461a      	mov	r2, r3
 800e804:	4658      	mov	r0, fp
 800e806:	f000 fcb5 	bl	800f174 <__lshift>
 800e80a:	4604      	mov	r4, r0
 800e80c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d059      	beq.n	800e8c6 <_dtoa_r+0x8f6>
 800e812:	4621      	mov	r1, r4
 800e814:	4648      	mov	r0, r9
 800e816:	f000 fd19 	bl	800f24c <__mcmp>
 800e81a:	2800      	cmp	r0, #0
 800e81c:	da53      	bge.n	800e8c6 <_dtoa_r+0x8f6>
 800e81e:	1e7b      	subs	r3, r7, #1
 800e820:	9304      	str	r3, [sp, #16]
 800e822:	4649      	mov	r1, r9
 800e824:	2300      	movs	r3, #0
 800e826:	220a      	movs	r2, #10
 800e828:	4658      	mov	r0, fp
 800e82a:	f000 faf7 	bl	800ee1c <__multadd>
 800e82e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e830:	4681      	mov	r9, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	f000 8172 	beq.w	800eb1c <_dtoa_r+0xb4c>
 800e838:	2300      	movs	r3, #0
 800e83a:	4629      	mov	r1, r5
 800e83c:	220a      	movs	r2, #10
 800e83e:	4658      	mov	r0, fp
 800e840:	f000 faec 	bl	800ee1c <__multadd>
 800e844:	9b00      	ldr	r3, [sp, #0]
 800e846:	2b00      	cmp	r3, #0
 800e848:	4605      	mov	r5, r0
 800e84a:	dc67      	bgt.n	800e91c <_dtoa_r+0x94c>
 800e84c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e84e:	2b02      	cmp	r3, #2
 800e850:	dc41      	bgt.n	800e8d6 <_dtoa_r+0x906>
 800e852:	e063      	b.n	800e91c <_dtoa_r+0x94c>
 800e854:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e856:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e85a:	e746      	b.n	800e6ea <_dtoa_r+0x71a>
 800e85c:	9b07      	ldr	r3, [sp, #28]
 800e85e:	1e5c      	subs	r4, r3, #1
 800e860:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e862:	42a3      	cmp	r3, r4
 800e864:	bfbf      	itttt	lt
 800e866:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e868:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e86a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e86c:	1ae3      	sublt	r3, r4, r3
 800e86e:	bfb4      	ite	lt
 800e870:	18d2      	addlt	r2, r2, r3
 800e872:	1b1c      	subge	r4, r3, r4
 800e874:	9b07      	ldr	r3, [sp, #28]
 800e876:	bfbc      	itt	lt
 800e878:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e87a:	2400      	movlt	r4, #0
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	bfb5      	itete	lt
 800e880:	eba8 0603 	sublt.w	r6, r8, r3
 800e884:	9b07      	ldrge	r3, [sp, #28]
 800e886:	2300      	movlt	r3, #0
 800e888:	4646      	movge	r6, r8
 800e88a:	e730      	b.n	800e6ee <_dtoa_r+0x71e>
 800e88c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e88e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e890:	4646      	mov	r6, r8
 800e892:	e735      	b.n	800e700 <_dtoa_r+0x730>
 800e894:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e896:	e75c      	b.n	800e752 <_dtoa_r+0x782>
 800e898:	2300      	movs	r3, #0
 800e89a:	e788      	b.n	800e7ae <_dtoa_r+0x7de>
 800e89c:	3fe00000 	.word	0x3fe00000
 800e8a0:	40240000 	.word	0x40240000
 800e8a4:	40140000 	.word	0x40140000
 800e8a8:	9b02      	ldr	r3, [sp, #8]
 800e8aa:	e780      	b.n	800e7ae <_dtoa_r+0x7de>
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8b0:	e782      	b.n	800e7b8 <_dtoa_r+0x7e8>
 800e8b2:	d099      	beq.n	800e7e8 <_dtoa_r+0x818>
 800e8b4:	9a08      	ldr	r2, [sp, #32]
 800e8b6:	331c      	adds	r3, #28
 800e8b8:	441a      	add	r2, r3
 800e8ba:	4498      	add	r8, r3
 800e8bc:	441e      	add	r6, r3
 800e8be:	9208      	str	r2, [sp, #32]
 800e8c0:	e792      	b.n	800e7e8 <_dtoa_r+0x818>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	e7f6      	b.n	800e8b4 <_dtoa_r+0x8e4>
 800e8c6:	9b07      	ldr	r3, [sp, #28]
 800e8c8:	9704      	str	r7, [sp, #16]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	dc20      	bgt.n	800e910 <_dtoa_r+0x940>
 800e8ce:	9300      	str	r3, [sp, #0]
 800e8d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8d2:	2b02      	cmp	r3, #2
 800e8d4:	dd1e      	ble.n	800e914 <_dtoa_r+0x944>
 800e8d6:	9b00      	ldr	r3, [sp, #0]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	f47f aec0 	bne.w	800e65e <_dtoa_r+0x68e>
 800e8de:	4621      	mov	r1, r4
 800e8e0:	2205      	movs	r2, #5
 800e8e2:	4658      	mov	r0, fp
 800e8e4:	f000 fa9a 	bl	800ee1c <__multadd>
 800e8e8:	4601      	mov	r1, r0
 800e8ea:	4604      	mov	r4, r0
 800e8ec:	4648      	mov	r0, r9
 800e8ee:	f000 fcad 	bl	800f24c <__mcmp>
 800e8f2:	2800      	cmp	r0, #0
 800e8f4:	f77f aeb3 	ble.w	800e65e <_dtoa_r+0x68e>
 800e8f8:	4656      	mov	r6, sl
 800e8fa:	2331      	movs	r3, #49	@ 0x31
 800e8fc:	f806 3b01 	strb.w	r3, [r6], #1
 800e900:	9b04      	ldr	r3, [sp, #16]
 800e902:	3301      	adds	r3, #1
 800e904:	9304      	str	r3, [sp, #16]
 800e906:	e6ae      	b.n	800e666 <_dtoa_r+0x696>
 800e908:	9c07      	ldr	r4, [sp, #28]
 800e90a:	9704      	str	r7, [sp, #16]
 800e90c:	4625      	mov	r5, r4
 800e90e:	e7f3      	b.n	800e8f8 <_dtoa_r+0x928>
 800e910:	9b07      	ldr	r3, [sp, #28]
 800e912:	9300      	str	r3, [sp, #0]
 800e914:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e916:	2b00      	cmp	r3, #0
 800e918:	f000 8104 	beq.w	800eb24 <_dtoa_r+0xb54>
 800e91c:	2e00      	cmp	r6, #0
 800e91e:	dd05      	ble.n	800e92c <_dtoa_r+0x95c>
 800e920:	4629      	mov	r1, r5
 800e922:	4632      	mov	r2, r6
 800e924:	4658      	mov	r0, fp
 800e926:	f000 fc25 	bl	800f174 <__lshift>
 800e92a:	4605      	mov	r5, r0
 800e92c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d05a      	beq.n	800e9e8 <_dtoa_r+0xa18>
 800e932:	6869      	ldr	r1, [r5, #4]
 800e934:	4658      	mov	r0, fp
 800e936:	f000 fa0f 	bl	800ed58 <_Balloc>
 800e93a:	4606      	mov	r6, r0
 800e93c:	b928      	cbnz	r0, 800e94a <_dtoa_r+0x97a>
 800e93e:	4b84      	ldr	r3, [pc, #528]	@ (800eb50 <_dtoa_r+0xb80>)
 800e940:	4602      	mov	r2, r0
 800e942:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e946:	f7ff bb5a 	b.w	800dffe <_dtoa_r+0x2e>
 800e94a:	692a      	ldr	r2, [r5, #16]
 800e94c:	3202      	adds	r2, #2
 800e94e:	0092      	lsls	r2, r2, #2
 800e950:	f105 010c 	add.w	r1, r5, #12
 800e954:	300c      	adds	r0, #12
 800e956:	f7ff faa4 	bl	800dea2 <memcpy>
 800e95a:	2201      	movs	r2, #1
 800e95c:	4631      	mov	r1, r6
 800e95e:	4658      	mov	r0, fp
 800e960:	f000 fc08 	bl	800f174 <__lshift>
 800e964:	f10a 0301 	add.w	r3, sl, #1
 800e968:	9307      	str	r3, [sp, #28]
 800e96a:	9b00      	ldr	r3, [sp, #0]
 800e96c:	4453      	add	r3, sl
 800e96e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e970:	9b02      	ldr	r3, [sp, #8]
 800e972:	f003 0301 	and.w	r3, r3, #1
 800e976:	462f      	mov	r7, r5
 800e978:	930a      	str	r3, [sp, #40]	@ 0x28
 800e97a:	4605      	mov	r5, r0
 800e97c:	9b07      	ldr	r3, [sp, #28]
 800e97e:	4621      	mov	r1, r4
 800e980:	3b01      	subs	r3, #1
 800e982:	4648      	mov	r0, r9
 800e984:	9300      	str	r3, [sp, #0]
 800e986:	f7ff fa9a 	bl	800debe <quorem>
 800e98a:	4639      	mov	r1, r7
 800e98c:	9002      	str	r0, [sp, #8]
 800e98e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e992:	4648      	mov	r0, r9
 800e994:	f000 fc5a 	bl	800f24c <__mcmp>
 800e998:	462a      	mov	r2, r5
 800e99a:	9008      	str	r0, [sp, #32]
 800e99c:	4621      	mov	r1, r4
 800e99e:	4658      	mov	r0, fp
 800e9a0:	f000 fc70 	bl	800f284 <__mdiff>
 800e9a4:	68c2      	ldr	r2, [r0, #12]
 800e9a6:	4606      	mov	r6, r0
 800e9a8:	bb02      	cbnz	r2, 800e9ec <_dtoa_r+0xa1c>
 800e9aa:	4601      	mov	r1, r0
 800e9ac:	4648      	mov	r0, r9
 800e9ae:	f000 fc4d 	bl	800f24c <__mcmp>
 800e9b2:	4602      	mov	r2, r0
 800e9b4:	4631      	mov	r1, r6
 800e9b6:	4658      	mov	r0, fp
 800e9b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e9ba:	f000 fa0d 	bl	800edd8 <_Bfree>
 800e9be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e9c2:	9e07      	ldr	r6, [sp, #28]
 800e9c4:	ea43 0102 	orr.w	r1, r3, r2
 800e9c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9ca:	4319      	orrs	r1, r3
 800e9cc:	d110      	bne.n	800e9f0 <_dtoa_r+0xa20>
 800e9ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e9d2:	d029      	beq.n	800ea28 <_dtoa_r+0xa58>
 800e9d4:	9b08      	ldr	r3, [sp, #32]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	dd02      	ble.n	800e9e0 <_dtoa_r+0xa10>
 800e9da:	9b02      	ldr	r3, [sp, #8]
 800e9dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e9e0:	9b00      	ldr	r3, [sp, #0]
 800e9e2:	f883 8000 	strb.w	r8, [r3]
 800e9e6:	e63f      	b.n	800e668 <_dtoa_r+0x698>
 800e9e8:	4628      	mov	r0, r5
 800e9ea:	e7bb      	b.n	800e964 <_dtoa_r+0x994>
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	e7e1      	b.n	800e9b4 <_dtoa_r+0x9e4>
 800e9f0:	9b08      	ldr	r3, [sp, #32]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	db04      	blt.n	800ea00 <_dtoa_r+0xa30>
 800e9f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e9f8:	430b      	orrs	r3, r1
 800e9fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e9fc:	430b      	orrs	r3, r1
 800e9fe:	d120      	bne.n	800ea42 <_dtoa_r+0xa72>
 800ea00:	2a00      	cmp	r2, #0
 800ea02:	dded      	ble.n	800e9e0 <_dtoa_r+0xa10>
 800ea04:	4649      	mov	r1, r9
 800ea06:	2201      	movs	r2, #1
 800ea08:	4658      	mov	r0, fp
 800ea0a:	f000 fbb3 	bl	800f174 <__lshift>
 800ea0e:	4621      	mov	r1, r4
 800ea10:	4681      	mov	r9, r0
 800ea12:	f000 fc1b 	bl	800f24c <__mcmp>
 800ea16:	2800      	cmp	r0, #0
 800ea18:	dc03      	bgt.n	800ea22 <_dtoa_r+0xa52>
 800ea1a:	d1e1      	bne.n	800e9e0 <_dtoa_r+0xa10>
 800ea1c:	f018 0f01 	tst.w	r8, #1
 800ea20:	d0de      	beq.n	800e9e0 <_dtoa_r+0xa10>
 800ea22:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ea26:	d1d8      	bne.n	800e9da <_dtoa_r+0xa0a>
 800ea28:	9a00      	ldr	r2, [sp, #0]
 800ea2a:	2339      	movs	r3, #57	@ 0x39
 800ea2c:	7013      	strb	r3, [r2, #0]
 800ea2e:	4633      	mov	r3, r6
 800ea30:	461e      	mov	r6, r3
 800ea32:	3b01      	subs	r3, #1
 800ea34:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ea38:	2a39      	cmp	r2, #57	@ 0x39
 800ea3a:	d052      	beq.n	800eae2 <_dtoa_r+0xb12>
 800ea3c:	3201      	adds	r2, #1
 800ea3e:	701a      	strb	r2, [r3, #0]
 800ea40:	e612      	b.n	800e668 <_dtoa_r+0x698>
 800ea42:	2a00      	cmp	r2, #0
 800ea44:	dd07      	ble.n	800ea56 <_dtoa_r+0xa86>
 800ea46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ea4a:	d0ed      	beq.n	800ea28 <_dtoa_r+0xa58>
 800ea4c:	9a00      	ldr	r2, [sp, #0]
 800ea4e:	f108 0301 	add.w	r3, r8, #1
 800ea52:	7013      	strb	r3, [r2, #0]
 800ea54:	e608      	b.n	800e668 <_dtoa_r+0x698>
 800ea56:	9b07      	ldr	r3, [sp, #28]
 800ea58:	9a07      	ldr	r2, [sp, #28]
 800ea5a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ea5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea60:	4293      	cmp	r3, r2
 800ea62:	d028      	beq.n	800eab6 <_dtoa_r+0xae6>
 800ea64:	4649      	mov	r1, r9
 800ea66:	2300      	movs	r3, #0
 800ea68:	220a      	movs	r2, #10
 800ea6a:	4658      	mov	r0, fp
 800ea6c:	f000 f9d6 	bl	800ee1c <__multadd>
 800ea70:	42af      	cmp	r7, r5
 800ea72:	4681      	mov	r9, r0
 800ea74:	f04f 0300 	mov.w	r3, #0
 800ea78:	f04f 020a 	mov.w	r2, #10
 800ea7c:	4639      	mov	r1, r7
 800ea7e:	4658      	mov	r0, fp
 800ea80:	d107      	bne.n	800ea92 <_dtoa_r+0xac2>
 800ea82:	f000 f9cb 	bl	800ee1c <__multadd>
 800ea86:	4607      	mov	r7, r0
 800ea88:	4605      	mov	r5, r0
 800ea8a:	9b07      	ldr	r3, [sp, #28]
 800ea8c:	3301      	adds	r3, #1
 800ea8e:	9307      	str	r3, [sp, #28]
 800ea90:	e774      	b.n	800e97c <_dtoa_r+0x9ac>
 800ea92:	f000 f9c3 	bl	800ee1c <__multadd>
 800ea96:	4629      	mov	r1, r5
 800ea98:	4607      	mov	r7, r0
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	220a      	movs	r2, #10
 800ea9e:	4658      	mov	r0, fp
 800eaa0:	f000 f9bc 	bl	800ee1c <__multadd>
 800eaa4:	4605      	mov	r5, r0
 800eaa6:	e7f0      	b.n	800ea8a <_dtoa_r+0xaba>
 800eaa8:	9b00      	ldr	r3, [sp, #0]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	bfcc      	ite	gt
 800eaae:	461e      	movgt	r6, r3
 800eab0:	2601      	movle	r6, #1
 800eab2:	4456      	add	r6, sl
 800eab4:	2700      	movs	r7, #0
 800eab6:	4649      	mov	r1, r9
 800eab8:	2201      	movs	r2, #1
 800eaba:	4658      	mov	r0, fp
 800eabc:	f000 fb5a 	bl	800f174 <__lshift>
 800eac0:	4621      	mov	r1, r4
 800eac2:	4681      	mov	r9, r0
 800eac4:	f000 fbc2 	bl	800f24c <__mcmp>
 800eac8:	2800      	cmp	r0, #0
 800eaca:	dcb0      	bgt.n	800ea2e <_dtoa_r+0xa5e>
 800eacc:	d102      	bne.n	800ead4 <_dtoa_r+0xb04>
 800eace:	f018 0f01 	tst.w	r8, #1
 800ead2:	d1ac      	bne.n	800ea2e <_dtoa_r+0xa5e>
 800ead4:	4633      	mov	r3, r6
 800ead6:	461e      	mov	r6, r3
 800ead8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eadc:	2a30      	cmp	r2, #48	@ 0x30
 800eade:	d0fa      	beq.n	800ead6 <_dtoa_r+0xb06>
 800eae0:	e5c2      	b.n	800e668 <_dtoa_r+0x698>
 800eae2:	459a      	cmp	sl, r3
 800eae4:	d1a4      	bne.n	800ea30 <_dtoa_r+0xa60>
 800eae6:	9b04      	ldr	r3, [sp, #16]
 800eae8:	3301      	adds	r3, #1
 800eaea:	9304      	str	r3, [sp, #16]
 800eaec:	2331      	movs	r3, #49	@ 0x31
 800eaee:	f88a 3000 	strb.w	r3, [sl]
 800eaf2:	e5b9      	b.n	800e668 <_dtoa_r+0x698>
 800eaf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eaf6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800eb54 <_dtoa_r+0xb84>
 800eafa:	b11b      	cbz	r3, 800eb04 <_dtoa_r+0xb34>
 800eafc:	f10a 0308 	add.w	r3, sl, #8
 800eb00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800eb02:	6013      	str	r3, [r2, #0]
 800eb04:	4650      	mov	r0, sl
 800eb06:	b019      	add	sp, #100	@ 0x64
 800eb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb0e:	2b01      	cmp	r3, #1
 800eb10:	f77f ae37 	ble.w	800e782 <_dtoa_r+0x7b2>
 800eb14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb16:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb18:	2001      	movs	r0, #1
 800eb1a:	e655      	b.n	800e7c8 <_dtoa_r+0x7f8>
 800eb1c:	9b00      	ldr	r3, [sp, #0]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	f77f aed6 	ble.w	800e8d0 <_dtoa_r+0x900>
 800eb24:	4656      	mov	r6, sl
 800eb26:	4621      	mov	r1, r4
 800eb28:	4648      	mov	r0, r9
 800eb2a:	f7ff f9c8 	bl	800debe <quorem>
 800eb2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800eb32:	f806 8b01 	strb.w	r8, [r6], #1
 800eb36:	9b00      	ldr	r3, [sp, #0]
 800eb38:	eba6 020a 	sub.w	r2, r6, sl
 800eb3c:	4293      	cmp	r3, r2
 800eb3e:	ddb3      	ble.n	800eaa8 <_dtoa_r+0xad8>
 800eb40:	4649      	mov	r1, r9
 800eb42:	2300      	movs	r3, #0
 800eb44:	220a      	movs	r2, #10
 800eb46:	4658      	mov	r0, fp
 800eb48:	f000 f968 	bl	800ee1c <__multadd>
 800eb4c:	4681      	mov	r9, r0
 800eb4e:	e7ea      	b.n	800eb26 <_dtoa_r+0xb56>
 800eb50:	080120b8 	.word	0x080120b8
 800eb54:	0801203c 	.word	0x0801203c

0800eb58 <_free_r>:
 800eb58:	b538      	push	{r3, r4, r5, lr}
 800eb5a:	4605      	mov	r5, r0
 800eb5c:	2900      	cmp	r1, #0
 800eb5e:	d041      	beq.n	800ebe4 <_free_r+0x8c>
 800eb60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb64:	1f0c      	subs	r4, r1, #4
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	bfb8      	it	lt
 800eb6a:	18e4      	addlt	r4, r4, r3
 800eb6c:	f000 f8e8 	bl	800ed40 <__malloc_lock>
 800eb70:	4a1d      	ldr	r2, [pc, #116]	@ (800ebe8 <_free_r+0x90>)
 800eb72:	6813      	ldr	r3, [r2, #0]
 800eb74:	b933      	cbnz	r3, 800eb84 <_free_r+0x2c>
 800eb76:	6063      	str	r3, [r4, #4]
 800eb78:	6014      	str	r4, [r2, #0]
 800eb7a:	4628      	mov	r0, r5
 800eb7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb80:	f000 b8e4 	b.w	800ed4c <__malloc_unlock>
 800eb84:	42a3      	cmp	r3, r4
 800eb86:	d908      	bls.n	800eb9a <_free_r+0x42>
 800eb88:	6820      	ldr	r0, [r4, #0]
 800eb8a:	1821      	adds	r1, r4, r0
 800eb8c:	428b      	cmp	r3, r1
 800eb8e:	bf01      	itttt	eq
 800eb90:	6819      	ldreq	r1, [r3, #0]
 800eb92:	685b      	ldreq	r3, [r3, #4]
 800eb94:	1809      	addeq	r1, r1, r0
 800eb96:	6021      	streq	r1, [r4, #0]
 800eb98:	e7ed      	b.n	800eb76 <_free_r+0x1e>
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	b10b      	cbz	r3, 800eba4 <_free_r+0x4c>
 800eba0:	42a3      	cmp	r3, r4
 800eba2:	d9fa      	bls.n	800eb9a <_free_r+0x42>
 800eba4:	6811      	ldr	r1, [r2, #0]
 800eba6:	1850      	adds	r0, r2, r1
 800eba8:	42a0      	cmp	r0, r4
 800ebaa:	d10b      	bne.n	800ebc4 <_free_r+0x6c>
 800ebac:	6820      	ldr	r0, [r4, #0]
 800ebae:	4401      	add	r1, r0
 800ebb0:	1850      	adds	r0, r2, r1
 800ebb2:	4283      	cmp	r3, r0
 800ebb4:	6011      	str	r1, [r2, #0]
 800ebb6:	d1e0      	bne.n	800eb7a <_free_r+0x22>
 800ebb8:	6818      	ldr	r0, [r3, #0]
 800ebba:	685b      	ldr	r3, [r3, #4]
 800ebbc:	6053      	str	r3, [r2, #4]
 800ebbe:	4408      	add	r0, r1
 800ebc0:	6010      	str	r0, [r2, #0]
 800ebc2:	e7da      	b.n	800eb7a <_free_r+0x22>
 800ebc4:	d902      	bls.n	800ebcc <_free_r+0x74>
 800ebc6:	230c      	movs	r3, #12
 800ebc8:	602b      	str	r3, [r5, #0]
 800ebca:	e7d6      	b.n	800eb7a <_free_r+0x22>
 800ebcc:	6820      	ldr	r0, [r4, #0]
 800ebce:	1821      	adds	r1, r4, r0
 800ebd0:	428b      	cmp	r3, r1
 800ebd2:	bf04      	itt	eq
 800ebd4:	6819      	ldreq	r1, [r3, #0]
 800ebd6:	685b      	ldreq	r3, [r3, #4]
 800ebd8:	6063      	str	r3, [r4, #4]
 800ebda:	bf04      	itt	eq
 800ebdc:	1809      	addeq	r1, r1, r0
 800ebde:	6021      	streq	r1, [r4, #0]
 800ebe0:	6054      	str	r4, [r2, #4]
 800ebe2:	e7ca      	b.n	800eb7a <_free_r+0x22>
 800ebe4:	bd38      	pop	{r3, r4, r5, pc}
 800ebe6:	bf00      	nop
 800ebe8:	200054b4 	.word	0x200054b4

0800ebec <malloc>:
 800ebec:	4b02      	ldr	r3, [pc, #8]	@ (800ebf8 <malloc+0xc>)
 800ebee:	4601      	mov	r1, r0
 800ebf0:	6818      	ldr	r0, [r3, #0]
 800ebf2:	f000 b825 	b.w	800ec40 <_malloc_r>
 800ebf6:	bf00      	nop
 800ebf8:	20000034 	.word	0x20000034

0800ebfc <sbrk_aligned>:
 800ebfc:	b570      	push	{r4, r5, r6, lr}
 800ebfe:	4e0f      	ldr	r6, [pc, #60]	@ (800ec3c <sbrk_aligned+0x40>)
 800ec00:	460c      	mov	r4, r1
 800ec02:	6831      	ldr	r1, [r6, #0]
 800ec04:	4605      	mov	r5, r0
 800ec06:	b911      	cbnz	r1, 800ec0e <sbrk_aligned+0x12>
 800ec08:	f000 fe46 	bl	800f898 <_sbrk_r>
 800ec0c:	6030      	str	r0, [r6, #0]
 800ec0e:	4621      	mov	r1, r4
 800ec10:	4628      	mov	r0, r5
 800ec12:	f000 fe41 	bl	800f898 <_sbrk_r>
 800ec16:	1c43      	adds	r3, r0, #1
 800ec18:	d103      	bne.n	800ec22 <sbrk_aligned+0x26>
 800ec1a:	f04f 34ff 	mov.w	r4, #4294967295
 800ec1e:	4620      	mov	r0, r4
 800ec20:	bd70      	pop	{r4, r5, r6, pc}
 800ec22:	1cc4      	adds	r4, r0, #3
 800ec24:	f024 0403 	bic.w	r4, r4, #3
 800ec28:	42a0      	cmp	r0, r4
 800ec2a:	d0f8      	beq.n	800ec1e <sbrk_aligned+0x22>
 800ec2c:	1a21      	subs	r1, r4, r0
 800ec2e:	4628      	mov	r0, r5
 800ec30:	f000 fe32 	bl	800f898 <_sbrk_r>
 800ec34:	3001      	adds	r0, #1
 800ec36:	d1f2      	bne.n	800ec1e <sbrk_aligned+0x22>
 800ec38:	e7ef      	b.n	800ec1a <sbrk_aligned+0x1e>
 800ec3a:	bf00      	nop
 800ec3c:	200054b0 	.word	0x200054b0

0800ec40 <_malloc_r>:
 800ec40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec44:	1ccd      	adds	r5, r1, #3
 800ec46:	f025 0503 	bic.w	r5, r5, #3
 800ec4a:	3508      	adds	r5, #8
 800ec4c:	2d0c      	cmp	r5, #12
 800ec4e:	bf38      	it	cc
 800ec50:	250c      	movcc	r5, #12
 800ec52:	2d00      	cmp	r5, #0
 800ec54:	4606      	mov	r6, r0
 800ec56:	db01      	blt.n	800ec5c <_malloc_r+0x1c>
 800ec58:	42a9      	cmp	r1, r5
 800ec5a:	d904      	bls.n	800ec66 <_malloc_r+0x26>
 800ec5c:	230c      	movs	r3, #12
 800ec5e:	6033      	str	r3, [r6, #0]
 800ec60:	2000      	movs	r0, #0
 800ec62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ed3c <_malloc_r+0xfc>
 800ec6a:	f000 f869 	bl	800ed40 <__malloc_lock>
 800ec6e:	f8d8 3000 	ldr.w	r3, [r8]
 800ec72:	461c      	mov	r4, r3
 800ec74:	bb44      	cbnz	r4, 800ecc8 <_malloc_r+0x88>
 800ec76:	4629      	mov	r1, r5
 800ec78:	4630      	mov	r0, r6
 800ec7a:	f7ff ffbf 	bl	800ebfc <sbrk_aligned>
 800ec7e:	1c43      	adds	r3, r0, #1
 800ec80:	4604      	mov	r4, r0
 800ec82:	d158      	bne.n	800ed36 <_malloc_r+0xf6>
 800ec84:	f8d8 4000 	ldr.w	r4, [r8]
 800ec88:	4627      	mov	r7, r4
 800ec8a:	2f00      	cmp	r7, #0
 800ec8c:	d143      	bne.n	800ed16 <_malloc_r+0xd6>
 800ec8e:	2c00      	cmp	r4, #0
 800ec90:	d04b      	beq.n	800ed2a <_malloc_r+0xea>
 800ec92:	6823      	ldr	r3, [r4, #0]
 800ec94:	4639      	mov	r1, r7
 800ec96:	4630      	mov	r0, r6
 800ec98:	eb04 0903 	add.w	r9, r4, r3
 800ec9c:	f000 fdfc 	bl	800f898 <_sbrk_r>
 800eca0:	4581      	cmp	r9, r0
 800eca2:	d142      	bne.n	800ed2a <_malloc_r+0xea>
 800eca4:	6821      	ldr	r1, [r4, #0]
 800eca6:	1a6d      	subs	r5, r5, r1
 800eca8:	4629      	mov	r1, r5
 800ecaa:	4630      	mov	r0, r6
 800ecac:	f7ff ffa6 	bl	800ebfc <sbrk_aligned>
 800ecb0:	3001      	adds	r0, #1
 800ecb2:	d03a      	beq.n	800ed2a <_malloc_r+0xea>
 800ecb4:	6823      	ldr	r3, [r4, #0]
 800ecb6:	442b      	add	r3, r5
 800ecb8:	6023      	str	r3, [r4, #0]
 800ecba:	f8d8 3000 	ldr.w	r3, [r8]
 800ecbe:	685a      	ldr	r2, [r3, #4]
 800ecc0:	bb62      	cbnz	r2, 800ed1c <_malloc_r+0xdc>
 800ecc2:	f8c8 7000 	str.w	r7, [r8]
 800ecc6:	e00f      	b.n	800ece8 <_malloc_r+0xa8>
 800ecc8:	6822      	ldr	r2, [r4, #0]
 800ecca:	1b52      	subs	r2, r2, r5
 800eccc:	d420      	bmi.n	800ed10 <_malloc_r+0xd0>
 800ecce:	2a0b      	cmp	r2, #11
 800ecd0:	d917      	bls.n	800ed02 <_malloc_r+0xc2>
 800ecd2:	1961      	adds	r1, r4, r5
 800ecd4:	42a3      	cmp	r3, r4
 800ecd6:	6025      	str	r5, [r4, #0]
 800ecd8:	bf18      	it	ne
 800ecda:	6059      	strne	r1, [r3, #4]
 800ecdc:	6863      	ldr	r3, [r4, #4]
 800ecde:	bf08      	it	eq
 800ece0:	f8c8 1000 	streq.w	r1, [r8]
 800ece4:	5162      	str	r2, [r4, r5]
 800ece6:	604b      	str	r3, [r1, #4]
 800ece8:	4630      	mov	r0, r6
 800ecea:	f000 f82f 	bl	800ed4c <__malloc_unlock>
 800ecee:	f104 000b 	add.w	r0, r4, #11
 800ecf2:	1d23      	adds	r3, r4, #4
 800ecf4:	f020 0007 	bic.w	r0, r0, #7
 800ecf8:	1ac2      	subs	r2, r0, r3
 800ecfa:	bf1c      	itt	ne
 800ecfc:	1a1b      	subne	r3, r3, r0
 800ecfe:	50a3      	strne	r3, [r4, r2]
 800ed00:	e7af      	b.n	800ec62 <_malloc_r+0x22>
 800ed02:	6862      	ldr	r2, [r4, #4]
 800ed04:	42a3      	cmp	r3, r4
 800ed06:	bf0c      	ite	eq
 800ed08:	f8c8 2000 	streq.w	r2, [r8]
 800ed0c:	605a      	strne	r2, [r3, #4]
 800ed0e:	e7eb      	b.n	800ece8 <_malloc_r+0xa8>
 800ed10:	4623      	mov	r3, r4
 800ed12:	6864      	ldr	r4, [r4, #4]
 800ed14:	e7ae      	b.n	800ec74 <_malloc_r+0x34>
 800ed16:	463c      	mov	r4, r7
 800ed18:	687f      	ldr	r7, [r7, #4]
 800ed1a:	e7b6      	b.n	800ec8a <_malloc_r+0x4a>
 800ed1c:	461a      	mov	r2, r3
 800ed1e:	685b      	ldr	r3, [r3, #4]
 800ed20:	42a3      	cmp	r3, r4
 800ed22:	d1fb      	bne.n	800ed1c <_malloc_r+0xdc>
 800ed24:	2300      	movs	r3, #0
 800ed26:	6053      	str	r3, [r2, #4]
 800ed28:	e7de      	b.n	800ece8 <_malloc_r+0xa8>
 800ed2a:	230c      	movs	r3, #12
 800ed2c:	6033      	str	r3, [r6, #0]
 800ed2e:	4630      	mov	r0, r6
 800ed30:	f000 f80c 	bl	800ed4c <__malloc_unlock>
 800ed34:	e794      	b.n	800ec60 <_malloc_r+0x20>
 800ed36:	6005      	str	r5, [r0, #0]
 800ed38:	e7d6      	b.n	800ece8 <_malloc_r+0xa8>
 800ed3a:	bf00      	nop
 800ed3c:	200054b4 	.word	0x200054b4

0800ed40 <__malloc_lock>:
 800ed40:	4801      	ldr	r0, [pc, #4]	@ (800ed48 <__malloc_lock+0x8>)
 800ed42:	f7ff b8ac 	b.w	800de9e <__retarget_lock_acquire_recursive>
 800ed46:	bf00      	nop
 800ed48:	200054ac 	.word	0x200054ac

0800ed4c <__malloc_unlock>:
 800ed4c:	4801      	ldr	r0, [pc, #4]	@ (800ed54 <__malloc_unlock+0x8>)
 800ed4e:	f7ff b8a7 	b.w	800dea0 <__retarget_lock_release_recursive>
 800ed52:	bf00      	nop
 800ed54:	200054ac 	.word	0x200054ac

0800ed58 <_Balloc>:
 800ed58:	b570      	push	{r4, r5, r6, lr}
 800ed5a:	69c6      	ldr	r6, [r0, #28]
 800ed5c:	4604      	mov	r4, r0
 800ed5e:	460d      	mov	r5, r1
 800ed60:	b976      	cbnz	r6, 800ed80 <_Balloc+0x28>
 800ed62:	2010      	movs	r0, #16
 800ed64:	f7ff ff42 	bl	800ebec <malloc>
 800ed68:	4602      	mov	r2, r0
 800ed6a:	61e0      	str	r0, [r4, #28]
 800ed6c:	b920      	cbnz	r0, 800ed78 <_Balloc+0x20>
 800ed6e:	4b18      	ldr	r3, [pc, #96]	@ (800edd0 <_Balloc+0x78>)
 800ed70:	4818      	ldr	r0, [pc, #96]	@ (800edd4 <_Balloc+0x7c>)
 800ed72:	216b      	movs	r1, #107	@ 0x6b
 800ed74:	f000 fda0 	bl	800f8b8 <__assert_func>
 800ed78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ed7c:	6006      	str	r6, [r0, #0]
 800ed7e:	60c6      	str	r6, [r0, #12]
 800ed80:	69e6      	ldr	r6, [r4, #28]
 800ed82:	68f3      	ldr	r3, [r6, #12]
 800ed84:	b183      	cbz	r3, 800eda8 <_Balloc+0x50>
 800ed86:	69e3      	ldr	r3, [r4, #28]
 800ed88:	68db      	ldr	r3, [r3, #12]
 800ed8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ed8e:	b9b8      	cbnz	r0, 800edc0 <_Balloc+0x68>
 800ed90:	2101      	movs	r1, #1
 800ed92:	fa01 f605 	lsl.w	r6, r1, r5
 800ed96:	1d72      	adds	r2, r6, #5
 800ed98:	0092      	lsls	r2, r2, #2
 800ed9a:	4620      	mov	r0, r4
 800ed9c:	f000 fdaa 	bl	800f8f4 <_calloc_r>
 800eda0:	b160      	cbz	r0, 800edbc <_Balloc+0x64>
 800eda2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eda6:	e00e      	b.n	800edc6 <_Balloc+0x6e>
 800eda8:	2221      	movs	r2, #33	@ 0x21
 800edaa:	2104      	movs	r1, #4
 800edac:	4620      	mov	r0, r4
 800edae:	f000 fda1 	bl	800f8f4 <_calloc_r>
 800edb2:	69e3      	ldr	r3, [r4, #28]
 800edb4:	60f0      	str	r0, [r6, #12]
 800edb6:	68db      	ldr	r3, [r3, #12]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d1e4      	bne.n	800ed86 <_Balloc+0x2e>
 800edbc:	2000      	movs	r0, #0
 800edbe:	bd70      	pop	{r4, r5, r6, pc}
 800edc0:	6802      	ldr	r2, [r0, #0]
 800edc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800edc6:	2300      	movs	r3, #0
 800edc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800edcc:	e7f7      	b.n	800edbe <_Balloc+0x66>
 800edce:	bf00      	nop
 800edd0:	08012049 	.word	0x08012049
 800edd4:	080120c9 	.word	0x080120c9

0800edd8 <_Bfree>:
 800edd8:	b570      	push	{r4, r5, r6, lr}
 800edda:	69c6      	ldr	r6, [r0, #28]
 800eddc:	4605      	mov	r5, r0
 800edde:	460c      	mov	r4, r1
 800ede0:	b976      	cbnz	r6, 800ee00 <_Bfree+0x28>
 800ede2:	2010      	movs	r0, #16
 800ede4:	f7ff ff02 	bl	800ebec <malloc>
 800ede8:	4602      	mov	r2, r0
 800edea:	61e8      	str	r0, [r5, #28]
 800edec:	b920      	cbnz	r0, 800edf8 <_Bfree+0x20>
 800edee:	4b09      	ldr	r3, [pc, #36]	@ (800ee14 <_Bfree+0x3c>)
 800edf0:	4809      	ldr	r0, [pc, #36]	@ (800ee18 <_Bfree+0x40>)
 800edf2:	218f      	movs	r1, #143	@ 0x8f
 800edf4:	f000 fd60 	bl	800f8b8 <__assert_func>
 800edf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800edfc:	6006      	str	r6, [r0, #0]
 800edfe:	60c6      	str	r6, [r0, #12]
 800ee00:	b13c      	cbz	r4, 800ee12 <_Bfree+0x3a>
 800ee02:	69eb      	ldr	r3, [r5, #28]
 800ee04:	6862      	ldr	r2, [r4, #4]
 800ee06:	68db      	ldr	r3, [r3, #12]
 800ee08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ee0c:	6021      	str	r1, [r4, #0]
 800ee0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ee12:	bd70      	pop	{r4, r5, r6, pc}
 800ee14:	08012049 	.word	0x08012049
 800ee18:	080120c9 	.word	0x080120c9

0800ee1c <__multadd>:
 800ee1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee20:	690d      	ldr	r5, [r1, #16]
 800ee22:	4607      	mov	r7, r0
 800ee24:	460c      	mov	r4, r1
 800ee26:	461e      	mov	r6, r3
 800ee28:	f101 0c14 	add.w	ip, r1, #20
 800ee2c:	2000      	movs	r0, #0
 800ee2e:	f8dc 3000 	ldr.w	r3, [ip]
 800ee32:	b299      	uxth	r1, r3
 800ee34:	fb02 6101 	mla	r1, r2, r1, r6
 800ee38:	0c1e      	lsrs	r6, r3, #16
 800ee3a:	0c0b      	lsrs	r3, r1, #16
 800ee3c:	fb02 3306 	mla	r3, r2, r6, r3
 800ee40:	b289      	uxth	r1, r1
 800ee42:	3001      	adds	r0, #1
 800ee44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ee48:	4285      	cmp	r5, r0
 800ee4a:	f84c 1b04 	str.w	r1, [ip], #4
 800ee4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ee52:	dcec      	bgt.n	800ee2e <__multadd+0x12>
 800ee54:	b30e      	cbz	r6, 800ee9a <__multadd+0x7e>
 800ee56:	68a3      	ldr	r3, [r4, #8]
 800ee58:	42ab      	cmp	r3, r5
 800ee5a:	dc19      	bgt.n	800ee90 <__multadd+0x74>
 800ee5c:	6861      	ldr	r1, [r4, #4]
 800ee5e:	4638      	mov	r0, r7
 800ee60:	3101      	adds	r1, #1
 800ee62:	f7ff ff79 	bl	800ed58 <_Balloc>
 800ee66:	4680      	mov	r8, r0
 800ee68:	b928      	cbnz	r0, 800ee76 <__multadd+0x5a>
 800ee6a:	4602      	mov	r2, r0
 800ee6c:	4b0c      	ldr	r3, [pc, #48]	@ (800eea0 <__multadd+0x84>)
 800ee6e:	480d      	ldr	r0, [pc, #52]	@ (800eea4 <__multadd+0x88>)
 800ee70:	21ba      	movs	r1, #186	@ 0xba
 800ee72:	f000 fd21 	bl	800f8b8 <__assert_func>
 800ee76:	6922      	ldr	r2, [r4, #16]
 800ee78:	3202      	adds	r2, #2
 800ee7a:	f104 010c 	add.w	r1, r4, #12
 800ee7e:	0092      	lsls	r2, r2, #2
 800ee80:	300c      	adds	r0, #12
 800ee82:	f7ff f80e 	bl	800dea2 <memcpy>
 800ee86:	4621      	mov	r1, r4
 800ee88:	4638      	mov	r0, r7
 800ee8a:	f7ff ffa5 	bl	800edd8 <_Bfree>
 800ee8e:	4644      	mov	r4, r8
 800ee90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ee94:	3501      	adds	r5, #1
 800ee96:	615e      	str	r6, [r3, #20]
 800ee98:	6125      	str	r5, [r4, #16]
 800ee9a:	4620      	mov	r0, r4
 800ee9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eea0:	080120b8 	.word	0x080120b8
 800eea4:	080120c9 	.word	0x080120c9

0800eea8 <__hi0bits>:
 800eea8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800eeac:	4603      	mov	r3, r0
 800eeae:	bf36      	itet	cc
 800eeb0:	0403      	lslcc	r3, r0, #16
 800eeb2:	2000      	movcs	r0, #0
 800eeb4:	2010      	movcc	r0, #16
 800eeb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eeba:	bf3c      	itt	cc
 800eebc:	021b      	lslcc	r3, r3, #8
 800eebe:	3008      	addcc	r0, #8
 800eec0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eec4:	bf3c      	itt	cc
 800eec6:	011b      	lslcc	r3, r3, #4
 800eec8:	3004      	addcc	r0, #4
 800eeca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eece:	bf3c      	itt	cc
 800eed0:	009b      	lslcc	r3, r3, #2
 800eed2:	3002      	addcc	r0, #2
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	db05      	blt.n	800eee4 <__hi0bits+0x3c>
 800eed8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800eedc:	f100 0001 	add.w	r0, r0, #1
 800eee0:	bf08      	it	eq
 800eee2:	2020      	moveq	r0, #32
 800eee4:	4770      	bx	lr

0800eee6 <__lo0bits>:
 800eee6:	6803      	ldr	r3, [r0, #0]
 800eee8:	4602      	mov	r2, r0
 800eeea:	f013 0007 	ands.w	r0, r3, #7
 800eeee:	d00b      	beq.n	800ef08 <__lo0bits+0x22>
 800eef0:	07d9      	lsls	r1, r3, #31
 800eef2:	d421      	bmi.n	800ef38 <__lo0bits+0x52>
 800eef4:	0798      	lsls	r0, r3, #30
 800eef6:	bf49      	itett	mi
 800eef8:	085b      	lsrmi	r3, r3, #1
 800eefa:	089b      	lsrpl	r3, r3, #2
 800eefc:	2001      	movmi	r0, #1
 800eefe:	6013      	strmi	r3, [r2, #0]
 800ef00:	bf5c      	itt	pl
 800ef02:	6013      	strpl	r3, [r2, #0]
 800ef04:	2002      	movpl	r0, #2
 800ef06:	4770      	bx	lr
 800ef08:	b299      	uxth	r1, r3
 800ef0a:	b909      	cbnz	r1, 800ef10 <__lo0bits+0x2a>
 800ef0c:	0c1b      	lsrs	r3, r3, #16
 800ef0e:	2010      	movs	r0, #16
 800ef10:	b2d9      	uxtb	r1, r3
 800ef12:	b909      	cbnz	r1, 800ef18 <__lo0bits+0x32>
 800ef14:	3008      	adds	r0, #8
 800ef16:	0a1b      	lsrs	r3, r3, #8
 800ef18:	0719      	lsls	r1, r3, #28
 800ef1a:	bf04      	itt	eq
 800ef1c:	091b      	lsreq	r3, r3, #4
 800ef1e:	3004      	addeq	r0, #4
 800ef20:	0799      	lsls	r1, r3, #30
 800ef22:	bf04      	itt	eq
 800ef24:	089b      	lsreq	r3, r3, #2
 800ef26:	3002      	addeq	r0, #2
 800ef28:	07d9      	lsls	r1, r3, #31
 800ef2a:	d403      	bmi.n	800ef34 <__lo0bits+0x4e>
 800ef2c:	085b      	lsrs	r3, r3, #1
 800ef2e:	f100 0001 	add.w	r0, r0, #1
 800ef32:	d003      	beq.n	800ef3c <__lo0bits+0x56>
 800ef34:	6013      	str	r3, [r2, #0]
 800ef36:	4770      	bx	lr
 800ef38:	2000      	movs	r0, #0
 800ef3a:	4770      	bx	lr
 800ef3c:	2020      	movs	r0, #32
 800ef3e:	4770      	bx	lr

0800ef40 <__i2b>:
 800ef40:	b510      	push	{r4, lr}
 800ef42:	460c      	mov	r4, r1
 800ef44:	2101      	movs	r1, #1
 800ef46:	f7ff ff07 	bl	800ed58 <_Balloc>
 800ef4a:	4602      	mov	r2, r0
 800ef4c:	b928      	cbnz	r0, 800ef5a <__i2b+0x1a>
 800ef4e:	4b05      	ldr	r3, [pc, #20]	@ (800ef64 <__i2b+0x24>)
 800ef50:	4805      	ldr	r0, [pc, #20]	@ (800ef68 <__i2b+0x28>)
 800ef52:	f240 1145 	movw	r1, #325	@ 0x145
 800ef56:	f000 fcaf 	bl	800f8b8 <__assert_func>
 800ef5a:	2301      	movs	r3, #1
 800ef5c:	6144      	str	r4, [r0, #20]
 800ef5e:	6103      	str	r3, [r0, #16]
 800ef60:	bd10      	pop	{r4, pc}
 800ef62:	bf00      	nop
 800ef64:	080120b8 	.word	0x080120b8
 800ef68:	080120c9 	.word	0x080120c9

0800ef6c <__multiply>:
 800ef6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef70:	4614      	mov	r4, r2
 800ef72:	690a      	ldr	r2, [r1, #16]
 800ef74:	6923      	ldr	r3, [r4, #16]
 800ef76:	429a      	cmp	r2, r3
 800ef78:	bfa8      	it	ge
 800ef7a:	4623      	movge	r3, r4
 800ef7c:	460f      	mov	r7, r1
 800ef7e:	bfa4      	itt	ge
 800ef80:	460c      	movge	r4, r1
 800ef82:	461f      	movge	r7, r3
 800ef84:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ef88:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ef8c:	68a3      	ldr	r3, [r4, #8]
 800ef8e:	6861      	ldr	r1, [r4, #4]
 800ef90:	eb0a 0609 	add.w	r6, sl, r9
 800ef94:	42b3      	cmp	r3, r6
 800ef96:	b085      	sub	sp, #20
 800ef98:	bfb8      	it	lt
 800ef9a:	3101      	addlt	r1, #1
 800ef9c:	f7ff fedc 	bl	800ed58 <_Balloc>
 800efa0:	b930      	cbnz	r0, 800efb0 <__multiply+0x44>
 800efa2:	4602      	mov	r2, r0
 800efa4:	4b44      	ldr	r3, [pc, #272]	@ (800f0b8 <__multiply+0x14c>)
 800efa6:	4845      	ldr	r0, [pc, #276]	@ (800f0bc <__multiply+0x150>)
 800efa8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800efac:	f000 fc84 	bl	800f8b8 <__assert_func>
 800efb0:	f100 0514 	add.w	r5, r0, #20
 800efb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800efb8:	462b      	mov	r3, r5
 800efba:	2200      	movs	r2, #0
 800efbc:	4543      	cmp	r3, r8
 800efbe:	d321      	bcc.n	800f004 <__multiply+0x98>
 800efc0:	f107 0114 	add.w	r1, r7, #20
 800efc4:	f104 0214 	add.w	r2, r4, #20
 800efc8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800efcc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800efd0:	9302      	str	r3, [sp, #8]
 800efd2:	1b13      	subs	r3, r2, r4
 800efd4:	3b15      	subs	r3, #21
 800efd6:	f023 0303 	bic.w	r3, r3, #3
 800efda:	3304      	adds	r3, #4
 800efdc:	f104 0715 	add.w	r7, r4, #21
 800efe0:	42ba      	cmp	r2, r7
 800efe2:	bf38      	it	cc
 800efe4:	2304      	movcc	r3, #4
 800efe6:	9301      	str	r3, [sp, #4]
 800efe8:	9b02      	ldr	r3, [sp, #8]
 800efea:	9103      	str	r1, [sp, #12]
 800efec:	428b      	cmp	r3, r1
 800efee:	d80c      	bhi.n	800f00a <__multiply+0x9e>
 800eff0:	2e00      	cmp	r6, #0
 800eff2:	dd03      	ble.n	800effc <__multiply+0x90>
 800eff4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d05b      	beq.n	800f0b4 <__multiply+0x148>
 800effc:	6106      	str	r6, [r0, #16]
 800effe:	b005      	add	sp, #20
 800f000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f004:	f843 2b04 	str.w	r2, [r3], #4
 800f008:	e7d8      	b.n	800efbc <__multiply+0x50>
 800f00a:	f8b1 a000 	ldrh.w	sl, [r1]
 800f00e:	f1ba 0f00 	cmp.w	sl, #0
 800f012:	d024      	beq.n	800f05e <__multiply+0xf2>
 800f014:	f104 0e14 	add.w	lr, r4, #20
 800f018:	46a9      	mov	r9, r5
 800f01a:	f04f 0c00 	mov.w	ip, #0
 800f01e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f022:	f8d9 3000 	ldr.w	r3, [r9]
 800f026:	fa1f fb87 	uxth.w	fp, r7
 800f02a:	b29b      	uxth	r3, r3
 800f02c:	fb0a 330b 	mla	r3, sl, fp, r3
 800f030:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f034:	f8d9 7000 	ldr.w	r7, [r9]
 800f038:	4463      	add	r3, ip
 800f03a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f03e:	fb0a c70b 	mla	r7, sl, fp, ip
 800f042:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f046:	b29b      	uxth	r3, r3
 800f048:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f04c:	4572      	cmp	r2, lr
 800f04e:	f849 3b04 	str.w	r3, [r9], #4
 800f052:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f056:	d8e2      	bhi.n	800f01e <__multiply+0xb2>
 800f058:	9b01      	ldr	r3, [sp, #4]
 800f05a:	f845 c003 	str.w	ip, [r5, r3]
 800f05e:	9b03      	ldr	r3, [sp, #12]
 800f060:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f064:	3104      	adds	r1, #4
 800f066:	f1b9 0f00 	cmp.w	r9, #0
 800f06a:	d021      	beq.n	800f0b0 <__multiply+0x144>
 800f06c:	682b      	ldr	r3, [r5, #0]
 800f06e:	f104 0c14 	add.w	ip, r4, #20
 800f072:	46ae      	mov	lr, r5
 800f074:	f04f 0a00 	mov.w	sl, #0
 800f078:	f8bc b000 	ldrh.w	fp, [ip]
 800f07c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f080:	fb09 770b 	mla	r7, r9, fp, r7
 800f084:	4457      	add	r7, sl
 800f086:	b29b      	uxth	r3, r3
 800f088:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f08c:	f84e 3b04 	str.w	r3, [lr], #4
 800f090:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f094:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f098:	f8be 3000 	ldrh.w	r3, [lr]
 800f09c:	fb09 330a 	mla	r3, r9, sl, r3
 800f0a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f0a4:	4562      	cmp	r2, ip
 800f0a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f0aa:	d8e5      	bhi.n	800f078 <__multiply+0x10c>
 800f0ac:	9f01      	ldr	r7, [sp, #4]
 800f0ae:	51eb      	str	r3, [r5, r7]
 800f0b0:	3504      	adds	r5, #4
 800f0b2:	e799      	b.n	800efe8 <__multiply+0x7c>
 800f0b4:	3e01      	subs	r6, #1
 800f0b6:	e79b      	b.n	800eff0 <__multiply+0x84>
 800f0b8:	080120b8 	.word	0x080120b8
 800f0bc:	080120c9 	.word	0x080120c9

0800f0c0 <__pow5mult>:
 800f0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0c4:	4615      	mov	r5, r2
 800f0c6:	f012 0203 	ands.w	r2, r2, #3
 800f0ca:	4607      	mov	r7, r0
 800f0cc:	460e      	mov	r6, r1
 800f0ce:	d007      	beq.n	800f0e0 <__pow5mult+0x20>
 800f0d0:	4c25      	ldr	r4, [pc, #148]	@ (800f168 <__pow5mult+0xa8>)
 800f0d2:	3a01      	subs	r2, #1
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f0da:	f7ff fe9f 	bl	800ee1c <__multadd>
 800f0de:	4606      	mov	r6, r0
 800f0e0:	10ad      	asrs	r5, r5, #2
 800f0e2:	d03d      	beq.n	800f160 <__pow5mult+0xa0>
 800f0e4:	69fc      	ldr	r4, [r7, #28]
 800f0e6:	b97c      	cbnz	r4, 800f108 <__pow5mult+0x48>
 800f0e8:	2010      	movs	r0, #16
 800f0ea:	f7ff fd7f 	bl	800ebec <malloc>
 800f0ee:	4602      	mov	r2, r0
 800f0f0:	61f8      	str	r0, [r7, #28]
 800f0f2:	b928      	cbnz	r0, 800f100 <__pow5mult+0x40>
 800f0f4:	4b1d      	ldr	r3, [pc, #116]	@ (800f16c <__pow5mult+0xac>)
 800f0f6:	481e      	ldr	r0, [pc, #120]	@ (800f170 <__pow5mult+0xb0>)
 800f0f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f0fc:	f000 fbdc 	bl	800f8b8 <__assert_func>
 800f100:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f104:	6004      	str	r4, [r0, #0]
 800f106:	60c4      	str	r4, [r0, #12]
 800f108:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f10c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f110:	b94c      	cbnz	r4, 800f126 <__pow5mult+0x66>
 800f112:	f240 2171 	movw	r1, #625	@ 0x271
 800f116:	4638      	mov	r0, r7
 800f118:	f7ff ff12 	bl	800ef40 <__i2b>
 800f11c:	2300      	movs	r3, #0
 800f11e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f122:	4604      	mov	r4, r0
 800f124:	6003      	str	r3, [r0, #0]
 800f126:	f04f 0900 	mov.w	r9, #0
 800f12a:	07eb      	lsls	r3, r5, #31
 800f12c:	d50a      	bpl.n	800f144 <__pow5mult+0x84>
 800f12e:	4631      	mov	r1, r6
 800f130:	4622      	mov	r2, r4
 800f132:	4638      	mov	r0, r7
 800f134:	f7ff ff1a 	bl	800ef6c <__multiply>
 800f138:	4631      	mov	r1, r6
 800f13a:	4680      	mov	r8, r0
 800f13c:	4638      	mov	r0, r7
 800f13e:	f7ff fe4b 	bl	800edd8 <_Bfree>
 800f142:	4646      	mov	r6, r8
 800f144:	106d      	asrs	r5, r5, #1
 800f146:	d00b      	beq.n	800f160 <__pow5mult+0xa0>
 800f148:	6820      	ldr	r0, [r4, #0]
 800f14a:	b938      	cbnz	r0, 800f15c <__pow5mult+0x9c>
 800f14c:	4622      	mov	r2, r4
 800f14e:	4621      	mov	r1, r4
 800f150:	4638      	mov	r0, r7
 800f152:	f7ff ff0b 	bl	800ef6c <__multiply>
 800f156:	6020      	str	r0, [r4, #0]
 800f158:	f8c0 9000 	str.w	r9, [r0]
 800f15c:	4604      	mov	r4, r0
 800f15e:	e7e4      	b.n	800f12a <__pow5mult+0x6a>
 800f160:	4630      	mov	r0, r6
 800f162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f166:	bf00      	nop
 800f168:	08012124 	.word	0x08012124
 800f16c:	08012049 	.word	0x08012049
 800f170:	080120c9 	.word	0x080120c9

0800f174 <__lshift>:
 800f174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f178:	460c      	mov	r4, r1
 800f17a:	6849      	ldr	r1, [r1, #4]
 800f17c:	6923      	ldr	r3, [r4, #16]
 800f17e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f182:	68a3      	ldr	r3, [r4, #8]
 800f184:	4607      	mov	r7, r0
 800f186:	4691      	mov	r9, r2
 800f188:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f18c:	f108 0601 	add.w	r6, r8, #1
 800f190:	42b3      	cmp	r3, r6
 800f192:	db0b      	blt.n	800f1ac <__lshift+0x38>
 800f194:	4638      	mov	r0, r7
 800f196:	f7ff fddf 	bl	800ed58 <_Balloc>
 800f19a:	4605      	mov	r5, r0
 800f19c:	b948      	cbnz	r0, 800f1b2 <__lshift+0x3e>
 800f19e:	4602      	mov	r2, r0
 800f1a0:	4b28      	ldr	r3, [pc, #160]	@ (800f244 <__lshift+0xd0>)
 800f1a2:	4829      	ldr	r0, [pc, #164]	@ (800f248 <__lshift+0xd4>)
 800f1a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f1a8:	f000 fb86 	bl	800f8b8 <__assert_func>
 800f1ac:	3101      	adds	r1, #1
 800f1ae:	005b      	lsls	r3, r3, #1
 800f1b0:	e7ee      	b.n	800f190 <__lshift+0x1c>
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	f100 0114 	add.w	r1, r0, #20
 800f1b8:	f100 0210 	add.w	r2, r0, #16
 800f1bc:	4618      	mov	r0, r3
 800f1be:	4553      	cmp	r3, sl
 800f1c0:	db33      	blt.n	800f22a <__lshift+0xb6>
 800f1c2:	6920      	ldr	r0, [r4, #16]
 800f1c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f1c8:	f104 0314 	add.w	r3, r4, #20
 800f1cc:	f019 091f 	ands.w	r9, r9, #31
 800f1d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f1d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f1d8:	d02b      	beq.n	800f232 <__lshift+0xbe>
 800f1da:	f1c9 0e20 	rsb	lr, r9, #32
 800f1de:	468a      	mov	sl, r1
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	6818      	ldr	r0, [r3, #0]
 800f1e4:	fa00 f009 	lsl.w	r0, r0, r9
 800f1e8:	4310      	orrs	r0, r2
 800f1ea:	f84a 0b04 	str.w	r0, [sl], #4
 800f1ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1f2:	459c      	cmp	ip, r3
 800f1f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800f1f8:	d8f3      	bhi.n	800f1e2 <__lshift+0x6e>
 800f1fa:	ebac 0304 	sub.w	r3, ip, r4
 800f1fe:	3b15      	subs	r3, #21
 800f200:	f023 0303 	bic.w	r3, r3, #3
 800f204:	3304      	adds	r3, #4
 800f206:	f104 0015 	add.w	r0, r4, #21
 800f20a:	4584      	cmp	ip, r0
 800f20c:	bf38      	it	cc
 800f20e:	2304      	movcc	r3, #4
 800f210:	50ca      	str	r2, [r1, r3]
 800f212:	b10a      	cbz	r2, 800f218 <__lshift+0xa4>
 800f214:	f108 0602 	add.w	r6, r8, #2
 800f218:	3e01      	subs	r6, #1
 800f21a:	4638      	mov	r0, r7
 800f21c:	612e      	str	r6, [r5, #16]
 800f21e:	4621      	mov	r1, r4
 800f220:	f7ff fdda 	bl	800edd8 <_Bfree>
 800f224:	4628      	mov	r0, r5
 800f226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f22a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f22e:	3301      	adds	r3, #1
 800f230:	e7c5      	b.n	800f1be <__lshift+0x4a>
 800f232:	3904      	subs	r1, #4
 800f234:	f853 2b04 	ldr.w	r2, [r3], #4
 800f238:	f841 2f04 	str.w	r2, [r1, #4]!
 800f23c:	459c      	cmp	ip, r3
 800f23e:	d8f9      	bhi.n	800f234 <__lshift+0xc0>
 800f240:	e7ea      	b.n	800f218 <__lshift+0xa4>
 800f242:	bf00      	nop
 800f244:	080120b8 	.word	0x080120b8
 800f248:	080120c9 	.word	0x080120c9

0800f24c <__mcmp>:
 800f24c:	690a      	ldr	r2, [r1, #16]
 800f24e:	4603      	mov	r3, r0
 800f250:	6900      	ldr	r0, [r0, #16]
 800f252:	1a80      	subs	r0, r0, r2
 800f254:	b530      	push	{r4, r5, lr}
 800f256:	d10e      	bne.n	800f276 <__mcmp+0x2a>
 800f258:	3314      	adds	r3, #20
 800f25a:	3114      	adds	r1, #20
 800f25c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f260:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f264:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f268:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f26c:	4295      	cmp	r5, r2
 800f26e:	d003      	beq.n	800f278 <__mcmp+0x2c>
 800f270:	d205      	bcs.n	800f27e <__mcmp+0x32>
 800f272:	f04f 30ff 	mov.w	r0, #4294967295
 800f276:	bd30      	pop	{r4, r5, pc}
 800f278:	42a3      	cmp	r3, r4
 800f27a:	d3f3      	bcc.n	800f264 <__mcmp+0x18>
 800f27c:	e7fb      	b.n	800f276 <__mcmp+0x2a>
 800f27e:	2001      	movs	r0, #1
 800f280:	e7f9      	b.n	800f276 <__mcmp+0x2a>
	...

0800f284 <__mdiff>:
 800f284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f288:	4689      	mov	r9, r1
 800f28a:	4606      	mov	r6, r0
 800f28c:	4611      	mov	r1, r2
 800f28e:	4648      	mov	r0, r9
 800f290:	4614      	mov	r4, r2
 800f292:	f7ff ffdb 	bl	800f24c <__mcmp>
 800f296:	1e05      	subs	r5, r0, #0
 800f298:	d112      	bne.n	800f2c0 <__mdiff+0x3c>
 800f29a:	4629      	mov	r1, r5
 800f29c:	4630      	mov	r0, r6
 800f29e:	f7ff fd5b 	bl	800ed58 <_Balloc>
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	b928      	cbnz	r0, 800f2b2 <__mdiff+0x2e>
 800f2a6:	4b3f      	ldr	r3, [pc, #252]	@ (800f3a4 <__mdiff+0x120>)
 800f2a8:	f240 2137 	movw	r1, #567	@ 0x237
 800f2ac:	483e      	ldr	r0, [pc, #248]	@ (800f3a8 <__mdiff+0x124>)
 800f2ae:	f000 fb03 	bl	800f8b8 <__assert_func>
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f2b8:	4610      	mov	r0, r2
 800f2ba:	b003      	add	sp, #12
 800f2bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2c0:	bfbc      	itt	lt
 800f2c2:	464b      	movlt	r3, r9
 800f2c4:	46a1      	movlt	r9, r4
 800f2c6:	4630      	mov	r0, r6
 800f2c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f2cc:	bfba      	itte	lt
 800f2ce:	461c      	movlt	r4, r3
 800f2d0:	2501      	movlt	r5, #1
 800f2d2:	2500      	movge	r5, #0
 800f2d4:	f7ff fd40 	bl	800ed58 <_Balloc>
 800f2d8:	4602      	mov	r2, r0
 800f2da:	b918      	cbnz	r0, 800f2e4 <__mdiff+0x60>
 800f2dc:	4b31      	ldr	r3, [pc, #196]	@ (800f3a4 <__mdiff+0x120>)
 800f2de:	f240 2145 	movw	r1, #581	@ 0x245
 800f2e2:	e7e3      	b.n	800f2ac <__mdiff+0x28>
 800f2e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f2e8:	6926      	ldr	r6, [r4, #16]
 800f2ea:	60c5      	str	r5, [r0, #12]
 800f2ec:	f109 0310 	add.w	r3, r9, #16
 800f2f0:	f109 0514 	add.w	r5, r9, #20
 800f2f4:	f104 0e14 	add.w	lr, r4, #20
 800f2f8:	f100 0b14 	add.w	fp, r0, #20
 800f2fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f300:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f304:	9301      	str	r3, [sp, #4]
 800f306:	46d9      	mov	r9, fp
 800f308:	f04f 0c00 	mov.w	ip, #0
 800f30c:	9b01      	ldr	r3, [sp, #4]
 800f30e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f312:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f316:	9301      	str	r3, [sp, #4]
 800f318:	fa1f f38a 	uxth.w	r3, sl
 800f31c:	4619      	mov	r1, r3
 800f31e:	b283      	uxth	r3, r0
 800f320:	1acb      	subs	r3, r1, r3
 800f322:	0c00      	lsrs	r0, r0, #16
 800f324:	4463      	add	r3, ip
 800f326:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f32a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f32e:	b29b      	uxth	r3, r3
 800f330:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f334:	4576      	cmp	r6, lr
 800f336:	f849 3b04 	str.w	r3, [r9], #4
 800f33a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f33e:	d8e5      	bhi.n	800f30c <__mdiff+0x88>
 800f340:	1b33      	subs	r3, r6, r4
 800f342:	3b15      	subs	r3, #21
 800f344:	f023 0303 	bic.w	r3, r3, #3
 800f348:	3415      	adds	r4, #21
 800f34a:	3304      	adds	r3, #4
 800f34c:	42a6      	cmp	r6, r4
 800f34e:	bf38      	it	cc
 800f350:	2304      	movcc	r3, #4
 800f352:	441d      	add	r5, r3
 800f354:	445b      	add	r3, fp
 800f356:	461e      	mov	r6, r3
 800f358:	462c      	mov	r4, r5
 800f35a:	4544      	cmp	r4, r8
 800f35c:	d30e      	bcc.n	800f37c <__mdiff+0xf8>
 800f35e:	f108 0103 	add.w	r1, r8, #3
 800f362:	1b49      	subs	r1, r1, r5
 800f364:	f021 0103 	bic.w	r1, r1, #3
 800f368:	3d03      	subs	r5, #3
 800f36a:	45a8      	cmp	r8, r5
 800f36c:	bf38      	it	cc
 800f36e:	2100      	movcc	r1, #0
 800f370:	440b      	add	r3, r1
 800f372:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f376:	b191      	cbz	r1, 800f39e <__mdiff+0x11a>
 800f378:	6117      	str	r7, [r2, #16]
 800f37a:	e79d      	b.n	800f2b8 <__mdiff+0x34>
 800f37c:	f854 1b04 	ldr.w	r1, [r4], #4
 800f380:	46e6      	mov	lr, ip
 800f382:	0c08      	lsrs	r0, r1, #16
 800f384:	fa1c fc81 	uxtah	ip, ip, r1
 800f388:	4471      	add	r1, lr
 800f38a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f38e:	b289      	uxth	r1, r1
 800f390:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f394:	f846 1b04 	str.w	r1, [r6], #4
 800f398:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f39c:	e7dd      	b.n	800f35a <__mdiff+0xd6>
 800f39e:	3f01      	subs	r7, #1
 800f3a0:	e7e7      	b.n	800f372 <__mdiff+0xee>
 800f3a2:	bf00      	nop
 800f3a4:	080120b8 	.word	0x080120b8
 800f3a8:	080120c9 	.word	0x080120c9

0800f3ac <__d2b>:
 800f3ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f3b0:	460f      	mov	r7, r1
 800f3b2:	2101      	movs	r1, #1
 800f3b4:	ec59 8b10 	vmov	r8, r9, d0
 800f3b8:	4616      	mov	r6, r2
 800f3ba:	f7ff fccd 	bl	800ed58 <_Balloc>
 800f3be:	4604      	mov	r4, r0
 800f3c0:	b930      	cbnz	r0, 800f3d0 <__d2b+0x24>
 800f3c2:	4602      	mov	r2, r0
 800f3c4:	4b23      	ldr	r3, [pc, #140]	@ (800f454 <__d2b+0xa8>)
 800f3c6:	4824      	ldr	r0, [pc, #144]	@ (800f458 <__d2b+0xac>)
 800f3c8:	f240 310f 	movw	r1, #783	@ 0x30f
 800f3cc:	f000 fa74 	bl	800f8b8 <__assert_func>
 800f3d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f3d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f3d8:	b10d      	cbz	r5, 800f3de <__d2b+0x32>
 800f3da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f3de:	9301      	str	r3, [sp, #4]
 800f3e0:	f1b8 0300 	subs.w	r3, r8, #0
 800f3e4:	d023      	beq.n	800f42e <__d2b+0x82>
 800f3e6:	4668      	mov	r0, sp
 800f3e8:	9300      	str	r3, [sp, #0]
 800f3ea:	f7ff fd7c 	bl	800eee6 <__lo0bits>
 800f3ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f3f2:	b1d0      	cbz	r0, 800f42a <__d2b+0x7e>
 800f3f4:	f1c0 0320 	rsb	r3, r0, #32
 800f3f8:	fa02 f303 	lsl.w	r3, r2, r3
 800f3fc:	430b      	orrs	r3, r1
 800f3fe:	40c2      	lsrs	r2, r0
 800f400:	6163      	str	r3, [r4, #20]
 800f402:	9201      	str	r2, [sp, #4]
 800f404:	9b01      	ldr	r3, [sp, #4]
 800f406:	61a3      	str	r3, [r4, #24]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	bf0c      	ite	eq
 800f40c:	2201      	moveq	r2, #1
 800f40e:	2202      	movne	r2, #2
 800f410:	6122      	str	r2, [r4, #16]
 800f412:	b1a5      	cbz	r5, 800f43e <__d2b+0x92>
 800f414:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f418:	4405      	add	r5, r0
 800f41a:	603d      	str	r5, [r7, #0]
 800f41c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f420:	6030      	str	r0, [r6, #0]
 800f422:	4620      	mov	r0, r4
 800f424:	b003      	add	sp, #12
 800f426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f42a:	6161      	str	r1, [r4, #20]
 800f42c:	e7ea      	b.n	800f404 <__d2b+0x58>
 800f42e:	a801      	add	r0, sp, #4
 800f430:	f7ff fd59 	bl	800eee6 <__lo0bits>
 800f434:	9b01      	ldr	r3, [sp, #4]
 800f436:	6163      	str	r3, [r4, #20]
 800f438:	3020      	adds	r0, #32
 800f43a:	2201      	movs	r2, #1
 800f43c:	e7e8      	b.n	800f410 <__d2b+0x64>
 800f43e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f442:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f446:	6038      	str	r0, [r7, #0]
 800f448:	6918      	ldr	r0, [r3, #16]
 800f44a:	f7ff fd2d 	bl	800eea8 <__hi0bits>
 800f44e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f452:	e7e5      	b.n	800f420 <__d2b+0x74>
 800f454:	080120b8 	.word	0x080120b8
 800f458:	080120c9 	.word	0x080120c9

0800f45c <__ssputs_r>:
 800f45c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f460:	688e      	ldr	r6, [r1, #8]
 800f462:	461f      	mov	r7, r3
 800f464:	42be      	cmp	r6, r7
 800f466:	680b      	ldr	r3, [r1, #0]
 800f468:	4682      	mov	sl, r0
 800f46a:	460c      	mov	r4, r1
 800f46c:	4690      	mov	r8, r2
 800f46e:	d82d      	bhi.n	800f4cc <__ssputs_r+0x70>
 800f470:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f474:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f478:	d026      	beq.n	800f4c8 <__ssputs_r+0x6c>
 800f47a:	6965      	ldr	r5, [r4, #20]
 800f47c:	6909      	ldr	r1, [r1, #16]
 800f47e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f482:	eba3 0901 	sub.w	r9, r3, r1
 800f486:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f48a:	1c7b      	adds	r3, r7, #1
 800f48c:	444b      	add	r3, r9
 800f48e:	106d      	asrs	r5, r5, #1
 800f490:	429d      	cmp	r5, r3
 800f492:	bf38      	it	cc
 800f494:	461d      	movcc	r5, r3
 800f496:	0553      	lsls	r3, r2, #21
 800f498:	d527      	bpl.n	800f4ea <__ssputs_r+0x8e>
 800f49a:	4629      	mov	r1, r5
 800f49c:	f7ff fbd0 	bl	800ec40 <_malloc_r>
 800f4a0:	4606      	mov	r6, r0
 800f4a2:	b360      	cbz	r0, 800f4fe <__ssputs_r+0xa2>
 800f4a4:	6921      	ldr	r1, [r4, #16]
 800f4a6:	464a      	mov	r2, r9
 800f4a8:	f7fe fcfb 	bl	800dea2 <memcpy>
 800f4ac:	89a3      	ldrh	r3, [r4, #12]
 800f4ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f4b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4b6:	81a3      	strh	r3, [r4, #12]
 800f4b8:	6126      	str	r6, [r4, #16]
 800f4ba:	6165      	str	r5, [r4, #20]
 800f4bc:	444e      	add	r6, r9
 800f4be:	eba5 0509 	sub.w	r5, r5, r9
 800f4c2:	6026      	str	r6, [r4, #0]
 800f4c4:	60a5      	str	r5, [r4, #8]
 800f4c6:	463e      	mov	r6, r7
 800f4c8:	42be      	cmp	r6, r7
 800f4ca:	d900      	bls.n	800f4ce <__ssputs_r+0x72>
 800f4cc:	463e      	mov	r6, r7
 800f4ce:	6820      	ldr	r0, [r4, #0]
 800f4d0:	4632      	mov	r2, r6
 800f4d2:	4641      	mov	r1, r8
 800f4d4:	f000 f9c6 	bl	800f864 <memmove>
 800f4d8:	68a3      	ldr	r3, [r4, #8]
 800f4da:	1b9b      	subs	r3, r3, r6
 800f4dc:	60a3      	str	r3, [r4, #8]
 800f4de:	6823      	ldr	r3, [r4, #0]
 800f4e0:	4433      	add	r3, r6
 800f4e2:	6023      	str	r3, [r4, #0]
 800f4e4:	2000      	movs	r0, #0
 800f4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ea:	462a      	mov	r2, r5
 800f4ec:	f000 fa28 	bl	800f940 <_realloc_r>
 800f4f0:	4606      	mov	r6, r0
 800f4f2:	2800      	cmp	r0, #0
 800f4f4:	d1e0      	bne.n	800f4b8 <__ssputs_r+0x5c>
 800f4f6:	6921      	ldr	r1, [r4, #16]
 800f4f8:	4650      	mov	r0, sl
 800f4fa:	f7ff fb2d 	bl	800eb58 <_free_r>
 800f4fe:	230c      	movs	r3, #12
 800f500:	f8ca 3000 	str.w	r3, [sl]
 800f504:	89a3      	ldrh	r3, [r4, #12]
 800f506:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f50a:	81a3      	strh	r3, [r4, #12]
 800f50c:	f04f 30ff 	mov.w	r0, #4294967295
 800f510:	e7e9      	b.n	800f4e6 <__ssputs_r+0x8a>
	...

0800f514 <_svfiprintf_r>:
 800f514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f518:	4698      	mov	r8, r3
 800f51a:	898b      	ldrh	r3, [r1, #12]
 800f51c:	061b      	lsls	r3, r3, #24
 800f51e:	b09d      	sub	sp, #116	@ 0x74
 800f520:	4607      	mov	r7, r0
 800f522:	460d      	mov	r5, r1
 800f524:	4614      	mov	r4, r2
 800f526:	d510      	bpl.n	800f54a <_svfiprintf_r+0x36>
 800f528:	690b      	ldr	r3, [r1, #16]
 800f52a:	b973      	cbnz	r3, 800f54a <_svfiprintf_r+0x36>
 800f52c:	2140      	movs	r1, #64	@ 0x40
 800f52e:	f7ff fb87 	bl	800ec40 <_malloc_r>
 800f532:	6028      	str	r0, [r5, #0]
 800f534:	6128      	str	r0, [r5, #16]
 800f536:	b930      	cbnz	r0, 800f546 <_svfiprintf_r+0x32>
 800f538:	230c      	movs	r3, #12
 800f53a:	603b      	str	r3, [r7, #0]
 800f53c:	f04f 30ff 	mov.w	r0, #4294967295
 800f540:	b01d      	add	sp, #116	@ 0x74
 800f542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f546:	2340      	movs	r3, #64	@ 0x40
 800f548:	616b      	str	r3, [r5, #20]
 800f54a:	2300      	movs	r3, #0
 800f54c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f54e:	2320      	movs	r3, #32
 800f550:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f554:	f8cd 800c 	str.w	r8, [sp, #12]
 800f558:	2330      	movs	r3, #48	@ 0x30
 800f55a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f6f8 <_svfiprintf_r+0x1e4>
 800f55e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f562:	f04f 0901 	mov.w	r9, #1
 800f566:	4623      	mov	r3, r4
 800f568:	469a      	mov	sl, r3
 800f56a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f56e:	b10a      	cbz	r2, 800f574 <_svfiprintf_r+0x60>
 800f570:	2a25      	cmp	r2, #37	@ 0x25
 800f572:	d1f9      	bne.n	800f568 <_svfiprintf_r+0x54>
 800f574:	ebba 0b04 	subs.w	fp, sl, r4
 800f578:	d00b      	beq.n	800f592 <_svfiprintf_r+0x7e>
 800f57a:	465b      	mov	r3, fp
 800f57c:	4622      	mov	r2, r4
 800f57e:	4629      	mov	r1, r5
 800f580:	4638      	mov	r0, r7
 800f582:	f7ff ff6b 	bl	800f45c <__ssputs_r>
 800f586:	3001      	adds	r0, #1
 800f588:	f000 80a7 	beq.w	800f6da <_svfiprintf_r+0x1c6>
 800f58c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f58e:	445a      	add	r2, fp
 800f590:	9209      	str	r2, [sp, #36]	@ 0x24
 800f592:	f89a 3000 	ldrb.w	r3, [sl]
 800f596:	2b00      	cmp	r3, #0
 800f598:	f000 809f 	beq.w	800f6da <_svfiprintf_r+0x1c6>
 800f59c:	2300      	movs	r3, #0
 800f59e:	f04f 32ff 	mov.w	r2, #4294967295
 800f5a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5a6:	f10a 0a01 	add.w	sl, sl, #1
 800f5aa:	9304      	str	r3, [sp, #16]
 800f5ac:	9307      	str	r3, [sp, #28]
 800f5ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f5b2:	931a      	str	r3, [sp, #104]	@ 0x68
 800f5b4:	4654      	mov	r4, sl
 800f5b6:	2205      	movs	r2, #5
 800f5b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5bc:	484e      	ldr	r0, [pc, #312]	@ (800f6f8 <_svfiprintf_r+0x1e4>)
 800f5be:	f7f0 fe07 	bl	80001d0 <memchr>
 800f5c2:	9a04      	ldr	r2, [sp, #16]
 800f5c4:	b9d8      	cbnz	r0, 800f5fe <_svfiprintf_r+0xea>
 800f5c6:	06d0      	lsls	r0, r2, #27
 800f5c8:	bf44      	itt	mi
 800f5ca:	2320      	movmi	r3, #32
 800f5cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f5d0:	0711      	lsls	r1, r2, #28
 800f5d2:	bf44      	itt	mi
 800f5d4:	232b      	movmi	r3, #43	@ 0x2b
 800f5d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f5da:	f89a 3000 	ldrb.w	r3, [sl]
 800f5de:	2b2a      	cmp	r3, #42	@ 0x2a
 800f5e0:	d015      	beq.n	800f60e <_svfiprintf_r+0xfa>
 800f5e2:	9a07      	ldr	r2, [sp, #28]
 800f5e4:	4654      	mov	r4, sl
 800f5e6:	2000      	movs	r0, #0
 800f5e8:	f04f 0c0a 	mov.w	ip, #10
 800f5ec:	4621      	mov	r1, r4
 800f5ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5f2:	3b30      	subs	r3, #48	@ 0x30
 800f5f4:	2b09      	cmp	r3, #9
 800f5f6:	d94b      	bls.n	800f690 <_svfiprintf_r+0x17c>
 800f5f8:	b1b0      	cbz	r0, 800f628 <_svfiprintf_r+0x114>
 800f5fa:	9207      	str	r2, [sp, #28]
 800f5fc:	e014      	b.n	800f628 <_svfiprintf_r+0x114>
 800f5fe:	eba0 0308 	sub.w	r3, r0, r8
 800f602:	fa09 f303 	lsl.w	r3, r9, r3
 800f606:	4313      	orrs	r3, r2
 800f608:	9304      	str	r3, [sp, #16]
 800f60a:	46a2      	mov	sl, r4
 800f60c:	e7d2      	b.n	800f5b4 <_svfiprintf_r+0xa0>
 800f60e:	9b03      	ldr	r3, [sp, #12]
 800f610:	1d19      	adds	r1, r3, #4
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	9103      	str	r1, [sp, #12]
 800f616:	2b00      	cmp	r3, #0
 800f618:	bfbb      	ittet	lt
 800f61a:	425b      	neglt	r3, r3
 800f61c:	f042 0202 	orrlt.w	r2, r2, #2
 800f620:	9307      	strge	r3, [sp, #28]
 800f622:	9307      	strlt	r3, [sp, #28]
 800f624:	bfb8      	it	lt
 800f626:	9204      	strlt	r2, [sp, #16]
 800f628:	7823      	ldrb	r3, [r4, #0]
 800f62a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f62c:	d10a      	bne.n	800f644 <_svfiprintf_r+0x130>
 800f62e:	7863      	ldrb	r3, [r4, #1]
 800f630:	2b2a      	cmp	r3, #42	@ 0x2a
 800f632:	d132      	bne.n	800f69a <_svfiprintf_r+0x186>
 800f634:	9b03      	ldr	r3, [sp, #12]
 800f636:	1d1a      	adds	r2, r3, #4
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	9203      	str	r2, [sp, #12]
 800f63c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f640:	3402      	adds	r4, #2
 800f642:	9305      	str	r3, [sp, #20]
 800f644:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f708 <_svfiprintf_r+0x1f4>
 800f648:	7821      	ldrb	r1, [r4, #0]
 800f64a:	2203      	movs	r2, #3
 800f64c:	4650      	mov	r0, sl
 800f64e:	f7f0 fdbf 	bl	80001d0 <memchr>
 800f652:	b138      	cbz	r0, 800f664 <_svfiprintf_r+0x150>
 800f654:	9b04      	ldr	r3, [sp, #16]
 800f656:	eba0 000a 	sub.w	r0, r0, sl
 800f65a:	2240      	movs	r2, #64	@ 0x40
 800f65c:	4082      	lsls	r2, r0
 800f65e:	4313      	orrs	r3, r2
 800f660:	3401      	adds	r4, #1
 800f662:	9304      	str	r3, [sp, #16]
 800f664:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f668:	4824      	ldr	r0, [pc, #144]	@ (800f6fc <_svfiprintf_r+0x1e8>)
 800f66a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f66e:	2206      	movs	r2, #6
 800f670:	f7f0 fdae 	bl	80001d0 <memchr>
 800f674:	2800      	cmp	r0, #0
 800f676:	d036      	beq.n	800f6e6 <_svfiprintf_r+0x1d2>
 800f678:	4b21      	ldr	r3, [pc, #132]	@ (800f700 <_svfiprintf_r+0x1ec>)
 800f67a:	bb1b      	cbnz	r3, 800f6c4 <_svfiprintf_r+0x1b0>
 800f67c:	9b03      	ldr	r3, [sp, #12]
 800f67e:	3307      	adds	r3, #7
 800f680:	f023 0307 	bic.w	r3, r3, #7
 800f684:	3308      	adds	r3, #8
 800f686:	9303      	str	r3, [sp, #12]
 800f688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f68a:	4433      	add	r3, r6
 800f68c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f68e:	e76a      	b.n	800f566 <_svfiprintf_r+0x52>
 800f690:	fb0c 3202 	mla	r2, ip, r2, r3
 800f694:	460c      	mov	r4, r1
 800f696:	2001      	movs	r0, #1
 800f698:	e7a8      	b.n	800f5ec <_svfiprintf_r+0xd8>
 800f69a:	2300      	movs	r3, #0
 800f69c:	3401      	adds	r4, #1
 800f69e:	9305      	str	r3, [sp, #20]
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	f04f 0c0a 	mov.w	ip, #10
 800f6a6:	4620      	mov	r0, r4
 800f6a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6ac:	3a30      	subs	r2, #48	@ 0x30
 800f6ae:	2a09      	cmp	r2, #9
 800f6b0:	d903      	bls.n	800f6ba <_svfiprintf_r+0x1a6>
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d0c6      	beq.n	800f644 <_svfiprintf_r+0x130>
 800f6b6:	9105      	str	r1, [sp, #20]
 800f6b8:	e7c4      	b.n	800f644 <_svfiprintf_r+0x130>
 800f6ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800f6be:	4604      	mov	r4, r0
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	e7f0      	b.n	800f6a6 <_svfiprintf_r+0x192>
 800f6c4:	ab03      	add	r3, sp, #12
 800f6c6:	9300      	str	r3, [sp, #0]
 800f6c8:	462a      	mov	r2, r5
 800f6ca:	4b0e      	ldr	r3, [pc, #56]	@ (800f704 <_svfiprintf_r+0x1f0>)
 800f6cc:	a904      	add	r1, sp, #16
 800f6ce:	4638      	mov	r0, r7
 800f6d0:	f7fd fe44 	bl	800d35c <_printf_float>
 800f6d4:	1c42      	adds	r2, r0, #1
 800f6d6:	4606      	mov	r6, r0
 800f6d8:	d1d6      	bne.n	800f688 <_svfiprintf_r+0x174>
 800f6da:	89ab      	ldrh	r3, [r5, #12]
 800f6dc:	065b      	lsls	r3, r3, #25
 800f6de:	f53f af2d 	bmi.w	800f53c <_svfiprintf_r+0x28>
 800f6e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f6e4:	e72c      	b.n	800f540 <_svfiprintf_r+0x2c>
 800f6e6:	ab03      	add	r3, sp, #12
 800f6e8:	9300      	str	r3, [sp, #0]
 800f6ea:	462a      	mov	r2, r5
 800f6ec:	4b05      	ldr	r3, [pc, #20]	@ (800f704 <_svfiprintf_r+0x1f0>)
 800f6ee:	a904      	add	r1, sp, #16
 800f6f0:	4638      	mov	r0, r7
 800f6f2:	f7fe f8cb 	bl	800d88c <_printf_i>
 800f6f6:	e7ed      	b.n	800f6d4 <_svfiprintf_r+0x1c0>
 800f6f8:	08012220 	.word	0x08012220
 800f6fc:	0801222a 	.word	0x0801222a
 800f700:	0800d35d 	.word	0x0800d35d
 800f704:	0800f45d 	.word	0x0800f45d
 800f708:	08012226 	.word	0x08012226

0800f70c <__sflush_r>:
 800f70c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f714:	0716      	lsls	r6, r2, #28
 800f716:	4605      	mov	r5, r0
 800f718:	460c      	mov	r4, r1
 800f71a:	d454      	bmi.n	800f7c6 <__sflush_r+0xba>
 800f71c:	684b      	ldr	r3, [r1, #4]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	dc02      	bgt.n	800f728 <__sflush_r+0x1c>
 800f722:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f724:	2b00      	cmp	r3, #0
 800f726:	dd48      	ble.n	800f7ba <__sflush_r+0xae>
 800f728:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f72a:	2e00      	cmp	r6, #0
 800f72c:	d045      	beq.n	800f7ba <__sflush_r+0xae>
 800f72e:	2300      	movs	r3, #0
 800f730:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f734:	682f      	ldr	r7, [r5, #0]
 800f736:	6a21      	ldr	r1, [r4, #32]
 800f738:	602b      	str	r3, [r5, #0]
 800f73a:	d030      	beq.n	800f79e <__sflush_r+0x92>
 800f73c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f73e:	89a3      	ldrh	r3, [r4, #12]
 800f740:	0759      	lsls	r1, r3, #29
 800f742:	d505      	bpl.n	800f750 <__sflush_r+0x44>
 800f744:	6863      	ldr	r3, [r4, #4]
 800f746:	1ad2      	subs	r2, r2, r3
 800f748:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f74a:	b10b      	cbz	r3, 800f750 <__sflush_r+0x44>
 800f74c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f74e:	1ad2      	subs	r2, r2, r3
 800f750:	2300      	movs	r3, #0
 800f752:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f754:	6a21      	ldr	r1, [r4, #32]
 800f756:	4628      	mov	r0, r5
 800f758:	47b0      	blx	r6
 800f75a:	1c43      	adds	r3, r0, #1
 800f75c:	89a3      	ldrh	r3, [r4, #12]
 800f75e:	d106      	bne.n	800f76e <__sflush_r+0x62>
 800f760:	6829      	ldr	r1, [r5, #0]
 800f762:	291d      	cmp	r1, #29
 800f764:	d82b      	bhi.n	800f7be <__sflush_r+0xb2>
 800f766:	4a2a      	ldr	r2, [pc, #168]	@ (800f810 <__sflush_r+0x104>)
 800f768:	410a      	asrs	r2, r1
 800f76a:	07d6      	lsls	r6, r2, #31
 800f76c:	d427      	bmi.n	800f7be <__sflush_r+0xb2>
 800f76e:	2200      	movs	r2, #0
 800f770:	6062      	str	r2, [r4, #4]
 800f772:	04d9      	lsls	r1, r3, #19
 800f774:	6922      	ldr	r2, [r4, #16]
 800f776:	6022      	str	r2, [r4, #0]
 800f778:	d504      	bpl.n	800f784 <__sflush_r+0x78>
 800f77a:	1c42      	adds	r2, r0, #1
 800f77c:	d101      	bne.n	800f782 <__sflush_r+0x76>
 800f77e:	682b      	ldr	r3, [r5, #0]
 800f780:	b903      	cbnz	r3, 800f784 <__sflush_r+0x78>
 800f782:	6560      	str	r0, [r4, #84]	@ 0x54
 800f784:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f786:	602f      	str	r7, [r5, #0]
 800f788:	b1b9      	cbz	r1, 800f7ba <__sflush_r+0xae>
 800f78a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f78e:	4299      	cmp	r1, r3
 800f790:	d002      	beq.n	800f798 <__sflush_r+0x8c>
 800f792:	4628      	mov	r0, r5
 800f794:	f7ff f9e0 	bl	800eb58 <_free_r>
 800f798:	2300      	movs	r3, #0
 800f79a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f79c:	e00d      	b.n	800f7ba <__sflush_r+0xae>
 800f79e:	2301      	movs	r3, #1
 800f7a0:	4628      	mov	r0, r5
 800f7a2:	47b0      	blx	r6
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	1c50      	adds	r0, r2, #1
 800f7a8:	d1c9      	bne.n	800f73e <__sflush_r+0x32>
 800f7aa:	682b      	ldr	r3, [r5, #0]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d0c6      	beq.n	800f73e <__sflush_r+0x32>
 800f7b0:	2b1d      	cmp	r3, #29
 800f7b2:	d001      	beq.n	800f7b8 <__sflush_r+0xac>
 800f7b4:	2b16      	cmp	r3, #22
 800f7b6:	d11e      	bne.n	800f7f6 <__sflush_r+0xea>
 800f7b8:	602f      	str	r7, [r5, #0]
 800f7ba:	2000      	movs	r0, #0
 800f7bc:	e022      	b.n	800f804 <__sflush_r+0xf8>
 800f7be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7c2:	b21b      	sxth	r3, r3
 800f7c4:	e01b      	b.n	800f7fe <__sflush_r+0xf2>
 800f7c6:	690f      	ldr	r7, [r1, #16]
 800f7c8:	2f00      	cmp	r7, #0
 800f7ca:	d0f6      	beq.n	800f7ba <__sflush_r+0xae>
 800f7cc:	0793      	lsls	r3, r2, #30
 800f7ce:	680e      	ldr	r6, [r1, #0]
 800f7d0:	bf08      	it	eq
 800f7d2:	694b      	ldreq	r3, [r1, #20]
 800f7d4:	600f      	str	r7, [r1, #0]
 800f7d6:	bf18      	it	ne
 800f7d8:	2300      	movne	r3, #0
 800f7da:	eba6 0807 	sub.w	r8, r6, r7
 800f7de:	608b      	str	r3, [r1, #8]
 800f7e0:	f1b8 0f00 	cmp.w	r8, #0
 800f7e4:	dde9      	ble.n	800f7ba <__sflush_r+0xae>
 800f7e6:	6a21      	ldr	r1, [r4, #32]
 800f7e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f7ea:	4643      	mov	r3, r8
 800f7ec:	463a      	mov	r2, r7
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	47b0      	blx	r6
 800f7f2:	2800      	cmp	r0, #0
 800f7f4:	dc08      	bgt.n	800f808 <__sflush_r+0xfc>
 800f7f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7fe:	81a3      	strh	r3, [r4, #12]
 800f800:	f04f 30ff 	mov.w	r0, #4294967295
 800f804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f808:	4407      	add	r7, r0
 800f80a:	eba8 0800 	sub.w	r8, r8, r0
 800f80e:	e7e7      	b.n	800f7e0 <__sflush_r+0xd4>
 800f810:	dfbffffe 	.word	0xdfbffffe

0800f814 <_fflush_r>:
 800f814:	b538      	push	{r3, r4, r5, lr}
 800f816:	690b      	ldr	r3, [r1, #16]
 800f818:	4605      	mov	r5, r0
 800f81a:	460c      	mov	r4, r1
 800f81c:	b913      	cbnz	r3, 800f824 <_fflush_r+0x10>
 800f81e:	2500      	movs	r5, #0
 800f820:	4628      	mov	r0, r5
 800f822:	bd38      	pop	{r3, r4, r5, pc}
 800f824:	b118      	cbz	r0, 800f82e <_fflush_r+0x1a>
 800f826:	6a03      	ldr	r3, [r0, #32]
 800f828:	b90b      	cbnz	r3, 800f82e <_fflush_r+0x1a>
 800f82a:	f7fe f9db 	bl	800dbe4 <__sinit>
 800f82e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d0f3      	beq.n	800f81e <_fflush_r+0xa>
 800f836:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f838:	07d0      	lsls	r0, r2, #31
 800f83a:	d404      	bmi.n	800f846 <_fflush_r+0x32>
 800f83c:	0599      	lsls	r1, r3, #22
 800f83e:	d402      	bmi.n	800f846 <_fflush_r+0x32>
 800f840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f842:	f7fe fb2c 	bl	800de9e <__retarget_lock_acquire_recursive>
 800f846:	4628      	mov	r0, r5
 800f848:	4621      	mov	r1, r4
 800f84a:	f7ff ff5f 	bl	800f70c <__sflush_r>
 800f84e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f850:	07da      	lsls	r2, r3, #31
 800f852:	4605      	mov	r5, r0
 800f854:	d4e4      	bmi.n	800f820 <_fflush_r+0xc>
 800f856:	89a3      	ldrh	r3, [r4, #12]
 800f858:	059b      	lsls	r3, r3, #22
 800f85a:	d4e1      	bmi.n	800f820 <_fflush_r+0xc>
 800f85c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f85e:	f7fe fb1f 	bl	800dea0 <__retarget_lock_release_recursive>
 800f862:	e7dd      	b.n	800f820 <_fflush_r+0xc>

0800f864 <memmove>:
 800f864:	4288      	cmp	r0, r1
 800f866:	b510      	push	{r4, lr}
 800f868:	eb01 0402 	add.w	r4, r1, r2
 800f86c:	d902      	bls.n	800f874 <memmove+0x10>
 800f86e:	4284      	cmp	r4, r0
 800f870:	4623      	mov	r3, r4
 800f872:	d807      	bhi.n	800f884 <memmove+0x20>
 800f874:	1e43      	subs	r3, r0, #1
 800f876:	42a1      	cmp	r1, r4
 800f878:	d008      	beq.n	800f88c <memmove+0x28>
 800f87a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f87e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f882:	e7f8      	b.n	800f876 <memmove+0x12>
 800f884:	4402      	add	r2, r0
 800f886:	4601      	mov	r1, r0
 800f888:	428a      	cmp	r2, r1
 800f88a:	d100      	bne.n	800f88e <memmove+0x2a>
 800f88c:	bd10      	pop	{r4, pc}
 800f88e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f896:	e7f7      	b.n	800f888 <memmove+0x24>

0800f898 <_sbrk_r>:
 800f898:	b538      	push	{r3, r4, r5, lr}
 800f89a:	4d06      	ldr	r5, [pc, #24]	@ (800f8b4 <_sbrk_r+0x1c>)
 800f89c:	2300      	movs	r3, #0
 800f89e:	4604      	mov	r4, r0
 800f8a0:	4608      	mov	r0, r1
 800f8a2:	602b      	str	r3, [r5, #0]
 800f8a4:	f7f4 fd72 	bl	800438c <_sbrk>
 800f8a8:	1c43      	adds	r3, r0, #1
 800f8aa:	d102      	bne.n	800f8b2 <_sbrk_r+0x1a>
 800f8ac:	682b      	ldr	r3, [r5, #0]
 800f8ae:	b103      	cbz	r3, 800f8b2 <_sbrk_r+0x1a>
 800f8b0:	6023      	str	r3, [r4, #0]
 800f8b2:	bd38      	pop	{r3, r4, r5, pc}
 800f8b4:	200054a8 	.word	0x200054a8

0800f8b8 <__assert_func>:
 800f8b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f8ba:	4614      	mov	r4, r2
 800f8bc:	461a      	mov	r2, r3
 800f8be:	4b09      	ldr	r3, [pc, #36]	@ (800f8e4 <__assert_func+0x2c>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	4605      	mov	r5, r0
 800f8c4:	68d8      	ldr	r0, [r3, #12]
 800f8c6:	b954      	cbnz	r4, 800f8de <__assert_func+0x26>
 800f8c8:	4b07      	ldr	r3, [pc, #28]	@ (800f8e8 <__assert_func+0x30>)
 800f8ca:	461c      	mov	r4, r3
 800f8cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f8d0:	9100      	str	r1, [sp, #0]
 800f8d2:	462b      	mov	r3, r5
 800f8d4:	4905      	ldr	r1, [pc, #20]	@ (800f8ec <__assert_func+0x34>)
 800f8d6:	f000 f86f 	bl	800f9b8 <fiprintf>
 800f8da:	f000 f87f 	bl	800f9dc <abort>
 800f8de:	4b04      	ldr	r3, [pc, #16]	@ (800f8f0 <__assert_func+0x38>)
 800f8e0:	e7f4      	b.n	800f8cc <__assert_func+0x14>
 800f8e2:	bf00      	nop
 800f8e4:	20000034 	.word	0x20000034
 800f8e8:	08012276 	.word	0x08012276
 800f8ec:	08012248 	.word	0x08012248
 800f8f0:	0801223b 	.word	0x0801223b

0800f8f4 <_calloc_r>:
 800f8f4:	b570      	push	{r4, r5, r6, lr}
 800f8f6:	fba1 5402 	umull	r5, r4, r1, r2
 800f8fa:	b93c      	cbnz	r4, 800f90c <_calloc_r+0x18>
 800f8fc:	4629      	mov	r1, r5
 800f8fe:	f7ff f99f 	bl	800ec40 <_malloc_r>
 800f902:	4606      	mov	r6, r0
 800f904:	b928      	cbnz	r0, 800f912 <_calloc_r+0x1e>
 800f906:	2600      	movs	r6, #0
 800f908:	4630      	mov	r0, r6
 800f90a:	bd70      	pop	{r4, r5, r6, pc}
 800f90c:	220c      	movs	r2, #12
 800f90e:	6002      	str	r2, [r0, #0]
 800f910:	e7f9      	b.n	800f906 <_calloc_r+0x12>
 800f912:	462a      	mov	r2, r5
 800f914:	4621      	mov	r1, r4
 800f916:	f7fe fa32 	bl	800dd7e <memset>
 800f91a:	e7f5      	b.n	800f908 <_calloc_r+0x14>

0800f91c <__ascii_mbtowc>:
 800f91c:	b082      	sub	sp, #8
 800f91e:	b901      	cbnz	r1, 800f922 <__ascii_mbtowc+0x6>
 800f920:	a901      	add	r1, sp, #4
 800f922:	b142      	cbz	r2, 800f936 <__ascii_mbtowc+0x1a>
 800f924:	b14b      	cbz	r3, 800f93a <__ascii_mbtowc+0x1e>
 800f926:	7813      	ldrb	r3, [r2, #0]
 800f928:	600b      	str	r3, [r1, #0]
 800f92a:	7812      	ldrb	r2, [r2, #0]
 800f92c:	1e10      	subs	r0, r2, #0
 800f92e:	bf18      	it	ne
 800f930:	2001      	movne	r0, #1
 800f932:	b002      	add	sp, #8
 800f934:	4770      	bx	lr
 800f936:	4610      	mov	r0, r2
 800f938:	e7fb      	b.n	800f932 <__ascii_mbtowc+0x16>
 800f93a:	f06f 0001 	mvn.w	r0, #1
 800f93e:	e7f8      	b.n	800f932 <__ascii_mbtowc+0x16>

0800f940 <_realloc_r>:
 800f940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f944:	4680      	mov	r8, r0
 800f946:	4615      	mov	r5, r2
 800f948:	460c      	mov	r4, r1
 800f94a:	b921      	cbnz	r1, 800f956 <_realloc_r+0x16>
 800f94c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f950:	4611      	mov	r1, r2
 800f952:	f7ff b975 	b.w	800ec40 <_malloc_r>
 800f956:	b92a      	cbnz	r2, 800f964 <_realloc_r+0x24>
 800f958:	f7ff f8fe 	bl	800eb58 <_free_r>
 800f95c:	2400      	movs	r4, #0
 800f95e:	4620      	mov	r0, r4
 800f960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f964:	f000 f841 	bl	800f9ea <_malloc_usable_size_r>
 800f968:	4285      	cmp	r5, r0
 800f96a:	4606      	mov	r6, r0
 800f96c:	d802      	bhi.n	800f974 <_realloc_r+0x34>
 800f96e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f972:	d8f4      	bhi.n	800f95e <_realloc_r+0x1e>
 800f974:	4629      	mov	r1, r5
 800f976:	4640      	mov	r0, r8
 800f978:	f7ff f962 	bl	800ec40 <_malloc_r>
 800f97c:	4607      	mov	r7, r0
 800f97e:	2800      	cmp	r0, #0
 800f980:	d0ec      	beq.n	800f95c <_realloc_r+0x1c>
 800f982:	42b5      	cmp	r5, r6
 800f984:	462a      	mov	r2, r5
 800f986:	4621      	mov	r1, r4
 800f988:	bf28      	it	cs
 800f98a:	4632      	movcs	r2, r6
 800f98c:	f7fe fa89 	bl	800dea2 <memcpy>
 800f990:	4621      	mov	r1, r4
 800f992:	4640      	mov	r0, r8
 800f994:	f7ff f8e0 	bl	800eb58 <_free_r>
 800f998:	463c      	mov	r4, r7
 800f99a:	e7e0      	b.n	800f95e <_realloc_r+0x1e>

0800f99c <__ascii_wctomb>:
 800f99c:	4603      	mov	r3, r0
 800f99e:	4608      	mov	r0, r1
 800f9a0:	b141      	cbz	r1, 800f9b4 <__ascii_wctomb+0x18>
 800f9a2:	2aff      	cmp	r2, #255	@ 0xff
 800f9a4:	d904      	bls.n	800f9b0 <__ascii_wctomb+0x14>
 800f9a6:	228a      	movs	r2, #138	@ 0x8a
 800f9a8:	601a      	str	r2, [r3, #0]
 800f9aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f9ae:	4770      	bx	lr
 800f9b0:	700a      	strb	r2, [r1, #0]
 800f9b2:	2001      	movs	r0, #1
 800f9b4:	4770      	bx	lr
	...

0800f9b8 <fiprintf>:
 800f9b8:	b40e      	push	{r1, r2, r3}
 800f9ba:	b503      	push	{r0, r1, lr}
 800f9bc:	4601      	mov	r1, r0
 800f9be:	ab03      	add	r3, sp, #12
 800f9c0:	4805      	ldr	r0, [pc, #20]	@ (800f9d8 <fiprintf+0x20>)
 800f9c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9c6:	6800      	ldr	r0, [r0, #0]
 800f9c8:	9301      	str	r3, [sp, #4]
 800f9ca:	f000 f83f 	bl	800fa4c <_vfiprintf_r>
 800f9ce:	b002      	add	sp, #8
 800f9d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f9d4:	b003      	add	sp, #12
 800f9d6:	4770      	bx	lr
 800f9d8:	20000034 	.word	0x20000034

0800f9dc <abort>:
 800f9dc:	b508      	push	{r3, lr}
 800f9de:	2006      	movs	r0, #6
 800f9e0:	f000 fa08 	bl	800fdf4 <raise>
 800f9e4:	2001      	movs	r0, #1
 800f9e6:	f7f4 fc59 	bl	800429c <_exit>

0800f9ea <_malloc_usable_size_r>:
 800f9ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9ee:	1f18      	subs	r0, r3, #4
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	bfbc      	itt	lt
 800f9f4:	580b      	ldrlt	r3, [r1, r0]
 800f9f6:	18c0      	addlt	r0, r0, r3
 800f9f8:	4770      	bx	lr

0800f9fa <__sfputc_r>:
 800f9fa:	6893      	ldr	r3, [r2, #8]
 800f9fc:	3b01      	subs	r3, #1
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	b410      	push	{r4}
 800fa02:	6093      	str	r3, [r2, #8]
 800fa04:	da08      	bge.n	800fa18 <__sfputc_r+0x1e>
 800fa06:	6994      	ldr	r4, [r2, #24]
 800fa08:	42a3      	cmp	r3, r4
 800fa0a:	db01      	blt.n	800fa10 <__sfputc_r+0x16>
 800fa0c:	290a      	cmp	r1, #10
 800fa0e:	d103      	bne.n	800fa18 <__sfputc_r+0x1e>
 800fa10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa14:	f000 b932 	b.w	800fc7c <__swbuf_r>
 800fa18:	6813      	ldr	r3, [r2, #0]
 800fa1a:	1c58      	adds	r0, r3, #1
 800fa1c:	6010      	str	r0, [r2, #0]
 800fa1e:	7019      	strb	r1, [r3, #0]
 800fa20:	4608      	mov	r0, r1
 800fa22:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa26:	4770      	bx	lr

0800fa28 <__sfputs_r>:
 800fa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa2a:	4606      	mov	r6, r0
 800fa2c:	460f      	mov	r7, r1
 800fa2e:	4614      	mov	r4, r2
 800fa30:	18d5      	adds	r5, r2, r3
 800fa32:	42ac      	cmp	r4, r5
 800fa34:	d101      	bne.n	800fa3a <__sfputs_r+0x12>
 800fa36:	2000      	movs	r0, #0
 800fa38:	e007      	b.n	800fa4a <__sfputs_r+0x22>
 800fa3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa3e:	463a      	mov	r2, r7
 800fa40:	4630      	mov	r0, r6
 800fa42:	f7ff ffda 	bl	800f9fa <__sfputc_r>
 800fa46:	1c43      	adds	r3, r0, #1
 800fa48:	d1f3      	bne.n	800fa32 <__sfputs_r+0xa>
 800fa4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fa4c <_vfiprintf_r>:
 800fa4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa50:	460d      	mov	r5, r1
 800fa52:	b09d      	sub	sp, #116	@ 0x74
 800fa54:	4614      	mov	r4, r2
 800fa56:	4698      	mov	r8, r3
 800fa58:	4606      	mov	r6, r0
 800fa5a:	b118      	cbz	r0, 800fa64 <_vfiprintf_r+0x18>
 800fa5c:	6a03      	ldr	r3, [r0, #32]
 800fa5e:	b90b      	cbnz	r3, 800fa64 <_vfiprintf_r+0x18>
 800fa60:	f7fe f8c0 	bl	800dbe4 <__sinit>
 800fa64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa66:	07d9      	lsls	r1, r3, #31
 800fa68:	d405      	bmi.n	800fa76 <_vfiprintf_r+0x2a>
 800fa6a:	89ab      	ldrh	r3, [r5, #12]
 800fa6c:	059a      	lsls	r2, r3, #22
 800fa6e:	d402      	bmi.n	800fa76 <_vfiprintf_r+0x2a>
 800fa70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fa72:	f7fe fa14 	bl	800de9e <__retarget_lock_acquire_recursive>
 800fa76:	89ab      	ldrh	r3, [r5, #12]
 800fa78:	071b      	lsls	r3, r3, #28
 800fa7a:	d501      	bpl.n	800fa80 <_vfiprintf_r+0x34>
 800fa7c:	692b      	ldr	r3, [r5, #16]
 800fa7e:	b99b      	cbnz	r3, 800faa8 <_vfiprintf_r+0x5c>
 800fa80:	4629      	mov	r1, r5
 800fa82:	4630      	mov	r0, r6
 800fa84:	f000 f938 	bl	800fcf8 <__swsetup_r>
 800fa88:	b170      	cbz	r0, 800faa8 <_vfiprintf_r+0x5c>
 800fa8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fa8c:	07dc      	lsls	r4, r3, #31
 800fa8e:	d504      	bpl.n	800fa9a <_vfiprintf_r+0x4e>
 800fa90:	f04f 30ff 	mov.w	r0, #4294967295
 800fa94:	b01d      	add	sp, #116	@ 0x74
 800fa96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa9a:	89ab      	ldrh	r3, [r5, #12]
 800fa9c:	0598      	lsls	r0, r3, #22
 800fa9e:	d4f7      	bmi.n	800fa90 <_vfiprintf_r+0x44>
 800faa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800faa2:	f7fe f9fd 	bl	800dea0 <__retarget_lock_release_recursive>
 800faa6:	e7f3      	b.n	800fa90 <_vfiprintf_r+0x44>
 800faa8:	2300      	movs	r3, #0
 800faaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800faac:	2320      	movs	r3, #32
 800faae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fab2:	f8cd 800c 	str.w	r8, [sp, #12]
 800fab6:	2330      	movs	r3, #48	@ 0x30
 800fab8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fc68 <_vfiprintf_r+0x21c>
 800fabc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fac0:	f04f 0901 	mov.w	r9, #1
 800fac4:	4623      	mov	r3, r4
 800fac6:	469a      	mov	sl, r3
 800fac8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800facc:	b10a      	cbz	r2, 800fad2 <_vfiprintf_r+0x86>
 800face:	2a25      	cmp	r2, #37	@ 0x25
 800fad0:	d1f9      	bne.n	800fac6 <_vfiprintf_r+0x7a>
 800fad2:	ebba 0b04 	subs.w	fp, sl, r4
 800fad6:	d00b      	beq.n	800faf0 <_vfiprintf_r+0xa4>
 800fad8:	465b      	mov	r3, fp
 800fada:	4622      	mov	r2, r4
 800fadc:	4629      	mov	r1, r5
 800fade:	4630      	mov	r0, r6
 800fae0:	f7ff ffa2 	bl	800fa28 <__sfputs_r>
 800fae4:	3001      	adds	r0, #1
 800fae6:	f000 80a7 	beq.w	800fc38 <_vfiprintf_r+0x1ec>
 800faea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800faec:	445a      	add	r2, fp
 800faee:	9209      	str	r2, [sp, #36]	@ 0x24
 800faf0:	f89a 3000 	ldrb.w	r3, [sl]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	f000 809f 	beq.w	800fc38 <_vfiprintf_r+0x1ec>
 800fafa:	2300      	movs	r3, #0
 800fafc:	f04f 32ff 	mov.w	r2, #4294967295
 800fb00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb04:	f10a 0a01 	add.w	sl, sl, #1
 800fb08:	9304      	str	r3, [sp, #16]
 800fb0a:	9307      	str	r3, [sp, #28]
 800fb0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fb10:	931a      	str	r3, [sp, #104]	@ 0x68
 800fb12:	4654      	mov	r4, sl
 800fb14:	2205      	movs	r2, #5
 800fb16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb1a:	4853      	ldr	r0, [pc, #332]	@ (800fc68 <_vfiprintf_r+0x21c>)
 800fb1c:	f7f0 fb58 	bl	80001d0 <memchr>
 800fb20:	9a04      	ldr	r2, [sp, #16]
 800fb22:	b9d8      	cbnz	r0, 800fb5c <_vfiprintf_r+0x110>
 800fb24:	06d1      	lsls	r1, r2, #27
 800fb26:	bf44      	itt	mi
 800fb28:	2320      	movmi	r3, #32
 800fb2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb2e:	0713      	lsls	r3, r2, #28
 800fb30:	bf44      	itt	mi
 800fb32:	232b      	movmi	r3, #43	@ 0x2b
 800fb34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fb38:	f89a 3000 	ldrb.w	r3, [sl]
 800fb3c:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb3e:	d015      	beq.n	800fb6c <_vfiprintf_r+0x120>
 800fb40:	9a07      	ldr	r2, [sp, #28]
 800fb42:	4654      	mov	r4, sl
 800fb44:	2000      	movs	r0, #0
 800fb46:	f04f 0c0a 	mov.w	ip, #10
 800fb4a:	4621      	mov	r1, r4
 800fb4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb50:	3b30      	subs	r3, #48	@ 0x30
 800fb52:	2b09      	cmp	r3, #9
 800fb54:	d94b      	bls.n	800fbee <_vfiprintf_r+0x1a2>
 800fb56:	b1b0      	cbz	r0, 800fb86 <_vfiprintf_r+0x13a>
 800fb58:	9207      	str	r2, [sp, #28]
 800fb5a:	e014      	b.n	800fb86 <_vfiprintf_r+0x13a>
 800fb5c:	eba0 0308 	sub.w	r3, r0, r8
 800fb60:	fa09 f303 	lsl.w	r3, r9, r3
 800fb64:	4313      	orrs	r3, r2
 800fb66:	9304      	str	r3, [sp, #16]
 800fb68:	46a2      	mov	sl, r4
 800fb6a:	e7d2      	b.n	800fb12 <_vfiprintf_r+0xc6>
 800fb6c:	9b03      	ldr	r3, [sp, #12]
 800fb6e:	1d19      	adds	r1, r3, #4
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	9103      	str	r1, [sp, #12]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	bfbb      	ittet	lt
 800fb78:	425b      	neglt	r3, r3
 800fb7a:	f042 0202 	orrlt.w	r2, r2, #2
 800fb7e:	9307      	strge	r3, [sp, #28]
 800fb80:	9307      	strlt	r3, [sp, #28]
 800fb82:	bfb8      	it	lt
 800fb84:	9204      	strlt	r2, [sp, #16]
 800fb86:	7823      	ldrb	r3, [r4, #0]
 800fb88:	2b2e      	cmp	r3, #46	@ 0x2e
 800fb8a:	d10a      	bne.n	800fba2 <_vfiprintf_r+0x156>
 800fb8c:	7863      	ldrb	r3, [r4, #1]
 800fb8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb90:	d132      	bne.n	800fbf8 <_vfiprintf_r+0x1ac>
 800fb92:	9b03      	ldr	r3, [sp, #12]
 800fb94:	1d1a      	adds	r2, r3, #4
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	9203      	str	r2, [sp, #12]
 800fb9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fb9e:	3402      	adds	r4, #2
 800fba0:	9305      	str	r3, [sp, #20]
 800fba2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fc78 <_vfiprintf_r+0x22c>
 800fba6:	7821      	ldrb	r1, [r4, #0]
 800fba8:	2203      	movs	r2, #3
 800fbaa:	4650      	mov	r0, sl
 800fbac:	f7f0 fb10 	bl	80001d0 <memchr>
 800fbb0:	b138      	cbz	r0, 800fbc2 <_vfiprintf_r+0x176>
 800fbb2:	9b04      	ldr	r3, [sp, #16]
 800fbb4:	eba0 000a 	sub.w	r0, r0, sl
 800fbb8:	2240      	movs	r2, #64	@ 0x40
 800fbba:	4082      	lsls	r2, r0
 800fbbc:	4313      	orrs	r3, r2
 800fbbe:	3401      	adds	r4, #1
 800fbc0:	9304      	str	r3, [sp, #16]
 800fbc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbc6:	4829      	ldr	r0, [pc, #164]	@ (800fc6c <_vfiprintf_r+0x220>)
 800fbc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fbcc:	2206      	movs	r2, #6
 800fbce:	f7f0 faff 	bl	80001d0 <memchr>
 800fbd2:	2800      	cmp	r0, #0
 800fbd4:	d03f      	beq.n	800fc56 <_vfiprintf_r+0x20a>
 800fbd6:	4b26      	ldr	r3, [pc, #152]	@ (800fc70 <_vfiprintf_r+0x224>)
 800fbd8:	bb1b      	cbnz	r3, 800fc22 <_vfiprintf_r+0x1d6>
 800fbda:	9b03      	ldr	r3, [sp, #12]
 800fbdc:	3307      	adds	r3, #7
 800fbde:	f023 0307 	bic.w	r3, r3, #7
 800fbe2:	3308      	adds	r3, #8
 800fbe4:	9303      	str	r3, [sp, #12]
 800fbe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbe8:	443b      	add	r3, r7
 800fbea:	9309      	str	r3, [sp, #36]	@ 0x24
 800fbec:	e76a      	b.n	800fac4 <_vfiprintf_r+0x78>
 800fbee:	fb0c 3202 	mla	r2, ip, r2, r3
 800fbf2:	460c      	mov	r4, r1
 800fbf4:	2001      	movs	r0, #1
 800fbf6:	e7a8      	b.n	800fb4a <_vfiprintf_r+0xfe>
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	3401      	adds	r4, #1
 800fbfc:	9305      	str	r3, [sp, #20]
 800fbfe:	4619      	mov	r1, r3
 800fc00:	f04f 0c0a 	mov.w	ip, #10
 800fc04:	4620      	mov	r0, r4
 800fc06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc0a:	3a30      	subs	r2, #48	@ 0x30
 800fc0c:	2a09      	cmp	r2, #9
 800fc0e:	d903      	bls.n	800fc18 <_vfiprintf_r+0x1cc>
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d0c6      	beq.n	800fba2 <_vfiprintf_r+0x156>
 800fc14:	9105      	str	r1, [sp, #20]
 800fc16:	e7c4      	b.n	800fba2 <_vfiprintf_r+0x156>
 800fc18:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc1c:	4604      	mov	r4, r0
 800fc1e:	2301      	movs	r3, #1
 800fc20:	e7f0      	b.n	800fc04 <_vfiprintf_r+0x1b8>
 800fc22:	ab03      	add	r3, sp, #12
 800fc24:	9300      	str	r3, [sp, #0]
 800fc26:	462a      	mov	r2, r5
 800fc28:	4b12      	ldr	r3, [pc, #72]	@ (800fc74 <_vfiprintf_r+0x228>)
 800fc2a:	a904      	add	r1, sp, #16
 800fc2c:	4630      	mov	r0, r6
 800fc2e:	f7fd fb95 	bl	800d35c <_printf_float>
 800fc32:	4607      	mov	r7, r0
 800fc34:	1c78      	adds	r0, r7, #1
 800fc36:	d1d6      	bne.n	800fbe6 <_vfiprintf_r+0x19a>
 800fc38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc3a:	07d9      	lsls	r1, r3, #31
 800fc3c:	d405      	bmi.n	800fc4a <_vfiprintf_r+0x1fe>
 800fc3e:	89ab      	ldrh	r3, [r5, #12]
 800fc40:	059a      	lsls	r2, r3, #22
 800fc42:	d402      	bmi.n	800fc4a <_vfiprintf_r+0x1fe>
 800fc44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc46:	f7fe f92b 	bl	800dea0 <__retarget_lock_release_recursive>
 800fc4a:	89ab      	ldrh	r3, [r5, #12]
 800fc4c:	065b      	lsls	r3, r3, #25
 800fc4e:	f53f af1f 	bmi.w	800fa90 <_vfiprintf_r+0x44>
 800fc52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fc54:	e71e      	b.n	800fa94 <_vfiprintf_r+0x48>
 800fc56:	ab03      	add	r3, sp, #12
 800fc58:	9300      	str	r3, [sp, #0]
 800fc5a:	462a      	mov	r2, r5
 800fc5c:	4b05      	ldr	r3, [pc, #20]	@ (800fc74 <_vfiprintf_r+0x228>)
 800fc5e:	a904      	add	r1, sp, #16
 800fc60:	4630      	mov	r0, r6
 800fc62:	f7fd fe13 	bl	800d88c <_printf_i>
 800fc66:	e7e4      	b.n	800fc32 <_vfiprintf_r+0x1e6>
 800fc68:	08012220 	.word	0x08012220
 800fc6c:	0801222a 	.word	0x0801222a
 800fc70:	0800d35d 	.word	0x0800d35d
 800fc74:	0800fa29 	.word	0x0800fa29
 800fc78:	08012226 	.word	0x08012226

0800fc7c <__swbuf_r>:
 800fc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc7e:	460e      	mov	r6, r1
 800fc80:	4614      	mov	r4, r2
 800fc82:	4605      	mov	r5, r0
 800fc84:	b118      	cbz	r0, 800fc8e <__swbuf_r+0x12>
 800fc86:	6a03      	ldr	r3, [r0, #32]
 800fc88:	b90b      	cbnz	r3, 800fc8e <__swbuf_r+0x12>
 800fc8a:	f7fd ffab 	bl	800dbe4 <__sinit>
 800fc8e:	69a3      	ldr	r3, [r4, #24]
 800fc90:	60a3      	str	r3, [r4, #8]
 800fc92:	89a3      	ldrh	r3, [r4, #12]
 800fc94:	071a      	lsls	r2, r3, #28
 800fc96:	d501      	bpl.n	800fc9c <__swbuf_r+0x20>
 800fc98:	6923      	ldr	r3, [r4, #16]
 800fc9a:	b943      	cbnz	r3, 800fcae <__swbuf_r+0x32>
 800fc9c:	4621      	mov	r1, r4
 800fc9e:	4628      	mov	r0, r5
 800fca0:	f000 f82a 	bl	800fcf8 <__swsetup_r>
 800fca4:	b118      	cbz	r0, 800fcae <__swbuf_r+0x32>
 800fca6:	f04f 37ff 	mov.w	r7, #4294967295
 800fcaa:	4638      	mov	r0, r7
 800fcac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcae:	6823      	ldr	r3, [r4, #0]
 800fcb0:	6922      	ldr	r2, [r4, #16]
 800fcb2:	1a98      	subs	r0, r3, r2
 800fcb4:	6963      	ldr	r3, [r4, #20]
 800fcb6:	b2f6      	uxtb	r6, r6
 800fcb8:	4283      	cmp	r3, r0
 800fcba:	4637      	mov	r7, r6
 800fcbc:	dc05      	bgt.n	800fcca <__swbuf_r+0x4e>
 800fcbe:	4621      	mov	r1, r4
 800fcc0:	4628      	mov	r0, r5
 800fcc2:	f7ff fda7 	bl	800f814 <_fflush_r>
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	d1ed      	bne.n	800fca6 <__swbuf_r+0x2a>
 800fcca:	68a3      	ldr	r3, [r4, #8]
 800fccc:	3b01      	subs	r3, #1
 800fcce:	60a3      	str	r3, [r4, #8]
 800fcd0:	6823      	ldr	r3, [r4, #0]
 800fcd2:	1c5a      	adds	r2, r3, #1
 800fcd4:	6022      	str	r2, [r4, #0]
 800fcd6:	701e      	strb	r6, [r3, #0]
 800fcd8:	6962      	ldr	r2, [r4, #20]
 800fcda:	1c43      	adds	r3, r0, #1
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	d004      	beq.n	800fcea <__swbuf_r+0x6e>
 800fce0:	89a3      	ldrh	r3, [r4, #12]
 800fce2:	07db      	lsls	r3, r3, #31
 800fce4:	d5e1      	bpl.n	800fcaa <__swbuf_r+0x2e>
 800fce6:	2e0a      	cmp	r6, #10
 800fce8:	d1df      	bne.n	800fcaa <__swbuf_r+0x2e>
 800fcea:	4621      	mov	r1, r4
 800fcec:	4628      	mov	r0, r5
 800fcee:	f7ff fd91 	bl	800f814 <_fflush_r>
 800fcf2:	2800      	cmp	r0, #0
 800fcf4:	d0d9      	beq.n	800fcaa <__swbuf_r+0x2e>
 800fcf6:	e7d6      	b.n	800fca6 <__swbuf_r+0x2a>

0800fcf8 <__swsetup_r>:
 800fcf8:	b538      	push	{r3, r4, r5, lr}
 800fcfa:	4b29      	ldr	r3, [pc, #164]	@ (800fda0 <__swsetup_r+0xa8>)
 800fcfc:	4605      	mov	r5, r0
 800fcfe:	6818      	ldr	r0, [r3, #0]
 800fd00:	460c      	mov	r4, r1
 800fd02:	b118      	cbz	r0, 800fd0c <__swsetup_r+0x14>
 800fd04:	6a03      	ldr	r3, [r0, #32]
 800fd06:	b90b      	cbnz	r3, 800fd0c <__swsetup_r+0x14>
 800fd08:	f7fd ff6c 	bl	800dbe4 <__sinit>
 800fd0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd10:	0719      	lsls	r1, r3, #28
 800fd12:	d422      	bmi.n	800fd5a <__swsetup_r+0x62>
 800fd14:	06da      	lsls	r2, r3, #27
 800fd16:	d407      	bmi.n	800fd28 <__swsetup_r+0x30>
 800fd18:	2209      	movs	r2, #9
 800fd1a:	602a      	str	r2, [r5, #0]
 800fd1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd20:	81a3      	strh	r3, [r4, #12]
 800fd22:	f04f 30ff 	mov.w	r0, #4294967295
 800fd26:	e033      	b.n	800fd90 <__swsetup_r+0x98>
 800fd28:	0758      	lsls	r0, r3, #29
 800fd2a:	d512      	bpl.n	800fd52 <__swsetup_r+0x5a>
 800fd2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fd2e:	b141      	cbz	r1, 800fd42 <__swsetup_r+0x4a>
 800fd30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fd34:	4299      	cmp	r1, r3
 800fd36:	d002      	beq.n	800fd3e <__swsetup_r+0x46>
 800fd38:	4628      	mov	r0, r5
 800fd3a:	f7fe ff0d 	bl	800eb58 <_free_r>
 800fd3e:	2300      	movs	r3, #0
 800fd40:	6363      	str	r3, [r4, #52]	@ 0x34
 800fd42:	89a3      	ldrh	r3, [r4, #12]
 800fd44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fd48:	81a3      	strh	r3, [r4, #12]
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	6063      	str	r3, [r4, #4]
 800fd4e:	6923      	ldr	r3, [r4, #16]
 800fd50:	6023      	str	r3, [r4, #0]
 800fd52:	89a3      	ldrh	r3, [r4, #12]
 800fd54:	f043 0308 	orr.w	r3, r3, #8
 800fd58:	81a3      	strh	r3, [r4, #12]
 800fd5a:	6923      	ldr	r3, [r4, #16]
 800fd5c:	b94b      	cbnz	r3, 800fd72 <__swsetup_r+0x7a>
 800fd5e:	89a3      	ldrh	r3, [r4, #12]
 800fd60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fd64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fd68:	d003      	beq.n	800fd72 <__swsetup_r+0x7a>
 800fd6a:	4621      	mov	r1, r4
 800fd6c:	4628      	mov	r0, r5
 800fd6e:	f000 f883 	bl	800fe78 <__smakebuf_r>
 800fd72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd76:	f013 0201 	ands.w	r2, r3, #1
 800fd7a:	d00a      	beq.n	800fd92 <__swsetup_r+0x9a>
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	60a2      	str	r2, [r4, #8]
 800fd80:	6962      	ldr	r2, [r4, #20]
 800fd82:	4252      	negs	r2, r2
 800fd84:	61a2      	str	r2, [r4, #24]
 800fd86:	6922      	ldr	r2, [r4, #16]
 800fd88:	b942      	cbnz	r2, 800fd9c <__swsetup_r+0xa4>
 800fd8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fd8e:	d1c5      	bne.n	800fd1c <__swsetup_r+0x24>
 800fd90:	bd38      	pop	{r3, r4, r5, pc}
 800fd92:	0799      	lsls	r1, r3, #30
 800fd94:	bf58      	it	pl
 800fd96:	6962      	ldrpl	r2, [r4, #20]
 800fd98:	60a2      	str	r2, [r4, #8]
 800fd9a:	e7f4      	b.n	800fd86 <__swsetup_r+0x8e>
 800fd9c:	2000      	movs	r0, #0
 800fd9e:	e7f7      	b.n	800fd90 <__swsetup_r+0x98>
 800fda0:	20000034 	.word	0x20000034

0800fda4 <_raise_r>:
 800fda4:	291f      	cmp	r1, #31
 800fda6:	b538      	push	{r3, r4, r5, lr}
 800fda8:	4605      	mov	r5, r0
 800fdaa:	460c      	mov	r4, r1
 800fdac:	d904      	bls.n	800fdb8 <_raise_r+0x14>
 800fdae:	2316      	movs	r3, #22
 800fdb0:	6003      	str	r3, [r0, #0]
 800fdb2:	f04f 30ff 	mov.w	r0, #4294967295
 800fdb6:	bd38      	pop	{r3, r4, r5, pc}
 800fdb8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fdba:	b112      	cbz	r2, 800fdc2 <_raise_r+0x1e>
 800fdbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fdc0:	b94b      	cbnz	r3, 800fdd6 <_raise_r+0x32>
 800fdc2:	4628      	mov	r0, r5
 800fdc4:	f000 f830 	bl	800fe28 <_getpid_r>
 800fdc8:	4622      	mov	r2, r4
 800fdca:	4601      	mov	r1, r0
 800fdcc:	4628      	mov	r0, r5
 800fdce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdd2:	f000 b817 	b.w	800fe04 <_kill_r>
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	d00a      	beq.n	800fdf0 <_raise_r+0x4c>
 800fdda:	1c59      	adds	r1, r3, #1
 800fddc:	d103      	bne.n	800fde6 <_raise_r+0x42>
 800fdde:	2316      	movs	r3, #22
 800fde0:	6003      	str	r3, [r0, #0]
 800fde2:	2001      	movs	r0, #1
 800fde4:	e7e7      	b.n	800fdb6 <_raise_r+0x12>
 800fde6:	2100      	movs	r1, #0
 800fde8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fdec:	4620      	mov	r0, r4
 800fdee:	4798      	blx	r3
 800fdf0:	2000      	movs	r0, #0
 800fdf2:	e7e0      	b.n	800fdb6 <_raise_r+0x12>

0800fdf4 <raise>:
 800fdf4:	4b02      	ldr	r3, [pc, #8]	@ (800fe00 <raise+0xc>)
 800fdf6:	4601      	mov	r1, r0
 800fdf8:	6818      	ldr	r0, [r3, #0]
 800fdfa:	f7ff bfd3 	b.w	800fda4 <_raise_r>
 800fdfe:	bf00      	nop
 800fe00:	20000034 	.word	0x20000034

0800fe04 <_kill_r>:
 800fe04:	b538      	push	{r3, r4, r5, lr}
 800fe06:	4d07      	ldr	r5, [pc, #28]	@ (800fe24 <_kill_r+0x20>)
 800fe08:	2300      	movs	r3, #0
 800fe0a:	4604      	mov	r4, r0
 800fe0c:	4608      	mov	r0, r1
 800fe0e:	4611      	mov	r1, r2
 800fe10:	602b      	str	r3, [r5, #0]
 800fe12:	f7f4 fa33 	bl	800427c <_kill>
 800fe16:	1c43      	adds	r3, r0, #1
 800fe18:	d102      	bne.n	800fe20 <_kill_r+0x1c>
 800fe1a:	682b      	ldr	r3, [r5, #0]
 800fe1c:	b103      	cbz	r3, 800fe20 <_kill_r+0x1c>
 800fe1e:	6023      	str	r3, [r4, #0]
 800fe20:	bd38      	pop	{r3, r4, r5, pc}
 800fe22:	bf00      	nop
 800fe24:	200054a8 	.word	0x200054a8

0800fe28 <_getpid_r>:
 800fe28:	f7f4 ba20 	b.w	800426c <_getpid>

0800fe2c <__swhatbuf_r>:
 800fe2c:	b570      	push	{r4, r5, r6, lr}
 800fe2e:	460c      	mov	r4, r1
 800fe30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe34:	2900      	cmp	r1, #0
 800fe36:	b096      	sub	sp, #88	@ 0x58
 800fe38:	4615      	mov	r5, r2
 800fe3a:	461e      	mov	r6, r3
 800fe3c:	da0d      	bge.n	800fe5a <__swhatbuf_r+0x2e>
 800fe3e:	89a3      	ldrh	r3, [r4, #12]
 800fe40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fe44:	f04f 0100 	mov.w	r1, #0
 800fe48:	bf14      	ite	ne
 800fe4a:	2340      	movne	r3, #64	@ 0x40
 800fe4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fe50:	2000      	movs	r0, #0
 800fe52:	6031      	str	r1, [r6, #0]
 800fe54:	602b      	str	r3, [r5, #0]
 800fe56:	b016      	add	sp, #88	@ 0x58
 800fe58:	bd70      	pop	{r4, r5, r6, pc}
 800fe5a:	466a      	mov	r2, sp
 800fe5c:	f000 f848 	bl	800fef0 <_fstat_r>
 800fe60:	2800      	cmp	r0, #0
 800fe62:	dbec      	blt.n	800fe3e <__swhatbuf_r+0x12>
 800fe64:	9901      	ldr	r1, [sp, #4]
 800fe66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fe6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fe6e:	4259      	negs	r1, r3
 800fe70:	4159      	adcs	r1, r3
 800fe72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fe76:	e7eb      	b.n	800fe50 <__swhatbuf_r+0x24>

0800fe78 <__smakebuf_r>:
 800fe78:	898b      	ldrh	r3, [r1, #12]
 800fe7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe7c:	079d      	lsls	r5, r3, #30
 800fe7e:	4606      	mov	r6, r0
 800fe80:	460c      	mov	r4, r1
 800fe82:	d507      	bpl.n	800fe94 <__smakebuf_r+0x1c>
 800fe84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fe88:	6023      	str	r3, [r4, #0]
 800fe8a:	6123      	str	r3, [r4, #16]
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	6163      	str	r3, [r4, #20]
 800fe90:	b003      	add	sp, #12
 800fe92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe94:	ab01      	add	r3, sp, #4
 800fe96:	466a      	mov	r2, sp
 800fe98:	f7ff ffc8 	bl	800fe2c <__swhatbuf_r>
 800fe9c:	9f00      	ldr	r7, [sp, #0]
 800fe9e:	4605      	mov	r5, r0
 800fea0:	4639      	mov	r1, r7
 800fea2:	4630      	mov	r0, r6
 800fea4:	f7fe fecc 	bl	800ec40 <_malloc_r>
 800fea8:	b948      	cbnz	r0, 800febe <__smakebuf_r+0x46>
 800feaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800feae:	059a      	lsls	r2, r3, #22
 800feb0:	d4ee      	bmi.n	800fe90 <__smakebuf_r+0x18>
 800feb2:	f023 0303 	bic.w	r3, r3, #3
 800feb6:	f043 0302 	orr.w	r3, r3, #2
 800feba:	81a3      	strh	r3, [r4, #12]
 800febc:	e7e2      	b.n	800fe84 <__smakebuf_r+0xc>
 800febe:	89a3      	ldrh	r3, [r4, #12]
 800fec0:	6020      	str	r0, [r4, #0]
 800fec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fec6:	81a3      	strh	r3, [r4, #12]
 800fec8:	9b01      	ldr	r3, [sp, #4]
 800feca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fece:	b15b      	cbz	r3, 800fee8 <__smakebuf_r+0x70>
 800fed0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fed4:	4630      	mov	r0, r6
 800fed6:	f000 f81d 	bl	800ff14 <_isatty_r>
 800feda:	b128      	cbz	r0, 800fee8 <__smakebuf_r+0x70>
 800fedc:	89a3      	ldrh	r3, [r4, #12]
 800fede:	f023 0303 	bic.w	r3, r3, #3
 800fee2:	f043 0301 	orr.w	r3, r3, #1
 800fee6:	81a3      	strh	r3, [r4, #12]
 800fee8:	89a3      	ldrh	r3, [r4, #12]
 800feea:	431d      	orrs	r5, r3
 800feec:	81a5      	strh	r5, [r4, #12]
 800feee:	e7cf      	b.n	800fe90 <__smakebuf_r+0x18>

0800fef0 <_fstat_r>:
 800fef0:	b538      	push	{r3, r4, r5, lr}
 800fef2:	4d07      	ldr	r5, [pc, #28]	@ (800ff10 <_fstat_r+0x20>)
 800fef4:	2300      	movs	r3, #0
 800fef6:	4604      	mov	r4, r0
 800fef8:	4608      	mov	r0, r1
 800fefa:	4611      	mov	r1, r2
 800fefc:	602b      	str	r3, [r5, #0]
 800fefe:	f7f4 fa1d 	bl	800433c <_fstat>
 800ff02:	1c43      	adds	r3, r0, #1
 800ff04:	d102      	bne.n	800ff0c <_fstat_r+0x1c>
 800ff06:	682b      	ldr	r3, [r5, #0]
 800ff08:	b103      	cbz	r3, 800ff0c <_fstat_r+0x1c>
 800ff0a:	6023      	str	r3, [r4, #0]
 800ff0c:	bd38      	pop	{r3, r4, r5, pc}
 800ff0e:	bf00      	nop
 800ff10:	200054a8 	.word	0x200054a8

0800ff14 <_isatty_r>:
 800ff14:	b538      	push	{r3, r4, r5, lr}
 800ff16:	4d06      	ldr	r5, [pc, #24]	@ (800ff30 <_isatty_r+0x1c>)
 800ff18:	2300      	movs	r3, #0
 800ff1a:	4604      	mov	r4, r0
 800ff1c:	4608      	mov	r0, r1
 800ff1e:	602b      	str	r3, [r5, #0]
 800ff20:	f7f4 fa1c 	bl	800435c <_isatty>
 800ff24:	1c43      	adds	r3, r0, #1
 800ff26:	d102      	bne.n	800ff2e <_isatty_r+0x1a>
 800ff28:	682b      	ldr	r3, [r5, #0]
 800ff2a:	b103      	cbz	r3, 800ff2e <_isatty_r+0x1a>
 800ff2c:	6023      	str	r3, [r4, #0]
 800ff2e:	bd38      	pop	{r3, r4, r5, pc}
 800ff30:	200054a8 	.word	0x200054a8

0800ff34 <atan2>:
 800ff34:	f000 b958 	b.w	80101e8 <__ieee754_atan2>

0800ff38 <pow>:
 800ff38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff3a:	ed2d 8b02 	vpush	{d8}
 800ff3e:	eeb0 8a40 	vmov.f32	s16, s0
 800ff42:	eef0 8a60 	vmov.f32	s17, s1
 800ff46:	ec55 4b11 	vmov	r4, r5, d1
 800ff4a:	f000 fa15 	bl	8010378 <__ieee754_pow>
 800ff4e:	4622      	mov	r2, r4
 800ff50:	462b      	mov	r3, r5
 800ff52:	4620      	mov	r0, r4
 800ff54:	4629      	mov	r1, r5
 800ff56:	ec57 6b10 	vmov	r6, r7, d0
 800ff5a:	f7f0 fde7 	bl	8000b2c <__aeabi_dcmpun>
 800ff5e:	2800      	cmp	r0, #0
 800ff60:	d13b      	bne.n	800ffda <pow+0xa2>
 800ff62:	ec51 0b18 	vmov	r0, r1, d8
 800ff66:	2200      	movs	r2, #0
 800ff68:	2300      	movs	r3, #0
 800ff6a:	f7f0 fdad 	bl	8000ac8 <__aeabi_dcmpeq>
 800ff6e:	b1b8      	cbz	r0, 800ffa0 <pow+0x68>
 800ff70:	2200      	movs	r2, #0
 800ff72:	2300      	movs	r3, #0
 800ff74:	4620      	mov	r0, r4
 800ff76:	4629      	mov	r1, r5
 800ff78:	f7f0 fda6 	bl	8000ac8 <__aeabi_dcmpeq>
 800ff7c:	2800      	cmp	r0, #0
 800ff7e:	d146      	bne.n	801000e <pow+0xd6>
 800ff80:	ec45 4b10 	vmov	d0, r4, r5
 800ff84:	f000 f848 	bl	8010018 <finite>
 800ff88:	b338      	cbz	r0, 800ffda <pow+0xa2>
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	4620      	mov	r0, r4
 800ff90:	4629      	mov	r1, r5
 800ff92:	f7f0 fda3 	bl	8000adc <__aeabi_dcmplt>
 800ff96:	b300      	cbz	r0, 800ffda <pow+0xa2>
 800ff98:	f7fd ff56 	bl	800de48 <__errno>
 800ff9c:	2322      	movs	r3, #34	@ 0x22
 800ff9e:	e01b      	b.n	800ffd8 <pow+0xa0>
 800ffa0:	ec47 6b10 	vmov	d0, r6, r7
 800ffa4:	f000 f838 	bl	8010018 <finite>
 800ffa8:	b9e0      	cbnz	r0, 800ffe4 <pow+0xac>
 800ffaa:	eeb0 0a48 	vmov.f32	s0, s16
 800ffae:	eef0 0a68 	vmov.f32	s1, s17
 800ffb2:	f000 f831 	bl	8010018 <finite>
 800ffb6:	b1a8      	cbz	r0, 800ffe4 <pow+0xac>
 800ffb8:	ec45 4b10 	vmov	d0, r4, r5
 800ffbc:	f000 f82c 	bl	8010018 <finite>
 800ffc0:	b180      	cbz	r0, 800ffe4 <pow+0xac>
 800ffc2:	4632      	mov	r2, r6
 800ffc4:	463b      	mov	r3, r7
 800ffc6:	4630      	mov	r0, r6
 800ffc8:	4639      	mov	r1, r7
 800ffca:	f7f0 fdaf 	bl	8000b2c <__aeabi_dcmpun>
 800ffce:	2800      	cmp	r0, #0
 800ffd0:	d0e2      	beq.n	800ff98 <pow+0x60>
 800ffd2:	f7fd ff39 	bl	800de48 <__errno>
 800ffd6:	2321      	movs	r3, #33	@ 0x21
 800ffd8:	6003      	str	r3, [r0, #0]
 800ffda:	ecbd 8b02 	vpop	{d8}
 800ffde:	ec47 6b10 	vmov	d0, r6, r7
 800ffe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	4630      	mov	r0, r6
 800ffea:	4639      	mov	r1, r7
 800ffec:	f7f0 fd6c 	bl	8000ac8 <__aeabi_dcmpeq>
 800fff0:	2800      	cmp	r0, #0
 800fff2:	d0f2      	beq.n	800ffda <pow+0xa2>
 800fff4:	eeb0 0a48 	vmov.f32	s0, s16
 800fff8:	eef0 0a68 	vmov.f32	s1, s17
 800fffc:	f000 f80c 	bl	8010018 <finite>
 8010000:	2800      	cmp	r0, #0
 8010002:	d0ea      	beq.n	800ffda <pow+0xa2>
 8010004:	ec45 4b10 	vmov	d0, r4, r5
 8010008:	f000 f806 	bl	8010018 <finite>
 801000c:	e7c3      	b.n	800ff96 <pow+0x5e>
 801000e:	4f01      	ldr	r7, [pc, #4]	@ (8010014 <pow+0xdc>)
 8010010:	2600      	movs	r6, #0
 8010012:	e7e2      	b.n	800ffda <pow+0xa2>
 8010014:	3ff00000 	.word	0x3ff00000

08010018 <finite>:
 8010018:	b082      	sub	sp, #8
 801001a:	ed8d 0b00 	vstr	d0, [sp]
 801001e:	9801      	ldr	r0, [sp, #4]
 8010020:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8010024:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8010028:	0fc0      	lsrs	r0, r0, #31
 801002a:	b002      	add	sp, #8
 801002c:	4770      	bx	lr
	...

08010030 <__ieee754_sqrt>:
 8010030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010034:	4a68      	ldr	r2, [pc, #416]	@ (80101d8 <__ieee754_sqrt+0x1a8>)
 8010036:	ec55 4b10 	vmov	r4, r5, d0
 801003a:	43aa      	bics	r2, r5
 801003c:	462b      	mov	r3, r5
 801003e:	4621      	mov	r1, r4
 8010040:	d110      	bne.n	8010064 <__ieee754_sqrt+0x34>
 8010042:	4622      	mov	r2, r4
 8010044:	4620      	mov	r0, r4
 8010046:	4629      	mov	r1, r5
 8010048:	f7f0 fad6 	bl	80005f8 <__aeabi_dmul>
 801004c:	4602      	mov	r2, r0
 801004e:	460b      	mov	r3, r1
 8010050:	4620      	mov	r0, r4
 8010052:	4629      	mov	r1, r5
 8010054:	f7f0 f91a 	bl	800028c <__adddf3>
 8010058:	4604      	mov	r4, r0
 801005a:	460d      	mov	r5, r1
 801005c:	ec45 4b10 	vmov	d0, r4, r5
 8010060:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010064:	2d00      	cmp	r5, #0
 8010066:	dc0e      	bgt.n	8010086 <__ieee754_sqrt+0x56>
 8010068:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801006c:	4322      	orrs	r2, r4
 801006e:	d0f5      	beq.n	801005c <__ieee754_sqrt+0x2c>
 8010070:	b19d      	cbz	r5, 801009a <__ieee754_sqrt+0x6a>
 8010072:	4622      	mov	r2, r4
 8010074:	4620      	mov	r0, r4
 8010076:	4629      	mov	r1, r5
 8010078:	f7f0 f906 	bl	8000288 <__aeabi_dsub>
 801007c:	4602      	mov	r2, r0
 801007e:	460b      	mov	r3, r1
 8010080:	f7f0 fbe4 	bl	800084c <__aeabi_ddiv>
 8010084:	e7e8      	b.n	8010058 <__ieee754_sqrt+0x28>
 8010086:	152a      	asrs	r2, r5, #20
 8010088:	d115      	bne.n	80100b6 <__ieee754_sqrt+0x86>
 801008a:	2000      	movs	r0, #0
 801008c:	e009      	b.n	80100a2 <__ieee754_sqrt+0x72>
 801008e:	0acb      	lsrs	r3, r1, #11
 8010090:	3a15      	subs	r2, #21
 8010092:	0549      	lsls	r1, r1, #21
 8010094:	2b00      	cmp	r3, #0
 8010096:	d0fa      	beq.n	801008e <__ieee754_sqrt+0x5e>
 8010098:	e7f7      	b.n	801008a <__ieee754_sqrt+0x5a>
 801009a:	462a      	mov	r2, r5
 801009c:	e7fa      	b.n	8010094 <__ieee754_sqrt+0x64>
 801009e:	005b      	lsls	r3, r3, #1
 80100a0:	3001      	adds	r0, #1
 80100a2:	02dc      	lsls	r4, r3, #11
 80100a4:	d5fb      	bpl.n	801009e <__ieee754_sqrt+0x6e>
 80100a6:	1e44      	subs	r4, r0, #1
 80100a8:	1b12      	subs	r2, r2, r4
 80100aa:	f1c0 0420 	rsb	r4, r0, #32
 80100ae:	fa21 f404 	lsr.w	r4, r1, r4
 80100b2:	4323      	orrs	r3, r4
 80100b4:	4081      	lsls	r1, r0
 80100b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80100ba:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80100be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80100c2:	07d2      	lsls	r2, r2, #31
 80100c4:	bf5c      	itt	pl
 80100c6:	005b      	lslpl	r3, r3, #1
 80100c8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80100cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80100d0:	bf58      	it	pl
 80100d2:	0049      	lslpl	r1, r1, #1
 80100d4:	2600      	movs	r6, #0
 80100d6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80100da:	106d      	asrs	r5, r5, #1
 80100dc:	0049      	lsls	r1, r1, #1
 80100de:	2016      	movs	r0, #22
 80100e0:	4632      	mov	r2, r6
 80100e2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80100e6:	1917      	adds	r7, r2, r4
 80100e8:	429f      	cmp	r7, r3
 80100ea:	bfde      	ittt	le
 80100ec:	193a      	addle	r2, r7, r4
 80100ee:	1bdb      	suble	r3, r3, r7
 80100f0:	1936      	addle	r6, r6, r4
 80100f2:	0fcf      	lsrs	r7, r1, #31
 80100f4:	3801      	subs	r0, #1
 80100f6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80100fa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80100fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8010102:	d1f0      	bne.n	80100e6 <__ieee754_sqrt+0xb6>
 8010104:	4604      	mov	r4, r0
 8010106:	2720      	movs	r7, #32
 8010108:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801010c:	429a      	cmp	r2, r3
 801010e:	eb00 0e0c 	add.w	lr, r0, ip
 8010112:	db02      	blt.n	801011a <__ieee754_sqrt+0xea>
 8010114:	d113      	bne.n	801013e <__ieee754_sqrt+0x10e>
 8010116:	458e      	cmp	lr, r1
 8010118:	d811      	bhi.n	801013e <__ieee754_sqrt+0x10e>
 801011a:	f1be 0f00 	cmp.w	lr, #0
 801011e:	eb0e 000c 	add.w	r0, lr, ip
 8010122:	da42      	bge.n	80101aa <__ieee754_sqrt+0x17a>
 8010124:	2800      	cmp	r0, #0
 8010126:	db40      	blt.n	80101aa <__ieee754_sqrt+0x17a>
 8010128:	f102 0801 	add.w	r8, r2, #1
 801012c:	1a9b      	subs	r3, r3, r2
 801012e:	458e      	cmp	lr, r1
 8010130:	bf88      	it	hi
 8010132:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010136:	eba1 010e 	sub.w	r1, r1, lr
 801013a:	4464      	add	r4, ip
 801013c:	4642      	mov	r2, r8
 801013e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8010142:	3f01      	subs	r7, #1
 8010144:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8010148:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801014c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8010150:	d1dc      	bne.n	801010c <__ieee754_sqrt+0xdc>
 8010152:	4319      	orrs	r1, r3
 8010154:	d01b      	beq.n	801018e <__ieee754_sqrt+0x15e>
 8010156:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80101dc <__ieee754_sqrt+0x1ac>
 801015a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80101e0 <__ieee754_sqrt+0x1b0>
 801015e:	e9da 0100 	ldrd	r0, r1, [sl]
 8010162:	e9db 2300 	ldrd	r2, r3, [fp]
 8010166:	f7f0 f88f 	bl	8000288 <__aeabi_dsub>
 801016a:	e9da 8900 	ldrd	r8, r9, [sl]
 801016e:	4602      	mov	r2, r0
 8010170:	460b      	mov	r3, r1
 8010172:	4640      	mov	r0, r8
 8010174:	4649      	mov	r1, r9
 8010176:	f7f0 fcbb 	bl	8000af0 <__aeabi_dcmple>
 801017a:	b140      	cbz	r0, 801018e <__ieee754_sqrt+0x15e>
 801017c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010180:	e9da 0100 	ldrd	r0, r1, [sl]
 8010184:	e9db 2300 	ldrd	r2, r3, [fp]
 8010188:	d111      	bne.n	80101ae <__ieee754_sqrt+0x17e>
 801018a:	3601      	adds	r6, #1
 801018c:	463c      	mov	r4, r7
 801018e:	1072      	asrs	r2, r6, #1
 8010190:	0863      	lsrs	r3, r4, #1
 8010192:	07f1      	lsls	r1, r6, #31
 8010194:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8010198:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801019c:	bf48      	it	mi
 801019e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80101a2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80101a6:	4618      	mov	r0, r3
 80101a8:	e756      	b.n	8010058 <__ieee754_sqrt+0x28>
 80101aa:	4690      	mov	r8, r2
 80101ac:	e7be      	b.n	801012c <__ieee754_sqrt+0xfc>
 80101ae:	f7f0 f86d 	bl	800028c <__adddf3>
 80101b2:	e9da 8900 	ldrd	r8, r9, [sl]
 80101b6:	4602      	mov	r2, r0
 80101b8:	460b      	mov	r3, r1
 80101ba:	4640      	mov	r0, r8
 80101bc:	4649      	mov	r1, r9
 80101be:	f7f0 fc8d 	bl	8000adc <__aeabi_dcmplt>
 80101c2:	b120      	cbz	r0, 80101ce <__ieee754_sqrt+0x19e>
 80101c4:	1ca0      	adds	r0, r4, #2
 80101c6:	bf08      	it	eq
 80101c8:	3601      	addeq	r6, #1
 80101ca:	3402      	adds	r4, #2
 80101cc:	e7df      	b.n	801018e <__ieee754_sqrt+0x15e>
 80101ce:	1c63      	adds	r3, r4, #1
 80101d0:	f023 0401 	bic.w	r4, r3, #1
 80101d4:	e7db      	b.n	801018e <__ieee754_sqrt+0x15e>
 80101d6:	bf00      	nop
 80101d8:	7ff00000 	.word	0x7ff00000
 80101dc:	200001f8 	.word	0x200001f8
 80101e0:	200001f0 	.word	0x200001f0
 80101e4:	00000000 	.word	0x00000000

080101e8 <__ieee754_atan2>:
 80101e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80101ec:	ec57 6b11 	vmov	r6, r7, d1
 80101f0:	4273      	negs	r3, r6
 80101f2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8010370 <__ieee754_atan2+0x188>
 80101f6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 80101fa:	4333      	orrs	r3, r6
 80101fc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010200:	4543      	cmp	r3, r8
 8010202:	ec51 0b10 	vmov	r0, r1, d0
 8010206:	4635      	mov	r5, r6
 8010208:	d809      	bhi.n	801021e <__ieee754_atan2+0x36>
 801020a:	4244      	negs	r4, r0
 801020c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010210:	4304      	orrs	r4, r0
 8010212:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010216:	4544      	cmp	r4, r8
 8010218:	468e      	mov	lr, r1
 801021a:	4681      	mov	r9, r0
 801021c:	d907      	bls.n	801022e <__ieee754_atan2+0x46>
 801021e:	4632      	mov	r2, r6
 8010220:	463b      	mov	r3, r7
 8010222:	f7f0 f833 	bl	800028c <__adddf3>
 8010226:	ec41 0b10 	vmov	d0, r0, r1
 801022a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801022e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8010232:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8010236:	4334      	orrs	r4, r6
 8010238:	d103      	bne.n	8010242 <__ieee754_atan2+0x5a>
 801023a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801023e:	f000 bddf 	b.w	8010e00 <atan>
 8010242:	17bc      	asrs	r4, r7, #30
 8010244:	f004 0402 	and.w	r4, r4, #2
 8010248:	ea53 0909 	orrs.w	r9, r3, r9
 801024c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010250:	d107      	bne.n	8010262 <__ieee754_atan2+0x7a>
 8010252:	2c02      	cmp	r4, #2
 8010254:	d05f      	beq.n	8010316 <__ieee754_atan2+0x12e>
 8010256:	2c03      	cmp	r4, #3
 8010258:	d1e5      	bne.n	8010226 <__ieee754_atan2+0x3e>
 801025a:	a141      	add	r1, pc, #260	@ (adr r1, 8010360 <__ieee754_atan2+0x178>)
 801025c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010260:	e7e1      	b.n	8010226 <__ieee754_atan2+0x3e>
 8010262:	4315      	orrs	r5, r2
 8010264:	d106      	bne.n	8010274 <__ieee754_atan2+0x8c>
 8010266:	f1be 0f00 	cmp.w	lr, #0
 801026a:	da5f      	bge.n	801032c <__ieee754_atan2+0x144>
 801026c:	a13e      	add	r1, pc, #248	@ (adr r1, 8010368 <__ieee754_atan2+0x180>)
 801026e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010272:	e7d8      	b.n	8010226 <__ieee754_atan2+0x3e>
 8010274:	4542      	cmp	r2, r8
 8010276:	d10f      	bne.n	8010298 <__ieee754_atan2+0xb0>
 8010278:	4293      	cmp	r3, r2
 801027a:	f104 34ff 	add.w	r4, r4, #4294967295
 801027e:	d107      	bne.n	8010290 <__ieee754_atan2+0xa8>
 8010280:	2c02      	cmp	r4, #2
 8010282:	d84c      	bhi.n	801031e <__ieee754_atan2+0x136>
 8010284:	4b34      	ldr	r3, [pc, #208]	@ (8010358 <__ieee754_atan2+0x170>)
 8010286:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801028a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801028e:	e7ca      	b.n	8010226 <__ieee754_atan2+0x3e>
 8010290:	2c02      	cmp	r4, #2
 8010292:	d848      	bhi.n	8010326 <__ieee754_atan2+0x13e>
 8010294:	4b31      	ldr	r3, [pc, #196]	@ (801035c <__ieee754_atan2+0x174>)
 8010296:	e7f6      	b.n	8010286 <__ieee754_atan2+0x9e>
 8010298:	4543      	cmp	r3, r8
 801029a:	d0e4      	beq.n	8010266 <__ieee754_atan2+0x7e>
 801029c:	1a9b      	subs	r3, r3, r2
 801029e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80102a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80102a6:	da1e      	bge.n	80102e6 <__ieee754_atan2+0xfe>
 80102a8:	2f00      	cmp	r7, #0
 80102aa:	da01      	bge.n	80102b0 <__ieee754_atan2+0xc8>
 80102ac:	323c      	adds	r2, #60	@ 0x3c
 80102ae:	db1e      	blt.n	80102ee <__ieee754_atan2+0x106>
 80102b0:	4632      	mov	r2, r6
 80102b2:	463b      	mov	r3, r7
 80102b4:	f7f0 faca 	bl	800084c <__aeabi_ddiv>
 80102b8:	ec41 0b10 	vmov	d0, r0, r1
 80102bc:	f000 ff38 	bl	8011130 <fabs>
 80102c0:	f000 fd9e 	bl	8010e00 <atan>
 80102c4:	ec51 0b10 	vmov	r0, r1, d0
 80102c8:	2c01      	cmp	r4, #1
 80102ca:	d013      	beq.n	80102f4 <__ieee754_atan2+0x10c>
 80102cc:	2c02      	cmp	r4, #2
 80102ce:	d015      	beq.n	80102fc <__ieee754_atan2+0x114>
 80102d0:	2c00      	cmp	r4, #0
 80102d2:	d0a8      	beq.n	8010226 <__ieee754_atan2+0x3e>
 80102d4:	a318      	add	r3, pc, #96	@ (adr r3, 8010338 <__ieee754_atan2+0x150>)
 80102d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102da:	f7ef ffd5 	bl	8000288 <__aeabi_dsub>
 80102de:	a318      	add	r3, pc, #96	@ (adr r3, 8010340 <__ieee754_atan2+0x158>)
 80102e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e4:	e014      	b.n	8010310 <__ieee754_atan2+0x128>
 80102e6:	a118      	add	r1, pc, #96	@ (adr r1, 8010348 <__ieee754_atan2+0x160>)
 80102e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102ec:	e7ec      	b.n	80102c8 <__ieee754_atan2+0xe0>
 80102ee:	2000      	movs	r0, #0
 80102f0:	2100      	movs	r1, #0
 80102f2:	e7e9      	b.n	80102c8 <__ieee754_atan2+0xe0>
 80102f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80102f8:	4619      	mov	r1, r3
 80102fa:	e794      	b.n	8010226 <__ieee754_atan2+0x3e>
 80102fc:	a30e      	add	r3, pc, #56	@ (adr r3, 8010338 <__ieee754_atan2+0x150>)
 80102fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010302:	f7ef ffc1 	bl	8000288 <__aeabi_dsub>
 8010306:	4602      	mov	r2, r0
 8010308:	460b      	mov	r3, r1
 801030a:	a10d      	add	r1, pc, #52	@ (adr r1, 8010340 <__ieee754_atan2+0x158>)
 801030c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010310:	f7ef ffba 	bl	8000288 <__aeabi_dsub>
 8010314:	e787      	b.n	8010226 <__ieee754_atan2+0x3e>
 8010316:	a10a      	add	r1, pc, #40	@ (adr r1, 8010340 <__ieee754_atan2+0x158>)
 8010318:	e9d1 0100 	ldrd	r0, r1, [r1]
 801031c:	e783      	b.n	8010226 <__ieee754_atan2+0x3e>
 801031e:	a10c      	add	r1, pc, #48	@ (adr r1, 8010350 <__ieee754_atan2+0x168>)
 8010320:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010324:	e77f      	b.n	8010226 <__ieee754_atan2+0x3e>
 8010326:	2000      	movs	r0, #0
 8010328:	2100      	movs	r1, #0
 801032a:	e77c      	b.n	8010226 <__ieee754_atan2+0x3e>
 801032c:	a106      	add	r1, pc, #24	@ (adr r1, 8010348 <__ieee754_atan2+0x160>)
 801032e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010332:	e778      	b.n	8010226 <__ieee754_atan2+0x3e>
 8010334:	f3af 8000 	nop.w
 8010338:	33145c07 	.word	0x33145c07
 801033c:	3ca1a626 	.word	0x3ca1a626
 8010340:	54442d18 	.word	0x54442d18
 8010344:	400921fb 	.word	0x400921fb
 8010348:	54442d18 	.word	0x54442d18
 801034c:	3ff921fb 	.word	0x3ff921fb
 8010350:	54442d18 	.word	0x54442d18
 8010354:	3fe921fb 	.word	0x3fe921fb
 8010358:	08012390 	.word	0x08012390
 801035c:	08012378 	.word	0x08012378
 8010360:	54442d18 	.word	0x54442d18
 8010364:	c00921fb 	.word	0xc00921fb
 8010368:	54442d18 	.word	0x54442d18
 801036c:	bff921fb 	.word	0xbff921fb
 8010370:	7ff00000 	.word	0x7ff00000
 8010374:	00000000 	.word	0x00000000

08010378 <__ieee754_pow>:
 8010378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801037c:	b091      	sub	sp, #68	@ 0x44
 801037e:	ed8d 1b00 	vstr	d1, [sp]
 8010382:	e9dd 1900 	ldrd	r1, r9, [sp]
 8010386:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801038a:	ea5a 0001 	orrs.w	r0, sl, r1
 801038e:	ec57 6b10 	vmov	r6, r7, d0
 8010392:	d113      	bne.n	80103bc <__ieee754_pow+0x44>
 8010394:	19b3      	adds	r3, r6, r6
 8010396:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801039a:	4152      	adcs	r2, r2
 801039c:	4298      	cmp	r0, r3
 801039e:	4b98      	ldr	r3, [pc, #608]	@ (8010600 <__ieee754_pow+0x288>)
 80103a0:	4193      	sbcs	r3, r2
 80103a2:	f080 84ea 	bcs.w	8010d7a <__ieee754_pow+0xa02>
 80103a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80103aa:	4630      	mov	r0, r6
 80103ac:	4639      	mov	r1, r7
 80103ae:	f7ef ff6d 	bl	800028c <__adddf3>
 80103b2:	ec41 0b10 	vmov	d0, r0, r1
 80103b6:	b011      	add	sp, #68	@ 0x44
 80103b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103bc:	4a91      	ldr	r2, [pc, #580]	@ (8010604 <__ieee754_pow+0x28c>)
 80103be:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80103c2:	4590      	cmp	r8, r2
 80103c4:	463d      	mov	r5, r7
 80103c6:	4633      	mov	r3, r6
 80103c8:	d806      	bhi.n	80103d8 <__ieee754_pow+0x60>
 80103ca:	d101      	bne.n	80103d0 <__ieee754_pow+0x58>
 80103cc:	2e00      	cmp	r6, #0
 80103ce:	d1ea      	bne.n	80103a6 <__ieee754_pow+0x2e>
 80103d0:	4592      	cmp	sl, r2
 80103d2:	d801      	bhi.n	80103d8 <__ieee754_pow+0x60>
 80103d4:	d10e      	bne.n	80103f4 <__ieee754_pow+0x7c>
 80103d6:	b169      	cbz	r1, 80103f4 <__ieee754_pow+0x7c>
 80103d8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80103dc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80103e0:	431d      	orrs	r5, r3
 80103e2:	d1e0      	bne.n	80103a6 <__ieee754_pow+0x2e>
 80103e4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80103e8:	18db      	adds	r3, r3, r3
 80103ea:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80103ee:	4152      	adcs	r2, r2
 80103f0:	429d      	cmp	r5, r3
 80103f2:	e7d4      	b.n	801039e <__ieee754_pow+0x26>
 80103f4:	2d00      	cmp	r5, #0
 80103f6:	46c3      	mov	fp, r8
 80103f8:	da3a      	bge.n	8010470 <__ieee754_pow+0xf8>
 80103fa:	4a83      	ldr	r2, [pc, #524]	@ (8010608 <__ieee754_pow+0x290>)
 80103fc:	4592      	cmp	sl, r2
 80103fe:	d84d      	bhi.n	801049c <__ieee754_pow+0x124>
 8010400:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8010404:	4592      	cmp	sl, r2
 8010406:	f240 84c7 	bls.w	8010d98 <__ieee754_pow+0xa20>
 801040a:	ea4f 522a 	mov.w	r2, sl, asr #20
 801040e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8010412:	2a14      	cmp	r2, #20
 8010414:	dd0f      	ble.n	8010436 <__ieee754_pow+0xbe>
 8010416:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 801041a:	fa21 f402 	lsr.w	r4, r1, r2
 801041e:	fa04 f202 	lsl.w	r2, r4, r2
 8010422:	428a      	cmp	r2, r1
 8010424:	f040 84b8 	bne.w	8010d98 <__ieee754_pow+0xa20>
 8010428:	f004 0401 	and.w	r4, r4, #1
 801042c:	f1c4 0402 	rsb	r4, r4, #2
 8010430:	2900      	cmp	r1, #0
 8010432:	d158      	bne.n	80104e6 <__ieee754_pow+0x16e>
 8010434:	e00e      	b.n	8010454 <__ieee754_pow+0xdc>
 8010436:	2900      	cmp	r1, #0
 8010438:	d154      	bne.n	80104e4 <__ieee754_pow+0x16c>
 801043a:	f1c2 0214 	rsb	r2, r2, #20
 801043e:	fa4a f402 	asr.w	r4, sl, r2
 8010442:	fa04 f202 	lsl.w	r2, r4, r2
 8010446:	4552      	cmp	r2, sl
 8010448:	f040 84a3 	bne.w	8010d92 <__ieee754_pow+0xa1a>
 801044c:	f004 0401 	and.w	r4, r4, #1
 8010450:	f1c4 0402 	rsb	r4, r4, #2
 8010454:	4a6d      	ldr	r2, [pc, #436]	@ (801060c <__ieee754_pow+0x294>)
 8010456:	4592      	cmp	sl, r2
 8010458:	d12e      	bne.n	80104b8 <__ieee754_pow+0x140>
 801045a:	f1b9 0f00 	cmp.w	r9, #0
 801045e:	f280 8494 	bge.w	8010d8a <__ieee754_pow+0xa12>
 8010462:	496a      	ldr	r1, [pc, #424]	@ (801060c <__ieee754_pow+0x294>)
 8010464:	4632      	mov	r2, r6
 8010466:	463b      	mov	r3, r7
 8010468:	2000      	movs	r0, #0
 801046a:	f7f0 f9ef 	bl	800084c <__aeabi_ddiv>
 801046e:	e7a0      	b.n	80103b2 <__ieee754_pow+0x3a>
 8010470:	2400      	movs	r4, #0
 8010472:	bbc1      	cbnz	r1, 80104e6 <__ieee754_pow+0x16e>
 8010474:	4a63      	ldr	r2, [pc, #396]	@ (8010604 <__ieee754_pow+0x28c>)
 8010476:	4592      	cmp	sl, r2
 8010478:	d1ec      	bne.n	8010454 <__ieee754_pow+0xdc>
 801047a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 801047e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8010482:	431a      	orrs	r2, r3
 8010484:	f000 8479 	beq.w	8010d7a <__ieee754_pow+0xa02>
 8010488:	4b61      	ldr	r3, [pc, #388]	@ (8010610 <__ieee754_pow+0x298>)
 801048a:	4598      	cmp	r8, r3
 801048c:	d908      	bls.n	80104a0 <__ieee754_pow+0x128>
 801048e:	f1b9 0f00 	cmp.w	r9, #0
 8010492:	f2c0 8476 	blt.w	8010d82 <__ieee754_pow+0xa0a>
 8010496:	e9dd 0100 	ldrd	r0, r1, [sp]
 801049a:	e78a      	b.n	80103b2 <__ieee754_pow+0x3a>
 801049c:	2402      	movs	r4, #2
 801049e:	e7e8      	b.n	8010472 <__ieee754_pow+0xfa>
 80104a0:	f1b9 0f00 	cmp.w	r9, #0
 80104a4:	f04f 0000 	mov.w	r0, #0
 80104a8:	f04f 0100 	mov.w	r1, #0
 80104ac:	da81      	bge.n	80103b2 <__ieee754_pow+0x3a>
 80104ae:	e9dd 0300 	ldrd	r0, r3, [sp]
 80104b2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80104b6:	e77c      	b.n	80103b2 <__ieee754_pow+0x3a>
 80104b8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80104bc:	d106      	bne.n	80104cc <__ieee754_pow+0x154>
 80104be:	4632      	mov	r2, r6
 80104c0:	463b      	mov	r3, r7
 80104c2:	4630      	mov	r0, r6
 80104c4:	4639      	mov	r1, r7
 80104c6:	f7f0 f897 	bl	80005f8 <__aeabi_dmul>
 80104ca:	e772      	b.n	80103b2 <__ieee754_pow+0x3a>
 80104cc:	4a51      	ldr	r2, [pc, #324]	@ (8010614 <__ieee754_pow+0x29c>)
 80104ce:	4591      	cmp	r9, r2
 80104d0:	d109      	bne.n	80104e6 <__ieee754_pow+0x16e>
 80104d2:	2d00      	cmp	r5, #0
 80104d4:	db07      	blt.n	80104e6 <__ieee754_pow+0x16e>
 80104d6:	ec47 6b10 	vmov	d0, r6, r7
 80104da:	b011      	add	sp, #68	@ 0x44
 80104dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104e0:	f7ff bda6 	b.w	8010030 <__ieee754_sqrt>
 80104e4:	2400      	movs	r4, #0
 80104e6:	ec47 6b10 	vmov	d0, r6, r7
 80104ea:	9302      	str	r3, [sp, #8]
 80104ec:	f000 fe20 	bl	8011130 <fabs>
 80104f0:	9b02      	ldr	r3, [sp, #8]
 80104f2:	ec51 0b10 	vmov	r0, r1, d0
 80104f6:	bb53      	cbnz	r3, 801054e <__ieee754_pow+0x1d6>
 80104f8:	4b44      	ldr	r3, [pc, #272]	@ (801060c <__ieee754_pow+0x294>)
 80104fa:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80104fe:	429a      	cmp	r2, r3
 8010500:	d002      	beq.n	8010508 <__ieee754_pow+0x190>
 8010502:	f1b8 0f00 	cmp.w	r8, #0
 8010506:	d122      	bne.n	801054e <__ieee754_pow+0x1d6>
 8010508:	f1b9 0f00 	cmp.w	r9, #0
 801050c:	da05      	bge.n	801051a <__ieee754_pow+0x1a2>
 801050e:	4602      	mov	r2, r0
 8010510:	460b      	mov	r3, r1
 8010512:	2000      	movs	r0, #0
 8010514:	493d      	ldr	r1, [pc, #244]	@ (801060c <__ieee754_pow+0x294>)
 8010516:	f7f0 f999 	bl	800084c <__aeabi_ddiv>
 801051a:	2d00      	cmp	r5, #0
 801051c:	f6bf af49 	bge.w	80103b2 <__ieee754_pow+0x3a>
 8010520:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8010524:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8010528:	ea58 0804 	orrs.w	r8, r8, r4
 801052c:	d108      	bne.n	8010540 <__ieee754_pow+0x1c8>
 801052e:	4602      	mov	r2, r0
 8010530:	460b      	mov	r3, r1
 8010532:	4610      	mov	r0, r2
 8010534:	4619      	mov	r1, r3
 8010536:	f7ef fea7 	bl	8000288 <__aeabi_dsub>
 801053a:	4602      	mov	r2, r0
 801053c:	460b      	mov	r3, r1
 801053e:	e794      	b.n	801046a <__ieee754_pow+0xf2>
 8010540:	2c01      	cmp	r4, #1
 8010542:	f47f af36 	bne.w	80103b2 <__ieee754_pow+0x3a>
 8010546:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801054a:	4619      	mov	r1, r3
 801054c:	e731      	b.n	80103b2 <__ieee754_pow+0x3a>
 801054e:	0feb      	lsrs	r3, r5, #31
 8010550:	3b01      	subs	r3, #1
 8010552:	ea53 0204 	orrs.w	r2, r3, r4
 8010556:	d102      	bne.n	801055e <__ieee754_pow+0x1e6>
 8010558:	4632      	mov	r2, r6
 801055a:	463b      	mov	r3, r7
 801055c:	e7e9      	b.n	8010532 <__ieee754_pow+0x1ba>
 801055e:	3c01      	subs	r4, #1
 8010560:	431c      	orrs	r4, r3
 8010562:	d016      	beq.n	8010592 <__ieee754_pow+0x21a>
 8010564:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80105f0 <__ieee754_pow+0x278>
 8010568:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801056c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010570:	f240 8112 	bls.w	8010798 <__ieee754_pow+0x420>
 8010574:	4b28      	ldr	r3, [pc, #160]	@ (8010618 <__ieee754_pow+0x2a0>)
 8010576:	459a      	cmp	sl, r3
 8010578:	4b25      	ldr	r3, [pc, #148]	@ (8010610 <__ieee754_pow+0x298>)
 801057a:	d916      	bls.n	80105aa <__ieee754_pow+0x232>
 801057c:	4598      	cmp	r8, r3
 801057e:	d80b      	bhi.n	8010598 <__ieee754_pow+0x220>
 8010580:	f1b9 0f00 	cmp.w	r9, #0
 8010584:	da0b      	bge.n	801059e <__ieee754_pow+0x226>
 8010586:	2000      	movs	r0, #0
 8010588:	b011      	add	sp, #68	@ 0x44
 801058a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801058e:	f000 be8b 	b.w	80112a8 <__math_oflow>
 8010592:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80105f8 <__ieee754_pow+0x280>
 8010596:	e7e7      	b.n	8010568 <__ieee754_pow+0x1f0>
 8010598:	f1b9 0f00 	cmp.w	r9, #0
 801059c:	dcf3      	bgt.n	8010586 <__ieee754_pow+0x20e>
 801059e:	2000      	movs	r0, #0
 80105a0:	b011      	add	sp, #68	@ 0x44
 80105a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105a6:	f000 be77 	b.w	8011298 <__math_uflow>
 80105aa:	4598      	cmp	r8, r3
 80105ac:	d20c      	bcs.n	80105c8 <__ieee754_pow+0x250>
 80105ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105b2:	2200      	movs	r2, #0
 80105b4:	2300      	movs	r3, #0
 80105b6:	f7f0 fa91 	bl	8000adc <__aeabi_dcmplt>
 80105ba:	3800      	subs	r0, #0
 80105bc:	bf18      	it	ne
 80105be:	2001      	movne	r0, #1
 80105c0:	f1b9 0f00 	cmp.w	r9, #0
 80105c4:	daec      	bge.n	80105a0 <__ieee754_pow+0x228>
 80105c6:	e7df      	b.n	8010588 <__ieee754_pow+0x210>
 80105c8:	4b10      	ldr	r3, [pc, #64]	@ (801060c <__ieee754_pow+0x294>)
 80105ca:	4598      	cmp	r8, r3
 80105cc:	f04f 0200 	mov.w	r2, #0
 80105d0:	d924      	bls.n	801061c <__ieee754_pow+0x2a4>
 80105d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105d6:	2300      	movs	r3, #0
 80105d8:	f7f0 fa80 	bl	8000adc <__aeabi_dcmplt>
 80105dc:	3800      	subs	r0, #0
 80105de:	bf18      	it	ne
 80105e0:	2001      	movne	r0, #1
 80105e2:	f1b9 0f00 	cmp.w	r9, #0
 80105e6:	dccf      	bgt.n	8010588 <__ieee754_pow+0x210>
 80105e8:	e7da      	b.n	80105a0 <__ieee754_pow+0x228>
 80105ea:	bf00      	nop
 80105ec:	f3af 8000 	nop.w
 80105f0:	00000000 	.word	0x00000000
 80105f4:	3ff00000 	.word	0x3ff00000
 80105f8:	00000000 	.word	0x00000000
 80105fc:	bff00000 	.word	0xbff00000
 8010600:	fff00000 	.word	0xfff00000
 8010604:	7ff00000 	.word	0x7ff00000
 8010608:	433fffff 	.word	0x433fffff
 801060c:	3ff00000 	.word	0x3ff00000
 8010610:	3fefffff 	.word	0x3fefffff
 8010614:	3fe00000 	.word	0x3fe00000
 8010618:	43f00000 	.word	0x43f00000
 801061c:	4b5a      	ldr	r3, [pc, #360]	@ (8010788 <__ieee754_pow+0x410>)
 801061e:	f7ef fe33 	bl	8000288 <__aeabi_dsub>
 8010622:	a351      	add	r3, pc, #324	@ (adr r3, 8010768 <__ieee754_pow+0x3f0>)
 8010624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010628:	4604      	mov	r4, r0
 801062a:	460d      	mov	r5, r1
 801062c:	f7ef ffe4 	bl	80005f8 <__aeabi_dmul>
 8010630:	a34f      	add	r3, pc, #316	@ (adr r3, 8010770 <__ieee754_pow+0x3f8>)
 8010632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010636:	4606      	mov	r6, r0
 8010638:	460f      	mov	r7, r1
 801063a:	4620      	mov	r0, r4
 801063c:	4629      	mov	r1, r5
 801063e:	f7ef ffdb 	bl	80005f8 <__aeabi_dmul>
 8010642:	4b52      	ldr	r3, [pc, #328]	@ (801078c <__ieee754_pow+0x414>)
 8010644:	4682      	mov	sl, r0
 8010646:	468b      	mov	fp, r1
 8010648:	2200      	movs	r2, #0
 801064a:	4620      	mov	r0, r4
 801064c:	4629      	mov	r1, r5
 801064e:	f7ef ffd3 	bl	80005f8 <__aeabi_dmul>
 8010652:	4602      	mov	r2, r0
 8010654:	460b      	mov	r3, r1
 8010656:	a148      	add	r1, pc, #288	@ (adr r1, 8010778 <__ieee754_pow+0x400>)
 8010658:	e9d1 0100 	ldrd	r0, r1, [r1]
 801065c:	f7ef fe14 	bl	8000288 <__aeabi_dsub>
 8010660:	4622      	mov	r2, r4
 8010662:	462b      	mov	r3, r5
 8010664:	f7ef ffc8 	bl	80005f8 <__aeabi_dmul>
 8010668:	4602      	mov	r2, r0
 801066a:	460b      	mov	r3, r1
 801066c:	2000      	movs	r0, #0
 801066e:	4948      	ldr	r1, [pc, #288]	@ (8010790 <__ieee754_pow+0x418>)
 8010670:	f7ef fe0a 	bl	8000288 <__aeabi_dsub>
 8010674:	4622      	mov	r2, r4
 8010676:	4680      	mov	r8, r0
 8010678:	4689      	mov	r9, r1
 801067a:	462b      	mov	r3, r5
 801067c:	4620      	mov	r0, r4
 801067e:	4629      	mov	r1, r5
 8010680:	f7ef ffba 	bl	80005f8 <__aeabi_dmul>
 8010684:	4602      	mov	r2, r0
 8010686:	460b      	mov	r3, r1
 8010688:	4640      	mov	r0, r8
 801068a:	4649      	mov	r1, r9
 801068c:	f7ef ffb4 	bl	80005f8 <__aeabi_dmul>
 8010690:	a33b      	add	r3, pc, #236	@ (adr r3, 8010780 <__ieee754_pow+0x408>)
 8010692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010696:	f7ef ffaf 	bl	80005f8 <__aeabi_dmul>
 801069a:	4602      	mov	r2, r0
 801069c:	460b      	mov	r3, r1
 801069e:	4650      	mov	r0, sl
 80106a0:	4659      	mov	r1, fp
 80106a2:	f7ef fdf1 	bl	8000288 <__aeabi_dsub>
 80106a6:	4602      	mov	r2, r0
 80106a8:	460b      	mov	r3, r1
 80106aa:	4680      	mov	r8, r0
 80106ac:	4689      	mov	r9, r1
 80106ae:	4630      	mov	r0, r6
 80106b0:	4639      	mov	r1, r7
 80106b2:	f7ef fdeb 	bl	800028c <__adddf3>
 80106b6:	2400      	movs	r4, #0
 80106b8:	4632      	mov	r2, r6
 80106ba:	463b      	mov	r3, r7
 80106bc:	4620      	mov	r0, r4
 80106be:	460d      	mov	r5, r1
 80106c0:	f7ef fde2 	bl	8000288 <__aeabi_dsub>
 80106c4:	4602      	mov	r2, r0
 80106c6:	460b      	mov	r3, r1
 80106c8:	4640      	mov	r0, r8
 80106ca:	4649      	mov	r1, r9
 80106cc:	f7ef fddc 	bl	8000288 <__aeabi_dsub>
 80106d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80106d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80106d8:	2300      	movs	r3, #0
 80106da:	9304      	str	r3, [sp, #16]
 80106dc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80106e0:	4606      	mov	r6, r0
 80106e2:	460f      	mov	r7, r1
 80106e4:	4652      	mov	r2, sl
 80106e6:	465b      	mov	r3, fp
 80106e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106ec:	f7ef fdcc 	bl	8000288 <__aeabi_dsub>
 80106f0:	4622      	mov	r2, r4
 80106f2:	462b      	mov	r3, r5
 80106f4:	f7ef ff80 	bl	80005f8 <__aeabi_dmul>
 80106f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80106fc:	4680      	mov	r8, r0
 80106fe:	4689      	mov	r9, r1
 8010700:	4630      	mov	r0, r6
 8010702:	4639      	mov	r1, r7
 8010704:	f7ef ff78 	bl	80005f8 <__aeabi_dmul>
 8010708:	4602      	mov	r2, r0
 801070a:	460b      	mov	r3, r1
 801070c:	4640      	mov	r0, r8
 801070e:	4649      	mov	r1, r9
 8010710:	f7ef fdbc 	bl	800028c <__adddf3>
 8010714:	4652      	mov	r2, sl
 8010716:	465b      	mov	r3, fp
 8010718:	4606      	mov	r6, r0
 801071a:	460f      	mov	r7, r1
 801071c:	4620      	mov	r0, r4
 801071e:	4629      	mov	r1, r5
 8010720:	f7ef ff6a 	bl	80005f8 <__aeabi_dmul>
 8010724:	460b      	mov	r3, r1
 8010726:	4602      	mov	r2, r0
 8010728:	4680      	mov	r8, r0
 801072a:	4689      	mov	r9, r1
 801072c:	4630      	mov	r0, r6
 801072e:	4639      	mov	r1, r7
 8010730:	f7ef fdac 	bl	800028c <__adddf3>
 8010734:	4b17      	ldr	r3, [pc, #92]	@ (8010794 <__ieee754_pow+0x41c>)
 8010736:	4299      	cmp	r1, r3
 8010738:	4604      	mov	r4, r0
 801073a:	460d      	mov	r5, r1
 801073c:	468a      	mov	sl, r1
 801073e:	468b      	mov	fp, r1
 8010740:	f340 82ef 	ble.w	8010d22 <__ieee754_pow+0x9aa>
 8010744:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8010748:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801074c:	4303      	orrs	r3, r0
 801074e:	f000 81e8 	beq.w	8010b22 <__ieee754_pow+0x7aa>
 8010752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010756:	2200      	movs	r2, #0
 8010758:	2300      	movs	r3, #0
 801075a:	f7f0 f9bf 	bl	8000adc <__aeabi_dcmplt>
 801075e:	3800      	subs	r0, #0
 8010760:	bf18      	it	ne
 8010762:	2001      	movne	r0, #1
 8010764:	e710      	b.n	8010588 <__ieee754_pow+0x210>
 8010766:	bf00      	nop
 8010768:	60000000 	.word	0x60000000
 801076c:	3ff71547 	.word	0x3ff71547
 8010770:	f85ddf44 	.word	0xf85ddf44
 8010774:	3e54ae0b 	.word	0x3e54ae0b
 8010778:	55555555 	.word	0x55555555
 801077c:	3fd55555 	.word	0x3fd55555
 8010780:	652b82fe 	.word	0x652b82fe
 8010784:	3ff71547 	.word	0x3ff71547
 8010788:	3ff00000 	.word	0x3ff00000
 801078c:	3fd00000 	.word	0x3fd00000
 8010790:	3fe00000 	.word	0x3fe00000
 8010794:	408fffff 	.word	0x408fffff
 8010798:	4bd5      	ldr	r3, [pc, #852]	@ (8010af0 <__ieee754_pow+0x778>)
 801079a:	402b      	ands	r3, r5
 801079c:	2200      	movs	r2, #0
 801079e:	b92b      	cbnz	r3, 80107ac <__ieee754_pow+0x434>
 80107a0:	4bd4      	ldr	r3, [pc, #848]	@ (8010af4 <__ieee754_pow+0x77c>)
 80107a2:	f7ef ff29 	bl	80005f8 <__aeabi_dmul>
 80107a6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80107aa:	468b      	mov	fp, r1
 80107ac:	ea4f 532b 	mov.w	r3, fp, asr #20
 80107b0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80107b4:	4413      	add	r3, r2
 80107b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80107b8:	4bcf      	ldr	r3, [pc, #828]	@ (8010af8 <__ieee754_pow+0x780>)
 80107ba:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80107be:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80107c2:	459b      	cmp	fp, r3
 80107c4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80107c8:	dd08      	ble.n	80107dc <__ieee754_pow+0x464>
 80107ca:	4bcc      	ldr	r3, [pc, #816]	@ (8010afc <__ieee754_pow+0x784>)
 80107cc:	459b      	cmp	fp, r3
 80107ce:	f340 81a5 	ble.w	8010b1c <__ieee754_pow+0x7a4>
 80107d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107d4:	3301      	adds	r3, #1
 80107d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80107d8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80107dc:	f04f 0a00 	mov.w	sl, #0
 80107e0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80107e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80107e6:	4bc6      	ldr	r3, [pc, #792]	@ (8010b00 <__ieee754_pow+0x788>)
 80107e8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80107ec:	ed93 7b00 	vldr	d7, [r3]
 80107f0:	4629      	mov	r1, r5
 80107f2:	ec53 2b17 	vmov	r2, r3, d7
 80107f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80107fa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80107fe:	f7ef fd43 	bl	8000288 <__aeabi_dsub>
 8010802:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010806:	4606      	mov	r6, r0
 8010808:	460f      	mov	r7, r1
 801080a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801080e:	f7ef fd3d 	bl	800028c <__adddf3>
 8010812:	4602      	mov	r2, r0
 8010814:	460b      	mov	r3, r1
 8010816:	2000      	movs	r0, #0
 8010818:	49ba      	ldr	r1, [pc, #744]	@ (8010b04 <__ieee754_pow+0x78c>)
 801081a:	f7f0 f817 	bl	800084c <__aeabi_ddiv>
 801081e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8010822:	4602      	mov	r2, r0
 8010824:	460b      	mov	r3, r1
 8010826:	4630      	mov	r0, r6
 8010828:	4639      	mov	r1, r7
 801082a:	f7ef fee5 	bl	80005f8 <__aeabi_dmul>
 801082e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010832:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8010836:	106d      	asrs	r5, r5, #1
 8010838:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801083c:	f04f 0b00 	mov.w	fp, #0
 8010840:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8010844:	4661      	mov	r1, ip
 8010846:	2200      	movs	r2, #0
 8010848:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801084c:	4658      	mov	r0, fp
 801084e:	46e1      	mov	r9, ip
 8010850:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8010854:	4614      	mov	r4, r2
 8010856:	461d      	mov	r5, r3
 8010858:	f7ef fece 	bl	80005f8 <__aeabi_dmul>
 801085c:	4602      	mov	r2, r0
 801085e:	460b      	mov	r3, r1
 8010860:	4630      	mov	r0, r6
 8010862:	4639      	mov	r1, r7
 8010864:	f7ef fd10 	bl	8000288 <__aeabi_dsub>
 8010868:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801086c:	4606      	mov	r6, r0
 801086e:	460f      	mov	r7, r1
 8010870:	4620      	mov	r0, r4
 8010872:	4629      	mov	r1, r5
 8010874:	f7ef fd08 	bl	8000288 <__aeabi_dsub>
 8010878:	4602      	mov	r2, r0
 801087a:	460b      	mov	r3, r1
 801087c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010880:	f7ef fd02 	bl	8000288 <__aeabi_dsub>
 8010884:	465a      	mov	r2, fp
 8010886:	464b      	mov	r3, r9
 8010888:	f7ef feb6 	bl	80005f8 <__aeabi_dmul>
 801088c:	4602      	mov	r2, r0
 801088e:	460b      	mov	r3, r1
 8010890:	4630      	mov	r0, r6
 8010892:	4639      	mov	r1, r7
 8010894:	f7ef fcf8 	bl	8000288 <__aeabi_dsub>
 8010898:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801089c:	f7ef feac 	bl	80005f8 <__aeabi_dmul>
 80108a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80108a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80108a8:	4610      	mov	r0, r2
 80108aa:	4619      	mov	r1, r3
 80108ac:	f7ef fea4 	bl	80005f8 <__aeabi_dmul>
 80108b0:	a37d      	add	r3, pc, #500	@ (adr r3, 8010aa8 <__ieee754_pow+0x730>)
 80108b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b6:	4604      	mov	r4, r0
 80108b8:	460d      	mov	r5, r1
 80108ba:	f7ef fe9d 	bl	80005f8 <__aeabi_dmul>
 80108be:	a37c      	add	r3, pc, #496	@ (adr r3, 8010ab0 <__ieee754_pow+0x738>)
 80108c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c4:	f7ef fce2 	bl	800028c <__adddf3>
 80108c8:	4622      	mov	r2, r4
 80108ca:	462b      	mov	r3, r5
 80108cc:	f7ef fe94 	bl	80005f8 <__aeabi_dmul>
 80108d0:	a379      	add	r3, pc, #484	@ (adr r3, 8010ab8 <__ieee754_pow+0x740>)
 80108d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d6:	f7ef fcd9 	bl	800028c <__adddf3>
 80108da:	4622      	mov	r2, r4
 80108dc:	462b      	mov	r3, r5
 80108de:	f7ef fe8b 	bl	80005f8 <__aeabi_dmul>
 80108e2:	a377      	add	r3, pc, #476	@ (adr r3, 8010ac0 <__ieee754_pow+0x748>)
 80108e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108e8:	f7ef fcd0 	bl	800028c <__adddf3>
 80108ec:	4622      	mov	r2, r4
 80108ee:	462b      	mov	r3, r5
 80108f0:	f7ef fe82 	bl	80005f8 <__aeabi_dmul>
 80108f4:	a374      	add	r3, pc, #464	@ (adr r3, 8010ac8 <__ieee754_pow+0x750>)
 80108f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108fa:	f7ef fcc7 	bl	800028c <__adddf3>
 80108fe:	4622      	mov	r2, r4
 8010900:	462b      	mov	r3, r5
 8010902:	f7ef fe79 	bl	80005f8 <__aeabi_dmul>
 8010906:	a372      	add	r3, pc, #456	@ (adr r3, 8010ad0 <__ieee754_pow+0x758>)
 8010908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090c:	f7ef fcbe 	bl	800028c <__adddf3>
 8010910:	4622      	mov	r2, r4
 8010912:	4606      	mov	r6, r0
 8010914:	460f      	mov	r7, r1
 8010916:	462b      	mov	r3, r5
 8010918:	4620      	mov	r0, r4
 801091a:	4629      	mov	r1, r5
 801091c:	f7ef fe6c 	bl	80005f8 <__aeabi_dmul>
 8010920:	4602      	mov	r2, r0
 8010922:	460b      	mov	r3, r1
 8010924:	4630      	mov	r0, r6
 8010926:	4639      	mov	r1, r7
 8010928:	f7ef fe66 	bl	80005f8 <__aeabi_dmul>
 801092c:	465a      	mov	r2, fp
 801092e:	4604      	mov	r4, r0
 8010930:	460d      	mov	r5, r1
 8010932:	464b      	mov	r3, r9
 8010934:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010938:	f7ef fca8 	bl	800028c <__adddf3>
 801093c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010940:	f7ef fe5a 	bl	80005f8 <__aeabi_dmul>
 8010944:	4622      	mov	r2, r4
 8010946:	462b      	mov	r3, r5
 8010948:	f7ef fca0 	bl	800028c <__adddf3>
 801094c:	465a      	mov	r2, fp
 801094e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010952:	464b      	mov	r3, r9
 8010954:	4658      	mov	r0, fp
 8010956:	4649      	mov	r1, r9
 8010958:	f7ef fe4e 	bl	80005f8 <__aeabi_dmul>
 801095c:	4b6a      	ldr	r3, [pc, #424]	@ (8010b08 <__ieee754_pow+0x790>)
 801095e:	2200      	movs	r2, #0
 8010960:	4606      	mov	r6, r0
 8010962:	460f      	mov	r7, r1
 8010964:	f7ef fc92 	bl	800028c <__adddf3>
 8010968:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801096c:	f7ef fc8e 	bl	800028c <__adddf3>
 8010970:	46d8      	mov	r8, fp
 8010972:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8010976:	460d      	mov	r5, r1
 8010978:	465a      	mov	r2, fp
 801097a:	460b      	mov	r3, r1
 801097c:	4640      	mov	r0, r8
 801097e:	4649      	mov	r1, r9
 8010980:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8010984:	f7ef fe38 	bl	80005f8 <__aeabi_dmul>
 8010988:	465c      	mov	r4, fp
 801098a:	4680      	mov	r8, r0
 801098c:	4689      	mov	r9, r1
 801098e:	4b5e      	ldr	r3, [pc, #376]	@ (8010b08 <__ieee754_pow+0x790>)
 8010990:	2200      	movs	r2, #0
 8010992:	4620      	mov	r0, r4
 8010994:	4629      	mov	r1, r5
 8010996:	f7ef fc77 	bl	8000288 <__aeabi_dsub>
 801099a:	4632      	mov	r2, r6
 801099c:	463b      	mov	r3, r7
 801099e:	f7ef fc73 	bl	8000288 <__aeabi_dsub>
 80109a2:	4602      	mov	r2, r0
 80109a4:	460b      	mov	r3, r1
 80109a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80109aa:	f7ef fc6d 	bl	8000288 <__aeabi_dsub>
 80109ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80109b2:	f7ef fe21 	bl	80005f8 <__aeabi_dmul>
 80109b6:	4622      	mov	r2, r4
 80109b8:	4606      	mov	r6, r0
 80109ba:	460f      	mov	r7, r1
 80109bc:	462b      	mov	r3, r5
 80109be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80109c2:	f7ef fe19 	bl	80005f8 <__aeabi_dmul>
 80109c6:	4602      	mov	r2, r0
 80109c8:	460b      	mov	r3, r1
 80109ca:	4630      	mov	r0, r6
 80109cc:	4639      	mov	r1, r7
 80109ce:	f7ef fc5d 	bl	800028c <__adddf3>
 80109d2:	4606      	mov	r6, r0
 80109d4:	460f      	mov	r7, r1
 80109d6:	4602      	mov	r2, r0
 80109d8:	460b      	mov	r3, r1
 80109da:	4640      	mov	r0, r8
 80109dc:	4649      	mov	r1, r9
 80109de:	f7ef fc55 	bl	800028c <__adddf3>
 80109e2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80109e6:	a33c      	add	r3, pc, #240	@ (adr r3, 8010ad8 <__ieee754_pow+0x760>)
 80109e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ec:	4658      	mov	r0, fp
 80109ee:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80109f2:	460d      	mov	r5, r1
 80109f4:	f7ef fe00 	bl	80005f8 <__aeabi_dmul>
 80109f8:	465c      	mov	r4, fp
 80109fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80109fe:	4642      	mov	r2, r8
 8010a00:	464b      	mov	r3, r9
 8010a02:	4620      	mov	r0, r4
 8010a04:	4629      	mov	r1, r5
 8010a06:	f7ef fc3f 	bl	8000288 <__aeabi_dsub>
 8010a0a:	4602      	mov	r2, r0
 8010a0c:	460b      	mov	r3, r1
 8010a0e:	4630      	mov	r0, r6
 8010a10:	4639      	mov	r1, r7
 8010a12:	f7ef fc39 	bl	8000288 <__aeabi_dsub>
 8010a16:	a332      	add	r3, pc, #200	@ (adr r3, 8010ae0 <__ieee754_pow+0x768>)
 8010a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a1c:	f7ef fdec 	bl	80005f8 <__aeabi_dmul>
 8010a20:	a331      	add	r3, pc, #196	@ (adr r3, 8010ae8 <__ieee754_pow+0x770>)
 8010a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a26:	4606      	mov	r6, r0
 8010a28:	460f      	mov	r7, r1
 8010a2a:	4620      	mov	r0, r4
 8010a2c:	4629      	mov	r1, r5
 8010a2e:	f7ef fde3 	bl	80005f8 <__aeabi_dmul>
 8010a32:	4602      	mov	r2, r0
 8010a34:	460b      	mov	r3, r1
 8010a36:	4630      	mov	r0, r6
 8010a38:	4639      	mov	r1, r7
 8010a3a:	f7ef fc27 	bl	800028c <__adddf3>
 8010a3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010a40:	4b32      	ldr	r3, [pc, #200]	@ (8010b0c <__ieee754_pow+0x794>)
 8010a42:	4413      	add	r3, r2
 8010a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a48:	f7ef fc20 	bl	800028c <__adddf3>
 8010a4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010a50:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010a52:	f7ef fd67 	bl	8000524 <__aeabi_i2d>
 8010a56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010a58:	4b2d      	ldr	r3, [pc, #180]	@ (8010b10 <__ieee754_pow+0x798>)
 8010a5a:	4413      	add	r3, r2
 8010a5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010a60:	4606      	mov	r6, r0
 8010a62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010a66:	460f      	mov	r7, r1
 8010a68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a6c:	f7ef fc0e 	bl	800028c <__adddf3>
 8010a70:	4642      	mov	r2, r8
 8010a72:	464b      	mov	r3, r9
 8010a74:	f7ef fc0a 	bl	800028c <__adddf3>
 8010a78:	4632      	mov	r2, r6
 8010a7a:	463b      	mov	r3, r7
 8010a7c:	f7ef fc06 	bl	800028c <__adddf3>
 8010a80:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8010a84:	4632      	mov	r2, r6
 8010a86:	463b      	mov	r3, r7
 8010a88:	4658      	mov	r0, fp
 8010a8a:	460d      	mov	r5, r1
 8010a8c:	f7ef fbfc 	bl	8000288 <__aeabi_dsub>
 8010a90:	4642      	mov	r2, r8
 8010a92:	464b      	mov	r3, r9
 8010a94:	f7ef fbf8 	bl	8000288 <__aeabi_dsub>
 8010a98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a9c:	f7ef fbf4 	bl	8000288 <__aeabi_dsub>
 8010aa0:	465c      	mov	r4, fp
 8010aa2:	4602      	mov	r2, r0
 8010aa4:	e036      	b.n	8010b14 <__ieee754_pow+0x79c>
 8010aa6:	bf00      	nop
 8010aa8:	4a454eef 	.word	0x4a454eef
 8010aac:	3fca7e28 	.word	0x3fca7e28
 8010ab0:	93c9db65 	.word	0x93c9db65
 8010ab4:	3fcd864a 	.word	0x3fcd864a
 8010ab8:	a91d4101 	.word	0xa91d4101
 8010abc:	3fd17460 	.word	0x3fd17460
 8010ac0:	518f264d 	.word	0x518f264d
 8010ac4:	3fd55555 	.word	0x3fd55555
 8010ac8:	db6fabff 	.word	0xdb6fabff
 8010acc:	3fdb6db6 	.word	0x3fdb6db6
 8010ad0:	33333303 	.word	0x33333303
 8010ad4:	3fe33333 	.word	0x3fe33333
 8010ad8:	e0000000 	.word	0xe0000000
 8010adc:	3feec709 	.word	0x3feec709
 8010ae0:	dc3a03fd 	.word	0xdc3a03fd
 8010ae4:	3feec709 	.word	0x3feec709
 8010ae8:	145b01f5 	.word	0x145b01f5
 8010aec:	be3e2fe0 	.word	0xbe3e2fe0
 8010af0:	7ff00000 	.word	0x7ff00000
 8010af4:	43400000 	.word	0x43400000
 8010af8:	0003988e 	.word	0x0003988e
 8010afc:	000bb679 	.word	0x000bb679
 8010b00:	080123c8 	.word	0x080123c8
 8010b04:	3ff00000 	.word	0x3ff00000
 8010b08:	40080000 	.word	0x40080000
 8010b0c:	080123a8 	.word	0x080123a8
 8010b10:	080123b8 	.word	0x080123b8
 8010b14:	460b      	mov	r3, r1
 8010b16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010b1a:	e5d7      	b.n	80106cc <__ieee754_pow+0x354>
 8010b1c:	f04f 0a01 	mov.w	sl, #1
 8010b20:	e65e      	b.n	80107e0 <__ieee754_pow+0x468>
 8010b22:	a3b4      	add	r3, pc, #720	@ (adr r3, 8010df4 <__ieee754_pow+0xa7c>)
 8010b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b28:	4630      	mov	r0, r6
 8010b2a:	4639      	mov	r1, r7
 8010b2c:	f7ef fbae 	bl	800028c <__adddf3>
 8010b30:	4642      	mov	r2, r8
 8010b32:	e9cd 0100 	strd	r0, r1, [sp]
 8010b36:	464b      	mov	r3, r9
 8010b38:	4620      	mov	r0, r4
 8010b3a:	4629      	mov	r1, r5
 8010b3c:	f7ef fba4 	bl	8000288 <__aeabi_dsub>
 8010b40:	4602      	mov	r2, r0
 8010b42:	460b      	mov	r3, r1
 8010b44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b48:	f7ef ffe6 	bl	8000b18 <__aeabi_dcmpgt>
 8010b4c:	2800      	cmp	r0, #0
 8010b4e:	f47f ae00 	bne.w	8010752 <__ieee754_pow+0x3da>
 8010b52:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8010b56:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010b5a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8010b5e:	fa43 fa0a 	asr.w	sl, r3, sl
 8010b62:	44da      	add	sl, fp
 8010b64:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8010b68:	489d      	ldr	r0, [pc, #628]	@ (8010de0 <__ieee754_pow+0xa68>)
 8010b6a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8010b6e:	4108      	asrs	r0, r1
 8010b70:	ea00 030a 	and.w	r3, r0, sl
 8010b74:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8010b78:	f1c1 0114 	rsb	r1, r1, #20
 8010b7c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8010b80:	fa4a fa01 	asr.w	sl, sl, r1
 8010b84:	f1bb 0f00 	cmp.w	fp, #0
 8010b88:	4640      	mov	r0, r8
 8010b8a:	4649      	mov	r1, r9
 8010b8c:	f04f 0200 	mov.w	r2, #0
 8010b90:	bfb8      	it	lt
 8010b92:	f1ca 0a00 	rsblt	sl, sl, #0
 8010b96:	f7ef fb77 	bl	8000288 <__aeabi_dsub>
 8010b9a:	4680      	mov	r8, r0
 8010b9c:	4689      	mov	r9, r1
 8010b9e:	4632      	mov	r2, r6
 8010ba0:	463b      	mov	r3, r7
 8010ba2:	4640      	mov	r0, r8
 8010ba4:	4649      	mov	r1, r9
 8010ba6:	f7ef fb71 	bl	800028c <__adddf3>
 8010baa:	2400      	movs	r4, #0
 8010bac:	a37c      	add	r3, pc, #496	@ (adr r3, 8010da0 <__ieee754_pow+0xa28>)
 8010bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb2:	4620      	mov	r0, r4
 8010bb4:	460d      	mov	r5, r1
 8010bb6:	f7ef fd1f 	bl	80005f8 <__aeabi_dmul>
 8010bba:	4642      	mov	r2, r8
 8010bbc:	e9cd 0100 	strd	r0, r1, [sp]
 8010bc0:	464b      	mov	r3, r9
 8010bc2:	4620      	mov	r0, r4
 8010bc4:	4629      	mov	r1, r5
 8010bc6:	f7ef fb5f 	bl	8000288 <__aeabi_dsub>
 8010bca:	4602      	mov	r2, r0
 8010bcc:	460b      	mov	r3, r1
 8010bce:	4630      	mov	r0, r6
 8010bd0:	4639      	mov	r1, r7
 8010bd2:	f7ef fb59 	bl	8000288 <__aeabi_dsub>
 8010bd6:	a374      	add	r3, pc, #464	@ (adr r3, 8010da8 <__ieee754_pow+0xa30>)
 8010bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bdc:	f7ef fd0c 	bl	80005f8 <__aeabi_dmul>
 8010be0:	a373      	add	r3, pc, #460	@ (adr r3, 8010db0 <__ieee754_pow+0xa38>)
 8010be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be6:	4680      	mov	r8, r0
 8010be8:	4689      	mov	r9, r1
 8010bea:	4620      	mov	r0, r4
 8010bec:	4629      	mov	r1, r5
 8010bee:	f7ef fd03 	bl	80005f8 <__aeabi_dmul>
 8010bf2:	4602      	mov	r2, r0
 8010bf4:	460b      	mov	r3, r1
 8010bf6:	4640      	mov	r0, r8
 8010bf8:	4649      	mov	r1, r9
 8010bfa:	f7ef fb47 	bl	800028c <__adddf3>
 8010bfe:	4604      	mov	r4, r0
 8010c00:	460d      	mov	r5, r1
 8010c02:	4602      	mov	r2, r0
 8010c04:	460b      	mov	r3, r1
 8010c06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010c0a:	f7ef fb3f 	bl	800028c <__adddf3>
 8010c0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c12:	4680      	mov	r8, r0
 8010c14:	4689      	mov	r9, r1
 8010c16:	f7ef fb37 	bl	8000288 <__aeabi_dsub>
 8010c1a:	4602      	mov	r2, r0
 8010c1c:	460b      	mov	r3, r1
 8010c1e:	4620      	mov	r0, r4
 8010c20:	4629      	mov	r1, r5
 8010c22:	f7ef fb31 	bl	8000288 <__aeabi_dsub>
 8010c26:	4642      	mov	r2, r8
 8010c28:	4606      	mov	r6, r0
 8010c2a:	460f      	mov	r7, r1
 8010c2c:	464b      	mov	r3, r9
 8010c2e:	4640      	mov	r0, r8
 8010c30:	4649      	mov	r1, r9
 8010c32:	f7ef fce1 	bl	80005f8 <__aeabi_dmul>
 8010c36:	a360      	add	r3, pc, #384	@ (adr r3, 8010db8 <__ieee754_pow+0xa40>)
 8010c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c3c:	4604      	mov	r4, r0
 8010c3e:	460d      	mov	r5, r1
 8010c40:	f7ef fcda 	bl	80005f8 <__aeabi_dmul>
 8010c44:	a35e      	add	r3, pc, #376	@ (adr r3, 8010dc0 <__ieee754_pow+0xa48>)
 8010c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4a:	f7ef fb1d 	bl	8000288 <__aeabi_dsub>
 8010c4e:	4622      	mov	r2, r4
 8010c50:	462b      	mov	r3, r5
 8010c52:	f7ef fcd1 	bl	80005f8 <__aeabi_dmul>
 8010c56:	a35c      	add	r3, pc, #368	@ (adr r3, 8010dc8 <__ieee754_pow+0xa50>)
 8010c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c5c:	f7ef fb16 	bl	800028c <__adddf3>
 8010c60:	4622      	mov	r2, r4
 8010c62:	462b      	mov	r3, r5
 8010c64:	f7ef fcc8 	bl	80005f8 <__aeabi_dmul>
 8010c68:	a359      	add	r3, pc, #356	@ (adr r3, 8010dd0 <__ieee754_pow+0xa58>)
 8010c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c6e:	f7ef fb0b 	bl	8000288 <__aeabi_dsub>
 8010c72:	4622      	mov	r2, r4
 8010c74:	462b      	mov	r3, r5
 8010c76:	f7ef fcbf 	bl	80005f8 <__aeabi_dmul>
 8010c7a:	a357      	add	r3, pc, #348	@ (adr r3, 8010dd8 <__ieee754_pow+0xa60>)
 8010c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c80:	f7ef fb04 	bl	800028c <__adddf3>
 8010c84:	4622      	mov	r2, r4
 8010c86:	462b      	mov	r3, r5
 8010c88:	f7ef fcb6 	bl	80005f8 <__aeabi_dmul>
 8010c8c:	4602      	mov	r2, r0
 8010c8e:	460b      	mov	r3, r1
 8010c90:	4640      	mov	r0, r8
 8010c92:	4649      	mov	r1, r9
 8010c94:	f7ef faf8 	bl	8000288 <__aeabi_dsub>
 8010c98:	4604      	mov	r4, r0
 8010c9a:	460d      	mov	r5, r1
 8010c9c:	4602      	mov	r2, r0
 8010c9e:	460b      	mov	r3, r1
 8010ca0:	4640      	mov	r0, r8
 8010ca2:	4649      	mov	r1, r9
 8010ca4:	f7ef fca8 	bl	80005f8 <__aeabi_dmul>
 8010ca8:	2200      	movs	r2, #0
 8010caa:	e9cd 0100 	strd	r0, r1, [sp]
 8010cae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010cb2:	4620      	mov	r0, r4
 8010cb4:	4629      	mov	r1, r5
 8010cb6:	f7ef fae7 	bl	8000288 <__aeabi_dsub>
 8010cba:	4602      	mov	r2, r0
 8010cbc:	460b      	mov	r3, r1
 8010cbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010cc2:	f7ef fdc3 	bl	800084c <__aeabi_ddiv>
 8010cc6:	4632      	mov	r2, r6
 8010cc8:	4604      	mov	r4, r0
 8010cca:	460d      	mov	r5, r1
 8010ccc:	463b      	mov	r3, r7
 8010cce:	4640      	mov	r0, r8
 8010cd0:	4649      	mov	r1, r9
 8010cd2:	f7ef fc91 	bl	80005f8 <__aeabi_dmul>
 8010cd6:	4632      	mov	r2, r6
 8010cd8:	463b      	mov	r3, r7
 8010cda:	f7ef fad7 	bl	800028c <__adddf3>
 8010cde:	4602      	mov	r2, r0
 8010ce0:	460b      	mov	r3, r1
 8010ce2:	4620      	mov	r0, r4
 8010ce4:	4629      	mov	r1, r5
 8010ce6:	f7ef facf 	bl	8000288 <__aeabi_dsub>
 8010cea:	4642      	mov	r2, r8
 8010cec:	464b      	mov	r3, r9
 8010cee:	f7ef facb 	bl	8000288 <__aeabi_dsub>
 8010cf2:	460b      	mov	r3, r1
 8010cf4:	4602      	mov	r2, r0
 8010cf6:	493b      	ldr	r1, [pc, #236]	@ (8010de4 <__ieee754_pow+0xa6c>)
 8010cf8:	2000      	movs	r0, #0
 8010cfa:	f7ef fac5 	bl	8000288 <__aeabi_dsub>
 8010cfe:	ec41 0b10 	vmov	d0, r0, r1
 8010d02:	ee10 3a90 	vmov	r3, s1
 8010d06:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010d0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010d0e:	da30      	bge.n	8010d72 <__ieee754_pow+0x9fa>
 8010d10:	4650      	mov	r0, sl
 8010d12:	f000 fa15 	bl	8011140 <scalbn>
 8010d16:	ec51 0b10 	vmov	r0, r1, d0
 8010d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010d1e:	f7ff bbd2 	b.w	80104c6 <__ieee754_pow+0x14e>
 8010d22:	4c31      	ldr	r4, [pc, #196]	@ (8010de8 <__ieee754_pow+0xa70>)
 8010d24:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010d28:	42a3      	cmp	r3, r4
 8010d2a:	d91a      	bls.n	8010d62 <__ieee754_pow+0x9ea>
 8010d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8010dec <__ieee754_pow+0xa74>)
 8010d2e:	440b      	add	r3, r1
 8010d30:	4303      	orrs	r3, r0
 8010d32:	d009      	beq.n	8010d48 <__ieee754_pow+0x9d0>
 8010d34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d38:	2200      	movs	r2, #0
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	f7ef fece 	bl	8000adc <__aeabi_dcmplt>
 8010d40:	3800      	subs	r0, #0
 8010d42:	bf18      	it	ne
 8010d44:	2001      	movne	r0, #1
 8010d46:	e42b      	b.n	80105a0 <__ieee754_pow+0x228>
 8010d48:	4642      	mov	r2, r8
 8010d4a:	464b      	mov	r3, r9
 8010d4c:	f7ef fa9c 	bl	8000288 <__aeabi_dsub>
 8010d50:	4632      	mov	r2, r6
 8010d52:	463b      	mov	r3, r7
 8010d54:	f7ef fed6 	bl	8000b04 <__aeabi_dcmpge>
 8010d58:	2800      	cmp	r0, #0
 8010d5a:	d1eb      	bne.n	8010d34 <__ieee754_pow+0x9bc>
 8010d5c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8010dfc <__ieee754_pow+0xa84>
 8010d60:	e6f7      	b.n	8010b52 <__ieee754_pow+0x7da>
 8010d62:	469a      	mov	sl, r3
 8010d64:	4b22      	ldr	r3, [pc, #136]	@ (8010df0 <__ieee754_pow+0xa78>)
 8010d66:	459a      	cmp	sl, r3
 8010d68:	f63f aef3 	bhi.w	8010b52 <__ieee754_pow+0x7da>
 8010d6c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8010d70:	e715      	b.n	8010b9e <__ieee754_pow+0x826>
 8010d72:	ec51 0b10 	vmov	r0, r1, d0
 8010d76:	4619      	mov	r1, r3
 8010d78:	e7cf      	b.n	8010d1a <__ieee754_pow+0x9a2>
 8010d7a:	491a      	ldr	r1, [pc, #104]	@ (8010de4 <__ieee754_pow+0xa6c>)
 8010d7c:	2000      	movs	r0, #0
 8010d7e:	f7ff bb18 	b.w	80103b2 <__ieee754_pow+0x3a>
 8010d82:	2000      	movs	r0, #0
 8010d84:	2100      	movs	r1, #0
 8010d86:	f7ff bb14 	b.w	80103b2 <__ieee754_pow+0x3a>
 8010d8a:	4630      	mov	r0, r6
 8010d8c:	4639      	mov	r1, r7
 8010d8e:	f7ff bb10 	b.w	80103b2 <__ieee754_pow+0x3a>
 8010d92:	460c      	mov	r4, r1
 8010d94:	f7ff bb5e 	b.w	8010454 <__ieee754_pow+0xdc>
 8010d98:	2400      	movs	r4, #0
 8010d9a:	f7ff bb49 	b.w	8010430 <__ieee754_pow+0xb8>
 8010d9e:	bf00      	nop
 8010da0:	00000000 	.word	0x00000000
 8010da4:	3fe62e43 	.word	0x3fe62e43
 8010da8:	fefa39ef 	.word	0xfefa39ef
 8010dac:	3fe62e42 	.word	0x3fe62e42
 8010db0:	0ca86c39 	.word	0x0ca86c39
 8010db4:	be205c61 	.word	0xbe205c61
 8010db8:	72bea4d0 	.word	0x72bea4d0
 8010dbc:	3e663769 	.word	0x3e663769
 8010dc0:	c5d26bf1 	.word	0xc5d26bf1
 8010dc4:	3ebbbd41 	.word	0x3ebbbd41
 8010dc8:	af25de2c 	.word	0xaf25de2c
 8010dcc:	3f11566a 	.word	0x3f11566a
 8010dd0:	16bebd93 	.word	0x16bebd93
 8010dd4:	3f66c16c 	.word	0x3f66c16c
 8010dd8:	5555553e 	.word	0x5555553e
 8010ddc:	3fc55555 	.word	0x3fc55555
 8010de0:	fff00000 	.word	0xfff00000
 8010de4:	3ff00000 	.word	0x3ff00000
 8010de8:	4090cbff 	.word	0x4090cbff
 8010dec:	3f6f3400 	.word	0x3f6f3400
 8010df0:	3fe00000 	.word	0x3fe00000
 8010df4:	652b82fe 	.word	0x652b82fe
 8010df8:	3c971547 	.word	0x3c971547
 8010dfc:	4090cc00 	.word	0x4090cc00

08010e00 <atan>:
 8010e00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e04:	ec55 4b10 	vmov	r4, r5, d0
 8010e08:	4bbf      	ldr	r3, [pc, #764]	@ (8011108 <atan+0x308>)
 8010e0a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8010e0e:	429e      	cmp	r6, r3
 8010e10:	46ab      	mov	fp, r5
 8010e12:	d918      	bls.n	8010e46 <atan+0x46>
 8010e14:	4bbd      	ldr	r3, [pc, #756]	@ (801110c <atan+0x30c>)
 8010e16:	429e      	cmp	r6, r3
 8010e18:	d801      	bhi.n	8010e1e <atan+0x1e>
 8010e1a:	d109      	bne.n	8010e30 <atan+0x30>
 8010e1c:	b144      	cbz	r4, 8010e30 <atan+0x30>
 8010e1e:	4622      	mov	r2, r4
 8010e20:	462b      	mov	r3, r5
 8010e22:	4620      	mov	r0, r4
 8010e24:	4629      	mov	r1, r5
 8010e26:	f7ef fa31 	bl	800028c <__adddf3>
 8010e2a:	4604      	mov	r4, r0
 8010e2c:	460d      	mov	r5, r1
 8010e2e:	e006      	b.n	8010e3e <atan+0x3e>
 8010e30:	f1bb 0f00 	cmp.w	fp, #0
 8010e34:	f340 812b 	ble.w	801108e <atan+0x28e>
 8010e38:	a597      	add	r5, pc, #604	@ (adr r5, 8011098 <atan+0x298>)
 8010e3a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010e3e:	ec45 4b10 	vmov	d0, r4, r5
 8010e42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e46:	4bb2      	ldr	r3, [pc, #712]	@ (8011110 <atan+0x310>)
 8010e48:	429e      	cmp	r6, r3
 8010e4a:	d813      	bhi.n	8010e74 <atan+0x74>
 8010e4c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8010e50:	429e      	cmp	r6, r3
 8010e52:	d80c      	bhi.n	8010e6e <atan+0x6e>
 8010e54:	a392      	add	r3, pc, #584	@ (adr r3, 80110a0 <atan+0x2a0>)
 8010e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e5a:	4620      	mov	r0, r4
 8010e5c:	4629      	mov	r1, r5
 8010e5e:	f7ef fa15 	bl	800028c <__adddf3>
 8010e62:	4bac      	ldr	r3, [pc, #688]	@ (8011114 <atan+0x314>)
 8010e64:	2200      	movs	r2, #0
 8010e66:	f7ef fe57 	bl	8000b18 <__aeabi_dcmpgt>
 8010e6a:	2800      	cmp	r0, #0
 8010e6c:	d1e7      	bne.n	8010e3e <atan+0x3e>
 8010e6e:	f04f 3aff 	mov.w	sl, #4294967295
 8010e72:	e029      	b.n	8010ec8 <atan+0xc8>
 8010e74:	f000 f95c 	bl	8011130 <fabs>
 8010e78:	4ba7      	ldr	r3, [pc, #668]	@ (8011118 <atan+0x318>)
 8010e7a:	429e      	cmp	r6, r3
 8010e7c:	ec55 4b10 	vmov	r4, r5, d0
 8010e80:	f200 80bc 	bhi.w	8010ffc <atan+0x1fc>
 8010e84:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8010e88:	429e      	cmp	r6, r3
 8010e8a:	f200 809e 	bhi.w	8010fca <atan+0x1ca>
 8010e8e:	4622      	mov	r2, r4
 8010e90:	462b      	mov	r3, r5
 8010e92:	4620      	mov	r0, r4
 8010e94:	4629      	mov	r1, r5
 8010e96:	f7ef f9f9 	bl	800028c <__adddf3>
 8010e9a:	4b9e      	ldr	r3, [pc, #632]	@ (8011114 <atan+0x314>)
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	f7ef f9f3 	bl	8000288 <__aeabi_dsub>
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	4606      	mov	r6, r0
 8010ea6:	460f      	mov	r7, r1
 8010ea8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010eac:	4620      	mov	r0, r4
 8010eae:	4629      	mov	r1, r5
 8010eb0:	f7ef f9ec 	bl	800028c <__adddf3>
 8010eb4:	4602      	mov	r2, r0
 8010eb6:	460b      	mov	r3, r1
 8010eb8:	4630      	mov	r0, r6
 8010eba:	4639      	mov	r1, r7
 8010ebc:	f7ef fcc6 	bl	800084c <__aeabi_ddiv>
 8010ec0:	f04f 0a00 	mov.w	sl, #0
 8010ec4:	4604      	mov	r4, r0
 8010ec6:	460d      	mov	r5, r1
 8010ec8:	4622      	mov	r2, r4
 8010eca:	462b      	mov	r3, r5
 8010ecc:	4620      	mov	r0, r4
 8010ece:	4629      	mov	r1, r5
 8010ed0:	f7ef fb92 	bl	80005f8 <__aeabi_dmul>
 8010ed4:	4602      	mov	r2, r0
 8010ed6:	460b      	mov	r3, r1
 8010ed8:	4680      	mov	r8, r0
 8010eda:	4689      	mov	r9, r1
 8010edc:	f7ef fb8c 	bl	80005f8 <__aeabi_dmul>
 8010ee0:	a371      	add	r3, pc, #452	@ (adr r3, 80110a8 <atan+0x2a8>)
 8010ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee6:	4606      	mov	r6, r0
 8010ee8:	460f      	mov	r7, r1
 8010eea:	f7ef fb85 	bl	80005f8 <__aeabi_dmul>
 8010eee:	a370      	add	r3, pc, #448	@ (adr r3, 80110b0 <atan+0x2b0>)
 8010ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef4:	f7ef f9ca 	bl	800028c <__adddf3>
 8010ef8:	4632      	mov	r2, r6
 8010efa:	463b      	mov	r3, r7
 8010efc:	f7ef fb7c 	bl	80005f8 <__aeabi_dmul>
 8010f00:	a36d      	add	r3, pc, #436	@ (adr r3, 80110b8 <atan+0x2b8>)
 8010f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f06:	f7ef f9c1 	bl	800028c <__adddf3>
 8010f0a:	4632      	mov	r2, r6
 8010f0c:	463b      	mov	r3, r7
 8010f0e:	f7ef fb73 	bl	80005f8 <__aeabi_dmul>
 8010f12:	a36b      	add	r3, pc, #428	@ (adr r3, 80110c0 <atan+0x2c0>)
 8010f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f18:	f7ef f9b8 	bl	800028c <__adddf3>
 8010f1c:	4632      	mov	r2, r6
 8010f1e:	463b      	mov	r3, r7
 8010f20:	f7ef fb6a 	bl	80005f8 <__aeabi_dmul>
 8010f24:	a368      	add	r3, pc, #416	@ (adr r3, 80110c8 <atan+0x2c8>)
 8010f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f2a:	f7ef f9af 	bl	800028c <__adddf3>
 8010f2e:	4632      	mov	r2, r6
 8010f30:	463b      	mov	r3, r7
 8010f32:	f7ef fb61 	bl	80005f8 <__aeabi_dmul>
 8010f36:	a366      	add	r3, pc, #408	@ (adr r3, 80110d0 <atan+0x2d0>)
 8010f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f3c:	f7ef f9a6 	bl	800028c <__adddf3>
 8010f40:	4642      	mov	r2, r8
 8010f42:	464b      	mov	r3, r9
 8010f44:	f7ef fb58 	bl	80005f8 <__aeabi_dmul>
 8010f48:	a363      	add	r3, pc, #396	@ (adr r3, 80110d8 <atan+0x2d8>)
 8010f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f4e:	4680      	mov	r8, r0
 8010f50:	4689      	mov	r9, r1
 8010f52:	4630      	mov	r0, r6
 8010f54:	4639      	mov	r1, r7
 8010f56:	f7ef fb4f 	bl	80005f8 <__aeabi_dmul>
 8010f5a:	a361      	add	r3, pc, #388	@ (adr r3, 80110e0 <atan+0x2e0>)
 8010f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f60:	f7ef f992 	bl	8000288 <__aeabi_dsub>
 8010f64:	4632      	mov	r2, r6
 8010f66:	463b      	mov	r3, r7
 8010f68:	f7ef fb46 	bl	80005f8 <__aeabi_dmul>
 8010f6c:	a35e      	add	r3, pc, #376	@ (adr r3, 80110e8 <atan+0x2e8>)
 8010f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f72:	f7ef f989 	bl	8000288 <__aeabi_dsub>
 8010f76:	4632      	mov	r2, r6
 8010f78:	463b      	mov	r3, r7
 8010f7a:	f7ef fb3d 	bl	80005f8 <__aeabi_dmul>
 8010f7e:	a35c      	add	r3, pc, #368	@ (adr r3, 80110f0 <atan+0x2f0>)
 8010f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f84:	f7ef f980 	bl	8000288 <__aeabi_dsub>
 8010f88:	4632      	mov	r2, r6
 8010f8a:	463b      	mov	r3, r7
 8010f8c:	f7ef fb34 	bl	80005f8 <__aeabi_dmul>
 8010f90:	a359      	add	r3, pc, #356	@ (adr r3, 80110f8 <atan+0x2f8>)
 8010f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f96:	f7ef f977 	bl	8000288 <__aeabi_dsub>
 8010f9a:	4632      	mov	r2, r6
 8010f9c:	463b      	mov	r3, r7
 8010f9e:	f7ef fb2b 	bl	80005f8 <__aeabi_dmul>
 8010fa2:	4602      	mov	r2, r0
 8010fa4:	460b      	mov	r3, r1
 8010fa6:	4640      	mov	r0, r8
 8010fa8:	4649      	mov	r1, r9
 8010faa:	f7ef f96f 	bl	800028c <__adddf3>
 8010fae:	4622      	mov	r2, r4
 8010fb0:	462b      	mov	r3, r5
 8010fb2:	f7ef fb21 	bl	80005f8 <__aeabi_dmul>
 8010fb6:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010fba:	4602      	mov	r2, r0
 8010fbc:	460b      	mov	r3, r1
 8010fbe:	d148      	bne.n	8011052 <atan+0x252>
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	4629      	mov	r1, r5
 8010fc4:	f7ef f960 	bl	8000288 <__aeabi_dsub>
 8010fc8:	e72f      	b.n	8010e2a <atan+0x2a>
 8010fca:	4b52      	ldr	r3, [pc, #328]	@ (8011114 <atan+0x314>)
 8010fcc:	2200      	movs	r2, #0
 8010fce:	4620      	mov	r0, r4
 8010fd0:	4629      	mov	r1, r5
 8010fd2:	f7ef f959 	bl	8000288 <__aeabi_dsub>
 8010fd6:	4b4f      	ldr	r3, [pc, #316]	@ (8011114 <atan+0x314>)
 8010fd8:	4606      	mov	r6, r0
 8010fda:	460f      	mov	r7, r1
 8010fdc:	2200      	movs	r2, #0
 8010fde:	4620      	mov	r0, r4
 8010fe0:	4629      	mov	r1, r5
 8010fe2:	f7ef f953 	bl	800028c <__adddf3>
 8010fe6:	4602      	mov	r2, r0
 8010fe8:	460b      	mov	r3, r1
 8010fea:	4630      	mov	r0, r6
 8010fec:	4639      	mov	r1, r7
 8010fee:	f7ef fc2d 	bl	800084c <__aeabi_ddiv>
 8010ff2:	f04f 0a01 	mov.w	sl, #1
 8010ff6:	4604      	mov	r4, r0
 8010ff8:	460d      	mov	r5, r1
 8010ffa:	e765      	b.n	8010ec8 <atan+0xc8>
 8010ffc:	4b47      	ldr	r3, [pc, #284]	@ (801111c <atan+0x31c>)
 8010ffe:	429e      	cmp	r6, r3
 8011000:	d21c      	bcs.n	801103c <atan+0x23c>
 8011002:	4b47      	ldr	r3, [pc, #284]	@ (8011120 <atan+0x320>)
 8011004:	2200      	movs	r2, #0
 8011006:	4620      	mov	r0, r4
 8011008:	4629      	mov	r1, r5
 801100a:	f7ef f93d 	bl	8000288 <__aeabi_dsub>
 801100e:	4b44      	ldr	r3, [pc, #272]	@ (8011120 <atan+0x320>)
 8011010:	4606      	mov	r6, r0
 8011012:	460f      	mov	r7, r1
 8011014:	2200      	movs	r2, #0
 8011016:	4620      	mov	r0, r4
 8011018:	4629      	mov	r1, r5
 801101a:	f7ef faed 	bl	80005f8 <__aeabi_dmul>
 801101e:	4b3d      	ldr	r3, [pc, #244]	@ (8011114 <atan+0x314>)
 8011020:	2200      	movs	r2, #0
 8011022:	f7ef f933 	bl	800028c <__adddf3>
 8011026:	4602      	mov	r2, r0
 8011028:	460b      	mov	r3, r1
 801102a:	4630      	mov	r0, r6
 801102c:	4639      	mov	r1, r7
 801102e:	f7ef fc0d 	bl	800084c <__aeabi_ddiv>
 8011032:	f04f 0a02 	mov.w	sl, #2
 8011036:	4604      	mov	r4, r0
 8011038:	460d      	mov	r5, r1
 801103a:	e745      	b.n	8010ec8 <atan+0xc8>
 801103c:	4622      	mov	r2, r4
 801103e:	462b      	mov	r3, r5
 8011040:	4938      	ldr	r1, [pc, #224]	@ (8011124 <atan+0x324>)
 8011042:	2000      	movs	r0, #0
 8011044:	f7ef fc02 	bl	800084c <__aeabi_ddiv>
 8011048:	f04f 0a03 	mov.w	sl, #3
 801104c:	4604      	mov	r4, r0
 801104e:	460d      	mov	r5, r1
 8011050:	e73a      	b.n	8010ec8 <atan+0xc8>
 8011052:	4b35      	ldr	r3, [pc, #212]	@ (8011128 <atan+0x328>)
 8011054:	4e35      	ldr	r6, [pc, #212]	@ (801112c <atan+0x32c>)
 8011056:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801105a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801105e:	f7ef f913 	bl	8000288 <__aeabi_dsub>
 8011062:	4622      	mov	r2, r4
 8011064:	462b      	mov	r3, r5
 8011066:	f7ef f90f 	bl	8000288 <__aeabi_dsub>
 801106a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801106e:	4602      	mov	r2, r0
 8011070:	460b      	mov	r3, r1
 8011072:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011076:	f7ef f907 	bl	8000288 <__aeabi_dsub>
 801107a:	f1bb 0f00 	cmp.w	fp, #0
 801107e:	4604      	mov	r4, r0
 8011080:	460d      	mov	r5, r1
 8011082:	f6bf aedc 	bge.w	8010e3e <atan+0x3e>
 8011086:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801108a:	461d      	mov	r5, r3
 801108c:	e6d7      	b.n	8010e3e <atan+0x3e>
 801108e:	a51c      	add	r5, pc, #112	@ (adr r5, 8011100 <atan+0x300>)
 8011090:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011094:	e6d3      	b.n	8010e3e <atan+0x3e>
 8011096:	bf00      	nop
 8011098:	54442d18 	.word	0x54442d18
 801109c:	3ff921fb 	.word	0x3ff921fb
 80110a0:	8800759c 	.word	0x8800759c
 80110a4:	7e37e43c 	.word	0x7e37e43c
 80110a8:	e322da11 	.word	0xe322da11
 80110ac:	3f90ad3a 	.word	0x3f90ad3a
 80110b0:	24760deb 	.word	0x24760deb
 80110b4:	3fa97b4b 	.word	0x3fa97b4b
 80110b8:	a0d03d51 	.word	0xa0d03d51
 80110bc:	3fb10d66 	.word	0x3fb10d66
 80110c0:	c54c206e 	.word	0xc54c206e
 80110c4:	3fb745cd 	.word	0x3fb745cd
 80110c8:	920083ff 	.word	0x920083ff
 80110cc:	3fc24924 	.word	0x3fc24924
 80110d0:	5555550d 	.word	0x5555550d
 80110d4:	3fd55555 	.word	0x3fd55555
 80110d8:	2c6a6c2f 	.word	0x2c6a6c2f
 80110dc:	bfa2b444 	.word	0xbfa2b444
 80110e0:	52defd9a 	.word	0x52defd9a
 80110e4:	3fadde2d 	.word	0x3fadde2d
 80110e8:	af749a6d 	.word	0xaf749a6d
 80110ec:	3fb3b0f2 	.word	0x3fb3b0f2
 80110f0:	fe231671 	.word	0xfe231671
 80110f4:	3fbc71c6 	.word	0x3fbc71c6
 80110f8:	9998ebc4 	.word	0x9998ebc4
 80110fc:	3fc99999 	.word	0x3fc99999
 8011100:	54442d18 	.word	0x54442d18
 8011104:	bff921fb 	.word	0xbff921fb
 8011108:	440fffff 	.word	0x440fffff
 801110c:	7ff00000 	.word	0x7ff00000
 8011110:	3fdbffff 	.word	0x3fdbffff
 8011114:	3ff00000 	.word	0x3ff00000
 8011118:	3ff2ffff 	.word	0x3ff2ffff
 801111c:	40038000 	.word	0x40038000
 8011120:	3ff80000 	.word	0x3ff80000
 8011124:	bff00000 	.word	0xbff00000
 8011128:	080123d8 	.word	0x080123d8
 801112c:	080123f8 	.word	0x080123f8

08011130 <fabs>:
 8011130:	ec51 0b10 	vmov	r0, r1, d0
 8011134:	4602      	mov	r2, r0
 8011136:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801113a:	ec43 2b10 	vmov	d0, r2, r3
 801113e:	4770      	bx	lr

08011140 <scalbn>:
 8011140:	b570      	push	{r4, r5, r6, lr}
 8011142:	ec55 4b10 	vmov	r4, r5, d0
 8011146:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801114a:	4606      	mov	r6, r0
 801114c:	462b      	mov	r3, r5
 801114e:	b991      	cbnz	r1, 8011176 <scalbn+0x36>
 8011150:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011154:	4323      	orrs	r3, r4
 8011156:	d03d      	beq.n	80111d4 <scalbn+0x94>
 8011158:	4b35      	ldr	r3, [pc, #212]	@ (8011230 <scalbn+0xf0>)
 801115a:	4620      	mov	r0, r4
 801115c:	4629      	mov	r1, r5
 801115e:	2200      	movs	r2, #0
 8011160:	f7ef fa4a 	bl	80005f8 <__aeabi_dmul>
 8011164:	4b33      	ldr	r3, [pc, #204]	@ (8011234 <scalbn+0xf4>)
 8011166:	429e      	cmp	r6, r3
 8011168:	4604      	mov	r4, r0
 801116a:	460d      	mov	r5, r1
 801116c:	da0f      	bge.n	801118e <scalbn+0x4e>
 801116e:	a328      	add	r3, pc, #160	@ (adr r3, 8011210 <scalbn+0xd0>)
 8011170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011174:	e01e      	b.n	80111b4 <scalbn+0x74>
 8011176:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801117a:	4291      	cmp	r1, r2
 801117c:	d10b      	bne.n	8011196 <scalbn+0x56>
 801117e:	4622      	mov	r2, r4
 8011180:	4620      	mov	r0, r4
 8011182:	4629      	mov	r1, r5
 8011184:	f7ef f882 	bl	800028c <__adddf3>
 8011188:	4604      	mov	r4, r0
 801118a:	460d      	mov	r5, r1
 801118c:	e022      	b.n	80111d4 <scalbn+0x94>
 801118e:	460b      	mov	r3, r1
 8011190:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011194:	3936      	subs	r1, #54	@ 0x36
 8011196:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801119a:	4296      	cmp	r6, r2
 801119c:	dd0d      	ble.n	80111ba <scalbn+0x7a>
 801119e:	2d00      	cmp	r5, #0
 80111a0:	a11d      	add	r1, pc, #116	@ (adr r1, 8011218 <scalbn+0xd8>)
 80111a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111a6:	da02      	bge.n	80111ae <scalbn+0x6e>
 80111a8:	a11d      	add	r1, pc, #116	@ (adr r1, 8011220 <scalbn+0xe0>)
 80111aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111ae:	a31a      	add	r3, pc, #104	@ (adr r3, 8011218 <scalbn+0xd8>)
 80111b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111b4:	f7ef fa20 	bl	80005f8 <__aeabi_dmul>
 80111b8:	e7e6      	b.n	8011188 <scalbn+0x48>
 80111ba:	1872      	adds	r2, r6, r1
 80111bc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80111c0:	428a      	cmp	r2, r1
 80111c2:	dcec      	bgt.n	801119e <scalbn+0x5e>
 80111c4:	2a00      	cmp	r2, #0
 80111c6:	dd08      	ble.n	80111da <scalbn+0x9a>
 80111c8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80111cc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80111d0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80111d4:	ec45 4b10 	vmov	d0, r4, r5
 80111d8:	bd70      	pop	{r4, r5, r6, pc}
 80111da:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80111de:	da08      	bge.n	80111f2 <scalbn+0xb2>
 80111e0:	2d00      	cmp	r5, #0
 80111e2:	a10b      	add	r1, pc, #44	@ (adr r1, 8011210 <scalbn+0xd0>)
 80111e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111e8:	dac1      	bge.n	801116e <scalbn+0x2e>
 80111ea:	a10f      	add	r1, pc, #60	@ (adr r1, 8011228 <scalbn+0xe8>)
 80111ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111f0:	e7bd      	b.n	801116e <scalbn+0x2e>
 80111f2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80111f6:	3236      	adds	r2, #54	@ 0x36
 80111f8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80111fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011200:	4620      	mov	r0, r4
 8011202:	4b0d      	ldr	r3, [pc, #52]	@ (8011238 <scalbn+0xf8>)
 8011204:	4629      	mov	r1, r5
 8011206:	2200      	movs	r2, #0
 8011208:	e7d4      	b.n	80111b4 <scalbn+0x74>
 801120a:	bf00      	nop
 801120c:	f3af 8000 	nop.w
 8011210:	c2f8f359 	.word	0xc2f8f359
 8011214:	01a56e1f 	.word	0x01a56e1f
 8011218:	8800759c 	.word	0x8800759c
 801121c:	7e37e43c 	.word	0x7e37e43c
 8011220:	8800759c 	.word	0x8800759c
 8011224:	fe37e43c 	.word	0xfe37e43c
 8011228:	c2f8f359 	.word	0xc2f8f359
 801122c:	81a56e1f 	.word	0x81a56e1f
 8011230:	43500000 	.word	0x43500000
 8011234:	ffff3cb0 	.word	0xffff3cb0
 8011238:	3c900000 	.word	0x3c900000

0801123c <with_errno>:
 801123c:	b510      	push	{r4, lr}
 801123e:	ed2d 8b02 	vpush	{d8}
 8011242:	eeb0 8a40 	vmov.f32	s16, s0
 8011246:	eef0 8a60 	vmov.f32	s17, s1
 801124a:	4604      	mov	r4, r0
 801124c:	f7fc fdfc 	bl	800de48 <__errno>
 8011250:	eeb0 0a48 	vmov.f32	s0, s16
 8011254:	eef0 0a68 	vmov.f32	s1, s17
 8011258:	ecbd 8b02 	vpop	{d8}
 801125c:	6004      	str	r4, [r0, #0]
 801125e:	bd10      	pop	{r4, pc}

08011260 <xflow>:
 8011260:	4603      	mov	r3, r0
 8011262:	b507      	push	{r0, r1, r2, lr}
 8011264:	ec51 0b10 	vmov	r0, r1, d0
 8011268:	b183      	cbz	r3, 801128c <xflow+0x2c>
 801126a:	4602      	mov	r2, r0
 801126c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011270:	e9cd 2300 	strd	r2, r3, [sp]
 8011274:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011278:	f7ef f9be 	bl	80005f8 <__aeabi_dmul>
 801127c:	ec41 0b10 	vmov	d0, r0, r1
 8011280:	2022      	movs	r0, #34	@ 0x22
 8011282:	b003      	add	sp, #12
 8011284:	f85d eb04 	ldr.w	lr, [sp], #4
 8011288:	f7ff bfd8 	b.w	801123c <with_errno>
 801128c:	4602      	mov	r2, r0
 801128e:	460b      	mov	r3, r1
 8011290:	e7ee      	b.n	8011270 <xflow+0x10>
 8011292:	0000      	movs	r0, r0
 8011294:	0000      	movs	r0, r0
	...

08011298 <__math_uflow>:
 8011298:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80112a0 <__math_uflow+0x8>
 801129c:	f7ff bfe0 	b.w	8011260 <xflow>
 80112a0:	00000000 	.word	0x00000000
 80112a4:	10000000 	.word	0x10000000

080112a8 <__math_oflow>:
 80112a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80112b0 <__math_oflow+0x8>
 80112ac:	f7ff bfd8 	b.w	8011260 <xflow>
 80112b0:	00000000 	.word	0x00000000
 80112b4:	70000000 	.word	0x70000000

080112b8 <_init>:
 80112b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ba:	bf00      	nop
 80112bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112be:	bc08      	pop	{r3}
 80112c0:	469e      	mov	lr, r3
 80112c2:	4770      	bx	lr

080112c4 <_fini>:
 80112c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112c6:	bf00      	nop
 80112c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112ca:	bc08      	pop	{r3}
 80112cc:	469e      	mov	lr, r3
 80112ce:	4770      	bx	lr
