
MDP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000114e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001150  08011670  08011670  00012670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080127c0  080127c0  00014208  2**0
                  CONTENTS
  4 .ARM          00000008  080127c0  080127c0  000137c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080127c8  080127c8  00014208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080127c8  080127c8  000137c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080127cc  080127cc  000137cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  080127d0  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014208  2**0
                  CONTENTS
 10 .bss          000052b0  20000208  20000208  00014208  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200054b8  200054b8  00014208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f038  00000000  00000000  00014238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040f8  00000000  00000000  00033270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c88  00000000  00000000  00037368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001679  00000000  00000000  00038ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000062e9  00000000  00000000  0003a669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020d04  00000000  00000000  00040952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea1ba  00000000  00000000  00061656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014b810  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008f60  00000000  00000000  0014b854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  001547b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011658 	.word	0x08011658

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	08011658 	.word	0x08011658

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <MahonyQuaternionUpdate>:
	q[2]=q2 * recipNorm;
	q[3]=q3 * recipNorm;
	}

void MahonyQuaternionUpdate(float ax, float ay, float az, float gx, float gy, float gz,float deltat,float q[4])
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b098      	sub	sp, #96	@ 0x60
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	ed87 0a07 	vstr	s0, [r7, #28]
 8000f82:	edc7 0a06 	vstr	s1, [r7, #24]
 8000f86:	ed87 1a05 	vstr	s2, [r7, #20]
 8000f8a:	edc7 1a04 	vstr	s3, [r7, #16]
 8000f8e:	ed87 2a03 	vstr	s4, [r7, #12]
 8000f92:	edc7 2a02 	vstr	s5, [r7, #8]
 8000f96:	ed87 3a01 	vstr	s6, [r7, #4]
 8000f9a:	6038      	str	r0, [r7, #0]
	float Kp =(2.0f * 0.5f);
 8000f9c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000fa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
	float Ki =0;//(2.0f * 0.5f);
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	65bb      	str	r3, [r7, #88]	@ 0x58

	float q0 = q[0], q1 = q[1], q2 = q[2], q3 = q[3];
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	657b      	str	r3, [r7, #84]	@ 0x54
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8000fc0:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fcc:	d10e      	bne.n	8000fec <MahonyQuaternionUpdate+0x74>
 8000fce:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fda:	d107      	bne.n	8000fec <MahonyQuaternionUpdate+0x74>
 8000fdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fe0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe8:	f000 8117 	beq.w	800121a <MahonyQuaternionUpdate+0x2a2>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8000fec:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ff0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8000ff4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ff8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001000:	edd7 7a05 	vldr	s15, [r7, #20]
 8001004:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800100c:	eeb0 0a67 	vmov.f32	s0, s15
 8001010:	f000 fa5e 	bl	80014d0 <invSqrt>
 8001014:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax *= recipNorm;
 8001018:	ed97 7a07 	vldr	s14, [r7, #28]
 800101c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001024:	edc7 7a07 	vstr	s15, [r7, #28]
		ay *= recipNorm;
 8001028:	ed97 7a06 	vldr	s14, [r7, #24]
 800102c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001034:	edc7 7a06 	vstr	s15, [r7, #24]
		az *= recipNorm;
 8001038:	ed97 7a05 	vldr	s14, [r7, #20]
 800103c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001044:	edc7 7a05 	vstr	s15, [r7, #20]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q1 * q3 - q0 * q2;
 8001048:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800104c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001050:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001054:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8001058:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800105c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001064:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q0 * q1 + q2 * q3;
 8001068:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800106c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001070:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001074:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8001078:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800107c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001084:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q0 * q0 - 0.5f + q3 * q3;
 8001088:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800108c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001090:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001094:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001098:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800109c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
 80010a8:	ed97 7a06 	vldr	s14, [r7, #24]
 80010ac:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80010b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010b4:	edd7 6a05 	vldr	s13, [r7, #20]
 80010b8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80010bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010c4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az * halfvx - ax * halfvz);
 80010c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80010cc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80010d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80010d8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80010dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax * halfvy - ay * halfvx);
 80010e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80010ec:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80010f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010f4:	edd7 6a06 	vldr	s13, [r7, #24]
 80010f8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80010fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001100:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001104:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(Ki > 0.0f) {
 8001108:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800110c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001114:	dd51      	ble.n	80011ba <MahonyQuaternionUpdate+0x242>
			eInt[0] += Ki * halfex * deltat;	// integral error scaled by Ki
 8001116:	4bb2      	ldr	r3, [pc, #712]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 8001118:	ed93 7a00 	vldr	s14, [r3]
 800111c:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001120:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001124:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001128:	edd7 7a01 	vldr	s15, [r7, #4]
 800112c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001134:	4baa      	ldr	r3, [pc, #680]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 8001136:	edc3 7a00 	vstr	s15, [r3]
			eInt[1] += Ki * halfey * deltat;
 800113a:	4ba9      	ldr	r3, [pc, #676]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 800113c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001140:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001144:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001148:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800114c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001150:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001154:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001158:	4ba1      	ldr	r3, [pc, #644]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 800115a:	edc3 7a01 	vstr	s15, [r3, #4]
			eInt[2] += Ki * halfez * deltat;
 800115e:	4ba0      	ldr	r3, [pc, #640]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 8001160:	ed93 7a02 	vldr	s14, [r3, #8]
 8001164:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8001168:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800116c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001170:	edd7 7a01 	vldr	s15, [r7, #4]
 8001174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117c:	4b98      	ldr	r3, [pc, #608]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 800117e:	edc3 7a02 	vstr	s15, [r3, #8]
			gx += eInt[0];	// apply integral feedback
 8001182:	4b97      	ldr	r3, [pc, #604]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 8001184:	edd3 7a00 	vldr	s15, [r3]
 8001188:	ed97 7a04 	vldr	s14, [r7, #16]
 800118c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001190:	edc7 7a04 	vstr	s15, [r7, #16]
			gy += eInt[1];
 8001194:	4b92      	ldr	r3, [pc, #584]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 8001196:	edd3 7a01 	vldr	s15, [r3, #4]
 800119a:	ed97 7a03 	vldr	s14, [r7, #12]
 800119e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a2:	edc7 7a03 	vstr	s15, [r7, #12]
			gz += eInt[2];
 80011a6:	4b8e      	ldr	r3, [pc, #568]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 80011a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80011ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80011b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b4:	edc7 7a02 	vstr	s15, [r7, #8]
 80011b8:	e00b      	b.n	80011d2 <MahonyQuaternionUpdate+0x25a>
		}
		else {
			eInt[0] = 0.0f;	// prevent integral windup
 80011ba:	4b89      	ldr	r3, [pc, #548]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
			eInt[1] = 0.0f;
 80011c2:	4b87      	ldr	r3, [pc, #540]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	605a      	str	r2, [r3, #4]
			eInt[2] = 0.0f;
 80011ca:	4b85      	ldr	r3, [pc, #532]	@ (80013e0 <MahonyQuaternionUpdate+0x468>)
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
		}

		// Apply proportional feedback
		gx += Kp * halfex;
 80011d2:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80011d6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80011da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011de:	ed97 7a04 	vldr	s14, [r7, #16]
 80011e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e6:	edc7 7a04 	vstr	s15, [r7, #16]
		gy += Kp * halfey;
 80011ea:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80011ee:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80011f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80011fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fe:	edc7 7a03 	vstr	s15, [r7, #12]
		gz += Kp * halfez;
 8001202:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001206:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800120a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800120e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001216:	edc7 7a02 	vstr	s15, [r7, #8]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * deltat);		// pre-multiply common factors
 800121a:	edd7 7a01 	vldr	s15, [r7, #4]
 800121e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001226:	ed97 7a04 	vldr	s14, [r7, #16]
 800122a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800122e:	edc7 7a04 	vstr	s15, [r7, #16]
	gy *= (0.5f * deltat);
 8001232:	edd7 7a01 	vldr	s15, [r7, #4]
 8001236:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800123a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800123e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001246:	edc7 7a03 	vstr	s15, [r7, #12]
	gz *= (0.5f * deltat);
 800124a:	edd7 7a01 	vldr	s15, [r7, #4]
 800124e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001256:	ed97 7a02 	vldr	s14, [r7, #8]
 800125a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125e:	edc7 7a02 	vstr	s15, [r7, #8]
	qa = q0;
 8001262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001264:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q1;
 8001266:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q2;
 800126a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800126c:	623b      	str	r3, [r7, #32]
	q0 += (-qb * gx - qc * gy - q3 * gz);
 800126e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001272:	eeb1 7a67 	vneg.f32	s14, s15
 8001276:	edd7 7a04 	vldr	s15, [r7, #16]
 800127a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001282:	edd7 7a03 	vldr	s15, [r7, #12]
 8001286:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800128a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800128e:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001292:	edd7 7a02 	vldr	s15, [r7, #8]
 8001296:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800129a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800129e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80012a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a6:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	q1 += (qa * gx + qc * gz - q3 * gy);
 80012aa:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80012ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012b6:	edd7 6a08 	vldr	s13, [r7, #32]
 80012ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80012be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012c6:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80012ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80012da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012de:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
	q2 += (qa * gy - qb * gz + q3 * gx);
 80012e2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80012e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ee:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80012f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80012f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012fe:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8001302:	edd7 7a04 	vldr	s15, [r7, #16]
 8001306:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800130a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001316:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
	q3 += (qa * gz + qb * gy - qc * gx);
 800131a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800131e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001322:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001326:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800132a:	edd7 7a03 	vldr	s15, [r7, #12]
 800132e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001332:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001336:	edd7 6a08 	vldr	s13, [r7, #32]
 800133a:	edd7 7a04 	vldr	s15, [r7, #16]
 800133e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001342:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001346:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800134a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001352:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001356:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800135a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800135e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001362:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001366:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800136a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800136e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001372:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001376:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800137a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137e:	eeb0 0a67 	vmov.f32	s0, s15
 8001382:	f000 f8a5 	bl	80014d0 <invSqrt>
 8001386:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0]=q0 * recipNorm;
 800138a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800138e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	edc3 7a00 	vstr	s15, [r3]
	q[1]=q1 * recipNorm;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	3304      	adds	r3, #4
 80013a0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80013a4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80013a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ac:	edc3 7a00 	vstr	s15, [r3]
	q[2]=q2 * recipNorm;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	3308      	adds	r3, #8
 80013b4:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80013b8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80013bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c0:	edc3 7a00 	vstr	s15, [r3]
	q[3]=q3 * recipNorm;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	330c      	adds	r3, #12
 80013c8:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80013cc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80013d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d4:	edc3 7a00 	vstr	s15, [r3]
	}
 80013d8:	bf00      	nop
 80013da:	3760      	adds	r7, #96	@ 0x60
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000224 	.word	0x20000224
 80013e4:	00000000 	.word	0x00000000

080013e8 <GetYawFromQ>:
float GetYawFromQ(float q[4])
{
 80013e8:	b5b0      	push	{r4, r5, r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	return atan2(2.0f * (q[1] * q[2] + q[0] * q[3]),
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3304      	adds	r3, #4
 80013f4:	ed93 7a00 	vldr	s14, [r3]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3308      	adds	r3, #8
 80013fc:	edd3 7a00 	vldr	s15, [r3]
 8001400:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	edd3 6a00 	vldr	s13, [r3]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	330c      	adds	r3, #12
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800141e:	ee17 0a90 	vmov	r0, s15
 8001422:	f7ff f891 	bl	8000548 <__aeabi_f2d>
 8001426:	4604      	mov	r4, r0
 8001428:	460d      	mov	r5, r1
	       q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3])*(180.0f/3.14159265359);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	ed93 7a00 	vldr	s14, [r3]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	ee27 7a27 	vmul.f32	s14, s14, s15
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3304      	adds	r3, #4
 800143e:	edd3 6a00 	vldr	s13, [r3]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	3304      	adds	r3, #4
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800144e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3308      	adds	r3, #8
 8001456:	edd3 6a00 	vldr	s13, [r3]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3308      	adds	r3, #8
 800145e:	edd3 7a00 	vldr	s15, [r3]
 8001462:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001466:	ee37 7a67 	vsub.f32	s14, s14, s15
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	330c      	adds	r3, #12
 800146e:	edd3 6a00 	vldr	s13, [r3]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	330c      	adds	r3, #12
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800147e:	ee77 7a67 	vsub.f32	s15, s14, s15
	return atan2(2.0f * (q[1] * q[2] + q[0] * q[3]),
 8001482:	ee17 0a90 	vmov	r0, s15
 8001486:	f7ff f85f 	bl	8000548 <__aeabi_f2d>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	ec43 2b11 	vmov	d1, r2, r3
 8001492:	ec45 4b10 	vmov	d0, r4, r5
 8001496:	f00e ff1d 	bl	80102d4 <atan2>
 800149a:	ec51 0b10 	vmov	r0, r1, d0
	       q[0] * q[0] + q[1] * q[1] - q[2] * q[2] - q[3] * q[3])*(180.0f/3.14159265359);
 800149e:	a30a      	add	r3, pc, #40	@ (adr r3, 80014c8 <GetYawFromQ+0xe0>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	f7ff f8a8 	bl	80005f8 <__aeabi_dmul>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	f7ff fb9a 	bl	8000be8 <__aeabi_d2f>
 80014b4:	4603      	mov	r3, r0
 80014b6:	ee07 3a90 	vmov	s15, r3
	}
 80014ba:	eeb0 0a67 	vmov.f32	s0, s15
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bdb0      	pop	{r4, r5, r7, pc}
 80014c4:	f3af 8000 	nop.w
 80014c8:	1a63bfe5 	.word	0x1a63bfe5
 80014cc:	404ca5dc 	.word	0x404ca5dc

080014d0 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 80014d0:	b480      	push	{r7}
 80014d2:	b087      	sub	sp, #28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80014da:	edd7 7a01 	vldr	s15, [r7, #4]
 80014de:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80014e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e6:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	105a      	asrs	r2, r3, #1
 80014fa:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <invSqrt+0x74>)
 80014fc:	1a9b      	subs	r3, r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8001508:	ed97 7a04 	vldr	s14, [r7, #16]
 800150c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001510:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001514:	edd7 7a04 	vldr	s15, [r7, #16]
 8001518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001520:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001524:	edd7 7a04 	vldr	s15, [r7, #16]
 8001528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152c:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	ee07 3a90 	vmov	s15, r3
}
 8001536:	eeb0 0a67 	vmov.f32	s0, s15
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	5f3759df 	.word	0x5f3759df

08001548 <PID_Init>:
    float output_max;   // Maximum output value
    uint32_t prevtick;
} PIDController;

// Initialize PID controller
void PID_Init(PIDController *pid, float Kp, float Ki, float Kd, float setpoint, float output_min, float output_max) {
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	@ 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	61f8      	str	r0, [r7, #28]
 8001550:	ed87 0a06 	vstr	s0, [r7, #24]
 8001554:	edc7 0a05 	vstr	s1, [r7, #20]
 8001558:	ed87 1a04 	vstr	s2, [r7, #16]
 800155c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001560:	ed87 2a02 	vstr	s4, [r7, #8]
 8001564:	edc7 2a01 	vstr	s5, [r7, #4]
    pid->Kp = Kp;
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	609a      	str	r2, [r3, #8]
    pid->setpoint = setpoint;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f04f 0200 	mov.w	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
    pid->prev_error = 0.0f;
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	619a      	str	r2, [r3, #24]
    pid->output_min = output_min;
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	61da      	str	r2, [r3, #28]
    pid->output_max = output_max;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	621a      	str	r2, [r3, #32]
    pid->prevtick=0;
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	2200      	movs	r2, #0
 80015a0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80015a2:	bf00      	nop
 80015a4:	3724      	adds	r7, #36	@ 0x24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <PID_Update>:

// Update PID controller
float PID_Update(PIDController *pid, float measured_value) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	ed87 0a00 	vstr	s0, [r7]
	if(pid->prevtick==0)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d104      	bne.n	80015ce <PID_Update+0x1e>
		pid->prevtick=HAL_GetTick();
 80015c4:	f003 f98a 	bl	80048dc <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	625a      	str	r2, [r3, #36]	@ 0x24

	float dt  = (HAL_GetTick() - pid->prevtick) *0.001f;
 80015ce:	f003 f985 	bl	80048dc <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	ee07 3a90 	vmov	s15, r3
 80015de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015e2:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001718 <PID_Update+0x168>
 80015e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ea:	edc7 7a06 	vstr	s15, [r7, #24]
    float error = pid->setpoint - measured_value;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	ed93 7a03 	vldr	s14, [r3, #12]
 80015f4:	edd7 7a00 	vldr	s15, [r7]
 80015f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015fc:	edc7 7a05 	vstr	s15, [r7, #20]
    float proportional = pid->Kp * error;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	ed97 7a05 	vldr	s14, [r7, #20]
 800160a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160e:	edc7 7a04 	vstr	s15, [r7, #16]

    // Integral term with anti-windup
    pid->integral += pid->Ki * error * dt;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	ed93 7a04 	vldr	s14, [r3, #16]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	edd3 6a01 	vldr	s13, [r3, #4]
 800161e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001622:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001626:	edd7 7a06 	vldr	s15, [r7, #24]
 800162a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800162e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	edc3 7a04 	vstr	s15, [r3, #16]

    float derivative = pid->Kd * (error - pid->prev_error) / dt;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	ed93 7a02 	vldr	s14, [r3, #8]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	edd3 7a06 	vldr	s15, [r3, #24]
 8001644:	edd7 6a05 	vldr	s13, [r7, #20]
 8001648:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800164c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001650:	ed97 7a06 	vldr	s14, [r7, #24]
 8001654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001658:	edc7 7a03 	vstr	s15, [r7, #12]

    float output = proportional + pid->integral + derivative;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001662:	edd7 7a04 	vldr	s15, [r7, #16]
 8001666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166a:	ed97 7a03 	vldr	s14, [r7, #12]
 800166e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001672:	edc7 7a07 	vstr	s15, [r7, #28]

    // Apply output limits
    if (output > pid->output_max) {
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	edd3 7a08 	vldr	s15, [r3, #32]
 800167c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001680:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001688:	dd16      	ble.n	80016b8 <PID_Update+0x108>
        output = pid->output_max;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	61fb      	str	r3, [r7, #28]
        // Anti-windup: Limit integral term
        pid->integral -= pid->Ki * error * dt;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	ed93 7a04 	vldr	s14, [r3, #16]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	edd3 6a01 	vldr	s13, [r3, #4]
 800169c:	edd7 7a05 	vldr	s15, [r7, #20]
 80016a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80016a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	edc3 7a04 	vstr	s15, [r3, #16]
 80016b6:	e01f      	b.n	80016f8 <PID_Update+0x148>
    } else if (output < pid->output_min) {
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	edd3 7a07 	vldr	s15, [r3, #28]
 80016be:	ed97 7a07 	vldr	s14, [r7, #28]
 80016c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ca:	d515      	bpl.n	80016f8 <PID_Update+0x148>
        output = pid->output_min;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	61fb      	str	r3, [r7, #28]
        // Anti-windup: Limit integral term
        pid->integral -= pid->Ki * error * dt;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	ed93 7a04 	vldr	s14, [r3, #16]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	edd3 6a01 	vldr	s13, [r3, #4]
 80016de:	edd7 7a05 	vldr	s15, [r7, #20]
 80016e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	edc3 7a04 	vstr	s15, [r3, #16]
    }

    pid->prev_error = error;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	619a      	str	r2, [r3, #24]
    pid->prevtick =HAL_GetTick();
 80016fe:	f003 f8ed 	bl	80048dc <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	625a      	str	r2, [r3, #36]	@ 0x24
    return output;
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	ee07 3a90 	vmov	s15, r3
}
 800170e:	eeb0 0a67 	vmov.f32	s0, s15
 8001712:	3720      	adds	r7, #32
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	3a83126f 	.word	0x3a83126f

0800171c <PID_Reset>:

void PID_Reset(PIDController* pid) {
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	pid->setpoint=0;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
    pid->prev_error = 0.0f;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
    pid->prevtick = 0;//HAL_GetTick();
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <Set_Motor_Direction>:
/* USER CODE BEGIN 0 */
uint8_t aRxBuffer[3]={0};
uint8_t buf[7]={0};

//SET both wheel direction 0BACK 1FORWARD
void Set_Motor_Direction(int foward_flag,int backward_flag) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, //AIn1 is forward AIn2 is backward
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf14      	ite	ne
 8001760:	2301      	movne	r3, #1
 8001762:	2300      	moveq	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	461a      	mov	r2, r3
 8001768:	2108      	movs	r1, #8
 800176a:	4814      	ldr	r0, [pc, #80]	@ (80017bc <Set_Motor_Direction+0x6c>)
 800176c:	f004 f83e 	bl	80057ec <HAL_GPIO_WritePin>
			((foward_flag) ? GPIO_PIN_SET : GPIO_PIN_RESET));
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	bf0c      	ite	eq
 8001776:	2301      	moveq	r3, #1
 8001778:	2300      	movne	r3, #0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	2104      	movs	r1, #4
 8001780:	480e      	ldr	r0, [pc, #56]	@ (80017bc <Set_Motor_Direction+0x6c>)
 8001782:	f004 f833 	bl	80057ec <HAL_GPIO_WritePin>
			((foward_flag) ? GPIO_PIN_RESET : GPIO_PIN_SET));
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, //BIn1 is forward BIn2 is backward
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	bf0c      	ite	eq
 800178c:	2301      	moveq	r3, #1
 800178e:	2300      	movne	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	461a      	mov	r2, r3
 8001794:	2120      	movs	r1, #32
 8001796:	4809      	ldr	r0, [pc, #36]	@ (80017bc <Set_Motor_Direction+0x6c>)
 8001798:	f004 f828 	bl	80057ec <HAL_GPIO_WritePin>
			((backward_flag) ? GPIO_PIN_RESET : GPIO_PIN_SET));
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin,
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	bf14      	ite	ne
 80017a2:	2301      	movne	r3, #1
 80017a4:	2300      	moveq	r3, #0
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	461a      	mov	r2, r3
 80017aa:	2110      	movs	r1, #16
 80017ac:	4803      	ldr	r0, [pc, #12]	@ (80017bc <Set_Motor_Direction+0x6c>)
 80017ae:	f004 f81d 	bl	80057ec <HAL_GPIO_WritePin>
			((backward_flag) ? GPIO_PIN_SET : GPIO_PIN_RESET));
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40020000 	.word	0x40020000

080017c0 <delay_us>:
void delay_us(uint16_t us)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim6,0);
 80017ca:	4b09      	ldr	r3, [pc, #36]	@ (80017f0 <delay_us+0x30>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2200      	movs	r2, #0
 80017d0:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6)<us);
 80017d2:	bf00      	nop
 80017d4:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <delay_us+0x30>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017da:	88fb      	ldrh	r3, [r7, #6]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d3f9      	bcc.n	80017d4 <delay_us+0x14>

}
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000458 	.word	0x20000458

080017f4 <resetYaw>:
void resetYaw()
{	q[0]=1; q[1]=0; q[2]=0; q[3]=0;
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001830 <resetYaw+0x3c>)
 80017fa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <resetYaw+0x3c>)
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <resetYaw+0x3c>)
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <resetYaw+0x3c>)
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	60da      	str	r2, [r3, #12]
yaw=0;
 8001818:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <resetYaw+0x40>)
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
PID_Reset(&LMotorPID);
 8001820:	4805      	ldr	r0, [pc, #20]	@ (8001838 <resetYaw+0x44>)
 8001822:	f7ff ff7b 	bl	800171c <PID_Reset>
PID_Reset(&RMotorPID);
 8001826:	4805      	ldr	r0, [pc, #20]	@ (800183c <resetYaw+0x48>)
 8001828:	f7ff ff78 	bl	800171c <PID_Reset>
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000008 	.word	0x20000008
 8001834:	20000590 	.word	0x20000590
 8001838:	20000594 	.word	0x20000594
 800183c:	200005bc 	.word	0x200005bc

08001840 <updateYaw>:
void updateYaw()//update yaw reading using filter
{
 8001840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001842:	ed2d 8b04 	vpush	{d8-d9}
 8001846:	af00      	add	r7, sp, #0
	static uint32_t prevtick=0;

	if(HAL_GetTick()-prevtick>1000L)//RST if never update for more than 1 second
 8001848:	f003 f848 	bl	80048dc <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	4b4c      	ldr	r3, [pc, #304]	@ (8001980 <updateYaw+0x140>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001858:	d905      	bls.n	8001866 <updateYaw+0x26>
	{prevtick=HAL_GetTick();return;}
 800185a:	f003 f83f 	bl	80048dc <HAL_GetTick>
 800185e:	4603      	mov	r3, r0
 8001860:	4a47      	ldr	r2, [pc, #284]	@ (8001980 <updateYaw+0x140>)
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	e084      	b.n	8001970 <updateYaw+0x130>
	ICM20948_readAccelerometer_all(&hi2c1,0,ACCEL_SENS,&accel);
 8001866:	4b47      	ldr	r3, [pc, #284]	@ (8001984 <updateYaw+0x144>)
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	4846      	ldr	r0, [pc, #280]	@ (8001988 <updateYaw+0x148>)
 800186e:	f008 fcab 	bl	800a1c8 <ICM20948_readAccelerometer_all>
	ICM20948_readGyroscope_all(&hi2c1, 0, GYRO_SENS, &gyro);
 8001872:	4b46      	ldr	r3, [pc, #280]	@ (800198c <updateYaw+0x14c>)
 8001874:	2203      	movs	r2, #3
 8001876:	2100      	movs	r1, #0
 8001878:	4843      	ldr	r0, [pc, #268]	@ (8001988 <updateYaw+0x148>)
 800187a:	f008 fb8d 	bl	8009f98 <ICM20948_readGyroscope_all>
	//ICM20948_readMagnetometer_all(&hi2c1,&mag);
	//magcal_adjust(&mag,&mag_params);

	//Madgwick Mahony
	MahonyQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 800187e:	4b41      	ldr	r3, [pc, #260]	@ (8001984 <updateYaw+0x144>)
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001990 <updateYaw+0x150>
 8001888:	ee27 8a87 	vmul.f32	s16, s15, s14
 800188c:	4b3d      	ldr	r3, [pc, #244]	@ (8001984 <updateYaw+0x144>)
 800188e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001892:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001990 <updateYaw+0x150>
 8001896:	ee67 8a87 	vmul.f32	s17, s15, s14
 800189a:	4b3a      	ldr	r3, [pc, #232]	@ (8001984 <updateYaw+0x144>)
 800189c:	edd3 7a02 	vldr	s15, [r3, #8]
 80018a0:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001990 <updateYaw+0x150>
 80018a4:	ee27 9a87 	vmul.f32	s18, s15, s14
			gyro.x*DEG_TO_RAD,-gyro.y*DEG_TO_RAD,gyro.z*DEG_TO_RAD,
 80018a8:	4b38      	ldr	r3, [pc, #224]	@ (800198c <updateYaw+0x14c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fe4b 	bl	8000548 <__aeabi_f2d>
 80018b2:	a331      	add	r3, pc, #196	@ (adr r3, 8001978 <updateYaw+0x138>)
 80018b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b8:	f7fe fe9e 	bl	80005f8 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
	MahonyQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f7ff f990 	bl	8000be8 <__aeabi_d2f>
 80018c8:	4604      	mov	r4, r0
			gyro.x*DEG_TO_RAD,-gyro.y*DEG_TO_RAD,gyro.z*DEG_TO_RAD,
 80018ca:	4b30      	ldr	r3, [pc, #192]	@ (800198c <updateYaw+0x14c>)
 80018cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80018d0:	eef1 7a67 	vneg.f32	s15, s15
 80018d4:	ee17 3a90 	vmov	r3, s15
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe35 	bl	8000548 <__aeabi_f2d>
 80018de:	a326      	add	r3, pc, #152	@ (adr r3, 8001978 <updateYaw+0x138>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe fe88 	bl	80005f8 <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
	MahonyQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f7ff f97a 	bl	8000be8 <__aeabi_d2f>
 80018f4:	4605      	mov	r5, r0
			gyro.x*DEG_TO_RAD,-gyro.y*DEG_TO_RAD,gyro.z*DEG_TO_RAD,
 80018f6:	4b25      	ldr	r3, [pc, #148]	@ (800198c <updateYaw+0x14c>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fe24 	bl	8000548 <__aeabi_f2d>
 8001900:	a31d      	add	r3, pc, #116	@ (adr r3, 8001978 <updateYaw+0x138>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f7fe fe77 	bl	80005f8 <__aeabi_dmul>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
	MahonyQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	f7ff f969 	bl	8000be8 <__aeabi_d2f>
 8001916:	4606      	mov	r6, r0
			(HAL_GetTick()-prevtick)*0.001f,q);
 8001918:	f002 ffe0 	bl	80048dc <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	4b18      	ldr	r3, [pc, #96]	@ (8001980 <updateYaw+0x140>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	1ad3      	subs	r3, r2, r3
	MahonyQuaternionUpdate(accel.x*9.81f,accel.y*9.81f,accel.z*9.81f,
 8001924:	ee07 3a90 	vmov	s15, r3
 8001928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800192c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001994 <updateYaw+0x154>
 8001930:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001934:	4818      	ldr	r0, [pc, #96]	@ (8001998 <updateYaw+0x158>)
 8001936:	eeb0 3a67 	vmov.f32	s6, s15
 800193a:	ee02 6a90 	vmov	s5, r6
 800193e:	ee02 5a10 	vmov	s4, r5
 8001942:	ee01 4a90 	vmov	s3, r4
 8001946:	eeb0 1a49 	vmov.f32	s2, s18
 800194a:	eef0 0a68 	vmov.f32	s1, s17
 800194e:	eeb0 0a48 	vmov.f32	s0, s16
 8001952:	f7ff fb11 	bl	8000f78 <MahonyQuaternionUpdate>

	prevtick=HAL_GetTick();
 8001956:	f002 ffc1 	bl	80048dc <HAL_GetTick>
 800195a:	4603      	mov	r3, r0
 800195c:	4a08      	ldr	r2, [pc, #32]	@ (8001980 <updateYaw+0x140>)
 800195e:	6013      	str	r3, [r2, #0]
	yaw = GetYawFromQ(q);
 8001960:	480d      	ldr	r0, [pc, #52]	@ (8001998 <updateYaw+0x158>)
 8001962:	f7ff fd41 	bl	80013e8 <GetYawFromQ>
 8001966:	eef0 7a40 	vmov.f32	s15, s0
 800196a:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <updateYaw+0x15c>)
 800196c:	edc3 7a00 	vstr	s15, [r3]
}
 8001970:	46bd      	mov	sp, r7
 8001972:	ecbd 8b04 	vpop	{d8-d9}
 8001976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001978:	a2529e84 	.word	0xa2529e84
 800197c:	3f91df46 	.word	0x3f91df46
 8001980:	20000604 	.word	0x20000604
 8001984:	20000578 	.word	0x20000578
 8001988:	200002e4 	.word	0x200002e4
 800198c:	20000584 	.word	0x20000584
 8001990:	411cf5c3 	.word	0x411cf5c3
 8001994:	3a83126f 	.word	0x3a83126f
 8001998:	20000008 	.word	0x20000008
 800199c:	20000590 	.word	0x20000590

080019a0 <FLeft>:
	int32_t L=(int32_t)PID_Update(&LMotorPID, RPS_L);
	int32_t R=(int32_t)PID_Update(&RMotorPID, RPS_R);
	set_motor_pwm(L, R);
}
void FLeft(int target)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
	//		set_servo_angle(Left);
	//		osDelay(300);
	//		//resetYaw();
	//		bTurn=0;
	//	}
	uint8_t bTurn=1;
 80019a8:	2301      	movs	r3, #1
 80019aa:	75fb      	strb	r3, [r7, #23]
	int32_t L=0,R=0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
	//osDelay(10);

	do
	{
		if(bTurn)
 80019b4:	7dfb      	ldrb	r3, [r7, #23]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00b      	beq.n	80019d2 <FLeft+0x32>
		{
			set_servo_angle(Left);
 80019ba:	208c      	movs	r0, #140	@ 0x8c
 80019bc:	f000 ff0a 	bl	80027d4 <set_servo_angle>
			osDelay(350);
 80019c0:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 80019c4:	f008 ff20 	bl	800a808 <osDelay>
			bTurn=0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	75fb      	strb	r3, [r7, #23]
			//osDelay(300);
			resetYaw();
 80019cc:	f7ff ff12 	bl	80017f4 <resetYaw>
 80019d0:	e037      	b.n	8001a42 <FLeft+0xa2>
		} else{
			updateYaw();
 80019d2:	f7ff ff35 	bl	8001840 <updateYaw>

			LMotorPID.setpoint=1;
 80019d6:	4b37      	ldr	r3, [pc, #220]	@ (8001ab4 <FLeft+0x114>)
 80019d8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80019dc:	60da      	str	r2, [r3, #12]
			RMotorPID.setpoint=3;
 80019de:	4b36      	ldr	r3, [pc, #216]	@ (8001ab8 <FLeft+0x118>)
 80019e0:	4a36      	ldr	r2, [pc, #216]	@ (8001abc <FLeft+0x11c>)
 80019e2:	60da      	str	r2, [r3, #12]
			L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 80019e4:	4b36      	ldr	r3, [pc, #216]	@ (8001ac0 <FLeft+0x120>)
 80019e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ea:	4610      	mov	r0, r2
 80019ec:	4619      	mov	r1, r3
 80019ee:	f7ff f8fb 	bl	8000be8 <__aeabi_d2f>
 80019f2:	4603      	mov	r3, r0
 80019f4:	ee00 3a10 	vmov	s0, r3
 80019f8:	482e      	ldr	r0, [pc, #184]	@ (8001ab4 <FLeft+0x114>)
 80019fa:	f7ff fdd9 	bl	80015b0 <PID_Update>
 80019fe:	eef0 7a40 	vmov.f32	s15, s0
 8001a02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a06:	ee17 3a90 	vmov	r3, s15
 8001a0a:	613b      	str	r3, [r7, #16]
			R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8001a0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac4 <FLeft+0x124>)
 8001a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	f7ff f8e7 	bl	8000be8 <__aeabi_d2f>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	ee00 3a10 	vmov	s0, r3
 8001a20:	4825      	ldr	r0, [pc, #148]	@ (8001ab8 <FLeft+0x118>)
 8001a22:	f7ff fdc5 	bl	80015b0 <PID_Update>
 8001a26:	eef0 7a40 	vmov.f32	s15, s0
 8001a2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a2e:	ee17 3a90 	vmov	r3, s15
 8001a32:	60fb      	str	r3, [r7, #12]
			osDelay(10);
 8001a34:	200a      	movs	r0, #10
 8001a36:	f008 fee7 	bl	800a808 <osDelay>
			set_motor_pwm(L, R);
 8001a3a:	68f9      	ldr	r1, [r7, #12]
 8001a3c:	6938      	ldr	r0, [r7, #16]
 8001a3e:	f000 fe81 	bl	8002744 <set_motor_pwm>
		}

		//osDelay(10);

	}while(!(yaw > target - 2.0f && yaw < target + 2.0f));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	ee07 3a90 	vmov	s15, r3
 8001a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a4c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001a50:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001a54:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac8 <FLeft+0x128>)
 8001a56:	edd3 7a00 	vldr	s15, [r3]
 8001a5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a62:	bf4c      	ite	mi
 8001a64:	2301      	movmi	r3, #1
 8001a66:	2300      	movpl	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	f083 0301 	eor.w	r3, r3, #1
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d19f      	bne.n	80019b4 <FLeft+0x14>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	ee07 3a90 	vmov	s15, r3
 8001a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001a82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a86:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <FLeft+0x128>)
 8001a88:	edd3 7a00 	vldr	s15, [r3]
 8001a8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a94:	bfcc      	ite	gt
 8001a96:	2301      	movgt	r3, #1
 8001a98:	2300      	movle	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f083 0301 	eor.w	r3, r3, #1
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d186      	bne.n	80019b4 <FLeft+0x14>
	Motor_Stop();
 8001aa6:	f001 ffc7 	bl	8003a38 <Motor_Stop>
	//		LMotorPID.setpoint=0.5;
	//		RMotorPID.setpoint=0.5;//0.35
	//	}


}
 8001aaa:	bf00      	nop
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000594 	.word	0x20000594
 8001ab8:	200005bc 	.word	0x200005bc
 8001abc:	40400000 	.word	0x40400000
 8001ac0:	20000568 	.word	0x20000568
 8001ac4:	20000570 	.word	0x20000570
 8001ac8:	20000590 	.word	0x20000590

08001acc <FL>:
void FL(int target)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	//		set_servo_angle(Left);
	//		osDelay(300);
	//		//resetYaw();
	//		bTurn=0;
	//	}
	uint8_t bTurn=1;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	75fb      	strb	r3, [r7, #23]
	int32_t L=0,R=0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
	//osDelay(10);

	do
	{
		if(bTurn)
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00b      	beq.n	8001afe <FL+0x32>
		{
			set_servo_angle(Left);
 8001ae6:	208c      	movs	r0, #140	@ 0x8c
 8001ae8:	f000 fe74 	bl	80027d4 <set_servo_angle>
			osDelay(350);
 8001aec:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8001af0:	f008 fe8a 	bl	800a808 <osDelay>
			bTurn=0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	75fb      	strb	r3, [r7, #23]
			//osDelay(300);
			resetYaw();
 8001af8:	f7ff fe7c 	bl	80017f4 <resetYaw>
 8001afc:	e038      	b.n	8001b70 <FL+0xa4>
		} else{
			updateYaw();
 8001afe:	f7ff fe9f 	bl	8001840 <updateYaw>

			LMotorPID.setpoint=1;
 8001b02:	4b37      	ldr	r3, [pc, #220]	@ (8001be0 <FL+0x114>)
 8001b04:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b08:	60da      	str	r2, [r3, #12]
			RMotorPID.setpoint=4;
 8001b0a:	4b36      	ldr	r3, [pc, #216]	@ (8001be4 <FL+0x118>)
 8001b0c:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8001b10:	60da      	str	r2, [r3, #12]
			L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8001b12:	4b35      	ldr	r3, [pc, #212]	@ (8001be8 <FL+0x11c>)
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	4610      	mov	r0, r2
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f7ff f864 	bl	8000be8 <__aeabi_d2f>
 8001b20:	4603      	mov	r3, r0
 8001b22:	ee00 3a10 	vmov	s0, r3
 8001b26:	482e      	ldr	r0, [pc, #184]	@ (8001be0 <FL+0x114>)
 8001b28:	f7ff fd42 	bl	80015b0 <PID_Update>
 8001b2c:	eef0 7a40 	vmov.f32	s15, s0
 8001b30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b34:	ee17 3a90 	vmov	r3, s15
 8001b38:	613b      	str	r3, [r7, #16]
			R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8001b3a:	4b2c      	ldr	r3, [pc, #176]	@ (8001bec <FL+0x120>)
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	f7ff f850 	bl	8000be8 <__aeabi_d2f>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	ee00 3a10 	vmov	s0, r3
 8001b4e:	4825      	ldr	r0, [pc, #148]	@ (8001be4 <FL+0x118>)
 8001b50:	f7ff fd2e 	bl	80015b0 <PID_Update>
 8001b54:	eef0 7a40 	vmov.f32	s15, s0
 8001b58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b5c:	ee17 3a90 	vmov	r3, s15
 8001b60:	60fb      	str	r3, [r7, #12]
			osDelay(10);
 8001b62:	200a      	movs	r0, #10
 8001b64:	f008 fe50 	bl	800a808 <osDelay>
			set_motor_pwm(L, R);
 8001b68:	68f9      	ldr	r1, [r7, #12]
 8001b6a:	6938      	ldr	r0, [r7, #16]
 8001b6c:	f000 fdea 	bl	8002744 <set_motor_pwm>
		}

		//osDelay(10);

	}while(!(yaw > target - 2.0f && yaw < target + 2.0f));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b7a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001b7e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001b82:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf0 <FL+0x124>)
 8001b84:	edd3 7a00 	vldr	s15, [r3]
 8001b88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b90:	bf4c      	ite	mi
 8001b92:	2301      	movmi	r3, #1
 8001b94:	2300      	movpl	r3, #0
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	f083 0301 	eor.w	r3, r3, #1
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d19e      	bne.n	8001ae0 <FL+0x14>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	ee07 3a90 	vmov	s15, r3
 8001ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bac:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001bb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <FL+0x124>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc2:	bfcc      	ite	gt
 8001bc4:	2301      	movgt	r3, #1
 8001bc6:	2300      	movle	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f083 0301 	eor.w	r3, r3, #1
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d185      	bne.n	8001ae0 <FL+0x14>
	Motor_Stop();
 8001bd4:	f001 ff30 	bl	8003a38 <Motor_Stop>
}
 8001bd8:	bf00      	nop
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000594 	.word	0x20000594
 8001be4:	200005bc 	.word	0x200005bc
 8001be8:	20000568 	.word	0x20000568
 8001bec:	20000570 	.word	0x20000570
 8001bf0:	20000590 	.word	0x20000590

08001bf4 <FR>:
void FR(int target)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	//		set_servo_angle(Left);
	//		osDelay(300);
	//		//resetYaw();
	//		bTurn=0;
	//	}
	uint8_t bTurn=1;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	75fb      	strb	r3, [r7, #23]
	int32_t L=0,R=0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
	//osDelay(10);

	do
	{
		if(bTurn)
 8001c08:	7dfb      	ldrb	r3, [r7, #23]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <FR+0x32>
		{
			set_servo_angle(Right);
 8001c0e:	2014      	movs	r0, #20
 8001c10:	f000 fde0 	bl	80027d4 <set_servo_angle>
			osDelay(350);
 8001c14:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8001c18:	f008 fdf6 	bl	800a808 <osDelay>
			bTurn=0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	75fb      	strb	r3, [r7, #23]
			//osDelay(300);
			resetYaw();
 8001c20:	f7ff fde8 	bl	80017f4 <resetYaw>
 8001c24:	e038      	b.n	8001c98 <FR+0xa4>
		} else{
			updateYaw();
 8001c26:	f7ff fe0b 	bl	8001840 <updateYaw>

			LMotorPID.setpoint=4;
 8001c2a:	4b37      	ldr	r3, [pc, #220]	@ (8001d08 <FR+0x114>)
 8001c2c:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8001c30:	60da      	str	r2, [r3, #12]
			RMotorPID.setpoint=1;
 8001c32:	4b36      	ldr	r3, [pc, #216]	@ (8001d0c <FR+0x118>)
 8001c34:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001c38:	60da      	str	r2, [r3, #12]
			L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8001c3a:	4b35      	ldr	r3, [pc, #212]	@ (8001d10 <FR+0x11c>)
 8001c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	f7fe ffd0 	bl	8000be8 <__aeabi_d2f>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	ee00 3a10 	vmov	s0, r3
 8001c4e:	482e      	ldr	r0, [pc, #184]	@ (8001d08 <FR+0x114>)
 8001c50:	f7ff fcae 	bl	80015b0 <PID_Update>
 8001c54:	eef0 7a40 	vmov.f32	s15, s0
 8001c58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c5c:	ee17 3a90 	vmov	r3, s15
 8001c60:	613b      	str	r3, [r7, #16]
			R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8001c62:	4b2c      	ldr	r3, [pc, #176]	@ (8001d14 <FR+0x120>)
 8001c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f7fe ffbc 	bl	8000be8 <__aeabi_d2f>
 8001c70:	4603      	mov	r3, r0
 8001c72:	ee00 3a10 	vmov	s0, r3
 8001c76:	4825      	ldr	r0, [pc, #148]	@ (8001d0c <FR+0x118>)
 8001c78:	f7ff fc9a 	bl	80015b0 <PID_Update>
 8001c7c:	eef0 7a40 	vmov.f32	s15, s0
 8001c80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c84:	ee17 3a90 	vmov	r3, s15
 8001c88:	60fb      	str	r3, [r7, #12]
			osDelay(10);
 8001c8a:	200a      	movs	r0, #10
 8001c8c:	f008 fdbc 	bl	800a808 <osDelay>
			set_motor_pwm(L, R);
 8001c90:	68f9      	ldr	r1, [r7, #12]
 8001c92:	6938      	ldr	r0, [r7, #16]
 8001c94:	f000 fd56 	bl	8002744 <set_motor_pwm>
		}

		//osDelay(10);

	}while(!(yaw > target - 2.0f && yaw < target + 2.0f));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	ee07 3a90 	vmov	s15, r3
 8001c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001ca6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001caa:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <FR+0x124>)
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb8:	bf4c      	ite	mi
 8001cba:	2301      	movmi	r3, #1
 8001cbc:	2300      	movpl	r3, #0
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	f083 0301 	eor.w	r3, r3, #1
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d19e      	bne.n	8001c08 <FR+0x14>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	ee07 3a90 	vmov	s15, r3
 8001cd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001cd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8001d18 <FR+0x124>)
 8001cde:	edd3 7a00 	vldr	s15, [r3]
 8001ce2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cea:	bfcc      	ite	gt
 8001cec:	2301      	movgt	r3, #1
 8001cee:	2300      	movle	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	f083 0301 	eor.w	r3, r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d185      	bne.n	8001c08 <FR+0x14>
	Motor_Stop();
 8001cfc:	f001 fe9c 	bl	8003a38 <Motor_Stop>
}
 8001d00:	bf00      	nop
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000594 	.word	0x20000594
 8001d0c:	200005bc 	.word	0x200005bc
 8001d10:	20000568 	.word	0x20000568
 8001d14:	20000570 	.word	0x20000570
 8001d18:	20000590 	.word	0x20000590

08001d1c <FRight>:
void FRight(int target)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	//		set_servo_angle(Left);
	//		osDelay(300);
	//		//resetYaw();
	//		bTurn=0;
	//	}
	uint8_t bTurn=1;
 8001d24:	2301      	movs	r3, #1
 8001d26:	75fb      	strb	r3, [r7, #23]
	int32_t L=0,R=0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
	//osDelay(10);

	do
	{
		if(bTurn)
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00b      	beq.n	8001d4e <FRight+0x32>
		{
			set_servo_angle(Right);
 8001d36:	2014      	movs	r0, #20
 8001d38:	f000 fd4c 	bl	80027d4 <set_servo_angle>
			osDelay(350);
 8001d3c:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8001d40:	f008 fd62 	bl	800a808 <osDelay>
			bTurn=0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	75fb      	strb	r3, [r7, #23]
			//osDelay(300);
			resetYaw();
 8001d48:	f7ff fd54 	bl	80017f4 <resetYaw>
 8001d4c:	e037      	b.n	8001dbe <FRight+0xa2>
		} else{
			updateYaw();
 8001d4e:	f7ff fd77 	bl	8001840 <updateYaw>

			LMotorPID.setpoint=3;
 8001d52:	4b37      	ldr	r3, [pc, #220]	@ (8001e30 <FRight+0x114>)
 8001d54:	4a37      	ldr	r2, [pc, #220]	@ (8001e34 <FRight+0x118>)
 8001d56:	60da      	str	r2, [r3, #12]
			RMotorPID.setpoint=1;
 8001d58:	4b37      	ldr	r3, [pc, #220]	@ (8001e38 <FRight+0x11c>)
 8001d5a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001d5e:	60da      	str	r2, [r3, #12]
			L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8001d60:	4b36      	ldr	r3, [pc, #216]	@ (8001e3c <FRight+0x120>)
 8001d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f7fe ff3d 	bl	8000be8 <__aeabi_d2f>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	ee00 3a10 	vmov	s0, r3
 8001d74:	482e      	ldr	r0, [pc, #184]	@ (8001e30 <FRight+0x114>)
 8001d76:	f7ff fc1b 	bl	80015b0 <PID_Update>
 8001d7a:	eef0 7a40 	vmov.f32	s15, s0
 8001d7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d82:	ee17 3a90 	vmov	r3, s15
 8001d86:	613b      	str	r3, [r7, #16]
			R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8001d88:	4b2d      	ldr	r3, [pc, #180]	@ (8001e40 <FRight+0x124>)
 8001d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8e:	4610      	mov	r0, r2
 8001d90:	4619      	mov	r1, r3
 8001d92:	f7fe ff29 	bl	8000be8 <__aeabi_d2f>
 8001d96:	4603      	mov	r3, r0
 8001d98:	ee00 3a10 	vmov	s0, r3
 8001d9c:	4826      	ldr	r0, [pc, #152]	@ (8001e38 <FRight+0x11c>)
 8001d9e:	f7ff fc07 	bl	80015b0 <PID_Update>
 8001da2:	eef0 7a40 	vmov.f32	s15, s0
 8001da6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001daa:	ee17 3a90 	vmov	r3, s15
 8001dae:	60fb      	str	r3, [r7, #12]
			osDelay(10);
 8001db0:	200a      	movs	r0, #10
 8001db2:	f008 fd29 	bl	800a808 <osDelay>
			set_motor_pwm(L, R);
 8001db6:	68f9      	ldr	r1, [r7, #12]
 8001db8:	6938      	ldr	r0, [r7, #16]
 8001dba:	f000 fcc3 	bl	8002744 <set_motor_pwm>
		}

		//osDelay(10);

	}while(!(yaw > target - 2.0f && yaw < target + 2.0f));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001dcc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e44 <FRight+0x128>)
 8001dd2:	edd3 7a00 	vldr	s15, [r3]
 8001dd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dde:	bf4c      	ite	mi
 8001de0:	2301      	movmi	r3, #1
 8001de2:	2300      	movpl	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	f083 0301 	eor.w	r3, r3, #1
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d19f      	bne.n	8001d30 <FRight+0x14>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	ee07 3a90 	vmov	s15, r3
 8001df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dfa:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001dfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001e02:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <FRight+0x128>)
 8001e04:	edd3 7a00 	vldr	s15, [r3]
 8001e08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e10:	bfcc      	ite	gt
 8001e12:	2301      	movgt	r3, #1
 8001e14:	2300      	movle	r3, #0
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f083 0301 	eor.w	r3, r3, #1
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d186      	bne.n	8001d30 <FRight+0x14>
	Motor_Stop();
 8001e22:	f001 fe09 	bl	8003a38 <Motor_Stop>
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000594 	.word	0x20000594
 8001e34:	40400000 	.word	0x40400000
 8001e38:	200005bc 	.word	0x200005bc
 8001e3c:	20000568 	.word	0x20000568
 8001e40:	20000570 	.word	0x20000570
 8001e44:	20000590 	.word	0x20000590

08001e48 <BIR>:
void BIR(int target,int IR)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
	Set_Motor_Direction(0,0);
 8001e52:	2100      	movs	r1, #0
 8001e54:	2000      	movs	r0, #0
 8001e56:	f7ff fc7b 	bl	8001750 <Set_Motor_Direction>
	distanceTraveled=0;
 8001e5a:	4b44      	ldr	r3, [pc, #272]	@ (8001f6c <BIR+0x124>)
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
	int pass=0,IRUsed;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
	uint8_t bTurn=1;
 8001e66:	2301      	movs	r3, #1
 8001e68:	76fb      	strb	r3, [r7, #27]
	int32_t L=0,R=0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
	do
	{
		if(IR==0)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d103      	bne.n	8001e80 <BIR+0x38>
		{
			IRUsed=iDistanceL;
 8001e78:	4b3d      	ldr	r3, [pc, #244]	@ (8001f70 <BIR+0x128>)
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	e005      	b.n	8001e8c <BIR+0x44>
		}
		else if(IR==1){
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d102      	bne.n	8001e8c <BIR+0x44>
			IRUsed=iDistanceR;
 8001e86:	4b3b      	ldr	r3, [pc, #236]	@ (8001f74 <BIR+0x12c>)
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	61fb      	str	r3, [r7, #28]
		}
		if(bTurn)
 8001e8c:	7efb      	ldrb	r3, [r7, #27]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d009      	beq.n	8001ea6 <BIR+0x5e>
		{
			set_servo_angle(Center);
 8001e92:	205f      	movs	r0, #95	@ 0x5f
 8001e94:	f000 fc9e 	bl	80027d4 <set_servo_angle>
			bTurn=0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	76fb      	strb	r3, [r7, #27]
			osDelay(250);
 8001e9c:	20fa      	movs	r0, #250	@ 0xfa
 8001e9e:	f008 fcb3 	bl	800a808 <osDelay>
			resetYaw();
 8001ea2:	f7ff fca7 	bl	80017f4 <resetYaw>
		}
		updateYaw();
 8001ea6:	f7ff fccb 	bl	8001840 <updateYaw>
		//osDelay(10);
		LMotorPID.setpoint=4;
 8001eaa:	4b33      	ldr	r3, [pc, #204]	@ (8001f78 <BIR+0x130>)
 8001eac:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8001eb0:	60da      	str	r2, [r3, #12]
		RMotorPID.setpoint=4;
 8001eb2:	4b32      	ldr	r3, [pc, #200]	@ (8001f7c <BIR+0x134>)
 8001eb4:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8001eb8:	60da      	str	r2, [r3, #12]
		if(yaw > -0.1f)
 8001eba:	4b31      	ldr	r3, [pc, #196]	@ (8001f80 <BIR+0x138>)
 8001ebc:	edd3 7a00 	vldr	s15, [r3]
 8001ec0:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001f84 <BIR+0x13c>
 8001ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ecc:	dd03      	ble.n	8001ed6 <BIR+0x8e>
		{
			set_servo_angle(Slight_Right);
 8001ece:	205a      	movs	r0, #90	@ 0x5a
 8001ed0:	f000 fc80 	bl	80027d4 <set_servo_angle>
 8001ed4:	e00c      	b.n	8001ef0 <BIR+0xa8>
		}
		else if(yaw < 0.1f)
 8001ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f80 <BIR+0x138>)
 8001ed8:	edd3 7a00 	vldr	s15, [r3]
 8001edc:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001f88 <BIR+0x140>
 8001ee0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ee8:	d502      	bpl.n	8001ef0 <BIR+0xa8>
		{
			set_servo_angle(Slight_Left);
 8001eea:	2064      	movs	r0, #100	@ 0x64
 8001eec:	f000 fc72 	bl	80027d4 <set_servo_angle>
		}

		L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8001ef0:	4b26      	ldr	r3, [pc, #152]	@ (8001f8c <BIR+0x144>)
 8001ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f7fe fe75 	bl	8000be8 <__aeabi_d2f>
 8001efe:	4603      	mov	r3, r0
 8001f00:	ee00 3a10 	vmov	s0, r3
 8001f04:	481c      	ldr	r0, [pc, #112]	@ (8001f78 <BIR+0x130>)
 8001f06:	f7ff fb53 	bl	80015b0 <PID_Update>
 8001f0a:	eef0 7a40 	vmov.f32	s15, s0
 8001f0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f12:	ee17 3a90 	vmov	r3, s15
 8001f16:	613b      	str	r3, [r7, #16]
		R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8001f18:	4b1d      	ldr	r3, [pc, #116]	@ (8001f90 <BIR+0x148>)
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	4610      	mov	r0, r2
 8001f20:	4619      	mov	r1, r3
 8001f22:	f7fe fe61 	bl	8000be8 <__aeabi_d2f>
 8001f26:	4603      	mov	r3, r0
 8001f28:	ee00 3a10 	vmov	s0, r3
 8001f2c:	4813      	ldr	r0, [pc, #76]	@ (8001f7c <BIR+0x134>)
 8001f2e:	f7ff fb3f 	bl	80015b0 <PID_Update>
 8001f32:	eef0 7a40 	vmov.f32	s15, s0
 8001f36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f3a:	ee17 3a90 	vmov	r3, s15
 8001f3e:	60fb      	str	r3, [r7, #12]

		set_motor_pwm(L, R);
 8001f40:	68f9      	ldr	r1, [r7, #12]
 8001f42:	6938      	ldr	r0, [r7, #16]
 8001f44:	f000 fbfe 	bl	8002744 <set_motor_pwm>
		osDelay(10);
 8001f48:	200a      	movs	r0, #10
 8001f4a:	f008 fc5d 	bl	800a808 <osDelay>
	}while(IRUsed>target);
 8001f4e:	69fa      	ldr	r2, [r7, #28]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	dc8d      	bgt.n	8001e72 <BIR+0x2a>
	Motor_Stop();
 8001f56:	f001 fd6f 	bl	8003a38 <Motor_Stop>
	Set_Motor_Direction(1,1);
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	f7ff fbf7 	bl	8001750 <Set_Motor_Direction>
}
 8001f62:	bf00      	nop
 8001f64:	3720      	adds	r7, #32
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000230 	.word	0x20000230
 8001f70:	20000248 	.word	0x20000248
 8001f74:	2000024a 	.word	0x2000024a
 8001f78:	20000594 	.word	0x20000594
 8001f7c:	200005bc 	.word	0x200005bc
 8001f80:	20000590 	.word	0x20000590
 8001f84:	bdcccccd 	.word	0xbdcccccd
 8001f88:	3dcccccd 	.word	0x3dcccccd
 8001f8c:	20000568 	.word	0x20000568
 8001f90:	20000570 	.word	0x20000570

08001f94 <FIR2>:
void FIR2(int target,int IR)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
	distanceTraveled=0;
 8001f9e:	4b5d      	ldr	r3, [pc, #372]	@ (8002114 <FIR2+0x180>)
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
	int pass=0,IRUsed;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
	uint8_t bTurn=1;
 8001faa:	2301      	movs	r3, #1
 8001fac:	76fb      	strb	r3, [r7, #27]
	int32_t L=0,R=0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
	do
	{
		if(IR==0)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d103      	bne.n	8001fc4 <FIR2+0x30>
		{
			IRUsed=iDistanceL;
 8001fbc:	4b56      	ldr	r3, [pc, #344]	@ (8002118 <FIR2+0x184>)
 8001fbe:	881b      	ldrh	r3, [r3, #0]
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	e005      	b.n	8001fd0 <FIR2+0x3c>
		}
		else if(IR==1){
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d102      	bne.n	8001fd0 <FIR2+0x3c>
			IRUsed=iDistanceR;
 8001fca:	4b54      	ldr	r3, [pc, #336]	@ (800211c <FIR2+0x188>)
 8001fcc:	881b      	ldrh	r3, [r3, #0]
 8001fce:	61fb      	str	r3, [r7, #28]
		}
		if(bTurn)
 8001fd0:	7efb      	ldrb	r3, [r7, #27]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d009      	beq.n	8001fea <FIR2+0x56>
		{
			set_servo_angle(Center);
 8001fd6:	205f      	movs	r0, #95	@ 0x5f
 8001fd8:	f000 fbfc 	bl	80027d4 <set_servo_angle>
			bTurn=0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	76fb      	strb	r3, [r7, #27]
			osDelay(250);
 8001fe0:	20fa      	movs	r0, #250	@ 0xfa
 8001fe2:	f008 fc11 	bl	800a808 <osDelay>
			resetYaw();
 8001fe6:	f7ff fc05 	bl	80017f4 <resetYaw>
		}
		updateYaw();
 8001fea:	f7ff fc29 	bl	8001840 <updateYaw>
		//osDelay(10);
		LMotorPID.setpoint=3;
 8001fee:	4b4c      	ldr	r3, [pc, #304]	@ (8002120 <FIR2+0x18c>)
 8001ff0:	4a4c      	ldr	r2, [pc, #304]	@ (8002124 <FIR2+0x190>)
 8001ff2:	60da      	str	r2, [r3, #12]
		RMotorPID.setpoint=3;
 8001ff4:	4b4c      	ldr	r3, [pc, #304]	@ (8002128 <FIR2+0x194>)
 8001ff6:	4a4b      	ldr	r2, [pc, #300]	@ (8002124 <FIR2+0x190>)
 8001ff8:	60da      	str	r2, [r3, #12]
		if(yaw > -0.1f)
 8001ffa:	4b4c      	ldr	r3, [pc, #304]	@ (800212c <FIR2+0x198>)
 8001ffc:	edd3 7a00 	vldr	s15, [r3]
 8002000:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8002130 <FIR2+0x19c>
 8002004:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800200c:	dd03      	ble.n	8002016 <FIR2+0x82>
		{
			set_servo_angle(Slight_Right);
 800200e:	205a      	movs	r0, #90	@ 0x5a
 8002010:	f000 fbe0 	bl	80027d4 <set_servo_angle>
 8002014:	e00c      	b.n	8002030 <FIR2+0x9c>
		}
		else if(yaw < 0.1f)
 8002016:	4b45      	ldr	r3, [pc, #276]	@ (800212c <FIR2+0x198>)
 8002018:	edd3 7a00 	vldr	s15, [r3]
 800201c:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8002134 <FIR2+0x1a0>
 8002020:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002028:	d502      	bpl.n	8002030 <FIR2+0x9c>
		{
			set_servo_angle(Slight_Left);
 800202a:	2064      	movs	r0, #100	@ 0x64
 800202c:	f000 fbd2 	bl	80027d4 <set_servo_angle>
		}

		L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8002030:	4b41      	ldr	r3, [pc, #260]	@ (8002138 <FIR2+0x1a4>)
 8002032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	f7fe fdd5 	bl	8000be8 <__aeabi_d2f>
 800203e:	4603      	mov	r3, r0
 8002040:	ee00 3a10 	vmov	s0, r3
 8002044:	4836      	ldr	r0, [pc, #216]	@ (8002120 <FIR2+0x18c>)
 8002046:	f7ff fab3 	bl	80015b0 <PID_Update>
 800204a:	eef0 7a40 	vmov.f32	s15, s0
 800204e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002052:	ee17 3a90 	vmov	r3, s15
 8002056:	613b      	str	r3, [r7, #16]
		R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8002058:	4b38      	ldr	r3, [pc, #224]	@ (800213c <FIR2+0x1a8>)
 800205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205e:	4610      	mov	r0, r2
 8002060:	4619      	mov	r1, r3
 8002062:	f7fe fdc1 	bl	8000be8 <__aeabi_d2f>
 8002066:	4603      	mov	r3, r0
 8002068:	ee00 3a10 	vmov	s0, r3
 800206c:	482e      	ldr	r0, [pc, #184]	@ (8002128 <FIR2+0x194>)
 800206e:	f7ff fa9f 	bl	80015b0 <PID_Update>
 8002072:	eef0 7a40 	vmov.f32	s15, s0
 8002076:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800207a:	ee17 3a90 	vmov	r3, s15
 800207e:	60fb      	str	r3, [r7, #12]

		set_motor_pwm(L, R);
 8002080:	68f9      	ldr	r1, [r7, #12]
 8002082:	6938      	ldr	r0, [r7, #16]
 8002084:	f000 fb5e 	bl	8002744 <set_motor_pwm>
		osDelay(10);
 8002088:	200a      	movs	r0, #10
 800208a:	f008 fbbd 	bl	800a808 <osDelay>
	}while(IRUsed<target);
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	429a      	cmp	r2, r3
 8002094:	db8f      	blt.n	8001fb6 <FIR2+0x22>
	//reverse=distanceTraveled-40;//-50;
	if(distanceTraveled<50){
 8002096:	4b1f      	ldr	r3, [pc, #124]	@ (8002114 <FIR2+0x180>)
 8002098:	edd3 7a00 	vldr	s15, [r3]
 800209c:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8002140 <FIR2+0x1ac>
 80020a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a8:	d514      	bpl.n	80020d4 <FIR2+0x140>
		reverse=(distanceTraveled+10)/2;
 80020aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002114 <FIR2+0x180>)
 80020ac:	edd3 7a00 	vldr	s15, [r3]
 80020b0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80020b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80020b8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80020bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020c4:	ee17 2a90 	vmov	r2, s15
 80020c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002144 <FIR2+0x1b0>)
 80020ca:	601a      	str	r2, [r3, #0]
		adjustment=0;
 80020cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002148 <FIR2+0x1b4>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
 80020d2:	e019      	b.n	8002108 <FIR2+0x174>
	}
	else if(distanceTraveled>70){
 80020d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002114 <FIR2+0x180>)
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800214c <FIR2+0x1b8>
 80020de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020e6:	dd0f      	ble.n	8002108 <FIR2+0x174>
		reverse=(distanceTraveled)/2;
 80020e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002114 <FIR2+0x180>)
 80020ea:	ed93 7a00 	vldr	s14, [r3]
 80020ee:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80020f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020fa:	ee17 2a90 	vmov	r2, s15
 80020fe:	4b11      	ldr	r3, [pc, #68]	@ (8002144 <FIR2+0x1b0>)
 8002100:	601a      	str	r2, [r3, #0]
		adjustment=1;
 8002102:	4b11      	ldr	r3, [pc, #68]	@ (8002148 <FIR2+0x1b4>)
 8002104:	2201      	movs	r2, #1
 8002106:	601a      	str	r2, [r3, #0]
	}
	Motor_Stop();
 8002108:	f001 fc96 	bl	8003a38 <Motor_Stop>
}
 800210c:	bf00      	nop
 800210e:	3720      	adds	r7, #32
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000230 	.word	0x20000230
 8002118:	20000248 	.word	0x20000248
 800211c:	2000024a 	.word	0x2000024a
 8002120:	20000594 	.word	0x20000594
 8002124:	40400000 	.word	0x40400000
 8002128:	200005bc 	.word	0x200005bc
 800212c:	20000590 	.word	0x20000590
 8002130:	bdcccccd 	.word	0xbdcccccd
 8002134:	3dcccccd 	.word	0x3dcccccd
 8002138:	20000568 	.word	0x20000568
 800213c:	20000570 	.word	0x20000570
 8002140:	42480000 	.word	0x42480000
 8002144:	20000244 	.word	0x20000244
 8002148:	20000004 	.word	0x20000004
 800214c:	428c0000 	.word	0x428c0000

08002150 <FIR>:

void FIR(int target,int IR)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
	distanceTraveled=0;
 800215a:	4b41      	ldr	r3, [pc, #260]	@ (8002260 <FIR+0x110>)
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
	int pass=0,IRUsed;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
	uint8_t bTurn=1;
 8002166:	2301      	movs	r3, #1
 8002168:	76fb      	strb	r3, [r7, #27]
	int32_t L=0,R=0;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
	do
	{
		if(IR==0)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d103      	bne.n	8002180 <FIR+0x30>
		{
			IRUsed=iDistanceL;
 8002178:	4b3a      	ldr	r3, [pc, #232]	@ (8002264 <FIR+0x114>)
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	e005      	b.n	800218c <FIR+0x3c>
		}
		else if(IR==1){
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d102      	bne.n	800218c <FIR+0x3c>
			IRUsed=iDistanceR;
 8002186:	4b38      	ldr	r3, [pc, #224]	@ (8002268 <FIR+0x118>)
 8002188:	881b      	ldrh	r3, [r3, #0]
 800218a:	61fb      	str	r3, [r7, #28]
		}
		if(bTurn)
 800218c:	7efb      	ldrb	r3, [r7, #27]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <FIR+0x56>
		{
			set_servo_angle(Center);
 8002192:	205f      	movs	r0, #95	@ 0x5f
 8002194:	f000 fb1e 	bl	80027d4 <set_servo_angle>
			bTurn=0;
 8002198:	2300      	movs	r3, #0
 800219a:	76fb      	strb	r3, [r7, #27]
			osDelay(250);
 800219c:	20fa      	movs	r0, #250	@ 0xfa
 800219e:	f008 fb33 	bl	800a808 <osDelay>
			resetYaw();
 80021a2:	f7ff fb27 	bl	80017f4 <resetYaw>
		}
		updateYaw();
 80021a6:	f7ff fb4b 	bl	8001840 <updateYaw>
		//osDelay(10);
		LMotorPID.setpoint=3;
 80021aa:	4b30      	ldr	r3, [pc, #192]	@ (800226c <FIR+0x11c>)
 80021ac:	4a30      	ldr	r2, [pc, #192]	@ (8002270 <FIR+0x120>)
 80021ae:	60da      	str	r2, [r3, #12]
		RMotorPID.setpoint=3;
 80021b0:	4b30      	ldr	r3, [pc, #192]	@ (8002274 <FIR+0x124>)
 80021b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002270 <FIR+0x120>)
 80021b4:	60da      	str	r2, [r3, #12]
		if(yaw > -0.1f)
 80021b6:	4b30      	ldr	r3, [pc, #192]	@ (8002278 <FIR+0x128>)
 80021b8:	edd3 7a00 	vldr	s15, [r3]
 80021bc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800227c <FIR+0x12c>
 80021c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c8:	dd03      	ble.n	80021d2 <FIR+0x82>
		{
			set_servo_angle(Slight_Right);
 80021ca:	205a      	movs	r0, #90	@ 0x5a
 80021cc:	f000 fb02 	bl	80027d4 <set_servo_angle>
 80021d0:	e00c      	b.n	80021ec <FIR+0x9c>
		}
		else if(yaw < 0.1f)
 80021d2:	4b29      	ldr	r3, [pc, #164]	@ (8002278 <FIR+0x128>)
 80021d4:	edd3 7a00 	vldr	s15, [r3]
 80021d8:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002280 <FIR+0x130>
 80021dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e4:	d502      	bpl.n	80021ec <FIR+0x9c>
		{
			set_servo_angle(Slight_Left);
 80021e6:	2064      	movs	r0, #100	@ 0x64
 80021e8:	f000 faf4 	bl	80027d4 <set_servo_angle>
		}

		L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 80021ec:	4b25      	ldr	r3, [pc, #148]	@ (8002284 <FIR+0x134>)
 80021ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f2:	4610      	mov	r0, r2
 80021f4:	4619      	mov	r1, r3
 80021f6:	f7fe fcf7 	bl	8000be8 <__aeabi_d2f>
 80021fa:	4603      	mov	r3, r0
 80021fc:	ee00 3a10 	vmov	s0, r3
 8002200:	481a      	ldr	r0, [pc, #104]	@ (800226c <FIR+0x11c>)
 8002202:	f7ff f9d5 	bl	80015b0 <PID_Update>
 8002206:	eef0 7a40 	vmov.f32	s15, s0
 800220a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800220e:	ee17 3a90 	vmov	r3, s15
 8002212:	613b      	str	r3, [r7, #16]
		R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8002214:	4b1c      	ldr	r3, [pc, #112]	@ (8002288 <FIR+0x138>)
 8002216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	f7fe fce3 	bl	8000be8 <__aeabi_d2f>
 8002222:	4603      	mov	r3, r0
 8002224:	ee00 3a10 	vmov	s0, r3
 8002228:	4812      	ldr	r0, [pc, #72]	@ (8002274 <FIR+0x124>)
 800222a:	f7ff f9c1 	bl	80015b0 <PID_Update>
 800222e:	eef0 7a40 	vmov.f32	s15, s0
 8002232:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002236:	ee17 3a90 	vmov	r3, s15
 800223a:	60fb      	str	r3, [r7, #12]

		set_motor_pwm(L, R);
 800223c:	68f9      	ldr	r1, [r7, #12]
 800223e:	6938      	ldr	r0, [r7, #16]
 8002240:	f000 fa80 	bl	8002744 <set_motor_pwm>
		osDelay(10);
 8002244:	200a      	movs	r0, #10
 8002246:	f008 fadf 	bl	800a808 <osDelay>
	}while(IRUsed<target);
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	429a      	cmp	r2, r3
 8002250:	db8f      	blt.n	8002172 <FIR+0x22>
	Motor_Stop();
 8002252:	f001 fbf1 	bl	8003a38 <Motor_Stop>
}
 8002256:	bf00      	nop
 8002258:	3720      	adds	r7, #32
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000230 	.word	0x20000230
 8002264:	20000248 	.word	0x20000248
 8002268:	2000024a 	.word	0x2000024a
 800226c:	20000594 	.word	0x20000594
 8002270:	40400000 	.word	0x40400000
 8002274:	200005bc 	.word	0x200005bc
 8002278:	20000590 	.word	0x20000590
 800227c:	bdcccccd 	.word	0xbdcccccd
 8002280:	3dcccccd 	.word	0x3dcccccd
 8002284:	20000568 	.word	0x20000568
 8002288:	20000570 	.word	0x20000570

0800228c <F>:
//Forward til Ultra sonic reach target
void F(int target)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

	uint8_t bTurn=1;
 8002294:	2301      	movs	r3, #1
 8002296:	75fb      	strb	r3, [r7, #23]
	int32_t L=0,R=0;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]

	do
	{
		if(bTurn)
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d009      	beq.n	80022ba <F+0x2e>
		{
			set_servo_angle(Center);
 80022a6:	205f      	movs	r0, #95	@ 0x5f
 80022a8:	f000 fa94 	bl	80027d4 <set_servo_angle>
			bTurn=0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	75fb      	strb	r3, [r7, #23]
			osDelay(250);
 80022b0:	20fa      	movs	r0, #250	@ 0xfa
 80022b2:	f008 faa9 	bl	800a808 <osDelay>
			resetYaw();
 80022b6:	f7ff fa9d 	bl	80017f4 <resetYaw>
		}
		updateYaw();
 80022ba:	f7ff fac1 	bl	8001840 <updateYaw>
		//osDelay(10);
		LMotorPID.setpoint=3.5;
 80022be:	4b31      	ldr	r3, [pc, #196]	@ (8002384 <F+0xf8>)
 80022c0:	4a31      	ldr	r2, [pc, #196]	@ (8002388 <F+0xfc>)
 80022c2:	60da      	str	r2, [r3, #12]
		RMotorPID.setpoint=3.5;
 80022c4:	4b31      	ldr	r3, [pc, #196]	@ (800238c <F+0x100>)
 80022c6:	4a30      	ldr	r2, [pc, #192]	@ (8002388 <F+0xfc>)
 80022c8:	60da      	str	r2, [r3, #12]
		if(yaw > -0.1f)
 80022ca:	4b31      	ldr	r3, [pc, #196]	@ (8002390 <F+0x104>)
 80022cc:	edd3 7a00 	vldr	s15, [r3]
 80022d0:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8002394 <F+0x108>
 80022d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022dc:	dd03      	ble.n	80022e6 <F+0x5a>
		{
			set_servo_angle(Slight_Right);
 80022de:	205a      	movs	r0, #90	@ 0x5a
 80022e0:	f000 fa78 	bl	80027d4 <set_servo_angle>
 80022e4:	e00c      	b.n	8002300 <F+0x74>
		}
		else if(yaw < 0.1f)
 80022e6:	4b2a      	ldr	r3, [pc, #168]	@ (8002390 <F+0x104>)
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002398 <F+0x10c>
 80022f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f8:	d502      	bpl.n	8002300 <F+0x74>
		{
			set_servo_angle(Slight_Left);
 80022fa:	2064      	movs	r0, #100	@ 0x64
 80022fc:	f000 fa6a 	bl	80027d4 <set_servo_angle>
		}

		L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8002300:	4b26      	ldr	r3, [pc, #152]	@ (800239c <F+0x110>)
 8002302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002306:	4610      	mov	r0, r2
 8002308:	4619      	mov	r1, r3
 800230a:	f7fe fc6d 	bl	8000be8 <__aeabi_d2f>
 800230e:	4603      	mov	r3, r0
 8002310:	ee00 3a10 	vmov	s0, r3
 8002314:	481b      	ldr	r0, [pc, #108]	@ (8002384 <F+0xf8>)
 8002316:	f7ff f94b 	bl	80015b0 <PID_Update>
 800231a:	eef0 7a40 	vmov.f32	s15, s0
 800231e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002322:	ee17 3a90 	vmov	r3, s15
 8002326:	613b      	str	r3, [r7, #16]
		R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8002328:	4b1d      	ldr	r3, [pc, #116]	@ (80023a0 <F+0x114>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	4610      	mov	r0, r2
 8002330:	4619      	mov	r1, r3
 8002332:	f7fe fc59 	bl	8000be8 <__aeabi_d2f>
 8002336:	4603      	mov	r3, r0
 8002338:	ee00 3a10 	vmov	s0, r3
 800233c:	4813      	ldr	r0, [pc, #76]	@ (800238c <F+0x100>)
 800233e:	f7ff f937 	bl	80015b0 <PID_Update>
 8002342:	eef0 7a40 	vmov.f32	s15, s0
 8002346:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800234a:	ee17 3a90 	vmov	r3, s15
 800234e:	60fb      	str	r3, [r7, #12]

		set_motor_pwm(L, R);
 8002350:	68f9      	ldr	r1, [r7, #12]
 8002352:	6938      	ldr	r0, [r7, #16]
 8002354:	f000 f9f6 	bl	8002744 <set_motor_pwm>
		osDelay(10);
 8002358:	200a      	movs	r0, #10
 800235a:	f008 fa55 	bl	800a808 <osDelay>
	}while(g_distanceUS>target);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	ee07 3a90 	vmov	s15, r3
 8002364:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002368:	4b0e      	ldr	r3, [pc, #56]	@ (80023a4 <F+0x118>)
 800236a:	edd3 7a00 	vldr	s15, [r3]
 800236e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002376:	d493      	bmi.n	80022a0 <F+0x14>

	Motor_Stop();
 8002378:	f001 fb5e 	bl	8003a38 <Motor_Stop>
}
 800237c:	bf00      	nop
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000594 	.word	0x20000594
 8002388:	40600000 	.word	0x40600000
 800238c:	200005bc 	.word	0x200005bc
 8002390:	20000590 	.word	0x20000590
 8002394:	bdcccccd 	.word	0xbdcccccd
 8002398:	3dcccccd 	.word	0x3dcccccd
 800239c:	20000568 	.word	0x20000568
 80023a0:	20000570 	.word	0x20000570
 80023a4:	20000550 	.word	0x20000550

080023a8 <B>:
//Back using the Ultra sonic
void B(int target)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

	uint8_t bTurn=1;
 80023b0:	2301      	movs	r3, #1
 80023b2:	75fb      	strb	r3, [r7, #23]
	int32_t L=0,R=0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	2300      	movs	r3, #0
 80023ba:	60fb      	str	r3, [r7, #12]
Set_Motor_Direction(0, 0);
 80023bc:	2100      	movs	r1, #0
 80023be:	2000      	movs	r0, #0
 80023c0:	f7ff f9c6 	bl	8001750 <Set_Motor_Direction>
	do
	{
		if(bTurn)
 80023c4:	7dfb      	ldrb	r3, [r7, #23]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <B+0x36>
		{
			set_servo_angle(Center);
 80023ca:	205f      	movs	r0, #95	@ 0x5f
 80023cc:	f000 fa02 	bl	80027d4 <set_servo_angle>
			bTurn=0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	75fb      	strb	r3, [r7, #23]
			osDelay(250);
 80023d4:	20fa      	movs	r0, #250	@ 0xfa
 80023d6:	f008 fa17 	bl	800a808 <osDelay>
			resetYaw();
 80023da:	f7ff fa0b 	bl	80017f4 <resetYaw>
		}
		updateYaw();
 80023de:	f7ff fa2f 	bl	8001840 <updateYaw>
		//osDelay(10);
		LMotorPID.setpoint=3;
 80023e2:	4b33      	ldr	r3, [pc, #204]	@ (80024b0 <B+0x108>)
 80023e4:	4a33      	ldr	r2, [pc, #204]	@ (80024b4 <B+0x10c>)
 80023e6:	60da      	str	r2, [r3, #12]
		RMotorPID.setpoint=3;
 80023e8:	4b33      	ldr	r3, [pc, #204]	@ (80024b8 <B+0x110>)
 80023ea:	4a32      	ldr	r2, [pc, #200]	@ (80024b4 <B+0x10c>)
 80023ec:	60da      	str	r2, [r3, #12]
		if(yaw > -0.1f)
 80023ee:	4b33      	ldr	r3, [pc, #204]	@ (80024bc <B+0x114>)
 80023f0:	edd3 7a00 	vldr	s15, [r3]
 80023f4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80024c0 <B+0x118>
 80023f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002400:	dd03      	ble.n	800240a <B+0x62>
		{
			set_servo_angle(Slight_Right);
 8002402:	205a      	movs	r0, #90	@ 0x5a
 8002404:	f000 f9e6 	bl	80027d4 <set_servo_angle>
 8002408:	e00c      	b.n	8002424 <B+0x7c>
		}
		else if(yaw < 0.1f)
 800240a:	4b2c      	ldr	r3, [pc, #176]	@ (80024bc <B+0x114>)
 800240c:	edd3 7a00 	vldr	s15, [r3]
 8002410:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80024c4 <B+0x11c>
 8002414:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241c:	d502      	bpl.n	8002424 <B+0x7c>
		{
			set_servo_angle(Slight_Left);
 800241e:	2064      	movs	r0, #100	@ 0x64
 8002420:	f000 f9d8 	bl	80027d4 <set_servo_angle>
		}

		L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8002424:	4b28      	ldr	r3, [pc, #160]	@ (80024c8 <B+0x120>)
 8002426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242a:	4610      	mov	r0, r2
 800242c:	4619      	mov	r1, r3
 800242e:	f7fe fbdb 	bl	8000be8 <__aeabi_d2f>
 8002432:	4603      	mov	r3, r0
 8002434:	ee00 3a10 	vmov	s0, r3
 8002438:	481d      	ldr	r0, [pc, #116]	@ (80024b0 <B+0x108>)
 800243a:	f7ff f8b9 	bl	80015b0 <PID_Update>
 800243e:	eef0 7a40 	vmov.f32	s15, s0
 8002442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002446:	ee17 3a90 	vmov	r3, s15
 800244a:	613b      	str	r3, [r7, #16]
		R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 800244c:	4b1f      	ldr	r3, [pc, #124]	@ (80024cc <B+0x124>)
 800244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	f7fe fbc7 	bl	8000be8 <__aeabi_d2f>
 800245a:	4603      	mov	r3, r0
 800245c:	ee00 3a10 	vmov	s0, r3
 8002460:	4815      	ldr	r0, [pc, #84]	@ (80024b8 <B+0x110>)
 8002462:	f7ff f8a5 	bl	80015b0 <PID_Update>
 8002466:	eef0 7a40 	vmov.f32	s15, s0
 800246a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800246e:	ee17 3a90 	vmov	r3, s15
 8002472:	60fb      	str	r3, [r7, #12]

		set_motor_pwm(L, R);
 8002474:	68f9      	ldr	r1, [r7, #12]
 8002476:	6938      	ldr	r0, [r7, #16]
 8002478:	f000 f964 	bl	8002744 <set_motor_pwm>
		osDelay(10);
 800247c:	200a      	movs	r0, #10
 800247e:	f008 f9c3 	bl	800a808 <osDelay>
	}while(g_distanceUS<target);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	ee07 3a90 	vmov	s15, r3
 8002488:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800248c:	4b10      	ldr	r3, [pc, #64]	@ (80024d0 <B+0x128>)
 800248e:	edd3 7a00 	vldr	s15, [r3]
 8002492:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249a:	dc93      	bgt.n	80023c4 <B+0x1c>

	Motor_Stop();
 800249c:	f001 facc 	bl	8003a38 <Motor_Stop>
	Set_Motor_Direction(1, 1);//set back to forward direction
 80024a0:	2101      	movs	r1, #1
 80024a2:	2001      	movs	r0, #1
 80024a4:	f7ff f954 	bl	8001750 <Set_Motor_Direction>

}
 80024a8:	bf00      	nop
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000594 	.word	0x20000594
 80024b4:	40400000 	.word	0x40400000
 80024b8:	200005bc 	.word	0x200005bc
 80024bc:	20000590 	.word	0x20000590
 80024c0:	bdcccccd 	.word	0xbdcccccd
 80024c4:	3dcccccd 	.word	0x3dcccccd
 80024c8:	20000568 	.word	0x20000568
 80024cc:	20000570 	.word	0x20000570
 80024d0:	20000550 	.word	0x20000550

080024d4 <ForwardDistance>:
void ForwardDistance(int target)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
	distanceTraveled=0;
 80024dc:	4b43      	ldr	r3, [pc, #268]	@ (80025ec <ForwardDistance+0x118>)
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
	Set_Motor_Direction(1, 1);
 80024e4:	2101      	movs	r1, #1
 80024e6:	2001      	movs	r0, #1
 80024e8:	f7ff f932 	bl	8001750 <Set_Motor_Direction>
	uint8_t bTurn=1;
 80024ec:	2301      	movs	r3, #1
 80024ee:	75fb      	strb	r3, [r7, #23]
	int32_t L=0,R=0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]

	do
	{
		if(bTurn)
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00a      	beq.n	8002514 <ForwardDistance+0x40>
		{
			set_servo_angle(Center);
 80024fe:	205f      	movs	r0, #95	@ 0x5f
 8002500:	f000 f968 	bl	80027d4 <set_servo_angle>
			bTurn=0;
 8002504:	2300      	movs	r3, #0
 8002506:	75fb      	strb	r3, [r7, #23]
			osDelay(350);
 8002508:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 800250c:	f008 f97c 	bl	800a808 <osDelay>
			resetYaw();
 8002510:	f7ff f970 	bl	80017f4 <resetYaw>
		}
		updateYaw();
 8002514:	f7ff f994 	bl	8001840 <updateYaw>
		//osDelay(10);
		LMotorPID.setpoint=4;
 8002518:	4b35      	ldr	r3, [pc, #212]	@ (80025f0 <ForwardDistance+0x11c>)
 800251a:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800251e:	60da      	str	r2, [r3, #12]
		RMotorPID.setpoint=4;
 8002520:	4b34      	ldr	r3, [pc, #208]	@ (80025f4 <ForwardDistance+0x120>)
 8002522:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8002526:	60da      	str	r2, [r3, #12]
		if(yaw > -0.1f)
 8002528:	4b33      	ldr	r3, [pc, #204]	@ (80025f8 <ForwardDistance+0x124>)
 800252a:	edd3 7a00 	vldr	s15, [r3]
 800252e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80025fc <ForwardDistance+0x128>
 8002532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800253a:	dd03      	ble.n	8002544 <ForwardDistance+0x70>
		{
			set_servo_angle(Slight_Right);
 800253c:	205a      	movs	r0, #90	@ 0x5a
 800253e:	f000 f949 	bl	80027d4 <set_servo_angle>
 8002542:	e00c      	b.n	800255e <ForwardDistance+0x8a>
		}
		else if(yaw < 0.1f)
 8002544:	4b2c      	ldr	r3, [pc, #176]	@ (80025f8 <ForwardDistance+0x124>)
 8002546:	edd3 7a00 	vldr	s15, [r3]
 800254a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002600 <ForwardDistance+0x12c>
 800254e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002556:	d502      	bpl.n	800255e <ForwardDistance+0x8a>
		{
			set_servo_angle(Slight_Left);
 8002558:	2064      	movs	r0, #100	@ 0x64
 800255a:	f000 f93b 	bl	80027d4 <set_servo_angle>
		}

		L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 800255e:	4b29      	ldr	r3, [pc, #164]	@ (8002604 <ForwardDistance+0x130>)
 8002560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002564:	4610      	mov	r0, r2
 8002566:	4619      	mov	r1, r3
 8002568:	f7fe fb3e 	bl	8000be8 <__aeabi_d2f>
 800256c:	4603      	mov	r3, r0
 800256e:	ee00 3a10 	vmov	s0, r3
 8002572:	481f      	ldr	r0, [pc, #124]	@ (80025f0 <ForwardDistance+0x11c>)
 8002574:	f7ff f81c 	bl	80015b0 <PID_Update>
 8002578:	eef0 7a40 	vmov.f32	s15, s0
 800257c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002580:	ee17 3a90 	vmov	r3, s15
 8002584:	613b      	str	r3, [r7, #16]
		R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 8002586:	4b20      	ldr	r3, [pc, #128]	@ (8002608 <ForwardDistance+0x134>)
 8002588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258c:	4610      	mov	r0, r2
 800258e:	4619      	mov	r1, r3
 8002590:	f7fe fb2a 	bl	8000be8 <__aeabi_d2f>
 8002594:	4603      	mov	r3, r0
 8002596:	ee00 3a10 	vmov	s0, r3
 800259a:	4816      	ldr	r0, [pc, #88]	@ (80025f4 <ForwardDistance+0x120>)
 800259c:	f7ff f808 	bl	80015b0 <PID_Update>
 80025a0:	eef0 7a40 	vmov.f32	s15, s0
 80025a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025a8:	ee17 3a90 	vmov	r3, s15
 80025ac:	60fb      	str	r3, [r7, #12]

		set_motor_pwm(L, R);
 80025ae:	68f9      	ldr	r1, [r7, #12]
 80025b0:	6938      	ldr	r0, [r7, #16]
 80025b2:	f000 f8c7 	bl	8002744 <set_motor_pwm>
		osDelay(10);
 80025b6:	200a      	movs	r0, #10
 80025b8:	f008 f926 	bl	800a808 <osDelay>
	}while(distanceTraveled<target);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	ee07 3a90 	vmov	s15, r3
 80025c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025c6:	4b09      	ldr	r3, [pc, #36]	@ (80025ec <ForwardDistance+0x118>)
 80025c8:	edd3 7a00 	vldr	s15, [r3]
 80025cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d4:	dc90      	bgt.n	80024f8 <ForwardDistance+0x24>

	Motor_Stop();
 80025d6:	f001 fa2f 	bl	8003a38 <Motor_Stop>
	Set_Motor_Direction(1, 1);//set back for forward direction
 80025da:	2101      	movs	r1, #1
 80025dc:	2001      	movs	r0, #1
 80025de:	f7ff f8b7 	bl	8001750 <Set_Motor_Direction>

}
 80025e2:	bf00      	nop
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000230 	.word	0x20000230
 80025f0:	20000594 	.word	0x20000594
 80025f4:	200005bc 	.word	0x200005bc
 80025f8:	20000590 	.word	0x20000590
 80025fc:	bdcccccd 	.word	0xbdcccccd
 8002600:	3dcccccd 	.word	0x3dcccccd
 8002604:	20000568 	.word	0x20000568
 8002608:	20000570 	.word	0x20000570

0800260c <BackDistance>:
//move back by distance
void BackDistance(int target)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	distanceTraveled=0;
 8002614:	4b43      	ldr	r3, [pc, #268]	@ (8002724 <BackDistance+0x118>)
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
	Set_Motor_Direction(0, 0);
 800261c:	2100      	movs	r1, #0
 800261e:	2000      	movs	r0, #0
 8002620:	f7ff f896 	bl	8001750 <Set_Motor_Direction>
	uint8_t bTurn=1;
 8002624:	2301      	movs	r3, #1
 8002626:	75fb      	strb	r3, [r7, #23]
	int32_t L=0,R=0;
 8002628:	2300      	movs	r3, #0
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]

	do
	{
		if(bTurn)
 8002630:	7dfb      	ldrb	r3, [r7, #23]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <BackDistance+0x40>
		{
			set_servo_angle(Center);
 8002636:	205f      	movs	r0, #95	@ 0x5f
 8002638:	f000 f8cc 	bl	80027d4 <set_servo_angle>
			bTurn=0;
 800263c:	2300      	movs	r3, #0
 800263e:	75fb      	strb	r3, [r7, #23]
			osDelay(350);
 8002640:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8002644:	f008 f8e0 	bl	800a808 <osDelay>
			resetYaw();
 8002648:	f7ff f8d4 	bl	80017f4 <resetYaw>
		}
		updateYaw();
 800264c:	f7ff f8f8 	bl	8001840 <updateYaw>
		//osDelay(10);
		LMotorPID.setpoint=4;
 8002650:	4b35      	ldr	r3, [pc, #212]	@ (8002728 <BackDistance+0x11c>)
 8002652:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8002656:	60da      	str	r2, [r3, #12]
		RMotorPID.setpoint=4;
 8002658:	4b34      	ldr	r3, [pc, #208]	@ (800272c <BackDistance+0x120>)
 800265a:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 800265e:	60da      	str	r2, [r3, #12]
		if(yaw > -0.1f)
 8002660:	4b33      	ldr	r3, [pc, #204]	@ (8002730 <BackDistance+0x124>)
 8002662:	edd3 7a00 	vldr	s15, [r3]
 8002666:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8002734 <BackDistance+0x128>
 800266a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800266e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002672:	dd03      	ble.n	800267c <BackDistance+0x70>
		{
			set_servo_angle(Slight_Right);
 8002674:	205a      	movs	r0, #90	@ 0x5a
 8002676:	f000 f8ad 	bl	80027d4 <set_servo_angle>
 800267a:	e00c      	b.n	8002696 <BackDistance+0x8a>
		}
		else if(yaw < 0.1f)
 800267c:	4b2c      	ldr	r3, [pc, #176]	@ (8002730 <BackDistance+0x124>)
 800267e:	edd3 7a00 	vldr	s15, [r3]
 8002682:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002738 <BackDistance+0x12c>
 8002686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800268a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268e:	d502      	bpl.n	8002696 <BackDistance+0x8a>
		{
			set_servo_angle(Slight_Left);
 8002690:	2064      	movs	r0, #100	@ 0x64
 8002692:	f000 f89f 	bl	80027d4 <set_servo_angle>
		}

		L=(int32_t)PID_Update(&LMotorPID, RPS_L);
 8002696:	4b29      	ldr	r3, [pc, #164]	@ (800273c <BackDistance+0x130>)
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	4610      	mov	r0, r2
 800269e:	4619      	mov	r1, r3
 80026a0:	f7fe faa2 	bl	8000be8 <__aeabi_d2f>
 80026a4:	4603      	mov	r3, r0
 80026a6:	ee00 3a10 	vmov	s0, r3
 80026aa:	481f      	ldr	r0, [pc, #124]	@ (8002728 <BackDistance+0x11c>)
 80026ac:	f7fe ff80 	bl	80015b0 <PID_Update>
 80026b0:	eef0 7a40 	vmov.f32	s15, s0
 80026b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026b8:	ee17 3a90 	vmov	r3, s15
 80026bc:	613b      	str	r3, [r7, #16]
		R=(int32_t)PID_Update(&RMotorPID, RPS_R);
 80026be:	4b20      	ldr	r3, [pc, #128]	@ (8002740 <BackDistance+0x134>)
 80026c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c4:	4610      	mov	r0, r2
 80026c6:	4619      	mov	r1, r3
 80026c8:	f7fe fa8e 	bl	8000be8 <__aeabi_d2f>
 80026cc:	4603      	mov	r3, r0
 80026ce:	ee00 3a10 	vmov	s0, r3
 80026d2:	4816      	ldr	r0, [pc, #88]	@ (800272c <BackDistance+0x120>)
 80026d4:	f7fe ff6c 	bl	80015b0 <PID_Update>
 80026d8:	eef0 7a40 	vmov.f32	s15, s0
 80026dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026e0:	ee17 3a90 	vmov	r3, s15
 80026e4:	60fb      	str	r3, [r7, #12]

		set_motor_pwm(L, R);
 80026e6:	68f9      	ldr	r1, [r7, #12]
 80026e8:	6938      	ldr	r0, [r7, #16]
 80026ea:	f000 f82b 	bl	8002744 <set_motor_pwm>
		osDelay(10);
 80026ee:	200a      	movs	r0, #10
 80026f0:	f008 f88a 	bl	800a808 <osDelay>
	}while(distanceTraveled<target);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	ee07 3a90 	vmov	s15, r3
 80026fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026fe:	4b09      	ldr	r3, [pc, #36]	@ (8002724 <BackDistance+0x118>)
 8002700:	edd3 7a00 	vldr	s15, [r3]
 8002704:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270c:	dc90      	bgt.n	8002630 <BackDistance+0x24>

	Motor_Stop();
 800270e:	f001 f993 	bl	8003a38 <Motor_Stop>
	Set_Motor_Direction(1, 1);//set back for forward direction
 8002712:	2101      	movs	r1, #1
 8002714:	2001      	movs	r0, #1
 8002716:	f7ff f81b 	bl	8001750 <Set_Motor_Direction>

}
 800271a:	bf00      	nop
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000230 	.word	0x20000230
 8002728:	20000594 	.word	0x20000594
 800272c:	200005bc 	.word	0x200005bc
 8002730:	20000590 	.word	0x20000590
 8002734:	bdcccccd 	.word	0xbdcccccd
 8002738:	3dcccccd 	.word	0x3dcccccd
 800273c:	20000568 	.word	0x20000568
 8002740:	20000570 	.word	0x20000570

08002744 <set_motor_pwm>:

void set_motor_pwm(int32_t L,int32_t R)
{	//4k max pwm
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]

	pwmValL=L;
 800274e:	4a1e      	ldr	r2, [pc, #120]	@ (80027c8 <set_motor_pwm+0x84>)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6013      	str	r3, [r2, #0]
	pwmValR=R;
 8002754:	4a1d      	ldr	r2, [pc, #116]	@ (80027cc <set_motor_pwm+0x88>)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6013      	str	r3, [r2, #0]
	if(pwmValL<0)
 800275a:	4b1b      	ldr	r3, [pc, #108]	@ (80027c8 <set_motor_pwm+0x84>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	da04      	bge.n	800276c <set_motor_pwm+0x28>
		pwmValL=500;
 8002762:	4b19      	ldr	r3, [pc, #100]	@ (80027c8 <set_motor_pwm+0x84>)
 8002764:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	e009      	b.n	8002780 <set_motor_pwm+0x3c>
	else if(pwmValL>5000)
 800276c:	4b16      	ldr	r3, [pc, #88]	@ (80027c8 <set_motor_pwm+0x84>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002774:	4293      	cmp	r3, r2
 8002776:	dd03      	ble.n	8002780 <set_motor_pwm+0x3c>
		pwmValL=5000;
 8002778:	4b13      	ldr	r3, [pc, #76]	@ (80027c8 <set_motor_pwm+0x84>)
 800277a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800277e:	601a      	str	r2, [r3, #0]

	if(pwmValR<0)
 8002780:	4b12      	ldr	r3, [pc, #72]	@ (80027cc <set_motor_pwm+0x88>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	da04      	bge.n	8002792 <set_motor_pwm+0x4e>
		pwmValR=500;
 8002788:	4b10      	ldr	r3, [pc, #64]	@ (80027cc <set_motor_pwm+0x88>)
 800278a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	e009      	b.n	80027a6 <set_motor_pwm+0x62>
	else if(pwmValR>5000)
 8002792:	4b0e      	ldr	r3, [pc, #56]	@ (80027cc <set_motor_pwm+0x88>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279a:	4293      	cmp	r3, r2
 800279c:	dd03      	ble.n	80027a6 <set_motor_pwm+0x62>
		pwmValR=5000;
 800279e:	4b0b      	ldr	r3, [pc, #44]	@ (80027cc <set_motor_pwm+0x88>)
 80027a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a4:	601a      	str	r2, [r3, #0]

	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValL);
 80027a6:	4b08      	ldr	r3, [pc, #32]	@ (80027c8 <set_motor_pwm+0x84>)
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	4b09      	ldr	r3, [pc, #36]	@ (80027d0 <set_motor_pwm+0x8c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmValR);
 80027b0:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <set_motor_pwm+0x88>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <set_motor_pwm+0x8c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	639a      	str	r2, [r3, #56]	@ 0x38

	osDelay(1);
 80027ba:	2001      	movs	r0, #1
 80027bc:	f008 f824 	bl	800a808 <osDelay>
}
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	200005e4 	.word	0x200005e4
 80027cc:	200005e8 	.word	0x200005e8
 80027d0:	200004a0 	.word	0x200004a0

080027d4 <set_servo_angle>:
		servo_pwm = MAX_SERVO;
	}
	htim1.Instance->CCR4 = servo_pwm;
}
void set_servo_angle(uint8_t value)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	71fb      	strb	r3, [r7, #7]
	if (value > 180) value = 180;
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	2bb4      	cmp	r3, #180	@ 0xb4
 80027e2:	d901      	bls.n	80027e8 <set_servo_angle+0x14>
 80027e4:	23b4      	movs	r3, #180	@ 0xb4
 80027e6:	71fb      	strb	r3, [r7, #7]
	if (value < 0) value = 0;

	servo_pwm = 240 - ((value * (240 - 60)) / 180);
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80027ee:	4a08      	ldr	r2, [pc, #32]	@ (8002810 <set_servo_angle+0x3c>)
 80027f0:	6013      	str	r3, [r2, #0]
    if(servo_pwm > MAX_SERVO)
    {
    	servo_pwm = MAX_SERVO;

    }*/
	angle=value;
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	4a07      	ldr	r2, [pc, #28]	@ (8002814 <set_servo_angle+0x40>)
 80027f6:	6013      	str	r3, [r2, #0]
	htim1.Instance->CCR4 = servo_pwm;
 80027f8:	4b05      	ldr	r3, [pc, #20]	@ (8002810 <set_servo_angle+0x3c>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b06      	ldr	r3, [pc, #24]	@ (8002818 <set_servo_angle+0x44>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	20000018 	.word	0x20000018
 8002814:	200005f0 	.word	0x200005f0
 8002818:	20000338 	.word	0x20000338

0800281c <MoveTo10By10>:
//    {moveRight2Function,30, {MoveTo3, MoveRight2}},    // MoveRight2
//    {moveTo3Function,	30,    {MoveTo3, MoveTo3}}        // MoveTo3
};
State_t *CurrentState=NULL;  // pointer to the current state
void MoveTo10By10()
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0

		F(30);
 8002820:	201e      	movs	r0, #30
 8002822:	f7ff fd33 	bl	800228c <F>

		flagDone=1;
 8002826:	4b0a      	ldr	r3, [pc, #40]	@ (8002850 <MoveTo10By10+0x34>)
 8002828:	2201      	movs	r2, #1
 800282a:	601a      	str	r2, [r3, #0]
		flagReceived=0;
 800282c:	4b09      	ldr	r3, [pc, #36]	@ (8002854 <MoveTo10By10+0x38>)
 800282e:	2200      	movs	r2, #0
 8002830:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3,(uint8_t *)"ACK\r\n",5,0xFFFF);
 8002832:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002836:	2205      	movs	r2, #5
 8002838:	4907      	ldr	r1, [pc, #28]	@ (8002858 <MoveTo10By10+0x3c>)
 800283a:	4808      	ldr	r0, [pc, #32]	@ (800285c <MoveTo10By10+0x40>)
 800283c:	f006 fa50 	bl	8008ce0 <HAL_UART_Transmit>
		CurrentState=CurrentState->next[Duncare];//
 8002840:	4b07      	ldr	r3, [pc, #28]	@ (8002860 <MoveTo10By10+0x44>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4a06      	ldr	r2, [pc, #24]	@ (8002860 <MoveTo10By10+0x44>)
 8002848:	6013      	str	r3, [r2, #0]
//	else if(aRxBuffer[0]=='R')
//		{
//		CurrentState=CurrentState->next[RightState];
//		}

}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000238 	.word	0x20000238
 8002854:	2000023c 	.word	0x2000023c
 8002858:	0801173c 	.word	0x0801173c
 800285c:	200004e8 	.word	0x200004e8
 8002860:	20000600 	.word	0x20000600

08002864 <FirstDir>:
void FirstDir()
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
	//DEBUG
//	if(mode==0)
//		CurrentState=CurrentState->next[LeftState];
//	else if(mode==1)
//		CurrentState=CurrentState->next[RightState];
	if(aRxBuffer[0]=='A')
 8002868:	4b0b      	ldr	r3, [pc, #44]	@ (8002898 <FirstDir+0x34>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b41      	cmp	r3, #65	@ 0x41
 800286e:	d105      	bne.n	800287c <FirstDir+0x18>
		CurrentState=CurrentState->next[LeftState];
 8002870:	4b0a      	ldr	r3, [pc, #40]	@ (800289c <FirstDir+0x38>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	4a09      	ldr	r2, [pc, #36]	@ (800289c <FirstDir+0x38>)
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e008      	b.n	800288e <FirstDir+0x2a>
	else if(aRxBuffer[0]=='D')
 800287c:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <FirstDir+0x34>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b44      	cmp	r3, #68	@ 0x44
 8002882:	d104      	bne.n	800288e <FirstDir+0x2a>
			CurrentState=CurrentState->next[RightState];
 8002884:	4b05      	ldr	r3, [pc, #20]	@ (800289c <FirstDir+0x38>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	4a04      	ldr	r2, [pc, #16]	@ (800289c <FirstDir+0x38>)
 800288c:	6013      	str	r3, [r2, #0]
	else if(aRxBuffer[0]=='X')//ggwp we ball
	{
		//RANDOM DIR AND WHACK TO BE DONE!!!!
	}
	osDelay(10);
 800288e:	200a      	movs	r0, #10
 8002890:	f007 ffba 	bl	800a808 <osDelay>
	}
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}
 8002898:	200005f4 	.word	0x200005f4
 800289c:	20000600 	.word	0x20000600

080028a0 <SecondDir>:
void SecondDir()
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
	//=CurrentState->next[RightState];
//	if(mode==0)
//		CurrentState=CurrentState->next[RightState];
//	else if(mode==1)
//		CurrentState=CurrentState->next[RightState];
	if(aRxBuffer[0]=='A')
 80028a4:	4b0b      	ldr	r3, [pc, #44]	@ (80028d4 <SecondDir+0x34>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b41      	cmp	r3, #65	@ 0x41
 80028aa:	d105      	bne.n	80028b8 <SecondDir+0x18>
		CurrentState=CurrentState->next[LeftState];
 80028ac:	4b0a      	ldr	r3, [pc, #40]	@ (80028d8 <SecondDir+0x38>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4a09      	ldr	r2, [pc, #36]	@ (80028d8 <SecondDir+0x38>)
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	e008      	b.n	80028ca <SecondDir+0x2a>
	else if(aRxBuffer[0]=='D')
 80028b8:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <SecondDir+0x34>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b44      	cmp	r3, #68	@ 0x44
 80028be:	d104      	bne.n	80028ca <SecondDir+0x2a>
			CurrentState=CurrentState->next[RightState];
 80028c0:	4b05      	ldr	r3, [pc, #20]	@ (80028d8 <SecondDir+0x38>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	4a04      	ldr	r2, [pc, #16]	@ (80028d8 <SecondDir+0x38>)
 80028c8:	6013      	str	r3, [r2, #0]
	else if(aRxBuffer[0]=='X')//ggwp we ball
	{
		//RANDOM DIR AND WHACK TO BE DONE!!!!
	}
	osDelay(10);
 80028ca:	200a      	movs	r0, #10
 80028cc:	f007 ff9c 	bl	800a808 <osDelay>
	}
 80028d0:	bf00      	nop
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	200005f4 	.word	0x200005f4
 80028d8:	20000600 	.word	0x20000600

080028dc <GoLeft>:
void GoLeft()
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
	FLeft(41.5);
 80028e0:	2029      	movs	r0, #41	@ 0x29
 80028e2:	f7ff f85d 	bl	80019a0 <FLeft>
	osDelay(100);
 80028e6:	2064      	movs	r0, #100	@ 0x64
 80028e8:	f007 ff8e 	bl	800a808 <osDelay>
	HAL_UART_Transmit(&huart3,(uint8_t *)"LOL\r\n",5,0xFFFF);//Pascal stream
 80028ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028f0:	2205      	movs	r2, #5
 80028f2:	490d      	ldr	r1, [pc, #52]	@ (8002928 <GoLeft+0x4c>)
 80028f4:	480d      	ldr	r0, [pc, #52]	@ (800292c <GoLeft+0x50>)
 80028f6:	f006 f9f3 	bl	8008ce0 <HAL_UART_Transmit>
	FRight(-90);
 80028fa:	f06f 0059 	mvn.w	r0, #89	@ 0x59
 80028fe:	f7ff fa0d 	bl	8001d1c <FRight>
	osDelay(100);
 8002902:	2064      	movs	r0, #100	@ 0x64
 8002904:	f007 ff80 	bl	800a808 <osDelay>
	BackDistance(5);
 8002908:	2005      	movs	r0, #5
 800290a:	f7ff fe7f 	bl	800260c <BackDistance>
	osDelay(100);
 800290e:	2064      	movs	r0, #100	@ 0x64
 8002910:	f007 ff7a 	bl	800a808 <osDelay>
	FLeft(46.5);
 8002914:	202e      	movs	r0, #46	@ 0x2e
 8002916:	f7ff f843 	bl	80019a0 <FLeft>

	CurrentState=CurrentState->next[Duncare];
 800291a:	4b05      	ldr	r3, [pc, #20]	@ (8002930 <GoLeft+0x54>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4a03      	ldr	r2, [pc, #12]	@ (8002930 <GoLeft+0x54>)
 8002922:	6013      	str	r3, [r2, #0]
	}
 8002924:	bf00      	nop
 8002926:	bd80      	pop	{r7, pc}
 8002928:	08011744 	.word	0x08011744
 800292c:	200004e8 	.word	0x200004e8
 8002930:	20000600 	.word	0x20000600

08002934 <GoRight>:
void GoRight()
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
	FRight(-41.5);
 8002938:	f06f 0028 	mvn.w	r0, #40	@ 0x28
 800293c:	f7ff f9ee 	bl	8001d1c <FRight>
	osDelay(100);
 8002940:	2064      	movs	r0, #100	@ 0x64
 8002942:	f007 ff61 	bl	800a808 <osDelay>
	HAL_UART_Transmit(&huart3,(uint8_t *)"LOL\r\n",5,0xFFFF);//Pascal stream
 8002946:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800294a:	2205      	movs	r2, #5
 800294c:	490d      	ldr	r1, [pc, #52]	@ (8002984 <GoRight+0x50>)
 800294e:	480e      	ldr	r0, [pc, #56]	@ (8002988 <GoRight+0x54>)
 8002950:	f006 f9c6 	bl	8008ce0 <HAL_UART_Transmit>
	FLeft(90);
 8002954:	205a      	movs	r0, #90	@ 0x5a
 8002956:	f7ff f823 	bl	80019a0 <FLeft>
	osDelay(100);
 800295a:	2064      	movs	r0, #100	@ 0x64
 800295c:	f007 ff54 	bl	800a808 <osDelay>
	BackDistance(10);
 8002960:	200a      	movs	r0, #10
 8002962:	f7ff fe53 	bl	800260c <BackDistance>
	osDelay(100);
 8002966:	2064      	movs	r0, #100	@ 0x64
 8002968:	f007 ff4e 	bl	800a808 <osDelay>
	FRight(-47.5);
 800296c:	f06f 002e 	mvn.w	r0, #46	@ 0x2e
 8002970:	f7ff f9d4 	bl	8001d1c <FRight>

	CurrentState=CurrentState->next[Duncare];
 8002974:	4b05      	ldr	r3, [pc, #20]	@ (800298c <GoRight+0x58>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4a04      	ldr	r2, [pc, #16]	@ (800298c <GoRight+0x58>)
 800297c:	6013      	str	r3, [r2, #0]
	}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	08011744 	.word	0x08011744
 8002988:	200004e8 	.word	0x200004e8
 800298c:	20000600 	.word	0x20000600

08002990 <MoveTo2nd>:

//Do your adjustment to 2nd Obstacle if necessary
void MoveTo2nd()
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0

	osDelay(100);
 8002994:	2064      	movs	r0, #100	@ 0x64
 8002996:	f007 ff37 	bl	800a808 <osDelay>
	memset(aRxBuffer,"0",sizeof(aRxBuffer));//reset for next direction
 800299a:	4b24      	ldr	r3, [pc, #144]	@ (8002a2c <MoveTo2nd+0x9c>)
 800299c:	2203      	movs	r2, #3
 800299e:	4619      	mov	r1, r3
 80029a0:	4823      	ldr	r0, [pc, #140]	@ (8002a30 <MoveTo2nd+0xa0>)
 80029a2:	f00b fbbc 	bl	800e11e <memset>
	count=g_distanceUS+40;
 80029a6:	4b23      	ldr	r3, [pc, #140]	@ (8002a34 <MoveTo2nd+0xa4>)
 80029a8:	edd3 7a00 	vldr	s15, [r3]
 80029ac:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002a38 <MoveTo2nd+0xa8>
 80029b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029b8:	ee17 2a90 	vmov	r2, s15
 80029bc:	4b1f      	ldr	r3, [pc, #124]	@ (8002a3c <MoveTo2nd+0xac>)
 80029be:	601a      	str	r2, [r3, #0]
	if(g_distanceUS<30)
 80029c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002a34 <MoveTo2nd+0xa4>)
 80029c2:	edd3 7a00 	vldr	s15, [r3]
 80029c6:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80029ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d2:	d508      	bpl.n	80029e6 <MoveTo2nd+0x56>
	{
		B(30);
 80029d4:	201e      	movs	r0, #30
 80029d6:	f7ff fce7 	bl	80023a8 <B>
		count=count+35;
 80029da:	4b18      	ldr	r3, [pc, #96]	@ (8002a3c <MoveTo2nd+0xac>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	3323      	adds	r3, #35	@ 0x23
 80029e0:	4a16      	ldr	r2, [pc, #88]	@ (8002a3c <MoveTo2nd+0xac>)
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	e011      	b.n	8002a0a <MoveTo2nd+0x7a>
	}
	else if(g_distanceUS>=30){
 80029e6:	4b13      	ldr	r3, [pc, #76]	@ (8002a34 <MoveTo2nd+0xa4>)
 80029e8:	edd3 7a00 	vldr	s15, [r3]
 80029ec:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80029f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f8:	db07      	blt.n	8002a0a <MoveTo2nd+0x7a>
		F(40);
 80029fa:	2028      	movs	r0, #40	@ 0x28
 80029fc:	f7ff fc46 	bl	800228c <F>
		count=count+35;
 8002a00:	4b0e      	ldr	r3, [pc, #56]	@ (8002a3c <MoveTo2nd+0xac>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	3323      	adds	r3, #35	@ 0x23
 8002a06:	4a0d      	ldr	r2, [pc, #52]	@ (8002a3c <MoveTo2nd+0xac>)
 8002a08:	6013      	str	r3, [r2, #0]
	}
	HAL_UART_Transmit(&huart3,(uint8_t *)"ACK\r\n",5,0xFFFF);
 8002a0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a0e:	2205      	movs	r2, #5
 8002a10:	490b      	ldr	r1, [pc, #44]	@ (8002a40 <MoveTo2nd+0xb0>)
 8002a12:	480c      	ldr	r0, [pc, #48]	@ (8002a44 <MoveTo2nd+0xb4>)
 8002a14:	f006 f964 	bl	8008ce0 <HAL_UART_Transmit>
	osDelay(10);
 8002a18:	200a      	movs	r0, #10
 8002a1a:	f007 fef5 	bl	800a808 <osDelay>
	CurrentState=CurrentState->next[Duncare];//change to waiting dir2
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a48 <MoveTo2nd+0xb8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4a08      	ldr	r2, [pc, #32]	@ (8002a48 <MoveTo2nd+0xb8>)
 8002a26:	6013      	str	r3, [r2, #0]
	}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	0801174c 	.word	0x0801174c
 8002a30:	200005f4 	.word	0x200005f4
 8002a34:	20000550 	.word	0x20000550
 8002a38:	42200000 	.word	0x42200000
 8002a3c:	20000240 	.word	0x20000240
 8002a40:	0801173c 	.word	0x0801173c
 8002a44:	200004e8 	.word	0x200004e8
 8002a48:	20000600 	.word	0x20000600

08002a4c <GoLeft2>:

void GoLeft2()
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
	FLeft(84);
 8002a50:	2054      	movs	r0, #84	@ 0x54
 8002a52:	f7fe ffa5 	bl	80019a0 <FLeft>
	BIR(400,1);
 8002a56:	2101      	movs	r1, #1
 8002a58:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002a5c:	f7ff f9f4 	bl	8001e48 <BIR>
	FIR(400,1);
 8002a60:	2101      	movs	r1, #1
 8002a62:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002a66:	f7ff fb73 	bl	8002150 <FIR>
	BIR(400,1);
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002a70:	f7ff f9ea 	bl	8001e48 <BIR>
	FIR(400,1);
 8002a74:	2101      	movs	r1, #1
 8002a76:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002a7a:	f7ff fb69 	bl	8002150 <FIR>
	FR(-161);
 8002a7e:	f06f 00a0 	mvn.w	r0, #160	@ 0xa0
 8002a82:	f7ff f8b7 	bl	8001bf4 <FR>
	osDelay(100);
 8002a86:	2064      	movs	r0, #100	@ 0x64
 8002a88:	f007 febe 	bl	800a808 <osDelay>
	//ForwardDistance(10);
	FIR2(400,1); //0 for Left 1 for Right
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002a92:	f7ff fa7f 	bl	8001f94 <FIR2>
	BIR(400,1);
 8002a96:	2101      	movs	r1, #1
 8002a98:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002a9c:	f7ff f9d4 	bl	8001e48 <BIR>
	FIR(400,1);
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002aa6:	f7ff fb53 	bl	8002150 <FIR>
	osDelay(100);
 8002aaa:	2064      	movs	r0, #100	@ 0x64
 8002aac:	f007 feac 	bl	800a808 <osDelay>
	FRight(-80);
 8002ab0:	f06f 004f 	mvn.w	r0, #79	@ 0x4f
 8002ab4:	f7ff f932 	bl	8001d1c <FRight>
	ForwardDistance(count-10);// coming back after a turn
 8002ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b2c <GoLeft2+0xe0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	3b0a      	subs	r3, #10
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fd08 	bl	80024d4 <ForwardDistance>
	//FIR(600,1);
	FRight(-80);
 8002ac4:	f06f 004f 	mvn.w	r0, #79	@ 0x4f
 8002ac8:	f7ff f928 	bl	8001d1c <FRight>
	osDelay(100);
 8002acc:	2064      	movs	r0, #100	@ 0x64
 8002ace:	f007 fe9b 	bl	800a808 <osDelay>
//		ForwardDistance(reverse);
//	}
//	else{
//		BackDistance(-(reverse));
//	}
	if(adjustment==1){
 8002ad2:	4b17      	ldr	r3, [pc, #92]	@ (8002b30 <GoLeft2+0xe4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d10a      	bne.n	8002af0 <GoLeft2+0xa4>
		reverse=reverse-35;
 8002ada:	4b16      	ldr	r3, [pc, #88]	@ (8002b34 <GoLeft2+0xe8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	3b23      	subs	r3, #35	@ 0x23
 8002ae0:	4a14      	ldr	r2, [pc, #80]	@ (8002b34 <GoLeft2+0xe8>)
 8002ae2:	6013      	str	r3, [r2, #0]
		ForwardDistance(reverse);
 8002ae4:	4b13      	ldr	r3, [pc, #76]	@ (8002b34 <GoLeft2+0xe8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fcf3 	bl	80024d4 <ForwardDistance>
 8002aee:	e010      	b.n	8002b12 <GoLeft2+0xc6>
	}
	else if(adjustment==0){
 8002af0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b30 <GoLeft2+0xe4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <GoLeft2+0xb8>
		BackDistance(reverse);
 8002af8:	4b0e      	ldr	r3, [pc, #56]	@ (8002b34 <GoLeft2+0xe8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff fd85 	bl	800260c <BackDistance>
 8002b02:	e006      	b.n	8002b12 <GoLeft2+0xc6>
	}
	else if(adjustment==2){
 8002b04:	4b0a      	ldr	r3, [pc, #40]	@ (8002b30 <GoLeft2+0xe4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d102      	bne.n	8002b12 <GoLeft2+0xc6>
		ForwardDistance(10);
 8002b0c:	200a      	movs	r0, #10
 8002b0e:	f7ff fce1 	bl	80024d4 <ForwardDistance>
	}
	osDelay(150);
 8002b12:	2096      	movs	r0, #150	@ 0x96
 8002b14:	f007 fe78 	bl	800a808 <osDelay>
	FLeft(81);
 8002b18:	2051      	movs	r0, #81	@ 0x51
 8002b1a:	f7fe ff41 	bl	80019a0 <FLeft>
	CurrentState=CurrentState->next[Duncare];//change to waiting dir2
 8002b1e:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <GoLeft2+0xec>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4a04      	ldr	r2, [pc, #16]	@ (8002b38 <GoLeft2+0xec>)
 8002b26:	6013      	str	r3, [r2, #0]
	}
 8002b28:	bf00      	nop
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20000240 	.word	0x20000240
 8002b30:	20000004 	.word	0x20000004
 8002b34:	20000244 	.word	0x20000244
 8002b38:	20000600 	.word	0x20000600

08002b3c <GoRight2>:

void GoRight2()
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
	FRight(-84);
 8002b40:	f06f 0053 	mvn.w	r0, #83	@ 0x53
 8002b44:	f7ff f8ea 	bl	8001d1c <FRight>
	BIR(400,0);
 8002b48:	2100      	movs	r1, #0
 8002b4a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002b4e:	f7ff f97b 	bl	8001e48 <BIR>
	FIR(400,0);
 8002b52:	2100      	movs	r1, #0
 8002b54:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002b58:	f7ff fafa 	bl	8002150 <FIR>
	BIR(400,0);
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002b62:	f7ff f971 	bl	8001e48 <BIR>
	FIR(400,0);
 8002b66:	2100      	movs	r1, #0
 8002b68:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002b6c:	f7ff faf0 	bl	8002150 <FIR>
	osDelay(100);
 8002b70:	2064      	movs	r0, #100	@ 0x64
 8002b72:	f007 fe49 	bl	800a808 <osDelay>
	FL(161);
 8002b76:	20a1      	movs	r0, #161	@ 0xa1
 8002b78:	f7fe ffa8 	bl	8001acc <FL>
	osDelay(100);
 8002b7c:	2064      	movs	r0, #100	@ 0x64
 8002b7e:	f007 fe43 	bl	800a808 <osDelay>
	//ForwardDistance(10);
	FIR2(400,0); //0 for Left 1 for Right
 8002b82:	2100      	movs	r1, #0
 8002b84:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002b88:	f7ff fa04 	bl	8001f94 <FIR2>
	BIR(400,0);
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002b92:	f7ff f959 	bl	8001e48 <BIR>
	FIR(400,0);
 8002b96:	2100      	movs	r1, #0
 8002b98:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002b9c:	f7ff fad8 	bl	8002150 <FIR>
	FLeft(80);
 8002ba0:	2050      	movs	r0, #80	@ 0x50
 8002ba2:	f7fe fefd 	bl	80019a0 <FLeft>
	ForwardDistance(count);
 8002ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c18 <GoRight2+0xdc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fc92 	bl	80024d4 <ForwardDistance>
	//FIR(600,1);
	FLeft(80);
 8002bb0:	2050      	movs	r0, #80	@ 0x50
 8002bb2:	f7fe fef5 	bl	80019a0 <FLeft>
	osDelay(100);
 8002bb6:	2064      	movs	r0, #100	@ 0x64
 8002bb8:	f007 fe26 	bl	800a808 <osDelay>
//		ForwardDistance(reverse);
//	}
//	else{
//		BackDistance(-(reverse));
//	}
	if(adjustment==1){
 8002bbc:	4b17      	ldr	r3, [pc, #92]	@ (8002c1c <GoRight2+0xe0>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d10a      	bne.n	8002bda <GoRight2+0x9e>
		reverse=reverse-30;
 8002bc4:	4b16      	ldr	r3, [pc, #88]	@ (8002c20 <GoRight2+0xe4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3b1e      	subs	r3, #30
 8002bca:	4a15      	ldr	r2, [pc, #84]	@ (8002c20 <GoRight2+0xe4>)
 8002bcc:	6013      	str	r3, [r2, #0]
		ForwardDistance(reverse);
 8002bce:	4b14      	ldr	r3, [pc, #80]	@ (8002c20 <GoRight2+0xe4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff fc7e 	bl	80024d4 <ForwardDistance>
 8002bd8:	e010      	b.n	8002bfc <GoRight2+0xc0>
	}
	else if(adjustment==0){
 8002bda:	4b10      	ldr	r3, [pc, #64]	@ (8002c1c <GoRight2+0xe0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d105      	bne.n	8002bee <GoRight2+0xb2>
		BackDistance(reverse);
 8002be2:	4b0f      	ldr	r3, [pc, #60]	@ (8002c20 <GoRight2+0xe4>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fd10 	bl	800260c <BackDistance>
 8002bec:	e006      	b.n	8002bfc <GoRight2+0xc0>
	}
	else if(adjustment==2){
 8002bee:	4b0b      	ldr	r3, [pc, #44]	@ (8002c1c <GoRight2+0xe0>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d102      	bne.n	8002bfc <GoRight2+0xc0>
		ForwardDistance(10);
 8002bf6:	200a      	movs	r0, #10
 8002bf8:	f7ff fc6c 	bl	80024d4 <ForwardDistance>
	}
	osDelay(150);
 8002bfc:	2096      	movs	r0, #150	@ 0x96
 8002bfe:	f007 fe03 	bl	800a808 <osDelay>
	FRight(-80);
 8002c02:	f06f 004f 	mvn.w	r0, #79	@ 0x4f
 8002c06:	f7ff f889 	bl	8001d1c <FRight>
	CurrentState=CurrentState->next[Duncare];//change to waiting dir2
 8002c0a:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <GoRight2+0xe8>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	4a04      	ldr	r2, [pc, #16]	@ (8002c24 <GoRight2+0xe8>)
 8002c12:	6013      	str	r3, [r2, #0]
	}
 8002c14:	bf00      	nop
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000240 	.word	0x20000240
 8002c1c:	20000004 	.word	0x20000004
 8002c20:	20000244 	.word	0x20000244
 8002c24:	20000600 	.word	0x20000600

08002c28 <GoBackHome>:
void GoBackHome()
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
	F(20);
 8002c2c:	2014      	movs	r0, #20
 8002c2e:	f7ff fb2d 	bl	800228c <F>
	CurrentState=CurrentState->next[Duncare];//change to waiting dir2
 8002c32:	4b03      	ldr	r3, [pc, #12]	@ (8002c40 <GoBackHome+0x18>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4a01      	ldr	r2, [pc, #4]	@ (8002c40 <GoBackHome+0x18>)
 8002c3a:	6013      	str	r3, [r2, #0]
	}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20000600 	.word	0x20000600

08002c44 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002c48:	f001 fde2 	bl	8004810 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002c4c:	f000 f8d4 	bl	8002df8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002c50:	f000 fcc2 	bl	80035d8 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8002c54:	f000 fc96 	bl	8003584 <MX_USART3_UART_Init>
	MX_TIM3_Init();
 8002c58:	f000 faf0 	bl	800323c <MX_TIM3_Init>
	MX_TIM6_Init();
 8002c5c:	f000 fbb2 	bl	80033c4 <MX_TIM6_Init>
	MX_TIM1_Init();
 8002c60:	f000 f9fa 	bl	8003058 <MX_TIM1_Init>
	MX_TIM8_Init();
 8002c64:	f000 fbe4 	bl	8003430 <MX_TIM8_Init>
	MX_I2C1_Init();
 8002c68:	f000 f9c8 	bl	8002ffc <MX_I2C1_Init>
	MX_TIM2_Init();
 8002c6c:	f000 fa92 	bl	8003194 <MX_TIM2_Init>
	MX_TIM4_Init();
 8002c70:	f000 fb38 	bl	80032e4 <MX_TIM4_Init>
	MX_ADC1_Init();
 8002c74:	f000 f91e 	bl	8002eb4 <MX_ADC1_Init>
	MX_ADC2_Init();
 8002c78:	f000 f96e 	bl	8002f58 <MX_ADC2_Init>
	/* USER CODE BEGIN 2 */
	OLED_Init();
 8002c7c:	f00a fc12 	bl	800d4a4 <OLED_Init>
	ICM20948_init(&hi2c1,0,GYRO_SENS,ACCEL_SENS);
 8002c80:	2300      	movs	r3, #0
 8002c82:	2203      	movs	r2, #3
 8002c84:	2100      	movs	r1, #0
 8002c86:	483f      	ldr	r0, [pc, #252]	@ (8002d84 <main+0x140>)
 8002c88:	f007 f901 	bl	8009e8e <ICM20948_init>

	OLED_ShowString(10, 10, "Press to Start\0");
 8002c8c:	4a3e      	ldr	r2, [pc, #248]	@ (8002d88 <main+0x144>)
 8002c8e:	210a      	movs	r1, #10
 8002c90:	200a      	movs	r0, #10
 8002c92:	f00a fbd5 	bl	800d440 <OLED_ShowString>
	OLED_Refresh_Gram();
 8002c96:	f00a fa5f 	bl	800d158 <OLED_Refresh_Gram>
	while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8)!=0);
 8002c9a:	bf00      	nop
 8002c9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ca0:	483a      	ldr	r0, [pc, #232]	@ (8002d8c <main+0x148>)
 8002ca2:	f002 fd8b 	bl	80057bc <HAL_GPIO_ReadPin>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1f7      	bne.n	8002c9c <main+0x58>
	HAL_Delay(200);
 8002cac:	20c8      	movs	r0, #200	@ 0xc8
 8002cae:	f001 fe21 	bl	80048f4 <HAL_Delay>
	ICM20948_CalibrateAccel(&hi2c1, ACCEL_SENS, 250);
 8002cb2:	22fa      	movs	r2, #250	@ 0xfa
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4833      	ldr	r0, [pc, #204]	@ (8002d84 <main+0x140>)
 8002cb8:	f007 fc32 	bl	800a520 <ICM20948_CalibrateAccel>
	ICM20948_CalibrateGyro(&hi2c1,GYRO_SENS, 250);
 8002cbc:	22fa      	movs	r2, #250	@ 0xfa
 8002cbe:	2103      	movs	r1, #3
 8002cc0:	4830      	ldr	r0, [pc, #192]	@ (8002d84 <main+0x140>)
 8002cc2:	f007 fb85 	bl	800a3d0 <ICM20948_CalibrateGyro>
	OLED_Clear();
 8002cc6:	f00a fac9 	bl	800d25c <OLED_Clear>

	HAL_TIM_Base_Start(&htim6);// for microseond delay
 8002cca:	4831      	ldr	r0, [pc, #196]	@ (8002d90 <main+0x14c>)
 8002ccc:	f004 face 	bl	800726c <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);//Timer for ultra sonic
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4830      	ldr	r0, [pc, #192]	@ (8002d94 <main+0x150>)
 8002cd4:	f004 fcae 	bl	8007634 <HAL_TIM_IC_Start_IT>
	HAL_UART_Receive_IT(&huart3,(uint8_t *)aRxBuffer,RECEIVE_BUFFER_SIZE);//Receive data from uart
 8002cd8:	2204      	movs	r2, #4
 8002cda:	492f      	ldr	r1, [pc, #188]	@ (8002d98 <main+0x154>)
 8002cdc:	482f      	ldr	r0, [pc, #188]	@ (8002d9c <main+0x158>)
 8002cde:	f006 f88a 	bl	8008df6 <HAL_UART_Receive_IT>


	PID_Init(&LMotorPID, 3.0*100.0f, 25 *100.0f,0 , 0, 1000, 5000);
 8002ce2:	eddf 2a2f 	vldr	s5, [pc, #188]	@ 8002da0 <main+0x15c>
 8002ce6:	ed9f 2a2f 	vldr	s4, [pc, #188]	@ 8002da4 <main+0x160>
 8002cea:	eddf 1a2f 	vldr	s3, [pc, #188]	@ 8002da8 <main+0x164>
 8002cee:	ed9f 1a2e 	vldr	s2, [pc, #184]	@ 8002da8 <main+0x164>
 8002cf2:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 8002dac <main+0x168>
 8002cf6:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8002db0 <main+0x16c>
 8002cfa:	482e      	ldr	r0, [pc, #184]	@ (8002db4 <main+0x170>)
 8002cfc:	f7fe fc24 	bl	8001548 <PID_Init>
	PID_Init(&RMotorPID, 3.0*100.0f, 25 *100.0f,0 , 0, 1000, 5000);
 8002d00:	eddf 2a27 	vldr	s5, [pc, #156]	@ 8002da0 <main+0x15c>
 8002d04:	ed9f 2a27 	vldr	s4, [pc, #156]	@ 8002da4 <main+0x160>
 8002d08:	eddf 1a27 	vldr	s3, [pc, #156]	@ 8002da8 <main+0x164>
 8002d0c:	ed9f 1a26 	vldr	s2, [pc, #152]	@ 8002da8 <main+0x164>
 8002d10:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8002dac <main+0x168>
 8002d14:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8002db0 <main+0x16c>
 8002d18:	4827      	ldr	r0, [pc, #156]	@ (8002db8 <main+0x174>)
 8002d1a:	f7fe fc15 	bl	8001548 <PID_Init>
	Set_Motor_Direction(1,1);//Keep forget put lmao
 8002d1e:	2101      	movs	r1, #1
 8002d20:	2001      	movs	r0, #1
 8002d22:	f7fe fd15 	bl	8001750 <Set_Motor_Direction>
	functionCheck();
#endif
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8002d26:	f007 fc93 	bl	800a650 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002d2a:	4a24      	ldr	r2, [pc, #144]	@ (8002dbc <main+0x178>)
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4824      	ldr	r0, [pc, #144]	@ (8002dc0 <main+0x17c>)
 8002d30:	f007 fcd8 	bl	800a6e4 <osThreadNew>
 8002d34:	4603      	mov	r3, r0
 8002d36:	4a23      	ldr	r2, [pc, #140]	@ (8002dc4 <main+0x180>)
 8002d38:	6013      	str	r3, [r2, #0]

	/* creation of oledTask */
	oledTaskHandle = osThreadNew(StartOledTask, NULL, &oledTask_attributes);
 8002d3a:	4a23      	ldr	r2, [pc, #140]	@ (8002dc8 <main+0x184>)
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4823      	ldr	r0, [pc, #140]	@ (8002dcc <main+0x188>)
 8002d40:	f007 fcd0 	bl	800a6e4 <osThreadNew>
 8002d44:	4603      	mov	r3, r0
 8002d46:	4a22      	ldr	r2, [pc, #136]	@ (8002dd0 <main+0x18c>)
 8002d48:	6013      	str	r3, [r2, #0]

	/* creation of sensorTask */
	sensorTaskHandle = osThreadNew(Startsensor, NULL, &sensorTask_attributes);
 8002d4a:	4a22      	ldr	r2, [pc, #136]	@ (8002dd4 <main+0x190>)
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4822      	ldr	r0, [pc, #136]	@ (8002dd8 <main+0x194>)
 8002d50:	f007 fcc8 	bl	800a6e4 <osThreadNew>
 8002d54:	4603      	mov	r3, r0
 8002d56:	4a21      	ldr	r2, [pc, #132]	@ (8002ddc <main+0x198>)
 8002d58:	6013      	str	r3, [r2, #0]

	/* creation of encoderTask */
	encoderTaskHandle = osThreadNew(StartEncoderTask, NULL, &encoderTask_attributes);
 8002d5a:	4a21      	ldr	r2, [pc, #132]	@ (8002de0 <main+0x19c>)
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	4821      	ldr	r0, [pc, #132]	@ (8002de4 <main+0x1a0>)
 8002d60:	f007 fcc0 	bl	800a6e4 <osThreadNew>
 8002d64:	4603      	mov	r3, r0
 8002d66:	4a20      	ldr	r2, [pc, #128]	@ (8002de8 <main+0x1a4>)
 8002d68:	6013      	str	r3, [r2, #0]

	/* creation of robotTask */
	robotTaskHandle = osThreadNew(startrobotTask, NULL, &robotTask_attributes);
 8002d6a:	4a20      	ldr	r2, [pc, #128]	@ (8002dec <main+0x1a8>)
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4820      	ldr	r0, [pc, #128]	@ (8002df0 <main+0x1ac>)
 8002d70:	f007 fcb8 	bl	800a6e4 <osThreadNew>
 8002d74:	4603      	mov	r3, r0
 8002d76:	4a1f      	ldr	r2, [pc, #124]	@ (8002df4 <main+0x1b0>)
 8002d78:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8002d7a:	f007 fc8d 	bl	800a698 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8002d7e:	bf00      	nop
 8002d80:	e7fd      	b.n	8002d7e <main+0x13a>
 8002d82:	bf00      	nop
 8002d84:	200002e4 	.word	0x200002e4
 8002d88:	0801177c 	.word	0x0801177c
 8002d8c:	40020c00 	.word	0x40020c00
 8002d90:	20000458 	.word	0x20000458
 8002d94:	20000410 	.word	0x20000410
 8002d98:	200005f4 	.word	0x200005f4
 8002d9c:	200004e8 	.word	0x200004e8
 8002da0:	459c4000 	.word	0x459c4000
 8002da4:	447a0000 	.word	0x447a0000
 8002da8:	00000000 	.word	0x00000000
 8002dac:	451c4000 	.word	0x451c4000
 8002db0:	43960000 	.word	0x43960000
 8002db4:	20000594 	.word	0x20000594
 8002db8:	200005bc 	.word	0x200005bc
 8002dbc:	08011814 	.word	0x08011814
 8002dc0:	08003aa1 	.word	0x08003aa1
 8002dc4:	20000530 	.word	0x20000530
 8002dc8:	08011838 	.word	0x08011838
 8002dcc:	08003ac5 	.word	0x08003ac5
 8002dd0:	20000534 	.word	0x20000534
 8002dd4:	0801185c 	.word	0x0801185c
 8002dd8:	08003be5 	.word	0x08003be5
 8002ddc:	20000538 	.word	0x20000538
 8002de0:	08011880 	.word	0x08011880
 8002de4:	08003c39 	.word	0x08003c39
 8002de8:	2000053c 	.word	0x2000053c
 8002dec:	080118a4 	.word	0x080118a4
 8002df0:	08003ef1 	.word	0x08003ef1
 8002df4:	20000540 	.word	0x20000540

08002df8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b094      	sub	sp, #80	@ 0x50
 8002dfc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dfe:	f107 0320 	add.w	r3, r7, #32
 8002e02:	2230      	movs	r2, #48	@ 0x30
 8002e04:	2100      	movs	r1, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f00b f989 	bl	800e11e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e0c:	f107 030c 	add.w	r3, r7, #12
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	60da      	str	r2, [r3, #12]
 8002e1a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	4b22      	ldr	r3, [pc, #136]	@ (8002eac <SystemClock_Config+0xb4>)
 8002e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e24:	4a21      	ldr	r2, [pc, #132]	@ (8002eac <SystemClock_Config+0xb4>)
 8002e26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002eac <SystemClock_Config+0xb4>)
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e34:	60bb      	str	r3, [r7, #8]
 8002e36:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e38:	2300      	movs	r3, #0
 8002e3a:	607b      	str	r3, [r7, #4]
 8002e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb0 <SystemClock_Config+0xb8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb0 <SystemClock_Config+0xb8>)
 8002e42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	4b19      	ldr	r3, [pc, #100]	@ (8002eb0 <SystemClock_Config+0xb8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e50:	607b      	str	r3, [r7, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e54:	2302      	movs	r3, #2
 8002e56:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e5c:	2310      	movs	r3, #16
 8002e5e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e64:	f107 0320 	add.w	r3, r7, #32
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f003 fd57 	bl	800691c <HAL_RCC_OscConfig>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <SystemClock_Config+0x80>
	{
		Error_Handler();
 8002e74:	f001 f8c2 	bl	8003ffc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e78:	230f      	movs	r3, #15
 8002e7a:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e8c:	f107 030c 	add.w	r3, r7, #12
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f003 ffba 	bl	8006e0c <HAL_RCC_ClockConfig>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <SystemClock_Config+0xaa>
	{
		Error_Handler();
 8002e9e:	f001 f8ad 	bl	8003ffc <Error_Handler>
	}
}
 8002ea2:	bf00      	nop
 8002ea4:	3750      	adds	r7, #80	@ 0x50
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023800 	.word	0x40023800
 8002eb0:	40007000 	.word	0x40007000

08002eb4 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8002eba:	463b      	mov	r3, r7
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8002ec6:	4b21      	ldr	r3, [pc, #132]	@ (8002f4c <MX_ADC1_Init+0x98>)
 8002ec8:	4a21      	ldr	r2, [pc, #132]	@ (8002f50 <MX_ADC1_Init+0x9c>)
 8002eca:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8002f4c <MX_ADC1_Init+0x98>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ed2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f4c <MX_ADC1_Init+0x98>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8002ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8002f4c <MX_ADC1_Init+0x98>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002ede:	4b1b      	ldr	r3, [pc, #108]	@ (8002f4c <MX_ADC1_Init+0x98>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ee4:	4b19      	ldr	r3, [pc, #100]	@ (8002f4c <MX_ADC1_Init+0x98>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002eec:	4b17      	ldr	r3, [pc, #92]	@ (8002f4c <MX_ADC1_Init+0x98>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ef2:	4b16      	ldr	r3, [pc, #88]	@ (8002f4c <MX_ADC1_Init+0x98>)
 8002ef4:	4a17      	ldr	r2, [pc, #92]	@ (8002f54 <MX_ADC1_Init+0xa0>)
 8002ef6:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ef8:	4b14      	ldr	r3, [pc, #80]	@ (8002f4c <MX_ADC1_Init+0x98>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8002efe:	4b13      	ldr	r3, [pc, #76]	@ (8002f4c <MX_ADC1_Init+0x98>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8002f04:	4b11      	ldr	r3, [pc, #68]	@ (8002f4c <MX_ADC1_Init+0x98>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f4c <MX_ADC1_Init+0x98>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f12:	480e      	ldr	r0, [pc, #56]	@ (8002f4c <MX_ADC1_Init+0x98>)
 8002f14:	f001 fd12 	bl	800493c <HAL_ADC_Init>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 8002f1e:	f001 f86d 	bl	8003ffc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8002f26:	2301      	movs	r3, #1
 8002f28:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f2e:	463b      	mov	r3, r7
 8002f30:	4619      	mov	r1, r3
 8002f32:	4806      	ldr	r0, [pc, #24]	@ (8002f4c <MX_ADC1_Init+0x98>)
 8002f34:	f001 fee4 	bl	8004d00 <HAL_ADC_ConfigChannel>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_ADC1_Init+0x8e>
	{
		Error_Handler();
 8002f3e:	f001 f85d 	bl	8003ffc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000254 	.word	0x20000254
 8002f50:	40012000 	.word	0x40012000
 8002f54:	0f000001 	.word	0x0f000001

08002f58 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8002f5e:	463b      	mov	r3, r7
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC2_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 8002f6a:	4b21      	ldr	r3, [pc, #132]	@ (8002ff0 <MX_ADC2_Init+0x98>)
 8002f6c:	4a21      	ldr	r2, [pc, #132]	@ (8002ff4 <MX_ADC2_Init+0x9c>)
 8002f6e:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002f70:	4b1f      	ldr	r3, [pc, #124]	@ (8002ff0 <MX_ADC2_Init+0x98>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002f76:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff0 <MX_ADC2_Init+0x98>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 8002f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff0 <MX_ADC2_Init+0x98>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8002f82:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff0 <MX_ADC2_Init+0x98>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002f88:	4b19      	ldr	r3, [pc, #100]	@ (8002ff0 <MX_ADC2_Init+0x98>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f90:	4b17      	ldr	r3, [pc, #92]	@ (8002ff0 <MX_ADC2_Init+0x98>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f96:	4b16      	ldr	r3, [pc, #88]	@ (8002ff0 <MX_ADC2_Init+0x98>)
 8002f98:	4a17      	ldr	r2, [pc, #92]	@ (8002ff8 <MX_ADC2_Init+0xa0>)
 8002f9a:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f9c:	4b14      	ldr	r3, [pc, #80]	@ (8002ff0 <MX_ADC2_Init+0x98>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8002fa2:	4b13      	ldr	r3, [pc, #76]	@ (8002ff0 <MX_ADC2_Init+0x98>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8002fa8:	4b11      	ldr	r3, [pc, #68]	@ (8002ff0 <MX_ADC2_Init+0x98>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff0 <MX_ADC2_Init+0x98>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002fb6:	480e      	ldr	r0, [pc, #56]	@ (8002ff0 <MX_ADC2_Init+0x98>)
 8002fb8:	f001 fcc0 	bl	800493c <HAL_ADC_Init>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <MX_ADC2_Init+0x6e>
	{
		Error_Handler();
 8002fc2:	f001 f81b 	bl	8003ffc <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002fd2:	463b      	mov	r3, r7
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4806      	ldr	r0, [pc, #24]	@ (8002ff0 <MX_ADC2_Init+0x98>)
 8002fd8:	f001 fe92 	bl	8004d00 <HAL_ADC_ConfigChannel>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <MX_ADC2_Init+0x8e>
	{
		Error_Handler();
 8002fe2:	f001 f80b 	bl	8003ffc <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8002fe6:	bf00      	nop
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	2000029c 	.word	0x2000029c
 8002ff4:	40012100 	.word	0x40012100
 8002ff8:	0f000001 	.word	0x0f000001

08002ffc <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003000:	4b12      	ldr	r3, [pc, #72]	@ (800304c <MX_I2C1_Init+0x50>)
 8003002:	4a13      	ldr	r2, [pc, #76]	@ (8003050 <MX_I2C1_Init+0x54>)
 8003004:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8003006:	4b11      	ldr	r3, [pc, #68]	@ (800304c <MX_I2C1_Init+0x50>)
 8003008:	4a12      	ldr	r2, [pc, #72]	@ (8003054 <MX_I2C1_Init+0x58>)
 800300a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800300c:	4b0f      	ldr	r3, [pc, #60]	@ (800304c <MX_I2C1_Init+0x50>)
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8003012:	4b0e      	ldr	r3, [pc, #56]	@ (800304c <MX_I2C1_Init+0x50>)
 8003014:	2200      	movs	r2, #0
 8003016:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003018:	4b0c      	ldr	r3, [pc, #48]	@ (800304c <MX_I2C1_Init+0x50>)
 800301a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800301e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003020:	4b0a      	ldr	r3, [pc, #40]	@ (800304c <MX_I2C1_Init+0x50>)
 8003022:	2200      	movs	r2, #0
 8003024:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003026:	4b09      	ldr	r3, [pc, #36]	@ (800304c <MX_I2C1_Init+0x50>)
 8003028:	2200      	movs	r2, #0
 800302a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800302c:	4b07      	ldr	r3, [pc, #28]	@ (800304c <MX_I2C1_Init+0x50>)
 800302e:	2200      	movs	r2, #0
 8003030:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003032:	4b06      	ldr	r3, [pc, #24]	@ (800304c <MX_I2C1_Init+0x50>)
 8003034:	2200      	movs	r2, #0
 8003036:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003038:	4804      	ldr	r0, [pc, #16]	@ (800304c <MX_I2C1_Init+0x50>)
 800303a:	f002 fc23 	bl	8005884 <HAL_I2C_Init>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8003044:	f000 ffda 	bl	8003ffc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8003048:	bf00      	nop
 800304a:	bd80      	pop	{r7, pc}
 800304c:	200002e4 	.word	0x200002e4
 8003050:	40005400 	.word	0x40005400
 8003054:	000186a0 	.word	0x000186a0

08003058 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b096      	sub	sp, #88	@ 0x58
 800305c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800305e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	605a      	str	r2, [r3, #4]
 8003068:	609a      	str	r2, [r3, #8]
 800306a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800306c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8003076:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	605a      	str	r2, [r3, #4]
 8003080:	609a      	str	r2, [r3, #8]
 8003082:	60da      	str	r2, [r3, #12]
 8003084:	611a      	str	r2, [r3, #16]
 8003086:	615a      	str	r2, [r3, #20]
 8003088:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800308a:	1d3b      	adds	r3, r7, #4
 800308c:	2220      	movs	r2, #32
 800308e:	2100      	movs	r1, #0
 8003090:	4618      	mov	r0, r3
 8003092:	f00b f844 	bl	800e11e <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003096:	4b3d      	ldr	r3, [pc, #244]	@ (800318c <MX_TIM1_Init+0x134>)
 8003098:	4a3d      	ldr	r2, [pc, #244]	@ (8003190 <MX_TIM1_Init+0x138>)
 800309a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 160;
 800309c:	4b3b      	ldr	r3, [pc, #236]	@ (800318c <MX_TIM1_Init+0x134>)
 800309e:	22a0      	movs	r2, #160	@ 0xa0
 80030a0:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030a2:	4b3a      	ldr	r3, [pc, #232]	@ (800318c <MX_TIM1_Init+0x134>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80030a8:	4b38      	ldr	r3, [pc, #224]	@ (800318c <MX_TIM1_Init+0x134>)
 80030aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030ae:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030b0:	4b36      	ldr	r3, [pc, #216]	@ (800318c <MX_TIM1_Init+0x134>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80030b6:	4b35      	ldr	r3, [pc, #212]	@ (800318c <MX_TIM1_Init+0x134>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030bc:	4b33      	ldr	r3, [pc, #204]	@ (800318c <MX_TIM1_Init+0x134>)
 80030be:	2200      	movs	r2, #0
 80030c0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80030c2:	4832      	ldr	r0, [pc, #200]	@ (800318c <MX_TIM1_Init+0x134>)
 80030c4:	f004 f882 	bl	80071cc <HAL_TIM_Base_Init>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <MX_TIM1_Init+0x7a>
	{
		Error_Handler();
 80030ce:	f000 ff95 	bl	8003ffc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030d6:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80030d8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80030dc:	4619      	mov	r1, r3
 80030de:	482b      	ldr	r0, [pc, #172]	@ (800318c <MX_TIM1_Init+0x134>)
 80030e0:	f004 ff52 	bl	8007f88 <HAL_TIM_ConfigClockSource>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <MX_TIM1_Init+0x96>
	{
		Error_Handler();
 80030ea:	f000 ff87 	bl	8003ffc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80030ee:	4827      	ldr	r0, [pc, #156]	@ (800318c <MX_TIM1_Init+0x134>)
 80030f0:	f004 f924 	bl	800733c <HAL_TIM_PWM_Init>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <MX_TIM1_Init+0xa6>
	{
		Error_Handler();
 80030fa:	f000 ff7f 	bl	8003ffc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030fe:	2300      	movs	r3, #0
 8003100:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003102:	2300      	movs	r3, #0
 8003104:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003106:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800310a:	4619      	mov	r1, r3
 800310c:	481f      	ldr	r0, [pc, #124]	@ (800318c <MX_TIM1_Init+0x134>)
 800310e:	f005 fcb5 	bl	8008a7c <HAL_TIMEx_MasterConfigSynchronization>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <MX_TIM1_Init+0xc4>
	{
		Error_Handler();
 8003118:	f000 ff70 	bl	8003ffc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800311c:	2360      	movs	r3, #96	@ 0x60
 800311e:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003124:	2300      	movs	r3, #0
 8003126:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003128:	2300      	movs	r3, #0
 800312a:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800312c:	2300      	movs	r3, #0
 800312e:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003130:	2300      	movs	r3, #0
 8003132:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003134:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003138:	220c      	movs	r2, #12
 800313a:	4619      	mov	r1, r3
 800313c:	4813      	ldr	r0, [pc, #76]	@ (800318c <MX_TIM1_Init+0x134>)
 800313e:	f004 fe61 	bl	8007e04 <HAL_TIM_PWM_ConfigChannel>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <MX_TIM1_Init+0xf4>
	{
		Error_Handler();
 8003148:	f000 ff58 	bl	8003ffc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800314c:	2300      	movs	r3, #0
 800314e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003150:	2300      	movs	r3, #0
 8003152:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003160:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003164:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003166:	2300      	movs	r3, #0
 8003168:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800316a:	1d3b      	adds	r3, r7, #4
 800316c:	4619      	mov	r1, r3
 800316e:	4807      	ldr	r0, [pc, #28]	@ (800318c <MX_TIM1_Init+0x134>)
 8003170:	f005 fd00 	bl	8008b74 <HAL_TIMEx_ConfigBreakDeadTime>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <MX_TIM1_Init+0x126>
	{
		Error_Handler();
 800317a:	f000 ff3f 	bl	8003ffc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800317e:	4803      	ldr	r0, [pc, #12]	@ (800318c <MX_TIM1_Init+0x134>)
 8003180:	f001 f976 	bl	8004470 <HAL_TIM_MspPostInit>

}
 8003184:	bf00      	nop
 8003186:	3758      	adds	r7, #88	@ 0x58
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	20000338 	.word	0x20000338
 8003190:	40010000 	.word	0x40010000

08003194 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08c      	sub	sp, #48	@ 0x30
 8003198:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 800319a:	f107 030c 	add.w	r3, r7, #12
 800319e:	2224      	movs	r2, #36	@ 0x24
 80031a0:	2100      	movs	r1, #0
 80031a2:	4618      	mov	r0, r3
 80031a4:	f00a ffbb 	bl	800e11e <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031a8:	1d3b      	adds	r3, r7, #4
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80031b0:	4b21      	ldr	r3, [pc, #132]	@ (8003238 <MX_TIM2_Init+0xa4>)
 80031b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80031b6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80031b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003238 <MX_TIM2_Init+0xa4>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031be:	4b1e      	ldr	r3, [pc, #120]	@ (8003238 <MX_TIM2_Init+0xa4>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80031c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003238 <MX_TIM2_Init+0xa4>)
 80031c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031ca:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003238 <MX_TIM2_Init+0xa4>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031d2:	4b19      	ldr	r3, [pc, #100]	@ (8003238 <MX_TIM2_Init+0xa4>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80031d8:	2303      	movs	r3, #3
 80031da:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80031dc:	2300      	movs	r3, #0
 80031de:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80031e0:	2301      	movs	r3, #1
 80031e2:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80031e4:	2300      	movs	r3, #0
 80031e6:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 80031e8:	230a      	movs	r3, #10
 80031ea:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80031ec:	2300      	movs	r3, #0
 80031ee:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80031f0:	2301      	movs	r3, #1
 80031f2:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80031f4:	2300      	movs	r3, #0
 80031f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 10;
 80031f8:	230a      	movs	r3, #10
 80031fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80031fc:	f107 030c 	add.w	r3, r7, #12
 8003200:	4619      	mov	r1, r3
 8003202:	480d      	ldr	r0, [pc, #52]	@ (8003238 <MX_TIM2_Init+0xa4>)
 8003204:	f004 fb3e 	bl	8007884 <HAL_TIM_Encoder_Init>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <MX_TIM2_Init+0x7e>
	{
		Error_Handler();
 800320e:	f000 fef5 	bl	8003ffc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003212:	2300      	movs	r3, #0
 8003214:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003216:	2300      	movs	r3, #0
 8003218:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800321a:	1d3b      	adds	r3, r7, #4
 800321c:	4619      	mov	r1, r3
 800321e:	4806      	ldr	r0, [pc, #24]	@ (8003238 <MX_TIM2_Init+0xa4>)
 8003220:	f005 fc2c 	bl	8008a7c <HAL_TIMEx_MasterConfigSynchronization>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <MX_TIM2_Init+0x9a>
	{
		Error_Handler();
 800322a:	f000 fee7 	bl	8003ffc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800322e:	bf00      	nop
 8003230:	3730      	adds	r7, #48	@ 0x30
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20000380 	.word	0x20000380

0800323c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08c      	sub	sp, #48	@ 0x30
 8003240:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8003242:	f107 030c 	add.w	r3, r7, #12
 8003246:	2224      	movs	r2, #36	@ 0x24
 8003248:	2100      	movs	r1, #0
 800324a:	4618      	mov	r0, r3
 800324c:	f00a ff67 	bl	800e11e <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003250:	1d3b      	adds	r3, r7, #4
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003258:	4b20      	ldr	r3, [pc, #128]	@ (80032dc <MX_TIM3_Init+0xa0>)
 800325a:	4a21      	ldr	r2, [pc, #132]	@ (80032e0 <MX_TIM3_Init+0xa4>)
 800325c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800325e:	4b1f      	ldr	r3, [pc, #124]	@ (80032dc <MX_TIM3_Init+0xa0>)
 8003260:	2200      	movs	r2, #0
 8003262:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003264:	4b1d      	ldr	r3, [pc, #116]	@ (80032dc <MX_TIM3_Init+0xa0>)
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 800326a:	4b1c      	ldr	r3, [pc, #112]	@ (80032dc <MX_TIM3_Init+0xa0>)
 800326c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003270:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003272:	4b1a      	ldr	r3, [pc, #104]	@ (80032dc <MX_TIM3_Init+0xa0>)
 8003274:	2200      	movs	r2, #0
 8003276:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003278:	4b18      	ldr	r3, [pc, #96]	@ (80032dc <MX_TIM3_Init+0xa0>)
 800327a:	2200      	movs	r2, #0
 800327c:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800327e:	2303      	movs	r3, #3
 8003280:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003282:	2300      	movs	r3, #0
 8003284:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003286:	2301      	movs	r3, #1
 8003288:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800328a:	2300      	movs	r3, #0
 800328c:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 800328e:	230a      	movs	r3, #10
 8003290:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003292:	2300      	movs	r3, #0
 8003294:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003296:	2301      	movs	r3, #1
 8003298:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800329a:	2300      	movs	r3, #0
 800329c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 10;
 800329e:	230a      	movs	r3, #10
 80032a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80032a2:	f107 030c 	add.w	r3, r7, #12
 80032a6:	4619      	mov	r1, r3
 80032a8:	480c      	ldr	r0, [pc, #48]	@ (80032dc <MX_TIM3_Init+0xa0>)
 80032aa:	f004 faeb 	bl	8007884 <HAL_TIM_Encoder_Init>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <MX_TIM3_Init+0x7c>
	{
		Error_Handler();
 80032b4:	f000 fea2 	bl	8003ffc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032b8:	2300      	movs	r3, #0
 80032ba:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032bc:	2300      	movs	r3, #0
 80032be:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032c0:	1d3b      	adds	r3, r7, #4
 80032c2:	4619      	mov	r1, r3
 80032c4:	4805      	ldr	r0, [pc, #20]	@ (80032dc <MX_TIM3_Init+0xa0>)
 80032c6:	f005 fbd9 	bl	8008a7c <HAL_TIMEx_MasterConfigSynchronization>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <MX_TIM3_Init+0x98>
	{
		Error_Handler();
 80032d0:	f000 fe94 	bl	8003ffc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80032d4:	bf00      	nop
 80032d6:	3730      	adds	r7, #48	@ 0x30
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	200003c8 	.word	0x200003c8
 80032e0:	40000400 	.word	0x40000400

080032e4 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08a      	sub	sp, #40	@ 0x28
 80032e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ea:	f107 0318 	add.w	r3, r7, #24
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	605a      	str	r2, [r3, #4]
 80032f4:	609a      	str	r2, [r3, #8]
 80032f6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032f8:	f107 0310 	add.w	r3, r7, #16
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8003302:	463b      	mov	r3, r7
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800330e:	4b2b      	ldr	r3, [pc, #172]	@ (80033bc <MX_TIM4_Init+0xd8>)
 8003310:	4a2b      	ldr	r2, [pc, #172]	@ (80033c0 <MX_TIM4_Init+0xdc>)
 8003312:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 16-1;
 8003314:	4b29      	ldr	r3, [pc, #164]	@ (80033bc <MX_TIM4_Init+0xd8>)
 8003316:	220f      	movs	r2, #15
 8003318:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800331a:	4b28      	ldr	r3, [pc, #160]	@ (80033bc <MX_TIM4_Init+0xd8>)
 800331c:	2200      	movs	r2, #0
 800331e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003320:	4b26      	ldr	r3, [pc, #152]	@ (80033bc <MX_TIM4_Init+0xd8>)
 8003322:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003326:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003328:	4b24      	ldr	r3, [pc, #144]	@ (80033bc <MX_TIM4_Init+0xd8>)
 800332a:	2200      	movs	r2, #0
 800332c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800332e:	4b23      	ldr	r3, [pc, #140]	@ (80033bc <MX_TIM4_Init+0xd8>)
 8003330:	2200      	movs	r2, #0
 8003332:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003334:	4821      	ldr	r0, [pc, #132]	@ (80033bc <MX_TIM4_Init+0xd8>)
 8003336:	f003 ff49 	bl	80071cc <HAL_TIM_Base_Init>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <MX_TIM4_Init+0x60>
	{
		Error_Handler();
 8003340:	f000 fe5c 	bl	8003ffc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003344:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003348:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800334a:	f107 0318 	add.w	r3, r7, #24
 800334e:	4619      	mov	r1, r3
 8003350:	481a      	ldr	r0, [pc, #104]	@ (80033bc <MX_TIM4_Init+0xd8>)
 8003352:	f004 fe19 	bl	8007f88 <HAL_TIM_ConfigClockSource>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <MX_TIM4_Init+0x7c>
	{
		Error_Handler();
 800335c:	f000 fe4e 	bl	8003ffc <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8003360:	4816      	ldr	r0, [pc, #88]	@ (80033bc <MX_TIM4_Init+0xd8>)
 8003362:	f004 f90d 	bl	8007580 <HAL_TIM_IC_Init>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <MX_TIM4_Init+0x8c>
	{
		Error_Handler();
 800336c:	f000 fe46 	bl	8003ffc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003370:	2300      	movs	r3, #0
 8003372:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003378:	f107 0310 	add.w	r3, r7, #16
 800337c:	4619      	mov	r1, r3
 800337e:	480f      	ldr	r0, [pc, #60]	@ (80033bc <MX_TIM4_Init+0xd8>)
 8003380:	f005 fb7c 	bl	8008a7c <HAL_TIMEx_MasterConfigSynchronization>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_TIM4_Init+0xaa>
	{
		Error_Handler();
 800338a:	f000 fe37 	bl	8003ffc <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800338e:	230a      	movs	r3, #10
 8003390:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003392:	2301      	movs	r3, #1
 8003394:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003396:	2300      	movs	r3, #0
 8003398:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800339e:	463b      	mov	r3, r7
 80033a0:	2200      	movs	r2, #0
 80033a2:	4619      	mov	r1, r3
 80033a4:	4805      	ldr	r0, [pc, #20]	@ (80033bc <MX_TIM4_Init+0xd8>)
 80033a6:	f004 fc91 	bl	8007ccc <HAL_TIM_IC_ConfigChannel>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <MX_TIM4_Init+0xd0>
	{
		Error_Handler();
 80033b0:	f000 fe24 	bl	8003ffc <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80033b4:	bf00      	nop
 80033b6:	3728      	adds	r7, #40	@ 0x28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000410 	.word	0x20000410
 80033c0:	40000800 	.word	0x40000800

080033c4 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033ca:	463b      	mov	r3, r7
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80033d2:	4b15      	ldr	r3, [pc, #84]	@ (8003428 <MX_TIM6_Init+0x64>)
 80033d4:	4a15      	ldr	r2, [pc, #84]	@ (800342c <MX_TIM6_Init+0x68>)
 80033d6:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 16-1;
 80033d8:	4b13      	ldr	r3, [pc, #76]	@ (8003428 <MX_TIM6_Init+0x64>)
 80033da:	220f      	movs	r2, #15
 80033dc:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033de:	4b12      	ldr	r3, [pc, #72]	@ (8003428 <MX_TIM6_Init+0x64>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 65535;
 80033e4:	4b10      	ldr	r3, [pc, #64]	@ (8003428 <MX_TIM6_Init+0x64>)
 80033e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033ea:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003428 <MX_TIM6_Init+0x64>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80033f2:	480d      	ldr	r0, [pc, #52]	@ (8003428 <MX_TIM6_Init+0x64>)
 80033f4:	f003 feea 	bl	80071cc <HAL_TIM_Base_Init>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <MX_TIM6_Init+0x3e>
	{
		Error_Handler();
 80033fe:	f000 fdfd 	bl	8003ffc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003402:	2300      	movs	r3, #0
 8003404:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003406:	2300      	movs	r3, #0
 8003408:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800340a:	463b      	mov	r3, r7
 800340c:	4619      	mov	r1, r3
 800340e:	4806      	ldr	r0, [pc, #24]	@ (8003428 <MX_TIM6_Init+0x64>)
 8003410:	f005 fb34 	bl	8008a7c <HAL_TIMEx_MasterConfigSynchronization>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <MX_TIM6_Init+0x5a>
	{
		Error_Handler();
 800341a:	f000 fdef 	bl	8003ffc <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000458 	.word	0x20000458
 800342c:	40001000 	.word	0x40001000

08003430 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b096      	sub	sp, #88	@ 0x58
 8003434:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003436:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	605a      	str	r2, [r3, #4]
 8003440:	609a      	str	r2, [r3, #8]
 8003442:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003444:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800344e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	605a      	str	r2, [r3, #4]
 8003458:	609a      	str	r2, [r3, #8]
 800345a:	60da      	str	r2, [r3, #12]
 800345c:	611a      	str	r2, [r3, #16]
 800345e:	615a      	str	r2, [r3, #20]
 8003460:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003462:	1d3b      	adds	r3, r7, #4
 8003464:	2220      	movs	r2, #32
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f00a fe58 	bl	800e11e <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800346e:	4b43      	ldr	r3, [pc, #268]	@ (800357c <MX_TIM8_Init+0x14c>)
 8003470:	4a43      	ldr	r2, [pc, #268]	@ (8003580 <MX_TIM8_Init+0x150>)
 8003472:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8003474:	4b41      	ldr	r3, [pc, #260]	@ (800357c <MX_TIM8_Init+0x14c>)
 8003476:	2200      	movs	r2, #0
 8003478:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800347a:	4b40      	ldr	r3, [pc, #256]	@ (800357c <MX_TIM8_Init+0x14c>)
 800347c:	2200      	movs	r2, #0
 800347e:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 7199;
 8003480:	4b3e      	ldr	r3, [pc, #248]	@ (800357c <MX_TIM8_Init+0x14c>)
 8003482:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8003486:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003488:	4b3c      	ldr	r3, [pc, #240]	@ (800357c <MX_TIM8_Init+0x14c>)
 800348a:	2200      	movs	r2, #0
 800348c:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800348e:	4b3b      	ldr	r3, [pc, #236]	@ (800357c <MX_TIM8_Init+0x14c>)
 8003490:	2200      	movs	r2, #0
 8003492:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003494:	4b39      	ldr	r3, [pc, #228]	@ (800357c <MX_TIM8_Init+0x14c>)
 8003496:	2200      	movs	r2, #0
 8003498:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800349a:	4838      	ldr	r0, [pc, #224]	@ (800357c <MX_TIM8_Init+0x14c>)
 800349c:	f003 fe96 	bl	80071cc <HAL_TIM_Base_Init>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <MX_TIM8_Init+0x7a>
	{
		Error_Handler();
 80034a6:	f000 fda9 	bl	8003ffc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034ae:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80034b0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80034b4:	4619      	mov	r1, r3
 80034b6:	4831      	ldr	r0, [pc, #196]	@ (800357c <MX_TIM8_Init+0x14c>)
 80034b8:	f004 fd66 	bl	8007f88 <HAL_TIM_ConfigClockSource>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <MX_TIM8_Init+0x96>
	{
		Error_Handler();
 80034c2:	f000 fd9b 	bl	8003ffc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80034c6:	482d      	ldr	r0, [pc, #180]	@ (800357c <MX_TIM8_Init+0x14c>)
 80034c8:	f003 ff38 	bl	800733c <HAL_TIM_PWM_Init>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <MX_TIM8_Init+0xa6>
	{
		Error_Handler();
 80034d2:	f000 fd93 	bl	8003ffc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034d6:	2300      	movs	r3, #0
 80034d8:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034da:	2300      	movs	r3, #0
 80034dc:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80034de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80034e2:	4619      	mov	r1, r3
 80034e4:	4825      	ldr	r0, [pc, #148]	@ (800357c <MX_TIM8_Init+0x14c>)
 80034e6:	f005 fac9 	bl	8008a7c <HAL_TIMEx_MasterConfigSynchronization>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <MX_TIM8_Init+0xc4>
	{
		Error_Handler();
 80034f0:	f000 fd84 	bl	8003ffc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034f4:	2360      	movs	r3, #96	@ 0x60
 80034f6:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034fc:	2300      	movs	r3, #0
 80034fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003500:	2300      	movs	r3, #0
 8003502:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003504:	2300      	movs	r3, #0
 8003506:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003508:	2300      	movs	r3, #0
 800350a:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800350c:	2300      	movs	r3, #0
 800350e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003510:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003514:	2200      	movs	r2, #0
 8003516:	4619      	mov	r1, r3
 8003518:	4818      	ldr	r0, [pc, #96]	@ (800357c <MX_TIM8_Init+0x14c>)
 800351a:	f004 fc73 	bl	8007e04 <HAL_TIM_PWM_ConfigChannel>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <MX_TIM8_Init+0xf8>
	{
		Error_Handler();
 8003524:	f000 fd6a 	bl	8003ffc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003528:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800352c:	2204      	movs	r2, #4
 800352e:	4619      	mov	r1, r3
 8003530:	4812      	ldr	r0, [pc, #72]	@ (800357c <MX_TIM8_Init+0x14c>)
 8003532:	f004 fc67 	bl	8007e04 <HAL_TIM_PWM_ConfigChannel>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <MX_TIM8_Init+0x110>
	{
		Error_Handler();
 800353c:	f000 fd5e 	bl	8003ffc <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003540:	2300      	movs	r3, #0
 8003542:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003544:	2300      	movs	r3, #0
 8003546:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003548:	2300      	movs	r3, #0
 800354a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003554:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003558:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800355a:	2300      	movs	r3, #0
 800355c:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800355e:	1d3b      	adds	r3, r7, #4
 8003560:	4619      	mov	r1, r3
 8003562:	4806      	ldr	r0, [pc, #24]	@ (800357c <MX_TIM8_Init+0x14c>)
 8003564:	f005 fb06 	bl	8008b74 <HAL_TIMEx_ConfigBreakDeadTime>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <MX_TIM8_Init+0x142>
	{
		Error_Handler();
 800356e:	f000 fd45 	bl	8003ffc <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8003572:	bf00      	nop
 8003574:	3758      	adds	r7, #88	@ 0x58
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	200004a0 	.word	0x200004a0
 8003580:	40010400 	.word	0x40010400

08003584 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8003588:	4b11      	ldr	r3, [pc, #68]	@ (80035d0 <MX_USART3_UART_Init+0x4c>)
 800358a:	4a12      	ldr	r2, [pc, #72]	@ (80035d4 <MX_USART3_UART_Init+0x50>)
 800358c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800358e:	4b10      	ldr	r3, [pc, #64]	@ (80035d0 <MX_USART3_UART_Init+0x4c>)
 8003590:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003594:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003596:	4b0e      	ldr	r3, [pc, #56]	@ (80035d0 <MX_USART3_UART_Init+0x4c>)
 8003598:	2200      	movs	r2, #0
 800359a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800359c:	4b0c      	ldr	r3, [pc, #48]	@ (80035d0 <MX_USART3_UART_Init+0x4c>)
 800359e:	2200      	movs	r2, #0
 80035a0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80035a2:	4b0b      	ldr	r3, [pc, #44]	@ (80035d0 <MX_USART3_UART_Init+0x4c>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80035a8:	4b09      	ldr	r3, [pc, #36]	@ (80035d0 <MX_USART3_UART_Init+0x4c>)
 80035aa:	220c      	movs	r2, #12
 80035ac:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035ae:	4b08      	ldr	r3, [pc, #32]	@ (80035d0 <MX_USART3_UART_Init+0x4c>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80035b4:	4b06      	ldr	r3, [pc, #24]	@ (80035d0 <MX_USART3_UART_Init+0x4c>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80035ba:	4805      	ldr	r0, [pc, #20]	@ (80035d0 <MX_USART3_UART_Init+0x4c>)
 80035bc:	f005 fb40 	bl	8008c40 <HAL_UART_Init>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 80035c6:	f000 fd19 	bl	8003ffc <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80035ca:	bf00      	nop
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	200004e8 	.word	0x200004e8
 80035d4:	40004800 	.word	0x40004800

080035d8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08a      	sub	sp, #40	@ 0x28
 80035dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035de:	f107 0314 	add.w	r3, r7, #20
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
 80035e6:	605a      	str	r2, [r3, #4]
 80035e8:	609a      	str	r2, [r3, #8]
 80035ea:	60da      	str	r2, [r3, #12]
 80035ec:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	4b49      	ldr	r3, [pc, #292]	@ (8003718 <MX_GPIO_Init+0x140>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f6:	4a48      	ldr	r2, [pc, #288]	@ (8003718 <MX_GPIO_Init+0x140>)
 80035f8:	f043 0310 	orr.w	r3, r3, #16
 80035fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80035fe:	4b46      	ldr	r3, [pc, #280]	@ (8003718 <MX_GPIO_Init+0x140>)
 8003600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003602:	f003 0310 	and.w	r3, r3, #16
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	4b42      	ldr	r3, [pc, #264]	@ (8003718 <MX_GPIO_Init+0x140>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	4a41      	ldr	r2, [pc, #260]	@ (8003718 <MX_GPIO_Init+0x140>)
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	6313      	str	r3, [r2, #48]	@ 0x30
 800361a:	4b3f      	ldr	r3, [pc, #252]	@ (8003718 <MX_GPIO_Init+0x140>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003626:	2300      	movs	r3, #0
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	4b3b      	ldr	r3, [pc, #236]	@ (8003718 <MX_GPIO_Init+0x140>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362e:	4a3a      	ldr	r2, [pc, #232]	@ (8003718 <MX_GPIO_Init+0x140>)
 8003630:	f043 0308 	orr.w	r3, r3, #8
 8003634:	6313      	str	r3, [r2, #48]	@ 0x30
 8003636:	4b38      	ldr	r3, [pc, #224]	@ (8003718 <MX_GPIO_Init+0x140>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	60bb      	str	r3, [r7, #8]
 8003640:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	607b      	str	r3, [r7, #4]
 8003646:	4b34      	ldr	r3, [pc, #208]	@ (8003718 <MX_GPIO_Init+0x140>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364a:	4a33      	ldr	r2, [pc, #204]	@ (8003718 <MX_GPIO_Init+0x140>)
 800364c:	f043 0304 	orr.w	r3, r3, #4
 8003650:	6313      	str	r3, [r2, #48]	@ 0x30
 8003652:	4b31      	ldr	r3, [pc, #196]	@ (8003718 <MX_GPIO_Init+0x140>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	607b      	str	r3, [r7, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	603b      	str	r3, [r7, #0]
 8003662:	4b2d      	ldr	r3, [pc, #180]	@ (8003718 <MX_GPIO_Init+0x140>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003666:	4a2c      	ldr	r2, [pc, #176]	@ (8003718 <MX_GPIO_Init+0x140>)
 8003668:	f043 0302 	orr.w	r3, r3, #2
 800366c:	6313      	str	r3, [r2, #48]	@ 0x30
 800366e:	4b2a      	ldr	r3, [pc, #168]	@ (8003718 <MX_GPIO_Init+0x140>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800367a:	2200      	movs	r2, #0
 800367c:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8003680:	4826      	ldr	r0, [pc, #152]	@ (800371c <MX_GPIO_Init+0x144>)
 8003682:	f002 f8b3 	bl	80057ec <HAL_GPIO_WritePin>
			|TRIG_Pin|LED3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8003686:	2200      	movs	r2, #0
 8003688:	213c      	movs	r1, #60	@ 0x3c
 800368a:	4825      	ldr	r0, [pc, #148]	@ (8003720 <MX_GPIO_Init+0x148>)
 800368c:	f002 f8ae 	bl	80057ec <HAL_GPIO_WritePin>

	/*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           TRIG_Pin LED3_Pin */
	GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8003690:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003694:	617b      	str	r3, [r7, #20]
			|TRIG_Pin|LED3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003696:	2301      	movs	r3, #1
 8003698:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369e:	2300      	movs	r3, #0
 80036a0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036a2:	f107 0314 	add.w	r3, r7, #20
 80036a6:	4619      	mov	r1, r3
 80036a8:	481c      	ldr	r0, [pc, #112]	@ (800371c <MX_GPIO_Init+0x144>)
 80036aa:	f001 feeb 	bl	8005484 <HAL_GPIO_Init>

	/*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
	GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 80036ae:	233c      	movs	r3, #60	@ 0x3c
 80036b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036b2:	2301      	movs	r3, #1
 80036b4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036ba:	2302      	movs	r3, #2
 80036bc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036be:	f107 0314 	add.w	r3, r7, #20
 80036c2:	4619      	mov	r1, r3
 80036c4:	4816      	ldr	r0, [pc, #88]	@ (8003720 <MX_GPIO_Init+0x148>)
 80036c6:	f001 fedd 	bl	8005484 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80036ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036d0:	2300      	movs	r3, #0
 80036d2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036d8:	f107 0314 	add.w	r3, r7, #20
 80036dc:	4619      	mov	r1, r3
 80036de:	4811      	ldr	r0, [pc, #68]	@ (8003724 <MX_GPIO_Init+0x14c>)
 80036e0:	f001 fed0 	bl	8005484 <HAL_GPIO_Init>

	/*Configure GPIO pin : SWITCH_Pin */
	GPIO_InitStruct.Pin = SWITCH_Pin;
 80036e4:	2301      	movs	r3, #1
 80036e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80036ec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SWITCH_GPIO_Port, &GPIO_InitStruct);
 80036f2:	f107 0314 	add.w	r3, r7, #20
 80036f6:	4619      	mov	r1, r3
 80036f8:	4808      	ldr	r0, [pc, #32]	@ (800371c <MX_GPIO_Init+0x144>)
 80036fa:	f001 fec3 	bl	8005484 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80036fe:	2200      	movs	r2, #0
 8003700:	2105      	movs	r1, #5
 8003702:	2006      	movs	r0, #6
 8003704:	f001 fdf5 	bl	80052f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003708:	2006      	movs	r0, #6
 800370a:	f001 fe0e 	bl	800532a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800370e:	bf00      	nop
 8003710:	3728      	adds	r7, #40	@ 0x28
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	40021000 	.word	0x40021000
 8003720:	40020000 	.word	0x40020000
 8003724:	40020c00 	.word	0x40020c00

08003728 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//Interrupt Serial callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af02      	add	r7, sp, #8
 800372e:	6078      	str	r0, [r7, #4]
	//prevent unused argument
	UNUSED(huart);
	snprintf(buf,sizeof(buf),"%5.2f",g_distanceUS);
 8003730:	4b1a      	ldr	r3, [pc, #104]	@ (800379c <HAL_UART_RxCpltCallback+0x74>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7fc ff07 	bl	8000548 <__aeabi_f2d>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	e9cd 2300 	strd	r2, r3, [sp]
 8003742:	4a17      	ldr	r2, [pc, #92]	@ (80037a0 <HAL_UART_RxCpltCallback+0x78>)
 8003744:	2107      	movs	r1, #7
 8003746:	4817      	ldr	r0, [pc, #92]	@ (80037a4 <HAL_UART_RxCpltCallback+0x7c>)
 8003748:	f00a fc52 	bl	800dff0 <sniprintf>
	sprintf(buf, "%s\r\n", buf);
 800374c:	4a15      	ldr	r2, [pc, #84]	@ (80037a4 <HAL_UART_RxCpltCallback+0x7c>)
 800374e:	4916      	ldr	r1, [pc, #88]	@ (80037a8 <HAL_UART_RxCpltCallback+0x80>)
 8003750:	4814      	ldr	r0, [pc, #80]	@ (80037a4 <HAL_UART_RxCpltCallback+0x7c>)
 8003752:	f00a fc81 	bl	800e058 <siprintf>
	if (strncmp(aRxBuffer, "RUSD",4) == 0)
 8003756:	2204      	movs	r2, #4
 8003758:	4914      	ldr	r1, [pc, #80]	@ (80037ac <HAL_UART_RxCpltCallback+0x84>)
 800375a:	4815      	ldr	r0, [pc, #84]	@ (80037b0 <HAL_UART_RxCpltCallback+0x88>)
 800375c:	f00a fce7 	bl	800e12e <strncmp>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d106      	bne.n	8003774 <HAL_UART_RxCpltCallback+0x4c>
	{
		HAL_UART_Transmit(&huart3, (uint8_t*)buf,7,0XFFFF);
 8003766:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800376a:	2207      	movs	r2, #7
 800376c:	490d      	ldr	r1, [pc, #52]	@ (80037a4 <HAL_UART_RxCpltCallback+0x7c>)
 800376e:	4811      	ldr	r0, [pc, #68]	@ (80037b4 <HAL_UART_RxCpltCallback+0x8c>)
 8003770:	f005 fab6 	bl	8008ce0 <HAL_UART_Transmit>
	}
	//HAL_UART_Transmit(&huart3,(uint8_t *)aRxBuffer,4,0xFFFF);
	if(flagReceived !=1){
 8003774:	4b10      	ldr	r3, [pc, #64]	@ (80037b8 <HAL_UART_RxCpltCallback+0x90>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d00b      	beq.n	8003794 <HAL_UART_RxCpltCallback+0x6c>
		flagReceived=1;
 800377c:	4b0e      	ldr	r3, [pc, #56]	@ (80037b8 <HAL_UART_RxCpltCallback+0x90>)
 800377e:	2201      	movs	r2, #1
 8003780:	601a      	str	r2, [r3, #0]
		distanceTraveled=0;
 8003782:	4b0e      	ldr	r3, [pc, #56]	@ (80037bc <HAL_UART_RxCpltCallback+0x94>)
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3,(uint8_t *)aRxBuffer,RECEIVE_BUFFER_SIZE);
 800378a:	2204      	movs	r2, #4
 800378c:	4908      	ldr	r1, [pc, #32]	@ (80037b0 <HAL_UART_RxCpltCallback+0x88>)
 800378e:	4809      	ldr	r0, [pc, #36]	@ (80037b4 <HAL_UART_RxCpltCallback+0x8c>)
 8003790:	f005 fb31 	bl	8008df6 <HAL_UART_Receive_IT>

	}
	// servo_pwm  = atoi(aRxBuffer);
	//memset(aRxBuffer,0,sizeof(aRxBuffer));

}
 8003794:	bf00      	nop
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	20000550 	.word	0x20000550
 80037a0:	0801178c 	.word	0x0801178c
 80037a4:	200005f8 	.word	0x200005f8
 80037a8:	08011794 	.word	0x08011794
 80037ac:	0801179c 	.word	0x0801179c
 80037b0:	200005f4 	.word	0x200005f4
 80037b4:	200004e8 	.word	0x200004e8
 80037b8:	2000023c 	.word	0x2000023c
 80037bc:	20000230 	.word	0x20000230

080037c0 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	//timer 3 for the ultrasonic echo
	if(htim==&htim4)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a41      	ldr	r2, [pc, #260]	@ (80038d0 <HAL_TIM_IC_CaptureCallback+0x110>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d174      	bne.n	80038ba <HAL_TIM_IC_CaptureCallback+0xfa>
	{
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12)==1)//rising edge
 80037d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80037d4:	483f      	ldr	r0, [pc, #252]	@ (80038d4 <HAL_TIM_IC_CaptureCallback+0x114>)
 80037d6:	f001 fff1 	bl	80057bc <HAL_GPIO_ReadPin>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d108      	bne.n	80037f2 <HAL_TIM_IC_CaptureCallback+0x32>
		{
			tc1=HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80037e0:	2100      	movs	r1, #0
 80037e2:	483b      	ldr	r0, [pc, #236]	@ (80038d0 <HAL_TIM_IC_CaptureCallback+0x110>)
 80037e4:	f004 fc98 	bl	8008118 <HAL_TIM_ReadCapturedValue>
 80037e8:	4603      	mov	r3, r0
 80037ea:	461a      	mov	r2, r3
 80037ec:	4b3a      	ldr	r3, [pc, #232]	@ (80038d8 <HAL_TIM_IC_CaptureCallback+0x118>)
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	e01e      	b.n	8003830 <HAL_TIM_IC_CaptureCallback+0x70>

		}
		else
		{
			tc2=HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 80037f2:	2100      	movs	r1, #0
 80037f4:	4836      	ldr	r0, [pc, #216]	@ (80038d0 <HAL_TIM_IC_CaptureCallback+0x110>)
 80037f6:	f004 fc8f 	bl	8008118 <HAL_TIM_ReadCapturedValue>
 80037fa:	4603      	mov	r3, r0
 80037fc:	461a      	mov	r2, r3
 80037fe:	4b37      	ldr	r3, [pc, #220]	@ (80038dc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8003800:	601a      	str	r2, [r3, #0]
			if(tc2>tc1)
 8003802:	4b36      	ldr	r3, [pc, #216]	@ (80038dc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4b34      	ldr	r3, [pc, #208]	@ (80038d8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	dd07      	ble.n	800381e <HAL_TIM_IC_CaptureCallback+0x5e>
				echo = (tc2-tc1);
 800380e:	4b33      	ldr	r3, [pc, #204]	@ (80038dc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	4b31      	ldr	r3, [pc, #196]	@ (80038d8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	4a31      	ldr	r2, [pc, #196]	@ (80038e0 <HAL_TIM_IC_CaptureCallback+0x120>)
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	e008      	b.n	8003830 <HAL_TIM_IC_CaptureCallback+0x70>
			else //tc2 overflow
				echo=((65536-tc1)+tc2);
 800381e:	4b2e      	ldr	r3, [pc, #184]	@ (80038d8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8003826:	4b2d      	ldr	r3, [pc, #180]	@ (80038dc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4413      	add	r3, r2
 800382c:	4a2c      	ldr	r2, [pc, #176]	@ (80038e0 <HAL_TIM_IC_CaptureCallback+0x120>)
 800382e:	6013      	str	r3, [r2, #0]
		}g_distanceUS = (tc2 > tc1 ? (tc2 - tc1) : (65535 - tc1 + tc2)) * 0.034 / 2;
 8003830:	4b2a      	ldr	r3, [pc, #168]	@ (80038dc <HAL_TIM_IC_CaptureCallback+0x11c>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4b28      	ldr	r3, [pc, #160]	@ (80038d8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	dd08      	ble.n	800384e <HAL_TIM_IC_CaptureCallback+0x8e>
 800383c:	4b27      	ldr	r3, [pc, #156]	@ (80038dc <HAL_TIM_IC_CaptureCallback+0x11c>)
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b25      	ldr	r3, [pc, #148]	@ (80038d8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	4618      	mov	r0, r3
 8003848:	f7fc fe6c 	bl	8000524 <__aeabi_i2d>
 800384c:	e00a      	b.n	8003864 <HAL_TIM_IC_CaptureCallback+0xa4>
 800384e:	4b22      	ldr	r3, [pc, #136]	@ (80038d8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8003856:	33ff      	adds	r3, #255	@ 0xff
 8003858:	4a20      	ldr	r2, [pc, #128]	@ (80038dc <HAL_TIM_IC_CaptureCallback+0x11c>)
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	4413      	add	r3, r2
 800385e:	4618      	mov	r0, r3
 8003860:	f7fc fe60 	bl	8000524 <__aeabi_i2d>
 8003864:	a318      	add	r3, pc, #96	@ (adr r3, 80038c8 <HAL_TIM_IC_CaptureCallback+0x108>)
 8003866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800386a:	f7fc fec5 	bl	80005f8 <__aeabi_dmul>
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	4610      	mov	r0, r2
 8003874:	4619      	mov	r1, r3
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800387e:	f7fc ffe5 	bl	800084c <__aeabi_ddiv>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4610      	mov	r0, r2
 8003888:	4619      	mov	r1, r3
 800388a:	f7fd f9ad 	bl	8000be8 <__aeabi_d2f>
 800388e:	4603      	mov	r3, r0
 8003890:	4a14      	ldr	r2, [pc, #80]	@ (80038e4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8003892:	6013      	str	r3, [r2, #0]
		if(g_distanceUS>400)
 8003894:	4b13      	ldr	r3, [pc, #76]	@ (80038e4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8003896:	edd3 7a00 	vldr	s15, [r3]
 800389a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80038e8 <HAL_TIM_IC_CaptureCallback+0x128>
 800389e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a6:	dd04      	ble.n	80038b2 <HAL_TIM_IC_CaptureCallback+0xf2>
		{
			g_distanceUS=last_valid;
 80038a8:	4b10      	ldr	r3, [pc, #64]	@ (80038ec <HAL_TIM_IC_CaptureCallback+0x12c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a0d      	ldr	r2, [pc, #52]	@ (80038e4 <HAL_TIM_IC_CaptureCallback+0x124>)
 80038ae:	6013      	str	r3, [r2, #0]
		else{
			last_valid=g_distanceUS;
		}
	}

}
 80038b0:	e003      	b.n	80038ba <HAL_TIM_IC_CaptureCallback+0xfa>
			last_valid=g_distanceUS;
 80038b2:	4b0c      	ldr	r3, [pc, #48]	@ (80038e4 <HAL_TIM_IC_CaptureCallback+0x124>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a0d      	ldr	r2, [pc, #52]	@ (80038ec <HAL_TIM_IC_CaptureCallback+0x12c>)
 80038b8:	6013      	str	r3, [r2, #0]
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	f3af 8000 	nop.w
 80038c8:	b020c49c 	.word	0xb020c49c
 80038cc:	3fa16872 	.word	0x3fa16872
 80038d0:	20000410 	.word	0x20000410
 80038d4:	40020c00 	.word	0x40020c00
 80038d8:	20000544 	.word	0x20000544
 80038dc:	20000548 	.word	0x20000548
 80038e0:	2000054c 	.word	0x2000054c
 80038e4:	20000550 	.word	0x20000550
 80038e8:	43c80000 	.word	0x43c80000
 80038ec:	20000554 	.word	0x20000554

080038f0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	80fb      	strh	r3, [r7, #6]
	UNUSED(GPIO_Pin);
	if(HAL_GPIO_ReadPin(GPIOE, SWITCH_Pin)==0) {
 80038fa:	2101      	movs	r1, #1
 80038fc:	480c      	ldr	r0, [pc, #48]	@ (8003930 <HAL_GPIO_EXTI_Callback+0x40>)
 80038fe:	f001 ff5d 	bl	80057bc <HAL_GPIO_ReadPin>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d103      	bne.n	8003910 <HAL_GPIO_EXTI_Callback+0x20>
		//set value for LAB
		mode=0;
 8003908:	4b0a      	ldr	r3, [pc, #40]	@ (8003934 <HAL_GPIO_EXTI_Callback+0x44>)
 800390a:	2200      	movs	r2, #0
 800390c:	701a      	strb	r2, [r3, #0]
		mode=1;
	}else{
		__NOP();
	}

}
 800390e:	e00b      	b.n	8003928 <HAL_GPIO_EXTI_Callback+0x38>
	} else if(HAL_GPIO_ReadPin(GPIOE, SWITCH_Pin)==1) {
 8003910:	2101      	movs	r1, #1
 8003912:	4807      	ldr	r0, [pc, #28]	@ (8003930 <HAL_GPIO_EXTI_Callback+0x40>)
 8003914:	f001 ff52 	bl	80057bc <HAL_GPIO_ReadPin>
 8003918:	4603      	mov	r3, r0
 800391a:	2b01      	cmp	r3, #1
 800391c:	d103      	bne.n	8003926 <HAL_GPIO_EXTI_Callback+0x36>
		mode=1;
 800391e:	4b05      	ldr	r3, [pc, #20]	@ (8003934 <HAL_GPIO_EXTI_Callback+0x44>)
 8003920:	2201      	movs	r2, #1
 8003922:	701a      	strb	r2, [r3, #0]
}
 8003924:	e000      	b.n	8003928 <HAL_GPIO_EXTI_Callback+0x38>
		__NOP();
 8003926:	bf00      	nop
}
 8003928:	bf00      	nop
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	40021000 	.word	0x40021000
 8003934:	200005ff 	.word	0x200005ff

08003938 <IR_Left_Read>:

void IR_Left_Read() {
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 800393c:	481c      	ldr	r0, [pc, #112]	@ (80039b0 <IR_Left_Read+0x78>)
 800393e:	f001 f841 	bl	80049c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 10);
 8003942:	210a      	movs	r1, #10
 8003944:	481a      	ldr	r0, [pc, #104]	@ (80039b0 <IR_Left_Read+0x78>)
 8003946:	f001 f942 	bl	8004bce <HAL_ADC_PollForConversion>
	iDistanceL = HAL_ADC_GetValue(&hadc2);
 800394a:	4819      	ldr	r0, [pc, #100]	@ (80039b0 <IR_Left_Read+0x78>)
 800394c:	f001 f9ca 	bl	8004ce4 <HAL_ADC_GetValue>
 8003950:	4603      	mov	r3, r0
 8003952:	b29a      	uxth	r2, r3
 8003954:	4b17      	ldr	r3, [pc, #92]	@ (80039b4 <IR_Left_Read+0x7c>)
 8003956:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 8003958:	4815      	ldr	r0, [pc, #84]	@ (80039b0 <IR_Left_Read+0x78>)
 800395a:	f001 f905 	bl	8004b68 <HAL_ADC_Stop>

	//	filtered_irreading = (FILTER_ALPHA2 * iDistanceL) + ((1 - FILTER_ALPHA2) * filtered_irreading);
	//	filtered_irreading_int = (int) filtered_irreading;
	//iDistanceL=(int)pow(10, -1.754*(log10((float) iDistanceL))+7.064);
	//iDistanceL=(int)(iDistanceL*-4.286e-03)+2.189e+01;
	iDistanceL=(int)163690.8 * pow(iDistanceL, -0.9039361);
 800395e:	4b15      	ldr	r3, [pc, #84]	@ (80039b4 <IR_Left_Read+0x7c>)
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7fc fdce 	bl	8000504 <__aeabi_ui2d>
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	ed9f 1b0c 	vldr	d1, [pc, #48]	@ 80039a0 <IR_Left_Read+0x68>
 8003970:	ec43 2b10 	vmov	d0, r2, r3
 8003974:	f00c fcb0 	bl	80102d8 <pow>
 8003978:	ec51 0b10 	vmov	r0, r1, d0
 800397c:	a30a      	add	r3, pc, #40	@ (adr r3, 80039a8 <IR_Left_Read+0x70>)
 800397e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003982:	f7fc fe39 	bl	80005f8 <__aeabi_dmul>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4610      	mov	r0, r2
 800398c:	4619      	mov	r1, r3
 800398e:	f7fd f90b 	bl	8000ba8 <__aeabi_d2uiz>
 8003992:	4603      	mov	r3, r0
 8003994:	b29a      	uxth	r2, r3
 8003996:	4b07      	ldr	r3, [pc, #28]	@ (80039b4 <IR_Left_Read+0x7c>)
 8003998:	801a      	strh	r2, [r3, #0]
}
 800399a:	bf00      	nop
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	66658fa7 	.word	0x66658fa7
 80039a4:	bfeced0b 	.word	0xbfeced0b
 80039a8:	00000000 	.word	0x00000000
 80039ac:	4103fb50 	.word	0x4103fb50
 80039b0:	2000029c 	.word	0x2000029c
 80039b4:	20000248 	.word	0x20000248

080039b8 <IR_Right_Read>:

void IR_Right_Read() {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80039bc:	481c      	ldr	r0, [pc, #112]	@ (8003a30 <IR_Right_Read+0x78>)
 80039be:	f001 f801 	bl	80049c4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 80039c2:	210a      	movs	r1, #10
 80039c4:	481a      	ldr	r0, [pc, #104]	@ (8003a30 <IR_Right_Read+0x78>)
 80039c6:	f001 f902 	bl	8004bce <HAL_ADC_PollForConversion>
	iDistanceR = HAL_ADC_GetValue(&hadc1);
 80039ca:	4819      	ldr	r0, [pc, #100]	@ (8003a30 <IR_Right_Read+0x78>)
 80039cc:	f001 f98a 	bl	8004ce4 <HAL_ADC_GetValue>
 80039d0:	4603      	mov	r3, r0
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	4b17      	ldr	r3, [pc, #92]	@ (8003a34 <IR_Right_Read+0x7c>)
 80039d6:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80039d8:	4815      	ldr	r0, [pc, #84]	@ (8003a30 <IR_Right_Read+0x78>)
 80039da:	f001 f8c5 	bl	8004b68 <HAL_ADC_Stop>
	iDistanceR=(int)163690.8 * pow(iDistanceR, -0.9039361);
 80039de:	4b15      	ldr	r3, [pc, #84]	@ (8003a34 <IR_Right_Read+0x7c>)
 80039e0:	881b      	ldrh	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fc fd8e 	bl	8000504 <__aeabi_ui2d>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	ed9f 1b0c 	vldr	d1, [pc, #48]	@ 8003a20 <IR_Right_Read+0x68>
 80039f0:	ec43 2b10 	vmov	d0, r2, r3
 80039f4:	f00c fc70 	bl	80102d8 <pow>
 80039f8:	ec51 0b10 	vmov	r0, r1, d0
 80039fc:	a30a      	add	r3, pc, #40	@ (adr r3, 8003a28 <IR_Right_Read+0x70>)
 80039fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a02:	f7fc fdf9 	bl	80005f8 <__aeabi_dmul>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4610      	mov	r0, r2
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	f7fd f8cb 	bl	8000ba8 <__aeabi_d2uiz>
 8003a12:	4603      	mov	r3, r0
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	4b07      	ldr	r3, [pc, #28]	@ (8003a34 <IR_Right_Read+0x7c>)
 8003a18:	801a      	strh	r2, [r3, #0]
//	iDistanceR=(int)(iDistanceR*-4.286e-03)+2.189e+01;
}
 8003a1a:	bf00      	nop
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	66658fa7 	.word	0x66658fa7
 8003a24:	bfeced0b 	.word	0xbfeced0b
 8003a28:	00000000 	.word	0x00000000
 8003a2c:	4103fb50 	.word	0x4103fb50
 8003a30:	20000254 	.word	0x20000254
 8003a34:	2000024a 	.word	0x2000024a

08003a38 <Motor_Stop>:

void Motor_Stop()
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
	resetYaw();
 8003a3c:	f7fd feda 	bl	80017f4 <resetYaw>
	PID_Reset(&LMotorPID);
 8003a40:	4811      	ldr	r0, [pc, #68]	@ (8003a88 <Motor_Stop+0x50>)
 8003a42:	f7fd fe6b 	bl	800171c <PID_Reset>
	PID_Reset(&RMotorPID);
 8003a46:	4811      	ldr	r0, [pc, #68]	@ (8003a8c <Motor_Stop+0x54>)
 8003a48:	f7fd fe68 	bl	800171c <PID_Reset>
	distanceTraveled=0;
 8003a4c:	4b10      	ldr	r3, [pc, #64]	@ (8003a90 <Motor_Stop+0x58>)
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
	pwmValL = 0;
 8003a54:	4b0f      	ldr	r3, [pc, #60]	@ (8003a94 <Motor_Stop+0x5c>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
	pwmValR = 0;
 8003a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a98 <Motor_Stop+0x60>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValL); // Stop left motor
 8003a60:	4b0c      	ldr	r3, [pc, #48]	@ (8003a94 <Motor_Stop+0x5c>)
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	4b0d      	ldr	r3, [pc, #52]	@ (8003a9c <Motor_Stop+0x64>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmValR); // Stop right motor
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a98 <Motor_Stop+0x60>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a9c <Motor_Stop+0x64>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	639a      	str	r2, [r3, #56]	@ 0x38
	set_servo_angle(Center);
 8003a74:	205f      	movs	r0, #95	@ 0x5f
 8003a76:	f7fe fead 	bl	80027d4 <set_servo_angle>
	osDelay(350);
 8003a7a:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8003a7e:	f006 fec3 	bl	800a808 <osDelay>
	//reset_gyro_at_rest();
	//  count++;
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000594 	.word	0x20000594
 8003a8c:	200005bc 	.word	0x200005bc
 8003a90:	20000230 	.word	0x20000230
 8003a94:	200005e4 	.word	0x200005e4
 8003a98:	200005e8 	.word	0x200005e8
 8003a9c:	200004a0 	.word	0x200004a0

08003aa0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOE,LED3_Pin);
 8003aa8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003aac:	4804      	ldr	r0, [pc, #16]	@ (8003ac0 <StartDefaultTask+0x20>)
 8003aae:	f001 feb6 	bl	800581e <HAL_GPIO_TogglePin>
		osDelay(1000);
 8003ab2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003ab6:	f006 fea7 	bl	800a808 <osDelay>
		HAL_GPIO_TogglePin(GPIOE,LED3_Pin);
 8003aba:	bf00      	nop
 8003abc:	e7f4      	b.n	8003aa8 <StartDefaultTask+0x8>
 8003abe:	bf00      	nop
 8003ac0:	40021000 	.word	0x40021000

08003ac4 <StartOledTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartOledTask */
void StartOledTask(void *argument)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b096      	sub	sp, #88	@ 0x58
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartOledTask */
	char text[16]={};
 8003acc:	2300      	movs	r3, #0
 8003ace:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ad0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	605a      	str	r2, [r3, #4]
 8003ada:	609a      	str	r2, [r3, #8]
	char temp[50]={};
 8003adc:	2300      	movs	r3, #0
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	f107 0310 	add.w	r3, r7, #16
 8003ae4:	222e      	movs	r2, #46	@ 0x2e
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f00a fb18 	bl	800e11e <memset>
	//	RMotorPID.setpoint = 1;

	/* Infinite loop */
	for(;;)
	{
		snprintf(text, sizeof(text), "DistanceU:%.2f",  g_distanceUS);
 8003aee:	4b33      	ldr	r3, [pc, #204]	@ (8003bbc <StartOledTask+0xf8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fc fd28 	bl	8000548 <__aeabi_f2d>
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8003b00:	e9cd 2300 	strd	r2, r3, [sp]
 8003b04:	4a2e      	ldr	r2, [pc, #184]	@ (8003bc0 <StartOledTask+0xfc>)
 8003b06:	2110      	movs	r1, #16
 8003b08:	f00a fa72 	bl	800dff0 <sniprintf>
		OLED_ShowString(10, 20, text);
 8003b0c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003b10:	461a      	mov	r2, r3
 8003b12:	2114      	movs	r1, #20
 8003b14:	200a      	movs	r0, #10
 8003b16:	f009 fc93 	bl	800d440 <OLED_ShowString>
		snprintf(text, sizeof(text), "degree :%5.2f", yaw);//BEFORE DEGREE
 8003b1a:	4b2a      	ldr	r3, [pc, #168]	@ (8003bc4 <StartOledTask+0x100>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fc fd12 	bl	8000548 <__aeabi_f2d>
 8003b24:	4602      	mov	r2, r0
 8003b26:	460b      	mov	r3, r1
 8003b28:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8003b2c:	e9cd 2300 	strd	r2, r3, [sp]
 8003b30:	4a25      	ldr	r2, [pc, #148]	@ (8003bc8 <StartOledTask+0x104>)
 8003b32:	2110      	movs	r1, #16
 8003b34:	f00a fa5c 	bl	800dff0 <sniprintf>
		OLED_ShowString(10, 30, text);
 8003b38:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	211e      	movs	r1, #30
 8003b40:	200a      	movs	r0, #10
 8003b42:	f009 fc7d 	bl	800d440 <OLED_ShowString>
		OLED_Refresh_Gram();
 8003b46:	f009 fb07 	bl	800d158 <OLED_Refresh_Gram>
		snprintf(text, sizeof(text), "Distance: %f m", distanceTraveled);
 8003b4a:	4b20      	ldr	r3, [pc, #128]	@ (8003bcc <StartOledTask+0x108>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fc fcfa 	bl	8000548 <__aeabi_f2d>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8003b5c:	e9cd 2300 	strd	r2, r3, [sp]
 8003b60:	4a1b      	ldr	r2, [pc, #108]	@ (8003bd0 <StartOledTask+0x10c>)
 8003b62:	2110      	movs	r1, #16
 8003b64:	f00a fa44 	bl	800dff0 <sniprintf>
		OLED_ShowString(10, 10, text);
 8003b68:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	210a      	movs	r1, #10
 8003b70:	200a      	movs	r0, #10
 8003b72:	f009 fc65 	bl	800d440 <OLED_ShowString>
		snprintf(text, sizeof(text), "DistanceIRL:%d m", iDistanceL);
 8003b76:	4b17      	ldr	r3, [pc, #92]	@ (8003bd4 <StartOledTask+0x110>)
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8003b7e:	4a16      	ldr	r2, [pc, #88]	@ (8003bd8 <StartOledTask+0x114>)
 8003b80:	2110      	movs	r1, #16
 8003b82:	f00a fa35 	bl	800dff0 <sniprintf>
		OLED_ShowString(10, 40, text);
 8003b86:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	2128      	movs	r1, #40	@ 0x28
 8003b8e:	200a      	movs	r0, #10
 8003b90:	f009 fc56 	bl	800d440 <OLED_ShowString>
		snprintf(text, sizeof(text), "DistanceIRR %d m", iDistanceR);
 8003b94:	4b11      	ldr	r3, [pc, #68]	@ (8003bdc <StartOledTask+0x118>)
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8003b9c:	4a10      	ldr	r2, [pc, #64]	@ (8003be0 <StartOledTask+0x11c>)
 8003b9e:	2110      	movs	r1, #16
 8003ba0:	f00a fa26 	bl	800dff0 <sniprintf>
		OLED_ShowString(10, 50, text);
 8003ba4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2132      	movs	r1, #50	@ 0x32
 8003bac:	200a      	movs	r0, #10
 8003bae:	f009 fc47 	bl	800d440 <OLED_ShowString>
		//			if(t==0)
		//				t=1;
		//			LMotorPID.setpoint=t;
		//			RMotorPID.setpoint=t;
		//		}
		osDelay(200);
 8003bb2:	20c8      	movs	r0, #200	@ 0xc8
 8003bb4:	f006 fe28 	bl	800a808 <osDelay>
		snprintf(text, sizeof(text), "DistanceU:%.2f",  g_distanceUS);
 8003bb8:	bf00      	nop
 8003bba:	e798      	b.n	8003aee <StartOledTask+0x2a>
 8003bbc:	20000550 	.word	0x20000550
 8003bc0:	080117a4 	.word	0x080117a4
 8003bc4:	20000590 	.word	0x20000590
 8003bc8:	080117b4 	.word	0x080117b4
 8003bcc:	20000230 	.word	0x20000230
 8003bd0:	080117c4 	.word	0x080117c4
 8003bd4:	20000248 	.word	0x20000248
 8003bd8:	080117d4 	.word	0x080117d4
 8003bdc:	2000024a 	.word	0x2000024a
 8003be0:	080117e8 	.word	0x080117e8

08003be4 <Startsensor>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Startsensor */
void Startsensor(void *argument)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Startsensor */
	/* Infinite loop */
	HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_RESET);
 8003bec:	2200      	movs	r2, #0
 8003bee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003bf2:	480f      	ldr	r0, [pc, #60]	@ (8003c30 <Startsensor+0x4c>)
 8003bf4:	f001 fdfa 	bl	80057ec <HAL_GPIO_WritePin>
	for(;;)
	{
		HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_SET);
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003bfe:	480c      	ldr	r0, [pc, #48]	@ (8003c30 <Startsensor+0x4c>)
 8003c00:	f001 fdf4 	bl	80057ec <HAL_GPIO_WritePin>
		delay_us(10);
 8003c04:	200a      	movs	r0, #10
 8003c06:	f7fd fddb 	bl	80017c0 <delay_us>
		HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_RESET);
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003c10:	4807      	ldr	r0, [pc, #28]	@ (8003c30 <Startsensor+0x4c>)
 8003c12:	f001 fdeb 	bl	80057ec <HAL_GPIO_WritePin>
		//g_distanceUS = (tc2 > tc1 ? (tc2 - tc1) : (65535 - tc1 + tc2)) * 0.034 / 2; //echo/1000000.0f *343.0f/2.0f *100.0f equivalent
		osDelay(1);
 8003c16:	2001      	movs	r0, #1
 8003c18:	f006 fdf6 	bl	800a808 <osDelay>
		IR_Left_Read();
 8003c1c:	f7ff fe8c 	bl	8003938 <IR_Left_Read>
		IR_Right_Read();
 8003c20:	f7ff feca 	bl	80039b8 <IR_Right_Read>
		osDelay(10);
 8003c24:	200a      	movs	r0, #10
 8003c26:	f006 fdef 	bl	800a808 <osDelay>
		HAL_GPIO_WritePin(GPIOE, TRIG_Pin,GPIO_PIN_SET);
 8003c2a:	bf00      	nop
 8003c2c:	e7e4      	b.n	8003bf8 <Startsensor+0x14>
 8003c2e:	bf00      	nop
 8003c30:	40021000 	.word	0x40021000
 8003c34:	00000000 	.word	0x00000000

08003c38 <StartEncoderTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartEncoderTask */
void StartEncoderTask(void *argument)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08a      	sub	sp, #40	@ 0x28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartEncoderTask */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8003c40:	213c      	movs	r1, #60	@ 0x3c
 8003c42:	48a1      	ldr	r0, [pc, #644]	@ (8003ec8 <StartEncoderTask+0x290>)
 8003c44:	f003 fec4 	bl	80079d0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8003c48:	213c      	movs	r1, #60	@ 0x3c
 8003c4a:	48a0      	ldr	r0, [pc, #640]	@ (8003ecc <StartEncoderTask+0x294>)
 8003c4c:	f003 fec0 	bl	80079d0 <HAL_TIM_Encoder_Start>

	int16_t cnt1L,cnt2L,diffL;
	int16_t cnt1R,cnt2R,diffR;
	uint32_t tick;
	cnt1L = __HAL_TIM_GET_COUNTER(&htim2);
 8003c50:	4b9d      	ldr	r3, [pc, #628]	@ (8003ec8 <StartEncoderTask+0x290>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c56:	84fb      	strh	r3, [r7, #38]	@ 0x26
	cnt1R = __HAL_TIM_GET_COUNTER(&htim3);
 8003c58:	4b9c      	ldr	r3, [pc, #624]	@ (8003ecc <StartEncoderTask+0x294>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5e:	847b      	strh	r3, [r7, #34]	@ 0x22
	tick = HAL_GetTick(); // in milliseconds
 8003c60:	f000 fe3c 	bl	80048dc <HAL_GetTick>
 8003c64:	61f8      	str	r0, [r7, #28]
	/* Infinite loop */
	for(;;)
	{
		if (HAL_GetTick() - tick > 10L) { // Checking per second
 8003c66:	f000 fe39 	bl	80048dc <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b0a      	cmp	r3, #10
 8003c72:	f240 811e 	bls.w	8003eb2 <StartEncoderTask+0x27a>
			cnt2L = __HAL_TIM_GET_COUNTER(&htim2);
 8003c76:	4b94      	ldr	r3, [pc, #592]	@ (8003ec8 <StartEncoderTask+0x290>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	837b      	strh	r3, [r7, #26]
			cnt2R = __HAL_TIM_GET_COUNTER(&htim3);
 8003c7e:	4b93      	ldr	r3, [pc, #588]	@ (8003ecc <StartEncoderTask+0x294>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	833b      	strh	r3, [r7, #24]

			//Left
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)) {
 8003c86:	4b90      	ldr	r3, [pc, #576]	@ (8003ec8 <StartEncoderTask+0x290>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0310 	and.w	r3, r3, #16
 8003c90:	2b10      	cmp	r3, #16
 8003c92:	d114      	bne.n	8003cbe <StartEncoderTask+0x86>
				diffL = (cnt2L < cnt1L) ? (cnt1L - cnt2L) : ((65535 - cnt2L) + cnt1L);
 8003c94:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8003c98:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	da05      	bge.n	8003cac <StartEncoderTask+0x74>
 8003ca0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003ca2:	8b7b      	ldrh	r3, [r7, #26]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	b21b      	sxth	r3, r3
 8003caa:	e006      	b.n	8003cba <StartEncoderTask+0x82>
 8003cac:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003cae:	8b7b      	ldrh	r3, [r7, #26]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	b21b      	sxth	r3, r3
 8003cba:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003cbc:	e013      	b.n	8003ce6 <StartEncoderTask+0xae>
			} else {
				diffL = (cnt2L > cnt1L) ? (cnt2L - cnt1L) : ((65535 - cnt1L) + cnt2L);
 8003cbe:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8003cc2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	dd05      	ble.n	8003cd6 <StartEncoderTask+0x9e>
 8003cca:	8b7a      	ldrh	r2, [r7, #26]
 8003ccc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	b21b      	sxth	r3, r3
 8003cd4:	e006      	b.n	8003ce4 <StartEncoderTask+0xac>
 8003cd6:	8b7a      	ldrh	r2, [r7, #26]
 8003cd8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	b21b      	sxth	r3, r3
 8003ce4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			}

			//Right
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) {
 8003ce6:	4b79      	ldr	r3, [pc, #484]	@ (8003ecc <StartEncoderTask+0x294>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b10      	cmp	r3, #16
 8003cf2:	d114      	bne.n	8003d1e <StartEncoderTask+0xe6>
				diffR = (cnt2R < cnt1R) ? (cnt1R - cnt2R) : ((65535 - cnt2R) + cnt1R);
 8003cf4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003cf8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	da05      	bge.n	8003d0c <StartEncoderTask+0xd4>
 8003d00:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003d02:	8b3b      	ldrh	r3, [r7, #24]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	b21b      	sxth	r3, r3
 8003d0a:	e006      	b.n	8003d1a <StartEncoderTask+0xe2>
 8003d0c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8003d0e:	8b3b      	ldrh	r3, [r7, #24]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	3b01      	subs	r3, #1
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	b21b      	sxth	r3, r3
 8003d1a:	843b      	strh	r3, [r7, #32]
 8003d1c:	e013      	b.n	8003d46 <StartEncoderTask+0x10e>
			} else {
				diffR = (cnt2R > cnt1R) ? (cnt2R - cnt1R) : ((65535 - cnt1R) + cnt2R);
 8003d1e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003d22:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003d26:	429a      	cmp	r2, r3
 8003d28:	dd05      	ble.n	8003d36 <StartEncoderTask+0xfe>
 8003d2a:	8b3a      	ldrh	r2, [r7, #24]
 8003d2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	b21b      	sxth	r3, r3
 8003d34:	e006      	b.n	8003d44 <StartEncoderTask+0x10c>
 8003d36:	8b3a      	ldrh	r2, [r7, #24]
 8003d38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	b21b      	sxth	r3, r3
 8003d44:	843b      	strh	r3, [r7, #32]
			}
			// RPM Calculation
			RPM_L = ((float) diffL / (ENCODER_PULSES_PER_REVOLUTION * 4));// * 60.0;
 8003d46:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003d4a:	ee07 3a90 	vmov	s15, r3
 8003d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d52:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8003ed0 <StartEncoderTask+0x298>
 8003d56:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003d5a:	ee16 0a90 	vmov	r0, s13
 8003d5e:	f7fc fbf3 	bl	8000548 <__aeabi_f2d>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	495b      	ldr	r1, [pc, #364]	@ (8003ed4 <StartEncoderTask+0x29c>)
 8003d68:	e9c1 2300 	strd	r2, r3, [r1]
			RPM_R = ((float) diffR / (ENCODER_PULSES_PER_REVOLUTION * 4));
 8003d6c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003d70:	ee07 3a90 	vmov	s15, r3
 8003d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d78:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8003ed0 <StartEncoderTask+0x298>
 8003d7c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003d80:	ee16 0a90 	vmov	r0, s13
 8003d84:	f7fc fbe0 	bl	8000548 <__aeabi_f2d>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4952      	ldr	r1, [pc, #328]	@ (8003ed8 <StartEncoderTask+0x2a0>)
 8003d8e:	e9c1 2300 	strd	r2, r3, [r1]

			float dt = (HAL_GetTick() - tick) * 0.001f;
 8003d92:	f000 fda3 	bl	80048dc <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	ee07 3a90 	vmov	s15, r3
 8003da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003edc <StartEncoderTask+0x2a4>
 8003da8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dac:	edc7 7a05 	vstr	s15, [r7, #20]
			RPS_L=((float) diffL / (ENCODER_PULSES_PER_REVOLUTION * 4* dt));
 8003db0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8003db4:	ee07 3a90 	vmov	s15, r3
 8003db8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003dc0:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8003ed0 <StartEncoderTask+0x298>
 8003dc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003dc8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003dcc:	ee16 0a90 	vmov	r0, s13
 8003dd0:	f7fc fbba 	bl	8000548 <__aeabi_f2d>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4941      	ldr	r1, [pc, #260]	@ (8003ee0 <StartEncoderTask+0x2a8>)
 8003dda:	e9c1 2300 	strd	r2, r3, [r1]
			RPS_R=((float) diffR / (ENCODER_PULSES_PER_REVOLUTION * 4 *dt));
 8003dde:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dea:	edd7 7a05 	vldr	s15, [r7, #20]
 8003dee:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003ed0 <StartEncoderTask+0x298>
 8003df2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003df6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003dfa:	ee16 0a90 	vmov	r0, s13
 8003dfe:	f7fc fba3 	bl	8000548 <__aeabi_f2d>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4937      	ldr	r1, [pc, #220]	@ (8003ee4 <StartEncoderTask+0x2ac>)
 8003e08:	e9c1 2300 	strd	r2, r3, [r1]

			// Calculate the distance traveled by each wheel (in meters)
			float distanceLeftThisSecond = RPM_L * PI * WHEEL_DIAMETER;
 8003e0c:	4b31      	ldr	r3, [pc, #196]	@ (8003ed4 <StartEncoderTask+0x29c>)
 8003e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e12:	a32b      	add	r3, pc, #172	@ (adr r3, 8003ec0 <StartEncoderTask+0x288>)
 8003e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e18:	f7fc fbee 	bl	80005f8 <__aeabi_dmul>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4610      	mov	r0, r2
 8003e22:	4619      	mov	r1, r3
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	4b2f      	ldr	r3, [pc, #188]	@ (8003ee8 <StartEncoderTask+0x2b0>)
 8003e2a:	f7fc fbe5 	bl	80005f8 <__aeabi_dmul>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	460b      	mov	r3, r1
 8003e32:	4610      	mov	r0, r2
 8003e34:	4619      	mov	r1, r3
 8003e36:	f7fc fed7 	bl	8000be8 <__aeabi_d2f>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	613b      	str	r3, [r7, #16]
			float distanceRightThisSecond = RPM_R * PI * WHEEL_DIAMETER;
 8003e3e:	4b26      	ldr	r3, [pc, #152]	@ (8003ed8 <StartEncoderTask+0x2a0>)
 8003e40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e44:	a31e      	add	r3, pc, #120	@ (adr r3, 8003ec0 <StartEncoderTask+0x288>)
 8003e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4a:	f7fc fbd5 	bl	80005f8 <__aeabi_dmul>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	460b      	mov	r3, r1
 8003e52:	4610      	mov	r0, r2
 8003e54:	4619      	mov	r1, r3
 8003e56:	f04f 0200 	mov.w	r2, #0
 8003e5a:	4b23      	ldr	r3, [pc, #140]	@ (8003ee8 <StartEncoderTask+0x2b0>)
 8003e5c:	f7fc fbcc 	bl	80005f8 <__aeabi_dmul>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4610      	mov	r0, r2
 8003e66:	4619      	mov	r1, r3
 8003e68:	f7fc febe 	bl	8000be8 <__aeabi_d2f>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	60fb      	str	r3, [r7, #12]

			// Average the distances to account for potential minor differences in wheel speed
			float distanceThisSecond = (distanceLeftThisSecond + distanceRightThisSecond) / 2.0;
 8003e70:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e74:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e7c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003e80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e84:	edc7 7a02 	vstr	s15, [r7, #8]
			distanceTraveled += distanceThisSecond;
 8003e88:	4b18      	ldr	r3, [pc, #96]	@ (8003eec <StartEncoderTask+0x2b4>)
 8003e8a:	ed93 7a00 	vldr	s14, [r3]
 8003e8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e96:	4b15      	ldr	r3, [pc, #84]	@ (8003eec <StartEncoderTask+0x2b4>)
 8003e98:	edc3 7a00 	vstr	s15, [r3]
			// Accumulate the total distance traveled
			cnt1L = __HAL_TIM_GET_COUNTER(&htim2);
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec8 <StartEncoderTask+0x290>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea2:	84fb      	strh	r3, [r7, #38]	@ 0x26
			cnt1R = __HAL_TIM_GET_COUNTER(&htim3);
 8003ea4:	4b09      	ldr	r3, [pc, #36]	@ (8003ecc <StartEncoderTask+0x294>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eaa:	847b      	strh	r3, [r7, #34]	@ 0x22
			tick = HAL_GetTick();
 8003eac:	f000 fd16 	bl	80048dc <HAL_GetTick>
 8003eb0:	61f8      	str	r0, [r7, #28]
		}
		osDelay(50);
 8003eb2:	2032      	movs	r0, #50	@ 0x32
 8003eb4:	f006 fca8 	bl	800a808 <osDelay>
		if (HAL_GetTick() - tick > 10L) { // Checking per second
 8003eb8:	e6d5      	b.n	8003c66 <StartEncoderTask+0x2e>
 8003eba:	bf00      	nop
 8003ebc:	f3af 8000 	nop.w
 8003ec0:	54442eea 	.word	0x54442eea
 8003ec4:	400921fb 	.word	0x400921fb
 8003ec8:	20000380 	.word	0x20000380
 8003ecc:	200003c8 	.word	0x200003c8
 8003ed0:	44a50000 	.word	0x44a50000
 8003ed4:	20000558 	.word	0x20000558
 8003ed8:	20000560 	.word	0x20000560
 8003edc:	3a83126f 	.word	0x3a83126f
 8003ee0:	20000568 	.word	0x20000568
 8003ee4:	20000570 	.word	0x20000570
 8003ee8:	401a0000 	.word	0x401a0000
 8003eec:	20000230 	.word	0x20000230

08003ef0 <startrobotTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startrobotTask */
void startrobotTask(void *argument)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startrobotTask */
	/* Infinite loop */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);//Start servo pwm timer
 8003ef8:	210c      	movs	r1, #12
 8003efa:	4832      	ldr	r0, [pc, #200]	@ (8003fc4 <startrobotTask+0xd4>)
 8003efc:	f003 fa78 	bl	80073f0 <HAL_TIM_PWM_Start>
	degree=0;
 8003f00:	4b31      	ldr	r3, [pc, #196]	@ (8003fc8 <startrobotTask+0xd8>)
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8003f08:	2100      	movs	r1, #0
 8003f0a:	4830      	ldr	r0, [pc, #192]	@ (8003fcc <startrobotTask+0xdc>)
 8003f0c:	f003 fa70 	bl	80073f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8003f10:	2104      	movs	r1, #4
 8003f12:	482e      	ldr	r0, [pc, #184]	@ (8003fcc <startrobotTask+0xdc>)
 8003f14:	f003 fa6c 	bl	80073f0 <HAL_TIM_PWM_Start>

	//while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8)==1);
	int labTarget=87;
 8003f18:	2357      	movs	r3, #87	@ 0x57
 8003f1a:	60fb      	str	r3, [r7, #12]
	//	else
	//		labTarget=166;

	//{osDelay(200);osThreadYield();}
	//
	tempflag=0;
 8003f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8003fd0 <startrobotTask+0xe0>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
	set_servo_angle(Center);
 8003f22:	205f      	movs	r0, #95	@ 0x5f
 8003f24:	f7fe fc56 	bl	80027d4 <set_servo_angle>
	osDelay(200);
 8003f28:	20c8      	movs	r0, #200	@ 0xc8
 8003f2a:	f006 fc6d 	bl	800a808 <osDelay>
	start_time = HAL_GetTick();
 8003f2e:	f000 fcd5 	bl	80048dc <HAL_GetTick>
 8003f32:	4603      	mov	r3, r0
 8003f34:	4a27      	ldr	r2, [pc, #156]	@ (8003fd4 <startrobotTask+0xe4>)
 8003f36:	6013      	str	r3, [r2, #0]
	end_time = HAL_GetTick();  // Record end time
 8003f38:	f000 fcd0 	bl	80048dc <HAL_GetTick>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	4a26      	ldr	r2, [pc, #152]	@ (8003fd8 <startrobotTask+0xe8>)
 8003f40:	6013      	str	r3, [r2, #0]
	delta_time_sec= (end_time - start_time) * 0.001f; // Time difference in ms
 8003f42:	4b25      	ldr	r3, [pc, #148]	@ (8003fd8 <startrobotTask+0xe8>)
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4b23      	ldr	r3, [pc, #140]	@ (8003fd4 <startrobotTask+0xe4>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	ee07 3a90 	vmov	s15, r3
 8003f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f54:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003fdc <startrobotTask+0xec>
 8003f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f5c:	4b20      	ldr	r3, [pc, #128]	@ (8003fe0 <startrobotTask+0xf0>)
 8003f5e:	edc3 7a00 	vstr	s15, [r3]
	{

		//TEST TURN SEGMENT
		//	  {
		//
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8)==0)
 8003f62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f66:	481f      	ldr	r0, [pc, #124]	@ (8003fe4 <startrobotTask+0xf4>)
 8003f68:	f001 fc28 	bl	80057bc <HAL_GPIO_ReadPin>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d105      	bne.n	8003f7e <startrobotTask+0x8e>
		{
			//resetYaw();
			//yaw=0;
			tempflag=1;
 8003f72:	4b17      	ldr	r3, [pc, #92]	@ (8003fd0 <startrobotTask+0xe0>)
 8003f74:	2201      	movs	r2, #1
 8003f76:	601a      	str	r2, [r3, #0]
			CurrentState=MoveToBlock;
 8003f78:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe8 <startrobotTask+0xf8>)
 8003f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8003fec <startrobotTask+0xfc>)
 8003f7c:	601a      	str	r2, [r3, #0]

			//target=85;
			//set_servo_angle(Right);
			//osDelay(550);
		}
		if(flagReceived==1&&flagDone!=1)
 8003f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ff0 <startrobotTask+0x100>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d10a      	bne.n	8003f9c <startrobotTask+0xac>
 8003f86:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff4 <startrobotTask+0x104>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d006      	beq.n	8003f9c <startrobotTask+0xac>
		{
		if(aRxBuffer[0]=='G')//Start by rpi from android
 8003f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ff8 <startrobotTask+0x108>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b47      	cmp	r3, #71	@ 0x47
 8003f94:	d102      	bne.n	8003f9c <startrobotTask+0xac>
			{
			CurrentState=MoveToBlock;
 8003f96:	4b14      	ldr	r3, [pc, #80]	@ (8003fe8 <startrobotTask+0xf8>)
 8003f98:	4a14      	ldr	r2, [pc, #80]	@ (8003fec <startrobotTask+0xfc>)
 8003f9a:	601a      	str	r2, [r3, #0]
			}
		}

		if(CurrentState!=NULL)
 8003f9c:	4b12      	ldr	r3, [pc, #72]	@ (8003fe8 <startrobotTask+0xf8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <startrobotTask+0xbc>
			CurrentState->stateFunction();
 8003fa4:	4b10      	ldr	r3, [pc, #64]	@ (8003fe8 <startrobotTask+0xf8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4798      	blx	r3
		//////
		if(tempflag==1)
 8003fac:	4b08      	ldr	r3, [pc, #32]	@ (8003fd0 <startrobotTask+0xe0>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d102      	bne.n	8003fba <startrobotTask+0xca>
//			FLeft(43.5);
//			distanceTraveled=0;
//			Backward(0);
//			Motor_Stop();
//			Set_Motor_Direction(1,1);
			tempflag=0;
 8003fb4:	4b06      	ldr	r3, [pc, #24]	@ (8003fd0 <startrobotTask+0xe0>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
//			HAL_UART_Transmit(&huart3,(uint8_t *)"ACK\r\n",5,0xFFFF);
//			flagReceived=0;
//			flagDone = 0;
//		}

		osDelay(10);
 8003fba:	200a      	movs	r0, #10
 8003fbc:	f006 fc24 	bl	800a808 <osDelay>
		if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8)==0)
 8003fc0:	e7cf      	b.n	8003f62 <startrobotTask+0x72>
 8003fc2:	bf00      	nop
 8003fc4:	20000338 	.word	0x20000338
 8003fc8:	200005ec 	.word	0x200005ec
 8003fcc:	200004a0 	.word	0x200004a0
 8003fd0:	20000000 	.word	0x20000000
 8003fd4:	2000024c 	.word	0x2000024c
 8003fd8:	20000250 	.word	0x20000250
 8003fdc:	3a83126f 	.word	0x3a83126f
 8003fe0:	20000234 	.word	0x20000234
 8003fe4:	40020c00 	.word	0x40020c00
 8003fe8:	20000600 	.word	0x20000600
 8003fec:	080118c8 	.word	0x080118c8
 8003ff0:	2000023c 	.word	0x2000023c
 8003ff4:	20000238 	.word	0x20000238
 8003ff8:	200005f4 	.word	0x200005f4

08003ffc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004000:	b672      	cpsid	i
}
 8004002:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004004:	bf00      	nop
 8004006:	e7fd      	b.n	8004004 <Error_Handler+0x8>

08004008 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800400e:	2300      	movs	r3, #0
 8004010:	607b      	str	r3, [r7, #4]
 8004012:	4b12      	ldr	r3, [pc, #72]	@ (800405c <HAL_MspInit+0x54>)
 8004014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004016:	4a11      	ldr	r2, [pc, #68]	@ (800405c <HAL_MspInit+0x54>)
 8004018:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800401c:	6453      	str	r3, [r2, #68]	@ 0x44
 800401e:	4b0f      	ldr	r3, [pc, #60]	@ (800405c <HAL_MspInit+0x54>)
 8004020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004022:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004026:	607b      	str	r3, [r7, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	603b      	str	r3, [r7, #0]
 800402e:	4b0b      	ldr	r3, [pc, #44]	@ (800405c <HAL_MspInit+0x54>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	4a0a      	ldr	r2, [pc, #40]	@ (800405c <HAL_MspInit+0x54>)
 8004034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004038:	6413      	str	r3, [r2, #64]	@ 0x40
 800403a:	4b08      	ldr	r3, [pc, #32]	@ (800405c <HAL_MspInit+0x54>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004042:	603b      	str	r3, [r7, #0]
 8004044:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004046:	2200      	movs	r2, #0
 8004048:	210f      	movs	r1, #15
 800404a:	f06f 0001 	mvn.w	r0, #1
 800404e:	f001 f950 	bl	80052f2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	40023800 	.word	0x40023800

08004060 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08c      	sub	sp, #48	@ 0x30
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004068:	f107 031c 	add.w	r3, r7, #28
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	605a      	str	r2, [r3, #4]
 8004072:	609a      	str	r2, [r3, #8]
 8004074:	60da      	str	r2, [r3, #12]
 8004076:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a2e      	ldr	r2, [pc, #184]	@ (8004138 <HAL_ADC_MspInit+0xd8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d128      	bne.n	80040d4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004082:	2300      	movs	r3, #0
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	4b2d      	ldr	r3, [pc, #180]	@ (800413c <HAL_ADC_MspInit+0xdc>)
 8004088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408a:	4a2c      	ldr	r2, [pc, #176]	@ (800413c <HAL_ADC_MspInit+0xdc>)
 800408c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004090:	6453      	str	r3, [r2, #68]	@ 0x44
 8004092:	4b2a      	ldr	r3, [pc, #168]	@ (800413c <HAL_ADC_MspInit+0xdc>)
 8004094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409a:	61bb      	str	r3, [r7, #24]
 800409c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800409e:	2300      	movs	r3, #0
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	4b26      	ldr	r3, [pc, #152]	@ (800413c <HAL_ADC_MspInit+0xdc>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a6:	4a25      	ldr	r2, [pc, #148]	@ (800413c <HAL_ADC_MspInit+0xdc>)
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80040ae:	4b23      	ldr	r3, [pc, #140]	@ (800413c <HAL_ADC_MspInit+0xdc>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80040ba:	2301      	movs	r3, #1
 80040bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040be:	2303      	movs	r3, #3
 80040c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040c6:	f107 031c 	add.w	r3, r7, #28
 80040ca:	4619      	mov	r1, r3
 80040cc:	481c      	ldr	r0, [pc, #112]	@ (8004140 <HAL_ADC_MspInit+0xe0>)
 80040ce:	f001 f9d9 	bl	8005484 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80040d2:	e02c      	b.n	800412e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004144 <HAL_ADC_MspInit+0xe4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d127      	bne.n	800412e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80040de:	2300      	movs	r3, #0
 80040e0:	613b      	str	r3, [r7, #16]
 80040e2:	4b16      	ldr	r3, [pc, #88]	@ (800413c <HAL_ADC_MspInit+0xdc>)
 80040e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e6:	4a15      	ldr	r2, [pc, #84]	@ (800413c <HAL_ADC_MspInit+0xdc>)
 80040e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80040ee:	4b13      	ldr	r3, [pc, #76]	@ (800413c <HAL_ADC_MspInit+0xdc>)
 80040f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040f6:	613b      	str	r3, [r7, #16]
 80040f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	4b0f      	ldr	r3, [pc, #60]	@ (800413c <HAL_ADC_MspInit+0xdc>)
 8004100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004102:	4a0e      	ldr	r2, [pc, #56]	@ (800413c <HAL_ADC_MspInit+0xdc>)
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	6313      	str	r3, [r2, #48]	@ 0x30
 800410a:	4b0c      	ldr	r3, [pc, #48]	@ (800413c <HAL_ADC_MspInit+0xdc>)
 800410c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004116:	2302      	movs	r3, #2
 8004118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800411a:	2303      	movs	r3, #3
 800411c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411e:	2300      	movs	r3, #0
 8004120:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004122:	f107 031c 	add.w	r3, r7, #28
 8004126:	4619      	mov	r1, r3
 8004128:	4805      	ldr	r0, [pc, #20]	@ (8004140 <HAL_ADC_MspInit+0xe0>)
 800412a:	f001 f9ab 	bl	8005484 <HAL_GPIO_Init>
}
 800412e:	bf00      	nop
 8004130:	3730      	adds	r7, #48	@ 0x30
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40012000 	.word	0x40012000
 800413c:	40023800 	.word	0x40023800
 8004140:	40020000 	.word	0x40020000
 8004144:	40012100 	.word	0x40012100

08004148 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b08a      	sub	sp, #40	@ 0x28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004150:	f107 0314 	add.w	r3, r7, #20
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	605a      	str	r2, [r3, #4]
 800415a:	609a      	str	r2, [r3, #8]
 800415c:	60da      	str	r2, [r3, #12]
 800415e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a19      	ldr	r2, [pc, #100]	@ (80041cc <HAL_I2C_MspInit+0x84>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d12c      	bne.n	80041c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
 800416e:	4b18      	ldr	r3, [pc, #96]	@ (80041d0 <HAL_I2C_MspInit+0x88>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004172:	4a17      	ldr	r2, [pc, #92]	@ (80041d0 <HAL_I2C_MspInit+0x88>)
 8004174:	f043 0302 	orr.w	r3, r3, #2
 8004178:	6313      	str	r3, [r2, #48]	@ 0x30
 800417a:	4b15      	ldr	r3, [pc, #84]	@ (80041d0 <HAL_I2C_MspInit+0x88>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	613b      	str	r3, [r7, #16]
 8004184:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004186:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800418a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800418c:	2312      	movs	r3, #18
 800418e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004190:	2300      	movs	r3, #0
 8004192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004194:	2303      	movs	r3, #3
 8004196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004198:	2304      	movs	r3, #4
 800419a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800419c:	f107 0314 	add.w	r3, r7, #20
 80041a0:	4619      	mov	r1, r3
 80041a2:	480c      	ldr	r0, [pc, #48]	@ (80041d4 <HAL_I2C_MspInit+0x8c>)
 80041a4:	f001 f96e 	bl	8005484 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	4b08      	ldr	r3, [pc, #32]	@ (80041d0 <HAL_I2C_MspInit+0x88>)
 80041ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b0:	4a07      	ldr	r2, [pc, #28]	@ (80041d0 <HAL_I2C_MspInit+0x88>)
 80041b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80041b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80041b8:	4b05      	ldr	r3, [pc, #20]	@ (80041d0 <HAL_I2C_MspInit+0x88>)
 80041ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80041c4:	bf00      	nop
 80041c6:	3728      	adds	r7, #40	@ 0x28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40005400 	.word	0x40005400
 80041d0:	40023800 	.word	0x40023800
 80041d4:	40020400 	.word	0x40020400

080041d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08e      	sub	sp, #56	@ 0x38
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	605a      	str	r2, [r3, #4]
 80041ea:	609a      	str	r2, [r3, #8]
 80041ec:	60da      	str	r2, [r3, #12]
 80041ee:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a4a      	ldr	r2, [pc, #296]	@ (8004320 <HAL_TIM_Base_MspInit+0x148>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d10e      	bne.n	8004218 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041fa:	2300      	movs	r3, #0
 80041fc:	623b      	str	r3, [r7, #32]
 80041fe:	4b49      	ldr	r3, [pc, #292]	@ (8004324 <HAL_TIM_Base_MspInit+0x14c>)
 8004200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004202:	4a48      	ldr	r2, [pc, #288]	@ (8004324 <HAL_TIM_Base_MspInit+0x14c>)
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	6453      	str	r3, [r2, #68]	@ 0x44
 800420a:	4b46      	ldr	r3, [pc, #280]	@ (8004324 <HAL_TIM_Base_MspInit+0x14c>)
 800420c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	623b      	str	r3, [r7, #32]
 8004214:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004216:	e07f      	b.n	8004318 <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM4)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a42      	ldr	r2, [pc, #264]	@ (8004328 <HAL_TIM_Base_MspInit+0x150>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d135      	bne.n	800428e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004222:	2300      	movs	r3, #0
 8004224:	61fb      	str	r3, [r7, #28]
 8004226:	4b3f      	ldr	r3, [pc, #252]	@ (8004324 <HAL_TIM_Base_MspInit+0x14c>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422a:	4a3e      	ldr	r2, [pc, #248]	@ (8004324 <HAL_TIM_Base_MspInit+0x14c>)
 800422c:	f043 0304 	orr.w	r3, r3, #4
 8004230:	6413      	str	r3, [r2, #64]	@ 0x40
 8004232:	4b3c      	ldr	r3, [pc, #240]	@ (8004324 <HAL_TIM_Base_MspInit+0x14c>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	f003 0304 	and.w	r3, r3, #4
 800423a:	61fb      	str	r3, [r7, #28]
 800423c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800423e:	2300      	movs	r3, #0
 8004240:	61bb      	str	r3, [r7, #24]
 8004242:	4b38      	ldr	r3, [pc, #224]	@ (8004324 <HAL_TIM_Base_MspInit+0x14c>)
 8004244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004246:	4a37      	ldr	r2, [pc, #220]	@ (8004324 <HAL_TIM_Base_MspInit+0x14c>)
 8004248:	f043 0308 	orr.w	r3, r3, #8
 800424c:	6313      	str	r3, [r2, #48]	@ 0x30
 800424e:	4b35      	ldr	r3, [pc, #212]	@ (8004324 <HAL_TIM_Base_MspInit+0x14c>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	61bb      	str	r3, [r7, #24]
 8004258:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800425a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800425e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004260:	2302      	movs	r3, #2
 8004262:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004264:	2300      	movs	r3, #0
 8004266:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004268:	2300      	movs	r3, #0
 800426a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800426c:	2302      	movs	r3, #2
 800426e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004270:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004274:	4619      	mov	r1, r3
 8004276:	482d      	ldr	r0, [pc, #180]	@ (800432c <HAL_TIM_Base_MspInit+0x154>)
 8004278:	f001 f904 	bl	8005484 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800427c:	2200      	movs	r2, #0
 800427e:	2105      	movs	r1, #5
 8004280:	201e      	movs	r0, #30
 8004282:	f001 f836 	bl	80052f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004286:	201e      	movs	r0, #30
 8004288:	f001 f84f 	bl	800532a <HAL_NVIC_EnableIRQ>
}
 800428c:	e044      	b.n	8004318 <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM6)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a27      	ldr	r2, [pc, #156]	@ (8004330 <HAL_TIM_Base_MspInit+0x158>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d10e      	bne.n	80042b6 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004298:	2300      	movs	r3, #0
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	4b21      	ldr	r3, [pc, #132]	@ (8004324 <HAL_TIM_Base_MspInit+0x14c>)
 800429e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a0:	4a20      	ldr	r2, [pc, #128]	@ (8004324 <HAL_TIM_Base_MspInit+0x14c>)
 80042a2:	f043 0310 	orr.w	r3, r3, #16
 80042a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80042a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004324 <HAL_TIM_Base_MspInit+0x14c>)
 80042aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ac:	f003 0310 	and.w	r3, r3, #16
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	697b      	ldr	r3, [r7, #20]
}
 80042b4:	e030      	b.n	8004318 <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM8)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004334 <HAL_TIM_Base_MspInit+0x15c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d12b      	bne.n	8004318 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]
 80042c4:	4b17      	ldr	r3, [pc, #92]	@ (8004324 <HAL_TIM_Base_MspInit+0x14c>)
 80042c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c8:	4a16      	ldr	r2, [pc, #88]	@ (8004324 <HAL_TIM_Base_MspInit+0x14c>)
 80042ca:	f043 0302 	orr.w	r3, r3, #2
 80042ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80042d0:	4b14      	ldr	r3, [pc, #80]	@ (8004324 <HAL_TIM_Base_MspInit+0x14c>)
 80042d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042dc:	2300      	movs	r3, #0
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	4b10      	ldr	r3, [pc, #64]	@ (8004324 <HAL_TIM_Base_MspInit+0x14c>)
 80042e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e4:	4a0f      	ldr	r2, [pc, #60]	@ (8004324 <HAL_TIM_Base_MspInit+0x14c>)
 80042e6:	f043 0304 	orr.w	r3, r3, #4
 80042ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80042ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004324 <HAL_TIM_Base_MspInit+0x14c>)
 80042ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042f8:	23c0      	movs	r3, #192	@ 0xc0
 80042fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042fc:	2302      	movs	r3, #2
 80042fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004300:	2300      	movs	r3, #0
 8004302:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004304:	2300      	movs	r3, #0
 8004306:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004308:	2303      	movs	r3, #3
 800430a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800430c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004310:	4619      	mov	r1, r3
 8004312:	4809      	ldr	r0, [pc, #36]	@ (8004338 <HAL_TIM_Base_MspInit+0x160>)
 8004314:	f001 f8b6 	bl	8005484 <HAL_GPIO_Init>
}
 8004318:	bf00      	nop
 800431a:	3738      	adds	r7, #56	@ 0x38
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40010000 	.word	0x40010000
 8004324:	40023800 	.word	0x40023800
 8004328:	40000800 	.word	0x40000800
 800432c:	40020c00 	.word	0x40020c00
 8004330:	40001000 	.word	0x40001000
 8004334:	40010400 	.word	0x40010400
 8004338:	40020800 	.word	0x40020800

0800433c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08c      	sub	sp, #48	@ 0x30
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004344:	f107 031c 	add.w	r3, r7, #28
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	605a      	str	r2, [r3, #4]
 800434e:	609a      	str	r2, [r3, #8]
 8004350:	60da      	str	r2, [r3, #12]
 8004352:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800435c:	d14b      	bne.n	80043f6 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800435e:	2300      	movs	r3, #0
 8004360:	61bb      	str	r3, [r7, #24]
 8004362:	4b3f      	ldr	r3, [pc, #252]	@ (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	4a3e      	ldr	r2, [pc, #248]	@ (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	6413      	str	r3, [r2, #64]	@ 0x40
 800436e:	4b3c      	ldr	r3, [pc, #240]	@ (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	61bb      	str	r3, [r7, #24]
 8004378:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	4b38      	ldr	r3, [pc, #224]	@ (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 8004380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004382:	4a37      	ldr	r2, [pc, #220]	@ (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 8004384:	f043 0301 	orr.w	r3, r3, #1
 8004388:	6313      	str	r3, [r2, #48]	@ 0x30
 800438a:	4b35      	ldr	r3, [pc, #212]	@ (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 800438c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004396:	2300      	movs	r3, #0
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	4b31      	ldr	r3, [pc, #196]	@ (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 800439c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439e:	4a30      	ldr	r2, [pc, #192]	@ (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 80043a0:	f043 0302 	orr.w	r3, r3, #2
 80043a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80043a6:	4b2e      	ldr	r3, [pc, #184]	@ (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	613b      	str	r3, [r7, #16]
 80043b0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80043b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b8:	2302      	movs	r3, #2
 80043ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c0:	2300      	movs	r3, #0
 80043c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80043c4:	2301      	movs	r3, #1
 80043c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043c8:	f107 031c 	add.w	r3, r7, #28
 80043cc:	4619      	mov	r1, r3
 80043ce:	4825      	ldr	r0, [pc, #148]	@ (8004464 <HAL_TIM_Encoder_MspInit+0x128>)
 80043d0:	f001 f858 	bl	8005484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80043d4:	2308      	movs	r3, #8
 80043d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043d8:	2302      	movs	r3, #2
 80043da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043dc:	2300      	movs	r3, #0
 80043de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e0:	2300      	movs	r3, #0
 80043e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80043e4:	2301      	movs	r3, #1
 80043e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043e8:	f107 031c 	add.w	r3, r7, #28
 80043ec:	4619      	mov	r1, r3
 80043ee:	481e      	ldr	r0, [pc, #120]	@ (8004468 <HAL_TIM_Encoder_MspInit+0x12c>)
 80043f0:	f001 f848 	bl	8005484 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80043f4:	e030      	b.n	8004458 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1c      	ldr	r2, [pc, #112]	@ (800446c <HAL_TIM_Encoder_MspInit+0x130>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d12b      	bne.n	8004458 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	4b16      	ldr	r3, [pc, #88]	@ (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 8004406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004408:	4a15      	ldr	r2, [pc, #84]	@ (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 800440a:	f043 0302 	orr.w	r3, r3, #2
 800440e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004410:	4b13      	ldr	r3, [pc, #76]	@ (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 8004412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800441c:	2300      	movs	r3, #0
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	4b0f      	ldr	r3, [pc, #60]	@ (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 8004422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004424:	4a0e      	ldr	r2, [pc, #56]	@ (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 8004426:	f043 0301 	orr.w	r3, r3, #1
 800442a:	6313      	str	r3, [r2, #48]	@ 0x30
 800442c:	4b0c      	ldr	r3, [pc, #48]	@ (8004460 <HAL_TIM_Encoder_MspInit+0x124>)
 800442e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	60bb      	str	r3, [r7, #8]
 8004436:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004438:	23c0      	movs	r3, #192	@ 0xc0
 800443a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800443c:	2302      	movs	r3, #2
 800443e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004440:	2300      	movs	r3, #0
 8004442:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004444:	2300      	movs	r3, #0
 8004446:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004448:	2302      	movs	r3, #2
 800444a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800444c:	f107 031c 	add.w	r3, r7, #28
 8004450:	4619      	mov	r1, r3
 8004452:	4804      	ldr	r0, [pc, #16]	@ (8004464 <HAL_TIM_Encoder_MspInit+0x128>)
 8004454:	f001 f816 	bl	8005484 <HAL_GPIO_Init>
}
 8004458:	bf00      	nop
 800445a:	3730      	adds	r7, #48	@ 0x30
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40023800 	.word	0x40023800
 8004464:	40020000 	.word	0x40020000
 8004468:	40020400 	.word	0x40020400
 800446c:	40000400 	.word	0x40000400

08004470 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004478:	f107 030c 	add.w	r3, r7, #12
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	605a      	str	r2, [r3, #4]
 8004482:	609a      	str	r2, [r3, #8]
 8004484:	60da      	str	r2, [r3, #12]
 8004486:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a12      	ldr	r2, [pc, #72]	@ (80044d8 <HAL_TIM_MspPostInit+0x68>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d11e      	bne.n	80044d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004492:	2300      	movs	r3, #0
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	4b11      	ldr	r3, [pc, #68]	@ (80044dc <HAL_TIM_MspPostInit+0x6c>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449a:	4a10      	ldr	r2, [pc, #64]	@ (80044dc <HAL_TIM_MspPostInit+0x6c>)
 800449c:	f043 0310 	orr.w	r3, r3, #16
 80044a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80044a2:	4b0e      	ldr	r3, [pc, #56]	@ (80044dc <HAL_TIM_MspPostInit+0x6c>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a6:	f003 0310 	and.w	r3, r3, #16
 80044aa:	60bb      	str	r3, [r7, #8]
 80044ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80044ae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80044b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b4:	2302      	movs	r3, #2
 80044b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b8:	2300      	movs	r3, #0
 80044ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044bc:	2300      	movs	r3, #0
 80044be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80044c0:	2301      	movs	r3, #1
 80044c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044c4:	f107 030c 	add.w	r3, r7, #12
 80044c8:	4619      	mov	r1, r3
 80044ca:	4805      	ldr	r0, [pc, #20]	@ (80044e0 <HAL_TIM_MspPostInit+0x70>)
 80044cc:	f000 ffda 	bl	8005484 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80044d0:	bf00      	nop
 80044d2:	3720      	adds	r7, #32
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40010000 	.word	0x40010000
 80044dc:	40023800 	.word	0x40023800
 80044e0:	40021000 	.word	0x40021000

080044e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	@ 0x28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ec:	f107 0314 	add.w	r3, r7, #20
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	605a      	str	r2, [r3, #4]
 80044f6:	609a      	str	r2, [r3, #8]
 80044f8:	60da      	str	r2, [r3, #12]
 80044fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a1d      	ldr	r2, [pc, #116]	@ (8004578 <HAL_UART_MspInit+0x94>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d134      	bne.n	8004570 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004506:	2300      	movs	r3, #0
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	4b1c      	ldr	r3, [pc, #112]	@ (800457c <HAL_UART_MspInit+0x98>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	4a1b      	ldr	r2, [pc, #108]	@ (800457c <HAL_UART_MspInit+0x98>)
 8004510:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004514:	6413      	str	r3, [r2, #64]	@ 0x40
 8004516:	4b19      	ldr	r3, [pc, #100]	@ (800457c <HAL_UART_MspInit+0x98>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800451e:	613b      	str	r3, [r7, #16]
 8004520:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
 8004526:	4b15      	ldr	r3, [pc, #84]	@ (800457c <HAL_UART_MspInit+0x98>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452a:	4a14      	ldr	r2, [pc, #80]	@ (800457c <HAL_UART_MspInit+0x98>)
 800452c:	f043 0304 	orr.w	r3, r3, #4
 8004530:	6313      	str	r3, [r2, #48]	@ 0x30
 8004532:	4b12      	ldr	r3, [pc, #72]	@ (800457c <HAL_UART_MspInit+0x98>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800453e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004544:	2302      	movs	r3, #2
 8004546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004548:	2300      	movs	r3, #0
 800454a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800454c:	2303      	movs	r3, #3
 800454e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004550:	2307      	movs	r3, #7
 8004552:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004554:	f107 0314 	add.w	r3, r7, #20
 8004558:	4619      	mov	r1, r3
 800455a:	4809      	ldr	r0, [pc, #36]	@ (8004580 <HAL_UART_MspInit+0x9c>)
 800455c:	f000 ff92 	bl	8005484 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004560:	2200      	movs	r2, #0
 8004562:	2105      	movs	r1, #5
 8004564:	2027      	movs	r0, #39	@ 0x27
 8004566:	f000 fec4 	bl	80052f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800456a:	2027      	movs	r0, #39	@ 0x27
 800456c:	f000 fedd 	bl	800532a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8004570:	bf00      	nop
 8004572:	3728      	adds	r7, #40	@ 0x28
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40004800 	.word	0x40004800
 800457c:	40023800 	.word	0x40023800
 8004580:	40020800 	.word	0x40020800

08004584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004588:	bf00      	nop
 800458a:	e7fd      	b.n	8004588 <NMI_Handler+0x4>

0800458c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004590:	bf00      	nop
 8004592:	e7fd      	b.n	8004590 <HardFault_Handler+0x4>

08004594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004598:	bf00      	nop
 800459a:	e7fd      	b.n	8004598 <MemManage_Handler+0x4>

0800459c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045a0:	bf00      	nop
 80045a2:	e7fd      	b.n	80045a0 <BusFault_Handler+0x4>

080045a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045a8:	bf00      	nop
 80045aa:	e7fd      	b.n	80045a8 <UsageFault_Handler+0x4>

080045ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045b0:	bf00      	nop
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045be:	f000 f979 	bl	80048b4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80045c2:	f007 fd49 	bl	800c058 <xTaskGetSchedulerState>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d001      	beq.n	80045d0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80045cc:	f008 fb44 	bl	800cc58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045d0:	bf00      	nop
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SWITCH_Pin);
 80045d8:	2001      	movs	r0, #1
 80045da:	f001 f93b 	bl	8005854 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80045de:	bf00      	nop
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80045e8:	4802      	ldr	r0, [pc, #8]	@ (80045f4 <TIM4_IRQHandler+0x10>)
 80045ea:	f003 fa7f 	bl	8007aec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80045ee:	bf00      	nop
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20000410 	.word	0x20000410

080045f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80045fc:	4802      	ldr	r0, [pc, #8]	@ (8004608 <USART3_IRQHandler+0x10>)
 80045fe:	f004 fc1f 	bl	8008e40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004602:	bf00      	nop
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	200004e8 	.word	0x200004e8

0800460c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
	return 1;
 8004610:	2301      	movs	r3, #1
}
 8004612:	4618      	mov	r0, r3
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <_kill>:

int _kill(int pid, int sig)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004626:	f009 fddf 	bl	800e1e8 <__errno>
 800462a:	4603      	mov	r3, r0
 800462c:	2216      	movs	r2, #22
 800462e:	601a      	str	r2, [r3, #0]
	return -1;
 8004630:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <_exit>:

void _exit (int status)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004644:	f04f 31ff 	mov.w	r1, #4294967295
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff ffe7 	bl	800461c <_kill>
	while (1) {}		/* Make sure we hang here */
 800464e:	bf00      	nop
 8004650:	e7fd      	b.n	800464e <_exit+0x12>

08004652 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b086      	sub	sp, #24
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800465e:	2300      	movs	r3, #0
 8004660:	617b      	str	r3, [r7, #20]
 8004662:	e00a      	b.n	800467a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004664:	f3af 8000 	nop.w
 8004668:	4601      	mov	r1, r0
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	60ba      	str	r2, [r7, #8]
 8004670:	b2ca      	uxtb	r2, r1
 8004672:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	3301      	adds	r3, #1
 8004678:	617b      	str	r3, [r7, #20]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	429a      	cmp	r2, r3
 8004680:	dbf0      	blt.n	8004664 <_read+0x12>
	}

return len;
 8004682:	687b      	ldr	r3, [r7, #4]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	e009      	b.n	80046b2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	60ba      	str	r2, [r7, #8]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	3301      	adds	r3, #1
 80046b0:	617b      	str	r3, [r7, #20]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	dbf1      	blt.n	800469e <_write+0x12>
	}
	return len;
 80046ba:	687b      	ldr	r3, [r7, #4]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3718      	adds	r7, #24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <_close>:

int _close(int file)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
	return -1;
 80046cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80046ec:	605a      	str	r2, [r3, #4]
	return 0;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <_isatty>:

int _isatty(int file)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
	return 1;
 8004704:	2301      	movs	r3, #1
}
 8004706:	4618      	mov	r0, r3
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004712:	b480      	push	{r7}
 8004714:	b085      	sub	sp, #20
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
	return 0;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3714      	adds	r7, #20
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004734:	4a14      	ldr	r2, [pc, #80]	@ (8004788 <_sbrk+0x5c>)
 8004736:	4b15      	ldr	r3, [pc, #84]	@ (800478c <_sbrk+0x60>)
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004740:	4b13      	ldr	r3, [pc, #76]	@ (8004790 <_sbrk+0x64>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d102      	bne.n	800474e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004748:	4b11      	ldr	r3, [pc, #68]	@ (8004790 <_sbrk+0x64>)
 800474a:	4a12      	ldr	r2, [pc, #72]	@ (8004794 <_sbrk+0x68>)
 800474c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800474e:	4b10      	ldr	r3, [pc, #64]	@ (8004790 <_sbrk+0x64>)
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4413      	add	r3, r2
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	429a      	cmp	r2, r3
 800475a:	d207      	bcs.n	800476c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800475c:	f009 fd44 	bl	800e1e8 <__errno>
 8004760:	4603      	mov	r3, r0
 8004762:	220c      	movs	r2, #12
 8004764:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004766:	f04f 33ff 	mov.w	r3, #4294967295
 800476a:	e009      	b.n	8004780 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800476c:	4b08      	ldr	r3, [pc, #32]	@ (8004790 <_sbrk+0x64>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004772:	4b07      	ldr	r3, [pc, #28]	@ (8004790 <_sbrk+0x64>)
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4413      	add	r3, r2
 800477a:	4a05      	ldr	r2, [pc, #20]	@ (8004790 <_sbrk+0x64>)
 800477c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800477e:	68fb      	ldr	r3, [r7, #12]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	20020000 	.word	0x20020000
 800478c:	00000400 	.word	0x00000400
 8004790:	20000608 	.word	0x20000608
 8004794:	200054b8 	.word	0x200054b8

08004798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800479c:	4b06      	ldr	r3, [pc, #24]	@ (80047b8 <SystemInit+0x20>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a2:	4a05      	ldr	r2, [pc, #20]	@ (80047b8 <SystemInit+0x20>)
 80047a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80047a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047ac:	bf00      	nop
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	e000ed00 	.word	0xe000ed00

080047bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80047bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80047f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80047c0:	480d      	ldr	r0, [pc, #52]	@ (80047f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80047c2:	490e      	ldr	r1, [pc, #56]	@ (80047fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80047c4:	4a0e      	ldr	r2, [pc, #56]	@ (8004800 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80047c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047c8:	e002      	b.n	80047d0 <LoopCopyDataInit>

080047ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047ca:	58d4      	ldr	r4, [r2, r3]
   str r4, [r0, r3]
 80047cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047ce:	3304      	adds	r3, #4

080047d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047d4:	d3f9      	bcc.n	80047ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047d6:	4a0b      	ldr	r2, [pc, #44]	@ (8004804 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80047d8:	4c0b      	ldr	r4, [pc, #44]	@ (8004808 <LoopFillZerobss+0x26>)
  movs r3, #0
 80047da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047dc:	e001      	b.n	80047e2 <LoopFillZerobss>

080047de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047e0:	3204      	adds	r2, #4

080047e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047e4:	d3fb      	bcc.n	80047de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80047e6:	f7ff ffd7 	bl	8004798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80047ea:	f009 fd03 	bl	800e1f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047ee:	f7fe fa29 	bl	8002c44 <main>
  bx  lr    
 80047f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80047f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80047f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047fc:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8004800:	080127d0 	.word	0x080127d0
  ldr r2, =_sbss
 8004804:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8004808:	200054b8 	.word	0x200054b8

0800480c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800480c:	e7fe      	b.n	800480c <ADC_IRQHandler>
	...

08004810 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004814:	4b0e      	ldr	r3, [pc, #56]	@ (8004850 <HAL_Init+0x40>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a0d      	ldr	r2, [pc, #52]	@ (8004850 <HAL_Init+0x40>)
 800481a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800481e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004820:	4b0b      	ldr	r3, [pc, #44]	@ (8004850 <HAL_Init+0x40>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a0a      	ldr	r2, [pc, #40]	@ (8004850 <HAL_Init+0x40>)
 8004826:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800482a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800482c:	4b08      	ldr	r3, [pc, #32]	@ (8004850 <HAL_Init+0x40>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a07      	ldr	r2, [pc, #28]	@ (8004850 <HAL_Init+0x40>)
 8004832:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004836:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004838:	2003      	movs	r0, #3
 800483a:	f000 fd4f 	bl	80052dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800483e:	200f      	movs	r0, #15
 8004840:	f000 f808 	bl	8004854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004844:	f7ff fbe0 	bl	8004008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40023c00 	.word	0x40023c00

08004854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800485c:	4b12      	ldr	r3, [pc, #72]	@ (80048a8 <HAL_InitTick+0x54>)
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	4b12      	ldr	r3, [pc, #72]	@ (80048ac <HAL_InitTick+0x58>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	4619      	mov	r1, r3
 8004866:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800486a:	fbb3 f3f1 	udiv	r3, r3, r1
 800486e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fd67 	bl	8005346 <HAL_SYSTICK_Config>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e00e      	b.n	80048a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b0f      	cmp	r3, #15
 8004886:	d80a      	bhi.n	800489e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004888:	2200      	movs	r2, #0
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	f04f 30ff 	mov.w	r0, #4294967295
 8004890:	f000 fd2f 	bl	80052f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004894:	4a06      	ldr	r2, [pc, #24]	@ (80048b0 <HAL_InitTick+0x5c>)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	e000      	b.n	80048a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	2000001c 	.word	0x2000001c
 80048ac:	20000024 	.word	0x20000024
 80048b0:	20000020 	.word	0x20000020

080048b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048b8:	4b06      	ldr	r3, [pc, #24]	@ (80048d4 <HAL_IncTick+0x20>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	4b06      	ldr	r3, [pc, #24]	@ (80048d8 <HAL_IncTick+0x24>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4413      	add	r3, r2
 80048c4:	4a04      	ldr	r2, [pc, #16]	@ (80048d8 <HAL_IncTick+0x24>)
 80048c6:	6013      	str	r3, [r2, #0]
}
 80048c8:	bf00      	nop
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	20000024 	.word	0x20000024
 80048d8:	2000060c 	.word	0x2000060c

080048dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  return uwTick;
 80048e0:	4b03      	ldr	r3, [pc, #12]	@ (80048f0 <HAL_GetTick+0x14>)
 80048e2:	681b      	ldr	r3, [r3, #0]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	2000060c 	.word	0x2000060c

080048f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048fc:	f7ff ffee 	bl	80048dc <HAL_GetTick>
 8004900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490c:	d005      	beq.n	800491a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800490e:	4b0a      	ldr	r3, [pc, #40]	@ (8004938 <HAL_Delay+0x44>)
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	461a      	mov	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800491a:	bf00      	nop
 800491c:	f7ff ffde 	bl	80048dc <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	429a      	cmp	r2, r3
 800492a:	d8f7      	bhi.n	800491c <HAL_Delay+0x28>
  {
  }
}
 800492c:	bf00      	nop
 800492e:	bf00      	nop
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20000024 	.word	0x20000024

0800493c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004944:	2300      	movs	r3, #0
 8004946:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e033      	b.n	80049ba <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004956:	2b00      	cmp	r3, #0
 8004958:	d109      	bne.n	800496e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff fb80 	bl	8004060 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004972:	f003 0310 	and.w	r3, r3, #16
 8004976:	2b00      	cmp	r3, #0
 8004978:	d118      	bne.n	80049ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800497e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004982:	f023 0302 	bic.w	r3, r3, #2
 8004986:	f043 0202 	orr.w	r2, r3, #2
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 fad8 	bl	8004f44 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499e:	f023 0303 	bic.w	r3, r3, #3
 80049a2:	f043 0201 	orr.w	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80049aa:	e001      	b.n	80049b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d101      	bne.n	80049de <HAL_ADC_Start+0x1a>
 80049da:	2302      	movs	r3, #2
 80049dc:	e0b2      	b.n	8004b44 <HAL_ADC_Start+0x180>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d018      	beq.n	8004a26 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0201 	orr.w	r2, r2, #1
 8004a02:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004a04:	4b52      	ldr	r3, [pc, #328]	@ (8004b50 <HAL_ADC_Start+0x18c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a52      	ldr	r2, [pc, #328]	@ (8004b54 <HAL_ADC_Start+0x190>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	0c9a      	lsrs	r2, r3, #18
 8004a10:	4613      	mov	r3, r2
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	4413      	add	r3, r2
 8004a16:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004a18:	e002      	b.n	8004a20 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f9      	bne.n	8004a1a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d17a      	bne.n	8004b2a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a38:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004a3c:	f023 0301 	bic.w	r3, r3, #1
 8004a40:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d007      	beq.n	8004a66 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004a5e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a72:	d106      	bne.n	8004a82 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a78:	f023 0206 	bic.w	r2, r3, #6
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004a80:	e002      	b.n	8004a88 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a90:	4b31      	ldr	r3, [pc, #196]	@ (8004b58 <HAL_ADC_Start+0x194>)
 8004a92:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004a9c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f003 031f 	and.w	r3, r3, #31
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d12a      	bne.n	8004b00 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a2b      	ldr	r2, [pc, #172]	@ (8004b5c <HAL_ADC_Start+0x198>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d015      	beq.n	8004ae0 <HAL_ADC_Start+0x11c>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a29      	ldr	r2, [pc, #164]	@ (8004b60 <HAL_ADC_Start+0x19c>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d105      	bne.n	8004aca <HAL_ADC_Start+0x106>
 8004abe:	4b26      	ldr	r3, [pc, #152]	@ (8004b58 <HAL_ADC_Start+0x194>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f003 031f 	and.w	r3, r3, #31
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a25      	ldr	r2, [pc, #148]	@ (8004b64 <HAL_ADC_Start+0x1a0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d136      	bne.n	8004b42 <HAL_ADC_Start+0x17e>
 8004ad4:	4b20      	ldr	r3, [pc, #128]	@ (8004b58 <HAL_ADC_Start+0x194>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f003 0310 	and.w	r3, r3, #16
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d130      	bne.n	8004b42 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d129      	bne.n	8004b42 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004afc:	609a      	str	r2, [r3, #8]
 8004afe:	e020      	b.n	8004b42 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a15      	ldr	r2, [pc, #84]	@ (8004b5c <HAL_ADC_Start+0x198>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d11b      	bne.n	8004b42 <HAL_ADC_Start+0x17e>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d114      	bne.n	8004b42 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	689a      	ldr	r2, [r3, #8]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004b26:	609a      	str	r2, [r3, #8]
 8004b28:	e00b      	b.n	8004b42 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2e:	f043 0210 	orr.w	r2, r3, #16
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3a:	f043 0201 	orr.w	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	2000001c 	.word	0x2000001c
 8004b54:	431bde83 	.word	0x431bde83
 8004b58:	40012300 	.word	0x40012300
 8004b5c:	40012000 	.word	0x40012000
 8004b60:	40012100 	.word	0x40012100
 8004b64:	40012200 	.word	0x40012200

08004b68 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d101      	bne.n	8004b7e <HAL_ADC_Stop+0x16>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e021      	b.n	8004bc2 <HAL_ADC_Stop+0x5a>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0201 	bic.w	r2, r2, #1
 8004b94:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d109      	bne.n	8004bb8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004bac:	f023 0301 	bic.w	r3, r3, #1
 8004bb0:	f043 0201 	orr.w	r2, r3, #1
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b084      	sub	sp, #16
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bea:	d113      	bne.n	8004c14 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004bf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bfa:	d10b      	bne.n	8004c14 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c00:	f043 0220 	orr.w	r2, r3, #32
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e063      	b.n	8004cdc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c14:	f7ff fe62 	bl	80048dc <HAL_GetTick>
 8004c18:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004c1a:	e021      	b.n	8004c60 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c22:	d01d      	beq.n	8004c60 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d007      	beq.n	8004c3a <HAL_ADC_PollForConversion+0x6c>
 8004c2a:	f7ff fe57 	bl	80048dc <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d212      	bcs.n	8004c60 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d00b      	beq.n	8004c60 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4c:	f043 0204 	orr.w	r2, r3, #4
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e03d      	b.n	8004cdc <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d1d6      	bne.n	8004c1c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f06f 0212 	mvn.w	r2, #18
 8004c76:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d123      	bne.n	8004cda <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d11f      	bne.n	8004cda <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d006      	beq.n	8004cb6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d111      	bne.n	8004cda <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d105      	bne.n	8004cda <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd2:	f043 0201 	orr.w	r2, r3, #1
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
	...

08004d00 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_ADC_ConfigChannel+0x1c>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e105      	b.n	8004f28 <HAL_ADC_ConfigChannel+0x228>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b09      	cmp	r3, #9
 8004d2a:	d925      	bls.n	8004d78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68d9      	ldr	r1, [r3, #12]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	461a      	mov	r2, r3
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	4413      	add	r3, r2
 8004d40:	3b1e      	subs	r3, #30
 8004d42:	2207      	movs	r2, #7
 8004d44:	fa02 f303 	lsl.w	r3, r2, r3
 8004d48:	43da      	mvns	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	400a      	ands	r2, r1
 8004d50:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68d9      	ldr	r1, [r3, #12]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	4618      	mov	r0, r3
 8004d64:	4603      	mov	r3, r0
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	4403      	add	r3, r0
 8004d6a:	3b1e      	subs	r3, #30
 8004d6c:	409a      	lsls	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	60da      	str	r2, [r3, #12]
 8004d76:	e022      	b.n	8004dbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6919      	ldr	r1, [r3, #16]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	461a      	mov	r2, r3
 8004d86:	4613      	mov	r3, r2
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	4413      	add	r3, r2
 8004d8c:	2207      	movs	r2, #7
 8004d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d92:	43da      	mvns	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	400a      	ands	r2, r1
 8004d9a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6919      	ldr	r1, [r3, #16]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	4618      	mov	r0, r3
 8004dae:	4603      	mov	r3, r0
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	4403      	add	r3, r0
 8004db4:	409a      	lsls	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b06      	cmp	r3, #6
 8004dc4:	d824      	bhi.n	8004e10 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	3b05      	subs	r3, #5
 8004dd8:	221f      	movs	r2, #31
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	43da      	mvns	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	400a      	ands	r2, r1
 8004de6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	4618      	mov	r0, r3
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685a      	ldr	r2, [r3, #4]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	3b05      	subs	r3, #5
 8004e02:	fa00 f203 	lsl.w	r2, r0, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e0e:	e04c      	b.n	8004eaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	2b0c      	cmp	r3, #12
 8004e16:	d824      	bhi.n	8004e62 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	4613      	mov	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	3b23      	subs	r3, #35	@ 0x23
 8004e2a:	221f      	movs	r2, #31
 8004e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e30:	43da      	mvns	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	400a      	ands	r2, r1
 8004e38:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	4618      	mov	r0, r3
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	3b23      	subs	r3, #35	@ 0x23
 8004e54:	fa00 f203 	lsl.w	r2, r0, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e60:	e023      	b.n	8004eaa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4413      	add	r3, r2
 8004e72:	3b41      	subs	r3, #65	@ 0x41
 8004e74:	221f      	movs	r2, #31
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	43da      	mvns	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	400a      	ands	r2, r1
 8004e82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	4618      	mov	r0, r3
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	4613      	mov	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	3b41      	subs	r3, #65	@ 0x41
 8004e9e:	fa00 f203 	lsl.w	r2, r0, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004eaa:	4b22      	ldr	r3, [pc, #136]	@ (8004f34 <HAL_ADC_ConfigChannel+0x234>)
 8004eac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a21      	ldr	r2, [pc, #132]	@ (8004f38 <HAL_ADC_ConfigChannel+0x238>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d109      	bne.n	8004ecc <HAL_ADC_ConfigChannel+0x1cc>
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b12      	cmp	r3, #18
 8004ebe:	d105      	bne.n	8004ecc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a19      	ldr	r2, [pc, #100]	@ (8004f38 <HAL_ADC_ConfigChannel+0x238>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d123      	bne.n	8004f1e <HAL_ADC_ConfigChannel+0x21e>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b10      	cmp	r3, #16
 8004edc:	d003      	beq.n	8004ee6 <HAL_ADC_ConfigChannel+0x1e6>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b11      	cmp	r3, #17
 8004ee4:	d11b      	bne.n	8004f1e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b10      	cmp	r3, #16
 8004ef8:	d111      	bne.n	8004f1e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004efa:	4b10      	ldr	r3, [pc, #64]	@ (8004f3c <HAL_ADC_ConfigChannel+0x23c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a10      	ldr	r2, [pc, #64]	@ (8004f40 <HAL_ADC_ConfigChannel+0x240>)
 8004f00:	fba2 2303 	umull	r2, r3, r2, r3
 8004f04:	0c9a      	lsrs	r2, r3, #18
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004f10:	e002      	b.n	8004f18 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f9      	bne.n	8004f12 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	40012300 	.word	0x40012300
 8004f38:	40012000 	.word	0x40012000
 8004f3c:	2000001c 	.word	0x2000001c
 8004f40:	431bde83 	.word	0x431bde83

08004f44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f4c:	4b79      	ldr	r3, [pc, #484]	@ (8005134 <ADC_Init+0x1f0>)
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	431a      	orrs	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6859      	ldr	r1, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	021a      	lsls	r2, r3, #8
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004f9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6859      	ldr	r1, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689a      	ldr	r2, [r3, #8]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6899      	ldr	r1, [r3, #8]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd6:	4a58      	ldr	r2, [pc, #352]	@ (8005138 <ADC_Init+0x1f4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d022      	beq.n	8005022 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004fea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6899      	ldr	r1, [r3, #8]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800500c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6899      	ldr	r1, [r3, #8]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	609a      	str	r2, [r3, #8]
 8005020:	e00f      	b.n	8005042 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005030:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005040:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f022 0202 	bic.w	r2, r2, #2
 8005050:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6899      	ldr	r1, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	7e1b      	ldrb	r3, [r3, #24]
 800505c:	005a      	lsls	r2, r3, #1
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d01b      	beq.n	80050a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800507e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800508e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6859      	ldr	r1, [r3, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509a:	3b01      	subs	r3, #1
 800509c:	035a      	lsls	r2, r3, #13
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	605a      	str	r2, [r3, #4]
 80050a6:	e007      	b.n	80050b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80050c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	3b01      	subs	r3, #1
 80050d4:	051a      	lsls	r2, r3, #20
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80050ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	6899      	ldr	r1, [r3, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80050fa:	025a      	lsls	r2, r3, #9
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005112:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6899      	ldr	r1, [r3, #8]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	029a      	lsls	r2, r3, #10
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	609a      	str	r2, [r3, #8]
}
 8005128:	bf00      	nop
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	40012300 	.word	0x40012300
 8005138:	0f000001 	.word	0x0f000001

0800513c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800514c:	4b0c      	ldr	r3, [pc, #48]	@ (8005180 <__NVIC_SetPriorityGrouping+0x44>)
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005158:	4013      	ands	r3, r2
 800515a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005164:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005168:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800516c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800516e:	4a04      	ldr	r2, [pc, #16]	@ (8005180 <__NVIC_SetPriorityGrouping+0x44>)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	60d3      	str	r3, [r2, #12]
}
 8005174:	bf00      	nop
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	e000ed00 	.word	0xe000ed00

08005184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005188:	4b04      	ldr	r3, [pc, #16]	@ (800519c <__NVIC_GetPriorityGrouping+0x18>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	0a1b      	lsrs	r3, r3, #8
 800518e:	f003 0307 	and.w	r3, r3, #7
}
 8005192:	4618      	mov	r0, r3
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	e000ed00 	.word	0xe000ed00

080051a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	4603      	mov	r3, r0
 80051a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	db0b      	blt.n	80051ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	f003 021f 	and.w	r2, r3, #31
 80051b8:	4907      	ldr	r1, [pc, #28]	@ (80051d8 <__NVIC_EnableIRQ+0x38>)
 80051ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	2001      	movs	r0, #1
 80051c2:	fa00 f202 	lsl.w	r2, r0, r2
 80051c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	e000e100 	.word	0xe000e100

080051dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	4603      	mov	r3, r0
 80051e4:	6039      	str	r1, [r7, #0]
 80051e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	db0a      	blt.n	8005206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	490c      	ldr	r1, [pc, #48]	@ (8005228 <__NVIC_SetPriority+0x4c>)
 80051f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051fa:	0112      	lsls	r2, r2, #4
 80051fc:	b2d2      	uxtb	r2, r2
 80051fe:	440b      	add	r3, r1
 8005200:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005204:	e00a      	b.n	800521c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	b2da      	uxtb	r2, r3
 800520a:	4908      	ldr	r1, [pc, #32]	@ (800522c <__NVIC_SetPriority+0x50>)
 800520c:	79fb      	ldrb	r3, [r7, #7]
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	3b04      	subs	r3, #4
 8005214:	0112      	lsls	r2, r2, #4
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	440b      	add	r3, r1
 800521a:	761a      	strb	r2, [r3, #24]
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	e000e100 	.word	0xe000e100
 800522c:	e000ed00 	.word	0xe000ed00

08005230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005230:	b480      	push	{r7}
 8005232:	b089      	sub	sp, #36	@ 0x24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f1c3 0307 	rsb	r3, r3, #7
 800524a:	2b04      	cmp	r3, #4
 800524c:	bf28      	it	cs
 800524e:	2304      	movcs	r3, #4
 8005250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	3304      	adds	r3, #4
 8005256:	2b06      	cmp	r3, #6
 8005258:	d902      	bls.n	8005260 <NVIC_EncodePriority+0x30>
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	3b03      	subs	r3, #3
 800525e:	e000      	b.n	8005262 <NVIC_EncodePriority+0x32>
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005264:	f04f 32ff 	mov.w	r2, #4294967295
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	fa02 f303 	lsl.w	r3, r2, r3
 800526e:	43da      	mvns	r2, r3
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	401a      	ands	r2, r3
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005278:	f04f 31ff 	mov.w	r1, #4294967295
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	fa01 f303 	lsl.w	r3, r1, r3
 8005282:	43d9      	mvns	r1, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005288:	4313      	orrs	r3, r2
         );
}
 800528a:	4618      	mov	r0, r3
 800528c:	3724      	adds	r7, #36	@ 0x24
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
	...

08005298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052a8:	d301      	bcc.n	80052ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80052aa:	2301      	movs	r3, #1
 80052ac:	e00f      	b.n	80052ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80052ae:	4a0a      	ldr	r2, [pc, #40]	@ (80052d8 <SysTick_Config+0x40>)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052b6:	210f      	movs	r1, #15
 80052b8:	f04f 30ff 	mov.w	r0, #4294967295
 80052bc:	f7ff ff8e 	bl	80051dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052c0:	4b05      	ldr	r3, [pc, #20]	@ (80052d8 <SysTick_Config+0x40>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052c6:	4b04      	ldr	r3, [pc, #16]	@ (80052d8 <SysTick_Config+0x40>)
 80052c8:	2207      	movs	r2, #7
 80052ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	e000e010 	.word	0xe000e010

080052dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7ff ff29 	bl	800513c <__NVIC_SetPriorityGrouping>
}
 80052ea:	bf00      	nop
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b086      	sub	sp, #24
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	4603      	mov	r3, r0
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	607a      	str	r2, [r7, #4]
 80052fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005300:	2300      	movs	r3, #0
 8005302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005304:	f7ff ff3e 	bl	8005184 <__NVIC_GetPriorityGrouping>
 8005308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	68b9      	ldr	r1, [r7, #8]
 800530e:	6978      	ldr	r0, [r7, #20]
 8005310:	f7ff ff8e 	bl	8005230 <NVIC_EncodePriority>
 8005314:	4602      	mov	r2, r0
 8005316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800531a:	4611      	mov	r1, r2
 800531c:	4618      	mov	r0, r3
 800531e:	f7ff ff5d 	bl	80051dc <__NVIC_SetPriority>
}
 8005322:	bf00      	nop
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b082      	sub	sp, #8
 800532e:	af00      	add	r7, sp, #0
 8005330:	4603      	mov	r3, r0
 8005332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff ff31 	bl	80051a0 <__NVIC_EnableIRQ>
}
 800533e:	bf00      	nop
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b082      	sub	sp, #8
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7ff ffa2 	bl	8005298 <SysTick_Config>
 8005354:	4603      	mov	r3, r0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b084      	sub	sp, #16
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800536a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800536c:	f7ff fab6 	bl	80048dc <HAL_GetTick>
 8005370:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d008      	beq.n	8005390 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2280      	movs	r2, #128	@ 0x80
 8005382:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e052      	b.n	8005436 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0216 	bic.w	r2, r2, #22
 800539e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695a      	ldr	r2, [r3, #20]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d103      	bne.n	80053c0 <HAL_DMA_Abort+0x62>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d007      	beq.n	80053d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0208 	bic.w	r2, r2, #8
 80053ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0201 	bic.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053e0:	e013      	b.n	800540a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053e2:	f7ff fa7b 	bl	80048dc <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b05      	cmp	r3, #5
 80053ee:	d90c      	bls.n	800540a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2220      	movs	r2, #32
 80053f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2203      	movs	r2, #3
 80053fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e015      	b.n	8005436 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1e4      	bne.n	80053e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800541c:	223f      	movs	r2, #63	@ 0x3f
 800541e:	409a      	lsls	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d004      	beq.n	800545c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2280      	movs	r2, #128	@ 0x80
 8005456:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e00c      	b.n	8005476 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2205      	movs	r2, #5
 8005460:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0201 	bic.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
	...

08005484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005484:	b480      	push	{r7}
 8005486:	b089      	sub	sp, #36	@ 0x24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800548e:	2300      	movs	r3, #0
 8005490:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005492:	2300      	movs	r3, #0
 8005494:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005496:	2300      	movs	r3, #0
 8005498:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800549a:	2300      	movs	r3, #0
 800549c:	61fb      	str	r3, [r7, #28]
 800549e:	e16b      	b.n	8005778 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80054a0:	2201      	movs	r2, #1
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	fa02 f303 	lsl.w	r3, r2, r3
 80054a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	4013      	ands	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	f040 815a 	bne.w	8005772 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d005      	beq.n	80054d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d130      	bne.n	8005538 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	2203      	movs	r2, #3
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	43db      	mvns	r3, r3
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	4013      	ands	r3, r2
 80054ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800550c:	2201      	movs	r2, #1
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	fa02 f303 	lsl.w	r3, r2, r3
 8005514:	43db      	mvns	r3, r3
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	4013      	ands	r3, r2
 800551a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	091b      	lsrs	r3, r3, #4
 8005522:	f003 0201 	and.w	r2, r3, #1
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	fa02 f303 	lsl.w	r3, r2, r3
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	4313      	orrs	r3, r2
 8005530:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f003 0303 	and.w	r3, r3, #3
 8005540:	2b03      	cmp	r3, #3
 8005542:	d017      	beq.n	8005574 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	2203      	movs	r2, #3
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	43db      	mvns	r3, r3
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	4013      	ands	r3, r2
 800555a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	fa02 f303 	lsl.w	r3, r2, r3
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	4313      	orrs	r3, r2
 800556c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f003 0303 	and.w	r3, r3, #3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d123      	bne.n	80055c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	08da      	lsrs	r2, r3, #3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3208      	adds	r2, #8
 8005588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800558c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	220f      	movs	r2, #15
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	43db      	mvns	r3, r3
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	4013      	ands	r3, r2
 80055a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	08da      	lsrs	r2, r3, #3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3208      	adds	r2, #8
 80055c2:	69b9      	ldr	r1, [r7, #24]
 80055c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	2203      	movs	r2, #3
 80055d4:	fa02 f303 	lsl.w	r3, r2, r3
 80055d8:	43db      	mvns	r3, r3
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	4013      	ands	r3, r2
 80055de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f003 0203 	and.w	r2, r3, #3
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	fa02 f303 	lsl.w	r3, r2, r3
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 80b4 	beq.w	8005772 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800560a:	2300      	movs	r3, #0
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	4b60      	ldr	r3, [pc, #384]	@ (8005790 <HAL_GPIO_Init+0x30c>)
 8005610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005612:	4a5f      	ldr	r2, [pc, #380]	@ (8005790 <HAL_GPIO_Init+0x30c>)
 8005614:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005618:	6453      	str	r3, [r2, #68]	@ 0x44
 800561a:	4b5d      	ldr	r3, [pc, #372]	@ (8005790 <HAL_GPIO_Init+0x30c>)
 800561c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005626:	4a5b      	ldr	r2, [pc, #364]	@ (8005794 <HAL_GPIO_Init+0x310>)
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	089b      	lsrs	r3, r3, #2
 800562c:	3302      	adds	r3, #2
 800562e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	220f      	movs	r2, #15
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	43db      	mvns	r3, r3
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	4013      	ands	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a52      	ldr	r2, [pc, #328]	@ (8005798 <HAL_GPIO_Init+0x314>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d02b      	beq.n	80056aa <HAL_GPIO_Init+0x226>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a51      	ldr	r2, [pc, #324]	@ (800579c <HAL_GPIO_Init+0x318>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d025      	beq.n	80056a6 <HAL_GPIO_Init+0x222>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a50      	ldr	r2, [pc, #320]	@ (80057a0 <HAL_GPIO_Init+0x31c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d01f      	beq.n	80056a2 <HAL_GPIO_Init+0x21e>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a4f      	ldr	r2, [pc, #316]	@ (80057a4 <HAL_GPIO_Init+0x320>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d019      	beq.n	800569e <HAL_GPIO_Init+0x21a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a4e      	ldr	r2, [pc, #312]	@ (80057a8 <HAL_GPIO_Init+0x324>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d013      	beq.n	800569a <HAL_GPIO_Init+0x216>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a4d      	ldr	r2, [pc, #308]	@ (80057ac <HAL_GPIO_Init+0x328>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00d      	beq.n	8005696 <HAL_GPIO_Init+0x212>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a4c      	ldr	r2, [pc, #304]	@ (80057b0 <HAL_GPIO_Init+0x32c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d007      	beq.n	8005692 <HAL_GPIO_Init+0x20e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a4b      	ldr	r2, [pc, #300]	@ (80057b4 <HAL_GPIO_Init+0x330>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d101      	bne.n	800568e <HAL_GPIO_Init+0x20a>
 800568a:	2307      	movs	r3, #7
 800568c:	e00e      	b.n	80056ac <HAL_GPIO_Init+0x228>
 800568e:	2308      	movs	r3, #8
 8005690:	e00c      	b.n	80056ac <HAL_GPIO_Init+0x228>
 8005692:	2306      	movs	r3, #6
 8005694:	e00a      	b.n	80056ac <HAL_GPIO_Init+0x228>
 8005696:	2305      	movs	r3, #5
 8005698:	e008      	b.n	80056ac <HAL_GPIO_Init+0x228>
 800569a:	2304      	movs	r3, #4
 800569c:	e006      	b.n	80056ac <HAL_GPIO_Init+0x228>
 800569e:	2303      	movs	r3, #3
 80056a0:	e004      	b.n	80056ac <HAL_GPIO_Init+0x228>
 80056a2:	2302      	movs	r3, #2
 80056a4:	e002      	b.n	80056ac <HAL_GPIO_Init+0x228>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <HAL_GPIO_Init+0x228>
 80056aa:	2300      	movs	r3, #0
 80056ac:	69fa      	ldr	r2, [r7, #28]
 80056ae:	f002 0203 	and.w	r2, r2, #3
 80056b2:	0092      	lsls	r2, r2, #2
 80056b4:	4093      	lsls	r3, r2
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056bc:	4935      	ldr	r1, [pc, #212]	@ (8005794 <HAL_GPIO_Init+0x310>)
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	089b      	lsrs	r3, r3, #2
 80056c2:	3302      	adds	r3, #2
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056ca:	4b3b      	ldr	r3, [pc, #236]	@ (80057b8 <HAL_GPIO_Init+0x334>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	43db      	mvns	r3, r3
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	4013      	ands	r3, r2
 80056d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056ee:	4a32      	ldr	r2, [pc, #200]	@ (80057b8 <HAL_GPIO_Init+0x334>)
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056f4:	4b30      	ldr	r3, [pc, #192]	@ (80057b8 <HAL_GPIO_Init+0x334>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	43db      	mvns	r3, r3
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	4013      	ands	r3, r2
 8005702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	4313      	orrs	r3, r2
 8005716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005718:	4a27      	ldr	r2, [pc, #156]	@ (80057b8 <HAL_GPIO_Init+0x334>)
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800571e:	4b26      	ldr	r3, [pc, #152]	@ (80057b8 <HAL_GPIO_Init+0x334>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	43db      	mvns	r3, r3
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	4013      	ands	r3, r2
 800572c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	4313      	orrs	r3, r2
 8005740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005742:	4a1d      	ldr	r2, [pc, #116]	@ (80057b8 <HAL_GPIO_Init+0x334>)
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005748:	4b1b      	ldr	r3, [pc, #108]	@ (80057b8 <HAL_GPIO_Init+0x334>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	43db      	mvns	r3, r3
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4013      	ands	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800576c:	4a12      	ldr	r2, [pc, #72]	@ (80057b8 <HAL_GPIO_Init+0x334>)
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	3301      	adds	r3, #1
 8005776:	61fb      	str	r3, [r7, #28]
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	2b0f      	cmp	r3, #15
 800577c:	f67f ae90 	bls.w	80054a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005780:	bf00      	nop
 8005782:	bf00      	nop
 8005784:	3724      	adds	r7, #36	@ 0x24
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	40023800 	.word	0x40023800
 8005794:	40013800 	.word	0x40013800
 8005798:	40020000 	.word	0x40020000
 800579c:	40020400 	.word	0x40020400
 80057a0:	40020800 	.word	0x40020800
 80057a4:	40020c00 	.word	0x40020c00
 80057a8:	40021000 	.word	0x40021000
 80057ac:	40021400 	.word	0x40021400
 80057b0:	40021800 	.word	0x40021800
 80057b4:	40021c00 	.word	0x40021c00
 80057b8:	40013c00 	.word	0x40013c00

080057bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691a      	ldr	r2, [r3, #16]
 80057cc:	887b      	ldrh	r3, [r7, #2]
 80057ce:	4013      	ands	r3, r2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d002      	beq.n	80057da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057d4:	2301      	movs	r3, #1
 80057d6:	73fb      	strb	r3, [r7, #15]
 80057d8:	e001      	b.n	80057de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057da:	2300      	movs	r3, #0
 80057dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057de:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	807b      	strh	r3, [r7, #2]
 80057f8:	4613      	mov	r3, r2
 80057fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057fc:	787b      	ldrb	r3, [r7, #1]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005802:	887a      	ldrh	r2, [r7, #2]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005808:	e003      	b.n	8005812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800580a:	887b      	ldrh	r3, [r7, #2]
 800580c:	041a      	lsls	r2, r3, #16
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	619a      	str	r2, [r3, #24]
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800581e:	b480      	push	{r7}
 8005820:	b085      	sub	sp, #20
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	460b      	mov	r3, r1
 8005828:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005830:	887a      	ldrh	r2, [r7, #2]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4013      	ands	r3, r2
 8005836:	041a      	lsls	r2, r3, #16
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	43d9      	mvns	r1, r3
 800583c:	887b      	ldrh	r3, [r7, #2]
 800583e:	400b      	ands	r3, r1
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	619a      	str	r2, [r3, #24]
}
 8005846:	bf00      	nop
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
	...

08005854 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800585e:	4b08      	ldr	r3, [pc, #32]	@ (8005880 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005860:	695a      	ldr	r2, [r3, #20]
 8005862:	88fb      	ldrh	r3, [r7, #6]
 8005864:	4013      	ands	r3, r2
 8005866:	2b00      	cmp	r3, #0
 8005868:	d006      	beq.n	8005878 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800586a:	4a05      	ldr	r2, [pc, #20]	@ (8005880 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800586c:	88fb      	ldrh	r3, [r7, #6]
 800586e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005870:	88fb      	ldrh	r3, [r7, #6]
 8005872:	4618      	mov	r0, r3
 8005874:	f7fe f83c 	bl	80038f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005878:	bf00      	nop
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	40013c00 	.word	0x40013c00

08005884 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e12b      	b.n	8005aee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d106      	bne.n	80058b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7fe fc4c 	bl	8004148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2224      	movs	r2, #36	@ 0x24
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0201 	bic.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058e8:	f001 fc48 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 80058ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	4a81      	ldr	r2, [pc, #516]	@ (8005af8 <HAL_I2C_Init+0x274>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d807      	bhi.n	8005908 <HAL_I2C_Init+0x84>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4a80      	ldr	r2, [pc, #512]	@ (8005afc <HAL_I2C_Init+0x278>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	bf94      	ite	ls
 8005900:	2301      	movls	r3, #1
 8005902:	2300      	movhi	r3, #0
 8005904:	b2db      	uxtb	r3, r3
 8005906:	e006      	b.n	8005916 <HAL_I2C_Init+0x92>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4a7d      	ldr	r2, [pc, #500]	@ (8005b00 <HAL_I2C_Init+0x27c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	bf94      	ite	ls
 8005910:	2301      	movls	r3, #1
 8005912:	2300      	movhi	r3, #0
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e0e7      	b.n	8005aee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4a78      	ldr	r2, [pc, #480]	@ (8005b04 <HAL_I2C_Init+0x280>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	0c9b      	lsrs	r3, r3, #18
 8005928:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	430a      	orrs	r2, r1
 800593c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	4a6a      	ldr	r2, [pc, #424]	@ (8005af8 <HAL_I2C_Init+0x274>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d802      	bhi.n	8005958 <HAL_I2C_Init+0xd4>
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	3301      	adds	r3, #1
 8005956:	e009      	b.n	800596c <HAL_I2C_Init+0xe8>
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800595e:	fb02 f303 	mul.w	r3, r2, r3
 8005962:	4a69      	ldr	r2, [pc, #420]	@ (8005b08 <HAL_I2C_Init+0x284>)
 8005964:	fba2 2303 	umull	r2, r3, r2, r3
 8005968:	099b      	lsrs	r3, r3, #6
 800596a:	3301      	adds	r3, #1
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6812      	ldr	r2, [r2, #0]
 8005970:	430b      	orrs	r3, r1
 8005972:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800597e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	495c      	ldr	r1, [pc, #368]	@ (8005af8 <HAL_I2C_Init+0x274>)
 8005988:	428b      	cmp	r3, r1
 800598a:	d819      	bhi.n	80059c0 <HAL_I2C_Init+0x13c>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	1e59      	subs	r1, r3, #1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	fbb1 f3f3 	udiv	r3, r1, r3
 800599a:	1c59      	adds	r1, r3, #1
 800599c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80059a0:	400b      	ands	r3, r1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <HAL_I2C_Init+0x138>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	1e59      	subs	r1, r3, #1
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80059b4:	3301      	adds	r3, #1
 80059b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ba:	e051      	b.n	8005a60 <HAL_I2C_Init+0x1dc>
 80059bc:	2304      	movs	r3, #4
 80059be:	e04f      	b.n	8005a60 <HAL_I2C_Init+0x1dc>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d111      	bne.n	80059ec <HAL_I2C_Init+0x168>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	1e58      	subs	r0, r3, #1
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6859      	ldr	r1, [r3, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	440b      	add	r3, r1
 80059d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80059da:	3301      	adds	r3, #1
 80059dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	bf0c      	ite	eq
 80059e4:	2301      	moveq	r3, #1
 80059e6:	2300      	movne	r3, #0
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	e012      	b.n	8005a12 <HAL_I2C_Init+0x18e>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	1e58      	subs	r0, r3, #1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6859      	ldr	r1, [r3, #4]
 80059f4:	460b      	mov	r3, r1
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	0099      	lsls	r1, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a02:	3301      	adds	r3, #1
 8005a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	bf0c      	ite	eq
 8005a0c:	2301      	moveq	r3, #1
 8005a0e:	2300      	movne	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <HAL_I2C_Init+0x196>
 8005a16:	2301      	movs	r3, #1
 8005a18:	e022      	b.n	8005a60 <HAL_I2C_Init+0x1dc>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10e      	bne.n	8005a40 <HAL_I2C_Init+0x1bc>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	1e58      	subs	r0, r3, #1
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6859      	ldr	r1, [r3, #4]
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	440b      	add	r3, r1
 8005a30:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a34:	3301      	adds	r3, #1
 8005a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a3e:	e00f      	b.n	8005a60 <HAL_I2C_Init+0x1dc>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	1e58      	subs	r0, r3, #1
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6859      	ldr	r1, [r3, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	440b      	add	r3, r1
 8005a4e:	0099      	lsls	r1, r3, #2
 8005a50:	440b      	add	r3, r1
 8005a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a56:	3301      	adds	r3, #1
 8005a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	6809      	ldr	r1, [r1, #0]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	69da      	ldr	r2, [r3, #28]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005a8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6911      	ldr	r1, [r2, #16]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	68d2      	ldr	r2, [r2, #12]
 8005a9a:	4311      	orrs	r1, r2
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6812      	ldr	r2, [r2, #0]
 8005aa0:	430b      	orrs	r3, r1
 8005aa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	695a      	ldr	r2, [r3, #20]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0201 	orr.w	r2, r2, #1
 8005ace:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	000186a0 	.word	0x000186a0
 8005afc:	001e847f 	.word	0x001e847f
 8005b00:	003d08ff 	.word	0x003d08ff
 8005b04:	431bde83 	.word	0x431bde83
 8005b08:	10624dd3 	.word	0x10624dd3

08005b0c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b088      	sub	sp, #32
 8005b10:	af02      	add	r7, sp, #8
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	4608      	mov	r0, r1
 8005b16:	4611      	mov	r1, r2
 8005b18:	461a      	mov	r2, r3
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	817b      	strh	r3, [r7, #10]
 8005b1e:	460b      	mov	r3, r1
 8005b20:	813b      	strh	r3, [r7, #8]
 8005b22:	4613      	mov	r3, r2
 8005b24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b26:	f7fe fed9 	bl	80048dc <HAL_GetTick>
 8005b2a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b20      	cmp	r3, #32
 8005b36:	f040 80d9 	bne.w	8005cec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	2319      	movs	r3, #25
 8005b40:	2201      	movs	r2, #1
 8005b42:	496d      	ldr	r1, [pc, #436]	@ (8005cf8 <HAL_I2C_Mem_Write+0x1ec>)
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 fc8b 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d001      	beq.n	8005b54 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005b50:	2302      	movs	r3, #2
 8005b52:	e0cc      	b.n	8005cee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d101      	bne.n	8005b62 <HAL_I2C_Mem_Write+0x56>
 8005b5e:	2302      	movs	r3, #2
 8005b60:	e0c5      	b.n	8005cee <HAL_I2C_Mem_Write+0x1e2>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d007      	beq.n	8005b88 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0201 	orr.w	r2, r2, #1
 8005b86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2221      	movs	r2, #33	@ 0x21
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2240      	movs	r2, #64	@ 0x40
 8005ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a3a      	ldr	r2, [r7, #32]
 8005bb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005bb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4a4d      	ldr	r2, [pc, #308]	@ (8005cfc <HAL_I2C_Mem_Write+0x1f0>)
 8005bc8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bca:	88f8      	ldrh	r0, [r7, #6]
 8005bcc:	893a      	ldrh	r2, [r7, #8]
 8005bce:	8979      	ldrh	r1, [r7, #10]
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	9301      	str	r3, [sp, #4]
 8005bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	4603      	mov	r3, r0
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 fac2 	bl	8006164 <I2C_RequestMemoryWrite>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d052      	beq.n	8005c8c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e081      	b.n	8005cee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f000 fd50 	bl	8006694 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00d      	beq.n	8005c16 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfe:	2b04      	cmp	r3, #4
 8005c00:	d107      	bne.n	8005c12 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e06b      	b.n	8005cee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1a:	781a      	ldrb	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c30:	3b01      	subs	r3, #1
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b04      	cmp	r3, #4
 8005c52:	d11b      	bne.n	8005c8c <HAL_I2C_Mem_Write+0x180>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d017      	beq.n	8005c8c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c60:	781a      	ldrb	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6c:	1c5a      	adds	r2, r3, #1
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c76:	3b01      	subs	r3, #1
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	3b01      	subs	r3, #1
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1aa      	bne.n	8005bea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 fd43 	bl	8006724 <I2C_WaitOnBTFFlagUntilTimeout>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00d      	beq.n	8005cc0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca8:	2b04      	cmp	r3, #4
 8005caa:	d107      	bne.n	8005cbc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e016      	b.n	8005cee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	e000      	b.n	8005cee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005cec:	2302      	movs	r3, #2
  }
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3718      	adds	r7, #24
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	00100002 	.word	0x00100002
 8005cfc:	ffff0000 	.word	0xffff0000

08005d00 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08c      	sub	sp, #48	@ 0x30
 8005d04:	af02      	add	r7, sp, #8
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	4608      	mov	r0, r1
 8005d0a:	4611      	mov	r1, r2
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	4603      	mov	r3, r0
 8005d10:	817b      	strh	r3, [r7, #10]
 8005d12:	460b      	mov	r3, r1
 8005d14:	813b      	strh	r3, [r7, #8]
 8005d16:	4613      	mov	r3, r2
 8005d18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d1a:	f7fe fddf 	bl	80048dc <HAL_GetTick>
 8005d1e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	f040 8214 	bne.w	8006156 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	2319      	movs	r3, #25
 8005d34:	2201      	movs	r2, #1
 8005d36:	497b      	ldr	r1, [pc, #492]	@ (8005f24 <HAL_I2C_Mem_Read+0x224>)
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 fb91 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005d44:	2302      	movs	r3, #2
 8005d46:	e207      	b.n	8006158 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d101      	bne.n	8005d56 <HAL_I2C_Mem_Read+0x56>
 8005d52:	2302      	movs	r3, #2
 8005d54:	e200      	b.n	8006158 <HAL_I2C_Mem_Read+0x458>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2201      	movs	r2, #1
 8005d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d007      	beq.n	8005d7c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f042 0201 	orr.w	r2, r2, #1
 8005d7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2222      	movs	r2, #34	@ 0x22
 8005d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2240      	movs	r2, #64	@ 0x40
 8005d98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005da6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4a5b      	ldr	r2, [pc, #364]	@ (8005f28 <HAL_I2C_Mem_Read+0x228>)
 8005dbc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005dbe:	88f8      	ldrh	r0, [r7, #6]
 8005dc0:	893a      	ldrh	r2, [r7, #8]
 8005dc2:	8979      	ldrh	r1, [r7, #10]
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	9301      	str	r3, [sp, #4]
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dca:	9300      	str	r3, [sp, #0]
 8005dcc:	4603      	mov	r3, r0
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 fa5e 	bl	8006290 <I2C_RequestMemoryRead>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e1bc      	b.n	8006158 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d113      	bne.n	8005e0e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005de6:	2300      	movs	r3, #0
 8005de8:	623b      	str	r3, [r7, #32]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	623b      	str	r3, [r7, #32]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	699b      	ldr	r3, [r3, #24]
 8005df8:	623b      	str	r3, [r7, #32]
 8005dfa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	e190      	b.n	8006130 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d11b      	bne.n	8005e4e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e26:	2300      	movs	r3, #0
 8005e28:	61fb      	str	r3, [r7, #28]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	61fb      	str	r3, [r7, #28]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	61fb      	str	r3, [r7, #28]
 8005e3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	e170      	b.n	8006130 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d11b      	bne.n	8005e8e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e76:	2300      	movs	r3, #0
 8005e78:	61bb      	str	r3, [r7, #24]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	61bb      	str	r3, [r7, #24]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	61bb      	str	r3, [r7, #24]
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	e150      	b.n	8006130 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e8e:	2300      	movs	r3, #0
 8005e90:	617b      	str	r3, [r7, #20]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	617b      	str	r3, [r7, #20]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	617b      	str	r3, [r7, #20]
 8005ea2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ea4:	e144      	b.n	8006130 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	f200 80f1 	bhi.w	8006092 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d123      	bne.n	8005f00 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 fc79 	bl	80067b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e145      	b.n	8006158 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691a      	ldr	r2, [r3, #16]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005efe:	e117      	b.n	8006130 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d14e      	bne.n	8005fa6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0e:	2200      	movs	r2, #0
 8005f10:	4906      	ldr	r1, [pc, #24]	@ (8005f2c <HAL_I2C_Mem_Read+0x22c>)
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 faa4 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d008      	beq.n	8005f30 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e11a      	b.n	8006158 <HAL_I2C_Mem_Read+0x458>
 8005f22:	bf00      	nop
 8005f24:	00100002 	.word	0x00100002
 8005f28:	ffff0000 	.word	0xffff0000
 8005f2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691a      	ldr	r2, [r3, #16]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	691a      	ldr	r2, [r3, #16]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f84:	1c5a      	adds	r2, r3, #1
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005fa4:	e0c4      	b.n	8006130 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fac:	2200      	movs	r2, #0
 8005fae:	496c      	ldr	r1, [pc, #432]	@ (8006160 <HAL_I2C_Mem_Read+0x460>)
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 fa55 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e0cb      	b.n	8006158 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	691a      	ldr	r2, [r3, #16]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fda:	b2d2      	uxtb	r2, r2
 8005fdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006008:	2200      	movs	r2, #0
 800600a:	4955      	ldr	r1, [pc, #340]	@ (8006160 <HAL_I2C_Mem_Read+0x460>)
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 fa27 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e09d      	b.n	8006158 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800602a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	691a      	ldr	r2, [r3, #16]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006036:	b2d2      	uxtb	r2, r2
 8006038:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006048:	3b01      	subs	r3, #1
 800604a:	b29a      	uxth	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006054:	b29b      	uxth	r3, r3
 8006056:	3b01      	subs	r3, #1
 8006058:	b29a      	uxth	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	691a      	ldr	r2, [r3, #16]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006068:	b2d2      	uxtb	r2, r2
 800606a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800607a:	3b01      	subs	r3, #1
 800607c:	b29a      	uxth	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006086:	b29b      	uxth	r3, r3
 8006088:	3b01      	subs	r3, #1
 800608a:	b29a      	uxth	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006090:	e04e      	b.n	8006130 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006094:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f000 fb8c 	bl	80067b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e058      	b.n	8006158 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	691a      	ldr	r2, [r3, #16]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b0:	b2d2      	uxtb	r2, r2
 80060b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060c2:	3b01      	subs	r3, #1
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	3b01      	subs	r3, #1
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	f003 0304 	and.w	r3, r3, #4
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d124      	bne.n	8006130 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d107      	bne.n	80060fe <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060fc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006110:	1c5a      	adds	r2, r3, #1
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800611a:	3b01      	subs	r3, #1
 800611c:	b29a      	uxth	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006126:	b29b      	uxth	r3, r3
 8006128:	3b01      	subs	r3, #1
 800612a:	b29a      	uxth	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006134:	2b00      	cmp	r3, #0
 8006136:	f47f aeb6 	bne.w	8005ea6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	e000      	b.n	8006158 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8006156:	2302      	movs	r3, #2
  }
}
 8006158:	4618      	mov	r0, r3
 800615a:	3728      	adds	r7, #40	@ 0x28
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	00010004 	.word	0x00010004

08006164 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af02      	add	r7, sp, #8
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	4608      	mov	r0, r1
 800616e:	4611      	mov	r1, r2
 8006170:	461a      	mov	r2, r3
 8006172:	4603      	mov	r3, r0
 8006174:	817b      	strh	r3, [r7, #10]
 8006176:	460b      	mov	r3, r1
 8006178:	813b      	strh	r3, [r7, #8]
 800617a:	4613      	mov	r3, r2
 800617c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800618c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800618e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	2200      	movs	r2, #0
 8006196:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 f960 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00d      	beq.n	80061c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061b4:	d103      	bne.n	80061be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e05f      	b.n	8006282 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061c2:	897b      	ldrh	r3, [r7, #10]
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	461a      	mov	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80061d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d4:	6a3a      	ldr	r2, [r7, #32]
 80061d6:	492d      	ldr	r1, [pc, #180]	@ (800628c <I2C_RequestMemoryWrite+0x128>)
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 f9bb 	bl	8006554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e04c      	b.n	8006282 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061e8:	2300      	movs	r3, #0
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	617b      	str	r3, [r7, #20]
 80061fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006200:	6a39      	ldr	r1, [r7, #32]
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f000 fa46 	bl	8006694 <I2C_WaitOnTXEFlagUntilTimeout>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00d      	beq.n	800622a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006212:	2b04      	cmp	r3, #4
 8006214:	d107      	bne.n	8006226 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006224:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e02b      	b.n	8006282 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800622a:	88fb      	ldrh	r3, [r7, #6]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d105      	bne.n	800623c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006230:	893b      	ldrh	r3, [r7, #8]
 8006232:	b2da      	uxtb	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	611a      	str	r2, [r3, #16]
 800623a:	e021      	b.n	8006280 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800623c:	893b      	ldrh	r3, [r7, #8]
 800623e:	0a1b      	lsrs	r3, r3, #8
 8006240:	b29b      	uxth	r3, r3
 8006242:	b2da      	uxtb	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800624a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800624c:	6a39      	ldr	r1, [r7, #32]
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 fa20 	bl	8006694 <I2C_WaitOnTXEFlagUntilTimeout>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00d      	beq.n	8006276 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625e:	2b04      	cmp	r3, #4
 8006260:	d107      	bne.n	8006272 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006270:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e005      	b.n	8006282 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006276:	893b      	ldrh	r3, [r7, #8]
 8006278:	b2da      	uxtb	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	00010002 	.word	0x00010002

08006290 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b088      	sub	sp, #32
 8006294:	af02      	add	r7, sp, #8
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	4608      	mov	r0, r1
 800629a:	4611      	mov	r1, r2
 800629c:	461a      	mov	r2, r3
 800629e:	4603      	mov	r3, r0
 80062a0:	817b      	strh	r3, [r7, #10]
 80062a2:	460b      	mov	r3, r1
 80062a4:	813b      	strh	r3, [r7, #8]
 80062a6:	4613      	mov	r3, r2
 80062a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80062b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f000 f8c2 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00d      	beq.n	80062fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062f0:	d103      	bne.n	80062fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e0aa      	b.n	8006454 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062fe:	897b      	ldrh	r3, [r7, #10]
 8006300:	b2db      	uxtb	r3, r3
 8006302:	461a      	mov	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800630c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800630e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006310:	6a3a      	ldr	r2, [r7, #32]
 8006312:	4952      	ldr	r1, [pc, #328]	@ (800645c <I2C_RequestMemoryRead+0x1cc>)
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 f91d 	bl	8006554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e097      	b.n	8006454 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006324:	2300      	movs	r3, #0
 8006326:	617b      	str	r3, [r7, #20]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	617b      	str	r3, [r7, #20]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	617b      	str	r3, [r7, #20]
 8006338:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800633a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800633c:	6a39      	ldr	r1, [r7, #32]
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 f9a8 	bl	8006694 <I2C_WaitOnTXEFlagUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00d      	beq.n	8006366 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634e:	2b04      	cmp	r3, #4
 8006350:	d107      	bne.n	8006362 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006360:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e076      	b.n	8006454 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006366:	88fb      	ldrh	r3, [r7, #6]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d105      	bne.n	8006378 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800636c:	893b      	ldrh	r3, [r7, #8]
 800636e:	b2da      	uxtb	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	611a      	str	r2, [r3, #16]
 8006376:	e021      	b.n	80063bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006378:	893b      	ldrh	r3, [r7, #8]
 800637a:	0a1b      	lsrs	r3, r3, #8
 800637c:	b29b      	uxth	r3, r3
 800637e:	b2da      	uxtb	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006388:	6a39      	ldr	r1, [r7, #32]
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 f982 	bl	8006694 <I2C_WaitOnTXEFlagUntilTimeout>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00d      	beq.n	80063b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639a:	2b04      	cmp	r3, #4
 800639c:	d107      	bne.n	80063ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e050      	b.n	8006454 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063b2:	893b      	ldrh	r3, [r7, #8]
 80063b4:	b2da      	uxtb	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063be:	6a39      	ldr	r1, [r7, #32]
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 f967 	bl	8006694 <I2C_WaitOnTXEFlagUntilTimeout>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00d      	beq.n	80063e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d107      	bne.n	80063e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e035      	b.n	8006454 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fa:	9300      	str	r3, [sp, #0]
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	2200      	movs	r2, #0
 8006400:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 f82b 	bl	8006460 <I2C_WaitOnFlagUntilTimeout>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00d      	beq.n	800642c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800641a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800641e:	d103      	bne.n	8006428 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006426:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e013      	b.n	8006454 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800642c:	897b      	ldrh	r3, [r7, #10]
 800642e:	b2db      	uxtb	r3, r3
 8006430:	f043 0301 	orr.w	r3, r3, #1
 8006434:	b2da      	uxtb	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800643c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643e:	6a3a      	ldr	r2, [r7, #32]
 8006440:	4906      	ldr	r1, [pc, #24]	@ (800645c <I2C_RequestMemoryRead+0x1cc>)
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 f886 	bl	8006554 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d001      	beq.n	8006452 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e000      	b.n	8006454 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	00010002 	.word	0x00010002

08006460 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	4613      	mov	r3, r2
 800646e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006470:	e048      	b.n	8006504 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006478:	d044      	beq.n	8006504 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800647a:	f7fe fa2f 	bl	80048dc <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d302      	bcc.n	8006490 <I2C_WaitOnFlagUntilTimeout+0x30>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d139      	bne.n	8006504 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	0c1b      	lsrs	r3, r3, #16
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b01      	cmp	r3, #1
 8006498:	d10d      	bne.n	80064b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	43da      	mvns	r2, r3
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	4013      	ands	r3, r2
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	bf0c      	ite	eq
 80064ac:	2301      	moveq	r3, #1
 80064ae:	2300      	movne	r3, #0
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	461a      	mov	r2, r3
 80064b4:	e00c      	b.n	80064d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	43da      	mvns	r2, r3
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	4013      	ands	r3, r2
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	bf0c      	ite	eq
 80064c8:	2301      	moveq	r3, #1
 80064ca:	2300      	movne	r3, #0
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	461a      	mov	r2, r3
 80064d0:	79fb      	ldrb	r3, [r7, #7]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d116      	bne.n	8006504 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f0:	f043 0220 	orr.w	r2, r3, #32
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e023      	b.n	800654c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	0c1b      	lsrs	r3, r3, #16
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b01      	cmp	r3, #1
 800650c:	d10d      	bne.n	800652a <I2C_WaitOnFlagUntilTimeout+0xca>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	43da      	mvns	r2, r3
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	4013      	ands	r3, r2
 800651a:	b29b      	uxth	r3, r3
 800651c:	2b00      	cmp	r3, #0
 800651e:	bf0c      	ite	eq
 8006520:	2301      	moveq	r3, #1
 8006522:	2300      	movne	r3, #0
 8006524:	b2db      	uxtb	r3, r3
 8006526:	461a      	mov	r2, r3
 8006528:	e00c      	b.n	8006544 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	43da      	mvns	r2, r3
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	4013      	ands	r3, r2
 8006536:	b29b      	uxth	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	bf0c      	ite	eq
 800653c:	2301      	moveq	r3, #1
 800653e:	2300      	movne	r3, #0
 8006540:	b2db      	uxtb	r3, r3
 8006542:	461a      	mov	r2, r3
 8006544:	79fb      	ldrb	r3, [r7, #7]
 8006546:	429a      	cmp	r2, r3
 8006548:	d093      	beq.n	8006472 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006562:	e071      	b.n	8006648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800656e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006572:	d123      	bne.n	80065bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006582:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800658c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2220      	movs	r2, #32
 8006598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a8:	f043 0204 	orr.w	r2, r3, #4
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e067      	b.n	800668c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c2:	d041      	beq.n	8006648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065c4:	f7fe f98a 	bl	80048dc <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d302      	bcc.n	80065da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d136      	bne.n	8006648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	0c1b      	lsrs	r3, r3, #16
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d10c      	bne.n	80065fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	43da      	mvns	r2, r3
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	4013      	ands	r3, r2
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	bf14      	ite	ne
 80065f6:	2301      	movne	r3, #1
 80065f8:	2300      	moveq	r3, #0
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	e00b      	b.n	8006616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	43da      	mvns	r2, r3
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	4013      	ands	r3, r2
 800660a:	b29b      	uxth	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	bf14      	ite	ne
 8006610:	2301      	movne	r3, #1
 8006612:	2300      	moveq	r3, #0
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d016      	beq.n	8006648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2220      	movs	r2, #32
 8006624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006634:	f043 0220 	orr.w	r2, r3, #32
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e021      	b.n	800668c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	0c1b      	lsrs	r3, r3, #16
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b01      	cmp	r3, #1
 8006650:	d10c      	bne.n	800666c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	43da      	mvns	r2, r3
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	4013      	ands	r3, r2
 800665e:	b29b      	uxth	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	bf14      	ite	ne
 8006664:	2301      	movne	r3, #1
 8006666:	2300      	moveq	r3, #0
 8006668:	b2db      	uxtb	r3, r3
 800666a:	e00b      	b.n	8006684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	43da      	mvns	r2, r3
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	4013      	ands	r3, r2
 8006678:	b29b      	uxth	r3, r3
 800667a:	2b00      	cmp	r3, #0
 800667c:	bf14      	ite	ne
 800667e:	2301      	movne	r3, #1
 8006680:	2300      	moveq	r3, #0
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	f47f af6d 	bne.w	8006564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066a0:	e034      	b.n	800670c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f000 f8e3 	bl	800686e <I2C_IsAcknowledgeFailed>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e034      	b.n	800671c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b8:	d028      	beq.n	800670c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ba:	f7fe f90f 	bl	80048dc <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d302      	bcc.n	80066d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d11d      	bne.n	800670c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066da:	2b80      	cmp	r3, #128	@ 0x80
 80066dc:	d016      	beq.n	800670c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2220      	movs	r2, #32
 80066e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f8:	f043 0220 	orr.w	r2, r3, #32
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e007      	b.n	800671c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006716:	2b80      	cmp	r3, #128	@ 0x80
 8006718:	d1c3      	bne.n	80066a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006730:	e034      	b.n	800679c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 f89b 	bl	800686e <I2C_IsAcknowledgeFailed>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e034      	b.n	80067ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006748:	d028      	beq.n	800679c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800674a:	f7fe f8c7 	bl	80048dc <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	429a      	cmp	r2, r3
 8006758:	d302      	bcc.n	8006760 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d11d      	bne.n	800679c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	f003 0304 	and.w	r3, r3, #4
 800676a:	2b04      	cmp	r3, #4
 800676c:	d016      	beq.n	800679c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2220      	movs	r2, #32
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006788:	f043 0220 	orr.w	r2, r3, #32
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e007      	b.n	80067ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	f003 0304 	and.w	r3, r3, #4
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	d1c3      	bne.n	8006732 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067c0:	e049      	b.n	8006856 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	f003 0310 	and.w	r3, r3, #16
 80067cc:	2b10      	cmp	r3, #16
 80067ce:	d119      	bne.n	8006804 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f06f 0210 	mvn.w	r2, #16
 80067d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2220      	movs	r2, #32
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e030      	b.n	8006866 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006804:	f7fe f86a 	bl	80048dc <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	429a      	cmp	r2, r3
 8006812:	d302      	bcc.n	800681a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d11d      	bne.n	8006856 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	695b      	ldr	r3, [r3, #20]
 8006820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006824:	2b40      	cmp	r3, #64	@ 0x40
 8006826:	d016      	beq.n	8006856 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2220      	movs	r2, #32
 8006832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006842:	f043 0220 	orr.w	r2, r3, #32
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e007      	b.n	8006866 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	695b      	ldr	r3, [r3, #20]
 800685c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006860:	2b40      	cmp	r3, #64	@ 0x40
 8006862:	d1ae      	bne.n	80067c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006880:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006884:	d11b      	bne.n	80068be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800688e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2220      	movs	r2, #32
 800689a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068aa:	f043 0204 	orr.w	r2, r3, #4
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e000      	b.n	80068c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80068d2:	4b06      	ldr	r3, [pc, #24]	@ (80068ec <HAL_PWR_EnableBkUpAccess+0x20>)
 80068d4:	2201      	movs	r2, #1
 80068d6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80068d8:	4b05      	ldr	r3, [pc, #20]	@ (80068f0 <HAL_PWR_EnableBkUpAccess+0x24>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80068de:	687b      	ldr	r3, [r7, #4]
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	420e0020 	.word	0x420e0020
 80068f0:	40007000 	.word	0x40007000

080068f4 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80068fa:	4b06      	ldr	r3, [pc, #24]	@ (8006914 <HAL_PWR_DisableBkUpAccess+0x20>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006900:	4b05      	ldr	r3, [pc, #20]	@ (8006918 <HAL_PWR_DisableBkUpAccess+0x24>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006906:	687b      	ldr	r3, [r7, #4]
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	420e0020 	.word	0x420e0020
 8006918:	40007000 	.word	0x40007000

0800691c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e267      	b.n	8006dfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d075      	beq.n	8006a26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800693a:	4b88      	ldr	r3, [pc, #544]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	f003 030c 	and.w	r3, r3, #12
 8006942:	2b04      	cmp	r3, #4
 8006944:	d00c      	beq.n	8006960 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006946:	4b85      	ldr	r3, [pc, #532]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800694e:	2b08      	cmp	r3, #8
 8006950:	d112      	bne.n	8006978 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006952:	4b82      	ldr	r3, [pc, #520]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800695a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800695e:	d10b      	bne.n	8006978 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006960:	4b7e      	ldr	r3, [pc, #504]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006968:	2b00      	cmp	r3, #0
 800696a:	d05b      	beq.n	8006a24 <HAL_RCC_OscConfig+0x108>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d157      	bne.n	8006a24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e242      	b.n	8006dfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006980:	d106      	bne.n	8006990 <HAL_RCC_OscConfig+0x74>
 8006982:	4b76      	ldr	r3, [pc, #472]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a75      	ldr	r2, [pc, #468]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 8006988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800698c:	6013      	str	r3, [r2, #0]
 800698e:	e01d      	b.n	80069cc <HAL_RCC_OscConfig+0xb0>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006998:	d10c      	bne.n	80069b4 <HAL_RCC_OscConfig+0x98>
 800699a:	4b70      	ldr	r3, [pc, #448]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a6f      	ldr	r2, [pc, #444]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 80069a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	4b6d      	ldr	r3, [pc, #436]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a6c      	ldr	r2, [pc, #432]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 80069ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069b0:	6013      	str	r3, [r2, #0]
 80069b2:	e00b      	b.n	80069cc <HAL_RCC_OscConfig+0xb0>
 80069b4:	4b69      	ldr	r3, [pc, #420]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a68      	ldr	r2, [pc, #416]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 80069ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069be:	6013      	str	r3, [r2, #0]
 80069c0:	4b66      	ldr	r3, [pc, #408]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a65      	ldr	r2, [pc, #404]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 80069c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d013      	beq.n	80069fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069d4:	f7fd ff82 	bl	80048dc <HAL_GetTick>
 80069d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069da:	e008      	b.n	80069ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069dc:	f7fd ff7e 	bl	80048dc <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b64      	cmp	r3, #100	@ 0x64
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e207      	b.n	8006dfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069ee:	4b5b      	ldr	r3, [pc, #364]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d0f0      	beq.n	80069dc <HAL_RCC_OscConfig+0xc0>
 80069fa:	e014      	b.n	8006a26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069fc:	f7fd ff6e 	bl	80048dc <HAL_GetTick>
 8006a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a02:	e008      	b.n	8006a16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a04:	f7fd ff6a 	bl	80048dc <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	2b64      	cmp	r3, #100	@ 0x64
 8006a10:	d901      	bls.n	8006a16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e1f3      	b.n	8006dfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a16:	4b51      	ldr	r3, [pc, #324]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1f0      	bne.n	8006a04 <HAL_RCC_OscConfig+0xe8>
 8006a22:	e000      	b.n	8006a26 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d063      	beq.n	8006afa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006a32:	4b4a      	ldr	r3, [pc, #296]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f003 030c 	and.w	r3, r3, #12
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00b      	beq.n	8006a56 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a3e:	4b47      	ldr	r3, [pc, #284]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006a46:	2b08      	cmp	r3, #8
 8006a48:	d11c      	bne.n	8006a84 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a4a:	4b44      	ldr	r3, [pc, #272]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d116      	bne.n	8006a84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a56:	4b41      	ldr	r3, [pc, #260]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d005      	beq.n	8006a6e <HAL_RCC_OscConfig+0x152>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d001      	beq.n	8006a6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e1c7      	b.n	8006dfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	00db      	lsls	r3, r3, #3
 8006a7c:	4937      	ldr	r1, [pc, #220]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a82:	e03a      	b.n	8006afa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d020      	beq.n	8006ace <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a8c:	4b34      	ldr	r3, [pc, #208]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 8006a8e:	2201      	movs	r2, #1
 8006a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a92:	f7fd ff23 	bl	80048dc <HAL_GetTick>
 8006a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a98:	e008      	b.n	8006aac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a9a:	f7fd ff1f 	bl	80048dc <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d901      	bls.n	8006aac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e1a8      	b.n	8006dfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aac:	4b2b      	ldr	r3, [pc, #172]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d0f0      	beq.n	8006a9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ab8:	4b28      	ldr	r3, [pc, #160]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	00db      	lsls	r3, r3, #3
 8006ac6:	4925      	ldr	r1, [pc, #148]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	600b      	str	r3, [r1, #0]
 8006acc:	e015      	b.n	8006afa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ace:	4b24      	ldr	r3, [pc, #144]	@ (8006b60 <HAL_RCC_OscConfig+0x244>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad4:	f7fd ff02 	bl	80048dc <HAL_GetTick>
 8006ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ada:	e008      	b.n	8006aee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006adc:	f7fd fefe 	bl	80048dc <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d901      	bls.n	8006aee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e187      	b.n	8006dfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006aee:	4b1b      	ldr	r3, [pc, #108]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1f0      	bne.n	8006adc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0308 	and.w	r3, r3, #8
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d036      	beq.n	8006b74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d016      	beq.n	8006b3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b0e:	4b15      	ldr	r3, [pc, #84]	@ (8006b64 <HAL_RCC_OscConfig+0x248>)
 8006b10:	2201      	movs	r2, #1
 8006b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b14:	f7fd fee2 	bl	80048dc <HAL_GetTick>
 8006b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b1a:	e008      	b.n	8006b2e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b1c:	f7fd fede 	bl	80048dc <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d901      	bls.n	8006b2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e167      	b.n	8006dfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b5c <HAL_RCC_OscConfig+0x240>)
 8006b30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0f0      	beq.n	8006b1c <HAL_RCC_OscConfig+0x200>
 8006b3a:	e01b      	b.n	8006b74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b3c:	4b09      	ldr	r3, [pc, #36]	@ (8006b64 <HAL_RCC_OscConfig+0x248>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b42:	f7fd fecb 	bl	80048dc <HAL_GetTick>
 8006b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b48:	e00e      	b.n	8006b68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b4a:	f7fd fec7 	bl	80048dc <HAL_GetTick>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d907      	bls.n	8006b68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e150      	b.n	8006dfe <HAL_RCC_OscConfig+0x4e2>
 8006b5c:	40023800 	.word	0x40023800
 8006b60:	42470000 	.word	0x42470000
 8006b64:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b68:	4b88      	ldr	r3, [pc, #544]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006b6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b6c:	f003 0302 	and.w	r3, r3, #2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1ea      	bne.n	8006b4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0304 	and.w	r3, r3, #4
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 8097 	beq.w	8006cb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b82:	2300      	movs	r3, #0
 8006b84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b86:	4b81      	ldr	r3, [pc, #516]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10f      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b92:	2300      	movs	r3, #0
 8006b94:	60bb      	str	r3, [r7, #8]
 8006b96:	4b7d      	ldr	r3, [pc, #500]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b9a:	4a7c      	ldr	r2, [pc, #496]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006b9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ba0:	6413      	str	r3, [r2, #64]	@ 0x40
 8006ba2:	4b7a      	ldr	r3, [pc, #488]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006baa:	60bb      	str	r3, [r7, #8]
 8006bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bb2:	4b77      	ldr	r3, [pc, #476]	@ (8006d90 <HAL_RCC_OscConfig+0x474>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d118      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bbe:	4b74      	ldr	r3, [pc, #464]	@ (8006d90 <HAL_RCC_OscConfig+0x474>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a73      	ldr	r2, [pc, #460]	@ (8006d90 <HAL_RCC_OscConfig+0x474>)
 8006bc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bca:	f7fd fe87 	bl	80048dc <HAL_GetTick>
 8006bce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bd0:	e008      	b.n	8006be4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bd2:	f7fd fe83 	bl	80048dc <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d901      	bls.n	8006be4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e10c      	b.n	8006dfe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006be4:	4b6a      	ldr	r3, [pc, #424]	@ (8006d90 <HAL_RCC_OscConfig+0x474>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d0f0      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d106      	bne.n	8006c06 <HAL_RCC_OscConfig+0x2ea>
 8006bf8:	4b64      	ldr	r3, [pc, #400]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bfc:	4a63      	ldr	r2, [pc, #396]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006bfe:	f043 0301 	orr.w	r3, r3, #1
 8006c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c04:	e01c      	b.n	8006c40 <HAL_RCC_OscConfig+0x324>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	2b05      	cmp	r3, #5
 8006c0c:	d10c      	bne.n	8006c28 <HAL_RCC_OscConfig+0x30c>
 8006c0e:	4b5f      	ldr	r3, [pc, #380]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c12:	4a5e      	ldr	r2, [pc, #376]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006c14:	f043 0304 	orr.w	r3, r3, #4
 8006c18:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c1a:	4b5c      	ldr	r3, [pc, #368]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c1e:	4a5b      	ldr	r2, [pc, #364]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006c20:	f043 0301 	orr.w	r3, r3, #1
 8006c24:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c26:	e00b      	b.n	8006c40 <HAL_RCC_OscConfig+0x324>
 8006c28:	4b58      	ldr	r3, [pc, #352]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c2c:	4a57      	ldr	r2, [pc, #348]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006c2e:	f023 0301 	bic.w	r3, r3, #1
 8006c32:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c34:	4b55      	ldr	r3, [pc, #340]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c38:	4a54      	ldr	r2, [pc, #336]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006c3a:	f023 0304 	bic.w	r3, r3, #4
 8006c3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d015      	beq.n	8006c74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c48:	f7fd fe48 	bl	80048dc <HAL_GetTick>
 8006c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c4e:	e00a      	b.n	8006c66 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c50:	f7fd fe44 	bl	80048dc <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e0cb      	b.n	8006dfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c66:	4b49      	ldr	r3, [pc, #292]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d0ee      	beq.n	8006c50 <HAL_RCC_OscConfig+0x334>
 8006c72:	e014      	b.n	8006c9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c74:	f7fd fe32 	bl	80048dc <HAL_GetTick>
 8006c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c7a:	e00a      	b.n	8006c92 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c7c:	f7fd fe2e 	bl	80048dc <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e0b5      	b.n	8006dfe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c92:	4b3e      	ldr	r3, [pc, #248]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1ee      	bne.n	8006c7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d105      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ca4:	4b39      	ldr	r3, [pc, #228]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca8:	4a38      	ldr	r2, [pc, #224]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006caa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 80a1 	beq.w	8006dfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006cba:	4b34      	ldr	r3, [pc, #208]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f003 030c 	and.w	r3, r3, #12
 8006cc2:	2b08      	cmp	r3, #8
 8006cc4:	d05c      	beq.n	8006d80 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d141      	bne.n	8006d52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cce:	4b31      	ldr	r3, [pc, #196]	@ (8006d94 <HAL_RCC_OscConfig+0x478>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd4:	f7fd fe02 	bl	80048dc <HAL_GetTick>
 8006cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cda:	e008      	b.n	8006cee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cdc:	f7fd fdfe 	bl	80048dc <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d901      	bls.n	8006cee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e087      	b.n	8006dfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cee:	4b27      	ldr	r3, [pc, #156]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1f0      	bne.n	8006cdc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	69da      	ldr	r2, [r3, #28]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	431a      	orrs	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d08:	019b      	lsls	r3, r3, #6
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d10:	085b      	lsrs	r3, r3, #1
 8006d12:	3b01      	subs	r3, #1
 8006d14:	041b      	lsls	r3, r3, #16
 8006d16:	431a      	orrs	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d1c:	061b      	lsls	r3, r3, #24
 8006d1e:	491b      	ldr	r1, [pc, #108]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006d20:	4313      	orrs	r3, r2
 8006d22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d24:	4b1b      	ldr	r3, [pc, #108]	@ (8006d94 <HAL_RCC_OscConfig+0x478>)
 8006d26:	2201      	movs	r2, #1
 8006d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d2a:	f7fd fdd7 	bl	80048dc <HAL_GetTick>
 8006d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d30:	e008      	b.n	8006d44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d32:	f7fd fdd3 	bl	80048dc <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d901      	bls.n	8006d44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e05c      	b.n	8006dfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d44:	4b11      	ldr	r3, [pc, #68]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d0f0      	beq.n	8006d32 <HAL_RCC_OscConfig+0x416>
 8006d50:	e054      	b.n	8006dfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d52:	4b10      	ldr	r3, [pc, #64]	@ (8006d94 <HAL_RCC_OscConfig+0x478>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d58:	f7fd fdc0 	bl	80048dc <HAL_GetTick>
 8006d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d5e:	e008      	b.n	8006d72 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d60:	f7fd fdbc 	bl	80048dc <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e045      	b.n	8006dfe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d72:	4b06      	ldr	r3, [pc, #24]	@ (8006d8c <HAL_RCC_OscConfig+0x470>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1f0      	bne.n	8006d60 <HAL_RCC_OscConfig+0x444>
 8006d7e:	e03d      	b.n	8006dfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d107      	bne.n	8006d98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e038      	b.n	8006dfe <HAL_RCC_OscConfig+0x4e2>
 8006d8c:	40023800 	.word	0x40023800
 8006d90:	40007000 	.word	0x40007000
 8006d94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d98:	4b1b      	ldr	r3, [pc, #108]	@ (8006e08 <HAL_RCC_OscConfig+0x4ec>)
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d028      	beq.n	8006df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d121      	bne.n	8006df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d11a      	bne.n	8006df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006dc8:	4013      	ands	r3, r2
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006dce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d111      	bne.n	8006df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dde:	085b      	lsrs	r3, r3, #1
 8006de0:	3b01      	subs	r3, #1
 8006de2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d107      	bne.n	8006df8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d001      	beq.n	8006dfc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e000      	b.n	8006dfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3718      	adds	r7, #24
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	40023800 	.word	0x40023800

08006e0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e0cc      	b.n	8006fba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e20:	4b68      	ldr	r3, [pc, #416]	@ (8006fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0307 	and.w	r3, r3, #7
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d90c      	bls.n	8006e48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e2e:	4b65      	ldr	r3, [pc, #404]	@ (8006fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e30:	683a      	ldr	r2, [r7, #0]
 8006e32:	b2d2      	uxtb	r2, r2
 8006e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e36:	4b63      	ldr	r3, [pc, #396]	@ (8006fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0307 	and.w	r3, r3, #7
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d001      	beq.n	8006e48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e0b8      	b.n	8006fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0302 	and.w	r3, r3, #2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d020      	beq.n	8006e96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0304 	and.w	r3, r3, #4
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d005      	beq.n	8006e6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e60:	4b59      	ldr	r3, [pc, #356]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	4a58      	ldr	r2, [pc, #352]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006e6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0308 	and.w	r3, r3, #8
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e78:	4b53      	ldr	r3, [pc, #332]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	4a52      	ldr	r2, [pc, #328]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006e82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e84:	4b50      	ldr	r3, [pc, #320]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	494d      	ldr	r1, [pc, #308]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d044      	beq.n	8006f2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d107      	bne.n	8006eba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eaa:	4b47      	ldr	r3, [pc, #284]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d119      	bne.n	8006eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e07f      	b.n	8006fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d003      	beq.n	8006eca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d107      	bne.n	8006eda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eca:	4b3f      	ldr	r3, [pc, #252]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d109      	bne.n	8006eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e06f      	b.n	8006fba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eda:	4b3b      	ldr	r3, [pc, #236]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e067      	b.n	8006fba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006eea:	4b37      	ldr	r3, [pc, #220]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f023 0203 	bic.w	r2, r3, #3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	4934      	ldr	r1, [pc, #208]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006efc:	f7fd fcee 	bl	80048dc <HAL_GetTick>
 8006f00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f02:	e00a      	b.n	8006f1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f04:	f7fd fcea 	bl	80048dc <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d901      	bls.n	8006f1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e04f      	b.n	8006fba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f003 020c 	and.w	r2, r3, #12
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d1eb      	bne.n	8006f04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f2c:	4b25      	ldr	r3, [pc, #148]	@ (8006fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0307 	and.w	r3, r3, #7
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d20c      	bcs.n	8006f54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f3a:	4b22      	ldr	r3, [pc, #136]	@ (8006fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	b2d2      	uxtb	r2, r2
 8006f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f42:	4b20      	ldr	r3, [pc, #128]	@ (8006fc4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d001      	beq.n	8006f54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e032      	b.n	8006fba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0304 	and.w	r3, r3, #4
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d008      	beq.n	8006f72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f60:	4b19      	ldr	r3, [pc, #100]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	4916      	ldr	r1, [pc, #88]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0308 	and.w	r3, r3, #8
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d009      	beq.n	8006f92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f7e:	4b12      	ldr	r3, [pc, #72]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	490e      	ldr	r1, [pc, #56]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f92:	f000 f821 	bl	8006fd8 <HAL_RCC_GetSysClockFreq>
 8006f96:	4602      	mov	r2, r0
 8006f98:	4b0b      	ldr	r3, [pc, #44]	@ (8006fc8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	091b      	lsrs	r3, r3, #4
 8006f9e:	f003 030f 	and.w	r3, r3, #15
 8006fa2:	490a      	ldr	r1, [pc, #40]	@ (8006fcc <HAL_RCC_ClockConfig+0x1c0>)
 8006fa4:	5ccb      	ldrb	r3, [r1, r3]
 8006fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8006faa:	4a09      	ldr	r2, [pc, #36]	@ (8006fd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006fac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006fae:	4b09      	ldr	r3, [pc, #36]	@ (8006fd4 <HAL_RCC_ClockConfig+0x1c8>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fd fc4e 	bl	8004854 <HAL_InitTick>

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	40023c00 	.word	0x40023c00
 8006fc8:	40023800 	.word	0x40023800
 8006fcc:	08011934 	.word	0x08011934
 8006fd0:	2000001c 	.word	0x2000001c
 8006fd4:	20000020 	.word	0x20000020

08006fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fdc:	b090      	sub	sp, #64	@ 0x40
 8006fde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ff0:	4b59      	ldr	r3, [pc, #356]	@ (8007158 <HAL_RCC_GetSysClockFreq+0x180>)
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	f003 030c 	and.w	r3, r3, #12
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d00d      	beq.n	8007018 <HAL_RCC_GetSysClockFreq+0x40>
 8006ffc:	2b08      	cmp	r3, #8
 8006ffe:	f200 80a1 	bhi.w	8007144 <HAL_RCC_GetSysClockFreq+0x16c>
 8007002:	2b00      	cmp	r3, #0
 8007004:	d002      	beq.n	800700c <HAL_RCC_GetSysClockFreq+0x34>
 8007006:	2b04      	cmp	r3, #4
 8007008:	d003      	beq.n	8007012 <HAL_RCC_GetSysClockFreq+0x3a>
 800700a:	e09b      	b.n	8007144 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800700c:	4b53      	ldr	r3, [pc, #332]	@ (800715c <HAL_RCC_GetSysClockFreq+0x184>)
 800700e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007010:	e09b      	b.n	800714a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007012:	4b53      	ldr	r3, [pc, #332]	@ (8007160 <HAL_RCC_GetSysClockFreq+0x188>)
 8007014:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007016:	e098      	b.n	800714a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007018:	4b4f      	ldr	r3, [pc, #316]	@ (8007158 <HAL_RCC_GetSysClockFreq+0x180>)
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007020:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007022:	4b4d      	ldr	r3, [pc, #308]	@ (8007158 <HAL_RCC_GetSysClockFreq+0x180>)
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d028      	beq.n	8007080 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800702e:	4b4a      	ldr	r3, [pc, #296]	@ (8007158 <HAL_RCC_GetSysClockFreq+0x180>)
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	099b      	lsrs	r3, r3, #6
 8007034:	2200      	movs	r2, #0
 8007036:	623b      	str	r3, [r7, #32]
 8007038:	627a      	str	r2, [r7, #36]	@ 0x24
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007040:	2100      	movs	r1, #0
 8007042:	4b47      	ldr	r3, [pc, #284]	@ (8007160 <HAL_RCC_GetSysClockFreq+0x188>)
 8007044:	fb03 f201 	mul.w	r2, r3, r1
 8007048:	2300      	movs	r3, #0
 800704a:	fb00 f303 	mul.w	r3, r0, r3
 800704e:	4413      	add	r3, r2
 8007050:	4a43      	ldr	r2, [pc, #268]	@ (8007160 <HAL_RCC_GetSysClockFreq+0x188>)
 8007052:	fba0 1202 	umull	r1, r2, r0, r2
 8007056:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007058:	460a      	mov	r2, r1
 800705a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800705c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800705e:	4413      	add	r3, r2
 8007060:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007064:	2200      	movs	r2, #0
 8007066:	61bb      	str	r3, [r7, #24]
 8007068:	61fa      	str	r2, [r7, #28]
 800706a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800706e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007072:	f7f9 fe09 	bl	8000c88 <__aeabi_uldivmod>
 8007076:	4602      	mov	r2, r0
 8007078:	460b      	mov	r3, r1
 800707a:	4613      	mov	r3, r2
 800707c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800707e:	e053      	b.n	8007128 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007080:	4b35      	ldr	r3, [pc, #212]	@ (8007158 <HAL_RCC_GetSysClockFreq+0x180>)
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	099b      	lsrs	r3, r3, #6
 8007086:	2200      	movs	r2, #0
 8007088:	613b      	str	r3, [r7, #16]
 800708a:	617a      	str	r2, [r7, #20]
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007092:	f04f 0b00 	mov.w	fp, #0
 8007096:	4652      	mov	r2, sl
 8007098:	465b      	mov	r3, fp
 800709a:	f04f 0000 	mov.w	r0, #0
 800709e:	f04f 0100 	mov.w	r1, #0
 80070a2:	0159      	lsls	r1, r3, #5
 80070a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80070a8:	0150      	lsls	r0, r2, #5
 80070aa:	4602      	mov	r2, r0
 80070ac:	460b      	mov	r3, r1
 80070ae:	ebb2 080a 	subs.w	r8, r2, sl
 80070b2:	eb63 090b 	sbc.w	r9, r3, fp
 80070b6:	f04f 0200 	mov.w	r2, #0
 80070ba:	f04f 0300 	mov.w	r3, #0
 80070be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80070c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80070c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80070ca:	ebb2 0408 	subs.w	r4, r2, r8
 80070ce:	eb63 0509 	sbc.w	r5, r3, r9
 80070d2:	f04f 0200 	mov.w	r2, #0
 80070d6:	f04f 0300 	mov.w	r3, #0
 80070da:	00eb      	lsls	r3, r5, #3
 80070dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070e0:	00e2      	lsls	r2, r4, #3
 80070e2:	4614      	mov	r4, r2
 80070e4:	461d      	mov	r5, r3
 80070e6:	eb14 030a 	adds.w	r3, r4, sl
 80070ea:	603b      	str	r3, [r7, #0]
 80070ec:	eb45 030b 	adc.w	r3, r5, fp
 80070f0:	607b      	str	r3, [r7, #4]
 80070f2:	f04f 0200 	mov.w	r2, #0
 80070f6:	f04f 0300 	mov.w	r3, #0
 80070fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80070fe:	4629      	mov	r1, r5
 8007100:	028b      	lsls	r3, r1, #10
 8007102:	4621      	mov	r1, r4
 8007104:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007108:	4621      	mov	r1, r4
 800710a:	028a      	lsls	r2, r1, #10
 800710c:	4610      	mov	r0, r2
 800710e:	4619      	mov	r1, r3
 8007110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007112:	2200      	movs	r2, #0
 8007114:	60bb      	str	r3, [r7, #8]
 8007116:	60fa      	str	r2, [r7, #12]
 8007118:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800711c:	f7f9 fdb4 	bl	8000c88 <__aeabi_uldivmod>
 8007120:	4602      	mov	r2, r0
 8007122:	460b      	mov	r3, r1
 8007124:	4613      	mov	r3, r2
 8007126:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007128:	4b0b      	ldr	r3, [pc, #44]	@ (8007158 <HAL_RCC_GetSysClockFreq+0x180>)
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	0c1b      	lsrs	r3, r3, #16
 800712e:	f003 0303 	and.w	r3, r3, #3
 8007132:	3301      	adds	r3, #1
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007138:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800713a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007140:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007142:	e002      	b.n	800714a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007144:	4b05      	ldr	r3, [pc, #20]	@ (800715c <HAL_RCC_GetSysClockFreq+0x184>)
 8007146:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007148:	bf00      	nop
    }
  }
  return sysclockfreq;
 800714a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800714c:	4618      	mov	r0, r3
 800714e:	3740      	adds	r7, #64	@ 0x40
 8007150:	46bd      	mov	sp, r7
 8007152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007156:	bf00      	nop
 8007158:	40023800 	.word	0x40023800
 800715c:	00f42400 	.word	0x00f42400
 8007160:	017d7840 	.word	0x017d7840

08007164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007164:	b480      	push	{r7}
 8007166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007168:	4b03      	ldr	r3, [pc, #12]	@ (8007178 <HAL_RCC_GetHCLKFreq+0x14>)
 800716a:	681b      	ldr	r3, [r3, #0]
}
 800716c:	4618      	mov	r0, r3
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	2000001c 	.word	0x2000001c

0800717c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007180:	f7ff fff0 	bl	8007164 <HAL_RCC_GetHCLKFreq>
 8007184:	4602      	mov	r2, r0
 8007186:	4b05      	ldr	r3, [pc, #20]	@ (800719c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	0a9b      	lsrs	r3, r3, #10
 800718c:	f003 0307 	and.w	r3, r3, #7
 8007190:	4903      	ldr	r1, [pc, #12]	@ (80071a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007192:	5ccb      	ldrb	r3, [r1, r3]
 8007194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007198:	4618      	mov	r0, r3
 800719a:	bd80      	pop	{r7, pc}
 800719c:	40023800 	.word	0x40023800
 80071a0:	08011944 	.word	0x08011944

080071a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80071a8:	f7ff ffdc 	bl	8007164 <HAL_RCC_GetHCLKFreq>
 80071ac:	4602      	mov	r2, r0
 80071ae:	4b05      	ldr	r3, [pc, #20]	@ (80071c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	0b5b      	lsrs	r3, r3, #13
 80071b4:	f003 0307 	and.w	r3, r3, #7
 80071b8:	4903      	ldr	r1, [pc, #12]	@ (80071c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80071ba:	5ccb      	ldrb	r3, [r1, r3]
 80071bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	40023800 	.word	0x40023800
 80071c8:	08011944 	.word	0x08011944

080071cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e041      	b.n	8007262 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d106      	bne.n	80071f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7fc fff0 	bl	80041d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2202      	movs	r2, #2
 80071fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	3304      	adds	r3, #4
 8007208:	4619      	mov	r1, r3
 800720a:	4610      	mov	r0, r2
 800720c:	f000 fff0 	bl	80081f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
	...

0800726c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b01      	cmp	r3, #1
 800727e:	d001      	beq.n	8007284 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e046      	b.n	8007312 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2202      	movs	r2, #2
 8007288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a23      	ldr	r2, [pc, #140]	@ (8007320 <HAL_TIM_Base_Start+0xb4>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d022      	beq.n	80072dc <HAL_TIM_Base_Start+0x70>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800729e:	d01d      	beq.n	80072dc <HAL_TIM_Base_Start+0x70>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a1f      	ldr	r2, [pc, #124]	@ (8007324 <HAL_TIM_Base_Start+0xb8>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d018      	beq.n	80072dc <HAL_TIM_Base_Start+0x70>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a1e      	ldr	r2, [pc, #120]	@ (8007328 <HAL_TIM_Base_Start+0xbc>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d013      	beq.n	80072dc <HAL_TIM_Base_Start+0x70>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a1c      	ldr	r2, [pc, #112]	@ (800732c <HAL_TIM_Base_Start+0xc0>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d00e      	beq.n	80072dc <HAL_TIM_Base_Start+0x70>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a1b      	ldr	r2, [pc, #108]	@ (8007330 <HAL_TIM_Base_Start+0xc4>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d009      	beq.n	80072dc <HAL_TIM_Base_Start+0x70>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a19      	ldr	r2, [pc, #100]	@ (8007334 <HAL_TIM_Base_Start+0xc8>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d004      	beq.n	80072dc <HAL_TIM_Base_Start+0x70>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a18      	ldr	r2, [pc, #96]	@ (8007338 <HAL_TIM_Base_Start+0xcc>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d111      	bne.n	8007300 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f003 0307 	and.w	r3, r3, #7
 80072e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2b06      	cmp	r3, #6
 80072ec:	d010      	beq.n	8007310 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f042 0201 	orr.w	r2, r2, #1
 80072fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072fe:	e007      	b.n	8007310 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f042 0201 	orr.w	r2, r2, #1
 800730e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	40010000 	.word	0x40010000
 8007324:	40000400 	.word	0x40000400
 8007328:	40000800 	.word	0x40000800
 800732c:	40000c00 	.word	0x40000c00
 8007330:	40010400 	.word	0x40010400
 8007334:	40014000 	.word	0x40014000
 8007338:	40001800 	.word	0x40001800

0800733c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d101      	bne.n	800734e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e041      	b.n	80073d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007354:	b2db      	uxtb	r3, r3
 8007356:	2b00      	cmp	r3, #0
 8007358:	d106      	bne.n	8007368 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f839 	bl	80073da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2202      	movs	r2, #2
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	3304      	adds	r3, #4
 8007378:	4619      	mov	r1, r3
 800737a:	4610      	mov	r0, r2
 800737c:	f000 ff38 	bl	80081f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80073da:	b480      	push	{r7}
 80073dc:	b083      	sub	sp, #12
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80073e2:	bf00      	nop
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
	...

080073f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d109      	bne.n	8007414 <HAL_TIM_PWM_Start+0x24>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b01      	cmp	r3, #1
 800740a:	bf14      	ite	ne
 800740c:	2301      	movne	r3, #1
 800740e:	2300      	moveq	r3, #0
 8007410:	b2db      	uxtb	r3, r3
 8007412:	e022      	b.n	800745a <HAL_TIM_PWM_Start+0x6a>
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	2b04      	cmp	r3, #4
 8007418:	d109      	bne.n	800742e <HAL_TIM_PWM_Start+0x3e>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b01      	cmp	r3, #1
 8007424:	bf14      	ite	ne
 8007426:	2301      	movne	r3, #1
 8007428:	2300      	moveq	r3, #0
 800742a:	b2db      	uxtb	r3, r3
 800742c:	e015      	b.n	800745a <HAL_TIM_PWM_Start+0x6a>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b08      	cmp	r3, #8
 8007432:	d109      	bne.n	8007448 <HAL_TIM_PWM_Start+0x58>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b01      	cmp	r3, #1
 800743e:	bf14      	ite	ne
 8007440:	2301      	movne	r3, #1
 8007442:	2300      	moveq	r3, #0
 8007444:	b2db      	uxtb	r3, r3
 8007446:	e008      	b.n	800745a <HAL_TIM_PWM_Start+0x6a>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b01      	cmp	r3, #1
 8007452:	bf14      	ite	ne
 8007454:	2301      	movne	r3, #1
 8007456:	2300      	moveq	r3, #0
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e07c      	b.n	800755c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d104      	bne.n	8007472 <HAL_TIM_PWM_Start+0x82>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2202      	movs	r2, #2
 800746c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007470:	e013      	b.n	800749a <HAL_TIM_PWM_Start+0xaa>
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	2b04      	cmp	r3, #4
 8007476:	d104      	bne.n	8007482 <HAL_TIM_PWM_Start+0x92>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007480:	e00b      	b.n	800749a <HAL_TIM_PWM_Start+0xaa>
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b08      	cmp	r3, #8
 8007486:	d104      	bne.n	8007492 <HAL_TIM_PWM_Start+0xa2>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2202      	movs	r2, #2
 800748c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007490:	e003      	b.n	800749a <HAL_TIM_PWM_Start+0xaa>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2202      	movs	r2, #2
 8007496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2201      	movs	r2, #1
 80074a0:	6839      	ldr	r1, [r7, #0]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f001 fac4 	bl	8008a30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a2d      	ldr	r2, [pc, #180]	@ (8007564 <HAL_TIM_PWM_Start+0x174>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d004      	beq.n	80074bc <HAL_TIM_PWM_Start+0xcc>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a2c      	ldr	r2, [pc, #176]	@ (8007568 <HAL_TIM_PWM_Start+0x178>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d101      	bne.n	80074c0 <HAL_TIM_PWM_Start+0xd0>
 80074bc:	2301      	movs	r3, #1
 80074be:	e000      	b.n	80074c2 <HAL_TIM_PWM_Start+0xd2>
 80074c0:	2300      	movs	r3, #0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d007      	beq.n	80074d6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a22      	ldr	r2, [pc, #136]	@ (8007564 <HAL_TIM_PWM_Start+0x174>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d022      	beq.n	8007526 <HAL_TIM_PWM_Start+0x136>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074e8:	d01d      	beq.n	8007526 <HAL_TIM_PWM_Start+0x136>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a1f      	ldr	r2, [pc, #124]	@ (800756c <HAL_TIM_PWM_Start+0x17c>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d018      	beq.n	8007526 <HAL_TIM_PWM_Start+0x136>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007570 <HAL_TIM_PWM_Start+0x180>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d013      	beq.n	8007526 <HAL_TIM_PWM_Start+0x136>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a1c      	ldr	r2, [pc, #112]	@ (8007574 <HAL_TIM_PWM_Start+0x184>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d00e      	beq.n	8007526 <HAL_TIM_PWM_Start+0x136>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a16      	ldr	r2, [pc, #88]	@ (8007568 <HAL_TIM_PWM_Start+0x178>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d009      	beq.n	8007526 <HAL_TIM_PWM_Start+0x136>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a18      	ldr	r2, [pc, #96]	@ (8007578 <HAL_TIM_PWM_Start+0x188>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d004      	beq.n	8007526 <HAL_TIM_PWM_Start+0x136>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a16      	ldr	r2, [pc, #88]	@ (800757c <HAL_TIM_PWM_Start+0x18c>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d111      	bne.n	800754a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2b06      	cmp	r3, #6
 8007536:	d010      	beq.n	800755a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f042 0201 	orr.w	r2, r2, #1
 8007546:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007548:	e007      	b.n	800755a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f042 0201 	orr.w	r2, r2, #1
 8007558:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	40010000 	.word	0x40010000
 8007568:	40010400 	.word	0x40010400
 800756c:	40000400 	.word	0x40000400
 8007570:	40000800 	.word	0x40000800
 8007574:	40000c00 	.word	0x40000c00
 8007578:	40014000 	.word	0x40014000
 800757c:	40001800 	.word	0x40001800

08007580 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e041      	b.n	8007616 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007598:	b2db      	uxtb	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d106      	bne.n	80075ac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f839 	bl	800761e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2202      	movs	r2, #2
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	3304      	adds	r3, #4
 80075bc:	4619      	mov	r1, r3
 80075be:	4610      	mov	r0, r2
 80075c0:	f000 fe16 	bl	80081f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800761e:	b480      	push	{r7}
 8007620:	b083      	sub	sp, #12
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007626:	bf00      	nop
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
	...

08007634 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d104      	bne.n	8007652 <HAL_TIM_IC_Start_IT+0x1e>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800764e:	b2db      	uxtb	r3, r3
 8007650:	e013      	b.n	800767a <HAL_TIM_IC_Start_IT+0x46>
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	2b04      	cmp	r3, #4
 8007656:	d104      	bne.n	8007662 <HAL_TIM_IC_Start_IT+0x2e>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800765e:	b2db      	uxtb	r3, r3
 8007660:	e00b      	b.n	800767a <HAL_TIM_IC_Start_IT+0x46>
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b08      	cmp	r3, #8
 8007666:	d104      	bne.n	8007672 <HAL_TIM_IC_Start_IT+0x3e>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800766e:	b2db      	uxtb	r3, r3
 8007670:	e003      	b.n	800767a <HAL_TIM_IC_Start_IT+0x46>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007678:	b2db      	uxtb	r3, r3
 800767a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d104      	bne.n	800768c <HAL_TIM_IC_Start_IT+0x58>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007688:	b2db      	uxtb	r3, r3
 800768a:	e013      	b.n	80076b4 <HAL_TIM_IC_Start_IT+0x80>
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2b04      	cmp	r3, #4
 8007690:	d104      	bne.n	800769c <HAL_TIM_IC_Start_IT+0x68>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007698:	b2db      	uxtb	r3, r3
 800769a:	e00b      	b.n	80076b4 <HAL_TIM_IC_Start_IT+0x80>
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2b08      	cmp	r3, #8
 80076a0:	d104      	bne.n	80076ac <HAL_TIM_IC_Start_IT+0x78>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	e003      	b.n	80076b4 <HAL_TIM_IC_Start_IT+0x80>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80076b6:	7bbb      	ldrb	r3, [r7, #14]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d102      	bne.n	80076c2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80076bc:	7b7b      	ldrb	r3, [r7, #13]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d001      	beq.n	80076c6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e0cc      	b.n	8007860 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d104      	bne.n	80076d6 <HAL_TIM_IC_Start_IT+0xa2>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2202      	movs	r2, #2
 80076d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076d4:	e013      	b.n	80076fe <HAL_TIM_IC_Start_IT+0xca>
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b04      	cmp	r3, #4
 80076da:	d104      	bne.n	80076e6 <HAL_TIM_IC_Start_IT+0xb2>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2202      	movs	r2, #2
 80076e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076e4:	e00b      	b.n	80076fe <HAL_TIM_IC_Start_IT+0xca>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b08      	cmp	r3, #8
 80076ea:	d104      	bne.n	80076f6 <HAL_TIM_IC_Start_IT+0xc2>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076f4:	e003      	b.n	80076fe <HAL_TIM_IC_Start_IT+0xca>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2202      	movs	r2, #2
 80076fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d104      	bne.n	800770e <HAL_TIM_IC_Start_IT+0xda>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2202      	movs	r2, #2
 8007708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800770c:	e013      	b.n	8007736 <HAL_TIM_IC_Start_IT+0x102>
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2b04      	cmp	r3, #4
 8007712:	d104      	bne.n	800771e <HAL_TIM_IC_Start_IT+0xea>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2202      	movs	r2, #2
 8007718:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800771c:	e00b      	b.n	8007736 <HAL_TIM_IC_Start_IT+0x102>
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	2b08      	cmp	r3, #8
 8007722:	d104      	bne.n	800772e <HAL_TIM_IC_Start_IT+0xfa>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2202      	movs	r2, #2
 8007728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800772c:	e003      	b.n	8007736 <HAL_TIM_IC_Start_IT+0x102>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2202      	movs	r2, #2
 8007732:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	2b0c      	cmp	r3, #12
 800773a:	d841      	bhi.n	80077c0 <HAL_TIM_IC_Start_IT+0x18c>
 800773c:	a201      	add	r2, pc, #4	@ (adr r2, 8007744 <HAL_TIM_IC_Start_IT+0x110>)
 800773e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007742:	bf00      	nop
 8007744:	08007779 	.word	0x08007779
 8007748:	080077c1 	.word	0x080077c1
 800774c:	080077c1 	.word	0x080077c1
 8007750:	080077c1 	.word	0x080077c1
 8007754:	0800778b 	.word	0x0800778b
 8007758:	080077c1 	.word	0x080077c1
 800775c:	080077c1 	.word	0x080077c1
 8007760:	080077c1 	.word	0x080077c1
 8007764:	0800779d 	.word	0x0800779d
 8007768:	080077c1 	.word	0x080077c1
 800776c:	080077c1 	.word	0x080077c1
 8007770:	080077c1 	.word	0x080077c1
 8007774:	080077af 	.word	0x080077af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f042 0202 	orr.w	r2, r2, #2
 8007786:	60da      	str	r2, [r3, #12]
      break;
 8007788:	e01d      	b.n	80077c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68da      	ldr	r2, [r3, #12]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f042 0204 	orr.w	r2, r2, #4
 8007798:	60da      	str	r2, [r3, #12]
      break;
 800779a:	e014      	b.n	80077c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68da      	ldr	r2, [r3, #12]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f042 0208 	orr.w	r2, r2, #8
 80077aa:	60da      	str	r2, [r3, #12]
      break;
 80077ac:	e00b      	b.n	80077c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68da      	ldr	r2, [r3, #12]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f042 0210 	orr.w	r2, r2, #16
 80077bc:	60da      	str	r2, [r3, #12]
      break;
 80077be:	e002      	b.n	80077c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	73fb      	strb	r3, [r7, #15]
      break;
 80077c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d148      	bne.n	800785e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2201      	movs	r2, #1
 80077d2:	6839      	ldr	r1, [r7, #0]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f001 f92b 	bl	8008a30 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a22      	ldr	r2, [pc, #136]	@ (8007868 <HAL_TIM_IC_Start_IT+0x234>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d022      	beq.n	800782a <HAL_TIM_IC_Start_IT+0x1f6>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ec:	d01d      	beq.n	800782a <HAL_TIM_IC_Start_IT+0x1f6>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a1e      	ldr	r2, [pc, #120]	@ (800786c <HAL_TIM_IC_Start_IT+0x238>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d018      	beq.n	800782a <HAL_TIM_IC_Start_IT+0x1f6>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a1c      	ldr	r2, [pc, #112]	@ (8007870 <HAL_TIM_IC_Start_IT+0x23c>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d013      	beq.n	800782a <HAL_TIM_IC_Start_IT+0x1f6>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a1b      	ldr	r2, [pc, #108]	@ (8007874 <HAL_TIM_IC_Start_IT+0x240>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d00e      	beq.n	800782a <HAL_TIM_IC_Start_IT+0x1f6>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a19      	ldr	r2, [pc, #100]	@ (8007878 <HAL_TIM_IC_Start_IT+0x244>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d009      	beq.n	800782a <HAL_TIM_IC_Start_IT+0x1f6>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a18      	ldr	r2, [pc, #96]	@ (800787c <HAL_TIM_IC_Start_IT+0x248>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d004      	beq.n	800782a <HAL_TIM_IC_Start_IT+0x1f6>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a16      	ldr	r2, [pc, #88]	@ (8007880 <HAL_TIM_IC_Start_IT+0x24c>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d111      	bne.n	800784e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f003 0307 	and.w	r3, r3, #7
 8007834:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	2b06      	cmp	r3, #6
 800783a:	d010      	beq.n	800785e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f042 0201 	orr.w	r2, r2, #1
 800784a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800784c:	e007      	b.n	800785e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f042 0201 	orr.w	r2, r2, #1
 800785c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800785e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007860:	4618      	mov	r0, r3
 8007862:	3710      	adds	r7, #16
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	40010000 	.word	0x40010000
 800786c:	40000400 	.word	0x40000400
 8007870:	40000800 	.word	0x40000800
 8007874:	40000c00 	.word	0x40000c00
 8007878:	40010400 	.word	0x40010400
 800787c:	40014000 	.word	0x40014000
 8007880:	40001800 	.word	0x40001800

08007884 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b086      	sub	sp, #24
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e097      	b.n	80079c8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d106      	bne.n	80078b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f7fc fd45 	bl	800433c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2202      	movs	r2, #2
 80078b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	6812      	ldr	r2, [r2, #0]
 80078c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078c8:	f023 0307 	bic.w	r3, r3, #7
 80078cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	3304      	adds	r3, #4
 80078d6:	4619      	mov	r1, r3
 80078d8:	4610      	mov	r0, r2
 80078da:	f000 fc89 	bl	80081f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	6a1b      	ldr	r3, [r3, #32]
 80078f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007906:	f023 0303 	bic.w	r3, r3, #3
 800790a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	689a      	ldr	r2, [r3, #8]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	021b      	lsls	r3, r3, #8
 8007916:	4313      	orrs	r3, r2
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	4313      	orrs	r3, r2
 800791c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007924:	f023 030c 	bic.w	r3, r3, #12
 8007928:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007930:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007934:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	68da      	ldr	r2, [r3, #12]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	69db      	ldr	r3, [r3, #28]
 800793e:	021b      	lsls	r3, r3, #8
 8007940:	4313      	orrs	r3, r2
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	4313      	orrs	r3, r2
 8007946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	011a      	lsls	r2, r3, #4
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	031b      	lsls	r3, r3, #12
 8007954:	4313      	orrs	r3, r2
 8007956:	693a      	ldr	r2, [r7, #16]
 8007958:	4313      	orrs	r3, r2
 800795a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007962:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800796a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	685a      	ldr	r2, [r3, #4]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	695b      	ldr	r3, [r3, #20]
 8007974:	011b      	lsls	r3, r3, #4
 8007976:	4313      	orrs	r3, r2
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	4313      	orrs	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2201      	movs	r2, #1
 80079c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3718      	adds	r7, #24
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80079e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80079e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80079f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80079f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d110      	bne.n	8007a22 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d102      	bne.n	8007a0c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a06:	7b7b      	ldrb	r3, [r7, #13]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d001      	beq.n	8007a10 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e069      	b.n	8007ae4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2202      	movs	r2, #2
 8007a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a20:	e031      	b.n	8007a86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	2b04      	cmp	r3, #4
 8007a26:	d110      	bne.n	8007a4a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d102      	bne.n	8007a34 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a2e:	7b3b      	ldrb	r3, [r7, #12]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d001      	beq.n	8007a38 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e055      	b.n	8007ae4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2202      	movs	r2, #2
 8007a44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a48:	e01d      	b.n	8007a86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d108      	bne.n	8007a62 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d105      	bne.n	8007a62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a56:	7b7b      	ldrb	r3, [r7, #13]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d102      	bne.n	8007a62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a5c:	7b3b      	ldrb	r3, [r7, #12]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d001      	beq.n	8007a66 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e03e      	b.n	8007ae4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2202      	movs	r2, #2
 8007a6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2202      	movs	r2, #2
 8007a72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2202      	movs	r2, #2
 8007a82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <HAL_TIM_Encoder_Start+0xc4>
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	2b04      	cmp	r3, #4
 8007a90:	d008      	beq.n	8007aa4 <HAL_TIM_Encoder_Start+0xd4>
 8007a92:	e00f      	b.n	8007ab4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 ffc7 	bl	8008a30 <TIM_CCxChannelCmd>
      break;
 8007aa2:	e016      	b.n	8007ad2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	2104      	movs	r1, #4
 8007aac:	4618      	mov	r0, r3
 8007aae:	f000 ffbf 	bl	8008a30 <TIM_CCxChannelCmd>
      break;
 8007ab2:	e00e      	b.n	8007ad2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	2100      	movs	r1, #0
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 ffb7 	bl	8008a30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	2104      	movs	r1, #4
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 ffb0 	bl	8008a30 <TIM_CCxChannelCmd>
      break;
 8007ad0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f042 0201 	orr.w	r2, r2, #1
 8007ae0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	f003 0302 	and.w	r3, r3, #2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d020      	beq.n	8007b50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f003 0302 	and.w	r3, r3, #2
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d01b      	beq.n	8007b50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f06f 0202 	mvn.w	r2, #2
 8007b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	f003 0303 	and.w	r3, r3, #3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7fb fe42 	bl	80037c0 <HAL_TIM_IC_CaptureCallback>
 8007b3c:	e005      	b.n	8007b4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fb38 	bl	80081b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fb3f 	bl	80081c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	f003 0304 	and.w	r3, r3, #4
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d020      	beq.n	8007b9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f003 0304 	and.w	r3, r3, #4
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d01b      	beq.n	8007b9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f06f 0204 	mvn.w	r2, #4
 8007b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2202      	movs	r2, #2
 8007b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7fb fe1c 	bl	80037c0 <HAL_TIM_IC_CaptureCallback>
 8007b88:	e005      	b.n	8007b96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fb12 	bl	80081b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fb19 	bl	80081c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	f003 0308 	and.w	r3, r3, #8
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d020      	beq.n	8007be8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f003 0308 	and.w	r3, r3, #8
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d01b      	beq.n	8007be8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f06f 0208 	mvn.w	r2, #8
 8007bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2204      	movs	r2, #4
 8007bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	f003 0303 	and.w	r3, r3, #3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d003      	beq.n	8007bd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7fb fdf6 	bl	80037c0 <HAL_TIM_IC_CaptureCallback>
 8007bd4:	e005      	b.n	8007be2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 faec 	bl	80081b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 faf3 	bl	80081c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	f003 0310 	and.w	r3, r3, #16
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d020      	beq.n	8007c34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f003 0310 	and.w	r3, r3, #16
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d01b      	beq.n	8007c34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f06f 0210 	mvn.w	r2, #16
 8007c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2208      	movs	r2, #8
 8007c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	69db      	ldr	r3, [r3, #28]
 8007c12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7fb fdd0 	bl	80037c0 <HAL_TIM_IC_CaptureCallback>
 8007c20:	e005      	b.n	8007c2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fac6 	bl	80081b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 facd 	bl	80081c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00c      	beq.n	8007c58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f003 0301 	and.w	r3, r3, #1
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d007      	beq.n	8007c58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f06f 0201 	mvn.w	r2, #1
 8007c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 faa4 	bl	80081a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00c      	beq.n	8007c7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d007      	beq.n	8007c7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 ffd8 	bl	8008c2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00c      	beq.n	8007ca0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d007      	beq.n	8007ca0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fa9e 	bl	80081dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	f003 0320 	and.w	r3, r3, #32
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00c      	beq.n	8007cc4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f003 0320 	and.w	r3, r3, #32
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d007      	beq.n	8007cc4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f06f 0220 	mvn.w	r2, #32
 8007cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 ffaa 	bl	8008c18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cc4:	bf00      	nop
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d101      	bne.n	8007cea <HAL_TIM_IC_ConfigChannel+0x1e>
 8007ce6:	2302      	movs	r3, #2
 8007ce8:	e088      	b.n	8007dfc <HAL_TIM_IC_ConfigChannel+0x130>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d11b      	bne.n	8007d30 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007d08:	f000 fcce 	bl	80086a8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	699a      	ldr	r2, [r3, #24]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 020c 	bic.w	r2, r2, #12
 8007d1a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6999      	ldr	r1, [r3, #24]
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	689a      	ldr	r2, [r3, #8]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	619a      	str	r2, [r3, #24]
 8007d2e:	e060      	b.n	8007df2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2b04      	cmp	r3, #4
 8007d34:	d11c      	bne.n	8007d70 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007d46:	f000 fd52 	bl	80087ee <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	699a      	ldr	r2, [r3, #24]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007d58:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	6999      	ldr	r1, [r3, #24]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	021a      	lsls	r2, r3, #8
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	430a      	orrs	r2, r1
 8007d6c:	619a      	str	r2, [r3, #24]
 8007d6e:	e040      	b.n	8007df2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b08      	cmp	r3, #8
 8007d74:	d11b      	bne.n	8007dae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007d86:	f000 fd9f 	bl	80088c8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	69da      	ldr	r2, [r3, #28]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f022 020c 	bic.w	r2, r2, #12
 8007d98:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	69d9      	ldr	r1, [r3, #28]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	689a      	ldr	r2, [r3, #8]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	430a      	orrs	r2, r1
 8007daa:	61da      	str	r2, [r3, #28]
 8007dac:	e021      	b.n	8007df2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2b0c      	cmp	r3, #12
 8007db2:	d11c      	bne.n	8007dee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007dc4:	f000 fdbc 	bl	8008940 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	69da      	ldr	r2, [r3, #28]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007dd6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	69d9      	ldr	r1, [r3, #28]
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	021a      	lsls	r2, r3, #8
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	430a      	orrs	r2, r1
 8007dea:	61da      	str	r2, [r3, #28]
 8007dec:	e001      	b.n	8007df2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3718      	adds	r7, #24
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e10:	2300      	movs	r3, #0
 8007e12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d101      	bne.n	8007e22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e1e:	2302      	movs	r3, #2
 8007e20:	e0ae      	b.n	8007f80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2b0c      	cmp	r3, #12
 8007e2e:	f200 809f 	bhi.w	8007f70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007e32:	a201      	add	r2, pc, #4	@ (adr r2, 8007e38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007e6d 	.word	0x08007e6d
 8007e3c:	08007f71 	.word	0x08007f71
 8007e40:	08007f71 	.word	0x08007f71
 8007e44:	08007f71 	.word	0x08007f71
 8007e48:	08007ead 	.word	0x08007ead
 8007e4c:	08007f71 	.word	0x08007f71
 8007e50:	08007f71 	.word	0x08007f71
 8007e54:	08007f71 	.word	0x08007f71
 8007e58:	08007eef 	.word	0x08007eef
 8007e5c:	08007f71 	.word	0x08007f71
 8007e60:	08007f71 	.word	0x08007f71
 8007e64:	08007f71 	.word	0x08007f71
 8007e68:	08007f2f 	.word	0x08007f2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68b9      	ldr	r1, [r7, #8]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 fa68 	bl	8008348 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	699a      	ldr	r2, [r3, #24]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f042 0208 	orr.w	r2, r2, #8
 8007e86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	699a      	ldr	r2, [r3, #24]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f022 0204 	bic.w	r2, r2, #4
 8007e96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6999      	ldr	r1, [r3, #24]
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	691a      	ldr	r2, [r3, #16]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	430a      	orrs	r2, r1
 8007ea8:	619a      	str	r2, [r3, #24]
      break;
 8007eaa:	e064      	b.n	8007f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68b9      	ldr	r1, [r7, #8]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 fab8 	bl	8008428 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	699a      	ldr	r2, [r3, #24]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	699a      	ldr	r2, [r3, #24]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6999      	ldr	r1, [r3, #24]
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	021a      	lsls	r2, r3, #8
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	430a      	orrs	r2, r1
 8007eea:	619a      	str	r2, [r3, #24]
      break;
 8007eec:	e043      	b.n	8007f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68b9      	ldr	r1, [r7, #8]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 fb0d 	bl	8008514 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	69da      	ldr	r2, [r3, #28]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f042 0208 	orr.w	r2, r2, #8
 8007f08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	69da      	ldr	r2, [r3, #28]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f022 0204 	bic.w	r2, r2, #4
 8007f18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69d9      	ldr	r1, [r3, #28]
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	691a      	ldr	r2, [r3, #16]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	61da      	str	r2, [r3, #28]
      break;
 8007f2c:	e023      	b.n	8007f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68b9      	ldr	r1, [r7, #8]
 8007f34:	4618      	mov	r0, r3
 8007f36:	f000 fb61 	bl	80085fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69da      	ldr	r2, [r3, #28]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	69da      	ldr	r2, [r3, #28]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	69d9      	ldr	r1, [r3, #28]
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	021a      	lsls	r2, r3, #8
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	61da      	str	r2, [r3, #28]
      break;
 8007f6e:	e002      	b.n	8007f76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	75fb      	strb	r3, [r7, #23]
      break;
 8007f74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3718      	adds	r7, #24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d101      	bne.n	8007fa4 <HAL_TIM_ConfigClockSource+0x1c>
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	e0b4      	b.n	800810e <HAL_TIM_ConfigClockSource+0x186>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fdc:	d03e      	beq.n	800805c <HAL_TIM_ConfigClockSource+0xd4>
 8007fde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fe2:	f200 8087 	bhi.w	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fe6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fea:	f000 8086 	beq.w	80080fa <HAL_TIM_ConfigClockSource+0x172>
 8007fee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ff2:	d87f      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ff4:	2b70      	cmp	r3, #112	@ 0x70
 8007ff6:	d01a      	beq.n	800802e <HAL_TIM_ConfigClockSource+0xa6>
 8007ff8:	2b70      	cmp	r3, #112	@ 0x70
 8007ffa:	d87b      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ffc:	2b60      	cmp	r3, #96	@ 0x60
 8007ffe:	d050      	beq.n	80080a2 <HAL_TIM_ConfigClockSource+0x11a>
 8008000:	2b60      	cmp	r3, #96	@ 0x60
 8008002:	d877      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 8008004:	2b50      	cmp	r3, #80	@ 0x50
 8008006:	d03c      	beq.n	8008082 <HAL_TIM_ConfigClockSource+0xfa>
 8008008:	2b50      	cmp	r3, #80	@ 0x50
 800800a:	d873      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 800800c:	2b40      	cmp	r3, #64	@ 0x40
 800800e:	d058      	beq.n	80080c2 <HAL_TIM_ConfigClockSource+0x13a>
 8008010:	2b40      	cmp	r3, #64	@ 0x40
 8008012:	d86f      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 8008014:	2b30      	cmp	r3, #48	@ 0x30
 8008016:	d064      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x15a>
 8008018:	2b30      	cmp	r3, #48	@ 0x30
 800801a:	d86b      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 800801c:	2b20      	cmp	r3, #32
 800801e:	d060      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x15a>
 8008020:	2b20      	cmp	r3, #32
 8008022:	d867      	bhi.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
 8008024:	2b00      	cmp	r3, #0
 8008026:	d05c      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x15a>
 8008028:	2b10      	cmp	r3, #16
 800802a:	d05a      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0x15a>
 800802c:	e062      	b.n	80080f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800803e:	f000 fcd7 	bl	80089f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008050:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	609a      	str	r2, [r3, #8]
      break;
 800805a:	e04f      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800806c:	f000 fcc0 	bl	80089f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	689a      	ldr	r2, [r3, #8]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800807e:	609a      	str	r2, [r3, #8]
      break;
 8008080:	e03c      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800808e:	461a      	mov	r2, r3
 8008090:	f000 fb7e 	bl	8008790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2150      	movs	r1, #80	@ 0x50
 800809a:	4618      	mov	r0, r3
 800809c:	f000 fc8d 	bl	80089ba <TIM_ITRx_SetConfig>
      break;
 80080a0:	e02c      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080ae:	461a      	mov	r2, r3
 80080b0:	f000 fbda 	bl	8008868 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2160      	movs	r1, #96	@ 0x60
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 fc7d 	bl	80089ba <TIM_ITRx_SetConfig>
      break;
 80080c0:	e01c      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080ce:	461a      	mov	r2, r3
 80080d0:	f000 fb5e 	bl	8008790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2140      	movs	r1, #64	@ 0x40
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 fc6d 	bl	80089ba <TIM_ITRx_SetConfig>
      break;
 80080e0:	e00c      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4619      	mov	r1, r3
 80080ec:	4610      	mov	r0, r2
 80080ee:	f000 fc64 	bl	80089ba <TIM_ITRx_SetConfig>
      break;
 80080f2:	e003      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	73fb      	strb	r3, [r7, #15]
      break;
 80080f8:	e000      	b.n	80080fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80080fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800810c:	7bfb      	ldrb	r3, [r7, #15]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
	...

08008118 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008122:	2300      	movs	r3, #0
 8008124:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b0c      	cmp	r3, #12
 800812a:	d831      	bhi.n	8008190 <HAL_TIM_ReadCapturedValue+0x78>
 800812c:	a201      	add	r2, pc, #4	@ (adr r2, 8008134 <HAL_TIM_ReadCapturedValue+0x1c>)
 800812e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008132:	bf00      	nop
 8008134:	08008169 	.word	0x08008169
 8008138:	08008191 	.word	0x08008191
 800813c:	08008191 	.word	0x08008191
 8008140:	08008191 	.word	0x08008191
 8008144:	08008173 	.word	0x08008173
 8008148:	08008191 	.word	0x08008191
 800814c:	08008191 	.word	0x08008191
 8008150:	08008191 	.word	0x08008191
 8008154:	0800817d 	.word	0x0800817d
 8008158:	08008191 	.word	0x08008191
 800815c:	08008191 	.word	0x08008191
 8008160:	08008191 	.word	0x08008191
 8008164:	08008187 	.word	0x08008187
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800816e:	60fb      	str	r3, [r7, #12]

      break;
 8008170:	e00f      	b.n	8008192 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008178:	60fb      	str	r3, [r7, #12]

      break;
 800817a:	e00a      	b.n	8008192 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008182:	60fb      	str	r3, [r7, #12]

      break;
 8008184:	e005      	b.n	8008192 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800818c:	60fb      	str	r3, [r7, #12]

      break;
 800818e:	e000      	b.n	8008192 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008190:	bf00      	nop
  }

  return tmpreg;
 8008192:	68fb      	ldr	r3, [r7, #12]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80081a8:	bf00      	nop
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081bc:	bf00      	nop
 80081be:	370c      	adds	r7, #12
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081d0:	bf00      	nop
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b085      	sub	sp, #20
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a46      	ldr	r2, [pc, #280]	@ (800831c <TIM_Base_SetConfig+0x12c>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d013      	beq.n	8008230 <TIM_Base_SetConfig+0x40>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800820e:	d00f      	beq.n	8008230 <TIM_Base_SetConfig+0x40>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a43      	ldr	r2, [pc, #268]	@ (8008320 <TIM_Base_SetConfig+0x130>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d00b      	beq.n	8008230 <TIM_Base_SetConfig+0x40>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a42      	ldr	r2, [pc, #264]	@ (8008324 <TIM_Base_SetConfig+0x134>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d007      	beq.n	8008230 <TIM_Base_SetConfig+0x40>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a41      	ldr	r2, [pc, #260]	@ (8008328 <TIM_Base_SetConfig+0x138>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d003      	beq.n	8008230 <TIM_Base_SetConfig+0x40>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a40      	ldr	r2, [pc, #256]	@ (800832c <TIM_Base_SetConfig+0x13c>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d108      	bne.n	8008242 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	4313      	orrs	r3, r2
 8008240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a35      	ldr	r2, [pc, #212]	@ (800831c <TIM_Base_SetConfig+0x12c>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d02b      	beq.n	80082a2 <TIM_Base_SetConfig+0xb2>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008250:	d027      	beq.n	80082a2 <TIM_Base_SetConfig+0xb2>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a32      	ldr	r2, [pc, #200]	@ (8008320 <TIM_Base_SetConfig+0x130>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d023      	beq.n	80082a2 <TIM_Base_SetConfig+0xb2>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a31      	ldr	r2, [pc, #196]	@ (8008324 <TIM_Base_SetConfig+0x134>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d01f      	beq.n	80082a2 <TIM_Base_SetConfig+0xb2>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a30      	ldr	r2, [pc, #192]	@ (8008328 <TIM_Base_SetConfig+0x138>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d01b      	beq.n	80082a2 <TIM_Base_SetConfig+0xb2>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a2f      	ldr	r2, [pc, #188]	@ (800832c <TIM_Base_SetConfig+0x13c>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d017      	beq.n	80082a2 <TIM_Base_SetConfig+0xb2>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a2e      	ldr	r2, [pc, #184]	@ (8008330 <TIM_Base_SetConfig+0x140>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d013      	beq.n	80082a2 <TIM_Base_SetConfig+0xb2>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a2d      	ldr	r2, [pc, #180]	@ (8008334 <TIM_Base_SetConfig+0x144>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d00f      	beq.n	80082a2 <TIM_Base_SetConfig+0xb2>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a2c      	ldr	r2, [pc, #176]	@ (8008338 <TIM_Base_SetConfig+0x148>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d00b      	beq.n	80082a2 <TIM_Base_SetConfig+0xb2>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a2b      	ldr	r2, [pc, #172]	@ (800833c <TIM_Base_SetConfig+0x14c>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d007      	beq.n	80082a2 <TIM_Base_SetConfig+0xb2>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a2a      	ldr	r2, [pc, #168]	@ (8008340 <TIM_Base_SetConfig+0x150>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d003      	beq.n	80082a2 <TIM_Base_SetConfig+0xb2>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a29      	ldr	r2, [pc, #164]	@ (8008344 <TIM_Base_SetConfig+0x154>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d108      	bne.n	80082b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	4313      	orrs	r3, r2
 80082c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	689a      	ldr	r2, [r3, #8]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a10      	ldr	r2, [pc, #64]	@ (800831c <TIM_Base_SetConfig+0x12c>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d003      	beq.n	80082e8 <TIM_Base_SetConfig+0xf8>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a12      	ldr	r2, [pc, #72]	@ (800832c <TIM_Base_SetConfig+0x13c>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d103      	bne.n	80082f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	691a      	ldr	r2, [r3, #16]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d105      	bne.n	800830e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	f023 0201 	bic.w	r2, r3, #1
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	611a      	str	r2, [r3, #16]
  }
}
 800830e:	bf00      	nop
 8008310:	3714      	adds	r7, #20
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	40010000 	.word	0x40010000
 8008320:	40000400 	.word	0x40000400
 8008324:	40000800 	.word	0x40000800
 8008328:	40000c00 	.word	0x40000c00
 800832c:	40010400 	.word	0x40010400
 8008330:	40014000 	.word	0x40014000
 8008334:	40014400 	.word	0x40014400
 8008338:	40014800 	.word	0x40014800
 800833c:	40001800 	.word	0x40001800
 8008340:	40001c00 	.word	0x40001c00
 8008344:	40002000 	.word	0x40002000

08008348 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008348:	b480      	push	{r7}
 800834a:	b087      	sub	sp, #28
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a1b      	ldr	r3, [r3, #32]
 800835c:	f023 0201 	bic.w	r2, r3, #1
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f023 0303 	bic.w	r3, r3, #3
 800837e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	4313      	orrs	r3, r2
 8008388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	f023 0302 	bic.w	r3, r3, #2
 8008390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	4313      	orrs	r3, r2
 800839a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a20      	ldr	r2, [pc, #128]	@ (8008420 <TIM_OC1_SetConfig+0xd8>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d003      	beq.n	80083ac <TIM_OC1_SetConfig+0x64>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a1f      	ldr	r2, [pc, #124]	@ (8008424 <TIM_OC1_SetConfig+0xdc>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d10c      	bne.n	80083c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	f023 0308 	bic.w	r3, r3, #8
 80083b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	f023 0304 	bic.w	r3, r3, #4
 80083c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a15      	ldr	r2, [pc, #84]	@ (8008420 <TIM_OC1_SetConfig+0xd8>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d003      	beq.n	80083d6 <TIM_OC1_SetConfig+0x8e>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a14      	ldr	r2, [pc, #80]	@ (8008424 <TIM_OC1_SetConfig+0xdc>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d111      	bne.n	80083fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80083e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	693a      	ldr	r2, [r7, #16]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	685a      	ldr	r2, [r3, #4]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	697a      	ldr	r2, [r7, #20]
 8008412:	621a      	str	r2, [r3, #32]
}
 8008414:	bf00      	nop
 8008416:	371c      	adds	r7, #28
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr
 8008420:	40010000 	.word	0x40010000
 8008424:	40010400 	.word	0x40010400

08008428 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008428:	b480      	push	{r7}
 800842a:	b087      	sub	sp, #28
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a1b      	ldr	r3, [r3, #32]
 800843c:	f023 0210 	bic.w	r2, r3, #16
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800845e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	021b      	lsls	r3, r3, #8
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	4313      	orrs	r3, r2
 800846a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	f023 0320 	bic.w	r3, r3, #32
 8008472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	011b      	lsls	r3, r3, #4
 800847a:	697a      	ldr	r2, [r7, #20]
 800847c:	4313      	orrs	r3, r2
 800847e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a22      	ldr	r2, [pc, #136]	@ (800850c <TIM_OC2_SetConfig+0xe4>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d003      	beq.n	8008490 <TIM_OC2_SetConfig+0x68>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a21      	ldr	r2, [pc, #132]	@ (8008510 <TIM_OC2_SetConfig+0xe8>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d10d      	bne.n	80084ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	011b      	lsls	r3, r3, #4
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a17      	ldr	r2, [pc, #92]	@ (800850c <TIM_OC2_SetConfig+0xe4>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d003      	beq.n	80084bc <TIM_OC2_SetConfig+0x94>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a16      	ldr	r2, [pc, #88]	@ (8008510 <TIM_OC2_SetConfig+0xe8>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d113      	bne.n	80084e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80084c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80084ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	695b      	ldr	r3, [r3, #20]
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	693a      	ldr	r2, [r7, #16]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	699b      	ldr	r3, [r3, #24]
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	697a      	ldr	r2, [r7, #20]
 80084fc:	621a      	str	r2, [r3, #32]
}
 80084fe:	bf00      	nop
 8008500:	371c      	adds	r7, #28
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
 800850a:	bf00      	nop
 800850c:	40010000 	.word	0x40010000
 8008510:	40010400 	.word	0x40010400

08008514 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008514:	b480      	push	{r7}
 8008516:	b087      	sub	sp, #28
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a1b      	ldr	r3, [r3, #32]
 8008522:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a1b      	ldr	r3, [r3, #32]
 8008528:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	69db      	ldr	r3, [r3, #28]
 800853a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f023 0303 	bic.w	r3, r3, #3
 800854a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	4313      	orrs	r3, r2
 8008554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800855c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	021b      	lsls	r3, r3, #8
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	4313      	orrs	r3, r2
 8008568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a21      	ldr	r2, [pc, #132]	@ (80085f4 <TIM_OC3_SetConfig+0xe0>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d003      	beq.n	800857a <TIM_OC3_SetConfig+0x66>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a20      	ldr	r2, [pc, #128]	@ (80085f8 <TIM_OC3_SetConfig+0xe4>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d10d      	bne.n	8008596 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	021b      	lsls	r3, r3, #8
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	4313      	orrs	r3, r2
 800858c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a16      	ldr	r2, [pc, #88]	@ (80085f4 <TIM_OC3_SetConfig+0xe0>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d003      	beq.n	80085a6 <TIM_OC3_SetConfig+0x92>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a15      	ldr	r2, [pc, #84]	@ (80085f8 <TIM_OC3_SetConfig+0xe4>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d113      	bne.n	80085ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80085b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	011b      	lsls	r3, r3, #4
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	4313      	orrs	r3, r2
 80085c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	699b      	ldr	r3, [r3, #24]
 80085c6:	011b      	lsls	r3, r3, #4
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	693a      	ldr	r2, [r7, #16]
 80085d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	685a      	ldr	r2, [r3, #4]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	697a      	ldr	r2, [r7, #20]
 80085e6:	621a      	str	r2, [r3, #32]
}
 80085e8:	bf00      	nop
 80085ea:	371c      	adds	r7, #28
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	40010000 	.word	0x40010000
 80085f8:	40010400 	.word	0x40010400

080085fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6a1b      	ldr	r3, [r3, #32]
 8008610:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800862a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	021b      	lsls	r3, r3, #8
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	4313      	orrs	r3, r2
 800863e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008646:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	031b      	lsls	r3, r3, #12
 800864e:	693a      	ldr	r2, [r7, #16]
 8008650:	4313      	orrs	r3, r2
 8008652:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a12      	ldr	r2, [pc, #72]	@ (80086a0 <TIM_OC4_SetConfig+0xa4>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d003      	beq.n	8008664 <TIM_OC4_SetConfig+0x68>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	4a11      	ldr	r2, [pc, #68]	@ (80086a4 <TIM_OC4_SetConfig+0xa8>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d109      	bne.n	8008678 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800866a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	019b      	lsls	r3, r3, #6
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	4313      	orrs	r3, r2
 8008676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	693a      	ldr	r2, [r7, #16]
 8008690:	621a      	str	r2, [r3, #32]
}
 8008692:	bf00      	nop
 8008694:	371c      	adds	r7, #28
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	40010000 	.word	0x40010000
 80086a4:	40010400 	.word	0x40010400

080086a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6a1b      	ldr	r3, [r3, #32]
 80086ba:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6a1b      	ldr	r3, [r3, #32]
 80086c0:	f023 0201 	bic.w	r2, r3, #1
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	4a28      	ldr	r2, [pc, #160]	@ (8008774 <TIM_TI1_SetConfig+0xcc>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d01b      	beq.n	800870e <TIM_TI1_SetConfig+0x66>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086dc:	d017      	beq.n	800870e <TIM_TI1_SetConfig+0x66>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	4a25      	ldr	r2, [pc, #148]	@ (8008778 <TIM_TI1_SetConfig+0xd0>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d013      	beq.n	800870e <TIM_TI1_SetConfig+0x66>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	4a24      	ldr	r2, [pc, #144]	@ (800877c <TIM_TI1_SetConfig+0xd4>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d00f      	beq.n	800870e <TIM_TI1_SetConfig+0x66>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	4a23      	ldr	r2, [pc, #140]	@ (8008780 <TIM_TI1_SetConfig+0xd8>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d00b      	beq.n	800870e <TIM_TI1_SetConfig+0x66>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	4a22      	ldr	r2, [pc, #136]	@ (8008784 <TIM_TI1_SetConfig+0xdc>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d007      	beq.n	800870e <TIM_TI1_SetConfig+0x66>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4a21      	ldr	r2, [pc, #132]	@ (8008788 <TIM_TI1_SetConfig+0xe0>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d003      	beq.n	800870e <TIM_TI1_SetConfig+0x66>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	4a20      	ldr	r2, [pc, #128]	@ (800878c <TIM_TI1_SetConfig+0xe4>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d101      	bne.n	8008712 <TIM_TI1_SetConfig+0x6a>
 800870e:	2301      	movs	r3, #1
 8008710:	e000      	b.n	8008714 <TIM_TI1_SetConfig+0x6c>
 8008712:	2300      	movs	r3, #0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d008      	beq.n	800872a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	f023 0303 	bic.w	r3, r3, #3
 800871e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4313      	orrs	r3, r2
 8008726:	617b      	str	r3, [r7, #20]
 8008728:	e003      	b.n	8008732 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	f043 0301 	orr.w	r3, r3, #1
 8008730:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008738:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	011b      	lsls	r3, r3, #4
 800873e:	b2db      	uxtb	r3, r3
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	4313      	orrs	r3, r2
 8008744:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	f023 030a 	bic.w	r3, r3, #10
 800874c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	f003 030a 	and.w	r3, r3, #10
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	4313      	orrs	r3, r2
 8008758:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	697a      	ldr	r2, [r7, #20]
 800875e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	693a      	ldr	r2, [r7, #16]
 8008764:	621a      	str	r2, [r3, #32]
}
 8008766:	bf00      	nop
 8008768:	371c      	adds	r7, #28
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	40010000 	.word	0x40010000
 8008778:	40000400 	.word	0x40000400
 800877c:	40000800 	.word	0x40000800
 8008780:	40000c00 	.word	0x40000c00
 8008784:	40010400 	.word	0x40010400
 8008788:	40014000 	.word	0x40014000
 800878c:	40001800 	.word	0x40001800

08008790 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008790:	b480      	push	{r7}
 8008792:	b087      	sub	sp, #28
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6a1b      	ldr	r3, [r3, #32]
 80087a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	f023 0201 	bic.w	r2, r3, #1
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	699b      	ldr	r3, [r3, #24]
 80087b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80087ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	011b      	lsls	r3, r3, #4
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f023 030a 	bic.w	r3, r3, #10
 80087cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087ce:	697a      	ldr	r2, [r7, #20]
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	697a      	ldr	r2, [r7, #20]
 80087e0:	621a      	str	r2, [r3, #32]
}
 80087e2:	bf00      	nop
 80087e4:	371c      	adds	r7, #28
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b087      	sub	sp, #28
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	60f8      	str	r0, [r7, #12]
 80087f6:	60b9      	str	r1, [r7, #8]
 80087f8:	607a      	str	r2, [r7, #4]
 80087fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6a1b      	ldr	r3, [r3, #32]
 8008800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	6a1b      	ldr	r3, [r3, #32]
 8008806:	f023 0210 	bic.w	r2, r3, #16
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800881a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	021b      	lsls	r3, r3, #8
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	4313      	orrs	r3, r2
 8008824:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800882c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	031b      	lsls	r3, r3, #12
 8008832:	b29b      	uxth	r3, r3
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	4313      	orrs	r3, r2
 8008838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008840:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	011b      	lsls	r3, r3, #4
 8008846:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800884a:	697a      	ldr	r2, [r7, #20]
 800884c:	4313      	orrs	r3, r2
 800884e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	697a      	ldr	r2, [r7, #20]
 800885a:	621a      	str	r2, [r3, #32]
}
 800885c:	bf00      	nop
 800885e:	371c      	adds	r7, #28
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008868:	b480      	push	{r7}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6a1b      	ldr	r3, [r3, #32]
 8008878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	f023 0210 	bic.w	r2, r3, #16
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	031b      	lsls	r3, r3, #12
 8008898:	693a      	ldr	r2, [r7, #16]
 800889a:	4313      	orrs	r3, r2
 800889c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80088a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	011b      	lsls	r3, r3, #4
 80088aa:	697a      	ldr	r2, [r7, #20]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	621a      	str	r2, [r3, #32]
}
 80088bc:	bf00      	nop
 80088be:	371c      	adds	r7, #28
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b087      	sub	sp, #28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	60b9      	str	r1, [r7, #8]
 80088d2:	607a      	str	r2, [r7, #4]
 80088d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6a1b      	ldr	r3, [r3, #32]
 80088e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	69db      	ldr	r3, [r3, #28]
 80088ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	f023 0303 	bic.w	r3, r3, #3
 80088f4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80088f6:	693a      	ldr	r2, [r7, #16]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008904:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	011b      	lsls	r3, r3, #4
 800890a:	b2db      	uxtb	r3, r3
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	4313      	orrs	r3, r2
 8008910:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008918:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	021b      	lsls	r3, r3, #8
 800891e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008922:	697a      	ldr	r2, [r7, #20]
 8008924:	4313      	orrs	r3, r2
 8008926:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	693a      	ldr	r2, [r7, #16]
 800892c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	697a      	ldr	r2, [r7, #20]
 8008932:	621a      	str	r2, [r3, #32]
}
 8008934:	bf00      	nop
 8008936:	371c      	adds	r7, #28
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008940:	b480      	push	{r7}
 8008942:	b087      	sub	sp, #28
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
 800894c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	6a1b      	ldr	r3, [r3, #32]
 8008952:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6a1b      	ldr	r3, [r3, #32]
 8008958:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	69db      	ldr	r3, [r3, #28]
 8008964:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800896c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	021b      	lsls	r3, r3, #8
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	4313      	orrs	r3, r2
 8008976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800897e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	031b      	lsls	r3, r3, #12
 8008984:	b29b      	uxth	r3, r3
 8008986:	693a      	ldr	r2, [r7, #16]
 8008988:	4313      	orrs	r3, r2
 800898a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008992:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	031b      	lsls	r3, r3, #12
 8008998:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	4313      	orrs	r3, r2
 80089a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	697a      	ldr	r2, [r7, #20]
 80089ac:	621a      	str	r2, [r3, #32]
}
 80089ae:	bf00      	nop
 80089b0:	371c      	adds	r7, #28
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b085      	sub	sp, #20
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	689b      	ldr	r3, [r3, #8]
 80089c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089d2:	683a      	ldr	r2, [r7, #0]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	f043 0307 	orr.w	r3, r3, #7
 80089dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	609a      	str	r2, [r3, #8]
}
 80089e4:	bf00      	nop
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b087      	sub	sp, #28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
 80089fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	021a      	lsls	r2, r3, #8
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	431a      	orrs	r2, r3
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	697a      	ldr	r2, [r7, #20]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	697a      	ldr	r2, [r7, #20]
 8008a22:	609a      	str	r2, [r3, #8]
}
 8008a24:	bf00      	nop
 8008a26:	371c      	adds	r7, #28
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b087      	sub	sp, #28
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	f003 031f 	and.w	r3, r3, #31
 8008a42:	2201      	movs	r2, #1
 8008a44:	fa02 f303 	lsl.w	r3, r2, r3
 8008a48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6a1a      	ldr	r2, [r3, #32]
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	43db      	mvns	r3, r3
 8008a52:	401a      	ands	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6a1a      	ldr	r2, [r3, #32]
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	f003 031f 	and.w	r3, r3, #31
 8008a62:	6879      	ldr	r1, [r7, #4]
 8008a64:	fa01 f303 	lsl.w	r3, r1, r3
 8008a68:	431a      	orrs	r2, r3
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	621a      	str	r2, [r3, #32]
}
 8008a6e:	bf00      	nop
 8008a70:	371c      	adds	r7, #28
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr
	...

08008a7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d101      	bne.n	8008a94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a90:	2302      	movs	r3, #2
 8008a92:	e05a      	b.n	8008b4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68fa      	ldr	r2, [r7, #12]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a21      	ldr	r2, [pc, #132]	@ (8008b58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d022      	beq.n	8008b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ae0:	d01d      	beq.n	8008b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8008b5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d018      	beq.n	8008b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a1b      	ldr	r2, [pc, #108]	@ (8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d013      	beq.n	8008b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a1a      	ldr	r2, [pc, #104]	@ (8008b64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d00e      	beq.n	8008b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a18      	ldr	r2, [pc, #96]	@ (8008b68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d009      	beq.n	8008b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a17      	ldr	r2, [pc, #92]	@ (8008b6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d004      	beq.n	8008b1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a15      	ldr	r2, [pc, #84]	@ (8008b70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d10c      	bne.n	8008b38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68ba      	ldr	r2, [r7, #8]
 8008b36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3714      	adds	r7, #20
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	40010000 	.word	0x40010000
 8008b5c:	40000400 	.word	0x40000400
 8008b60:	40000800 	.word	0x40000800
 8008b64:	40000c00 	.word	0x40000c00
 8008b68:	40010400 	.word	0x40010400
 8008b6c:	40014000 	.word	0x40014000
 8008b70:	40001800 	.word	0x40001800

08008b74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d101      	bne.n	8008b90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	e03d      	b.n	8008c0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	695b      	ldr	r3, [r3, #20]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	4313      	orrs	r3, r2
 8008bf8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d101      	bne.n	8008c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e042      	b.n	8008cd8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d106      	bne.n	8008c6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f7fb fc3c 	bl	80044e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2224      	movs	r2, #36	@ 0x24
 8008c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68da      	ldr	r2, [r3, #12]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008c82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 fdbd 	bl	8009804 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	691a      	ldr	r2, [r3, #16]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	695a      	ldr	r2, [r3, #20]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008ca8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68da      	ldr	r2, [r3, #12]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008cb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2220      	movs	r2, #32
 8008cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2220      	movs	r2, #32
 8008ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3708      	adds	r7, #8
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b08a      	sub	sp, #40	@ 0x28
 8008ce4:	af02      	add	r7, sp, #8
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	603b      	str	r3, [r7, #0]
 8008cec:	4613      	mov	r3, r2
 8008cee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	2b20      	cmp	r3, #32
 8008cfe:	d175      	bne.n	8008dec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d002      	beq.n	8008d0c <HAL_UART_Transmit+0x2c>
 8008d06:	88fb      	ldrh	r3, [r7, #6]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d101      	bne.n	8008d10 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e06e      	b.n	8008dee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2221      	movs	r2, #33	@ 0x21
 8008d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d1e:	f7fb fddd 	bl	80048dc <HAL_GetTick>
 8008d22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	88fa      	ldrh	r2, [r7, #6]
 8008d28:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	88fa      	ldrh	r2, [r7, #6]
 8008d2e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d38:	d108      	bne.n	8008d4c <HAL_UART_Transmit+0x6c>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	691b      	ldr	r3, [r3, #16]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d104      	bne.n	8008d4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008d42:	2300      	movs	r3, #0
 8008d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	61bb      	str	r3, [r7, #24]
 8008d4a:	e003      	b.n	8008d54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d50:	2300      	movs	r3, #0
 8008d52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008d54:	e02e      	b.n	8008db4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	9300      	str	r3, [sp, #0]
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	2180      	movs	r1, #128	@ 0x80
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f000 fb1f 	bl	80093a4 <UART_WaitOnFlagUntilTimeout>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d005      	beq.n	8008d78 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2220      	movs	r2, #32
 8008d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008d74:	2303      	movs	r3, #3
 8008d76:	e03a      	b.n	8008dee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10b      	bne.n	8008d96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	881b      	ldrh	r3, [r3, #0]
 8008d82:	461a      	mov	r2, r3
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	3302      	adds	r3, #2
 8008d92:	61bb      	str	r3, [r7, #24]
 8008d94:	e007      	b.n	8008da6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	781a      	ldrb	r2, [r3, #0]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	3301      	adds	r3, #1
 8008da4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	3b01      	subs	r3, #1
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1cb      	bne.n	8008d56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	2140      	movs	r1, #64	@ 0x40
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f000 faeb 	bl	80093a4 <UART_WaitOnFlagUntilTimeout>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d005      	beq.n	8008de0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2220      	movs	r2, #32
 8008dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	e006      	b.n	8008dee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2220      	movs	r2, #32
 8008de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008de8:	2300      	movs	r3, #0
 8008dea:	e000      	b.n	8008dee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008dec:	2302      	movs	r3, #2
  }
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3720      	adds	r7, #32
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b084      	sub	sp, #16
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	60f8      	str	r0, [r7, #12]
 8008dfe:	60b9      	str	r1, [r7, #8]
 8008e00:	4613      	mov	r3, r2
 8008e02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	2b20      	cmp	r3, #32
 8008e0e:	d112      	bne.n	8008e36 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d002      	beq.n	8008e1c <HAL_UART_Receive_IT+0x26>
 8008e16:	88fb      	ldrh	r3, [r7, #6]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d101      	bne.n	8008e20 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e00b      	b.n	8008e38 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2200      	movs	r2, #0
 8008e24:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008e26:	88fb      	ldrh	r3, [r7, #6]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	68b9      	ldr	r1, [r7, #8]
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f000 fb12 	bl	8009456 <UART_Start_Receive_IT>
 8008e32:	4603      	mov	r3, r0
 8008e34:	e000      	b.n	8008e38 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008e36:	2302      	movs	r3, #2
  }
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b0ba      	sub	sp, #232	@ 0xe8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	695b      	ldr	r3, [r3, #20]
 8008e62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008e66:	2300      	movs	r3, #0
 8008e68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e76:	f003 030f 	and.w	r3, r3, #15
 8008e7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008e7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d10f      	bne.n	8008ea6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e8a:	f003 0320 	and.w	r3, r3, #32
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d009      	beq.n	8008ea6 <HAL_UART_IRQHandler+0x66>
 8008e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e96:	f003 0320 	and.w	r3, r3, #32
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d003      	beq.n	8008ea6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fbf2 	bl	8009688 <UART_Receive_IT>
      return;
 8008ea4:	e25b      	b.n	800935e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	f000 80de 	beq.w	800906c <HAL_UART_IRQHandler+0x22c>
 8008eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008eb4:	f003 0301 	and.w	r3, r3, #1
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d106      	bne.n	8008eca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ec0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f000 80d1 	beq.w	800906c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00b      	beq.n	8008eee <HAL_UART_IRQHandler+0xae>
 8008ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d005      	beq.n	8008eee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ee6:	f043 0201 	orr.w	r2, r3, #1
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ef2:	f003 0304 	and.w	r3, r3, #4
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00b      	beq.n	8008f12 <HAL_UART_IRQHandler+0xd2>
 8008efa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008efe:	f003 0301 	and.w	r3, r3, #1
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d005      	beq.n	8008f12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f0a:	f043 0202 	orr.w	r2, r3, #2
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f16:	f003 0302 	and.w	r3, r3, #2
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00b      	beq.n	8008f36 <HAL_UART_IRQHandler+0xf6>
 8008f1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d005      	beq.n	8008f36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f2e:	f043 0204 	orr.w	r2, r3, #4
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f3a:	f003 0308 	and.w	r3, r3, #8
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d011      	beq.n	8008f66 <HAL_UART_IRQHandler+0x126>
 8008f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f46:	f003 0320 	and.w	r3, r3, #32
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d105      	bne.n	8008f5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d005      	beq.n	8008f66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f5e:	f043 0208 	orr.w	r2, r3, #8
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 81f2 	beq.w	8009354 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f74:	f003 0320 	and.w	r3, r3, #32
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d008      	beq.n	8008f8e <HAL_UART_IRQHandler+0x14e>
 8008f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f80:	f003 0320 	and.w	r3, r3, #32
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d002      	beq.n	8008f8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 fb7d 	bl	8009688 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	695b      	ldr	r3, [r3, #20]
 8008f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f98:	2b40      	cmp	r3, #64	@ 0x40
 8008f9a:	bf0c      	ite	eq
 8008f9c:	2301      	moveq	r3, #1
 8008f9e:	2300      	movne	r3, #0
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008faa:	f003 0308 	and.w	r3, r3, #8
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d103      	bne.n	8008fba <HAL_UART_IRQHandler+0x17a>
 8008fb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d04f      	beq.n	800905a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 fa85 	bl	80094ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	695b      	ldr	r3, [r3, #20]
 8008fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fca:	2b40      	cmp	r3, #64	@ 0x40
 8008fcc:	d141      	bne.n	8009052 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	3314      	adds	r3, #20
 8008fd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008fdc:	e853 3f00 	ldrex	r3, [r3]
 8008fe0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008fe4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008fe8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	3314      	adds	r3, #20
 8008ff6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008ffa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008ffe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009002:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009006:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800900a:	e841 2300 	strex	r3, r2, [r1]
 800900e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009012:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1d9      	bne.n	8008fce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800901e:	2b00      	cmp	r3, #0
 8009020:	d013      	beq.n	800904a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009026:	4a7e      	ldr	r2, [pc, #504]	@ (8009220 <HAL_UART_IRQHandler+0x3e0>)
 8009028:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800902e:	4618      	mov	r0, r3
 8009030:	f7fc fa05 	bl	800543e <HAL_DMA_Abort_IT>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d016      	beq.n	8009068 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800903e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009044:	4610      	mov	r0, r2
 8009046:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009048:	e00e      	b.n	8009068 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f994 	bl	8009378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009050:	e00a      	b.n	8009068 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f990 	bl	8009378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009058:	e006      	b.n	8009068 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 f98c 	bl	8009378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009066:	e175      	b.n	8009354 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009068:	bf00      	nop
    return;
 800906a:	e173      	b.n	8009354 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009070:	2b01      	cmp	r3, #1
 8009072:	f040 814f 	bne.w	8009314 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800907a:	f003 0310 	and.w	r3, r3, #16
 800907e:	2b00      	cmp	r3, #0
 8009080:	f000 8148 	beq.w	8009314 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009088:	f003 0310 	and.w	r3, r3, #16
 800908c:	2b00      	cmp	r3, #0
 800908e:	f000 8141 	beq.w	8009314 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009092:	2300      	movs	r3, #0
 8009094:	60bb      	str	r3, [r7, #8]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	60bb      	str	r3, [r7, #8]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	60bb      	str	r3, [r7, #8]
 80090a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	695b      	ldr	r3, [r3, #20]
 80090ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090b2:	2b40      	cmp	r3, #64	@ 0x40
 80090b4:	f040 80b6 	bne.w	8009224 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80090c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 8145 	beq.w	8009358 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80090d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090d6:	429a      	cmp	r2, r3
 80090d8:	f080 813e 	bcs.w	8009358 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090e8:	69db      	ldr	r3, [r3, #28]
 80090ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090ee:	f000 8088 	beq.w	8009202 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	330c      	adds	r3, #12
 80090f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009100:	e853 3f00 	ldrex	r3, [r3]
 8009104:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009108:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800910c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009110:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	330c      	adds	r3, #12
 800911a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800911e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009122:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009126:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800912a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800912e:	e841 2300 	strex	r3, r2, [r1]
 8009132:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009136:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800913a:	2b00      	cmp	r3, #0
 800913c:	d1d9      	bne.n	80090f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3314      	adds	r3, #20
 8009144:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009146:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009148:	e853 3f00 	ldrex	r3, [r3]
 800914c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800914e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009150:	f023 0301 	bic.w	r3, r3, #1
 8009154:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	3314      	adds	r3, #20
 800915e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009162:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009166:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009168:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800916a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800916e:	e841 2300 	strex	r3, r2, [r1]
 8009172:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009174:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1e1      	bne.n	800913e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	3314      	adds	r3, #20
 8009180:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009182:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009184:	e853 3f00 	ldrex	r3, [r3]
 8009188:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800918a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800918c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009190:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	3314      	adds	r3, #20
 800919a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800919e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80091a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80091a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80091a6:	e841 2300 	strex	r3, r2, [r1]
 80091aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80091ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1e3      	bne.n	800917a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2220      	movs	r2, #32
 80091b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	330c      	adds	r3, #12
 80091c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091ca:	e853 3f00 	ldrex	r3, [r3]
 80091ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80091d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091d2:	f023 0310 	bic.w	r3, r3, #16
 80091d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	330c      	adds	r3, #12
 80091e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80091e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80091e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091ec:	e841 2300 	strex	r3, r2, [r1]
 80091f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80091f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1e3      	bne.n	80091c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7fc f8ae 	bl	800535e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2202      	movs	r2, #2
 8009206:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009210:	b29b      	uxth	r3, r3
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	b29b      	uxth	r3, r3
 8009216:	4619      	mov	r1, r3
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 f8b7 	bl	800938c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800921e:	e09b      	b.n	8009358 <HAL_UART_IRQHandler+0x518>
 8009220:	08009591 	.word	0x08009591
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800922c:	b29b      	uxth	r3, r3
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009238:	b29b      	uxth	r3, r3
 800923a:	2b00      	cmp	r3, #0
 800923c:	f000 808e 	beq.w	800935c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009240:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009244:	2b00      	cmp	r3, #0
 8009246:	f000 8089 	beq.w	800935c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	330c      	adds	r3, #12
 8009250:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009254:	e853 3f00 	ldrex	r3, [r3]
 8009258:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800925a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800925c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009260:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	330c      	adds	r3, #12
 800926a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800926e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009270:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009272:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009274:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009276:	e841 2300 	strex	r3, r2, [r1]
 800927a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800927c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1e3      	bne.n	800924a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	3314      	adds	r3, #20
 8009288:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800928c:	e853 3f00 	ldrex	r3, [r3]
 8009290:	623b      	str	r3, [r7, #32]
   return(result);
 8009292:	6a3b      	ldr	r3, [r7, #32]
 8009294:	f023 0301 	bic.w	r3, r3, #1
 8009298:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	3314      	adds	r3, #20
 80092a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80092a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80092a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092ae:	e841 2300 	strex	r3, r2, [r1]
 80092b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d1e3      	bne.n	8009282 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2220      	movs	r2, #32
 80092be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	330c      	adds	r3, #12
 80092ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	e853 3f00 	ldrex	r3, [r3]
 80092d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f023 0310 	bic.w	r3, r3, #16
 80092de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	330c      	adds	r3, #12
 80092e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80092ec:	61fa      	str	r2, [r7, #28]
 80092ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f0:	69b9      	ldr	r1, [r7, #24]
 80092f2:	69fa      	ldr	r2, [r7, #28]
 80092f4:	e841 2300 	strex	r3, r2, [r1]
 80092f8:	617b      	str	r3, [r7, #20]
   return(result);
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1e3      	bne.n	80092c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2202      	movs	r2, #2
 8009304:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009306:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800930a:	4619      	mov	r1, r3
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f83d 	bl	800938c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009312:	e023      	b.n	800935c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009318:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800931c:	2b00      	cmp	r3, #0
 800931e:	d009      	beq.n	8009334 <HAL_UART_IRQHandler+0x4f4>
 8009320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009328:	2b00      	cmp	r3, #0
 800932a:	d003      	beq.n	8009334 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 f943 	bl	80095b8 <UART_Transmit_IT>
    return;
 8009332:	e014      	b.n	800935e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800933c:	2b00      	cmp	r3, #0
 800933e:	d00e      	beq.n	800935e <HAL_UART_IRQHandler+0x51e>
 8009340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009348:	2b00      	cmp	r3, #0
 800934a:	d008      	beq.n	800935e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f983 	bl	8009658 <UART_EndTransmit_IT>
    return;
 8009352:	e004      	b.n	800935e <HAL_UART_IRQHandler+0x51e>
    return;
 8009354:	bf00      	nop
 8009356:	e002      	b.n	800935e <HAL_UART_IRQHandler+0x51e>
      return;
 8009358:	bf00      	nop
 800935a:	e000      	b.n	800935e <HAL_UART_IRQHandler+0x51e>
      return;
 800935c:	bf00      	nop
  }
}
 800935e:	37e8      	adds	r7, #232	@ 0xe8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800936c:	bf00      	nop
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	460b      	mov	r3, r1
 8009396:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b086      	sub	sp, #24
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	60b9      	str	r1, [r7, #8]
 80093ae:	603b      	str	r3, [r7, #0]
 80093b0:	4613      	mov	r3, r2
 80093b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093b4:	e03b      	b.n	800942e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093b6:	6a3b      	ldr	r3, [r7, #32]
 80093b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093bc:	d037      	beq.n	800942e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093be:	f7fb fa8d 	bl	80048dc <HAL_GetTick>
 80093c2:	4602      	mov	r2, r0
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	6a3a      	ldr	r2, [r7, #32]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d302      	bcc.n	80093d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80093ce:	6a3b      	ldr	r3, [r7, #32]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d101      	bne.n	80093d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80093d4:	2303      	movs	r3, #3
 80093d6:	e03a      	b.n	800944e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	f003 0304 	and.w	r3, r3, #4
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d023      	beq.n	800942e <UART_WaitOnFlagUntilTimeout+0x8a>
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	2b80      	cmp	r3, #128	@ 0x80
 80093ea:	d020      	beq.n	800942e <UART_WaitOnFlagUntilTimeout+0x8a>
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	2b40      	cmp	r3, #64	@ 0x40
 80093f0:	d01d      	beq.n	800942e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f003 0308 	and.w	r3, r3, #8
 80093fc:	2b08      	cmp	r3, #8
 80093fe:	d116      	bne.n	800942e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009400:	2300      	movs	r3, #0
 8009402:	617b      	str	r3, [r7, #20]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	617b      	str	r3, [r7, #20]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	617b      	str	r3, [r7, #20]
 8009414:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	f000 f857 	bl	80094ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2208      	movs	r2, #8
 8009420:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2200      	movs	r2, #0
 8009426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e00f      	b.n	800944e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	4013      	ands	r3, r2
 8009438:	68ba      	ldr	r2, [r7, #8]
 800943a:	429a      	cmp	r2, r3
 800943c:	bf0c      	ite	eq
 800943e:	2301      	moveq	r3, #1
 8009440:	2300      	movne	r3, #0
 8009442:	b2db      	uxtb	r3, r3
 8009444:	461a      	mov	r2, r3
 8009446:	79fb      	ldrb	r3, [r7, #7]
 8009448:	429a      	cmp	r2, r3
 800944a:	d0b4      	beq.n	80093b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800944c:	2300      	movs	r3, #0
}
 800944e:	4618      	mov	r0, r3
 8009450:	3718      	adds	r7, #24
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009456:	b480      	push	{r7}
 8009458:	b085      	sub	sp, #20
 800945a:	af00      	add	r7, sp, #0
 800945c:	60f8      	str	r0, [r7, #12]
 800945e:	60b9      	str	r1, [r7, #8]
 8009460:	4613      	mov	r3, r2
 8009462:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	88fa      	ldrh	r2, [r7, #6]
 800946e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	88fa      	ldrh	r2, [r7, #6]
 8009474:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2222      	movs	r2, #34	@ 0x22
 8009480:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d007      	beq.n	800949c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68da      	ldr	r2, [r3, #12]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800949a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	695a      	ldr	r2, [r3, #20]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f042 0201 	orr.w	r2, r2, #1
 80094aa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68da      	ldr	r2, [r3, #12]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f042 0220 	orr.w	r2, r2, #32
 80094ba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3714      	adds	r7, #20
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr

080094ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094ca:	b480      	push	{r7}
 80094cc:	b095      	sub	sp, #84	@ 0x54
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	330c      	adds	r3, #12
 80094d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094dc:	e853 3f00 	ldrex	r3, [r3]
 80094e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80094e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	330c      	adds	r3, #12
 80094f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80094f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80094f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80094f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80094fa:	e841 2300 	strex	r3, r2, [r1]
 80094fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1e5      	bne.n	80094d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	3314      	adds	r3, #20
 800950c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950e:	6a3b      	ldr	r3, [r7, #32]
 8009510:	e853 3f00 	ldrex	r3, [r3]
 8009514:	61fb      	str	r3, [r7, #28]
   return(result);
 8009516:	69fb      	ldr	r3, [r7, #28]
 8009518:	f023 0301 	bic.w	r3, r3, #1
 800951c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	3314      	adds	r3, #20
 8009524:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009526:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009528:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800952c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800952e:	e841 2300 	strex	r3, r2, [r1]
 8009532:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1e5      	bne.n	8009506 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800953e:	2b01      	cmp	r3, #1
 8009540:	d119      	bne.n	8009576 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	330c      	adds	r3, #12
 8009548:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	e853 3f00 	ldrex	r3, [r3]
 8009550:	60bb      	str	r3, [r7, #8]
   return(result);
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	f023 0310 	bic.w	r3, r3, #16
 8009558:	647b      	str	r3, [r7, #68]	@ 0x44
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	330c      	adds	r3, #12
 8009560:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009562:	61ba      	str	r2, [r7, #24]
 8009564:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009566:	6979      	ldr	r1, [r7, #20]
 8009568:	69ba      	ldr	r2, [r7, #24]
 800956a:	e841 2300 	strex	r3, r2, [r1]
 800956e:	613b      	str	r3, [r7, #16]
   return(result);
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1e5      	bne.n	8009542 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2220      	movs	r2, #32
 800957a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009584:	bf00      	nop
 8009586:	3754      	adds	r7, #84	@ 0x54
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800959c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2200      	movs	r2, #0
 80095a8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f7ff fee4 	bl	8009378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095b0:	bf00      	nop
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	2b21      	cmp	r3, #33	@ 0x21
 80095ca:	d13e      	bne.n	800964a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095d4:	d114      	bne.n	8009600 <UART_Transmit_IT+0x48>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d110      	bne.n	8009600 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6a1b      	ldr	r3, [r3, #32]
 80095e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	881b      	ldrh	r3, [r3, #0]
 80095e8:	461a      	mov	r2, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a1b      	ldr	r3, [r3, #32]
 80095f8:	1c9a      	adds	r2, r3, #2
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	621a      	str	r2, [r3, #32]
 80095fe:	e008      	b.n	8009612 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6a1b      	ldr	r3, [r3, #32]
 8009604:	1c59      	adds	r1, r3, #1
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	6211      	str	r1, [r2, #32]
 800960a:	781a      	ldrb	r2, [r3, #0]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009616:	b29b      	uxth	r3, r3
 8009618:	3b01      	subs	r3, #1
 800961a:	b29b      	uxth	r3, r3
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	4619      	mov	r1, r3
 8009620:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009622:	2b00      	cmp	r3, #0
 8009624:	d10f      	bne.n	8009646 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	68da      	ldr	r2, [r3, #12]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009634:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	68da      	ldr	r2, [r3, #12]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009644:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009646:	2300      	movs	r3, #0
 8009648:	e000      	b.n	800964c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800964a:	2302      	movs	r3, #2
  }
}
 800964c:	4618      	mov	r0, r3
 800964e:	3714      	adds	r7, #20
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68da      	ldr	r2, [r3, #12]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800966e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2220      	movs	r2, #32
 8009674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f7ff fe73 	bl	8009364 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b08c      	sub	sp, #48	@ 0x30
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009696:	b2db      	uxtb	r3, r3
 8009698:	2b22      	cmp	r3, #34	@ 0x22
 800969a:	f040 80ae 	bne.w	80097fa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096a6:	d117      	bne.n	80096d8 <UART_Receive_IT+0x50>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d113      	bne.n	80096d8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80096b0:	2300      	movs	r3, #0
 80096b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096d0:	1c9a      	adds	r2, r3, #2
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80096d6:	e026      	b.n	8009726 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80096de:	2300      	movs	r3, #0
 80096e0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096ea:	d007      	beq.n	80096fc <UART_Receive_IT+0x74>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d10a      	bne.n	800970a <UART_Receive_IT+0x82>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d106      	bne.n	800970a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	b2da      	uxtb	r2, r3
 8009704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009706:	701a      	strb	r2, [r3, #0]
 8009708:	e008      	b.n	800971c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	b2db      	uxtb	r3, r3
 8009712:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009716:	b2da      	uxtb	r2, r3
 8009718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800971a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009720:	1c5a      	adds	r2, r3, #1
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800972a:	b29b      	uxth	r3, r3
 800972c:	3b01      	subs	r3, #1
 800972e:	b29b      	uxth	r3, r3
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	4619      	mov	r1, r3
 8009734:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009736:	2b00      	cmp	r3, #0
 8009738:	d15d      	bne.n	80097f6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68da      	ldr	r2, [r3, #12]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f022 0220 	bic.w	r2, r2, #32
 8009748:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68da      	ldr	r2, [r3, #12]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009758:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	695a      	ldr	r2, [r3, #20]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f022 0201 	bic.w	r2, r2, #1
 8009768:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2220      	movs	r2, #32
 800976e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2200      	movs	r2, #0
 8009776:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800977c:	2b01      	cmp	r3, #1
 800977e:	d135      	bne.n	80097ec <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	330c      	adds	r3, #12
 800978c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	e853 3f00 	ldrex	r3, [r3]
 8009794:	613b      	str	r3, [r7, #16]
   return(result);
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	f023 0310 	bic.w	r3, r3, #16
 800979c:	627b      	str	r3, [r7, #36]	@ 0x24
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	330c      	adds	r3, #12
 80097a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097a6:	623a      	str	r2, [r7, #32]
 80097a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097aa:	69f9      	ldr	r1, [r7, #28]
 80097ac:	6a3a      	ldr	r2, [r7, #32]
 80097ae:	e841 2300 	strex	r3, r2, [r1]
 80097b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1e5      	bne.n	8009786 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 0310 	and.w	r3, r3, #16
 80097c4:	2b10      	cmp	r3, #16
 80097c6:	d10a      	bne.n	80097de <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80097c8:	2300      	movs	r3, #0
 80097ca:	60fb      	str	r3, [r7, #12]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	60fb      	str	r3, [r7, #12]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	60fb      	str	r3, [r7, #12]
 80097dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80097e2:	4619      	mov	r1, r3
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f7ff fdd1 	bl	800938c <HAL_UARTEx_RxEventCallback>
 80097ea:	e002      	b.n	80097f2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f7f9 ff9b 	bl	8003728 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80097f2:	2300      	movs	r3, #0
 80097f4:	e002      	b.n	80097fc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80097f6:	2300      	movs	r3, #0
 80097f8:	e000      	b.n	80097fc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80097fa:	2302      	movs	r3, #2
  }
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3730      	adds	r7, #48	@ 0x30
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009808:	b0c0      	sub	sp, #256	@ 0x100
 800980a:	af00      	add	r7, sp, #0
 800980c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	691b      	ldr	r3, [r3, #16]
 8009818:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800981c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009820:	68d9      	ldr	r1, [r3, #12]
 8009822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	ea40 0301 	orr.w	r3, r0, r1
 800982c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800982e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009832:	689a      	ldr	r2, [r3, #8]
 8009834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	431a      	orrs	r2, r3
 800983c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009840:	695b      	ldr	r3, [r3, #20]
 8009842:	431a      	orrs	r2, r3
 8009844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009848:	69db      	ldr	r3, [r3, #28]
 800984a:	4313      	orrs	r3, r2
 800984c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800985c:	f021 010c 	bic.w	r1, r1, #12
 8009860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800986a:	430b      	orrs	r3, r1
 800986c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800986e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800987a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800987e:	6999      	ldr	r1, [r3, #24]
 8009880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	ea40 0301 	orr.w	r3, r0, r1
 800988a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800988c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	4b8f      	ldr	r3, [pc, #572]	@ (8009ad0 <UART_SetConfig+0x2cc>)
 8009894:	429a      	cmp	r2, r3
 8009896:	d005      	beq.n	80098a4 <UART_SetConfig+0xa0>
 8009898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	4b8d      	ldr	r3, [pc, #564]	@ (8009ad4 <UART_SetConfig+0x2d0>)
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d104      	bne.n	80098ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80098a4:	f7fd fc7e 	bl	80071a4 <HAL_RCC_GetPCLK2Freq>
 80098a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80098ac:	e003      	b.n	80098b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80098ae:	f7fd fc65 	bl	800717c <HAL_RCC_GetPCLK1Freq>
 80098b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098ba:	69db      	ldr	r3, [r3, #28]
 80098bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098c0:	f040 810c 	bne.w	8009adc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80098c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098c8:	2200      	movs	r2, #0
 80098ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80098ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80098d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80098d6:	4622      	mov	r2, r4
 80098d8:	462b      	mov	r3, r5
 80098da:	1891      	adds	r1, r2, r2
 80098dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80098de:	415b      	adcs	r3, r3
 80098e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80098e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80098e6:	4621      	mov	r1, r4
 80098e8:	eb12 0801 	adds.w	r8, r2, r1
 80098ec:	4629      	mov	r1, r5
 80098ee:	eb43 0901 	adc.w	r9, r3, r1
 80098f2:	f04f 0200 	mov.w	r2, #0
 80098f6:	f04f 0300 	mov.w	r3, #0
 80098fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80098fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009902:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009906:	4690      	mov	r8, r2
 8009908:	4699      	mov	r9, r3
 800990a:	4623      	mov	r3, r4
 800990c:	eb18 0303 	adds.w	r3, r8, r3
 8009910:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009914:	462b      	mov	r3, r5
 8009916:	eb49 0303 	adc.w	r3, r9, r3
 800991a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800991e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800992a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800992e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009932:	460b      	mov	r3, r1
 8009934:	18db      	adds	r3, r3, r3
 8009936:	653b      	str	r3, [r7, #80]	@ 0x50
 8009938:	4613      	mov	r3, r2
 800993a:	eb42 0303 	adc.w	r3, r2, r3
 800993e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009940:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009944:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009948:	f7f7 f99e 	bl	8000c88 <__aeabi_uldivmod>
 800994c:	4602      	mov	r2, r0
 800994e:	460b      	mov	r3, r1
 8009950:	4b61      	ldr	r3, [pc, #388]	@ (8009ad8 <UART_SetConfig+0x2d4>)
 8009952:	fba3 2302 	umull	r2, r3, r3, r2
 8009956:	095b      	lsrs	r3, r3, #5
 8009958:	011c      	lsls	r4, r3, #4
 800995a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800995e:	2200      	movs	r2, #0
 8009960:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009964:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009968:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800996c:	4642      	mov	r2, r8
 800996e:	464b      	mov	r3, r9
 8009970:	1891      	adds	r1, r2, r2
 8009972:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009974:	415b      	adcs	r3, r3
 8009976:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009978:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800997c:	4641      	mov	r1, r8
 800997e:	eb12 0a01 	adds.w	sl, r2, r1
 8009982:	4649      	mov	r1, r9
 8009984:	eb43 0b01 	adc.w	fp, r3, r1
 8009988:	f04f 0200 	mov.w	r2, #0
 800998c:	f04f 0300 	mov.w	r3, #0
 8009990:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009994:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009998:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800999c:	4692      	mov	sl, r2
 800999e:	469b      	mov	fp, r3
 80099a0:	4643      	mov	r3, r8
 80099a2:	eb1a 0303 	adds.w	r3, sl, r3
 80099a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80099aa:	464b      	mov	r3, r9
 80099ac:	eb4b 0303 	adc.w	r3, fp, r3
 80099b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80099b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80099c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80099c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80099c8:	460b      	mov	r3, r1
 80099ca:	18db      	adds	r3, r3, r3
 80099cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80099ce:	4613      	mov	r3, r2
 80099d0:	eb42 0303 	adc.w	r3, r2, r3
 80099d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80099d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80099da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80099de:	f7f7 f953 	bl	8000c88 <__aeabi_uldivmod>
 80099e2:	4602      	mov	r2, r0
 80099e4:	460b      	mov	r3, r1
 80099e6:	4611      	mov	r1, r2
 80099e8:	4b3b      	ldr	r3, [pc, #236]	@ (8009ad8 <UART_SetConfig+0x2d4>)
 80099ea:	fba3 2301 	umull	r2, r3, r3, r1
 80099ee:	095b      	lsrs	r3, r3, #5
 80099f0:	2264      	movs	r2, #100	@ 0x64
 80099f2:	fb02 f303 	mul.w	r3, r2, r3
 80099f6:	1acb      	subs	r3, r1, r3
 80099f8:	00db      	lsls	r3, r3, #3
 80099fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80099fe:	4b36      	ldr	r3, [pc, #216]	@ (8009ad8 <UART_SetConfig+0x2d4>)
 8009a00:	fba3 2302 	umull	r2, r3, r3, r2
 8009a04:	095b      	lsrs	r3, r3, #5
 8009a06:	005b      	lsls	r3, r3, #1
 8009a08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009a0c:	441c      	add	r4, r3
 8009a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a12:	2200      	movs	r2, #0
 8009a14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009a18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009a1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009a20:	4642      	mov	r2, r8
 8009a22:	464b      	mov	r3, r9
 8009a24:	1891      	adds	r1, r2, r2
 8009a26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009a28:	415b      	adcs	r3, r3
 8009a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009a30:	4641      	mov	r1, r8
 8009a32:	1851      	adds	r1, r2, r1
 8009a34:	6339      	str	r1, [r7, #48]	@ 0x30
 8009a36:	4649      	mov	r1, r9
 8009a38:	414b      	adcs	r3, r1
 8009a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a3c:	f04f 0200 	mov.w	r2, #0
 8009a40:	f04f 0300 	mov.w	r3, #0
 8009a44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009a48:	4659      	mov	r1, fp
 8009a4a:	00cb      	lsls	r3, r1, #3
 8009a4c:	4651      	mov	r1, sl
 8009a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a52:	4651      	mov	r1, sl
 8009a54:	00ca      	lsls	r2, r1, #3
 8009a56:	4610      	mov	r0, r2
 8009a58:	4619      	mov	r1, r3
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	4642      	mov	r2, r8
 8009a5e:	189b      	adds	r3, r3, r2
 8009a60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a64:	464b      	mov	r3, r9
 8009a66:	460a      	mov	r2, r1
 8009a68:	eb42 0303 	adc.w	r3, r2, r3
 8009a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009a7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009a80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009a84:	460b      	mov	r3, r1
 8009a86:	18db      	adds	r3, r3, r3
 8009a88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	eb42 0303 	adc.w	r3, r2, r3
 8009a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009a96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009a9a:	f7f7 f8f5 	bl	8000c88 <__aeabi_uldivmod>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ad8 <UART_SetConfig+0x2d4>)
 8009aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8009aa8:	095b      	lsrs	r3, r3, #5
 8009aaa:	2164      	movs	r1, #100	@ 0x64
 8009aac:	fb01 f303 	mul.w	r3, r1, r3
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	00db      	lsls	r3, r3, #3
 8009ab4:	3332      	adds	r3, #50	@ 0x32
 8009ab6:	4a08      	ldr	r2, [pc, #32]	@ (8009ad8 <UART_SetConfig+0x2d4>)
 8009ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8009abc:	095b      	lsrs	r3, r3, #5
 8009abe:	f003 0207 	and.w	r2, r3, #7
 8009ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4422      	add	r2, r4
 8009aca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009acc:	e106      	b.n	8009cdc <UART_SetConfig+0x4d8>
 8009ace:	bf00      	nop
 8009ad0:	40011000 	.word	0x40011000
 8009ad4:	40011400 	.word	0x40011400
 8009ad8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009adc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009ae6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009aea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009aee:	4642      	mov	r2, r8
 8009af0:	464b      	mov	r3, r9
 8009af2:	1891      	adds	r1, r2, r2
 8009af4:	6239      	str	r1, [r7, #32]
 8009af6:	415b      	adcs	r3, r3
 8009af8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009afa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009afe:	4641      	mov	r1, r8
 8009b00:	1854      	adds	r4, r2, r1
 8009b02:	4649      	mov	r1, r9
 8009b04:	eb43 0501 	adc.w	r5, r3, r1
 8009b08:	f04f 0200 	mov.w	r2, #0
 8009b0c:	f04f 0300 	mov.w	r3, #0
 8009b10:	00eb      	lsls	r3, r5, #3
 8009b12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009b16:	00e2      	lsls	r2, r4, #3
 8009b18:	4614      	mov	r4, r2
 8009b1a:	461d      	mov	r5, r3
 8009b1c:	4643      	mov	r3, r8
 8009b1e:	18e3      	adds	r3, r4, r3
 8009b20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009b24:	464b      	mov	r3, r9
 8009b26:	eb45 0303 	adc.w	r3, r5, r3
 8009b2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009b3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009b3e:	f04f 0200 	mov.w	r2, #0
 8009b42:	f04f 0300 	mov.w	r3, #0
 8009b46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	008b      	lsls	r3, r1, #2
 8009b4e:	4621      	mov	r1, r4
 8009b50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b54:	4621      	mov	r1, r4
 8009b56:	008a      	lsls	r2, r1, #2
 8009b58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009b5c:	f7f7 f894 	bl	8000c88 <__aeabi_uldivmod>
 8009b60:	4602      	mov	r2, r0
 8009b62:	460b      	mov	r3, r1
 8009b64:	4b60      	ldr	r3, [pc, #384]	@ (8009ce8 <UART_SetConfig+0x4e4>)
 8009b66:	fba3 2302 	umull	r2, r3, r3, r2
 8009b6a:	095b      	lsrs	r3, r3, #5
 8009b6c:	011c      	lsls	r4, r3, #4
 8009b6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b72:	2200      	movs	r2, #0
 8009b74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009b78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009b7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009b80:	4642      	mov	r2, r8
 8009b82:	464b      	mov	r3, r9
 8009b84:	1891      	adds	r1, r2, r2
 8009b86:	61b9      	str	r1, [r7, #24]
 8009b88:	415b      	adcs	r3, r3
 8009b8a:	61fb      	str	r3, [r7, #28]
 8009b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009b90:	4641      	mov	r1, r8
 8009b92:	1851      	adds	r1, r2, r1
 8009b94:	6139      	str	r1, [r7, #16]
 8009b96:	4649      	mov	r1, r9
 8009b98:	414b      	adcs	r3, r1
 8009b9a:	617b      	str	r3, [r7, #20]
 8009b9c:	f04f 0200 	mov.w	r2, #0
 8009ba0:	f04f 0300 	mov.w	r3, #0
 8009ba4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ba8:	4659      	mov	r1, fp
 8009baa:	00cb      	lsls	r3, r1, #3
 8009bac:	4651      	mov	r1, sl
 8009bae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bb2:	4651      	mov	r1, sl
 8009bb4:	00ca      	lsls	r2, r1, #3
 8009bb6:	4610      	mov	r0, r2
 8009bb8:	4619      	mov	r1, r3
 8009bba:	4603      	mov	r3, r0
 8009bbc:	4642      	mov	r2, r8
 8009bbe:	189b      	adds	r3, r3, r2
 8009bc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009bc4:	464b      	mov	r3, r9
 8009bc6:	460a      	mov	r2, r1
 8009bc8:	eb42 0303 	adc.w	r3, r2, r3
 8009bcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009bda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009bdc:	f04f 0200 	mov.w	r2, #0
 8009be0:	f04f 0300 	mov.w	r3, #0
 8009be4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009be8:	4649      	mov	r1, r9
 8009bea:	008b      	lsls	r3, r1, #2
 8009bec:	4641      	mov	r1, r8
 8009bee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bf2:	4641      	mov	r1, r8
 8009bf4:	008a      	lsls	r2, r1, #2
 8009bf6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009bfa:	f7f7 f845 	bl	8000c88 <__aeabi_uldivmod>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	460b      	mov	r3, r1
 8009c02:	4611      	mov	r1, r2
 8009c04:	4b38      	ldr	r3, [pc, #224]	@ (8009ce8 <UART_SetConfig+0x4e4>)
 8009c06:	fba3 2301 	umull	r2, r3, r3, r1
 8009c0a:	095b      	lsrs	r3, r3, #5
 8009c0c:	2264      	movs	r2, #100	@ 0x64
 8009c0e:	fb02 f303 	mul.w	r3, r2, r3
 8009c12:	1acb      	subs	r3, r1, r3
 8009c14:	011b      	lsls	r3, r3, #4
 8009c16:	3332      	adds	r3, #50	@ 0x32
 8009c18:	4a33      	ldr	r2, [pc, #204]	@ (8009ce8 <UART_SetConfig+0x4e4>)
 8009c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c1e:	095b      	lsrs	r3, r3, #5
 8009c20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009c24:	441c      	add	r4, r3
 8009c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8009c2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009c30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009c34:	4642      	mov	r2, r8
 8009c36:	464b      	mov	r3, r9
 8009c38:	1891      	adds	r1, r2, r2
 8009c3a:	60b9      	str	r1, [r7, #8]
 8009c3c:	415b      	adcs	r3, r3
 8009c3e:	60fb      	str	r3, [r7, #12]
 8009c40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c44:	4641      	mov	r1, r8
 8009c46:	1851      	adds	r1, r2, r1
 8009c48:	6039      	str	r1, [r7, #0]
 8009c4a:	4649      	mov	r1, r9
 8009c4c:	414b      	adcs	r3, r1
 8009c4e:	607b      	str	r3, [r7, #4]
 8009c50:	f04f 0200 	mov.w	r2, #0
 8009c54:	f04f 0300 	mov.w	r3, #0
 8009c58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009c5c:	4659      	mov	r1, fp
 8009c5e:	00cb      	lsls	r3, r1, #3
 8009c60:	4651      	mov	r1, sl
 8009c62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c66:	4651      	mov	r1, sl
 8009c68:	00ca      	lsls	r2, r1, #3
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	4603      	mov	r3, r0
 8009c70:	4642      	mov	r2, r8
 8009c72:	189b      	adds	r3, r3, r2
 8009c74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c76:	464b      	mov	r3, r9
 8009c78:	460a      	mov	r2, r1
 8009c7a:	eb42 0303 	adc.w	r3, r2, r3
 8009c7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8009c8c:	f04f 0200 	mov.w	r2, #0
 8009c90:	f04f 0300 	mov.w	r3, #0
 8009c94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009c98:	4649      	mov	r1, r9
 8009c9a:	008b      	lsls	r3, r1, #2
 8009c9c:	4641      	mov	r1, r8
 8009c9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ca2:	4641      	mov	r1, r8
 8009ca4:	008a      	lsls	r2, r1, #2
 8009ca6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009caa:	f7f6 ffed 	bl	8000c88 <__aeabi_uldivmod>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ce8 <UART_SetConfig+0x4e4>)
 8009cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8009cb8:	095b      	lsrs	r3, r3, #5
 8009cba:	2164      	movs	r1, #100	@ 0x64
 8009cbc:	fb01 f303 	mul.w	r3, r1, r3
 8009cc0:	1ad3      	subs	r3, r2, r3
 8009cc2:	011b      	lsls	r3, r3, #4
 8009cc4:	3332      	adds	r3, #50	@ 0x32
 8009cc6:	4a08      	ldr	r2, [pc, #32]	@ (8009ce8 <UART_SetConfig+0x4e4>)
 8009cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ccc:	095b      	lsrs	r3, r3, #5
 8009cce:	f003 020f 	and.w	r2, r3, #15
 8009cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4422      	add	r2, r4
 8009cda:	609a      	str	r2, [r3, #8]
}
 8009cdc:	bf00      	nop
 8009cde:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ce8:	51eb851f 	.word	0x51eb851f

08009cec <_ICM20948_SelectUserBank>:

#include "ICM20948.h"

static float accel_offset[3] = {0,0,0};

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b08a      	sub	sp, #40	@ 0x28
 8009cf0:	af04      	add	r7, sp, #16
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	607a      	str	r2, [r7, #4]
 8009cf8:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	011b      	lsls	r3, r3, #4
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8009d08:	7afb      	ldrb	r3, [r7, #11]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d101      	bne.n	8009d12 <_ICM20948_SelectUserBank+0x26>
 8009d0e:	2368      	movs	r3, #104	@ 0x68
 8009d10:	e000      	b.n	8009d14 <_ICM20948_SelectUserBank+0x28>
 8009d12:	2369      	movs	r3, #105	@ 0x69
 8009d14:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 8009d16:	7dbb      	ldrb	r3, [r7, #22]
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	005b      	lsls	r3, r3, #1
 8009d1c:	b299      	uxth	r1, r3
 8009d1e:	230a      	movs	r3, #10
 8009d20:	9302      	str	r3, [sp, #8]
 8009d22:	2301      	movs	r3, #1
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	f107 0315 	add.w	r3, r7, #21
 8009d2a:	9300      	str	r3, [sp, #0]
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	227f      	movs	r2, #127	@ 0x7f
 8009d30:	68f8      	ldr	r0, [r7, #12]
 8009d32:	f7fb feeb 	bl	8005b0c <HAL_I2C_Mem_Write>
 8009d36:	4603      	mov	r3, r0
 8009d38:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8009d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3718      	adds	r7, #24
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b088      	sub	sp, #32
 8009d48:	af04      	add	r7, sp, #16
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	4608      	mov	r0, r1
 8009d4e:	4611      	mov	r1, r2
 8009d50:	461a      	mov	r2, r3
 8009d52:	4603      	mov	r3, r0
 8009d54:	70fb      	strb	r3, [r7, #3]
 8009d56:	460b      	mov	r3, r1
 8009d58:	70bb      	strb	r3, [r7, #2]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8009d62:	78fb      	ldrb	r3, [r7, #3]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d101      	bne.n	8009d6c <_ICM20948_WriteByte+0x28>
 8009d68:	2368      	movs	r3, #104	@ 0x68
 8009d6a:	e000      	b.n	8009d6e <_ICM20948_WriteByte+0x2a>
 8009d6c:	2369      	movs	r3, #105	@ 0x69
 8009d6e:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8009d70:	7bbb      	ldrb	r3, [r7, #14]
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	005b      	lsls	r3, r3, #1
 8009d76:	b299      	uxth	r1, r3
 8009d78:	78bb      	ldrb	r3, [r7, #2]
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	230a      	movs	r3, #10
 8009d7e:	9302      	str	r3, [sp, #8]
 8009d80:	2301      	movs	r3, #1
 8009d82:	9301      	str	r3, [sp, #4]
 8009d84:	1c7b      	adds	r3, r7, #1
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	2301      	movs	r3, #1
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f7fb febe 	bl	8005b0c <HAL_I2C_Mem_Write>
 8009d90:	4603      	mov	r3, r0
 8009d92:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8009d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <_ICM20948_BrustRead>:
			10);

	return status;
}

HAL_StatusTypeDef _ICM20948_BrustRead(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const startAddress, uint16_t const amountOfRegistersToRead, uint8_t * readData) {
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b088      	sub	sp, #32
 8009da2:	af04      	add	r7, sp, #16
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	4608      	mov	r0, r1
 8009da8:	4611      	mov	r1, r2
 8009daa:	461a      	mov	r2, r3
 8009dac:	4603      	mov	r3, r0
 8009dae:	70fb      	strb	r3, [r7, #3]
 8009db0:	460b      	mov	r3, r1
 8009db2:	70bb      	strb	r3, [r7, #2]
 8009db4:	4613      	mov	r3, r2
 8009db6:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8009db8:	2300      	movs	r3, #0
 8009dba:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8009dbc:	78fb      	ldrb	r3, [r7, #3]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d101      	bne.n	8009dc6 <_ICM20948_BrustRead+0x28>
 8009dc2:	2368      	movs	r3, #104	@ 0x68
 8009dc4:	e000      	b.n	8009dc8 <_ICM20948_BrustRead+0x2a>
 8009dc6:	2369      	movs	r3, #105	@ 0x69
 8009dc8:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(
 8009dca:	7bbb      	ldrb	r3, [r7, #14]
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	005b      	lsls	r3, r3, #1
 8009dd0:	b299      	uxth	r1, r3
 8009dd2:	78bb      	ldrb	r3, [r7, #2]
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	230a      	movs	r3, #10
 8009dd8:	9302      	str	r3, [sp, #8]
 8009dda:	883b      	ldrh	r3, [r7, #0]
 8009ddc:	9301      	str	r3, [sp, #4]
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	9300      	str	r3, [sp, #0]
 8009de2:	2301      	movs	r3, #1
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f7fb ff8b 	bl	8005d00 <HAL_I2C_Mem_Read>
 8009dea:	4603      	mov	r3, r0
 8009dec:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			readData,
			amountOfRegistersToRead * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8009dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3710      	adds	r7, #16
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <_ICM20948_BurstWrite>:

HAL_StatusTypeDef _ICM20948_BurstWrite(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const startAddress, uint16_t const amountOfRegistersToWrite, uint8_t * writeData) {
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b088      	sub	sp, #32
 8009dfc:	af04      	add	r7, sp, #16
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	4608      	mov	r0, r1
 8009e02:	4611      	mov	r1, r2
 8009e04:	461a      	mov	r2, r3
 8009e06:	4603      	mov	r3, r0
 8009e08:	70fb      	strb	r3, [r7, #3]
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	70bb      	strb	r3, [r7, #2]
 8009e0e:	4613      	mov	r3, r2
 8009e10:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8009e12:	2300      	movs	r3, #0
 8009e14:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8009e16:	78fb      	ldrb	r3, [r7, #3]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d101      	bne.n	8009e20 <_ICM20948_BurstWrite+0x28>
 8009e1c:	2368      	movs	r3, #104	@ 0x68
 8009e1e:	e000      	b.n	8009e22 <_ICM20948_BurstWrite+0x2a>
 8009e20:	2369      	movs	r3, #105	@ 0x69
 8009e22:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8009e24:	7bbb      	ldrb	r3, [r7, #14]
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	005b      	lsls	r3, r3, #1
 8009e2a:	b299      	uxth	r1, r3
 8009e2c:	78bb      	ldrb	r3, [r7, #2]
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	230a      	movs	r3, #10
 8009e32:	9302      	str	r3, [sp, #8]
 8009e34:	883b      	ldrh	r3, [r7, #0]
 8009e36:	9301      	str	r3, [sp, #4]
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	9300      	str	r3, [sp, #0]
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f7fb fe64 	bl	8005b0c <HAL_I2C_Mem_Write>
 8009e44:	4603      	mov	r3, r0
 8009e46:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			writeData,
			amountOfRegistersToWrite * I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8009e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <_AK09916_WriteByte>:

HAL_StatusTypeDef _AK09916_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const registerAddress, uint8_t writeData) {
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b088      	sub	sp, #32
 8009e56:	af04      	add	r7, sp, #16
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	70fb      	strb	r3, [r7, #3]
 8009e5e:	4613      	mov	r3, r2
 8009e60:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 8009e62:	2300      	movs	r3, #0
 8009e64:	73fb      	strb	r3, [r7, #15]

	status = HAL_I2C_Mem_Write(
 8009e66:	78fb      	ldrb	r3, [r7, #3]
 8009e68:	b29a      	uxth	r2, r3
 8009e6a:	230a      	movs	r3, #10
 8009e6c:	9302      	str	r3, [sp, #8]
 8009e6e:	2301      	movs	r3, #1
 8009e70:	9301      	str	r3, [sp, #4]
 8009e72:	1cbb      	adds	r3, r7, #2
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	2301      	movs	r3, #1
 8009e78:	2118      	movs	r1, #24
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f7fb fe46 	bl	8005b0c <HAL_I2C_Mem_Write>
 8009e80:	4603      	mov	r3, r0
 8009e82:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8009e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <ICM20948_init>:
	}
	
	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, uint8_t const selectAccelSensitivity) {
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b084      	sub	sp, #16
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
 8009e96:	4608      	mov	r0, r1
 8009e98:	4611      	mov	r1, r2
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	70fb      	strb	r3, [r7, #3]
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	70bb      	strb	r3, [r7, #2]
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8009eac:	78fb      	ldrb	r3, [r7, #3]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7ff ff1a 	bl	8009cec <_ICM20948_SelectUserBank>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	73fb      	strb	r3, [r7, #15]

	do{
	status = _ICM20948_WriteByte(
 8009ebc:	78f9      	ldrb	r1, [r7, #3]
 8009ebe:	2380      	movs	r3, #128	@ 0x80
 8009ec0:	2206      	movs	r2, #6
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f7ff ff3e 	bl	8009d44 <_ICM20948_WriteByte>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);
	}
	while(status!=HAL_OK);
 8009ecc:	7bfb      	ldrb	r3, [r7, #15]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1f4      	bne.n	8009ebc <ICM20948_init+0x2e>


	HAL_Delay(200);
 8009ed2:	20c8      	movs	r0, #200	@ 0xc8
 8009ed4:	f7fa fd0e 	bl	80048f4 <HAL_Delay>

	status = _ICM20948_WriteByte(
 8009ed8:	78f9      	ldrb	r1, [r7, #3]
 8009eda:	2301      	movs	r3, #1
 8009edc:	2206      	movs	r2, #6
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f7ff ff30 	bl	8009d44 <_ICM20948_WriteByte>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_AUTO_SELECT_CLOCK);

	//enable both gyroscope and accelerometer
	status = _ICM20948_WriteByte(
 8009ee8:	78f9      	ldrb	r1, [r7, #3]
 8009eea:	2300      	movs	r3, #0
 8009eec:	2207      	movs	r2, #7
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f7ff ff28 	bl	8009d44 <_ICM20948_WriteByte>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); // For some reason this needs to be tested

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 8009ef8:	78fb      	ldrb	r3, [r7, #3]
 8009efa:	2202      	movs	r2, #2
 8009efc:	4619      	mov	r1, r3
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f7ff fef4 	bl	8009cec <_ICM20948_SelectUserBank>
 8009f04:	4603      	mov	r3, r0
 8009f06:	73fb      	strb	r3, [r7, #15]
	//gyroscope sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			0 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << GYRO_FS_SEL_BIT|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 8009f08:	78bb      	ldrb	r3, [r7, #2]
 8009f0a:	005b      	lsls	r3, r3, #1
 8009f0c:	b25b      	sxtb	r3, r3
 8009f0e:	f043 0301 	orr.w	r3, r3, #1
 8009f12:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	78f9      	ldrb	r1, [r7, #3]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f7ff ff12 	bl	8009d44 <_ICM20948_WriteByte>
 8009f20:	4603      	mov	r3, r0
 8009f22:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 8009f24:	78f9      	ldrb	r1, [r7, #3]
 8009f26:	2304      	movs	r3, #4
 8009f28:	2200      	movs	r2, #0
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f7ff ff0a 	bl	8009d44 <_ICM20948_WriteByte>
 8009f30:	4603      	mov	r3, r0
 8009f32:	73fb      	strb	r3, [r7, #15]
	//accelerometer sampling rate settings.
	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_CONFIG__REGISTER,
			1 << ACCEL_DLPFCFG_BIT|selectAccelSensitivity << ACCEL_FS_SEL_BIT|0x01 << ACCEL_FCHOICE_BIT);
 8009f34:	787b      	ldrb	r3, [r7, #1]
 8009f36:	005b      	lsls	r3, r3, #1
 8009f38:	b25b      	sxtb	r3, r3
 8009f3a:	f043 0309 	orr.w	r3, r3, #9
 8009f3e:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	78f9      	ldrb	r1, [r7, #3]
 8009f44:	2214      	movs	r2, #20
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f7ff fefc 	bl	8009d44 <_ICM20948_WriteByte>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	73fb      	strb	r3, [r7, #15]
	status = _ICM20948_WriteByte(
 8009f50:	78f9      	ldrb	r1, [r7, #3]
 8009f52:	2304      	movs	r3, #4
 8009f54:	2211      	movs	r2, #17
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f7ff fef4 	bl	8009d44 <_ICM20948_WriteByte>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
			4);


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8009f60:	78fb      	ldrb	r3, [r7, #3]
 8009f62:	2200      	movs	r2, #0
 8009f64:	4619      	mov	r1, r3
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f7ff fec0 	bl	8009cec <_ICM20948_SelectUserBank>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 8009f70:	78f9      	ldrb	r1, [r7, #3]
 8009f72:	2302      	movs	r3, #2
 8009f74:	220f      	movs	r2, #15
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f7ff fee4 	bl	8009d44 <_ICM20948_WriteByte>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

	status = _AK09916_WriteByte(
 8009f80:	2208      	movs	r2, #8
 8009f82:	2131      	movs	r1, #49	@ 0x31
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f7ff ff64 	bl	8009e52 <_AK09916_WriteByte>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	73fb      	strb	r3, [r7, #15]
			hi2c,
			AK09916__CNTL2__REGISTER,
			0x08);
}
 8009f8e:	bf00      	nop
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
	...

08009f98 <ICM20948_readGyroscope_all>:
			break;
	}

}

void ICM20948_readGyroscope_all(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity, float reading[3]) {
 8009f98:	b590      	push	{r4, r7, lr}
 8009f9a:	b08f      	sub	sp, #60	@ 0x3c
 8009f9c:	af02      	add	r7, sp, #8
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	607b      	str	r3, [r7, #4]
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	72fb      	strb	r3, [r7, #11]
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[6];

	//_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__GYRO_XOUT_H__REGISTER, 6, readData);
 8009faa:	7af9      	ldrb	r1, [r7, #11]
 8009fac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	2306      	movs	r3, #6
 8009fb4:	2233      	movs	r2, #51	@ 0x33
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	f7ff fef1 	bl	8009d9e <_ICM20948_BrustRead>

	int16_t rD_int[3];
		rD_int[X] = readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE];
 8009fbc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009fc0:	021b      	lsls	r3, r3, #8
 8009fc2:	b21a      	sxth	r2, r3
 8009fc4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009fc8:	b21b      	sxth	r3, r3
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	b21b      	sxth	r3, r3
 8009fce:	843b      	strh	r3, [r7, #32]
		rD_int[Y] = readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE];
 8009fd0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009fd4:	021b      	lsls	r3, r3, #8
 8009fd6:	b21a      	sxth	r2, r3
 8009fd8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009fdc:	b21b      	sxth	r3, r3
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	b21b      	sxth	r3, r3
 8009fe2:	847b      	strh	r3, [r7, #34]	@ 0x22
		rD_int[Z] = readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE];
 8009fe4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009fe8:	021b      	lsls	r3, r3, #8
 8009fea:	b21a      	sxth	r2, r3
 8009fec:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8009ff0:	b21b      	sxth	r3, r3
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	b21b      	sxth	r3, r3
 8009ff6:	84bb      	strh	r3, [r7, #36]	@ 0x24

		float rD[3];
		rD[X] = (float) rD_int[X];
 8009ff8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009ffc:	ee07 3a90 	vmov	s15, r3
 800a000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a004:	edc7 7a05 	vstr	s15, [r7, #20]
		rD[Y] = (float) rD_int[Y];
 800a008:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800a00c:	ee07 3a90 	vmov	s15, r3
 800a010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a014:	edc7 7a06 	vstr	s15, [r7, #24]
		rD[Z] = (float) rD_int[Z];
 800a018:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800a01c:	ee07 3a90 	vmov	s15, r3
 800a020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a024:	edc7 7a07 	vstr	s15, [r7, #28]

	//*gyroZ = (float) -reading;
	switch (selectGyroSensitivity) {
 800a028:	7abb      	ldrb	r3, [r7, #10]
 800a02a:	2b03      	cmp	r3, #3
 800a02c:	f200 80bc 	bhi.w	800a1a8 <ICM20948_readGyroscope_all+0x210>
 800a030:	a201      	add	r2, pc, #4	@ (adr r2, 800a038 <ICM20948_readGyroscope_all+0xa0>)
 800a032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a036:	bf00      	nop
 800a038:	0800a049 	.word	0x0800a049
 800a03c:	0800a085 	.word	0x0800a085
 800a040:	0800a0c1 	.word	0x0800a0c1
 800a044:	0800a135 	.word	0x0800a135
		case GYRO_FULL_SCALE_250DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 800a048:	ed97 7a05 	vldr	s14, [r7, #20]
 800a04c:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 800a1c0 <ICM20948_readGyroscope_all+0x228>
 800a050:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	edc3 7a00 	vstr	s15, [r3]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 800a05a:	ed97 7a06 	vldr	s14, [r7, #24]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	3304      	adds	r3, #4
 800a062:	eddf 6a57 	vldr	s13, [pc, #348]	@ 800a1c0 <ICM20948_readGyroscope_all+0x228>
 800a066:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a06a:	edc3 7a00 	vstr	s15, [r3]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_250DPS;
 800a06e:	ed97 7a07 	vldr	s14, [r7, #28]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	3308      	adds	r3, #8
 800a076:	eddf 6a52 	vldr	s13, [pc, #328]	@ 800a1c0 <ICM20948_readGyroscope_all+0x228>
 800a07a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a07e:	edc3 7a00 	vstr	s15, [r3]
			break;
 800a082:	e091      	b.n	800a1a8 <ICM20948_readGyroscope_all+0x210>
		case GYRO_FULL_SCALE_500DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 800a084:	ed97 7a05 	vldr	s14, [r7, #20]
 800a088:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a1c4 <ICM20948_readGyroscope_all+0x22c>
 800a08c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	edc3 7a00 	vstr	s15, [r3]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 800a096:	ed97 7a06 	vldr	s14, [r7, #24]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	3304      	adds	r3, #4
 800a09e:	eddf 6a49 	vldr	s13, [pc, #292]	@ 800a1c4 <ICM20948_readGyroscope_all+0x22c>
 800a0a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a0a6:	edc3 7a00 	vstr	s15, [r3]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_500DPS;
 800a0aa:	ed97 7a07 	vldr	s14, [r7, #28]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	3308      	adds	r3, #8
 800a0b2:	eddf 6a44 	vldr	s13, [pc, #272]	@ 800a1c4 <ICM20948_readGyroscope_all+0x22c>
 800a0b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a0ba:	edc3 7a00 	vstr	s15, [r3]
			break;
 800a0be:	e073      	b.n	800a1a8 <ICM20948_readGyroscope_all+0x210>
		case GYRO_FULL_SCALE_1000DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7f6 fa40 	bl	8000548 <__aeabi_f2d>
 800a0c8:	a339      	add	r3, pc, #228	@ (adr r3, 800a1b0 <ICM20948_readGyroscope_all+0x218>)
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	f7f6 fbbd 	bl	800084c <__aeabi_ddiv>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	4610      	mov	r0, r2
 800a0d8:	4619      	mov	r1, r3
 800a0da:	f7f6 fd85 	bl	8000be8 <__aeabi_d2f>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	601a      	str	r2, [r3, #0]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7f6 fa2e 	bl	8000548 <__aeabi_f2d>
 800a0ec:	a330      	add	r3, pc, #192	@ (adr r3, 800a1b0 <ICM20948_readGyroscope_all+0x218>)
 800a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f2:	f7f6 fbab 	bl	800084c <__aeabi_ddiv>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	4610      	mov	r0, r2
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	1d1c      	adds	r4, r3, #4
 800a102:	f7f6 fd71 	bl	8000be8 <__aeabi_d2f>
 800a106:	4603      	mov	r3, r0
 800a108:	6023      	str	r3, [r4, #0]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_1000DPS;
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7f6 fa1b 	bl	8000548 <__aeabi_f2d>
 800a112:	a327      	add	r3, pc, #156	@ (adr r3, 800a1b0 <ICM20948_readGyroscope_all+0x218>)
 800a114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a118:	f7f6 fb98 	bl	800084c <__aeabi_ddiv>
 800a11c:	4602      	mov	r2, r0
 800a11e:	460b      	mov	r3, r1
 800a120:	4610      	mov	r0, r2
 800a122:	4619      	mov	r1, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f103 0408 	add.w	r4, r3, #8
 800a12a:	f7f6 fd5d 	bl	8000be8 <__aeabi_d2f>
 800a12e:	4603      	mov	r3, r0
 800a130:	6023      	str	r3, [r4, #0]
			break;
 800a132:	e039      	b.n	800a1a8 <ICM20948_readGyroscope_all+0x210>
		case GYRO_FULL_SCALE_2000DPS:
			reading[X] =rD[X] / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	4618      	mov	r0, r3
 800a138:	f7f6 fa06 	bl	8000548 <__aeabi_f2d>
 800a13c:	a31e      	add	r3, pc, #120	@ (adr r3, 800a1b8 <ICM20948_readGyroscope_all+0x220>)
 800a13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a142:	f7f6 fb83 	bl	800084c <__aeabi_ddiv>
 800a146:	4602      	mov	r2, r0
 800a148:	460b      	mov	r3, r1
 800a14a:	4610      	mov	r0, r2
 800a14c:	4619      	mov	r1, r3
 800a14e:	f7f6 fd4b 	bl	8000be8 <__aeabi_d2f>
 800a152:	4602      	mov	r2, r0
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	601a      	str	r2, [r3, #0]
			reading[Y] =rD[Y] / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7f6 f9f4 	bl	8000548 <__aeabi_f2d>
 800a160:	a315      	add	r3, pc, #84	@ (adr r3, 800a1b8 <ICM20948_readGyroscope_all+0x220>)
 800a162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a166:	f7f6 fb71 	bl	800084c <__aeabi_ddiv>
 800a16a:	4602      	mov	r2, r0
 800a16c:	460b      	mov	r3, r1
 800a16e:	4610      	mov	r0, r2
 800a170:	4619      	mov	r1, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	1d1c      	adds	r4, r3, #4
 800a176:	f7f6 fd37 	bl	8000be8 <__aeabi_d2f>
 800a17a:	4603      	mov	r3, r0
 800a17c:	6023      	str	r3, [r4, #0]
			reading[Z] =rD[Z] / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS;
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	4618      	mov	r0, r3
 800a182:	f7f6 f9e1 	bl	8000548 <__aeabi_f2d>
 800a186:	a30c      	add	r3, pc, #48	@ (adr r3, 800a1b8 <ICM20948_readGyroscope_all+0x220>)
 800a188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18c:	f7f6 fb5e 	bl	800084c <__aeabi_ddiv>
 800a190:	4602      	mov	r2, r0
 800a192:	460b      	mov	r3, r1
 800a194:	4610      	mov	r0, r2
 800a196:	4619      	mov	r1, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f103 0408 	add.w	r4, r3, #8
 800a19e:	f7f6 fd23 	bl	8000be8 <__aeabi_d2f>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	6023      	str	r3, [r4, #0]
			break;
 800a1a6:	bf00      	nop
	}

}
 800a1a8:	bf00      	nop
 800a1aa:	3734      	adds	r7, #52	@ 0x34
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd90      	pop	{r4, r7, pc}
 800a1b0:	66666666 	.word	0x66666666
 800a1b4:	40406666 	.word	0x40406666
 800a1b8:	66666666 	.word	0x66666666
 800a1bc:	40306666 	.word	0x40306666
 800a1c0:	43030000 	.word	0x43030000
 800a1c4:	42830000 	.word	0x42830000

0800a1c8 <ICM20948_readAccelerometer_all>:

void ICM20948_readAccelerometer_all(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectAccelSensitivity, float readings[3]) {
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b08e      	sub	sp, #56	@ 0x38
 800a1cc:	af02      	add	r7, sp, #8
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	607b      	str	r3, [r7, #4]
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	72fb      	strb	r3, [r7, #11]
 800a1d6:	4613      	mov	r3, r2
 800a1d8:	72bb      	strb	r3, [r7, #10]
	uint8_t readData[6];

//	_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
	_ICM20948_BrustRead(hi2c, selectI2cAddress, ICM20948__USER_BANK_0__ACCEL_XOUT_H__REGISTER, 6, readData);
 800a1da:	7af9      	ldrb	r1, [r7, #11]
 800a1dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a1e0:	9300      	str	r3, [sp, #0]
 800a1e2:	2306      	movs	r3, #6
 800a1e4:	222d      	movs	r2, #45	@ 0x2d
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f7ff fdd9 	bl	8009d9e <_ICM20948_BrustRead>


	int16_t rD_int[3];
	rD_int[X] = readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE];
 800a1ec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a1f0:	021b      	lsls	r3, r3, #8
 800a1f2:	b21a      	sxth	r2, r3
 800a1f4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a1f8:	b21b      	sxth	r3, r3
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	b21b      	sxth	r3, r3
 800a1fe:	843b      	strh	r3, [r7, #32]
	rD_int[Y] = readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE];
 800a200:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a204:	021b      	lsls	r3, r3, #8
 800a206:	b21a      	sxth	r2, r3
 800a208:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a20c:	b21b      	sxth	r3, r3
 800a20e:	4313      	orrs	r3, r2
 800a210:	b21b      	sxth	r3, r3
 800a212:	847b      	strh	r3, [r7, #34]	@ 0x22
	rD_int[Z] = readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE];
 800a214:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a218:	021b      	lsls	r3, r3, #8
 800a21a:	b21a      	sxth	r2, r3
 800a21c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800a220:	b21b      	sxth	r3, r3
 800a222:	4313      	orrs	r3, r2
 800a224:	b21b      	sxth	r3, r3
 800a226:	84bb      	strh	r3, [r7, #36]	@ 0x24

	float rD[3];
	rD[X] = (float) rD_int[X];
 800a228:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800a22c:	ee07 3a90 	vmov	s15, r3
 800a230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a234:	edc7 7a05 	vstr	s15, [r7, #20]
	rD[Y] = (float) rD_int[Y];
 800a238:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800a23c:	ee07 3a90 	vmov	s15, r3
 800a240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a244:	edc7 7a06 	vstr	s15, [r7, #24]
	rD[Z] = (float) rD_int[Z];
 800a248:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800a24c:	ee07 3a90 	vmov	s15, r3
 800a250:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a254:	edc7 7a07 	vstr	s15, [r7, #28]

	switch (selectAccelSensitivity) {
 800a258:	7abb      	ldrb	r3, [r7, #10]
 800a25a:	2b03      	cmp	r3, #3
 800a25c:	f200 8084 	bhi.w	800a368 <ICM20948_readAccelerometer_all+0x1a0>
 800a260:	a201      	add	r2, pc, #4	@ (adr r2, 800a268 <ICM20948_readAccelerometer_all+0xa0>)
 800a262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a266:	bf00      	nop
 800a268:	0800a279 	.word	0x0800a279
 800a26c:	0800a2b5 	.word	0x0800a2b5
 800a270:	0800a2f1 	.word	0x0800a2f1
 800a274:	0800a32d 	.word	0x0800a32d
		case ACCEL_FULL_SCALE_2G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 800a278:	ed97 7a05 	vldr	s14, [r7, #20]
 800a27c:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a3bc <ICM20948_readAccelerometer_all+0x1f4>
 800a280:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 800a28a:	ed97 7a06 	vldr	s14, [r7, #24]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	3304      	adds	r3, #4
 800a292:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 800a3bc <ICM20948_readAccelerometer_all+0x1f4>
 800a296:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a29a:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_2G;
 800a29e:	ed97 7a07 	vldr	s14, [r7, #28]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	3308      	adds	r3, #8
 800a2a6:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800a3bc <ICM20948_readAccelerometer_all+0x1f4>
 800a2aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a2ae:	edc3 7a00 	vstr	s15, [r3]
			break;
 800a2b2:	e059      	b.n	800a368 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_4G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 800a2b4:	ed97 7a05 	vldr	s14, [r7, #20]
 800a2b8:	eddf 6a41 	vldr	s13, [pc, #260]	@ 800a3c0 <ICM20948_readAccelerometer_all+0x1f8>
 800a2bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 800a2c6:	ed97 7a06 	vldr	s14, [r7, #24]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	3304      	adds	r3, #4
 800a2ce:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 800a3c0 <ICM20948_readAccelerometer_all+0x1f8>
 800a2d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a2d6:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_4G;
 800a2da:	ed97 7a07 	vldr	s14, [r7, #28]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	3308      	adds	r3, #8
 800a2e2:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800a3c0 <ICM20948_readAccelerometer_all+0x1f8>
 800a2e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a2ea:	edc3 7a00 	vstr	s15, [r3]
			break;
 800a2ee:	e03b      	b.n	800a368 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_8G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 800a2f0:	ed97 7a05 	vldr	s14, [r7, #20]
 800a2f4:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800a3c4 <ICM20948_readAccelerometer_all+0x1fc>
 800a2f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 800a302:	ed97 7a06 	vldr	s14, [r7, #24]
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	3304      	adds	r3, #4
 800a30a:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 800a3c4 <ICM20948_readAccelerometer_all+0x1fc>
 800a30e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a312:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_8G;
 800a316:	ed97 7a07 	vldr	s14, [r7, #28]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	3308      	adds	r3, #8
 800a31e:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800a3c4 <ICM20948_readAccelerometer_all+0x1fc>
 800a322:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a326:	edc3 7a00 	vstr	s15, [r3]
			break;
 800a32a:	e01d      	b.n	800a368 <ICM20948_readAccelerometer_all+0x1a0>
		case ACCEL_FULL_SCALE_16G:
			readings[X] = rD[X] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 800a32c:	ed97 7a05 	vldr	s14, [r7, #20]
 800a330:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800a3c8 <ICM20948_readAccelerometer_all+0x200>
 800a334:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	edc3 7a00 	vstr	s15, [r3]
			readings[Y] = rD[Y] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 800a33e:	ed97 7a06 	vldr	s14, [r7, #24]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	3304      	adds	r3, #4
 800a346:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800a3c8 <ICM20948_readAccelerometer_all+0x200>
 800a34a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a34e:	edc3 7a00 	vstr	s15, [r3]
			readings[Z] = rD[Z] / ACCEL_SENSITIVITY_SCALE_FACTOR_16G;
 800a352:	ed97 7a07 	vldr	s14, [r7, #28]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	3308      	adds	r3, #8
 800a35a:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 800a3c8 <ICM20948_readAccelerometer_all+0x200>
 800a35e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a362:	edc3 7a00 	vstr	s15, [r3]
			break;
 800a366:	bf00      	nop
	}
	readings[X] -=accel_offset[X];
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	ed93 7a00 	vldr	s14, [r3]
 800a36e:	4b17      	ldr	r3, [pc, #92]	@ (800a3cc <ICM20948_readAccelerometer_all+0x204>)
 800a370:	edd3 7a00 	vldr	s15, [r3]
 800a374:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	edc3 7a00 	vstr	s15, [r3]
	readings[Y] -=accel_offset[Y];
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	3304      	adds	r3, #4
 800a382:	ed93 7a00 	vldr	s14, [r3]
 800a386:	4b11      	ldr	r3, [pc, #68]	@ (800a3cc <ICM20948_readAccelerometer_all+0x204>)
 800a388:	edd3 7a01 	vldr	s15, [r3, #4]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	3304      	adds	r3, #4
 800a390:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a394:	edc3 7a00 	vstr	s15, [r3]
	readings[Z] -=accel_offset[Z];
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	3308      	adds	r3, #8
 800a39c:	ed93 7a00 	vldr	s14, [r3]
 800a3a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a3cc <ICM20948_readAccelerometer_all+0x204>)
 800a3a2:	edd3 7a02 	vldr	s15, [r3, #8]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	3308      	adds	r3, #8
 800a3aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3ae:	edc3 7a00 	vstr	s15, [r3]
}
 800a3b2:	bf00      	nop
 800a3b4:	3730      	adds	r7, #48	@ 0x30
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	46800000 	.word	0x46800000
 800a3c0:	46000000 	.word	0x46000000
 800a3c4:	45800000 	.word	0x45800000
 800a3c8:	45000000 	.word	0x45000000
 800a3cc:	20000610 	.word	0x20000610

0800a3d0 <ICM20948_CalibrateGyro>:
			mag[i] = reading * MAG_SENSITIVITY_SCALE_FACTOR;
		}
	}

void ICM20948_CalibrateGyro(I2C_HandleTypeDef * hi2c,const uint8_t sensitivity,int samples)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b090      	sub	sp, #64	@ 0x40
 800a3d4:	af02      	add	r7, sp, #8
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	460b      	mov	r3, r1
 800a3da:	607a      	str	r2, [r7, #4]
 800a3dc:	72fb      	strb	r3, [r7, #11]
	//float temp[3]={};
	int32_t gyro_bias[3] = {0};
 800a3de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	601a      	str	r2, [r3, #0]
 800a3e6:	605a      	str	r2, [r3, #4]
 800a3e8:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	623b      	str	r3, [r7, #32]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	84bb      	strh	r3, [r7, #36]	@ 0x24

		for(int i = 0; i < samples; i++)
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3f6:	e032      	b.n	800a45e <ICM20948_CalibrateGyro+0x8e>
		{
			uint8_t readData[6];
			//_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
			_ICM20948_BrustRead(hi2c, 0, ICM20948__USER_BANK_0__GYRO_XOUT_H__REGISTER, 6, readData);
 800a3f8:	f107 0318 	add.w	r3, r7, #24
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	2306      	movs	r3, #6
 800a400:	2233      	movs	r2, #51	@ 0x33
 800a402:	2100      	movs	r1, #0
 800a404:	68f8      	ldr	r0, [r7, #12]
 800a406:	f7ff fcca 	bl	8009d9e <_ICM20948_BrustRead>

			int16_t temp[3];
			temp[X] = readData[X_HIGH_BYTE]<<8|readData[X_LOW_BYTE];
 800a40a:	7e3b      	ldrb	r3, [r7, #24]
 800a40c:	021b      	lsls	r3, r3, #8
 800a40e:	b21a      	sxth	r2, r3
 800a410:	7e7b      	ldrb	r3, [r7, #25]
 800a412:	b21b      	sxth	r3, r3
 800a414:	4313      	orrs	r3, r2
 800a416:	b21b      	sxth	r3, r3
 800a418:	823b      	strh	r3, [r7, #16]
			temp[Y] = readData[Y_HIGH_BYTE]<<8|readData[Y_LOW_BYTE];
 800a41a:	7ebb      	ldrb	r3, [r7, #26]
 800a41c:	021b      	lsls	r3, r3, #8
 800a41e:	b21a      	sxth	r2, r3
 800a420:	7efb      	ldrb	r3, [r7, #27]
 800a422:	b21b      	sxth	r3, r3
 800a424:	4313      	orrs	r3, r2
 800a426:	b21b      	sxth	r3, r3
 800a428:	827b      	strh	r3, [r7, #18]
			temp[Z] = readData[Z_HIGH_BYTE]<<8|readData[Z_LOW_BYTE];
 800a42a:	7f3b      	ldrb	r3, [r7, #28]
 800a42c:	021b      	lsls	r3, r3, #8
 800a42e:	b21a      	sxth	r2, r3
 800a430:	7f7b      	ldrb	r3, [r7, #29]
 800a432:	b21b      	sxth	r3, r3
 800a434:	4313      	orrs	r3, r2
 800a436:	b21b      	sxth	r3, r3
 800a438:	82bb      	strh	r3, [r7, #20]

			gyro_bias[0] += temp[0];
 800a43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a43c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800a440:	4413      	add	r3, r2
 800a442:	62bb      	str	r3, [r7, #40]	@ 0x28
			gyro_bias[1] += temp[1];
 800a444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a446:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800a44a:	4413      	add	r3, r2
 800a44c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			gyro_bias[2] += temp[2];
 800a44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a450:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800a454:	4413      	add	r3, r2
 800a456:	633b      	str	r3, [r7, #48]	@ 0x30
		for(int i = 0; i < samples; i++)
 800a458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a45a:	3301      	adds	r3, #1
 800a45c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a45e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	429a      	cmp	r2, r3
 800a464:	dbc8      	blt.n	800a3f8 <ICM20948_CalibrateGyro+0x28>
		}

		gyro_bias[0] /= samples;
 800a466:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	fb92 f3f3 	sdiv	r3, r2, r3
 800a46e:	62bb      	str	r3, [r7, #40]	@ 0x28
		gyro_bias[1] /= samples;
 800a470:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	fb92 f3f3 	sdiv	r3, r2, r3
 800a478:	62fb      	str	r3, [r7, #44]	@ 0x2c
		gyro_bias[2] /= samples;
 800a47a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	fb92 f3f3 	sdiv	r3, r2, r3
 800a482:	633b      	str	r3, [r7, #48]	@ 0x30

		// Construct the gyro biases for push to the hardware gyro bias registers,
		// which are reset to zero upon device startup.
		// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
		// Biases are additive, so change sign on calculated average gyro biases
		gyro_offset[0] = (-gyro_bias[0] * 2  >> 8) & 0xFF;
 800a484:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a486:	4613      	mov	r3, r2
 800a488:	07db      	lsls	r3, r3, #31
 800a48a:	1a9b      	subs	r3, r3, r2
 800a48c:	005b      	lsls	r3, r3, #1
 800a48e:	121b      	asrs	r3, r3, #8
 800a490:	b2db      	uxtb	r3, r3
 800a492:	f887 3020 	strb.w	r3, [r7, #32]
		gyro_offset[1] = (-gyro_bias[0] * 2)       & 0xFF;
 800a496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	461a      	mov	r2, r3
 800a49c:	01d2      	lsls	r2, r2, #7
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	005b      	lsls	r3, r3, #1
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
		gyro_offset[2] = (-gyro_bias[1] * 2  >> 8) & 0xFF;
 800a4a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	07db      	lsls	r3, r3, #31
 800a4ae:	1a9b      	subs	r3, r3, r2
 800a4b0:	005b      	lsls	r3, r3, #1
 800a4b2:	121b      	asrs	r3, r3, #8
 800a4b4:	b2db      	uxtb	r3, r3
 800a4b6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		gyro_offset[3] = (-gyro_bias[1] * 2)       & 0xFF;
 800a4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	461a      	mov	r2, r3
 800a4c0:	01d2      	lsls	r2, r2, #7
 800a4c2:	1ad3      	subs	r3, r2, r3
 800a4c4:	005b      	lsls	r3, r3, #1
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		gyro_offset[4] = (-gyro_bias[2] * 2  >> 8) & 0xFF;
 800a4cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	07db      	lsls	r3, r3, #31
 800a4d2:	1a9b      	subs	r3, r3, r2
 800a4d4:	005b      	lsls	r3, r3, #1
 800a4d6:	121b      	asrs	r3, r3, #8
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		gyro_offset[5] = (-gyro_bias[2] * 2)       & 0xFF;
 800a4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	01d2      	lsls	r2, r2, #7
 800a4e6:	1ad3      	subs	r3, r2, r3
 800a4e8:	005b      	lsls	r3, r3, #1
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

		_ICM20948_SelectUserBank(hi2c,0, USER_BANK_2);
 800a4f0:	2202      	movs	r2, #2
 800a4f2:	2100      	movs	r1, #0
 800a4f4:	68f8      	ldr	r0, [r7, #12]
 800a4f6:	f7ff fbf9 	bl	8009cec <_ICM20948_SelectUserBank>
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+2,gyro_offset[2]);
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+3,gyro_offset[3]);
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+4,gyro_offset[4]);
//				_ICM20948_WriteByte(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER+5,gyro_offset[5]);

		_ICM20948_BurstWrite(hi2c,0,ICM20948__USER_BANK_2__XG_OFFSET_H__REGISTER,6,gyro_offset);
 800a4fa:	f107 0320 	add.w	r3, r7, #32
 800a4fe:	9300      	str	r3, [sp, #0]
 800a500:	2306      	movs	r3, #6
 800a502:	2203      	movs	r2, #3
 800a504:	2100      	movs	r1, #0
 800a506:	68f8      	ldr	r0, [r7, #12]
 800a508:	f7ff fc76 	bl	8009df8 <_ICM20948_BurstWrite>
		_ICM20948_SelectUserBank(hi2c,0, USER_BANK_0);
 800a50c:	2200      	movs	r2, #0
 800a50e:	2100      	movs	r1, #0
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f7ff fbeb 	bl	8009cec <_ICM20948_SelectUserBank>
	}
 800a516:	bf00      	nop
 800a518:	3738      	adds	r7, #56	@ 0x38
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
	...

0800a520 <ICM20948_CalibrateAccel>:

void ICM20948_CalibrateAccel(I2C_HandleTypeDef * hi2c,const uint8_t sensitivity,int samples)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b08c      	sub	sp, #48	@ 0x30
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	460b      	mov	r3, r1
 800a52a:	607a      	str	r2, [r7, #4]
 800a52c:	72fb      	strb	r3, [r7, #11]
	float accel_bias[3] = {0};
 800a52e:	f107 0320 	add.w	r3, r7, #32
 800a532:	2200      	movs	r2, #0
 800a534:	601a      	str	r2, [r3, #0]
 800a536:	605a      	str	r2, [r3, #4]
 800a538:	609a      	str	r2, [r3, #8]

			for(int i = 0; i < samples; i++)
 800a53a:	2300      	movs	r3, #0
 800a53c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a53e:	e025      	b.n	800a58c <ICM20948_CalibrateAccel+0x6c>
			{

				//_ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
				float temp[3];
				ICM20948_readAccelerometer_all(hi2c, 0, sensitivity, temp);
 800a540:	f107 0314 	add.w	r3, r7, #20
 800a544:	7afa      	ldrb	r2, [r7, #11]
 800a546:	2100      	movs	r1, #0
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	f7ff fe3d 	bl	800a1c8 <ICM20948_readAccelerometer_all>


				accel_bias[0] += temp[0];
 800a54e:	ed97 7a08 	vldr	s14, [r7, #32]
 800a552:	edd7 7a05 	vldr	s15, [r7, #20]
 800a556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a55a:	edc7 7a08 	vstr	s15, [r7, #32]
				accel_bias[1] += temp[1];
 800a55e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800a562:	edd7 7a06 	vldr	s15, [r7, #24]
 800a566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a56a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
				accel_bias[2] += (temp[2]-1.0f);//ignore the gravity
 800a56e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800a572:	edd7 7a07 	vldr	s15, [r7, #28]
 800a576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a57a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a57e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a582:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			for(int i = 0; i < samples; i++)
 800a586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a588:	3301      	adds	r3, #1
 800a58a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a58c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	429a      	cmp	r2, r3
 800a592:	dbd5      	blt.n	800a540 <ICM20948_CalibrateAccel+0x20>
			}

			accel_offset[0] =accel_bias[0]/ samples;
 800a594:	edd7 6a08 	vldr	s13, [r7, #32]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	ee07 3a90 	vmov	s15, r3
 800a59e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5a6:	4b0f      	ldr	r3, [pc, #60]	@ (800a5e4 <ICM20948_CalibrateAccel+0xc4>)
 800a5a8:	edc3 7a00 	vstr	s15, [r3]
			accel_offset[1] =accel_bias[1]/ samples;
 800a5ac:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	ee07 3a90 	vmov	s15, r3
 800a5b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5be:	4b09      	ldr	r3, [pc, #36]	@ (800a5e4 <ICM20948_CalibrateAccel+0xc4>)
 800a5c0:	edc3 7a01 	vstr	s15, [r3, #4]
			accel_offset[2] =accel_bias[2]/ samples;
 800a5c4:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	ee07 3a90 	vmov	s15, r3
 800a5ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5d6:	4b03      	ldr	r3, [pc, #12]	@ (800a5e4 <ICM20948_CalibrateAccel+0xc4>)
 800a5d8:	edc3 7a02 	vstr	s15, [r3, #8]
	}
 800a5dc:	bf00      	nop
 800a5de:	3730      	adds	r7, #48	@ 0x30
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	20000610 	.word	0x20000610

0800a5e8 <__NVIC_SetPriority>:
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	6039      	str	r1, [r7, #0]
 800a5f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a5f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	db0a      	blt.n	800a612 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	b2da      	uxtb	r2, r3
 800a600:	490c      	ldr	r1, [pc, #48]	@ (800a634 <__NVIC_SetPriority+0x4c>)
 800a602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a606:	0112      	lsls	r2, r2, #4
 800a608:	b2d2      	uxtb	r2, r2
 800a60a:	440b      	add	r3, r1
 800a60c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a610:	e00a      	b.n	800a628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	b2da      	uxtb	r2, r3
 800a616:	4908      	ldr	r1, [pc, #32]	@ (800a638 <__NVIC_SetPriority+0x50>)
 800a618:	79fb      	ldrb	r3, [r7, #7]
 800a61a:	f003 030f 	and.w	r3, r3, #15
 800a61e:	3b04      	subs	r3, #4
 800a620:	0112      	lsls	r2, r2, #4
 800a622:	b2d2      	uxtb	r2, r2
 800a624:	440b      	add	r3, r1
 800a626:	761a      	strb	r2, [r3, #24]
}
 800a628:	bf00      	nop
 800a62a:	370c      	adds	r7, #12
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr
 800a634:	e000e100 	.word	0xe000e100
 800a638:	e000ed00 	.word	0xe000ed00

0800a63c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a63c:	b580      	push	{r7, lr}
 800a63e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a640:	2100      	movs	r1, #0
 800a642:	f06f 0004 	mvn.w	r0, #4
 800a646:	f7ff ffcf 	bl	800a5e8 <__NVIC_SetPriority>
#endif
}
 800a64a:	bf00      	nop
 800a64c:	bd80      	pop	{r7, pc}
	...

0800a650 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a656:	f3ef 8305 	mrs	r3, IPSR
 800a65a:	603b      	str	r3, [r7, #0]
  return(result);
 800a65c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d003      	beq.n	800a66a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a662:	f06f 0305 	mvn.w	r3, #5
 800a666:	607b      	str	r3, [r7, #4]
 800a668:	e00c      	b.n	800a684 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a66a:	4b0a      	ldr	r3, [pc, #40]	@ (800a694 <osKernelInitialize+0x44>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d105      	bne.n	800a67e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a672:	4b08      	ldr	r3, [pc, #32]	@ (800a694 <osKernelInitialize+0x44>)
 800a674:	2201      	movs	r2, #1
 800a676:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a678:	2300      	movs	r3, #0
 800a67a:	607b      	str	r3, [r7, #4]
 800a67c:	e002      	b.n	800a684 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a67e:	f04f 33ff 	mov.w	r3, #4294967295
 800a682:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a684:	687b      	ldr	r3, [r7, #4]
}
 800a686:	4618      	mov	r0, r3
 800a688:	370c      	adds	r7, #12
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
 800a694:	2000061c 	.word	0x2000061c

0800a698 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a69e:	f3ef 8305 	mrs	r3, IPSR
 800a6a2:	603b      	str	r3, [r7, #0]
  return(result);
 800a6a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d003      	beq.n	800a6b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a6aa:	f06f 0305 	mvn.w	r3, #5
 800a6ae:	607b      	str	r3, [r7, #4]
 800a6b0:	e010      	b.n	800a6d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a6b2:	4b0b      	ldr	r3, [pc, #44]	@ (800a6e0 <osKernelStart+0x48>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d109      	bne.n	800a6ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a6ba:	f7ff ffbf 	bl	800a63c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a6be:	4b08      	ldr	r3, [pc, #32]	@ (800a6e0 <osKernelStart+0x48>)
 800a6c0:	2202      	movs	r2, #2
 800a6c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a6c4:	f001 f87a 	bl	800b7bc <vTaskStartScheduler>
      stat = osOK;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	607b      	str	r3, [r7, #4]
 800a6cc:	e002      	b.n	800a6d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a6ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a6d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a6d4:	687b      	ldr	r3, [r7, #4]
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3708      	adds	r7, #8
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	2000061c 	.word	0x2000061c

0800a6e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b08e      	sub	sp, #56	@ 0x38
 800a6e8:	af04      	add	r7, sp, #16
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6f4:	f3ef 8305 	mrs	r3, IPSR
 800a6f8:	617b      	str	r3, [r7, #20]
  return(result);
 800a6fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d17e      	bne.n	800a7fe <osThreadNew+0x11a>
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d07b      	beq.n	800a7fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a706:	2380      	movs	r3, #128	@ 0x80
 800a708:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a70a:	2318      	movs	r3, #24
 800a70c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a70e:	2300      	movs	r3, #0
 800a710:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a712:	f04f 33ff 	mov.w	r3, #4294967295
 800a716:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d045      	beq.n	800a7aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d002      	beq.n	800a72c <osThreadNew+0x48>
        name = attr->name;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	699b      	ldr	r3, [r3, #24]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d002      	beq.n	800a73a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	699b      	ldr	r3, [r3, #24]
 800a738:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d008      	beq.n	800a752 <osThreadNew+0x6e>
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	2b38      	cmp	r3, #56	@ 0x38
 800a744:	d805      	bhi.n	800a752 <osThreadNew+0x6e>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	f003 0301 	and.w	r3, r3, #1
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d001      	beq.n	800a756 <osThreadNew+0x72>
        return (NULL);
 800a752:	2300      	movs	r3, #0
 800a754:	e054      	b.n	800a800 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	695b      	ldr	r3, [r3, #20]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d003      	beq.n	800a766 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	089b      	lsrs	r3, r3, #2
 800a764:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00e      	beq.n	800a78c <osThreadNew+0xa8>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	2b5b      	cmp	r3, #91	@ 0x5b
 800a774:	d90a      	bls.n	800a78c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d006      	beq.n	800a78c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	695b      	ldr	r3, [r3, #20]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d002      	beq.n	800a78c <osThreadNew+0xa8>
        mem = 1;
 800a786:	2301      	movs	r3, #1
 800a788:	61bb      	str	r3, [r7, #24]
 800a78a:	e010      	b.n	800a7ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d10c      	bne.n	800a7ae <osThreadNew+0xca>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d108      	bne.n	800a7ae <osThreadNew+0xca>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	691b      	ldr	r3, [r3, #16]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d104      	bne.n	800a7ae <osThreadNew+0xca>
          mem = 0;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	61bb      	str	r3, [r7, #24]
 800a7a8:	e001      	b.n	800a7ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d110      	bne.n	800a7d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a7bc:	9202      	str	r2, [sp, #8]
 800a7be:	9301      	str	r3, [sp, #4]
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	6a3a      	ldr	r2, [r7, #32]
 800a7c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f000 fe1a 	bl	800b404 <xTaskCreateStatic>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	613b      	str	r3, [r7, #16]
 800a7d4:	e013      	b.n	800a7fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d110      	bne.n	800a7fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a7dc:	6a3b      	ldr	r3, [r7, #32]
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	f107 0310 	add.w	r3, r7, #16
 800a7e4:	9301      	str	r3, [sp, #4]
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f000 fe68 	bl	800b4c4 <xTaskCreate>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d001      	beq.n	800a7fe <osThreadNew+0x11a>
            hTask = NULL;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a7fe:	693b      	ldr	r3, [r7, #16]
}
 800a800:	4618      	mov	r0, r3
 800a802:	3728      	adds	r7, #40	@ 0x28
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a810:	f3ef 8305 	mrs	r3, IPSR
 800a814:	60bb      	str	r3, [r7, #8]
  return(result);
 800a816:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d003      	beq.n	800a824 <osDelay+0x1c>
    stat = osErrorISR;
 800a81c:	f06f 0305 	mvn.w	r3, #5
 800a820:	60fb      	str	r3, [r7, #12]
 800a822:	e007      	b.n	800a834 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a824:	2300      	movs	r3, #0
 800a826:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d002      	beq.n	800a834 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 ff8e 	bl	800b750 <vTaskDelay>
    }
  }

  return (stat);
 800a834:	68fb      	ldr	r3, [r7, #12]
}
 800a836:	4618      	mov	r0, r3
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
	...

0800a840 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a840:	b480      	push	{r7}
 800a842:	b085      	sub	sp, #20
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	4a07      	ldr	r2, [pc, #28]	@ (800a86c <vApplicationGetIdleTaskMemory+0x2c>)
 800a850:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	4a06      	ldr	r2, [pc, #24]	@ (800a870 <vApplicationGetIdleTaskMemory+0x30>)
 800a856:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2280      	movs	r2, #128	@ 0x80
 800a85c:	601a      	str	r2, [r3, #0]
}
 800a85e:	bf00      	nop
 800a860:	3714      	adds	r7, #20
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	20000620 	.word	0x20000620
 800a870:	2000067c 	.word	0x2000067c

0800a874 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a874:	b480      	push	{r7}
 800a876:	b085      	sub	sp, #20
 800a878:	af00      	add	r7, sp, #0
 800a87a:	60f8      	str	r0, [r7, #12]
 800a87c:	60b9      	str	r1, [r7, #8]
 800a87e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	4a07      	ldr	r2, [pc, #28]	@ (800a8a0 <vApplicationGetTimerTaskMemory+0x2c>)
 800a884:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	4a06      	ldr	r2, [pc, #24]	@ (800a8a4 <vApplicationGetTimerTaskMemory+0x30>)
 800a88a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a892:	601a      	str	r2, [r3, #0]
}
 800a894:	bf00      	nop
 800a896:	3714      	adds	r7, #20
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr
 800a8a0:	2000087c 	.word	0x2000087c
 800a8a4:	200008d8 	.word	0x200008d8

0800a8a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f103 0208 	add.w	r2, r3, #8
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f04f 32ff 	mov.w	r2, #4294967295
 800a8c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f103 0208 	add.w	r2, r3, #8
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f103 0208 	add.w	r2, r3, #8
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a8dc:	bf00      	nop
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a8f6:	bf00      	nop
 800a8f8:	370c      	adds	r7, #12
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr

0800a902 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a902:	b480      	push	{r7}
 800a904:	b085      	sub	sp, #20
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
 800a90a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	689a      	ldr	r2, [r3, #8]
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	683a      	ldr	r2, [r7, #0]
 800a926:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	683a      	ldr	r2, [r7, #0]
 800a92c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	1c5a      	adds	r2, r3, #1
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	601a      	str	r2, [r3, #0]
}
 800a93e:	bf00      	nop
 800a940:	3714      	adds	r7, #20
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a94a:	b480      	push	{r7}
 800a94c:	b085      	sub	sp, #20
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
 800a952:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a960:	d103      	bne.n	800a96a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	691b      	ldr	r3, [r3, #16]
 800a966:	60fb      	str	r3, [r7, #12]
 800a968:	e00c      	b.n	800a984 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	3308      	adds	r3, #8
 800a96e:	60fb      	str	r3, [r7, #12]
 800a970:	e002      	b.n	800a978 <vListInsert+0x2e>
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	60fb      	str	r3, [r7, #12]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	68ba      	ldr	r2, [r7, #8]
 800a980:	429a      	cmp	r2, r3
 800a982:	d2f6      	bcs.n	800a972 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	685a      	ldr	r2, [r3, #4]
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	683a      	ldr	r2, [r7, #0]
 800a992:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	683a      	ldr	r2, [r7, #0]
 800a99e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	1c5a      	adds	r2, r3, #1
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	601a      	str	r2, [r3, #0]
}
 800a9b0:	bf00      	nop
 800a9b2:	3714      	adds	r7, #20
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	6892      	ldr	r2, [r2, #8]
 800a9d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	6852      	ldr	r2, [r2, #4]
 800a9dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d103      	bne.n	800a9f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	689a      	ldr	r2, [r3, #8]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	1e5a      	subs	r2, r3, #1
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3714      	adds	r7, #20
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d10b      	bne.n	800aa3c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aa24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa28:	f383 8811 	msr	BASEPRI, r3
 800aa2c:	f3bf 8f6f 	isb	sy
 800aa30:	f3bf 8f4f 	dsb	sy
 800aa34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aa36:	bf00      	nop
 800aa38:	bf00      	nop
 800aa3a:	e7fd      	b.n	800aa38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aa3c:	f002 f87c 	bl	800cb38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa48:	68f9      	ldr	r1, [r7, #12]
 800aa4a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800aa4c:	fb01 f303 	mul.w	r3, r1, r3
 800aa50:	441a      	add	r2, r3
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	68f9      	ldr	r1, [r7, #12]
 800aa70:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800aa72:	fb01 f303 	mul.w	r3, r1, r3
 800aa76:	441a      	add	r2, r3
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	22ff      	movs	r2, #255	@ 0xff
 800aa80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	22ff      	movs	r2, #255	@ 0xff
 800aa88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d114      	bne.n	800aabc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d01a      	beq.n	800aad0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	3310      	adds	r3, #16
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f001 f91a 	bl	800bcd8 <xTaskRemoveFromEventList>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d012      	beq.n	800aad0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aaaa:	4b0d      	ldr	r3, [pc, #52]	@ (800aae0 <xQueueGenericReset+0xd0>)
 800aaac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aab0:	601a      	str	r2, [r3, #0]
 800aab2:	f3bf 8f4f 	dsb	sy
 800aab6:	f3bf 8f6f 	isb	sy
 800aaba:	e009      	b.n	800aad0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	3310      	adds	r3, #16
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7ff fef1 	bl	800a8a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	3324      	adds	r3, #36	@ 0x24
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7ff feec 	bl	800a8a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aad0:	f002 f864 	bl	800cb9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aad4:	2301      	movs	r3, #1
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3710      	adds	r7, #16
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	e000ed04 	.word	0xe000ed04

0800aae4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b08e      	sub	sp, #56	@ 0x38
 800aae8:	af02      	add	r7, sp, #8
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	607a      	str	r2, [r7, #4]
 800aaf0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d10b      	bne.n	800ab10 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800aaf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aafc:	f383 8811 	msr	BASEPRI, r3
 800ab00:	f3bf 8f6f 	isb	sy
 800ab04:	f3bf 8f4f 	dsb	sy
 800ab08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ab0a:	bf00      	nop
 800ab0c:	bf00      	nop
 800ab0e:	e7fd      	b.n	800ab0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10b      	bne.n	800ab2e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800ab16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab1a:	f383 8811 	msr	BASEPRI, r3
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f3bf 8f4f 	dsb	sy
 800ab26:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ab28:	bf00      	nop
 800ab2a:	bf00      	nop
 800ab2c:	e7fd      	b.n	800ab2a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d002      	beq.n	800ab3a <xQueueGenericCreateStatic+0x56>
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d001      	beq.n	800ab3e <xQueueGenericCreateStatic+0x5a>
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e000      	b.n	800ab40 <xQueueGenericCreateStatic+0x5c>
 800ab3e:	2300      	movs	r3, #0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d10b      	bne.n	800ab5c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ab44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab48:	f383 8811 	msr	BASEPRI, r3
 800ab4c:	f3bf 8f6f 	isb	sy
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	623b      	str	r3, [r7, #32]
}
 800ab56:	bf00      	nop
 800ab58:	bf00      	nop
 800ab5a:	e7fd      	b.n	800ab58 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d102      	bne.n	800ab68 <xQueueGenericCreateStatic+0x84>
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d101      	bne.n	800ab6c <xQueueGenericCreateStatic+0x88>
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e000      	b.n	800ab6e <xQueueGenericCreateStatic+0x8a>
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d10b      	bne.n	800ab8a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ab72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab76:	f383 8811 	msr	BASEPRI, r3
 800ab7a:	f3bf 8f6f 	isb	sy
 800ab7e:	f3bf 8f4f 	dsb	sy
 800ab82:	61fb      	str	r3, [r7, #28]
}
 800ab84:	bf00      	nop
 800ab86:	bf00      	nop
 800ab88:	e7fd      	b.n	800ab86 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ab8a:	2350      	movs	r3, #80	@ 0x50
 800ab8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	2b50      	cmp	r3, #80	@ 0x50
 800ab92:	d00b      	beq.n	800abac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ab94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab98:	f383 8811 	msr	BASEPRI, r3
 800ab9c:	f3bf 8f6f 	isb	sy
 800aba0:	f3bf 8f4f 	dsb	sy
 800aba4:	61bb      	str	r3, [r7, #24]
}
 800aba6:	bf00      	nop
 800aba8:	bf00      	nop
 800abaa:	e7fd      	b.n	800aba8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800abac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800abb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d00d      	beq.n	800abd4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800abb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abba:	2201      	movs	r2, #1
 800abbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800abc0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800abc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abc6:	9300      	str	r3, [sp, #0]
 800abc8:	4613      	mov	r3, r2
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	68b9      	ldr	r1, [r7, #8]
 800abce:	68f8      	ldr	r0, [r7, #12]
 800abd0:	f000 f805 	bl	800abde <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800abd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3730      	adds	r7, #48	@ 0x30
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}

0800abde <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b084      	sub	sp, #16
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	60f8      	str	r0, [r7, #12]
 800abe6:	60b9      	str	r1, [r7, #8]
 800abe8:	607a      	str	r2, [r7, #4]
 800abea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d103      	bne.n	800abfa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800abf2:	69bb      	ldr	r3, [r7, #24]
 800abf4:	69ba      	ldr	r2, [r7, #24]
 800abf6:	601a      	str	r2, [r3, #0]
 800abf8:	e002      	b.n	800ac00 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	68ba      	ldr	r2, [r7, #8]
 800ac0a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ac0c:	2101      	movs	r1, #1
 800ac0e:	69b8      	ldr	r0, [r7, #24]
 800ac10:	f7ff fefe 	bl	800aa10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	78fa      	ldrb	r2, [r7, #3]
 800ac18:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ac1c:	bf00      	nop
 800ac1e:	3710      	adds	r7, #16
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b08e      	sub	sp, #56	@ 0x38
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	607a      	str	r2, [r7, #4]
 800ac30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ac32:	2300      	movs	r3, #0
 800ac34:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d10b      	bne.n	800ac58 <xQueueGenericSend+0x34>
	__asm volatile
 800ac40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac44:	f383 8811 	msr	BASEPRI, r3
 800ac48:	f3bf 8f6f 	isb	sy
 800ac4c:	f3bf 8f4f 	dsb	sy
 800ac50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ac52:	bf00      	nop
 800ac54:	bf00      	nop
 800ac56:	e7fd      	b.n	800ac54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d103      	bne.n	800ac66 <xQueueGenericSend+0x42>
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d101      	bne.n	800ac6a <xQueueGenericSend+0x46>
 800ac66:	2301      	movs	r3, #1
 800ac68:	e000      	b.n	800ac6c <xQueueGenericSend+0x48>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d10b      	bne.n	800ac88 <xQueueGenericSend+0x64>
	__asm volatile
 800ac70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac74:	f383 8811 	msr	BASEPRI, r3
 800ac78:	f3bf 8f6f 	isb	sy
 800ac7c:	f3bf 8f4f 	dsb	sy
 800ac80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ac82:	bf00      	nop
 800ac84:	bf00      	nop
 800ac86:	e7fd      	b.n	800ac84 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	2b02      	cmp	r3, #2
 800ac8c:	d103      	bne.n	800ac96 <xQueueGenericSend+0x72>
 800ac8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d101      	bne.n	800ac9a <xQueueGenericSend+0x76>
 800ac96:	2301      	movs	r3, #1
 800ac98:	e000      	b.n	800ac9c <xQueueGenericSend+0x78>
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d10b      	bne.n	800acb8 <xQueueGenericSend+0x94>
	__asm volatile
 800aca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca4:	f383 8811 	msr	BASEPRI, r3
 800aca8:	f3bf 8f6f 	isb	sy
 800acac:	f3bf 8f4f 	dsb	sy
 800acb0:	623b      	str	r3, [r7, #32]
}
 800acb2:	bf00      	nop
 800acb4:	bf00      	nop
 800acb6:	e7fd      	b.n	800acb4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800acb8:	f001 f9ce 	bl	800c058 <xTaskGetSchedulerState>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d102      	bne.n	800acc8 <xQueueGenericSend+0xa4>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d101      	bne.n	800accc <xQueueGenericSend+0xa8>
 800acc8:	2301      	movs	r3, #1
 800acca:	e000      	b.n	800acce <xQueueGenericSend+0xaa>
 800accc:	2300      	movs	r3, #0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d10b      	bne.n	800acea <xQueueGenericSend+0xc6>
	__asm volatile
 800acd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acd6:	f383 8811 	msr	BASEPRI, r3
 800acda:	f3bf 8f6f 	isb	sy
 800acde:	f3bf 8f4f 	dsb	sy
 800ace2:	61fb      	str	r3, [r7, #28]
}
 800ace4:	bf00      	nop
 800ace6:	bf00      	nop
 800ace8:	e7fd      	b.n	800ace6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800acea:	f001 ff25 	bl	800cb38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800acee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800acf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d302      	bcc.n	800ad00 <xQueueGenericSend+0xdc>
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	d129      	bne.n	800ad54 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad00:	683a      	ldr	r2, [r7, #0]
 800ad02:	68b9      	ldr	r1, [r7, #8]
 800ad04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad06:	f000 fa0f 	bl	800b128 <prvCopyDataToQueue>
 800ad0a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d010      	beq.n	800ad36 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad16:	3324      	adds	r3, #36	@ 0x24
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f000 ffdd 	bl	800bcd8 <xTaskRemoveFromEventList>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d013      	beq.n	800ad4c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ad24:	4b3f      	ldr	r3, [pc, #252]	@ (800ae24 <xQueueGenericSend+0x200>)
 800ad26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad2a:	601a      	str	r2, [r3, #0]
 800ad2c:	f3bf 8f4f 	dsb	sy
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	e00a      	b.n	800ad4c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ad36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d007      	beq.n	800ad4c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ad3c:	4b39      	ldr	r3, [pc, #228]	@ (800ae24 <xQueueGenericSend+0x200>)
 800ad3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad42:	601a      	str	r2, [r3, #0]
 800ad44:	f3bf 8f4f 	dsb	sy
 800ad48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ad4c:	f001 ff26 	bl	800cb9c <vPortExitCritical>
				return pdPASS;
 800ad50:	2301      	movs	r3, #1
 800ad52:	e063      	b.n	800ae1c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d103      	bne.n	800ad62 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ad5a:	f001 ff1f 	bl	800cb9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	e05c      	b.n	800ae1c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ad62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d106      	bne.n	800ad76 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ad68:	f107 0314 	add.w	r3, r7, #20
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f001 f817 	bl	800bda0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ad72:	2301      	movs	r3, #1
 800ad74:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ad76:	f001 ff11 	bl	800cb9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ad7a:	f000 fd87 	bl	800b88c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ad7e:	f001 fedb 	bl	800cb38 <vPortEnterCritical>
 800ad82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad88:	b25b      	sxtb	r3, r3
 800ad8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad8e:	d103      	bne.n	800ad98 <xQueueGenericSend+0x174>
 800ad90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad92:	2200      	movs	r2, #0
 800ad94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad9e:	b25b      	sxtb	r3, r3
 800ada0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ada4:	d103      	bne.n	800adae <xQueueGenericSend+0x18a>
 800ada6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ada8:	2200      	movs	r2, #0
 800adaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800adae:	f001 fef5 	bl	800cb9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800adb2:	1d3a      	adds	r2, r7, #4
 800adb4:	f107 0314 	add.w	r3, r7, #20
 800adb8:	4611      	mov	r1, r2
 800adba:	4618      	mov	r0, r3
 800adbc:	f001 f806 	bl	800bdcc <xTaskCheckForTimeOut>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d124      	bne.n	800ae10 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800adc6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800adc8:	f000 faa6 	bl	800b318 <prvIsQueueFull>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d018      	beq.n	800ae04 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800add2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add4:	3310      	adds	r3, #16
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	4611      	mov	r1, r2
 800adda:	4618      	mov	r0, r3
 800addc:	f000 ff2a 	bl	800bc34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ade0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ade2:	f000 fa31 	bl	800b248 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ade6:	f000 fd5f 	bl	800b8a8 <xTaskResumeAll>
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	f47f af7c 	bne.w	800acea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800adf2:	4b0c      	ldr	r3, [pc, #48]	@ (800ae24 <xQueueGenericSend+0x200>)
 800adf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adf8:	601a      	str	r2, [r3, #0]
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	e772      	b.n	800acea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ae04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae06:	f000 fa1f 	bl	800b248 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae0a:	f000 fd4d 	bl	800b8a8 <xTaskResumeAll>
 800ae0e:	e76c      	b.n	800acea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ae10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae12:	f000 fa19 	bl	800b248 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae16:	f000 fd47 	bl	800b8a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ae1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3738      	adds	r7, #56	@ 0x38
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	e000ed04 	.word	0xe000ed04

0800ae28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b090      	sub	sp, #64	@ 0x40
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]
 800ae34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ae3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d10b      	bne.n	800ae58 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ae40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ae52:	bf00      	nop
 800ae54:	bf00      	nop
 800ae56:	e7fd      	b.n	800ae54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d103      	bne.n	800ae66 <xQueueGenericSendFromISR+0x3e>
 800ae5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d101      	bne.n	800ae6a <xQueueGenericSendFromISR+0x42>
 800ae66:	2301      	movs	r3, #1
 800ae68:	e000      	b.n	800ae6c <xQueueGenericSendFromISR+0x44>
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d10b      	bne.n	800ae88 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ae70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae74:	f383 8811 	msr	BASEPRI, r3
 800ae78:	f3bf 8f6f 	isb	sy
 800ae7c:	f3bf 8f4f 	dsb	sy
 800ae80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ae82:	bf00      	nop
 800ae84:	bf00      	nop
 800ae86:	e7fd      	b.n	800ae84 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	d103      	bne.n	800ae96 <xQueueGenericSendFromISR+0x6e>
 800ae8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d101      	bne.n	800ae9a <xQueueGenericSendFromISR+0x72>
 800ae96:	2301      	movs	r3, #1
 800ae98:	e000      	b.n	800ae9c <xQueueGenericSendFromISR+0x74>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d10b      	bne.n	800aeb8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800aea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aea4:	f383 8811 	msr	BASEPRI, r3
 800aea8:	f3bf 8f6f 	isb	sy
 800aeac:	f3bf 8f4f 	dsb	sy
 800aeb0:	623b      	str	r3, [r7, #32]
}
 800aeb2:	bf00      	nop
 800aeb4:	bf00      	nop
 800aeb6:	e7fd      	b.n	800aeb4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aeb8:	f001 ff1e 	bl	800ccf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aebc:	f3ef 8211 	mrs	r2, BASEPRI
 800aec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec4:	f383 8811 	msr	BASEPRI, r3
 800aec8:	f3bf 8f6f 	isb	sy
 800aecc:	f3bf 8f4f 	dsb	sy
 800aed0:	61fa      	str	r2, [r7, #28]
 800aed2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aed4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aed6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aedc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d302      	bcc.n	800aeea <xQueueGenericSendFromISR+0xc2>
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d12f      	bne.n	800af4a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aeea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aef0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aefa:	683a      	ldr	r2, [r7, #0]
 800aefc:	68b9      	ldr	r1, [r7, #8]
 800aefe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800af00:	f000 f912 	bl	800b128 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800af04:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800af08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af0c:	d112      	bne.n	800af34 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af12:	2b00      	cmp	r3, #0
 800af14:	d016      	beq.n	800af44 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af18:	3324      	adds	r3, #36	@ 0x24
 800af1a:	4618      	mov	r0, r3
 800af1c:	f000 fedc 	bl	800bcd8 <xTaskRemoveFromEventList>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00e      	beq.n	800af44 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00b      	beq.n	800af44 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	601a      	str	r2, [r3, #0]
 800af32:	e007      	b.n	800af44 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800af34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800af38:	3301      	adds	r3, #1
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	b25a      	sxtb	r2, r3
 800af3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800af44:	2301      	movs	r3, #1
 800af46:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800af48:	e001      	b.n	800af4e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800af4a:	2300      	movs	r3, #0
 800af4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af50:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800af58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3740      	adds	r7, #64	@ 0x40
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b08c      	sub	sp, #48	@ 0x30
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800af70:	2300      	movs	r3, #0
 800af72:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800af78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d10b      	bne.n	800af96 <xQueueReceive+0x32>
	__asm volatile
 800af7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af82:	f383 8811 	msr	BASEPRI, r3
 800af86:	f3bf 8f6f 	isb	sy
 800af8a:	f3bf 8f4f 	dsb	sy
 800af8e:	623b      	str	r3, [r7, #32]
}
 800af90:	bf00      	nop
 800af92:	bf00      	nop
 800af94:	e7fd      	b.n	800af92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d103      	bne.n	800afa4 <xQueueReceive+0x40>
 800af9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d101      	bne.n	800afa8 <xQueueReceive+0x44>
 800afa4:	2301      	movs	r3, #1
 800afa6:	e000      	b.n	800afaa <xQueueReceive+0x46>
 800afa8:	2300      	movs	r3, #0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d10b      	bne.n	800afc6 <xQueueReceive+0x62>
	__asm volatile
 800afae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afb2:	f383 8811 	msr	BASEPRI, r3
 800afb6:	f3bf 8f6f 	isb	sy
 800afba:	f3bf 8f4f 	dsb	sy
 800afbe:	61fb      	str	r3, [r7, #28]
}
 800afc0:	bf00      	nop
 800afc2:	bf00      	nop
 800afc4:	e7fd      	b.n	800afc2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800afc6:	f001 f847 	bl	800c058 <xTaskGetSchedulerState>
 800afca:	4603      	mov	r3, r0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d102      	bne.n	800afd6 <xQueueReceive+0x72>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d101      	bne.n	800afda <xQueueReceive+0x76>
 800afd6:	2301      	movs	r3, #1
 800afd8:	e000      	b.n	800afdc <xQueueReceive+0x78>
 800afda:	2300      	movs	r3, #0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d10b      	bne.n	800aff8 <xQueueReceive+0x94>
	__asm volatile
 800afe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afe4:	f383 8811 	msr	BASEPRI, r3
 800afe8:	f3bf 8f6f 	isb	sy
 800afec:	f3bf 8f4f 	dsb	sy
 800aff0:	61bb      	str	r3, [r7, #24]
}
 800aff2:	bf00      	nop
 800aff4:	bf00      	nop
 800aff6:	e7fd      	b.n	800aff4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aff8:	f001 fd9e 	bl	800cb38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800affc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800affe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b000:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b004:	2b00      	cmp	r3, #0
 800b006:	d01f      	beq.n	800b048 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b008:	68b9      	ldr	r1, [r7, #8]
 800b00a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b00c:	f000 f8f6 	bl	800b1fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b012:	1e5a      	subs	r2, r3, #1
 800b014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b016:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b01a:	691b      	ldr	r3, [r3, #16]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d00f      	beq.n	800b040 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b022:	3310      	adds	r3, #16
 800b024:	4618      	mov	r0, r3
 800b026:	f000 fe57 	bl	800bcd8 <xTaskRemoveFromEventList>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d007      	beq.n	800b040 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b030:	4b3c      	ldr	r3, [pc, #240]	@ (800b124 <xQueueReceive+0x1c0>)
 800b032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b036:	601a      	str	r2, [r3, #0]
 800b038:	f3bf 8f4f 	dsb	sy
 800b03c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b040:	f001 fdac 	bl	800cb9c <vPortExitCritical>
				return pdPASS;
 800b044:	2301      	movs	r3, #1
 800b046:	e069      	b.n	800b11c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d103      	bne.n	800b056 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b04e:	f001 fda5 	bl	800cb9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b052:	2300      	movs	r3, #0
 800b054:	e062      	b.n	800b11c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d106      	bne.n	800b06a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b05c:	f107 0310 	add.w	r3, r7, #16
 800b060:	4618      	mov	r0, r3
 800b062:	f000 fe9d 	bl	800bda0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b066:	2301      	movs	r3, #1
 800b068:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b06a:	f001 fd97 	bl	800cb9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b06e:	f000 fc0d 	bl	800b88c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b072:	f001 fd61 	bl	800cb38 <vPortEnterCritical>
 800b076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b078:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b07c:	b25b      	sxtb	r3, r3
 800b07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b082:	d103      	bne.n	800b08c <xQueueReceive+0x128>
 800b084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b086:	2200      	movs	r2, #0
 800b088:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b08e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b092:	b25b      	sxtb	r3, r3
 800b094:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b098:	d103      	bne.n	800b0a2 <xQueueReceive+0x13e>
 800b09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b0a2:	f001 fd7b 	bl	800cb9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0a6:	1d3a      	adds	r2, r7, #4
 800b0a8:	f107 0310 	add.w	r3, r7, #16
 800b0ac:	4611      	mov	r1, r2
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f000 fe8c 	bl	800bdcc <xTaskCheckForTimeOut>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d123      	bne.n	800b102 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b0ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b0bc:	f000 f916 	bl	800b2ec <prvIsQueueEmpty>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d017      	beq.n	800b0f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0c8:	3324      	adds	r3, #36	@ 0x24
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	4611      	mov	r1, r2
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f000 fdb0 	bl	800bc34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b0d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b0d6:	f000 f8b7 	bl	800b248 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b0da:	f000 fbe5 	bl	800b8a8 <xTaskResumeAll>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d189      	bne.n	800aff8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b0e4:	4b0f      	ldr	r3, [pc, #60]	@ (800b124 <xQueueReceive+0x1c0>)
 800b0e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0ea:	601a      	str	r2, [r3, #0]
 800b0ec:	f3bf 8f4f 	dsb	sy
 800b0f0:	f3bf 8f6f 	isb	sy
 800b0f4:	e780      	b.n	800aff8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b0f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b0f8:	f000 f8a6 	bl	800b248 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b0fc:	f000 fbd4 	bl	800b8a8 <xTaskResumeAll>
 800b100:	e77a      	b.n	800aff8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b102:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b104:	f000 f8a0 	bl	800b248 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b108:	f000 fbce 	bl	800b8a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b10c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b10e:	f000 f8ed 	bl	800b2ec <prvIsQueueEmpty>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	f43f af6f 	beq.w	800aff8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b11a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3730      	adds	r7, #48	@ 0x30
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}
 800b124:	e000ed04 	.word	0xe000ed04

0800b128 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b086      	sub	sp, #24
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	60f8      	str	r0, [r7, #12]
 800b130:	60b9      	str	r1, [r7, #8]
 800b132:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b134:	2300      	movs	r3, #0
 800b136:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b13c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b142:	2b00      	cmp	r3, #0
 800b144:	d10d      	bne.n	800b162 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d14d      	bne.n	800b1ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	689b      	ldr	r3, [r3, #8]
 800b152:	4618      	mov	r0, r3
 800b154:	f000 ff9e 	bl	800c094 <xTaskPriorityDisinherit>
 800b158:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2200      	movs	r2, #0
 800b15e:	609a      	str	r2, [r3, #8]
 800b160:	e043      	b.n	800b1ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d119      	bne.n	800b19c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6858      	ldr	r0, [r3, #4]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b170:	461a      	mov	r2, r3
 800b172:	68b9      	ldr	r1, [r7, #8]
 800b174:	f003 f865 	bl	800e242 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	685a      	ldr	r2, [r3, #4]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b180:	441a      	add	r2, r3
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	685a      	ldr	r2, [r3, #4]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	689b      	ldr	r3, [r3, #8]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d32b      	bcc.n	800b1ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	605a      	str	r2, [r3, #4]
 800b19a:	e026      	b.n	800b1ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	68d8      	ldr	r0, [r3, #12]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	68b9      	ldr	r1, [r7, #8]
 800b1a8:	f003 f84b 	bl	800e242 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	68da      	ldr	r2, [r3, #12]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1b4:	425b      	negs	r3, r3
 800b1b6:	441a      	add	r2, r3
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	68da      	ldr	r2, [r3, #12]
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d207      	bcs.n	800b1d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	689a      	ldr	r2, [r3, #8]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1d0:	425b      	negs	r3, r3
 800b1d2:	441a      	add	r2, r3
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2b02      	cmp	r3, #2
 800b1dc:	d105      	bne.n	800b1ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d002      	beq.n	800b1ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	3b01      	subs	r3, #1
 800b1e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	1c5a      	adds	r2, r3, #1
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b1f2:	697b      	ldr	r3, [r7, #20]
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3718      	adds	r7, #24
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d018      	beq.n	800b240 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	68da      	ldr	r2, [r3, #12]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b216:	441a      	add	r2, r3
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	68da      	ldr	r2, [r3, #12]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	429a      	cmp	r2, r3
 800b226:	d303      	bcc.n	800b230 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	68d9      	ldr	r1, [r3, #12]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b238:	461a      	mov	r2, r3
 800b23a:	6838      	ldr	r0, [r7, #0]
 800b23c:	f003 f801 	bl	800e242 <memcpy>
	}
}
 800b240:	bf00      	nop
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b250:	f001 fc72 	bl	800cb38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b25a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b25c:	e011      	b.n	800b282 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b262:	2b00      	cmp	r3, #0
 800b264:	d012      	beq.n	800b28c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	3324      	adds	r3, #36	@ 0x24
 800b26a:	4618      	mov	r0, r3
 800b26c:	f000 fd34 	bl	800bcd8 <xTaskRemoveFromEventList>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d001      	beq.n	800b27a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b276:	f000 fe0d 	bl	800be94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b27a:	7bfb      	ldrb	r3, [r7, #15]
 800b27c:	3b01      	subs	r3, #1
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b286:	2b00      	cmp	r3, #0
 800b288:	dce9      	bgt.n	800b25e <prvUnlockQueue+0x16>
 800b28a:	e000      	b.n	800b28e <prvUnlockQueue+0x46>
					break;
 800b28c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	22ff      	movs	r2, #255	@ 0xff
 800b292:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b296:	f001 fc81 	bl	800cb9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b29a:	f001 fc4d 	bl	800cb38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b2a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2a6:	e011      	b.n	800b2cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	691b      	ldr	r3, [r3, #16]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d012      	beq.n	800b2d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	3310      	adds	r3, #16
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f000 fd0f 	bl	800bcd8 <xTaskRemoveFromEventList>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d001      	beq.n	800b2c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b2c0:	f000 fde8 	bl	800be94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b2c4:	7bbb      	ldrb	r3, [r7, #14]
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	dce9      	bgt.n	800b2a8 <prvUnlockQueue+0x60>
 800b2d4:	e000      	b.n	800b2d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b2d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	22ff      	movs	r2, #255	@ 0xff
 800b2dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b2e0:	f001 fc5c 	bl	800cb9c <vPortExitCritical>
}
 800b2e4:	bf00      	nop
 800b2e6:	3710      	adds	r7, #16
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b2f4:	f001 fc20 	bl	800cb38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d102      	bne.n	800b306 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b300:	2301      	movs	r3, #1
 800b302:	60fb      	str	r3, [r7, #12]
 800b304:	e001      	b.n	800b30a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b306:	2300      	movs	r3, #0
 800b308:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b30a:	f001 fc47 	bl	800cb9c <vPortExitCritical>

	return xReturn;
 800b30e:	68fb      	ldr	r3, [r7, #12]
}
 800b310:	4618      	mov	r0, r3
 800b312:	3710      	adds	r7, #16
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b320:	f001 fc0a 	bl	800cb38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d102      	bne.n	800b336 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b330:	2301      	movs	r3, #1
 800b332:	60fb      	str	r3, [r7, #12]
 800b334:	e001      	b.n	800b33a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b336:	2300      	movs	r3, #0
 800b338:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b33a:	f001 fc2f 	bl	800cb9c <vPortExitCritical>

	return xReturn;
 800b33e:	68fb      	ldr	r3, [r7, #12]
}
 800b340:	4618      	mov	r0, r3
 800b342:	3710      	adds	r7, #16
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b352:	2300      	movs	r3, #0
 800b354:	60fb      	str	r3, [r7, #12]
 800b356:	e014      	b.n	800b382 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b358:	4a0f      	ldr	r2, [pc, #60]	@ (800b398 <vQueueAddToRegistry+0x50>)
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d10b      	bne.n	800b37c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b364:	490c      	ldr	r1, [pc, #48]	@ (800b398 <vQueueAddToRegistry+0x50>)
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	683a      	ldr	r2, [r7, #0]
 800b36a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b36e:	4a0a      	ldr	r2, [pc, #40]	@ (800b398 <vQueueAddToRegistry+0x50>)
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	00db      	lsls	r3, r3, #3
 800b374:	4413      	add	r3, r2
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b37a:	e006      	b.n	800b38a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	3301      	adds	r3, #1
 800b380:	60fb      	str	r3, [r7, #12]
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2b07      	cmp	r3, #7
 800b386:	d9e7      	bls.n	800b358 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b388:	bf00      	nop
 800b38a:	bf00      	nop
 800b38c:	3714      	adds	r7, #20
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
 800b396:	bf00      	nop
 800b398:	20000cd8 	.word	0x20000cd8

0800b39c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b086      	sub	sp, #24
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b3ac:	f001 fbc4 	bl	800cb38 <vPortEnterCritical>
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b3b6:	b25b      	sxtb	r3, r3
 800b3b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3bc:	d103      	bne.n	800b3c6 <vQueueWaitForMessageRestricted+0x2a>
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b3cc:	b25b      	sxtb	r3, r3
 800b3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3d2:	d103      	bne.n	800b3dc <vQueueWaitForMessageRestricted+0x40>
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b3dc:	f001 fbde 	bl	800cb9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d106      	bne.n	800b3f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	3324      	adds	r3, #36	@ 0x24
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	68b9      	ldr	r1, [r7, #8]
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f000 fc45 	bl	800bc80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b3f6:	6978      	ldr	r0, [r7, #20]
 800b3f8:	f7ff ff26 	bl	800b248 <prvUnlockQueue>
	}
 800b3fc:	bf00      	nop
 800b3fe:	3718      	adds	r7, #24
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b404:	b580      	push	{r7, lr}
 800b406:	b08e      	sub	sp, #56	@ 0x38
 800b408:	af04      	add	r7, sp, #16
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	607a      	str	r2, [r7, #4]
 800b410:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b414:	2b00      	cmp	r3, #0
 800b416:	d10b      	bne.n	800b430 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b41c:	f383 8811 	msr	BASEPRI, r3
 800b420:	f3bf 8f6f 	isb	sy
 800b424:	f3bf 8f4f 	dsb	sy
 800b428:	623b      	str	r3, [r7, #32]
}
 800b42a:	bf00      	nop
 800b42c:	bf00      	nop
 800b42e:	e7fd      	b.n	800b42c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10b      	bne.n	800b44e <xTaskCreateStatic+0x4a>
	__asm volatile
 800b436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b43a:	f383 8811 	msr	BASEPRI, r3
 800b43e:	f3bf 8f6f 	isb	sy
 800b442:	f3bf 8f4f 	dsb	sy
 800b446:	61fb      	str	r3, [r7, #28]
}
 800b448:	bf00      	nop
 800b44a:	bf00      	nop
 800b44c:	e7fd      	b.n	800b44a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b44e:	235c      	movs	r3, #92	@ 0x5c
 800b450:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	2b5c      	cmp	r3, #92	@ 0x5c
 800b456:	d00b      	beq.n	800b470 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b45c:	f383 8811 	msr	BASEPRI, r3
 800b460:	f3bf 8f6f 	isb	sy
 800b464:	f3bf 8f4f 	dsb	sy
 800b468:	61bb      	str	r3, [r7, #24]
}
 800b46a:	bf00      	nop
 800b46c:	bf00      	nop
 800b46e:	e7fd      	b.n	800b46c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b470:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b474:	2b00      	cmp	r3, #0
 800b476:	d01e      	beq.n	800b4b6 <xTaskCreateStatic+0xb2>
 800b478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d01b      	beq.n	800b4b6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b47e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b480:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b484:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b486:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48a:	2202      	movs	r2, #2
 800b48c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b490:	2300      	movs	r3, #0
 800b492:	9303      	str	r3, [sp, #12]
 800b494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b496:	9302      	str	r3, [sp, #8]
 800b498:	f107 0314 	add.w	r3, r7, #20
 800b49c:	9301      	str	r3, [sp, #4]
 800b49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a0:	9300      	str	r3, [sp, #0]
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	68b9      	ldr	r1, [r7, #8]
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f000 f850 	bl	800b54e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b4ae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b4b0:	f000 f8de 	bl	800b670 <prvAddNewTaskToReadyList>
 800b4b4:	e001      	b.n	800b4ba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b4ba:	697b      	ldr	r3, [r7, #20]
	}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3728      	adds	r7, #40	@ 0x28
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b08c      	sub	sp, #48	@ 0x30
 800b4c8:	af04      	add	r7, sp, #16
 800b4ca:	60f8      	str	r0, [r7, #12]
 800b4cc:	60b9      	str	r1, [r7, #8]
 800b4ce:	603b      	str	r3, [r7, #0]
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b4d4:	88fb      	ldrh	r3, [r7, #6]
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f001 fc4f 	bl	800cd7c <pvPortMalloc>
 800b4de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d00e      	beq.n	800b504 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b4e6:	205c      	movs	r0, #92	@ 0x5c
 800b4e8:	f001 fc48 	bl	800cd7c <pvPortMalloc>
 800b4ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d003      	beq.n	800b4fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	697a      	ldr	r2, [r7, #20]
 800b4f8:	631a      	str	r2, [r3, #48]	@ 0x30
 800b4fa:	e005      	b.n	800b508 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b4fc:	6978      	ldr	r0, [r7, #20]
 800b4fe:	f001 fd0b 	bl	800cf18 <vPortFree>
 800b502:	e001      	b.n	800b508 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b504:	2300      	movs	r3, #0
 800b506:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b508:	69fb      	ldr	r3, [r7, #28]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d017      	beq.n	800b53e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b50e:	69fb      	ldr	r3, [r7, #28]
 800b510:	2200      	movs	r2, #0
 800b512:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b516:	88fa      	ldrh	r2, [r7, #6]
 800b518:	2300      	movs	r3, #0
 800b51a:	9303      	str	r3, [sp, #12]
 800b51c:	69fb      	ldr	r3, [r7, #28]
 800b51e:	9302      	str	r3, [sp, #8]
 800b520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b522:	9301      	str	r3, [sp, #4]
 800b524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	68b9      	ldr	r1, [r7, #8]
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	f000 f80e 	bl	800b54e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b532:	69f8      	ldr	r0, [r7, #28]
 800b534:	f000 f89c 	bl	800b670 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b538:	2301      	movs	r3, #1
 800b53a:	61bb      	str	r3, [r7, #24]
 800b53c:	e002      	b.n	800b544 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b53e:	f04f 33ff 	mov.w	r3, #4294967295
 800b542:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b544:	69bb      	ldr	r3, [r7, #24]
	}
 800b546:	4618      	mov	r0, r3
 800b548:	3720      	adds	r7, #32
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}

0800b54e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b54e:	b580      	push	{r7, lr}
 800b550:	b088      	sub	sp, #32
 800b552:	af00      	add	r7, sp, #0
 800b554:	60f8      	str	r0, [r7, #12]
 800b556:	60b9      	str	r1, [r7, #8]
 800b558:	607a      	str	r2, [r7, #4]
 800b55a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b55c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b55e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	461a      	mov	r2, r3
 800b566:	21a5      	movs	r1, #165	@ 0xa5
 800b568:	f002 fdd9 	bl	800e11e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b56e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b576:	3b01      	subs	r3, #1
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	4413      	add	r3, r2
 800b57c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b57e:	69bb      	ldr	r3, [r7, #24]
 800b580:	f023 0307 	bic.w	r3, r3, #7
 800b584:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	f003 0307 	and.w	r3, r3, #7
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00b      	beq.n	800b5a8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b594:	f383 8811 	msr	BASEPRI, r3
 800b598:	f3bf 8f6f 	isb	sy
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	617b      	str	r3, [r7, #20]
}
 800b5a2:	bf00      	nop
 800b5a4:	bf00      	nop
 800b5a6:	e7fd      	b.n	800b5a4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d01f      	beq.n	800b5ee <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	61fb      	str	r3, [r7, #28]
 800b5b2:	e012      	b.n	800b5da <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b5b4:	68ba      	ldr	r2, [r7, #8]
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	4413      	add	r3, r2
 800b5ba:	7819      	ldrb	r1, [r3, #0]
 800b5bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	4413      	add	r3, r2
 800b5c2:	3334      	adds	r3, #52	@ 0x34
 800b5c4:	460a      	mov	r2, r1
 800b5c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b5c8:	68ba      	ldr	r2, [r7, #8]
 800b5ca:	69fb      	ldr	r3, [r7, #28]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d006      	beq.n	800b5e2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	61fb      	str	r3, [r7, #28]
 800b5da:	69fb      	ldr	r3, [r7, #28]
 800b5dc:	2b0f      	cmp	r3, #15
 800b5de:	d9e9      	bls.n	800b5b4 <prvInitialiseNewTask+0x66>
 800b5e0:	e000      	b.n	800b5e4 <prvInitialiseNewTask+0x96>
			{
				break;
 800b5e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b5ec:	e003      	b.n	800b5f6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b5f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5f8:	2b37      	cmp	r3, #55	@ 0x37
 800b5fa:	d901      	bls.n	800b600 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b5fc:	2337      	movs	r3, #55	@ 0x37
 800b5fe:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b602:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b604:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b608:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b60a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b60c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b60e:	2200      	movs	r2, #0
 800b610:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b614:	3304      	adds	r3, #4
 800b616:	4618      	mov	r0, r3
 800b618:	f7ff f966 	bl	800a8e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b61c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b61e:	3318      	adds	r3, #24
 800b620:	4618      	mov	r0, r3
 800b622:	f7ff f961 	bl	800a8e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b62a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b62c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b62e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b634:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b638:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b63a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b63e:	2200      	movs	r2, #0
 800b640:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b644:	2200      	movs	r2, #0
 800b646:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b64a:	683a      	ldr	r2, [r7, #0]
 800b64c:	68f9      	ldr	r1, [r7, #12]
 800b64e:	69b8      	ldr	r0, [r7, #24]
 800b650:	f001 f93e 	bl	800c8d0 <pxPortInitialiseStack>
 800b654:	4602      	mov	r2, r0
 800b656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b658:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b65a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d002      	beq.n	800b666 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b666:	bf00      	nop
 800b668:	3720      	adds	r7, #32
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
	...

0800b670 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b678:	f001 fa5e 	bl	800cb38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b67c:	4b2d      	ldr	r3, [pc, #180]	@ (800b734 <prvAddNewTaskToReadyList+0xc4>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	3301      	adds	r3, #1
 800b682:	4a2c      	ldr	r2, [pc, #176]	@ (800b734 <prvAddNewTaskToReadyList+0xc4>)
 800b684:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b686:	4b2c      	ldr	r3, [pc, #176]	@ (800b738 <prvAddNewTaskToReadyList+0xc8>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d109      	bne.n	800b6a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b68e:	4a2a      	ldr	r2, [pc, #168]	@ (800b738 <prvAddNewTaskToReadyList+0xc8>)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b694:	4b27      	ldr	r3, [pc, #156]	@ (800b734 <prvAddNewTaskToReadyList+0xc4>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d110      	bne.n	800b6be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b69c:	f000 fc1e 	bl	800bedc <prvInitialiseTaskLists>
 800b6a0:	e00d      	b.n	800b6be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b6a2:	4b26      	ldr	r3, [pc, #152]	@ (800b73c <prvAddNewTaskToReadyList+0xcc>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d109      	bne.n	800b6be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b6aa:	4b23      	ldr	r3, [pc, #140]	@ (800b738 <prvAddNewTaskToReadyList+0xc8>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d802      	bhi.n	800b6be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b6b8:	4a1f      	ldr	r2, [pc, #124]	@ (800b738 <prvAddNewTaskToReadyList+0xc8>)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b6be:	4b20      	ldr	r3, [pc, #128]	@ (800b740 <prvAddNewTaskToReadyList+0xd0>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	4a1e      	ldr	r2, [pc, #120]	@ (800b740 <prvAddNewTaskToReadyList+0xd0>)
 800b6c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b6c8:	4b1d      	ldr	r3, [pc, #116]	@ (800b740 <prvAddNewTaskToReadyList+0xd0>)
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6d4:	4b1b      	ldr	r3, [pc, #108]	@ (800b744 <prvAddNewTaskToReadyList+0xd4>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d903      	bls.n	800b6e4 <prvAddNewTaskToReadyList+0x74>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6e0:	4a18      	ldr	r2, [pc, #96]	@ (800b744 <prvAddNewTaskToReadyList+0xd4>)
 800b6e2:	6013      	str	r3, [r2, #0]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6e8:	4613      	mov	r3, r2
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	4413      	add	r3, r2
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	4a15      	ldr	r2, [pc, #84]	@ (800b748 <prvAddNewTaskToReadyList+0xd8>)
 800b6f2:	441a      	add	r2, r3
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	3304      	adds	r3, #4
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	4610      	mov	r0, r2
 800b6fc:	f7ff f901 	bl	800a902 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b700:	f001 fa4c 	bl	800cb9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b704:	4b0d      	ldr	r3, [pc, #52]	@ (800b73c <prvAddNewTaskToReadyList+0xcc>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d00e      	beq.n	800b72a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b70c:	4b0a      	ldr	r3, [pc, #40]	@ (800b738 <prvAddNewTaskToReadyList+0xc8>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b716:	429a      	cmp	r2, r3
 800b718:	d207      	bcs.n	800b72a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b71a:	4b0c      	ldr	r3, [pc, #48]	@ (800b74c <prvAddNewTaskToReadyList+0xdc>)
 800b71c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b720:	601a      	str	r2, [r3, #0]
 800b722:	f3bf 8f4f 	dsb	sy
 800b726:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b72a:	bf00      	nop
 800b72c:	3708      	adds	r7, #8
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	200011ec 	.word	0x200011ec
 800b738:	20000d18 	.word	0x20000d18
 800b73c:	200011f8 	.word	0x200011f8
 800b740:	20001208 	.word	0x20001208
 800b744:	200011f4 	.word	0x200011f4
 800b748:	20000d1c 	.word	0x20000d1c
 800b74c:	e000ed04 	.word	0xe000ed04

0800b750 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b758:	2300      	movs	r3, #0
 800b75a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d018      	beq.n	800b794 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b762:	4b14      	ldr	r3, [pc, #80]	@ (800b7b4 <vTaskDelay+0x64>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d00b      	beq.n	800b782 <vTaskDelay+0x32>
	__asm volatile
 800b76a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b76e:	f383 8811 	msr	BASEPRI, r3
 800b772:	f3bf 8f6f 	isb	sy
 800b776:	f3bf 8f4f 	dsb	sy
 800b77a:	60bb      	str	r3, [r7, #8]
}
 800b77c:	bf00      	nop
 800b77e:	bf00      	nop
 800b780:	e7fd      	b.n	800b77e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b782:	f000 f883 	bl	800b88c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b786:	2100      	movs	r1, #0
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f000 fcf3 	bl	800c174 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b78e:	f000 f88b 	bl	800b8a8 <xTaskResumeAll>
 800b792:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d107      	bne.n	800b7aa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b79a:	4b07      	ldr	r3, [pc, #28]	@ (800b7b8 <vTaskDelay+0x68>)
 800b79c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7a0:	601a      	str	r2, [r3, #0]
 800b7a2:	f3bf 8f4f 	dsb	sy
 800b7a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b7aa:	bf00      	nop
 800b7ac:	3710      	adds	r7, #16
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	20001214 	.word	0x20001214
 800b7b8:	e000ed04 	.word	0xe000ed04

0800b7bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b08a      	sub	sp, #40	@ 0x28
 800b7c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b7ca:	463a      	mov	r2, r7
 800b7cc:	1d39      	adds	r1, r7, #4
 800b7ce:	f107 0308 	add.w	r3, r7, #8
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f7ff f834 	bl	800a840 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b7d8:	6839      	ldr	r1, [r7, #0]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	68ba      	ldr	r2, [r7, #8]
 800b7de:	9202      	str	r2, [sp, #8]
 800b7e0:	9301      	str	r3, [sp, #4]
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	9300      	str	r3, [sp, #0]
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	460a      	mov	r2, r1
 800b7ea:	4922      	ldr	r1, [pc, #136]	@ (800b874 <vTaskStartScheduler+0xb8>)
 800b7ec:	4822      	ldr	r0, [pc, #136]	@ (800b878 <vTaskStartScheduler+0xbc>)
 800b7ee:	f7ff fe09 	bl	800b404 <xTaskCreateStatic>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	4a21      	ldr	r2, [pc, #132]	@ (800b87c <vTaskStartScheduler+0xc0>)
 800b7f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b7f8:	4b20      	ldr	r3, [pc, #128]	@ (800b87c <vTaskStartScheduler+0xc0>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d002      	beq.n	800b806 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b800:	2301      	movs	r3, #1
 800b802:	617b      	str	r3, [r7, #20]
 800b804:	e001      	b.n	800b80a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b806:	2300      	movs	r3, #0
 800b808:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d102      	bne.n	800b816 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b810:	f000 fd04 	bl	800c21c <xTimerCreateTimerTask>
 800b814:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d116      	bne.n	800b84a <vTaskStartScheduler+0x8e>
	__asm volatile
 800b81c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b820:	f383 8811 	msr	BASEPRI, r3
 800b824:	f3bf 8f6f 	isb	sy
 800b828:	f3bf 8f4f 	dsb	sy
 800b82c:	613b      	str	r3, [r7, #16]
}
 800b82e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b830:	4b13      	ldr	r3, [pc, #76]	@ (800b880 <vTaskStartScheduler+0xc4>)
 800b832:	f04f 32ff 	mov.w	r2, #4294967295
 800b836:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b838:	4b12      	ldr	r3, [pc, #72]	@ (800b884 <vTaskStartScheduler+0xc8>)
 800b83a:	2201      	movs	r2, #1
 800b83c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b83e:	4b12      	ldr	r3, [pc, #72]	@ (800b888 <vTaskStartScheduler+0xcc>)
 800b840:	2200      	movs	r2, #0
 800b842:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b844:	f001 f8d4 	bl	800c9f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b848:	e00f      	b.n	800b86a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b84a:	697b      	ldr	r3, [r7, #20]
 800b84c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b850:	d10b      	bne.n	800b86a <vTaskStartScheduler+0xae>
	__asm volatile
 800b852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b856:	f383 8811 	msr	BASEPRI, r3
 800b85a:	f3bf 8f6f 	isb	sy
 800b85e:	f3bf 8f4f 	dsb	sy
 800b862:	60fb      	str	r3, [r7, #12]
}
 800b864:	bf00      	nop
 800b866:	bf00      	nop
 800b868:	e7fd      	b.n	800b866 <vTaskStartScheduler+0xaa>
}
 800b86a:	bf00      	nop
 800b86c:	3718      	adds	r7, #24
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	080117fc 	.word	0x080117fc
 800b878:	0800bead 	.word	0x0800bead
 800b87c:	20001210 	.word	0x20001210
 800b880:	2000120c 	.word	0x2000120c
 800b884:	200011f8 	.word	0x200011f8
 800b888:	200011f0 	.word	0x200011f0

0800b88c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b88c:	b480      	push	{r7}
 800b88e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b890:	4b04      	ldr	r3, [pc, #16]	@ (800b8a4 <vTaskSuspendAll+0x18>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	3301      	adds	r3, #1
 800b896:	4a03      	ldr	r2, [pc, #12]	@ (800b8a4 <vTaskSuspendAll+0x18>)
 800b898:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b89a:	bf00      	nop
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr
 800b8a4:	20001214 	.word	0x20001214

0800b8a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b8b6:	4b42      	ldr	r3, [pc, #264]	@ (800b9c0 <xTaskResumeAll+0x118>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d10b      	bne.n	800b8d6 <xTaskResumeAll+0x2e>
	__asm volatile
 800b8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	603b      	str	r3, [r7, #0]
}
 800b8d0:	bf00      	nop
 800b8d2:	bf00      	nop
 800b8d4:	e7fd      	b.n	800b8d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b8d6:	f001 f92f 	bl	800cb38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b8da:	4b39      	ldr	r3, [pc, #228]	@ (800b9c0 <xTaskResumeAll+0x118>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	3b01      	subs	r3, #1
 800b8e0:	4a37      	ldr	r2, [pc, #220]	@ (800b9c0 <xTaskResumeAll+0x118>)
 800b8e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8e4:	4b36      	ldr	r3, [pc, #216]	@ (800b9c0 <xTaskResumeAll+0x118>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d162      	bne.n	800b9b2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b8ec:	4b35      	ldr	r3, [pc, #212]	@ (800b9c4 <xTaskResumeAll+0x11c>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d05e      	beq.n	800b9b2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8f4:	e02f      	b.n	800b956 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8f6:	4b34      	ldr	r3, [pc, #208]	@ (800b9c8 <xTaskResumeAll+0x120>)
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	3318      	adds	r3, #24
 800b902:	4618      	mov	r0, r3
 800b904:	f7ff f85a 	bl	800a9bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	3304      	adds	r3, #4
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7ff f855 	bl	800a9bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b916:	4b2d      	ldr	r3, [pc, #180]	@ (800b9cc <xTaskResumeAll+0x124>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d903      	bls.n	800b926 <xTaskResumeAll+0x7e>
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b922:	4a2a      	ldr	r2, [pc, #168]	@ (800b9cc <xTaskResumeAll+0x124>)
 800b924:	6013      	str	r3, [r2, #0]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b92a:	4613      	mov	r3, r2
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	4413      	add	r3, r2
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	4a27      	ldr	r2, [pc, #156]	@ (800b9d0 <xTaskResumeAll+0x128>)
 800b934:	441a      	add	r2, r3
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	3304      	adds	r3, #4
 800b93a:	4619      	mov	r1, r3
 800b93c:	4610      	mov	r0, r2
 800b93e:	f7fe ffe0 	bl	800a902 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b946:	4b23      	ldr	r3, [pc, #140]	@ (800b9d4 <xTaskResumeAll+0x12c>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d302      	bcc.n	800b956 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b950:	4b21      	ldr	r3, [pc, #132]	@ (800b9d8 <xTaskResumeAll+0x130>)
 800b952:	2201      	movs	r2, #1
 800b954:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b956:	4b1c      	ldr	r3, [pc, #112]	@ (800b9c8 <xTaskResumeAll+0x120>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d1cb      	bne.n	800b8f6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d001      	beq.n	800b968 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b964:	f000 fb58 	bl	800c018 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b968:	4b1c      	ldr	r3, [pc, #112]	@ (800b9dc <xTaskResumeAll+0x134>)
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d010      	beq.n	800b996 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b974:	f000 f846 	bl	800ba04 <xTaskIncrementTick>
 800b978:	4603      	mov	r3, r0
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d002      	beq.n	800b984 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b97e:	4b16      	ldr	r3, [pc, #88]	@ (800b9d8 <xTaskResumeAll+0x130>)
 800b980:	2201      	movs	r2, #1
 800b982:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	3b01      	subs	r3, #1
 800b988:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d1f1      	bne.n	800b974 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b990:	4b12      	ldr	r3, [pc, #72]	@ (800b9dc <xTaskResumeAll+0x134>)
 800b992:	2200      	movs	r2, #0
 800b994:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b996:	4b10      	ldr	r3, [pc, #64]	@ (800b9d8 <xTaskResumeAll+0x130>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d009      	beq.n	800b9b2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b9a2:	4b0f      	ldr	r3, [pc, #60]	@ (800b9e0 <xTaskResumeAll+0x138>)
 800b9a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b9a8:	601a      	str	r2, [r3, #0]
 800b9aa:	f3bf 8f4f 	dsb	sy
 800b9ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9b2:	f001 f8f3 	bl	800cb9c <vPortExitCritical>

	return xAlreadyYielded;
 800b9b6:	68bb      	ldr	r3, [r7, #8]
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3710      	adds	r7, #16
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	20001214 	.word	0x20001214
 800b9c4:	200011ec 	.word	0x200011ec
 800b9c8:	200011ac 	.word	0x200011ac
 800b9cc:	200011f4 	.word	0x200011f4
 800b9d0:	20000d1c 	.word	0x20000d1c
 800b9d4:	20000d18 	.word	0x20000d18
 800b9d8:	20001200 	.word	0x20001200
 800b9dc:	200011fc 	.word	0x200011fc
 800b9e0:	e000ed04 	.word	0xe000ed04

0800b9e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b9ea:	4b05      	ldr	r3, [pc, #20]	@ (800ba00 <xTaskGetTickCount+0x1c>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b9f0:	687b      	ldr	r3, [r7, #4]
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	370c      	adds	r7, #12
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	200011f0 	.word	0x200011f0

0800ba04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b086      	sub	sp, #24
 800ba08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba0e:	4b4f      	ldr	r3, [pc, #316]	@ (800bb4c <xTaskIncrementTick+0x148>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f040 8090 	bne.w	800bb38 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba18:	4b4d      	ldr	r3, [pc, #308]	@ (800bb50 <xTaskIncrementTick+0x14c>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	3301      	adds	r3, #1
 800ba1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ba20:	4a4b      	ldr	r2, [pc, #300]	@ (800bb50 <xTaskIncrementTick+0x14c>)
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba26:	693b      	ldr	r3, [r7, #16]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d121      	bne.n	800ba70 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ba2c:	4b49      	ldr	r3, [pc, #292]	@ (800bb54 <xTaskIncrementTick+0x150>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d00b      	beq.n	800ba4e <xTaskIncrementTick+0x4a>
	__asm volatile
 800ba36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba3a:	f383 8811 	msr	BASEPRI, r3
 800ba3e:	f3bf 8f6f 	isb	sy
 800ba42:	f3bf 8f4f 	dsb	sy
 800ba46:	603b      	str	r3, [r7, #0]
}
 800ba48:	bf00      	nop
 800ba4a:	bf00      	nop
 800ba4c:	e7fd      	b.n	800ba4a <xTaskIncrementTick+0x46>
 800ba4e:	4b41      	ldr	r3, [pc, #260]	@ (800bb54 <xTaskIncrementTick+0x150>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	60fb      	str	r3, [r7, #12]
 800ba54:	4b40      	ldr	r3, [pc, #256]	@ (800bb58 <xTaskIncrementTick+0x154>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a3e      	ldr	r2, [pc, #248]	@ (800bb54 <xTaskIncrementTick+0x150>)
 800ba5a:	6013      	str	r3, [r2, #0]
 800ba5c:	4a3e      	ldr	r2, [pc, #248]	@ (800bb58 <xTaskIncrementTick+0x154>)
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6013      	str	r3, [r2, #0]
 800ba62:	4b3e      	ldr	r3, [pc, #248]	@ (800bb5c <xTaskIncrementTick+0x158>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	3301      	adds	r3, #1
 800ba68:	4a3c      	ldr	r2, [pc, #240]	@ (800bb5c <xTaskIncrementTick+0x158>)
 800ba6a:	6013      	str	r3, [r2, #0]
 800ba6c:	f000 fad4 	bl	800c018 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ba70:	4b3b      	ldr	r3, [pc, #236]	@ (800bb60 <xTaskIncrementTick+0x15c>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	693a      	ldr	r2, [r7, #16]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	d349      	bcc.n	800bb0e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba7a:	4b36      	ldr	r3, [pc, #216]	@ (800bb54 <xTaskIncrementTick+0x150>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d104      	bne.n	800ba8e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba84:	4b36      	ldr	r3, [pc, #216]	@ (800bb60 <xTaskIncrementTick+0x15c>)
 800ba86:	f04f 32ff 	mov.w	r2, #4294967295
 800ba8a:	601a      	str	r2, [r3, #0]
					break;
 800ba8c:	e03f      	b.n	800bb0e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba8e:	4b31      	ldr	r3, [pc, #196]	@ (800bb54 <xTaskIncrementTick+0x150>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	68db      	ldr	r3, [r3, #12]
 800ba94:	68db      	ldr	r3, [r3, #12]
 800ba96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ba9e:	693a      	ldr	r2, [r7, #16]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d203      	bcs.n	800baae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800baa6:	4a2e      	ldr	r2, [pc, #184]	@ (800bb60 <xTaskIncrementTick+0x15c>)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800baac:	e02f      	b.n	800bb0e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	3304      	adds	r3, #4
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7fe ff82 	bl	800a9bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800babc:	2b00      	cmp	r3, #0
 800babe:	d004      	beq.n	800baca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	3318      	adds	r3, #24
 800bac4:	4618      	mov	r0, r3
 800bac6:	f7fe ff79 	bl	800a9bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bace:	4b25      	ldr	r3, [pc, #148]	@ (800bb64 <xTaskIncrementTick+0x160>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d903      	bls.n	800bade <xTaskIncrementTick+0xda>
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bada:	4a22      	ldr	r2, [pc, #136]	@ (800bb64 <xTaskIncrementTick+0x160>)
 800badc:	6013      	str	r3, [r2, #0]
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bae2:	4613      	mov	r3, r2
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	4413      	add	r3, r2
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	4a1f      	ldr	r2, [pc, #124]	@ (800bb68 <xTaskIncrementTick+0x164>)
 800baec:	441a      	add	r2, r3
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	3304      	adds	r3, #4
 800baf2:	4619      	mov	r1, r3
 800baf4:	4610      	mov	r0, r2
 800baf6:	f7fe ff04 	bl	800a902 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bafe:	4b1b      	ldr	r3, [pc, #108]	@ (800bb6c <xTaskIncrementTick+0x168>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d3b8      	bcc.n	800ba7a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bb08:	2301      	movs	r3, #1
 800bb0a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb0c:	e7b5      	b.n	800ba7a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bb0e:	4b17      	ldr	r3, [pc, #92]	@ (800bb6c <xTaskIncrementTick+0x168>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb14:	4914      	ldr	r1, [pc, #80]	@ (800bb68 <xTaskIncrementTick+0x164>)
 800bb16:	4613      	mov	r3, r2
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	4413      	add	r3, r2
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	440b      	add	r3, r1
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d901      	bls.n	800bb2a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800bb26:	2301      	movs	r3, #1
 800bb28:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bb2a:	4b11      	ldr	r3, [pc, #68]	@ (800bb70 <xTaskIncrementTick+0x16c>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d007      	beq.n	800bb42 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800bb32:	2301      	movs	r3, #1
 800bb34:	617b      	str	r3, [r7, #20]
 800bb36:	e004      	b.n	800bb42 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bb38:	4b0e      	ldr	r3, [pc, #56]	@ (800bb74 <xTaskIncrementTick+0x170>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	4a0d      	ldr	r2, [pc, #52]	@ (800bb74 <xTaskIncrementTick+0x170>)
 800bb40:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bb42:	697b      	ldr	r3, [r7, #20]
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3718      	adds	r7, #24
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	20001214 	.word	0x20001214
 800bb50:	200011f0 	.word	0x200011f0
 800bb54:	200011a4 	.word	0x200011a4
 800bb58:	200011a8 	.word	0x200011a8
 800bb5c:	20001204 	.word	0x20001204
 800bb60:	2000120c 	.word	0x2000120c
 800bb64:	200011f4 	.word	0x200011f4
 800bb68:	20000d1c 	.word	0x20000d1c
 800bb6c:	20000d18 	.word	0x20000d18
 800bb70:	20001200 	.word	0x20001200
 800bb74:	200011fc 	.word	0x200011fc

0800bb78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b085      	sub	sp, #20
 800bb7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb7e:	4b28      	ldr	r3, [pc, #160]	@ (800bc20 <vTaskSwitchContext+0xa8>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d003      	beq.n	800bb8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb86:	4b27      	ldr	r3, [pc, #156]	@ (800bc24 <vTaskSwitchContext+0xac>)
 800bb88:	2201      	movs	r2, #1
 800bb8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb8c:	e042      	b.n	800bc14 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800bb8e:	4b25      	ldr	r3, [pc, #148]	@ (800bc24 <vTaskSwitchContext+0xac>)
 800bb90:	2200      	movs	r2, #0
 800bb92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb94:	4b24      	ldr	r3, [pc, #144]	@ (800bc28 <vTaskSwitchContext+0xb0>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	60fb      	str	r3, [r7, #12]
 800bb9a:	e011      	b.n	800bbc0 <vTaskSwitchContext+0x48>
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d10b      	bne.n	800bbba <vTaskSwitchContext+0x42>
	__asm volatile
 800bba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba6:	f383 8811 	msr	BASEPRI, r3
 800bbaa:	f3bf 8f6f 	isb	sy
 800bbae:	f3bf 8f4f 	dsb	sy
 800bbb2:	607b      	str	r3, [r7, #4]
}
 800bbb4:	bf00      	nop
 800bbb6:	bf00      	nop
 800bbb8:	e7fd      	b.n	800bbb6 <vTaskSwitchContext+0x3e>
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	3b01      	subs	r3, #1
 800bbbe:	60fb      	str	r3, [r7, #12]
 800bbc0:	491a      	ldr	r1, [pc, #104]	@ (800bc2c <vTaskSwitchContext+0xb4>)
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	4413      	add	r3, r2
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	440b      	add	r3, r1
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d0e3      	beq.n	800bb9c <vTaskSwitchContext+0x24>
 800bbd4:	68fa      	ldr	r2, [r7, #12]
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	4413      	add	r3, r2
 800bbdc:	009b      	lsls	r3, r3, #2
 800bbde:	4a13      	ldr	r2, [pc, #76]	@ (800bc2c <vTaskSwitchContext+0xb4>)
 800bbe0:	4413      	add	r3, r2
 800bbe2:	60bb      	str	r3, [r7, #8]
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	685a      	ldr	r2, [r3, #4]
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	605a      	str	r2, [r3, #4]
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	685a      	ldr	r2, [r3, #4]
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	3308      	adds	r3, #8
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d104      	bne.n	800bc04 <vTaskSwitchContext+0x8c>
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	685a      	ldr	r2, [r3, #4]
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	605a      	str	r2, [r3, #4]
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	685b      	ldr	r3, [r3, #4]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	4a09      	ldr	r2, [pc, #36]	@ (800bc30 <vTaskSwitchContext+0xb8>)
 800bc0c:	6013      	str	r3, [r2, #0]
 800bc0e:	4a06      	ldr	r2, [pc, #24]	@ (800bc28 <vTaskSwitchContext+0xb0>)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6013      	str	r3, [r2, #0]
}
 800bc14:	bf00      	nop
 800bc16:	3714      	adds	r7, #20
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr
 800bc20:	20001214 	.word	0x20001214
 800bc24:	20001200 	.word	0x20001200
 800bc28:	200011f4 	.word	0x200011f4
 800bc2c:	20000d1c 	.word	0x20000d1c
 800bc30:	20000d18 	.word	0x20000d18

0800bc34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b084      	sub	sp, #16
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d10b      	bne.n	800bc5c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bc44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc48:	f383 8811 	msr	BASEPRI, r3
 800bc4c:	f3bf 8f6f 	isb	sy
 800bc50:	f3bf 8f4f 	dsb	sy
 800bc54:	60fb      	str	r3, [r7, #12]
}
 800bc56:	bf00      	nop
 800bc58:	bf00      	nop
 800bc5a:	e7fd      	b.n	800bc58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc5c:	4b07      	ldr	r3, [pc, #28]	@ (800bc7c <vTaskPlaceOnEventList+0x48>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	3318      	adds	r3, #24
 800bc62:	4619      	mov	r1, r3
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f7fe fe70 	bl	800a94a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc6a:	2101      	movs	r1, #1
 800bc6c:	6838      	ldr	r0, [r7, #0]
 800bc6e:	f000 fa81 	bl	800c174 <prvAddCurrentTaskToDelayedList>
}
 800bc72:	bf00      	nop
 800bc74:	3710      	adds	r7, #16
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	20000d18 	.word	0x20000d18

0800bc80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b086      	sub	sp, #24
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d10b      	bne.n	800bcaa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bc92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc96:	f383 8811 	msr	BASEPRI, r3
 800bc9a:	f3bf 8f6f 	isb	sy
 800bc9e:	f3bf 8f4f 	dsb	sy
 800bca2:	617b      	str	r3, [r7, #20]
}
 800bca4:	bf00      	nop
 800bca6:	bf00      	nop
 800bca8:	e7fd      	b.n	800bca6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bcaa:	4b0a      	ldr	r3, [pc, #40]	@ (800bcd4 <vTaskPlaceOnEventListRestricted+0x54>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	3318      	adds	r3, #24
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f7fe fe25 	bl	800a902 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d002      	beq.n	800bcc4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bcbe:	f04f 33ff 	mov.w	r3, #4294967295
 800bcc2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bcc4:	6879      	ldr	r1, [r7, #4]
 800bcc6:	68b8      	ldr	r0, [r7, #8]
 800bcc8:	f000 fa54 	bl	800c174 <prvAddCurrentTaskToDelayedList>
	}
 800bccc:	bf00      	nop
 800bcce:	3718      	adds	r7, #24
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	20000d18 	.word	0x20000d18

0800bcd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b086      	sub	sp, #24
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	68db      	ldr	r3, [r3, #12]
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d10b      	bne.n	800bd06 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bcee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf2:	f383 8811 	msr	BASEPRI, r3
 800bcf6:	f3bf 8f6f 	isb	sy
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	60fb      	str	r3, [r7, #12]
}
 800bd00:	bf00      	nop
 800bd02:	bf00      	nop
 800bd04:	e7fd      	b.n	800bd02 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	3318      	adds	r3, #24
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7fe fe56 	bl	800a9bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd10:	4b1d      	ldr	r3, [pc, #116]	@ (800bd88 <xTaskRemoveFromEventList+0xb0>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d11d      	bne.n	800bd54 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	3304      	adds	r3, #4
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7fe fe4d 	bl	800a9bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd26:	4b19      	ldr	r3, [pc, #100]	@ (800bd8c <xTaskRemoveFromEventList+0xb4>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d903      	bls.n	800bd36 <xTaskRemoveFromEventList+0x5e>
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd32:	4a16      	ldr	r2, [pc, #88]	@ (800bd8c <xTaskRemoveFromEventList+0xb4>)
 800bd34:	6013      	str	r3, [r2, #0]
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd3a:	4613      	mov	r3, r2
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	4413      	add	r3, r2
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	4a13      	ldr	r2, [pc, #76]	@ (800bd90 <xTaskRemoveFromEventList+0xb8>)
 800bd44:	441a      	add	r2, r3
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	3304      	adds	r3, #4
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	4610      	mov	r0, r2
 800bd4e:	f7fe fdd8 	bl	800a902 <vListInsertEnd>
 800bd52:	e005      	b.n	800bd60 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	3318      	adds	r3, #24
 800bd58:	4619      	mov	r1, r3
 800bd5a:	480e      	ldr	r0, [pc, #56]	@ (800bd94 <xTaskRemoveFromEventList+0xbc>)
 800bd5c:	f7fe fdd1 	bl	800a902 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd64:	4b0c      	ldr	r3, [pc, #48]	@ (800bd98 <xTaskRemoveFromEventList+0xc0>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	d905      	bls.n	800bd7a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bd72:	4b0a      	ldr	r3, [pc, #40]	@ (800bd9c <xTaskRemoveFromEventList+0xc4>)
 800bd74:	2201      	movs	r2, #1
 800bd76:	601a      	str	r2, [r3, #0]
 800bd78:	e001      	b.n	800bd7e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bd7e:	697b      	ldr	r3, [r7, #20]
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3718      	adds	r7, #24
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	20001214 	.word	0x20001214
 800bd8c:	200011f4 	.word	0x200011f4
 800bd90:	20000d1c 	.word	0x20000d1c
 800bd94:	200011ac 	.word	0x200011ac
 800bd98:	20000d18 	.word	0x20000d18
 800bd9c:	20001200 	.word	0x20001200

0800bda0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bda8:	4b06      	ldr	r3, [pc, #24]	@ (800bdc4 <vTaskInternalSetTimeOutState+0x24>)
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bdb0:	4b05      	ldr	r3, [pc, #20]	@ (800bdc8 <vTaskInternalSetTimeOutState+0x28>)
 800bdb2:	681a      	ldr	r2, [r3, #0]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	605a      	str	r2, [r3, #4]
}
 800bdb8:	bf00      	nop
 800bdba:	370c      	adds	r7, #12
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr
 800bdc4:	20001204 	.word	0x20001204
 800bdc8:	200011f0 	.word	0x200011f0

0800bdcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b088      	sub	sp, #32
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d10b      	bne.n	800bdf4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bde0:	f383 8811 	msr	BASEPRI, r3
 800bde4:	f3bf 8f6f 	isb	sy
 800bde8:	f3bf 8f4f 	dsb	sy
 800bdec:	613b      	str	r3, [r7, #16]
}
 800bdee:	bf00      	nop
 800bdf0:	bf00      	nop
 800bdf2:	e7fd      	b.n	800bdf0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d10b      	bne.n	800be12 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bdfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdfe:	f383 8811 	msr	BASEPRI, r3
 800be02:	f3bf 8f6f 	isb	sy
 800be06:	f3bf 8f4f 	dsb	sy
 800be0a:	60fb      	str	r3, [r7, #12]
}
 800be0c:	bf00      	nop
 800be0e:	bf00      	nop
 800be10:	e7fd      	b.n	800be0e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800be12:	f000 fe91 	bl	800cb38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800be16:	4b1d      	ldr	r3, [pc, #116]	@ (800be8c <xTaskCheckForTimeOut+0xc0>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	69ba      	ldr	r2, [r7, #24]
 800be22:	1ad3      	subs	r3, r2, r3
 800be24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be2e:	d102      	bne.n	800be36 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800be30:	2300      	movs	r3, #0
 800be32:	61fb      	str	r3, [r7, #28]
 800be34:	e023      	b.n	800be7e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681a      	ldr	r2, [r3, #0]
 800be3a:	4b15      	ldr	r3, [pc, #84]	@ (800be90 <xTaskCheckForTimeOut+0xc4>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d007      	beq.n	800be52 <xTaskCheckForTimeOut+0x86>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	69ba      	ldr	r2, [r7, #24]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d302      	bcc.n	800be52 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800be4c:	2301      	movs	r3, #1
 800be4e:	61fb      	str	r3, [r7, #28]
 800be50:	e015      	b.n	800be7e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	697a      	ldr	r2, [r7, #20]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d20b      	bcs.n	800be74 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	1ad2      	subs	r2, r2, r3
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f7ff ff99 	bl	800bda0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800be6e:	2300      	movs	r3, #0
 800be70:	61fb      	str	r3, [r7, #28]
 800be72:	e004      	b.n	800be7e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	2200      	movs	r2, #0
 800be78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800be7a:	2301      	movs	r3, #1
 800be7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800be7e:	f000 fe8d 	bl	800cb9c <vPortExitCritical>

	return xReturn;
 800be82:	69fb      	ldr	r3, [r7, #28]
}
 800be84:	4618      	mov	r0, r3
 800be86:	3720      	adds	r7, #32
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	200011f0 	.word	0x200011f0
 800be90:	20001204 	.word	0x20001204

0800be94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800be94:	b480      	push	{r7}
 800be96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800be98:	4b03      	ldr	r3, [pc, #12]	@ (800bea8 <vTaskMissedYield+0x14>)
 800be9a:	2201      	movs	r2, #1
 800be9c:	601a      	str	r2, [r3, #0]
}
 800be9e:	bf00      	nop
 800bea0:	46bd      	mov	sp, r7
 800bea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea6:	4770      	bx	lr
 800bea8:	20001200 	.word	0x20001200

0800beac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800beb4:	f000 f852 	bl	800bf5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800beb8:	4b06      	ldr	r3, [pc, #24]	@ (800bed4 <prvIdleTask+0x28>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d9f9      	bls.n	800beb4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bec0:	4b05      	ldr	r3, [pc, #20]	@ (800bed8 <prvIdleTask+0x2c>)
 800bec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bec6:	601a      	str	r2, [r3, #0]
 800bec8:	f3bf 8f4f 	dsb	sy
 800becc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bed0:	e7f0      	b.n	800beb4 <prvIdleTask+0x8>
 800bed2:	bf00      	nop
 800bed4:	20000d1c 	.word	0x20000d1c
 800bed8:	e000ed04 	.word	0xe000ed04

0800bedc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bee2:	2300      	movs	r3, #0
 800bee4:	607b      	str	r3, [r7, #4]
 800bee6:	e00c      	b.n	800bf02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	4613      	mov	r3, r2
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	4413      	add	r3, r2
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	4a12      	ldr	r2, [pc, #72]	@ (800bf3c <prvInitialiseTaskLists+0x60>)
 800bef4:	4413      	add	r3, r2
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fe fcd6 	bl	800a8a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	3301      	adds	r3, #1
 800bf00:	607b      	str	r3, [r7, #4]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2b37      	cmp	r3, #55	@ 0x37
 800bf06:	d9ef      	bls.n	800bee8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bf08:	480d      	ldr	r0, [pc, #52]	@ (800bf40 <prvInitialiseTaskLists+0x64>)
 800bf0a:	f7fe fccd 	bl	800a8a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bf0e:	480d      	ldr	r0, [pc, #52]	@ (800bf44 <prvInitialiseTaskLists+0x68>)
 800bf10:	f7fe fcca 	bl	800a8a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bf14:	480c      	ldr	r0, [pc, #48]	@ (800bf48 <prvInitialiseTaskLists+0x6c>)
 800bf16:	f7fe fcc7 	bl	800a8a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bf1a:	480c      	ldr	r0, [pc, #48]	@ (800bf4c <prvInitialiseTaskLists+0x70>)
 800bf1c:	f7fe fcc4 	bl	800a8a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bf20:	480b      	ldr	r0, [pc, #44]	@ (800bf50 <prvInitialiseTaskLists+0x74>)
 800bf22:	f7fe fcc1 	bl	800a8a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bf26:	4b0b      	ldr	r3, [pc, #44]	@ (800bf54 <prvInitialiseTaskLists+0x78>)
 800bf28:	4a05      	ldr	r2, [pc, #20]	@ (800bf40 <prvInitialiseTaskLists+0x64>)
 800bf2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bf2c:	4b0a      	ldr	r3, [pc, #40]	@ (800bf58 <prvInitialiseTaskLists+0x7c>)
 800bf2e:	4a05      	ldr	r2, [pc, #20]	@ (800bf44 <prvInitialiseTaskLists+0x68>)
 800bf30:	601a      	str	r2, [r3, #0]
}
 800bf32:	bf00      	nop
 800bf34:	3708      	adds	r7, #8
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	20000d1c 	.word	0x20000d1c
 800bf40:	2000117c 	.word	0x2000117c
 800bf44:	20001190 	.word	0x20001190
 800bf48:	200011ac 	.word	0x200011ac
 800bf4c:	200011c0 	.word	0x200011c0
 800bf50:	200011d8 	.word	0x200011d8
 800bf54:	200011a4 	.word	0x200011a4
 800bf58:	200011a8 	.word	0x200011a8

0800bf5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf62:	e019      	b.n	800bf98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bf64:	f000 fde8 	bl	800cb38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf68:	4b10      	ldr	r3, [pc, #64]	@ (800bfac <prvCheckTasksWaitingTermination+0x50>)
 800bf6a:	68db      	ldr	r3, [r3, #12]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	3304      	adds	r3, #4
 800bf74:	4618      	mov	r0, r3
 800bf76:	f7fe fd21 	bl	800a9bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bf7a:	4b0d      	ldr	r3, [pc, #52]	@ (800bfb0 <prvCheckTasksWaitingTermination+0x54>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	3b01      	subs	r3, #1
 800bf80:	4a0b      	ldr	r2, [pc, #44]	@ (800bfb0 <prvCheckTasksWaitingTermination+0x54>)
 800bf82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bf84:	4b0b      	ldr	r3, [pc, #44]	@ (800bfb4 <prvCheckTasksWaitingTermination+0x58>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	3b01      	subs	r3, #1
 800bf8a:	4a0a      	ldr	r2, [pc, #40]	@ (800bfb4 <prvCheckTasksWaitingTermination+0x58>)
 800bf8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bf8e:	f000 fe05 	bl	800cb9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f000 f810 	bl	800bfb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf98:	4b06      	ldr	r3, [pc, #24]	@ (800bfb4 <prvCheckTasksWaitingTermination+0x58>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d1e1      	bne.n	800bf64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bfa0:	bf00      	nop
 800bfa2:	bf00      	nop
 800bfa4:	3708      	adds	r7, #8
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	200011c0 	.word	0x200011c0
 800bfb0:	200011ec 	.word	0x200011ec
 800bfb4:	200011d4 	.word	0x200011d4

0800bfb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d108      	bne.n	800bfdc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f000 ffa2 	bl	800cf18 <vPortFree>
				vPortFree( pxTCB );
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f000 ff9f 	bl	800cf18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bfda:	e019      	b.n	800c010 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d103      	bne.n	800bfee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 ff96 	bl	800cf18 <vPortFree>
	}
 800bfec:	e010      	b.n	800c010 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bff4:	2b02      	cmp	r3, #2
 800bff6:	d00b      	beq.n	800c010 <prvDeleteTCB+0x58>
	__asm volatile
 800bff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bffc:	f383 8811 	msr	BASEPRI, r3
 800c000:	f3bf 8f6f 	isb	sy
 800c004:	f3bf 8f4f 	dsb	sy
 800c008:	60fb      	str	r3, [r7, #12]
}
 800c00a:	bf00      	nop
 800c00c:	bf00      	nop
 800c00e:	e7fd      	b.n	800c00c <prvDeleteTCB+0x54>
	}
 800c010:	bf00      	nop
 800c012:	3710      	adds	r7, #16
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c018:	b480      	push	{r7}
 800c01a:	b083      	sub	sp, #12
 800c01c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c01e:	4b0c      	ldr	r3, [pc, #48]	@ (800c050 <prvResetNextTaskUnblockTime+0x38>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d104      	bne.n	800c032 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c028:	4b0a      	ldr	r3, [pc, #40]	@ (800c054 <prvResetNextTaskUnblockTime+0x3c>)
 800c02a:	f04f 32ff 	mov.w	r2, #4294967295
 800c02e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c030:	e008      	b.n	800c044 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c032:	4b07      	ldr	r3, [pc, #28]	@ (800c050 <prvResetNextTaskUnblockTime+0x38>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	4a04      	ldr	r2, [pc, #16]	@ (800c054 <prvResetNextTaskUnblockTime+0x3c>)
 800c042:	6013      	str	r3, [r2, #0]
}
 800c044:	bf00      	nop
 800c046:	370c      	adds	r7, #12
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr
 800c050:	200011a4 	.word	0x200011a4
 800c054:	2000120c 	.word	0x2000120c

0800c058 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c058:	b480      	push	{r7}
 800c05a:	b083      	sub	sp, #12
 800c05c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c05e:	4b0b      	ldr	r3, [pc, #44]	@ (800c08c <xTaskGetSchedulerState+0x34>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d102      	bne.n	800c06c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c066:	2301      	movs	r3, #1
 800c068:	607b      	str	r3, [r7, #4]
 800c06a:	e008      	b.n	800c07e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c06c:	4b08      	ldr	r3, [pc, #32]	@ (800c090 <xTaskGetSchedulerState+0x38>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d102      	bne.n	800c07a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c074:	2302      	movs	r3, #2
 800c076:	607b      	str	r3, [r7, #4]
 800c078:	e001      	b.n	800c07e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c07a:	2300      	movs	r3, #0
 800c07c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c07e:	687b      	ldr	r3, [r7, #4]
	}
 800c080:	4618      	mov	r0, r3
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr
 800c08c:	200011f8 	.word	0x200011f8
 800c090:	20001214 	.word	0x20001214

0800c094 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c094:	b580      	push	{r7, lr}
 800c096:	b086      	sub	sp, #24
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d058      	beq.n	800c15c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c0aa:	4b2f      	ldr	r3, [pc, #188]	@ (800c168 <xTaskPriorityDisinherit+0xd4>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	693a      	ldr	r2, [r7, #16]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d00b      	beq.n	800c0cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c0b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b8:	f383 8811 	msr	BASEPRI, r3
 800c0bc:	f3bf 8f6f 	isb	sy
 800c0c0:	f3bf 8f4f 	dsb	sy
 800c0c4:	60fb      	str	r3, [r7, #12]
}
 800c0c6:	bf00      	nop
 800c0c8:	bf00      	nop
 800c0ca:	e7fd      	b.n	800c0c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d10b      	bne.n	800c0ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c0d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0d8:	f383 8811 	msr	BASEPRI, r3
 800c0dc:	f3bf 8f6f 	isb	sy
 800c0e0:	f3bf 8f4f 	dsb	sy
 800c0e4:	60bb      	str	r3, [r7, #8]
}
 800c0e6:	bf00      	nop
 800c0e8:	bf00      	nop
 800c0ea:	e7fd      	b.n	800c0e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c0f0:	1e5a      	subs	r2, r3, #1
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d02c      	beq.n	800c15c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c106:	2b00      	cmp	r3, #0
 800c108:	d128      	bne.n	800c15c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	3304      	adds	r3, #4
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fe fc54 	bl	800a9bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c120:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c12c:	4b0f      	ldr	r3, [pc, #60]	@ (800c16c <xTaskPriorityDisinherit+0xd8>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	429a      	cmp	r2, r3
 800c132:	d903      	bls.n	800c13c <xTaskPriorityDisinherit+0xa8>
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c138:	4a0c      	ldr	r2, [pc, #48]	@ (800c16c <xTaskPriorityDisinherit+0xd8>)
 800c13a:	6013      	str	r3, [r2, #0]
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c140:	4613      	mov	r3, r2
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	4413      	add	r3, r2
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	4a09      	ldr	r2, [pc, #36]	@ (800c170 <xTaskPriorityDisinherit+0xdc>)
 800c14a:	441a      	add	r2, r3
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	3304      	adds	r3, #4
 800c150:	4619      	mov	r1, r3
 800c152:	4610      	mov	r0, r2
 800c154:	f7fe fbd5 	bl	800a902 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c158:	2301      	movs	r3, #1
 800c15a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c15c:	697b      	ldr	r3, [r7, #20]
	}
 800c15e:	4618      	mov	r0, r3
 800c160:	3718      	adds	r7, #24
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	20000d18 	.word	0x20000d18
 800c16c:	200011f4 	.word	0x200011f4
 800c170:	20000d1c 	.word	0x20000d1c

0800c174 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b084      	sub	sp, #16
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c17e:	4b21      	ldr	r3, [pc, #132]	@ (800c204 <prvAddCurrentTaskToDelayedList+0x90>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c184:	4b20      	ldr	r3, [pc, #128]	@ (800c208 <prvAddCurrentTaskToDelayedList+0x94>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	3304      	adds	r3, #4
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7fe fc16 	bl	800a9bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c196:	d10a      	bne.n	800c1ae <prvAddCurrentTaskToDelayedList+0x3a>
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d007      	beq.n	800c1ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c19e:	4b1a      	ldr	r3, [pc, #104]	@ (800c208 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	3304      	adds	r3, #4
 800c1a4:	4619      	mov	r1, r3
 800c1a6:	4819      	ldr	r0, [pc, #100]	@ (800c20c <prvAddCurrentTaskToDelayedList+0x98>)
 800c1a8:	f7fe fbab 	bl	800a902 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c1ac:	e026      	b.n	800c1fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c1ae:	68fa      	ldr	r2, [r7, #12]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c1b6:	4b14      	ldr	r3, [pc, #80]	@ (800c208 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	68ba      	ldr	r2, [r7, #8]
 800c1bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c1be:	68ba      	ldr	r2, [r7, #8]
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d209      	bcs.n	800c1da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1c6:	4b12      	ldr	r3, [pc, #72]	@ (800c210 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	4b0f      	ldr	r3, [pc, #60]	@ (800c208 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	3304      	adds	r3, #4
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	4610      	mov	r0, r2
 800c1d4:	f7fe fbb9 	bl	800a94a <vListInsert>
}
 800c1d8:	e010      	b.n	800c1fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1da:	4b0e      	ldr	r3, [pc, #56]	@ (800c214 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	4b0a      	ldr	r3, [pc, #40]	@ (800c208 <prvAddCurrentTaskToDelayedList+0x94>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	3304      	adds	r3, #4
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	4610      	mov	r0, r2
 800c1e8:	f7fe fbaf 	bl	800a94a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c1ec:	4b0a      	ldr	r3, [pc, #40]	@ (800c218 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	68ba      	ldr	r2, [r7, #8]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d202      	bcs.n	800c1fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c1f6:	4a08      	ldr	r2, [pc, #32]	@ (800c218 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	6013      	str	r3, [r2, #0]
}
 800c1fc:	bf00      	nop
 800c1fe:	3710      	adds	r7, #16
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}
 800c204:	200011f0 	.word	0x200011f0
 800c208:	20000d18 	.word	0x20000d18
 800c20c:	200011d8 	.word	0x200011d8
 800c210:	200011a8 	.word	0x200011a8
 800c214:	200011a4 	.word	0x200011a4
 800c218:	2000120c 	.word	0x2000120c

0800c21c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b08a      	sub	sp, #40	@ 0x28
 800c220:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c222:	2300      	movs	r3, #0
 800c224:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c226:	f000 fb13 	bl	800c850 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c22a:	4b1d      	ldr	r3, [pc, #116]	@ (800c2a0 <xTimerCreateTimerTask+0x84>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d021      	beq.n	800c276 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c232:	2300      	movs	r3, #0
 800c234:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c236:	2300      	movs	r3, #0
 800c238:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c23a:	1d3a      	adds	r2, r7, #4
 800c23c:	f107 0108 	add.w	r1, r7, #8
 800c240:	f107 030c 	add.w	r3, r7, #12
 800c244:	4618      	mov	r0, r3
 800c246:	f7fe fb15 	bl	800a874 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c24a:	6879      	ldr	r1, [r7, #4]
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	68fa      	ldr	r2, [r7, #12]
 800c250:	9202      	str	r2, [sp, #8]
 800c252:	9301      	str	r3, [sp, #4]
 800c254:	2302      	movs	r3, #2
 800c256:	9300      	str	r3, [sp, #0]
 800c258:	2300      	movs	r3, #0
 800c25a:	460a      	mov	r2, r1
 800c25c:	4911      	ldr	r1, [pc, #68]	@ (800c2a4 <xTimerCreateTimerTask+0x88>)
 800c25e:	4812      	ldr	r0, [pc, #72]	@ (800c2a8 <xTimerCreateTimerTask+0x8c>)
 800c260:	f7ff f8d0 	bl	800b404 <xTaskCreateStatic>
 800c264:	4603      	mov	r3, r0
 800c266:	4a11      	ldr	r2, [pc, #68]	@ (800c2ac <xTimerCreateTimerTask+0x90>)
 800c268:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c26a:	4b10      	ldr	r3, [pc, #64]	@ (800c2ac <xTimerCreateTimerTask+0x90>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d001      	beq.n	800c276 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c272:	2301      	movs	r3, #1
 800c274:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d10b      	bne.n	800c294 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c27c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c280:	f383 8811 	msr	BASEPRI, r3
 800c284:	f3bf 8f6f 	isb	sy
 800c288:	f3bf 8f4f 	dsb	sy
 800c28c:	613b      	str	r3, [r7, #16]
}
 800c28e:	bf00      	nop
 800c290:	bf00      	nop
 800c292:	e7fd      	b.n	800c290 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c294:	697b      	ldr	r3, [r7, #20]
}
 800c296:	4618      	mov	r0, r3
 800c298:	3718      	adds	r7, #24
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	20001248 	.word	0x20001248
 800c2a4:	08011804 	.word	0x08011804
 800c2a8:	0800c3e9 	.word	0x0800c3e9
 800c2ac:	2000124c 	.word	0x2000124c

0800c2b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b08a      	sub	sp, #40	@ 0x28
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	60f8      	str	r0, [r7, #12]
 800c2b8:	60b9      	str	r1, [r7, #8]
 800c2ba:	607a      	str	r2, [r7, #4]
 800c2bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d10b      	bne.n	800c2e0 <xTimerGenericCommand+0x30>
	__asm volatile
 800c2c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2cc:	f383 8811 	msr	BASEPRI, r3
 800c2d0:	f3bf 8f6f 	isb	sy
 800c2d4:	f3bf 8f4f 	dsb	sy
 800c2d8:	623b      	str	r3, [r7, #32]
}
 800c2da:	bf00      	nop
 800c2dc:	bf00      	nop
 800c2de:	e7fd      	b.n	800c2dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c2e0:	4b19      	ldr	r3, [pc, #100]	@ (800c348 <xTimerGenericCommand+0x98>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d02a      	beq.n	800c33e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	2b05      	cmp	r3, #5
 800c2f8:	dc18      	bgt.n	800c32c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c2fa:	f7ff fead 	bl	800c058 <xTaskGetSchedulerState>
 800c2fe:	4603      	mov	r3, r0
 800c300:	2b02      	cmp	r3, #2
 800c302:	d109      	bne.n	800c318 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c304:	4b10      	ldr	r3, [pc, #64]	@ (800c348 <xTimerGenericCommand+0x98>)
 800c306:	6818      	ldr	r0, [r3, #0]
 800c308:	f107 0110 	add.w	r1, r7, #16
 800c30c:	2300      	movs	r3, #0
 800c30e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c310:	f7fe fc88 	bl	800ac24 <xQueueGenericSend>
 800c314:	6278      	str	r0, [r7, #36]	@ 0x24
 800c316:	e012      	b.n	800c33e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c318:	4b0b      	ldr	r3, [pc, #44]	@ (800c348 <xTimerGenericCommand+0x98>)
 800c31a:	6818      	ldr	r0, [r3, #0]
 800c31c:	f107 0110 	add.w	r1, r7, #16
 800c320:	2300      	movs	r3, #0
 800c322:	2200      	movs	r2, #0
 800c324:	f7fe fc7e 	bl	800ac24 <xQueueGenericSend>
 800c328:	6278      	str	r0, [r7, #36]	@ 0x24
 800c32a:	e008      	b.n	800c33e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c32c:	4b06      	ldr	r3, [pc, #24]	@ (800c348 <xTimerGenericCommand+0x98>)
 800c32e:	6818      	ldr	r0, [r3, #0]
 800c330:	f107 0110 	add.w	r1, r7, #16
 800c334:	2300      	movs	r3, #0
 800c336:	683a      	ldr	r2, [r7, #0]
 800c338:	f7fe fd76 	bl	800ae28 <xQueueGenericSendFromISR>
 800c33c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c340:	4618      	mov	r0, r3
 800c342:	3728      	adds	r7, #40	@ 0x28
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	20001248 	.word	0x20001248

0800c34c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b088      	sub	sp, #32
 800c350:	af02      	add	r7, sp, #8
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c356:	4b23      	ldr	r3, [pc, #140]	@ (800c3e4 <prvProcessExpiredTimer+0x98>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	68db      	ldr	r3, [r3, #12]
 800c35e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	3304      	adds	r3, #4
 800c364:	4618      	mov	r0, r3
 800c366:	f7fe fb29 	bl	800a9bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c370:	f003 0304 	and.w	r3, r3, #4
 800c374:	2b00      	cmp	r3, #0
 800c376:	d023      	beq.n	800c3c0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	699a      	ldr	r2, [r3, #24]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	18d1      	adds	r1, r2, r3
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	683a      	ldr	r2, [r7, #0]
 800c384:	6978      	ldr	r0, [r7, #20]
 800c386:	f000 f8d5 	bl	800c534 <prvInsertTimerInActiveList>
 800c38a:	4603      	mov	r3, r0
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d020      	beq.n	800c3d2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c390:	2300      	movs	r3, #0
 800c392:	9300      	str	r3, [sp, #0]
 800c394:	2300      	movs	r3, #0
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	2100      	movs	r1, #0
 800c39a:	6978      	ldr	r0, [r7, #20]
 800c39c:	f7ff ff88 	bl	800c2b0 <xTimerGenericCommand>
 800c3a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d114      	bne.n	800c3d2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c3a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ac:	f383 8811 	msr	BASEPRI, r3
 800c3b0:	f3bf 8f6f 	isb	sy
 800c3b4:	f3bf 8f4f 	dsb	sy
 800c3b8:	60fb      	str	r3, [r7, #12]
}
 800c3ba:	bf00      	nop
 800c3bc:	bf00      	nop
 800c3be:	e7fd      	b.n	800c3bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3c6:	f023 0301 	bic.w	r3, r3, #1
 800c3ca:	b2da      	uxtb	r2, r3
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	6a1b      	ldr	r3, [r3, #32]
 800c3d6:	6978      	ldr	r0, [r7, #20]
 800c3d8:	4798      	blx	r3
}
 800c3da:	bf00      	nop
 800c3dc:	3718      	adds	r7, #24
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	20001240 	.word	0x20001240

0800c3e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c3f0:	f107 0308 	add.w	r3, r7, #8
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f000 f859 	bl	800c4ac <prvGetNextExpireTime>
 800c3fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	4619      	mov	r1, r3
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f000 f805 	bl	800c410 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c406:	f000 f8d7 	bl	800c5b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c40a:	bf00      	nop
 800c40c:	e7f0      	b.n	800c3f0 <prvTimerTask+0x8>
	...

0800c410 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c41a:	f7ff fa37 	bl	800b88c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c41e:	f107 0308 	add.w	r3, r7, #8
 800c422:	4618      	mov	r0, r3
 800c424:	f000 f866 	bl	800c4f4 <prvSampleTimeNow>
 800c428:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d130      	bne.n	800c492 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d10a      	bne.n	800c44c <prvProcessTimerOrBlockTask+0x3c>
 800c436:	687a      	ldr	r2, [r7, #4]
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d806      	bhi.n	800c44c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c43e:	f7ff fa33 	bl	800b8a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c442:	68f9      	ldr	r1, [r7, #12]
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f7ff ff81 	bl	800c34c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c44a:	e024      	b.n	800c496 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d008      	beq.n	800c464 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c452:	4b13      	ldr	r3, [pc, #76]	@ (800c4a0 <prvProcessTimerOrBlockTask+0x90>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d101      	bne.n	800c460 <prvProcessTimerOrBlockTask+0x50>
 800c45c:	2301      	movs	r3, #1
 800c45e:	e000      	b.n	800c462 <prvProcessTimerOrBlockTask+0x52>
 800c460:	2300      	movs	r3, #0
 800c462:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c464:	4b0f      	ldr	r3, [pc, #60]	@ (800c4a4 <prvProcessTimerOrBlockTask+0x94>)
 800c466:	6818      	ldr	r0, [r3, #0]
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	1ad3      	subs	r3, r2, r3
 800c46e:	683a      	ldr	r2, [r7, #0]
 800c470:	4619      	mov	r1, r3
 800c472:	f7fe ff93 	bl	800b39c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c476:	f7ff fa17 	bl	800b8a8 <xTaskResumeAll>
 800c47a:	4603      	mov	r3, r0
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d10a      	bne.n	800c496 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c480:	4b09      	ldr	r3, [pc, #36]	@ (800c4a8 <prvProcessTimerOrBlockTask+0x98>)
 800c482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c486:	601a      	str	r2, [r3, #0]
 800c488:	f3bf 8f4f 	dsb	sy
 800c48c:	f3bf 8f6f 	isb	sy
}
 800c490:	e001      	b.n	800c496 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c492:	f7ff fa09 	bl	800b8a8 <xTaskResumeAll>
}
 800c496:	bf00      	nop
 800c498:	3710      	adds	r7, #16
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	20001244 	.word	0x20001244
 800c4a4:	20001248 	.word	0x20001248
 800c4a8:	e000ed04 	.word	0xe000ed04

0800c4ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b085      	sub	sp, #20
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c4b4:	4b0e      	ldr	r3, [pc, #56]	@ (800c4f0 <prvGetNextExpireTime+0x44>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d101      	bne.n	800c4c2 <prvGetNextExpireTime+0x16>
 800c4be:	2201      	movs	r2, #1
 800c4c0:	e000      	b.n	800c4c4 <prvGetNextExpireTime+0x18>
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d105      	bne.n	800c4dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c4d0:	4b07      	ldr	r3, [pc, #28]	@ (800c4f0 <prvGetNextExpireTime+0x44>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	68db      	ldr	r3, [r3, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	60fb      	str	r3, [r7, #12]
 800c4da:	e001      	b.n	800c4e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3714      	adds	r7, #20
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr
 800c4ee:	bf00      	nop
 800c4f0:	20001240 	.word	0x20001240

0800c4f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c4fc:	f7ff fa72 	bl	800b9e4 <xTaskGetTickCount>
 800c500:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c502:	4b0b      	ldr	r3, [pc, #44]	@ (800c530 <prvSampleTimeNow+0x3c>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	68fa      	ldr	r2, [r7, #12]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d205      	bcs.n	800c518 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c50c:	f000 f93a 	bl	800c784 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2201      	movs	r2, #1
 800c514:	601a      	str	r2, [r3, #0]
 800c516:	e002      	b.n	800c51e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2200      	movs	r2, #0
 800c51c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c51e:	4a04      	ldr	r2, [pc, #16]	@ (800c530 <prvSampleTimeNow+0x3c>)
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c524:	68fb      	ldr	r3, [r7, #12]
}
 800c526:	4618      	mov	r0, r3
 800c528:	3710      	adds	r7, #16
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	20001250 	.word	0x20001250

0800c534 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b086      	sub	sp, #24
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	607a      	str	r2, [r7, #4]
 800c540:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c542:	2300      	movs	r3, #0
 800c544:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	68ba      	ldr	r2, [r7, #8]
 800c54a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	68fa      	ldr	r2, [r7, #12]
 800c550:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c552:	68ba      	ldr	r2, [r7, #8]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	429a      	cmp	r2, r3
 800c558:	d812      	bhi.n	800c580 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	1ad2      	subs	r2, r2, r3
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	699b      	ldr	r3, [r3, #24]
 800c564:	429a      	cmp	r2, r3
 800c566:	d302      	bcc.n	800c56e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c568:	2301      	movs	r3, #1
 800c56a:	617b      	str	r3, [r7, #20]
 800c56c:	e01b      	b.n	800c5a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c56e:	4b10      	ldr	r3, [pc, #64]	@ (800c5b0 <prvInsertTimerInActiveList+0x7c>)
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	3304      	adds	r3, #4
 800c576:	4619      	mov	r1, r3
 800c578:	4610      	mov	r0, r2
 800c57a:	f7fe f9e6 	bl	800a94a <vListInsert>
 800c57e:	e012      	b.n	800c5a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c580:	687a      	ldr	r2, [r7, #4]
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	429a      	cmp	r2, r3
 800c586:	d206      	bcs.n	800c596 <prvInsertTimerInActiveList+0x62>
 800c588:	68ba      	ldr	r2, [r7, #8]
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d302      	bcc.n	800c596 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c590:	2301      	movs	r3, #1
 800c592:	617b      	str	r3, [r7, #20]
 800c594:	e007      	b.n	800c5a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c596:	4b07      	ldr	r3, [pc, #28]	@ (800c5b4 <prvInsertTimerInActiveList+0x80>)
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	3304      	adds	r3, #4
 800c59e:	4619      	mov	r1, r3
 800c5a0:	4610      	mov	r0, r2
 800c5a2:	f7fe f9d2 	bl	800a94a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c5a6:	697b      	ldr	r3, [r7, #20]
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3718      	adds	r7, #24
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	20001244 	.word	0x20001244
 800c5b4:	20001240 	.word	0x20001240

0800c5b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b08e      	sub	sp, #56	@ 0x38
 800c5bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c5be:	e0ce      	b.n	800c75e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	da19      	bge.n	800c5fa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c5c6:	1d3b      	adds	r3, r7, #4
 800c5c8:	3304      	adds	r3, #4
 800c5ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c5cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d10b      	bne.n	800c5ea <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5d6:	f383 8811 	msr	BASEPRI, r3
 800c5da:	f3bf 8f6f 	isb	sy
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	61fb      	str	r3, [r7, #28]
}
 800c5e4:	bf00      	nop
 800c5e6:	bf00      	nop
 800c5e8:	e7fd      	b.n	800c5e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c5ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5f0:	6850      	ldr	r0, [r2, #4]
 800c5f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5f4:	6892      	ldr	r2, [r2, #8]
 800c5f6:	4611      	mov	r1, r2
 800c5f8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	f2c0 80ae 	blt.w	800c75e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c608:	695b      	ldr	r3, [r3, #20]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d004      	beq.n	800c618 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c610:	3304      	adds	r3, #4
 800c612:	4618      	mov	r0, r3
 800c614:	f7fe f9d2 	bl	800a9bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c618:	463b      	mov	r3, r7
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7ff ff6a 	bl	800c4f4 <prvSampleTimeNow>
 800c620:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2b09      	cmp	r3, #9
 800c626:	f200 8097 	bhi.w	800c758 <prvProcessReceivedCommands+0x1a0>
 800c62a:	a201      	add	r2, pc, #4	@ (adr r2, 800c630 <prvProcessReceivedCommands+0x78>)
 800c62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c630:	0800c659 	.word	0x0800c659
 800c634:	0800c659 	.word	0x0800c659
 800c638:	0800c659 	.word	0x0800c659
 800c63c:	0800c6cf 	.word	0x0800c6cf
 800c640:	0800c6e3 	.word	0x0800c6e3
 800c644:	0800c72f 	.word	0x0800c72f
 800c648:	0800c659 	.word	0x0800c659
 800c64c:	0800c659 	.word	0x0800c659
 800c650:	0800c6cf 	.word	0x0800c6cf
 800c654:	0800c6e3 	.word	0x0800c6e3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c65a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c65e:	f043 0301 	orr.w	r3, r3, #1
 800c662:	b2da      	uxtb	r2, r3
 800c664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c666:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c66a:	68ba      	ldr	r2, [r7, #8]
 800c66c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c66e:	699b      	ldr	r3, [r3, #24]
 800c670:	18d1      	adds	r1, r2, r3
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c676:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c678:	f7ff ff5c 	bl	800c534 <prvInsertTimerInActiveList>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d06c      	beq.n	800c75c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c684:	6a1b      	ldr	r3, [r3, #32]
 800c686:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c688:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c68c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c690:	f003 0304 	and.w	r3, r3, #4
 800c694:	2b00      	cmp	r3, #0
 800c696:	d061      	beq.n	800c75c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c698:	68ba      	ldr	r2, [r7, #8]
 800c69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c69c:	699b      	ldr	r3, [r3, #24]
 800c69e:	441a      	add	r2, r3
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	2100      	movs	r1, #0
 800c6a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6aa:	f7ff fe01 	bl	800c2b0 <xTimerGenericCommand>
 800c6ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c6b0:	6a3b      	ldr	r3, [r7, #32]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d152      	bne.n	800c75c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ba:	f383 8811 	msr	BASEPRI, r3
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	f3bf 8f4f 	dsb	sy
 800c6c6:	61bb      	str	r3, [r7, #24]
}
 800c6c8:	bf00      	nop
 800c6ca:	bf00      	nop
 800c6cc:	e7fd      	b.n	800c6ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c6d4:	f023 0301 	bic.w	r3, r3, #1
 800c6d8:	b2da      	uxtb	r2, r3
 800c6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c6e0:	e03d      	b.n	800c75e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c6e8:	f043 0301 	orr.w	r3, r3, #1
 800c6ec:	b2da      	uxtb	r2, r3
 800c6ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c6f4:	68ba      	ldr	r2, [r7, #8]
 800c6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6fc:	699b      	ldr	r3, [r3, #24]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d10b      	bne.n	800c71a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c706:	f383 8811 	msr	BASEPRI, r3
 800c70a:	f3bf 8f6f 	isb	sy
 800c70e:	f3bf 8f4f 	dsb	sy
 800c712:	617b      	str	r3, [r7, #20]
}
 800c714:	bf00      	nop
 800c716:	bf00      	nop
 800c718:	e7fd      	b.n	800c716 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c71a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c71c:	699a      	ldr	r2, [r3, #24]
 800c71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c720:	18d1      	adds	r1, r2, r3
 800c722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c724:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c726:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c728:	f7ff ff04 	bl	800c534 <prvInsertTimerInActiveList>
					break;
 800c72c:	e017      	b.n	800c75e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c730:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c734:	f003 0302 	and.w	r3, r3, #2
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d103      	bne.n	800c744 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c73c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c73e:	f000 fbeb 	bl	800cf18 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c742:	e00c      	b.n	800c75e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c746:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c74a:	f023 0301 	bic.w	r3, r3, #1
 800c74e:	b2da      	uxtb	r2, r3
 800c750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c752:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c756:	e002      	b.n	800c75e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c758:	bf00      	nop
 800c75a:	e000      	b.n	800c75e <prvProcessReceivedCommands+0x1a6>
					break;
 800c75c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c75e:	4b08      	ldr	r3, [pc, #32]	@ (800c780 <prvProcessReceivedCommands+0x1c8>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	1d39      	adds	r1, r7, #4
 800c764:	2200      	movs	r2, #0
 800c766:	4618      	mov	r0, r3
 800c768:	f7fe fbfc 	bl	800af64 <xQueueReceive>
 800c76c:	4603      	mov	r3, r0
 800c76e:	2b00      	cmp	r3, #0
 800c770:	f47f af26 	bne.w	800c5c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c774:	bf00      	nop
 800c776:	bf00      	nop
 800c778:	3730      	adds	r7, #48	@ 0x30
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	bf00      	nop
 800c780:	20001248 	.word	0x20001248

0800c784 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b088      	sub	sp, #32
 800c788:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c78a:	e049      	b.n	800c820 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c78c:	4b2e      	ldr	r3, [pc, #184]	@ (800c848 <prvSwitchTimerLists+0xc4>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	68db      	ldr	r3, [r3, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c796:	4b2c      	ldr	r3, [pc, #176]	@ (800c848 <prvSwitchTimerLists+0xc4>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	68db      	ldr	r3, [r3, #12]
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	3304      	adds	r3, #4
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7fe f909 	bl	800a9bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	6a1b      	ldr	r3, [r3, #32]
 800c7ae:	68f8      	ldr	r0, [r7, #12]
 800c7b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c7b8:	f003 0304 	and.w	r3, r3, #4
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d02f      	beq.n	800c820 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	699b      	ldr	r3, [r3, #24]
 800c7c4:	693a      	ldr	r2, [r7, #16]
 800c7c6:	4413      	add	r3, r2
 800c7c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c7ca:	68ba      	ldr	r2, [r7, #8]
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d90e      	bls.n	800c7f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	68ba      	ldr	r2, [r7, #8]
 800c7d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	68fa      	ldr	r2, [r7, #12]
 800c7dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c7de:	4b1a      	ldr	r3, [pc, #104]	@ (800c848 <prvSwitchTimerLists+0xc4>)
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	3304      	adds	r3, #4
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	4610      	mov	r0, r2
 800c7ea:	f7fe f8ae 	bl	800a94a <vListInsert>
 800c7ee:	e017      	b.n	800c820 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	9300      	str	r3, [sp, #0]
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	693a      	ldr	r2, [r7, #16]
 800c7f8:	2100      	movs	r1, #0
 800c7fa:	68f8      	ldr	r0, [r7, #12]
 800c7fc:	f7ff fd58 	bl	800c2b0 <xTimerGenericCommand>
 800c800:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d10b      	bne.n	800c820 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c80c:	f383 8811 	msr	BASEPRI, r3
 800c810:	f3bf 8f6f 	isb	sy
 800c814:	f3bf 8f4f 	dsb	sy
 800c818:	603b      	str	r3, [r7, #0]
}
 800c81a:	bf00      	nop
 800c81c:	bf00      	nop
 800c81e:	e7fd      	b.n	800c81c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c820:	4b09      	ldr	r3, [pc, #36]	@ (800c848 <prvSwitchTimerLists+0xc4>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d1b0      	bne.n	800c78c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c82a:	4b07      	ldr	r3, [pc, #28]	@ (800c848 <prvSwitchTimerLists+0xc4>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c830:	4b06      	ldr	r3, [pc, #24]	@ (800c84c <prvSwitchTimerLists+0xc8>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4a04      	ldr	r2, [pc, #16]	@ (800c848 <prvSwitchTimerLists+0xc4>)
 800c836:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c838:	4a04      	ldr	r2, [pc, #16]	@ (800c84c <prvSwitchTimerLists+0xc8>)
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	6013      	str	r3, [r2, #0]
}
 800c83e:	bf00      	nop
 800c840:	3718      	adds	r7, #24
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	20001240 	.word	0x20001240
 800c84c:	20001244 	.word	0x20001244

0800c850 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b082      	sub	sp, #8
 800c854:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c856:	f000 f96f 	bl	800cb38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c85a:	4b15      	ldr	r3, [pc, #84]	@ (800c8b0 <prvCheckForValidListAndQueue+0x60>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d120      	bne.n	800c8a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c862:	4814      	ldr	r0, [pc, #80]	@ (800c8b4 <prvCheckForValidListAndQueue+0x64>)
 800c864:	f7fe f820 	bl	800a8a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c868:	4813      	ldr	r0, [pc, #76]	@ (800c8b8 <prvCheckForValidListAndQueue+0x68>)
 800c86a:	f7fe f81d 	bl	800a8a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c86e:	4b13      	ldr	r3, [pc, #76]	@ (800c8bc <prvCheckForValidListAndQueue+0x6c>)
 800c870:	4a10      	ldr	r2, [pc, #64]	@ (800c8b4 <prvCheckForValidListAndQueue+0x64>)
 800c872:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c874:	4b12      	ldr	r3, [pc, #72]	@ (800c8c0 <prvCheckForValidListAndQueue+0x70>)
 800c876:	4a10      	ldr	r2, [pc, #64]	@ (800c8b8 <prvCheckForValidListAndQueue+0x68>)
 800c878:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c87a:	2300      	movs	r3, #0
 800c87c:	9300      	str	r3, [sp, #0]
 800c87e:	4b11      	ldr	r3, [pc, #68]	@ (800c8c4 <prvCheckForValidListAndQueue+0x74>)
 800c880:	4a11      	ldr	r2, [pc, #68]	@ (800c8c8 <prvCheckForValidListAndQueue+0x78>)
 800c882:	2110      	movs	r1, #16
 800c884:	200a      	movs	r0, #10
 800c886:	f7fe f92d 	bl	800aae4 <xQueueGenericCreateStatic>
 800c88a:	4603      	mov	r3, r0
 800c88c:	4a08      	ldr	r2, [pc, #32]	@ (800c8b0 <prvCheckForValidListAndQueue+0x60>)
 800c88e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c890:	4b07      	ldr	r3, [pc, #28]	@ (800c8b0 <prvCheckForValidListAndQueue+0x60>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d005      	beq.n	800c8a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c898:	4b05      	ldr	r3, [pc, #20]	@ (800c8b0 <prvCheckForValidListAndQueue+0x60>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	490b      	ldr	r1, [pc, #44]	@ (800c8cc <prvCheckForValidListAndQueue+0x7c>)
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7fe fd52 	bl	800b348 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c8a4:	f000 f97a 	bl	800cb9c <vPortExitCritical>
}
 800c8a8:	bf00      	nop
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}
 800c8ae:	bf00      	nop
 800c8b0:	20001248 	.word	0x20001248
 800c8b4:	20001218 	.word	0x20001218
 800c8b8:	2000122c 	.word	0x2000122c
 800c8bc:	20001240 	.word	0x20001240
 800c8c0:	20001244 	.word	0x20001244
 800c8c4:	200012f4 	.word	0x200012f4
 800c8c8:	20001254 	.word	0x20001254
 800c8cc:	0801180c 	.word	0x0801180c

0800c8d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b085      	sub	sp, #20
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	60f8      	str	r0, [r7, #12]
 800c8d8:	60b9      	str	r1, [r7, #8]
 800c8da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	3b04      	subs	r3, #4
 800c8e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c8e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	3b04      	subs	r3, #4
 800c8ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	f023 0201 	bic.w	r2, r3, #1
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	3b04      	subs	r3, #4
 800c8fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c900:	4a0c      	ldr	r2, [pc, #48]	@ (800c934 <pxPortInitialiseStack+0x64>)
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	3b14      	subs	r3, #20
 800c90a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	3b04      	subs	r3, #4
 800c916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f06f 0202 	mvn.w	r2, #2
 800c91e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	3b20      	subs	r3, #32
 800c924:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c926:	68fb      	ldr	r3, [r7, #12]
}
 800c928:	4618      	mov	r0, r3
 800c92a:	3714      	adds	r7, #20
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr
 800c934:	0800c939 	.word	0x0800c939

0800c938 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c938:	b480      	push	{r7}
 800c93a:	b085      	sub	sp, #20
 800c93c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c93e:	2300      	movs	r3, #0
 800c940:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c942:	4b13      	ldr	r3, [pc, #76]	@ (800c990 <prvTaskExitError+0x58>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c94a:	d00b      	beq.n	800c964 <prvTaskExitError+0x2c>
	__asm volatile
 800c94c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c950:	f383 8811 	msr	BASEPRI, r3
 800c954:	f3bf 8f6f 	isb	sy
 800c958:	f3bf 8f4f 	dsb	sy
 800c95c:	60fb      	str	r3, [r7, #12]
}
 800c95e:	bf00      	nop
 800c960:	bf00      	nop
 800c962:	e7fd      	b.n	800c960 <prvTaskExitError+0x28>
	__asm volatile
 800c964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c968:	f383 8811 	msr	BASEPRI, r3
 800c96c:	f3bf 8f6f 	isb	sy
 800c970:	f3bf 8f4f 	dsb	sy
 800c974:	60bb      	str	r3, [r7, #8]
}
 800c976:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c978:	bf00      	nop
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d0fc      	beq.n	800c97a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c980:	bf00      	nop
 800c982:	bf00      	nop
 800c984:	3714      	adds	r7, #20
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop
 800c990:	20000028 	.word	0x20000028
	...

0800c9a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c9a0:	4b07      	ldr	r3, [pc, #28]	@ (800c9c0 <pxCurrentTCBConst2>)
 800c9a2:	6819      	ldr	r1, [r3, #0]
 800c9a4:	6808      	ldr	r0, [r1, #0]
 800c9a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9aa:	f380 8809 	msr	PSP, r0
 800c9ae:	f3bf 8f6f 	isb	sy
 800c9b2:	f04f 0000 	mov.w	r0, #0
 800c9b6:	f380 8811 	msr	BASEPRI, r0
 800c9ba:	4770      	bx	lr
 800c9bc:	f3af 8000 	nop.w

0800c9c0 <pxCurrentTCBConst2>:
 800c9c0:	20000d18 	.word	0x20000d18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c9c4:	bf00      	nop
 800c9c6:	bf00      	nop

0800c9c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c9c8:	4808      	ldr	r0, [pc, #32]	@ (800c9ec <prvPortStartFirstTask+0x24>)
 800c9ca:	6800      	ldr	r0, [r0, #0]
 800c9cc:	6800      	ldr	r0, [r0, #0]
 800c9ce:	f380 8808 	msr	MSP, r0
 800c9d2:	f04f 0000 	mov.w	r0, #0
 800c9d6:	f380 8814 	msr	CONTROL, r0
 800c9da:	b662      	cpsie	i
 800c9dc:	b661      	cpsie	f
 800c9de:	f3bf 8f4f 	dsb	sy
 800c9e2:	f3bf 8f6f 	isb	sy
 800c9e6:	df00      	svc	0
 800c9e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c9ea:	bf00      	nop
 800c9ec:	e000ed08 	.word	0xe000ed08

0800c9f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b086      	sub	sp, #24
 800c9f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c9f6:	4b47      	ldr	r3, [pc, #284]	@ (800cb14 <xPortStartScheduler+0x124>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4a47      	ldr	r2, [pc, #284]	@ (800cb18 <xPortStartScheduler+0x128>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d10b      	bne.n	800ca18 <xPortStartScheduler+0x28>
	__asm volatile
 800ca00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca04:	f383 8811 	msr	BASEPRI, r3
 800ca08:	f3bf 8f6f 	isb	sy
 800ca0c:	f3bf 8f4f 	dsb	sy
 800ca10:	613b      	str	r3, [r7, #16]
}
 800ca12:	bf00      	nop
 800ca14:	bf00      	nop
 800ca16:	e7fd      	b.n	800ca14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ca18:	4b3e      	ldr	r3, [pc, #248]	@ (800cb14 <xPortStartScheduler+0x124>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4a3f      	ldr	r2, [pc, #252]	@ (800cb1c <xPortStartScheduler+0x12c>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d10b      	bne.n	800ca3a <xPortStartScheduler+0x4a>
	__asm volatile
 800ca22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca26:	f383 8811 	msr	BASEPRI, r3
 800ca2a:	f3bf 8f6f 	isb	sy
 800ca2e:	f3bf 8f4f 	dsb	sy
 800ca32:	60fb      	str	r3, [r7, #12]
}
 800ca34:	bf00      	nop
 800ca36:	bf00      	nop
 800ca38:	e7fd      	b.n	800ca36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ca3a:	4b39      	ldr	r3, [pc, #228]	@ (800cb20 <xPortStartScheduler+0x130>)
 800ca3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	22ff      	movs	r2, #255	@ 0xff
 800ca4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	b2db      	uxtb	r3, r3
 800ca52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ca54:	78fb      	ldrb	r3, [r7, #3]
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ca5c:	b2da      	uxtb	r2, r3
 800ca5e:	4b31      	ldr	r3, [pc, #196]	@ (800cb24 <xPortStartScheduler+0x134>)
 800ca60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ca62:	4b31      	ldr	r3, [pc, #196]	@ (800cb28 <xPortStartScheduler+0x138>)
 800ca64:	2207      	movs	r2, #7
 800ca66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca68:	e009      	b.n	800ca7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ca6a:	4b2f      	ldr	r3, [pc, #188]	@ (800cb28 <xPortStartScheduler+0x138>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	3b01      	subs	r3, #1
 800ca70:	4a2d      	ldr	r2, [pc, #180]	@ (800cb28 <xPortStartScheduler+0x138>)
 800ca72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ca74:	78fb      	ldrb	r3, [r7, #3]
 800ca76:	b2db      	uxtb	r3, r3
 800ca78:	005b      	lsls	r3, r3, #1
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca7e:	78fb      	ldrb	r3, [r7, #3]
 800ca80:	b2db      	uxtb	r3, r3
 800ca82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca86:	2b80      	cmp	r3, #128	@ 0x80
 800ca88:	d0ef      	beq.n	800ca6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ca8a:	4b27      	ldr	r3, [pc, #156]	@ (800cb28 <xPortStartScheduler+0x138>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f1c3 0307 	rsb	r3, r3, #7
 800ca92:	2b04      	cmp	r3, #4
 800ca94:	d00b      	beq.n	800caae <xPortStartScheduler+0xbe>
	__asm volatile
 800ca96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca9a:	f383 8811 	msr	BASEPRI, r3
 800ca9e:	f3bf 8f6f 	isb	sy
 800caa2:	f3bf 8f4f 	dsb	sy
 800caa6:	60bb      	str	r3, [r7, #8]
}
 800caa8:	bf00      	nop
 800caaa:	bf00      	nop
 800caac:	e7fd      	b.n	800caaa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800caae:	4b1e      	ldr	r3, [pc, #120]	@ (800cb28 <xPortStartScheduler+0x138>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	021b      	lsls	r3, r3, #8
 800cab4:	4a1c      	ldr	r2, [pc, #112]	@ (800cb28 <xPortStartScheduler+0x138>)
 800cab6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cab8:	4b1b      	ldr	r3, [pc, #108]	@ (800cb28 <xPortStartScheduler+0x138>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cac0:	4a19      	ldr	r2, [pc, #100]	@ (800cb28 <xPortStartScheduler+0x138>)
 800cac2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	b2da      	uxtb	r2, r3
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cacc:	4b17      	ldr	r3, [pc, #92]	@ (800cb2c <xPortStartScheduler+0x13c>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a16      	ldr	r2, [pc, #88]	@ (800cb2c <xPortStartScheduler+0x13c>)
 800cad2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cad6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cad8:	4b14      	ldr	r3, [pc, #80]	@ (800cb2c <xPortStartScheduler+0x13c>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4a13      	ldr	r2, [pc, #76]	@ (800cb2c <xPortStartScheduler+0x13c>)
 800cade:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cae2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cae4:	f000 f8da 	bl	800cc9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cae8:	4b11      	ldr	r3, [pc, #68]	@ (800cb30 <xPortStartScheduler+0x140>)
 800caea:	2200      	movs	r2, #0
 800caec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800caee:	f000 f8f9 	bl	800cce4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800caf2:	4b10      	ldr	r3, [pc, #64]	@ (800cb34 <xPortStartScheduler+0x144>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4a0f      	ldr	r2, [pc, #60]	@ (800cb34 <xPortStartScheduler+0x144>)
 800caf8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cafc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cafe:	f7ff ff63 	bl	800c9c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cb02:	f7ff f839 	bl	800bb78 <vTaskSwitchContext>
	prvTaskExitError();
 800cb06:	f7ff ff17 	bl	800c938 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cb0a:	2300      	movs	r3, #0
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3718      	adds	r7, #24
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}
 800cb14:	e000ed00 	.word	0xe000ed00
 800cb18:	410fc271 	.word	0x410fc271
 800cb1c:	410fc270 	.word	0x410fc270
 800cb20:	e000e400 	.word	0xe000e400
 800cb24:	20001344 	.word	0x20001344
 800cb28:	20001348 	.word	0x20001348
 800cb2c:	e000ed20 	.word	0xe000ed20
 800cb30:	20000028 	.word	0x20000028
 800cb34:	e000ef34 	.word	0xe000ef34

0800cb38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b083      	sub	sp, #12
 800cb3c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb42:	f383 8811 	msr	BASEPRI, r3
 800cb46:	f3bf 8f6f 	isb	sy
 800cb4a:	f3bf 8f4f 	dsb	sy
 800cb4e:	607b      	str	r3, [r7, #4]
}
 800cb50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cb52:	4b10      	ldr	r3, [pc, #64]	@ (800cb94 <vPortEnterCritical+0x5c>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	3301      	adds	r3, #1
 800cb58:	4a0e      	ldr	r2, [pc, #56]	@ (800cb94 <vPortEnterCritical+0x5c>)
 800cb5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cb5c:	4b0d      	ldr	r3, [pc, #52]	@ (800cb94 <vPortEnterCritical+0x5c>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d110      	bne.n	800cb86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cb64:	4b0c      	ldr	r3, [pc, #48]	@ (800cb98 <vPortEnterCritical+0x60>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d00b      	beq.n	800cb86 <vPortEnterCritical+0x4e>
	__asm volatile
 800cb6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb72:	f383 8811 	msr	BASEPRI, r3
 800cb76:	f3bf 8f6f 	isb	sy
 800cb7a:	f3bf 8f4f 	dsb	sy
 800cb7e:	603b      	str	r3, [r7, #0]
}
 800cb80:	bf00      	nop
 800cb82:	bf00      	nop
 800cb84:	e7fd      	b.n	800cb82 <vPortEnterCritical+0x4a>
	}
}
 800cb86:	bf00      	nop
 800cb88:	370c      	adds	r7, #12
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb90:	4770      	bx	lr
 800cb92:	bf00      	nop
 800cb94:	20000028 	.word	0x20000028
 800cb98:	e000ed04 	.word	0xe000ed04

0800cb9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cb9c:	b480      	push	{r7}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cba2:	4b12      	ldr	r3, [pc, #72]	@ (800cbec <vPortExitCritical+0x50>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d10b      	bne.n	800cbc2 <vPortExitCritical+0x26>
	__asm volatile
 800cbaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbae:	f383 8811 	msr	BASEPRI, r3
 800cbb2:	f3bf 8f6f 	isb	sy
 800cbb6:	f3bf 8f4f 	dsb	sy
 800cbba:	607b      	str	r3, [r7, #4]
}
 800cbbc:	bf00      	nop
 800cbbe:	bf00      	nop
 800cbc0:	e7fd      	b.n	800cbbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cbc2:	4b0a      	ldr	r3, [pc, #40]	@ (800cbec <vPortExitCritical+0x50>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	3b01      	subs	r3, #1
 800cbc8:	4a08      	ldr	r2, [pc, #32]	@ (800cbec <vPortExitCritical+0x50>)
 800cbca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cbcc:	4b07      	ldr	r3, [pc, #28]	@ (800cbec <vPortExitCritical+0x50>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d105      	bne.n	800cbe0 <vPortExitCritical+0x44>
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	f383 8811 	msr	BASEPRI, r3
}
 800cbde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cbe0:	bf00      	nop
 800cbe2:	370c      	adds	r7, #12
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr
 800cbec:	20000028 	.word	0x20000028

0800cbf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cbf0:	f3ef 8009 	mrs	r0, PSP
 800cbf4:	f3bf 8f6f 	isb	sy
 800cbf8:	4b15      	ldr	r3, [pc, #84]	@ (800cc50 <pxCurrentTCBConst>)
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	f01e 0f10 	tst.w	lr, #16
 800cc00:	bf08      	it	eq
 800cc02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cc06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc0a:	6010      	str	r0, [r2, #0]
 800cc0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cc10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cc14:	f380 8811 	msr	BASEPRI, r0
 800cc18:	f3bf 8f4f 	dsb	sy
 800cc1c:	f3bf 8f6f 	isb	sy
 800cc20:	f7fe ffaa 	bl	800bb78 <vTaskSwitchContext>
 800cc24:	f04f 0000 	mov.w	r0, #0
 800cc28:	f380 8811 	msr	BASEPRI, r0
 800cc2c:	bc09      	pop	{r0, r3}
 800cc2e:	6819      	ldr	r1, [r3, #0]
 800cc30:	6808      	ldr	r0, [r1, #0]
 800cc32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc36:	f01e 0f10 	tst.w	lr, #16
 800cc3a:	bf08      	it	eq
 800cc3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cc40:	f380 8809 	msr	PSP, r0
 800cc44:	f3bf 8f6f 	isb	sy
 800cc48:	4770      	bx	lr
 800cc4a:	bf00      	nop
 800cc4c:	f3af 8000 	nop.w

0800cc50 <pxCurrentTCBConst>:
 800cc50:	20000d18 	.word	0x20000d18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cc54:	bf00      	nop
 800cc56:	bf00      	nop

0800cc58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
	__asm volatile
 800cc5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc62:	f383 8811 	msr	BASEPRI, r3
 800cc66:	f3bf 8f6f 	isb	sy
 800cc6a:	f3bf 8f4f 	dsb	sy
 800cc6e:	607b      	str	r3, [r7, #4]
}
 800cc70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cc72:	f7fe fec7 	bl	800ba04 <xTaskIncrementTick>
 800cc76:	4603      	mov	r3, r0
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d003      	beq.n	800cc84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cc7c:	4b06      	ldr	r3, [pc, #24]	@ (800cc98 <xPortSysTickHandler+0x40>)
 800cc7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc82:	601a      	str	r2, [r3, #0]
 800cc84:	2300      	movs	r3, #0
 800cc86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	f383 8811 	msr	BASEPRI, r3
}
 800cc8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cc90:	bf00      	nop
 800cc92:	3708      	adds	r7, #8
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}
 800cc98:	e000ed04 	.word	0xe000ed04

0800cc9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cc9c:	b480      	push	{r7}
 800cc9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cca0:	4b0b      	ldr	r3, [pc, #44]	@ (800ccd0 <vPortSetupTimerInterrupt+0x34>)
 800cca2:	2200      	movs	r2, #0
 800cca4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cca6:	4b0b      	ldr	r3, [pc, #44]	@ (800ccd4 <vPortSetupTimerInterrupt+0x38>)
 800cca8:	2200      	movs	r2, #0
 800ccaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ccac:	4b0a      	ldr	r3, [pc, #40]	@ (800ccd8 <vPortSetupTimerInterrupt+0x3c>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a0a      	ldr	r2, [pc, #40]	@ (800ccdc <vPortSetupTimerInterrupt+0x40>)
 800ccb2:	fba2 2303 	umull	r2, r3, r2, r3
 800ccb6:	099b      	lsrs	r3, r3, #6
 800ccb8:	4a09      	ldr	r2, [pc, #36]	@ (800cce0 <vPortSetupTimerInterrupt+0x44>)
 800ccba:	3b01      	subs	r3, #1
 800ccbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ccbe:	4b04      	ldr	r3, [pc, #16]	@ (800ccd0 <vPortSetupTimerInterrupt+0x34>)
 800ccc0:	2207      	movs	r2, #7
 800ccc2:	601a      	str	r2, [r3, #0]
}
 800ccc4:	bf00      	nop
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cccc:	4770      	bx	lr
 800ccce:	bf00      	nop
 800ccd0:	e000e010 	.word	0xe000e010
 800ccd4:	e000e018 	.word	0xe000e018
 800ccd8:	2000001c 	.word	0x2000001c
 800ccdc:	10624dd3 	.word	0x10624dd3
 800cce0:	e000e014 	.word	0xe000e014

0800cce4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cce4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ccf4 <vPortEnableVFP+0x10>
 800cce8:	6801      	ldr	r1, [r0, #0]
 800ccea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ccee:	6001      	str	r1, [r0, #0]
 800ccf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ccf2:	bf00      	nop
 800ccf4:	e000ed88 	.word	0xe000ed88

0800ccf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b085      	sub	sp, #20
 800ccfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ccfe:	f3ef 8305 	mrs	r3, IPSR
 800cd02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2b0f      	cmp	r3, #15
 800cd08:	d915      	bls.n	800cd36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cd0a:	4a18      	ldr	r2, [pc, #96]	@ (800cd6c <vPortValidateInterruptPriority+0x74>)
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	4413      	add	r3, r2
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cd14:	4b16      	ldr	r3, [pc, #88]	@ (800cd70 <vPortValidateInterruptPriority+0x78>)
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	7afa      	ldrb	r2, [r7, #11]
 800cd1a:	429a      	cmp	r2, r3
 800cd1c:	d20b      	bcs.n	800cd36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cd1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd22:	f383 8811 	msr	BASEPRI, r3
 800cd26:	f3bf 8f6f 	isb	sy
 800cd2a:	f3bf 8f4f 	dsb	sy
 800cd2e:	607b      	str	r3, [r7, #4]
}
 800cd30:	bf00      	nop
 800cd32:	bf00      	nop
 800cd34:	e7fd      	b.n	800cd32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cd36:	4b0f      	ldr	r3, [pc, #60]	@ (800cd74 <vPortValidateInterruptPriority+0x7c>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cd3e:	4b0e      	ldr	r3, [pc, #56]	@ (800cd78 <vPortValidateInterruptPriority+0x80>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	429a      	cmp	r2, r3
 800cd44:	d90b      	bls.n	800cd5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cd46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd4a:	f383 8811 	msr	BASEPRI, r3
 800cd4e:	f3bf 8f6f 	isb	sy
 800cd52:	f3bf 8f4f 	dsb	sy
 800cd56:	603b      	str	r3, [r7, #0]
}
 800cd58:	bf00      	nop
 800cd5a:	bf00      	nop
 800cd5c:	e7fd      	b.n	800cd5a <vPortValidateInterruptPriority+0x62>
	}
 800cd5e:	bf00      	nop
 800cd60:	3714      	adds	r7, #20
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr
 800cd6a:	bf00      	nop
 800cd6c:	e000e3f0 	.word	0xe000e3f0
 800cd70:	20001344 	.word	0x20001344
 800cd74:	e000ed0c 	.word	0xe000ed0c
 800cd78:	20001348 	.word	0x20001348

0800cd7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b08a      	sub	sp, #40	@ 0x28
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cd84:	2300      	movs	r3, #0
 800cd86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cd88:	f7fe fd80 	bl	800b88c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cd8c:	4b5c      	ldr	r3, [pc, #368]	@ (800cf00 <pvPortMalloc+0x184>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d101      	bne.n	800cd98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cd94:	f000 f924 	bl	800cfe0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cd98:	4b5a      	ldr	r3, [pc, #360]	@ (800cf04 <pvPortMalloc+0x188>)
 800cd9a:	681a      	ldr	r2, [r3, #0]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	4013      	ands	r3, r2
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	f040 8095 	bne.w	800ced0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d01e      	beq.n	800cdea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cdac:	2208      	movs	r2, #8
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	4413      	add	r3, r2
 800cdb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f003 0307 	and.w	r3, r3, #7
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d015      	beq.n	800cdea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f023 0307 	bic.w	r3, r3, #7
 800cdc4:	3308      	adds	r3, #8
 800cdc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f003 0307 	and.w	r3, r3, #7
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00b      	beq.n	800cdea <pvPortMalloc+0x6e>
	__asm volatile
 800cdd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd6:	f383 8811 	msr	BASEPRI, r3
 800cdda:	f3bf 8f6f 	isb	sy
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	617b      	str	r3, [r7, #20]
}
 800cde4:	bf00      	nop
 800cde6:	bf00      	nop
 800cde8:	e7fd      	b.n	800cde6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d06f      	beq.n	800ced0 <pvPortMalloc+0x154>
 800cdf0:	4b45      	ldr	r3, [pc, #276]	@ (800cf08 <pvPortMalloc+0x18c>)
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d86a      	bhi.n	800ced0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cdfa:	4b44      	ldr	r3, [pc, #272]	@ (800cf0c <pvPortMalloc+0x190>)
 800cdfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cdfe:	4b43      	ldr	r3, [pc, #268]	@ (800cf0c <pvPortMalloc+0x190>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce04:	e004      	b.n	800ce10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ce06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ce0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ce10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d903      	bls.n	800ce22 <pvPortMalloc+0xa6>
 800ce1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d1f1      	bne.n	800ce06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ce22:	4b37      	ldr	r3, [pc, #220]	@ (800cf00 <pvPortMalloc+0x184>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d051      	beq.n	800ced0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ce2c:	6a3b      	ldr	r3, [r7, #32]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2208      	movs	r2, #8
 800ce32:	4413      	add	r3, r2
 800ce34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ce36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	6a3b      	ldr	r3, [r7, #32]
 800ce3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ce3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce40:	685a      	ldr	r2, [r3, #4]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	1ad2      	subs	r2, r2, r3
 800ce46:	2308      	movs	r3, #8
 800ce48:	005b      	lsls	r3, r3, #1
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d920      	bls.n	800ce90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ce4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	4413      	add	r3, r2
 800ce54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce56:	69bb      	ldr	r3, [r7, #24]
 800ce58:	f003 0307 	and.w	r3, r3, #7
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d00b      	beq.n	800ce78 <pvPortMalloc+0xfc>
	__asm volatile
 800ce60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce64:	f383 8811 	msr	BASEPRI, r3
 800ce68:	f3bf 8f6f 	isb	sy
 800ce6c:	f3bf 8f4f 	dsb	sy
 800ce70:	613b      	str	r3, [r7, #16]
}
 800ce72:	bf00      	nop
 800ce74:	bf00      	nop
 800ce76:	e7fd      	b.n	800ce74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ce78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce7a:	685a      	ldr	r2, [r3, #4]
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	1ad2      	subs	r2, r2, r3
 800ce80:	69bb      	ldr	r3, [r7, #24]
 800ce82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ce84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce86:	687a      	ldr	r2, [r7, #4]
 800ce88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ce8a:	69b8      	ldr	r0, [r7, #24]
 800ce8c:	f000 f90a 	bl	800d0a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ce90:	4b1d      	ldr	r3, [pc, #116]	@ (800cf08 <pvPortMalloc+0x18c>)
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	1ad3      	subs	r3, r2, r3
 800ce9a:	4a1b      	ldr	r2, [pc, #108]	@ (800cf08 <pvPortMalloc+0x18c>)
 800ce9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ce9e:	4b1a      	ldr	r3, [pc, #104]	@ (800cf08 <pvPortMalloc+0x18c>)
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	4b1b      	ldr	r3, [pc, #108]	@ (800cf10 <pvPortMalloc+0x194>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d203      	bcs.n	800ceb2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ceaa:	4b17      	ldr	r3, [pc, #92]	@ (800cf08 <pvPortMalloc+0x18c>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	4a18      	ldr	r2, [pc, #96]	@ (800cf10 <pvPortMalloc+0x194>)
 800ceb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ceb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb4:	685a      	ldr	r2, [r3, #4]
 800ceb6:	4b13      	ldr	r3, [pc, #76]	@ (800cf04 <pvPortMalloc+0x188>)
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	431a      	orrs	r2, r3
 800cebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cebe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec2:	2200      	movs	r2, #0
 800cec4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cec6:	4b13      	ldr	r3, [pc, #76]	@ (800cf14 <pvPortMalloc+0x198>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	3301      	adds	r3, #1
 800cecc:	4a11      	ldr	r2, [pc, #68]	@ (800cf14 <pvPortMalloc+0x198>)
 800cece:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ced0:	f7fe fcea 	bl	800b8a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	f003 0307 	and.w	r3, r3, #7
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d00b      	beq.n	800cef6 <pvPortMalloc+0x17a>
	__asm volatile
 800cede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cee2:	f383 8811 	msr	BASEPRI, r3
 800cee6:	f3bf 8f6f 	isb	sy
 800ceea:	f3bf 8f4f 	dsb	sy
 800ceee:	60fb      	str	r3, [r7, #12]
}
 800cef0:	bf00      	nop
 800cef2:	bf00      	nop
 800cef4:	e7fd      	b.n	800cef2 <pvPortMalloc+0x176>
	return pvReturn;
 800cef6:	69fb      	ldr	r3, [r7, #28]
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3728      	adds	r7, #40	@ 0x28
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}
 800cf00:	20004f54 	.word	0x20004f54
 800cf04:	20004f68 	.word	0x20004f68
 800cf08:	20004f58 	.word	0x20004f58
 800cf0c:	20004f4c 	.word	0x20004f4c
 800cf10:	20004f5c 	.word	0x20004f5c
 800cf14:	20004f60 	.word	0x20004f60

0800cf18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b086      	sub	sp, #24
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d04f      	beq.n	800cfca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cf2a:	2308      	movs	r3, #8
 800cf2c:	425b      	negs	r3, r3
 800cf2e:	697a      	ldr	r2, [r7, #20]
 800cf30:	4413      	add	r3, r2
 800cf32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	685a      	ldr	r2, [r3, #4]
 800cf3c:	4b25      	ldr	r3, [pc, #148]	@ (800cfd4 <vPortFree+0xbc>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4013      	ands	r3, r2
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d10b      	bne.n	800cf5e <vPortFree+0x46>
	__asm volatile
 800cf46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf4a:	f383 8811 	msr	BASEPRI, r3
 800cf4e:	f3bf 8f6f 	isb	sy
 800cf52:	f3bf 8f4f 	dsb	sy
 800cf56:	60fb      	str	r3, [r7, #12]
}
 800cf58:	bf00      	nop
 800cf5a:	bf00      	nop
 800cf5c:	e7fd      	b.n	800cf5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d00b      	beq.n	800cf7e <vPortFree+0x66>
	__asm volatile
 800cf66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf6a:	f383 8811 	msr	BASEPRI, r3
 800cf6e:	f3bf 8f6f 	isb	sy
 800cf72:	f3bf 8f4f 	dsb	sy
 800cf76:	60bb      	str	r3, [r7, #8]
}
 800cf78:	bf00      	nop
 800cf7a:	bf00      	nop
 800cf7c:	e7fd      	b.n	800cf7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	685a      	ldr	r2, [r3, #4]
 800cf82:	4b14      	ldr	r3, [pc, #80]	@ (800cfd4 <vPortFree+0xbc>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	4013      	ands	r3, r2
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d01e      	beq.n	800cfca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d11a      	bne.n	800cfca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	685a      	ldr	r2, [r3, #4]
 800cf98:	4b0e      	ldr	r3, [pc, #56]	@ (800cfd4 <vPortFree+0xbc>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	43db      	mvns	r3, r3
 800cf9e:	401a      	ands	r2, r3
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cfa4:	f7fe fc72 	bl	800b88c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	685a      	ldr	r2, [r3, #4]
 800cfac:	4b0a      	ldr	r3, [pc, #40]	@ (800cfd8 <vPortFree+0xc0>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4413      	add	r3, r2
 800cfb2:	4a09      	ldr	r2, [pc, #36]	@ (800cfd8 <vPortFree+0xc0>)
 800cfb4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cfb6:	6938      	ldr	r0, [r7, #16]
 800cfb8:	f000 f874 	bl	800d0a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cfbc:	4b07      	ldr	r3, [pc, #28]	@ (800cfdc <vPortFree+0xc4>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	4a06      	ldr	r2, [pc, #24]	@ (800cfdc <vPortFree+0xc4>)
 800cfc4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cfc6:	f7fe fc6f 	bl	800b8a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cfca:	bf00      	nop
 800cfcc:	3718      	adds	r7, #24
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	20004f68 	.word	0x20004f68
 800cfd8:	20004f58 	.word	0x20004f58
 800cfdc:	20004f64 	.word	0x20004f64

0800cfe0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b085      	sub	sp, #20
 800cfe4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cfe6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800cfea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cfec:	4b27      	ldr	r3, [pc, #156]	@ (800d08c <prvHeapInit+0xac>)
 800cfee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f003 0307 	and.w	r3, r3, #7
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d00c      	beq.n	800d014 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	3307      	adds	r3, #7
 800cffe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	f023 0307 	bic.w	r3, r3, #7
 800d006:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d008:	68ba      	ldr	r2, [r7, #8]
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	1ad3      	subs	r3, r2, r3
 800d00e:	4a1f      	ldr	r2, [pc, #124]	@ (800d08c <prvHeapInit+0xac>)
 800d010:	4413      	add	r3, r2
 800d012:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d018:	4a1d      	ldr	r2, [pc, #116]	@ (800d090 <prvHeapInit+0xb0>)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d01e:	4b1c      	ldr	r3, [pc, #112]	@ (800d090 <prvHeapInit+0xb0>)
 800d020:	2200      	movs	r2, #0
 800d022:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	68ba      	ldr	r2, [r7, #8]
 800d028:	4413      	add	r3, r2
 800d02a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d02c:	2208      	movs	r2, #8
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	1a9b      	subs	r3, r3, r2
 800d032:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f023 0307 	bic.w	r3, r3, #7
 800d03a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	4a15      	ldr	r2, [pc, #84]	@ (800d094 <prvHeapInit+0xb4>)
 800d040:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d042:	4b14      	ldr	r3, [pc, #80]	@ (800d094 <prvHeapInit+0xb4>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	2200      	movs	r2, #0
 800d048:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d04a:	4b12      	ldr	r3, [pc, #72]	@ (800d094 <prvHeapInit+0xb4>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	2200      	movs	r2, #0
 800d050:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	68fa      	ldr	r2, [r7, #12]
 800d05a:	1ad2      	subs	r2, r2, r3
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d060:	4b0c      	ldr	r3, [pc, #48]	@ (800d094 <prvHeapInit+0xb4>)
 800d062:	681a      	ldr	r2, [r3, #0]
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	4a0a      	ldr	r2, [pc, #40]	@ (800d098 <prvHeapInit+0xb8>)
 800d06e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	4a09      	ldr	r2, [pc, #36]	@ (800d09c <prvHeapInit+0xbc>)
 800d076:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d078:	4b09      	ldr	r3, [pc, #36]	@ (800d0a0 <prvHeapInit+0xc0>)
 800d07a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d07e:	601a      	str	r2, [r3, #0]
}
 800d080:	bf00      	nop
 800d082:	3714      	adds	r7, #20
 800d084:	46bd      	mov	sp, r7
 800d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08a:	4770      	bx	lr
 800d08c:	2000134c 	.word	0x2000134c
 800d090:	20004f4c 	.word	0x20004f4c
 800d094:	20004f54 	.word	0x20004f54
 800d098:	20004f5c 	.word	0x20004f5c
 800d09c:	20004f58 	.word	0x20004f58
 800d0a0:	20004f68 	.word	0x20004f68

0800d0a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b085      	sub	sp, #20
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d0ac:	4b28      	ldr	r3, [pc, #160]	@ (800d150 <prvInsertBlockIntoFreeList+0xac>)
 800d0ae:	60fb      	str	r3, [r7, #12]
 800d0b0:	e002      	b.n	800d0b8 <prvInsertBlockIntoFreeList+0x14>
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	60fb      	str	r3, [r7, #12]
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	687a      	ldr	r2, [r7, #4]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d8f7      	bhi.n	800d0b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	685b      	ldr	r3, [r3, #4]
 800d0ca:	68ba      	ldr	r2, [r7, #8]
 800d0cc:	4413      	add	r3, r2
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d108      	bne.n	800d0e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	685a      	ldr	r2, [r3, #4]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	685b      	ldr	r3, [r3, #4]
 800d0dc:	441a      	add	r2, r3
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	685b      	ldr	r3, [r3, #4]
 800d0ee:	68ba      	ldr	r2, [r7, #8]
 800d0f0:	441a      	add	r2, r3
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d118      	bne.n	800d12c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681a      	ldr	r2, [r3, #0]
 800d0fe:	4b15      	ldr	r3, [pc, #84]	@ (800d154 <prvInsertBlockIntoFreeList+0xb0>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	429a      	cmp	r2, r3
 800d104:	d00d      	beq.n	800d122 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	685a      	ldr	r2, [r3, #4]
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	441a      	add	r2, r3
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	681a      	ldr	r2, [r3, #0]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	601a      	str	r2, [r3, #0]
 800d120:	e008      	b.n	800d134 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d122:	4b0c      	ldr	r3, [pc, #48]	@ (800d154 <prvInsertBlockIntoFreeList+0xb0>)
 800d124:	681a      	ldr	r2, [r3, #0]
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	601a      	str	r2, [r3, #0]
 800d12a:	e003      	b.n	800d134 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d134:	68fa      	ldr	r2, [r7, #12]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	429a      	cmp	r2, r3
 800d13a:	d002      	beq.n	800d142 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	687a      	ldr	r2, [r7, #4]
 800d140:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d142:	bf00      	nop
 800d144:	3714      	adds	r7, #20
 800d146:	46bd      	mov	sp, r7
 800d148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14c:	4770      	bx	lr
 800d14e:	bf00      	nop
 800d150:	20004f4c 	.word	0x20004f4c
 800d154:	20004f54 	.word	0x20004f54

0800d158 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800d15e:	2300      	movs	r3, #0
 800d160:	71fb      	strb	r3, [r7, #7]
 800d162:	e026      	b.n	800d1b2 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800d164:	79fb      	ldrb	r3, [r7, #7]
 800d166:	3b50      	subs	r3, #80	@ 0x50
 800d168:	b2db      	uxtb	r3, r3
 800d16a:	2100      	movs	r1, #0
 800d16c:	4618      	mov	r0, r3
 800d16e:	f000 f82b 	bl	800d1c8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800d172:	2100      	movs	r1, #0
 800d174:	2000      	movs	r0, #0
 800d176:	f000 f827 	bl	800d1c8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800d17a:	2100      	movs	r1, #0
 800d17c:	2010      	movs	r0, #16
 800d17e:	f000 f823 	bl	800d1c8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800d182:	2300      	movs	r3, #0
 800d184:	71bb      	strb	r3, [r7, #6]
 800d186:	e00d      	b.n	800d1a4 <OLED_Refresh_Gram+0x4c>
 800d188:	79ba      	ldrb	r2, [r7, #6]
 800d18a:	79fb      	ldrb	r3, [r7, #7]
 800d18c:	490d      	ldr	r1, [pc, #52]	@ (800d1c4 <OLED_Refresh_Gram+0x6c>)
 800d18e:	00d2      	lsls	r2, r2, #3
 800d190:	440a      	add	r2, r1
 800d192:	4413      	add	r3, r2
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	2101      	movs	r1, #1
 800d198:	4618      	mov	r0, r3
 800d19a:	f000 f815 	bl	800d1c8 <OLED_WR_Byte>
 800d19e:	79bb      	ldrb	r3, [r7, #6]
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	71bb      	strb	r3, [r7, #6]
 800d1a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	daed      	bge.n	800d188 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800d1ac:	79fb      	ldrb	r3, [r7, #7]
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	71fb      	strb	r3, [r7, #7]
 800d1b2:	79fb      	ldrb	r3, [r7, #7]
 800d1b4:	2b07      	cmp	r3, #7
 800d1b6:	d9d5      	bls.n	800d164 <OLED_Refresh_Gram+0xc>
	}   
}
 800d1b8:	bf00      	nop
 800d1ba:	bf00      	nop
 800d1bc:	3708      	adds	r7, #8
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	20004f6c 	.word	0x20004f6c

0800d1c8 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	460a      	mov	r2, r1
 800d1d2:	71fb      	strb	r3, [r7, #7]
 800d1d4:	4613      	mov	r3, r2
 800d1d6:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800d1d8:	79bb      	ldrb	r3, [r7, #6]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d006      	beq.n	800d1ec <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800d1de:	2201      	movs	r2, #1
 800d1e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d1e4:	481c      	ldr	r0, [pc, #112]	@ (800d258 <OLED_WR_Byte+0x90>)
 800d1e6:	f7f8 fb01 	bl	80057ec <HAL_GPIO_WritePin>
 800d1ea:	e005      	b.n	800d1f8 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d1f2:	4819      	ldr	r0, [pc, #100]	@ (800d258 <OLED_WR_Byte+0x90>)
 800d1f4:	f7f8 fafa 	bl	80057ec <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	73fb      	strb	r3, [r7, #15]
 800d1fc:	e01e      	b.n	800d23c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800d1fe:	2200      	movs	r2, #0
 800d200:	2120      	movs	r1, #32
 800d202:	4815      	ldr	r0, [pc, #84]	@ (800d258 <OLED_WR_Byte+0x90>)
 800d204:	f7f8 faf2 	bl	80057ec <HAL_GPIO_WritePin>
		if(dat&0x80)
 800d208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	da05      	bge.n	800d21c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800d210:	2201      	movs	r2, #1
 800d212:	2140      	movs	r1, #64	@ 0x40
 800d214:	4810      	ldr	r0, [pc, #64]	@ (800d258 <OLED_WR_Byte+0x90>)
 800d216:	f7f8 fae9 	bl	80057ec <HAL_GPIO_WritePin>
 800d21a:	e004      	b.n	800d226 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800d21c:	2200      	movs	r2, #0
 800d21e:	2140      	movs	r1, #64	@ 0x40
 800d220:	480d      	ldr	r0, [pc, #52]	@ (800d258 <OLED_WR_Byte+0x90>)
 800d222:	f7f8 fae3 	bl	80057ec <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800d226:	2201      	movs	r2, #1
 800d228:	2120      	movs	r1, #32
 800d22a:	480b      	ldr	r0, [pc, #44]	@ (800d258 <OLED_WR_Byte+0x90>)
 800d22c:	f7f8 fade 	bl	80057ec <HAL_GPIO_WritePin>
		dat<<=1;   
 800d230:	79fb      	ldrb	r3, [r7, #7]
 800d232:	005b      	lsls	r3, r3, #1
 800d234:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800d236:	7bfb      	ldrb	r3, [r7, #15]
 800d238:	3301      	adds	r3, #1
 800d23a:	73fb      	strb	r3, [r7, #15]
 800d23c:	7bfb      	ldrb	r3, [r7, #15]
 800d23e:	2b07      	cmp	r3, #7
 800d240:	d9dd      	bls.n	800d1fe <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800d242:	2201      	movs	r2, #1
 800d244:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d248:	4803      	ldr	r0, [pc, #12]	@ (800d258 <OLED_WR_Byte+0x90>)
 800d24a:	f7f8 facf 	bl	80057ec <HAL_GPIO_WritePin>
} 
 800d24e:	bf00      	nop
 800d250:	3710      	adds	r7, #16
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	40021000 	.word	0x40021000

0800d25c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800d262:	2300      	movs	r3, #0
 800d264:	71fb      	strb	r3, [r7, #7]
 800d266:	e014      	b.n	800d292 <OLED_Clear+0x36>
 800d268:	2300      	movs	r3, #0
 800d26a:	71bb      	strb	r3, [r7, #6]
 800d26c:	e00a      	b.n	800d284 <OLED_Clear+0x28>
 800d26e:	79ba      	ldrb	r2, [r7, #6]
 800d270:	79fb      	ldrb	r3, [r7, #7]
 800d272:	490c      	ldr	r1, [pc, #48]	@ (800d2a4 <OLED_Clear+0x48>)
 800d274:	00d2      	lsls	r2, r2, #3
 800d276:	440a      	add	r2, r1
 800d278:	4413      	add	r3, r2
 800d27a:	2200      	movs	r2, #0
 800d27c:	701a      	strb	r2, [r3, #0]
 800d27e:	79bb      	ldrb	r3, [r7, #6]
 800d280:	3301      	adds	r3, #1
 800d282:	71bb      	strb	r3, [r7, #6]
 800d284:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	daf0      	bge.n	800d26e <OLED_Clear+0x12>
 800d28c:	79fb      	ldrb	r3, [r7, #7]
 800d28e:	3301      	adds	r3, #1
 800d290:	71fb      	strb	r3, [r7, #7]
 800d292:	79fb      	ldrb	r3, [r7, #7]
 800d294:	2b07      	cmp	r3, #7
 800d296:	d9e7      	bls.n	800d268 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800d298:	f7ff ff5e 	bl	800d158 <OLED_Refresh_Gram>
}
 800d29c:	bf00      	nop
 800d29e:	3708      	adds	r7, #8
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}
 800d2a4:	20004f6c 	.word	0x20004f6c

0800d2a8 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b085      	sub	sp, #20
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	71fb      	strb	r3, [r7, #7]
 800d2b2:	460b      	mov	r3, r1
 800d2b4:	71bb      	strb	r3, [r7, #6]
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800d2be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	db41      	blt.n	800d34a <OLED_DrawPoint+0xa2>
 800d2c6:	79bb      	ldrb	r3, [r7, #6]
 800d2c8:	2b3f      	cmp	r3, #63	@ 0x3f
 800d2ca:	d83e      	bhi.n	800d34a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800d2cc:	79bb      	ldrb	r3, [r7, #6]
 800d2ce:	08db      	lsrs	r3, r3, #3
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	f1c3 0307 	rsb	r3, r3, #7
 800d2d6:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800d2d8:	79bb      	ldrb	r3, [r7, #6]
 800d2da:	f003 0307 	and.w	r3, r3, #7
 800d2de:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800d2e0:	7b7b      	ldrb	r3, [r7, #13]
 800d2e2:	f1c3 0307 	rsb	r3, r3, #7
 800d2e6:	2201      	movs	r2, #1
 800d2e8:	fa02 f303 	lsl.w	r3, r2, r3
 800d2ec:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800d2ee:	797b      	ldrb	r3, [r7, #5]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d012      	beq.n	800d31a <OLED_DrawPoint+0x72>
 800d2f4:	79fa      	ldrb	r2, [r7, #7]
 800d2f6:	7bbb      	ldrb	r3, [r7, #14]
 800d2f8:	4917      	ldr	r1, [pc, #92]	@ (800d358 <OLED_DrawPoint+0xb0>)
 800d2fa:	00d2      	lsls	r2, r2, #3
 800d2fc:	440a      	add	r2, r1
 800d2fe:	4413      	add	r3, r2
 800d300:	7818      	ldrb	r0, [r3, #0]
 800d302:	79fa      	ldrb	r2, [r7, #7]
 800d304:	7bbb      	ldrb	r3, [r7, #14]
 800d306:	7bf9      	ldrb	r1, [r7, #15]
 800d308:	4301      	orrs	r1, r0
 800d30a:	b2c8      	uxtb	r0, r1
 800d30c:	4912      	ldr	r1, [pc, #72]	@ (800d358 <OLED_DrawPoint+0xb0>)
 800d30e:	00d2      	lsls	r2, r2, #3
 800d310:	440a      	add	r2, r1
 800d312:	4413      	add	r3, r2
 800d314:	4602      	mov	r2, r0
 800d316:	701a      	strb	r2, [r3, #0]
 800d318:	e018      	b.n	800d34c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800d31a:	79fa      	ldrb	r2, [r7, #7]
 800d31c:	7bbb      	ldrb	r3, [r7, #14]
 800d31e:	490e      	ldr	r1, [pc, #56]	@ (800d358 <OLED_DrawPoint+0xb0>)
 800d320:	00d2      	lsls	r2, r2, #3
 800d322:	440a      	add	r2, r1
 800d324:	4413      	add	r3, r2
 800d326:	781b      	ldrb	r3, [r3, #0]
 800d328:	b25a      	sxtb	r2, r3
 800d32a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d32e:	43db      	mvns	r3, r3
 800d330:	b25b      	sxtb	r3, r3
 800d332:	4013      	ands	r3, r2
 800d334:	b259      	sxtb	r1, r3
 800d336:	79fa      	ldrb	r2, [r7, #7]
 800d338:	7bbb      	ldrb	r3, [r7, #14]
 800d33a:	b2c8      	uxtb	r0, r1
 800d33c:	4906      	ldr	r1, [pc, #24]	@ (800d358 <OLED_DrawPoint+0xb0>)
 800d33e:	00d2      	lsls	r2, r2, #3
 800d340:	440a      	add	r2, r1
 800d342:	4413      	add	r3, r2
 800d344:	4602      	mov	r2, r0
 800d346:	701a      	strb	r2, [r3, #0]
 800d348:	e000      	b.n	800d34c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800d34a:	bf00      	nop
}
 800d34c:	3714      	adds	r7, #20
 800d34e:	46bd      	mov	sp, r7
 800d350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d354:	4770      	bx	lr
 800d356:	bf00      	nop
 800d358:	20004f6c 	.word	0x20004f6c

0800d35c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800d35c:	b590      	push	{r4, r7, lr}
 800d35e:	b085      	sub	sp, #20
 800d360:	af00      	add	r7, sp, #0
 800d362:	4604      	mov	r4, r0
 800d364:	4608      	mov	r0, r1
 800d366:	4611      	mov	r1, r2
 800d368:	461a      	mov	r2, r3
 800d36a:	4623      	mov	r3, r4
 800d36c:	71fb      	strb	r3, [r7, #7]
 800d36e:	4603      	mov	r3, r0
 800d370:	71bb      	strb	r3, [r7, #6]
 800d372:	460b      	mov	r3, r1
 800d374:	717b      	strb	r3, [r7, #5]
 800d376:	4613      	mov	r3, r2
 800d378:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800d37a:	79bb      	ldrb	r3, [r7, #6]
 800d37c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800d37e:	797b      	ldrb	r3, [r7, #5]
 800d380:	3b20      	subs	r3, #32
 800d382:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800d384:	2300      	movs	r3, #0
 800d386:	73bb      	strb	r3, [r7, #14]
 800d388:	e04d      	b.n	800d426 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800d38a:	793b      	ldrb	r3, [r7, #4]
 800d38c:	2b0c      	cmp	r3, #12
 800d38e:	d10b      	bne.n	800d3a8 <OLED_ShowChar+0x4c>
 800d390:	797a      	ldrb	r2, [r7, #5]
 800d392:	7bb9      	ldrb	r1, [r7, #14]
 800d394:	4828      	ldr	r0, [pc, #160]	@ (800d438 <OLED_ShowChar+0xdc>)
 800d396:	4613      	mov	r3, r2
 800d398:	005b      	lsls	r3, r3, #1
 800d39a:	4413      	add	r3, r2
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	4403      	add	r3, r0
 800d3a0:	440b      	add	r3, r1
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	73fb      	strb	r3, [r7, #15]
 800d3a6:	e007      	b.n	800d3b8 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800d3a8:	797a      	ldrb	r2, [r7, #5]
 800d3aa:	7bbb      	ldrb	r3, [r7, #14]
 800d3ac:	4923      	ldr	r1, [pc, #140]	@ (800d43c <OLED_ShowChar+0xe0>)
 800d3ae:	0112      	lsls	r2, r2, #4
 800d3b0:	440a      	add	r2, r1
 800d3b2:	4413      	add	r3, r2
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	737b      	strb	r3, [r7, #13]
 800d3bc:	e02d      	b.n	800d41a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800d3be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	da07      	bge.n	800d3d6 <OLED_ShowChar+0x7a>
 800d3c6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d3ca:	79b9      	ldrb	r1, [r7, #6]
 800d3cc:	79fb      	ldrb	r3, [r7, #7]
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7ff ff6a 	bl	800d2a8 <OLED_DrawPoint>
 800d3d4:	e00c      	b.n	800d3f0 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800d3d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	bf0c      	ite	eq
 800d3de:	2301      	moveq	r3, #1
 800d3e0:	2300      	movne	r3, #0
 800d3e2:	b2db      	uxtb	r3, r3
 800d3e4:	461a      	mov	r2, r3
 800d3e6:	79b9      	ldrb	r1, [r7, #6]
 800d3e8:	79fb      	ldrb	r3, [r7, #7]
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7ff ff5c 	bl	800d2a8 <OLED_DrawPoint>
			temp<<=1;
 800d3f0:	7bfb      	ldrb	r3, [r7, #15]
 800d3f2:	005b      	lsls	r3, r3, #1
 800d3f4:	73fb      	strb	r3, [r7, #15]
			y++;
 800d3f6:	79bb      	ldrb	r3, [r7, #6]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800d3fc:	79ba      	ldrb	r2, [r7, #6]
 800d3fe:	7b3b      	ldrb	r3, [r7, #12]
 800d400:	1ad2      	subs	r2, r2, r3
 800d402:	793b      	ldrb	r3, [r7, #4]
 800d404:	429a      	cmp	r2, r3
 800d406:	d105      	bne.n	800d414 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800d408:	7b3b      	ldrb	r3, [r7, #12]
 800d40a:	71bb      	strb	r3, [r7, #6]
				x++;
 800d40c:	79fb      	ldrb	r3, [r7, #7]
 800d40e:	3301      	adds	r3, #1
 800d410:	71fb      	strb	r3, [r7, #7]
				break;
 800d412:	e005      	b.n	800d420 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800d414:	7b7b      	ldrb	r3, [r7, #13]
 800d416:	3301      	adds	r3, #1
 800d418:	737b      	strb	r3, [r7, #13]
 800d41a:	7b7b      	ldrb	r3, [r7, #13]
 800d41c:	2b07      	cmp	r3, #7
 800d41e:	d9ce      	bls.n	800d3be <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800d420:	7bbb      	ldrb	r3, [r7, #14]
 800d422:	3301      	adds	r3, #1
 800d424:	73bb      	strb	r3, [r7, #14]
 800d426:	7bba      	ldrb	r2, [r7, #14]
 800d428:	793b      	ldrb	r3, [r7, #4]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d3ad      	bcc.n	800d38a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800d42e:	bf00      	nop
 800d430:	bf00      	nop
 800d432:	3714      	adds	r7, #20
 800d434:	46bd      	mov	sp, r7
 800d436:	bd90      	pop	{r4, r7, pc}
 800d438:	0801194c 	.word	0x0801194c
 800d43c:	08011dc0 	.word	0x08011dc0

0800d440 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	af02      	add	r7, sp, #8
 800d446:	4603      	mov	r3, r0
 800d448:	603a      	str	r2, [r7, #0]
 800d44a:	71fb      	strb	r3, [r7, #7]
 800d44c:	460b      	mov	r3, r1
 800d44e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800d450:	e01f      	b.n	800d492 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800d452:	79fb      	ldrb	r3, [r7, #7]
 800d454:	2b7a      	cmp	r3, #122	@ 0x7a
 800d456:	d904      	bls.n	800d462 <OLED_ShowString+0x22>
 800d458:	2300      	movs	r3, #0
 800d45a:	71fb      	strb	r3, [r7, #7]
 800d45c:	79bb      	ldrb	r3, [r7, #6]
 800d45e:	3310      	adds	r3, #16
 800d460:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800d462:	79bb      	ldrb	r3, [r7, #6]
 800d464:	2b3a      	cmp	r3, #58	@ 0x3a
 800d466:	d905      	bls.n	800d474 <OLED_ShowString+0x34>
 800d468:	2300      	movs	r3, #0
 800d46a:	71fb      	strb	r3, [r7, #7]
 800d46c:	79fb      	ldrb	r3, [r7, #7]
 800d46e:	71bb      	strb	r3, [r7, #6]
 800d470:	f7ff fef4 	bl	800d25c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	781a      	ldrb	r2, [r3, #0]
 800d478:	79b9      	ldrb	r1, [r7, #6]
 800d47a:	79f8      	ldrb	r0, [r7, #7]
 800d47c:	2301      	movs	r3, #1
 800d47e:	9300      	str	r3, [sp, #0]
 800d480:	230c      	movs	r3, #12
 800d482:	f7ff ff6b 	bl	800d35c <OLED_ShowChar>
        x+=8;
 800d486:	79fb      	ldrb	r3, [r7, #7]
 800d488:	3308      	adds	r3, #8
 800d48a:	71fb      	strb	r3, [r7, #7]
        p++;
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	3301      	adds	r3, #1
 800d490:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d1db      	bne.n	800d452 <OLED_ShowString+0x12>
    }  
}	 
 800d49a:	bf00      	nop
 800d49c:	bf00      	nop
 800d49e:	3708      	adds	r7, #8
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <OLED_Init>:

void OLED_Init(void)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800d4a8:	f7f9 fa10 	bl	80068cc <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800d4ac:	4b41      	ldr	r3, [pc, #260]	@ (800d5b4 <OLED_Init+0x110>)
 800d4ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4b0:	4a40      	ldr	r2, [pc, #256]	@ (800d5b4 <OLED_Init+0x110>)
 800d4b2:	f023 0301 	bic.w	r3, r3, #1
 800d4b6:	6713      	str	r3, [r2, #112]	@ 0x70
 800d4b8:	4b3e      	ldr	r3, [pc, #248]	@ (800d5b4 <OLED_Init+0x110>)
 800d4ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4bc:	4a3d      	ldr	r2, [pc, #244]	@ (800d5b4 <OLED_Init+0x110>)
 800d4be:	f023 0304 	bic.w	r3, r3, #4
 800d4c2:	6713      	str	r3, [r2, #112]	@ 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800d4c4:	f7f9 fa16 	bl	80068f4 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	2180      	movs	r1, #128	@ 0x80
 800d4cc:	483a      	ldr	r0, [pc, #232]	@ (800d5b8 <OLED_Init+0x114>)
 800d4ce:	f7f8 f98d 	bl	80057ec <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800d4d2:	2064      	movs	r0, #100	@ 0x64
 800d4d4:	f7f7 fa0e 	bl	80048f4 <HAL_Delay>
	OLED_RST_Set();
 800d4d8:	2201      	movs	r2, #1
 800d4da:	2180      	movs	r1, #128	@ 0x80
 800d4dc:	4836      	ldr	r0, [pc, #216]	@ (800d5b8 <OLED_Init+0x114>)
 800d4de:	f7f8 f985 	bl	80057ec <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800d4e2:	2100      	movs	r1, #0
 800d4e4:	20ae      	movs	r0, #174	@ 0xae
 800d4e6:	f7ff fe6f 	bl	800d1c8 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800d4ea:	2100      	movs	r1, #0
 800d4ec:	20d5      	movs	r0, #213	@ 0xd5
 800d4ee:	f7ff fe6b 	bl	800d1c8 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800d4f2:	2100      	movs	r1, #0
 800d4f4:	2050      	movs	r0, #80	@ 0x50
 800d4f6:	f7ff fe67 	bl	800d1c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800d4fa:	2100      	movs	r1, #0
 800d4fc:	20a8      	movs	r0, #168	@ 0xa8
 800d4fe:	f7ff fe63 	bl	800d1c8 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800d502:	2100      	movs	r1, #0
 800d504:	203f      	movs	r0, #63	@ 0x3f
 800d506:	f7ff fe5f 	bl	800d1c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800d50a:	2100      	movs	r1, #0
 800d50c:	20d3      	movs	r0, #211	@ 0xd3
 800d50e:	f7ff fe5b 	bl	800d1c8 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800d512:	2100      	movs	r1, #0
 800d514:	2000      	movs	r0, #0
 800d516:	f7ff fe57 	bl	800d1c8 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800d51a:	2100      	movs	r1, #0
 800d51c:	2040      	movs	r0, #64	@ 0x40
 800d51e:	f7ff fe53 	bl	800d1c8 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800d522:	2100      	movs	r1, #0
 800d524:	208d      	movs	r0, #141	@ 0x8d
 800d526:	f7ff fe4f 	bl	800d1c8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800d52a:	2100      	movs	r1, #0
 800d52c:	2014      	movs	r0, #20
 800d52e:	f7ff fe4b 	bl	800d1c8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800d532:	2100      	movs	r1, #0
 800d534:	2020      	movs	r0, #32
 800d536:	f7ff fe47 	bl	800d1c8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800d53a:	2100      	movs	r1, #0
 800d53c:	2002      	movs	r0, #2
 800d53e:	f7ff fe43 	bl	800d1c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800d542:	2100      	movs	r1, #0
 800d544:	20a1      	movs	r0, #161	@ 0xa1
 800d546:	f7ff fe3f 	bl	800d1c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800d54a:	2100      	movs	r1, #0
 800d54c:	20c0      	movs	r0, #192	@ 0xc0
 800d54e:	f7ff fe3b 	bl	800d1c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800d552:	2100      	movs	r1, #0
 800d554:	20da      	movs	r0, #218	@ 0xda
 800d556:	f7ff fe37 	bl	800d1c8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800d55a:	2100      	movs	r1, #0
 800d55c:	2012      	movs	r0, #18
 800d55e:	f7ff fe33 	bl	800d1c8 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800d562:	2100      	movs	r1, #0
 800d564:	2081      	movs	r0, #129	@ 0x81
 800d566:	f7ff fe2f 	bl	800d1c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800d56a:	2100      	movs	r1, #0
 800d56c:	20ef      	movs	r0, #239	@ 0xef
 800d56e:	f7ff fe2b 	bl	800d1c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800d572:	2100      	movs	r1, #0
 800d574:	20d9      	movs	r0, #217	@ 0xd9
 800d576:	f7ff fe27 	bl	800d1c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800d57a:	2100      	movs	r1, #0
 800d57c:	20f1      	movs	r0, #241	@ 0xf1
 800d57e:	f7ff fe23 	bl	800d1c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800d582:	2100      	movs	r1, #0
 800d584:	20db      	movs	r0, #219	@ 0xdb
 800d586:	f7ff fe1f 	bl	800d1c8 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800d58a:	2100      	movs	r1, #0
 800d58c:	2030      	movs	r0, #48	@ 0x30
 800d58e:	f7ff fe1b 	bl	800d1c8 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800d592:	2100      	movs	r1, #0
 800d594:	20a4      	movs	r0, #164	@ 0xa4
 800d596:	f7ff fe17 	bl	800d1c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800d59a:	2100      	movs	r1, #0
 800d59c:	20a6      	movs	r0, #166	@ 0xa6
 800d59e:	f7ff fe13 	bl	800d1c8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800d5a2:	2100      	movs	r1, #0
 800d5a4:	20af      	movs	r0, #175	@ 0xaf
 800d5a6:	f7ff fe0f 	bl	800d1c8 <OLED_WR_Byte>
	OLED_Clear(); 
 800d5aa:	f7ff fe57 	bl	800d25c <OLED_Clear>
 800d5ae:	bf00      	nop
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	40023800 	.word	0x40023800
 800d5b8:	40021000 	.word	0x40021000

0800d5bc <__cvt>:
 800d5bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5c0:	ec57 6b10 	vmov	r6, r7, d0
 800d5c4:	2f00      	cmp	r7, #0
 800d5c6:	460c      	mov	r4, r1
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	463b      	mov	r3, r7
 800d5cc:	bfbb      	ittet	lt
 800d5ce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d5d2:	461f      	movlt	r7, r3
 800d5d4:	2300      	movge	r3, #0
 800d5d6:	232d      	movlt	r3, #45	@ 0x2d
 800d5d8:	700b      	strb	r3, [r1, #0]
 800d5da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d5dc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d5e0:	4691      	mov	r9, r2
 800d5e2:	f023 0820 	bic.w	r8, r3, #32
 800d5e6:	bfbc      	itt	lt
 800d5e8:	4632      	movlt	r2, r6
 800d5ea:	4616      	movlt	r6, r2
 800d5ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d5f0:	d005      	beq.n	800d5fe <__cvt+0x42>
 800d5f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d5f6:	d100      	bne.n	800d5fa <__cvt+0x3e>
 800d5f8:	3401      	adds	r4, #1
 800d5fa:	2102      	movs	r1, #2
 800d5fc:	e000      	b.n	800d600 <__cvt+0x44>
 800d5fe:	2103      	movs	r1, #3
 800d600:	ab03      	add	r3, sp, #12
 800d602:	9301      	str	r3, [sp, #4]
 800d604:	ab02      	add	r3, sp, #8
 800d606:	9300      	str	r3, [sp, #0]
 800d608:	ec47 6b10 	vmov	d0, r6, r7
 800d60c:	4653      	mov	r3, sl
 800d60e:	4622      	mov	r2, r4
 800d610:	f000 feae 	bl	800e370 <_dtoa_r>
 800d614:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d618:	4605      	mov	r5, r0
 800d61a:	d119      	bne.n	800d650 <__cvt+0x94>
 800d61c:	f019 0f01 	tst.w	r9, #1
 800d620:	d00e      	beq.n	800d640 <__cvt+0x84>
 800d622:	eb00 0904 	add.w	r9, r0, r4
 800d626:	2200      	movs	r2, #0
 800d628:	2300      	movs	r3, #0
 800d62a:	4630      	mov	r0, r6
 800d62c:	4639      	mov	r1, r7
 800d62e:	f7f3 fa4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d632:	b108      	cbz	r0, 800d638 <__cvt+0x7c>
 800d634:	f8cd 900c 	str.w	r9, [sp, #12]
 800d638:	2230      	movs	r2, #48	@ 0x30
 800d63a:	9b03      	ldr	r3, [sp, #12]
 800d63c:	454b      	cmp	r3, r9
 800d63e:	d31e      	bcc.n	800d67e <__cvt+0xc2>
 800d640:	9b03      	ldr	r3, [sp, #12]
 800d642:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d644:	1b5b      	subs	r3, r3, r5
 800d646:	4628      	mov	r0, r5
 800d648:	6013      	str	r3, [r2, #0]
 800d64a:	b004      	add	sp, #16
 800d64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d650:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d654:	eb00 0904 	add.w	r9, r0, r4
 800d658:	d1e5      	bne.n	800d626 <__cvt+0x6a>
 800d65a:	7803      	ldrb	r3, [r0, #0]
 800d65c:	2b30      	cmp	r3, #48	@ 0x30
 800d65e:	d10a      	bne.n	800d676 <__cvt+0xba>
 800d660:	2200      	movs	r2, #0
 800d662:	2300      	movs	r3, #0
 800d664:	4630      	mov	r0, r6
 800d666:	4639      	mov	r1, r7
 800d668:	f7f3 fa2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d66c:	b918      	cbnz	r0, 800d676 <__cvt+0xba>
 800d66e:	f1c4 0401 	rsb	r4, r4, #1
 800d672:	f8ca 4000 	str.w	r4, [sl]
 800d676:	f8da 3000 	ldr.w	r3, [sl]
 800d67a:	4499      	add	r9, r3
 800d67c:	e7d3      	b.n	800d626 <__cvt+0x6a>
 800d67e:	1c59      	adds	r1, r3, #1
 800d680:	9103      	str	r1, [sp, #12]
 800d682:	701a      	strb	r2, [r3, #0]
 800d684:	e7d9      	b.n	800d63a <__cvt+0x7e>

0800d686 <__exponent>:
 800d686:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d688:	2900      	cmp	r1, #0
 800d68a:	bfba      	itte	lt
 800d68c:	4249      	neglt	r1, r1
 800d68e:	232d      	movlt	r3, #45	@ 0x2d
 800d690:	232b      	movge	r3, #43	@ 0x2b
 800d692:	2909      	cmp	r1, #9
 800d694:	7002      	strb	r2, [r0, #0]
 800d696:	7043      	strb	r3, [r0, #1]
 800d698:	dd29      	ble.n	800d6ee <__exponent+0x68>
 800d69a:	f10d 0307 	add.w	r3, sp, #7
 800d69e:	461d      	mov	r5, r3
 800d6a0:	270a      	movs	r7, #10
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	fbb1 f6f7 	udiv	r6, r1, r7
 800d6a8:	fb07 1416 	mls	r4, r7, r6, r1
 800d6ac:	3430      	adds	r4, #48	@ 0x30
 800d6ae:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d6b2:	460c      	mov	r4, r1
 800d6b4:	2c63      	cmp	r4, #99	@ 0x63
 800d6b6:	f103 33ff 	add.w	r3, r3, #4294967295
 800d6ba:	4631      	mov	r1, r6
 800d6bc:	dcf1      	bgt.n	800d6a2 <__exponent+0x1c>
 800d6be:	3130      	adds	r1, #48	@ 0x30
 800d6c0:	1e94      	subs	r4, r2, #2
 800d6c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d6c6:	1c41      	adds	r1, r0, #1
 800d6c8:	4623      	mov	r3, r4
 800d6ca:	42ab      	cmp	r3, r5
 800d6cc:	d30a      	bcc.n	800d6e4 <__exponent+0x5e>
 800d6ce:	f10d 0309 	add.w	r3, sp, #9
 800d6d2:	1a9b      	subs	r3, r3, r2
 800d6d4:	42ac      	cmp	r4, r5
 800d6d6:	bf88      	it	hi
 800d6d8:	2300      	movhi	r3, #0
 800d6da:	3302      	adds	r3, #2
 800d6dc:	4403      	add	r3, r0
 800d6de:	1a18      	subs	r0, r3, r0
 800d6e0:	b003      	add	sp, #12
 800d6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6e4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d6e8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d6ec:	e7ed      	b.n	800d6ca <__exponent+0x44>
 800d6ee:	2330      	movs	r3, #48	@ 0x30
 800d6f0:	3130      	adds	r1, #48	@ 0x30
 800d6f2:	7083      	strb	r3, [r0, #2]
 800d6f4:	70c1      	strb	r1, [r0, #3]
 800d6f6:	1d03      	adds	r3, r0, #4
 800d6f8:	e7f1      	b.n	800d6de <__exponent+0x58>
	...

0800d6fc <_printf_float>:
 800d6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d700:	b08d      	sub	sp, #52	@ 0x34
 800d702:	460c      	mov	r4, r1
 800d704:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d708:	4616      	mov	r6, r2
 800d70a:	461f      	mov	r7, r3
 800d70c:	4605      	mov	r5, r0
 800d70e:	f000 fd21 	bl	800e154 <_localeconv_r>
 800d712:	6803      	ldr	r3, [r0, #0]
 800d714:	9304      	str	r3, [sp, #16]
 800d716:	4618      	mov	r0, r3
 800d718:	f7f2 fdaa 	bl	8000270 <strlen>
 800d71c:	2300      	movs	r3, #0
 800d71e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d720:	f8d8 3000 	ldr.w	r3, [r8]
 800d724:	9005      	str	r0, [sp, #20]
 800d726:	3307      	adds	r3, #7
 800d728:	f023 0307 	bic.w	r3, r3, #7
 800d72c:	f103 0208 	add.w	r2, r3, #8
 800d730:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d734:	f8d4 b000 	ldr.w	fp, [r4]
 800d738:	f8c8 2000 	str.w	r2, [r8]
 800d73c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d740:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d744:	9307      	str	r3, [sp, #28]
 800d746:	f8cd 8018 	str.w	r8, [sp, #24]
 800d74a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d74e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d752:	4b9c      	ldr	r3, [pc, #624]	@ (800d9c4 <_printf_float+0x2c8>)
 800d754:	f04f 32ff 	mov.w	r2, #4294967295
 800d758:	f7f3 f9e8 	bl	8000b2c <__aeabi_dcmpun>
 800d75c:	bb70      	cbnz	r0, 800d7bc <_printf_float+0xc0>
 800d75e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d762:	4b98      	ldr	r3, [pc, #608]	@ (800d9c4 <_printf_float+0x2c8>)
 800d764:	f04f 32ff 	mov.w	r2, #4294967295
 800d768:	f7f3 f9c2 	bl	8000af0 <__aeabi_dcmple>
 800d76c:	bb30      	cbnz	r0, 800d7bc <_printf_float+0xc0>
 800d76e:	2200      	movs	r2, #0
 800d770:	2300      	movs	r3, #0
 800d772:	4640      	mov	r0, r8
 800d774:	4649      	mov	r1, r9
 800d776:	f7f3 f9b1 	bl	8000adc <__aeabi_dcmplt>
 800d77a:	b110      	cbz	r0, 800d782 <_printf_float+0x86>
 800d77c:	232d      	movs	r3, #45	@ 0x2d
 800d77e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d782:	4a91      	ldr	r2, [pc, #580]	@ (800d9c8 <_printf_float+0x2cc>)
 800d784:	4b91      	ldr	r3, [pc, #580]	@ (800d9cc <_printf_float+0x2d0>)
 800d786:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d78a:	bf94      	ite	ls
 800d78c:	4690      	movls	r8, r2
 800d78e:	4698      	movhi	r8, r3
 800d790:	2303      	movs	r3, #3
 800d792:	6123      	str	r3, [r4, #16]
 800d794:	f02b 0304 	bic.w	r3, fp, #4
 800d798:	6023      	str	r3, [r4, #0]
 800d79a:	f04f 0900 	mov.w	r9, #0
 800d79e:	9700      	str	r7, [sp, #0]
 800d7a0:	4633      	mov	r3, r6
 800d7a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d7a4:	4621      	mov	r1, r4
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	f000 f9d2 	bl	800db50 <_printf_common>
 800d7ac:	3001      	adds	r0, #1
 800d7ae:	f040 808d 	bne.w	800d8cc <_printf_float+0x1d0>
 800d7b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d7b6:	b00d      	add	sp, #52	@ 0x34
 800d7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7bc:	4642      	mov	r2, r8
 800d7be:	464b      	mov	r3, r9
 800d7c0:	4640      	mov	r0, r8
 800d7c2:	4649      	mov	r1, r9
 800d7c4:	f7f3 f9b2 	bl	8000b2c <__aeabi_dcmpun>
 800d7c8:	b140      	cbz	r0, 800d7dc <_printf_float+0xe0>
 800d7ca:	464b      	mov	r3, r9
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	bfbc      	itt	lt
 800d7d0:	232d      	movlt	r3, #45	@ 0x2d
 800d7d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d7d6:	4a7e      	ldr	r2, [pc, #504]	@ (800d9d0 <_printf_float+0x2d4>)
 800d7d8:	4b7e      	ldr	r3, [pc, #504]	@ (800d9d4 <_printf_float+0x2d8>)
 800d7da:	e7d4      	b.n	800d786 <_printf_float+0x8a>
 800d7dc:	6863      	ldr	r3, [r4, #4]
 800d7de:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d7e2:	9206      	str	r2, [sp, #24]
 800d7e4:	1c5a      	adds	r2, r3, #1
 800d7e6:	d13b      	bne.n	800d860 <_printf_float+0x164>
 800d7e8:	2306      	movs	r3, #6
 800d7ea:	6063      	str	r3, [r4, #4]
 800d7ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	6022      	str	r2, [r4, #0]
 800d7f4:	9303      	str	r3, [sp, #12]
 800d7f6:	ab0a      	add	r3, sp, #40	@ 0x28
 800d7f8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d7fc:	ab09      	add	r3, sp, #36	@ 0x24
 800d7fe:	9300      	str	r3, [sp, #0]
 800d800:	6861      	ldr	r1, [r4, #4]
 800d802:	ec49 8b10 	vmov	d0, r8, r9
 800d806:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d80a:	4628      	mov	r0, r5
 800d80c:	f7ff fed6 	bl	800d5bc <__cvt>
 800d810:	9b06      	ldr	r3, [sp, #24]
 800d812:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d814:	2b47      	cmp	r3, #71	@ 0x47
 800d816:	4680      	mov	r8, r0
 800d818:	d129      	bne.n	800d86e <_printf_float+0x172>
 800d81a:	1cc8      	adds	r0, r1, #3
 800d81c:	db02      	blt.n	800d824 <_printf_float+0x128>
 800d81e:	6863      	ldr	r3, [r4, #4]
 800d820:	4299      	cmp	r1, r3
 800d822:	dd41      	ble.n	800d8a8 <_printf_float+0x1ac>
 800d824:	f1aa 0a02 	sub.w	sl, sl, #2
 800d828:	fa5f fa8a 	uxtb.w	sl, sl
 800d82c:	3901      	subs	r1, #1
 800d82e:	4652      	mov	r2, sl
 800d830:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d834:	9109      	str	r1, [sp, #36]	@ 0x24
 800d836:	f7ff ff26 	bl	800d686 <__exponent>
 800d83a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d83c:	1813      	adds	r3, r2, r0
 800d83e:	2a01      	cmp	r2, #1
 800d840:	4681      	mov	r9, r0
 800d842:	6123      	str	r3, [r4, #16]
 800d844:	dc02      	bgt.n	800d84c <_printf_float+0x150>
 800d846:	6822      	ldr	r2, [r4, #0]
 800d848:	07d2      	lsls	r2, r2, #31
 800d84a:	d501      	bpl.n	800d850 <_printf_float+0x154>
 800d84c:	3301      	adds	r3, #1
 800d84e:	6123      	str	r3, [r4, #16]
 800d850:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d854:	2b00      	cmp	r3, #0
 800d856:	d0a2      	beq.n	800d79e <_printf_float+0xa2>
 800d858:	232d      	movs	r3, #45	@ 0x2d
 800d85a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d85e:	e79e      	b.n	800d79e <_printf_float+0xa2>
 800d860:	9a06      	ldr	r2, [sp, #24]
 800d862:	2a47      	cmp	r2, #71	@ 0x47
 800d864:	d1c2      	bne.n	800d7ec <_printf_float+0xf0>
 800d866:	2b00      	cmp	r3, #0
 800d868:	d1c0      	bne.n	800d7ec <_printf_float+0xf0>
 800d86a:	2301      	movs	r3, #1
 800d86c:	e7bd      	b.n	800d7ea <_printf_float+0xee>
 800d86e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d872:	d9db      	bls.n	800d82c <_printf_float+0x130>
 800d874:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d878:	d118      	bne.n	800d8ac <_printf_float+0x1b0>
 800d87a:	2900      	cmp	r1, #0
 800d87c:	6863      	ldr	r3, [r4, #4]
 800d87e:	dd0b      	ble.n	800d898 <_printf_float+0x19c>
 800d880:	6121      	str	r1, [r4, #16]
 800d882:	b913      	cbnz	r3, 800d88a <_printf_float+0x18e>
 800d884:	6822      	ldr	r2, [r4, #0]
 800d886:	07d0      	lsls	r0, r2, #31
 800d888:	d502      	bpl.n	800d890 <_printf_float+0x194>
 800d88a:	3301      	adds	r3, #1
 800d88c:	440b      	add	r3, r1
 800d88e:	6123      	str	r3, [r4, #16]
 800d890:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d892:	f04f 0900 	mov.w	r9, #0
 800d896:	e7db      	b.n	800d850 <_printf_float+0x154>
 800d898:	b913      	cbnz	r3, 800d8a0 <_printf_float+0x1a4>
 800d89a:	6822      	ldr	r2, [r4, #0]
 800d89c:	07d2      	lsls	r2, r2, #31
 800d89e:	d501      	bpl.n	800d8a4 <_printf_float+0x1a8>
 800d8a0:	3302      	adds	r3, #2
 800d8a2:	e7f4      	b.n	800d88e <_printf_float+0x192>
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	e7f2      	b.n	800d88e <_printf_float+0x192>
 800d8a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d8ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8ae:	4299      	cmp	r1, r3
 800d8b0:	db05      	blt.n	800d8be <_printf_float+0x1c2>
 800d8b2:	6823      	ldr	r3, [r4, #0]
 800d8b4:	6121      	str	r1, [r4, #16]
 800d8b6:	07d8      	lsls	r0, r3, #31
 800d8b8:	d5ea      	bpl.n	800d890 <_printf_float+0x194>
 800d8ba:	1c4b      	adds	r3, r1, #1
 800d8bc:	e7e7      	b.n	800d88e <_printf_float+0x192>
 800d8be:	2900      	cmp	r1, #0
 800d8c0:	bfd4      	ite	le
 800d8c2:	f1c1 0202 	rsble	r2, r1, #2
 800d8c6:	2201      	movgt	r2, #1
 800d8c8:	4413      	add	r3, r2
 800d8ca:	e7e0      	b.n	800d88e <_printf_float+0x192>
 800d8cc:	6823      	ldr	r3, [r4, #0]
 800d8ce:	055a      	lsls	r2, r3, #21
 800d8d0:	d407      	bmi.n	800d8e2 <_printf_float+0x1e6>
 800d8d2:	6923      	ldr	r3, [r4, #16]
 800d8d4:	4642      	mov	r2, r8
 800d8d6:	4631      	mov	r1, r6
 800d8d8:	4628      	mov	r0, r5
 800d8da:	47b8      	blx	r7
 800d8dc:	3001      	adds	r0, #1
 800d8de:	d12b      	bne.n	800d938 <_printf_float+0x23c>
 800d8e0:	e767      	b.n	800d7b2 <_printf_float+0xb6>
 800d8e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d8e6:	f240 80dd 	bls.w	800daa4 <_printf_float+0x3a8>
 800d8ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	f7f3 f8e9 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8f6:	2800      	cmp	r0, #0
 800d8f8:	d033      	beq.n	800d962 <_printf_float+0x266>
 800d8fa:	4a37      	ldr	r2, [pc, #220]	@ (800d9d8 <_printf_float+0x2dc>)
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	4631      	mov	r1, r6
 800d900:	4628      	mov	r0, r5
 800d902:	47b8      	blx	r7
 800d904:	3001      	adds	r0, #1
 800d906:	f43f af54 	beq.w	800d7b2 <_printf_float+0xb6>
 800d90a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d90e:	4543      	cmp	r3, r8
 800d910:	db02      	blt.n	800d918 <_printf_float+0x21c>
 800d912:	6823      	ldr	r3, [r4, #0]
 800d914:	07d8      	lsls	r0, r3, #31
 800d916:	d50f      	bpl.n	800d938 <_printf_float+0x23c>
 800d918:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d91c:	4631      	mov	r1, r6
 800d91e:	4628      	mov	r0, r5
 800d920:	47b8      	blx	r7
 800d922:	3001      	adds	r0, #1
 800d924:	f43f af45 	beq.w	800d7b2 <_printf_float+0xb6>
 800d928:	f04f 0900 	mov.w	r9, #0
 800d92c:	f108 38ff 	add.w	r8, r8, #4294967295
 800d930:	f104 0a1a 	add.w	sl, r4, #26
 800d934:	45c8      	cmp	r8, r9
 800d936:	dc09      	bgt.n	800d94c <_printf_float+0x250>
 800d938:	6823      	ldr	r3, [r4, #0]
 800d93a:	079b      	lsls	r3, r3, #30
 800d93c:	f100 8103 	bmi.w	800db46 <_printf_float+0x44a>
 800d940:	68e0      	ldr	r0, [r4, #12]
 800d942:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d944:	4298      	cmp	r0, r3
 800d946:	bfb8      	it	lt
 800d948:	4618      	movlt	r0, r3
 800d94a:	e734      	b.n	800d7b6 <_printf_float+0xba>
 800d94c:	2301      	movs	r3, #1
 800d94e:	4652      	mov	r2, sl
 800d950:	4631      	mov	r1, r6
 800d952:	4628      	mov	r0, r5
 800d954:	47b8      	blx	r7
 800d956:	3001      	adds	r0, #1
 800d958:	f43f af2b 	beq.w	800d7b2 <_printf_float+0xb6>
 800d95c:	f109 0901 	add.w	r9, r9, #1
 800d960:	e7e8      	b.n	800d934 <_printf_float+0x238>
 800d962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d964:	2b00      	cmp	r3, #0
 800d966:	dc39      	bgt.n	800d9dc <_printf_float+0x2e0>
 800d968:	4a1b      	ldr	r2, [pc, #108]	@ (800d9d8 <_printf_float+0x2dc>)
 800d96a:	2301      	movs	r3, #1
 800d96c:	4631      	mov	r1, r6
 800d96e:	4628      	mov	r0, r5
 800d970:	47b8      	blx	r7
 800d972:	3001      	adds	r0, #1
 800d974:	f43f af1d 	beq.w	800d7b2 <_printf_float+0xb6>
 800d978:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d97c:	ea59 0303 	orrs.w	r3, r9, r3
 800d980:	d102      	bne.n	800d988 <_printf_float+0x28c>
 800d982:	6823      	ldr	r3, [r4, #0]
 800d984:	07d9      	lsls	r1, r3, #31
 800d986:	d5d7      	bpl.n	800d938 <_printf_float+0x23c>
 800d988:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d98c:	4631      	mov	r1, r6
 800d98e:	4628      	mov	r0, r5
 800d990:	47b8      	blx	r7
 800d992:	3001      	adds	r0, #1
 800d994:	f43f af0d 	beq.w	800d7b2 <_printf_float+0xb6>
 800d998:	f04f 0a00 	mov.w	sl, #0
 800d99c:	f104 0b1a 	add.w	fp, r4, #26
 800d9a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9a2:	425b      	negs	r3, r3
 800d9a4:	4553      	cmp	r3, sl
 800d9a6:	dc01      	bgt.n	800d9ac <_printf_float+0x2b0>
 800d9a8:	464b      	mov	r3, r9
 800d9aa:	e793      	b.n	800d8d4 <_printf_float+0x1d8>
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	465a      	mov	r2, fp
 800d9b0:	4631      	mov	r1, r6
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	47b8      	blx	r7
 800d9b6:	3001      	adds	r0, #1
 800d9b8:	f43f aefb 	beq.w	800d7b2 <_printf_float+0xb6>
 800d9bc:	f10a 0a01 	add.w	sl, sl, #1
 800d9c0:	e7ee      	b.n	800d9a0 <_printf_float+0x2a4>
 800d9c2:	bf00      	nop
 800d9c4:	7fefffff 	.word	0x7fefffff
 800d9c8:	080123b0 	.word	0x080123b0
 800d9cc:	080123b4 	.word	0x080123b4
 800d9d0:	080123b8 	.word	0x080123b8
 800d9d4:	080123bc 	.word	0x080123bc
 800d9d8:	080123c0 	.word	0x080123c0
 800d9dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d9de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d9e2:	4553      	cmp	r3, sl
 800d9e4:	bfa8      	it	ge
 800d9e6:	4653      	movge	r3, sl
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	4699      	mov	r9, r3
 800d9ec:	dc36      	bgt.n	800da5c <_printf_float+0x360>
 800d9ee:	f04f 0b00 	mov.w	fp, #0
 800d9f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d9f6:	f104 021a 	add.w	r2, r4, #26
 800d9fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d9fc:	9306      	str	r3, [sp, #24]
 800d9fe:	eba3 0309 	sub.w	r3, r3, r9
 800da02:	455b      	cmp	r3, fp
 800da04:	dc31      	bgt.n	800da6a <_printf_float+0x36e>
 800da06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da08:	459a      	cmp	sl, r3
 800da0a:	dc3a      	bgt.n	800da82 <_printf_float+0x386>
 800da0c:	6823      	ldr	r3, [r4, #0]
 800da0e:	07da      	lsls	r2, r3, #31
 800da10:	d437      	bmi.n	800da82 <_printf_float+0x386>
 800da12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da14:	ebaa 0903 	sub.w	r9, sl, r3
 800da18:	9b06      	ldr	r3, [sp, #24]
 800da1a:	ebaa 0303 	sub.w	r3, sl, r3
 800da1e:	4599      	cmp	r9, r3
 800da20:	bfa8      	it	ge
 800da22:	4699      	movge	r9, r3
 800da24:	f1b9 0f00 	cmp.w	r9, #0
 800da28:	dc33      	bgt.n	800da92 <_printf_float+0x396>
 800da2a:	f04f 0800 	mov.w	r8, #0
 800da2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da32:	f104 0b1a 	add.w	fp, r4, #26
 800da36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da38:	ebaa 0303 	sub.w	r3, sl, r3
 800da3c:	eba3 0309 	sub.w	r3, r3, r9
 800da40:	4543      	cmp	r3, r8
 800da42:	f77f af79 	ble.w	800d938 <_printf_float+0x23c>
 800da46:	2301      	movs	r3, #1
 800da48:	465a      	mov	r2, fp
 800da4a:	4631      	mov	r1, r6
 800da4c:	4628      	mov	r0, r5
 800da4e:	47b8      	blx	r7
 800da50:	3001      	adds	r0, #1
 800da52:	f43f aeae 	beq.w	800d7b2 <_printf_float+0xb6>
 800da56:	f108 0801 	add.w	r8, r8, #1
 800da5a:	e7ec      	b.n	800da36 <_printf_float+0x33a>
 800da5c:	4642      	mov	r2, r8
 800da5e:	4631      	mov	r1, r6
 800da60:	4628      	mov	r0, r5
 800da62:	47b8      	blx	r7
 800da64:	3001      	adds	r0, #1
 800da66:	d1c2      	bne.n	800d9ee <_printf_float+0x2f2>
 800da68:	e6a3      	b.n	800d7b2 <_printf_float+0xb6>
 800da6a:	2301      	movs	r3, #1
 800da6c:	4631      	mov	r1, r6
 800da6e:	4628      	mov	r0, r5
 800da70:	9206      	str	r2, [sp, #24]
 800da72:	47b8      	blx	r7
 800da74:	3001      	adds	r0, #1
 800da76:	f43f ae9c 	beq.w	800d7b2 <_printf_float+0xb6>
 800da7a:	9a06      	ldr	r2, [sp, #24]
 800da7c:	f10b 0b01 	add.w	fp, fp, #1
 800da80:	e7bb      	b.n	800d9fa <_printf_float+0x2fe>
 800da82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da86:	4631      	mov	r1, r6
 800da88:	4628      	mov	r0, r5
 800da8a:	47b8      	blx	r7
 800da8c:	3001      	adds	r0, #1
 800da8e:	d1c0      	bne.n	800da12 <_printf_float+0x316>
 800da90:	e68f      	b.n	800d7b2 <_printf_float+0xb6>
 800da92:	9a06      	ldr	r2, [sp, #24]
 800da94:	464b      	mov	r3, r9
 800da96:	4442      	add	r2, r8
 800da98:	4631      	mov	r1, r6
 800da9a:	4628      	mov	r0, r5
 800da9c:	47b8      	blx	r7
 800da9e:	3001      	adds	r0, #1
 800daa0:	d1c3      	bne.n	800da2a <_printf_float+0x32e>
 800daa2:	e686      	b.n	800d7b2 <_printf_float+0xb6>
 800daa4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800daa8:	f1ba 0f01 	cmp.w	sl, #1
 800daac:	dc01      	bgt.n	800dab2 <_printf_float+0x3b6>
 800daae:	07db      	lsls	r3, r3, #31
 800dab0:	d536      	bpl.n	800db20 <_printf_float+0x424>
 800dab2:	2301      	movs	r3, #1
 800dab4:	4642      	mov	r2, r8
 800dab6:	4631      	mov	r1, r6
 800dab8:	4628      	mov	r0, r5
 800daba:	47b8      	blx	r7
 800dabc:	3001      	adds	r0, #1
 800dabe:	f43f ae78 	beq.w	800d7b2 <_printf_float+0xb6>
 800dac2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dac6:	4631      	mov	r1, r6
 800dac8:	4628      	mov	r0, r5
 800daca:	47b8      	blx	r7
 800dacc:	3001      	adds	r0, #1
 800dace:	f43f ae70 	beq.w	800d7b2 <_printf_float+0xb6>
 800dad2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dad6:	2200      	movs	r2, #0
 800dad8:	2300      	movs	r3, #0
 800dada:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dade:	f7f2 fff3 	bl	8000ac8 <__aeabi_dcmpeq>
 800dae2:	b9c0      	cbnz	r0, 800db16 <_printf_float+0x41a>
 800dae4:	4653      	mov	r3, sl
 800dae6:	f108 0201 	add.w	r2, r8, #1
 800daea:	4631      	mov	r1, r6
 800daec:	4628      	mov	r0, r5
 800daee:	47b8      	blx	r7
 800daf0:	3001      	adds	r0, #1
 800daf2:	d10c      	bne.n	800db0e <_printf_float+0x412>
 800daf4:	e65d      	b.n	800d7b2 <_printf_float+0xb6>
 800daf6:	2301      	movs	r3, #1
 800daf8:	465a      	mov	r2, fp
 800dafa:	4631      	mov	r1, r6
 800dafc:	4628      	mov	r0, r5
 800dafe:	47b8      	blx	r7
 800db00:	3001      	adds	r0, #1
 800db02:	f43f ae56 	beq.w	800d7b2 <_printf_float+0xb6>
 800db06:	f108 0801 	add.w	r8, r8, #1
 800db0a:	45d0      	cmp	r8, sl
 800db0c:	dbf3      	blt.n	800daf6 <_printf_float+0x3fa>
 800db0e:	464b      	mov	r3, r9
 800db10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800db14:	e6df      	b.n	800d8d6 <_printf_float+0x1da>
 800db16:	f04f 0800 	mov.w	r8, #0
 800db1a:	f104 0b1a 	add.w	fp, r4, #26
 800db1e:	e7f4      	b.n	800db0a <_printf_float+0x40e>
 800db20:	2301      	movs	r3, #1
 800db22:	4642      	mov	r2, r8
 800db24:	e7e1      	b.n	800daea <_printf_float+0x3ee>
 800db26:	2301      	movs	r3, #1
 800db28:	464a      	mov	r2, r9
 800db2a:	4631      	mov	r1, r6
 800db2c:	4628      	mov	r0, r5
 800db2e:	47b8      	blx	r7
 800db30:	3001      	adds	r0, #1
 800db32:	f43f ae3e 	beq.w	800d7b2 <_printf_float+0xb6>
 800db36:	f108 0801 	add.w	r8, r8, #1
 800db3a:	68e3      	ldr	r3, [r4, #12]
 800db3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800db3e:	1a5b      	subs	r3, r3, r1
 800db40:	4543      	cmp	r3, r8
 800db42:	dcf0      	bgt.n	800db26 <_printf_float+0x42a>
 800db44:	e6fc      	b.n	800d940 <_printf_float+0x244>
 800db46:	f04f 0800 	mov.w	r8, #0
 800db4a:	f104 0919 	add.w	r9, r4, #25
 800db4e:	e7f4      	b.n	800db3a <_printf_float+0x43e>

0800db50 <_printf_common>:
 800db50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db54:	4616      	mov	r6, r2
 800db56:	4698      	mov	r8, r3
 800db58:	688a      	ldr	r2, [r1, #8]
 800db5a:	690b      	ldr	r3, [r1, #16]
 800db5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800db60:	4293      	cmp	r3, r2
 800db62:	bfb8      	it	lt
 800db64:	4613      	movlt	r3, r2
 800db66:	6033      	str	r3, [r6, #0]
 800db68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800db6c:	4607      	mov	r7, r0
 800db6e:	460c      	mov	r4, r1
 800db70:	b10a      	cbz	r2, 800db76 <_printf_common+0x26>
 800db72:	3301      	adds	r3, #1
 800db74:	6033      	str	r3, [r6, #0]
 800db76:	6823      	ldr	r3, [r4, #0]
 800db78:	0699      	lsls	r1, r3, #26
 800db7a:	bf42      	ittt	mi
 800db7c:	6833      	ldrmi	r3, [r6, #0]
 800db7e:	3302      	addmi	r3, #2
 800db80:	6033      	strmi	r3, [r6, #0]
 800db82:	6825      	ldr	r5, [r4, #0]
 800db84:	f015 0506 	ands.w	r5, r5, #6
 800db88:	d106      	bne.n	800db98 <_printf_common+0x48>
 800db8a:	f104 0a19 	add.w	sl, r4, #25
 800db8e:	68e3      	ldr	r3, [r4, #12]
 800db90:	6832      	ldr	r2, [r6, #0]
 800db92:	1a9b      	subs	r3, r3, r2
 800db94:	42ab      	cmp	r3, r5
 800db96:	dc26      	bgt.n	800dbe6 <_printf_common+0x96>
 800db98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800db9c:	6822      	ldr	r2, [r4, #0]
 800db9e:	3b00      	subs	r3, #0
 800dba0:	bf18      	it	ne
 800dba2:	2301      	movne	r3, #1
 800dba4:	0692      	lsls	r2, r2, #26
 800dba6:	d42b      	bmi.n	800dc00 <_printf_common+0xb0>
 800dba8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dbac:	4641      	mov	r1, r8
 800dbae:	4638      	mov	r0, r7
 800dbb0:	47c8      	blx	r9
 800dbb2:	3001      	adds	r0, #1
 800dbb4:	d01e      	beq.n	800dbf4 <_printf_common+0xa4>
 800dbb6:	6823      	ldr	r3, [r4, #0]
 800dbb8:	6922      	ldr	r2, [r4, #16]
 800dbba:	f003 0306 	and.w	r3, r3, #6
 800dbbe:	2b04      	cmp	r3, #4
 800dbc0:	bf02      	ittt	eq
 800dbc2:	68e5      	ldreq	r5, [r4, #12]
 800dbc4:	6833      	ldreq	r3, [r6, #0]
 800dbc6:	1aed      	subeq	r5, r5, r3
 800dbc8:	68a3      	ldr	r3, [r4, #8]
 800dbca:	bf0c      	ite	eq
 800dbcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dbd0:	2500      	movne	r5, #0
 800dbd2:	4293      	cmp	r3, r2
 800dbd4:	bfc4      	itt	gt
 800dbd6:	1a9b      	subgt	r3, r3, r2
 800dbd8:	18ed      	addgt	r5, r5, r3
 800dbda:	2600      	movs	r6, #0
 800dbdc:	341a      	adds	r4, #26
 800dbde:	42b5      	cmp	r5, r6
 800dbe0:	d11a      	bne.n	800dc18 <_printf_common+0xc8>
 800dbe2:	2000      	movs	r0, #0
 800dbe4:	e008      	b.n	800dbf8 <_printf_common+0xa8>
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	4652      	mov	r2, sl
 800dbea:	4641      	mov	r1, r8
 800dbec:	4638      	mov	r0, r7
 800dbee:	47c8      	blx	r9
 800dbf0:	3001      	adds	r0, #1
 800dbf2:	d103      	bne.n	800dbfc <_printf_common+0xac>
 800dbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbfc:	3501      	adds	r5, #1
 800dbfe:	e7c6      	b.n	800db8e <_printf_common+0x3e>
 800dc00:	18e1      	adds	r1, r4, r3
 800dc02:	1c5a      	adds	r2, r3, #1
 800dc04:	2030      	movs	r0, #48	@ 0x30
 800dc06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dc0a:	4422      	add	r2, r4
 800dc0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dc10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dc14:	3302      	adds	r3, #2
 800dc16:	e7c7      	b.n	800dba8 <_printf_common+0x58>
 800dc18:	2301      	movs	r3, #1
 800dc1a:	4622      	mov	r2, r4
 800dc1c:	4641      	mov	r1, r8
 800dc1e:	4638      	mov	r0, r7
 800dc20:	47c8      	blx	r9
 800dc22:	3001      	adds	r0, #1
 800dc24:	d0e6      	beq.n	800dbf4 <_printf_common+0xa4>
 800dc26:	3601      	adds	r6, #1
 800dc28:	e7d9      	b.n	800dbde <_printf_common+0x8e>
	...

0800dc2c <_printf_i>:
 800dc2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc30:	7e0f      	ldrb	r7, [r1, #24]
 800dc32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dc34:	2f78      	cmp	r7, #120	@ 0x78
 800dc36:	4691      	mov	r9, r2
 800dc38:	4680      	mov	r8, r0
 800dc3a:	460c      	mov	r4, r1
 800dc3c:	469a      	mov	sl, r3
 800dc3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dc42:	d807      	bhi.n	800dc54 <_printf_i+0x28>
 800dc44:	2f62      	cmp	r7, #98	@ 0x62
 800dc46:	d80a      	bhi.n	800dc5e <_printf_i+0x32>
 800dc48:	2f00      	cmp	r7, #0
 800dc4a:	f000 80d2 	beq.w	800ddf2 <_printf_i+0x1c6>
 800dc4e:	2f58      	cmp	r7, #88	@ 0x58
 800dc50:	f000 80b9 	beq.w	800ddc6 <_printf_i+0x19a>
 800dc54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dc5c:	e03a      	b.n	800dcd4 <_printf_i+0xa8>
 800dc5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dc62:	2b15      	cmp	r3, #21
 800dc64:	d8f6      	bhi.n	800dc54 <_printf_i+0x28>
 800dc66:	a101      	add	r1, pc, #4	@ (adr r1, 800dc6c <_printf_i+0x40>)
 800dc68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc6c:	0800dcc5 	.word	0x0800dcc5
 800dc70:	0800dcd9 	.word	0x0800dcd9
 800dc74:	0800dc55 	.word	0x0800dc55
 800dc78:	0800dc55 	.word	0x0800dc55
 800dc7c:	0800dc55 	.word	0x0800dc55
 800dc80:	0800dc55 	.word	0x0800dc55
 800dc84:	0800dcd9 	.word	0x0800dcd9
 800dc88:	0800dc55 	.word	0x0800dc55
 800dc8c:	0800dc55 	.word	0x0800dc55
 800dc90:	0800dc55 	.word	0x0800dc55
 800dc94:	0800dc55 	.word	0x0800dc55
 800dc98:	0800ddd9 	.word	0x0800ddd9
 800dc9c:	0800dd03 	.word	0x0800dd03
 800dca0:	0800dd93 	.word	0x0800dd93
 800dca4:	0800dc55 	.word	0x0800dc55
 800dca8:	0800dc55 	.word	0x0800dc55
 800dcac:	0800ddfb 	.word	0x0800ddfb
 800dcb0:	0800dc55 	.word	0x0800dc55
 800dcb4:	0800dd03 	.word	0x0800dd03
 800dcb8:	0800dc55 	.word	0x0800dc55
 800dcbc:	0800dc55 	.word	0x0800dc55
 800dcc0:	0800dd9b 	.word	0x0800dd9b
 800dcc4:	6833      	ldr	r3, [r6, #0]
 800dcc6:	1d1a      	adds	r2, r3, #4
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	6032      	str	r2, [r6, #0]
 800dccc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dcd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	e09d      	b.n	800de14 <_printf_i+0x1e8>
 800dcd8:	6833      	ldr	r3, [r6, #0]
 800dcda:	6820      	ldr	r0, [r4, #0]
 800dcdc:	1d19      	adds	r1, r3, #4
 800dcde:	6031      	str	r1, [r6, #0]
 800dce0:	0606      	lsls	r6, r0, #24
 800dce2:	d501      	bpl.n	800dce8 <_printf_i+0xbc>
 800dce4:	681d      	ldr	r5, [r3, #0]
 800dce6:	e003      	b.n	800dcf0 <_printf_i+0xc4>
 800dce8:	0645      	lsls	r5, r0, #25
 800dcea:	d5fb      	bpl.n	800dce4 <_printf_i+0xb8>
 800dcec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dcf0:	2d00      	cmp	r5, #0
 800dcf2:	da03      	bge.n	800dcfc <_printf_i+0xd0>
 800dcf4:	232d      	movs	r3, #45	@ 0x2d
 800dcf6:	426d      	negs	r5, r5
 800dcf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dcfc:	4859      	ldr	r0, [pc, #356]	@ (800de64 <_printf_i+0x238>)
 800dcfe:	230a      	movs	r3, #10
 800dd00:	e011      	b.n	800dd26 <_printf_i+0xfa>
 800dd02:	6821      	ldr	r1, [r4, #0]
 800dd04:	6833      	ldr	r3, [r6, #0]
 800dd06:	0608      	lsls	r0, r1, #24
 800dd08:	f853 5b04 	ldr.w	r5, [r3], #4
 800dd0c:	d402      	bmi.n	800dd14 <_printf_i+0xe8>
 800dd0e:	0649      	lsls	r1, r1, #25
 800dd10:	bf48      	it	mi
 800dd12:	b2ad      	uxthmi	r5, r5
 800dd14:	2f6f      	cmp	r7, #111	@ 0x6f
 800dd16:	4853      	ldr	r0, [pc, #332]	@ (800de64 <_printf_i+0x238>)
 800dd18:	6033      	str	r3, [r6, #0]
 800dd1a:	bf14      	ite	ne
 800dd1c:	230a      	movne	r3, #10
 800dd1e:	2308      	moveq	r3, #8
 800dd20:	2100      	movs	r1, #0
 800dd22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dd26:	6866      	ldr	r6, [r4, #4]
 800dd28:	60a6      	str	r6, [r4, #8]
 800dd2a:	2e00      	cmp	r6, #0
 800dd2c:	bfa2      	ittt	ge
 800dd2e:	6821      	ldrge	r1, [r4, #0]
 800dd30:	f021 0104 	bicge.w	r1, r1, #4
 800dd34:	6021      	strge	r1, [r4, #0]
 800dd36:	b90d      	cbnz	r5, 800dd3c <_printf_i+0x110>
 800dd38:	2e00      	cmp	r6, #0
 800dd3a:	d04b      	beq.n	800ddd4 <_printf_i+0x1a8>
 800dd3c:	4616      	mov	r6, r2
 800dd3e:	fbb5 f1f3 	udiv	r1, r5, r3
 800dd42:	fb03 5711 	mls	r7, r3, r1, r5
 800dd46:	5dc7      	ldrb	r7, [r0, r7]
 800dd48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dd4c:	462f      	mov	r7, r5
 800dd4e:	42bb      	cmp	r3, r7
 800dd50:	460d      	mov	r5, r1
 800dd52:	d9f4      	bls.n	800dd3e <_printf_i+0x112>
 800dd54:	2b08      	cmp	r3, #8
 800dd56:	d10b      	bne.n	800dd70 <_printf_i+0x144>
 800dd58:	6823      	ldr	r3, [r4, #0]
 800dd5a:	07df      	lsls	r7, r3, #31
 800dd5c:	d508      	bpl.n	800dd70 <_printf_i+0x144>
 800dd5e:	6923      	ldr	r3, [r4, #16]
 800dd60:	6861      	ldr	r1, [r4, #4]
 800dd62:	4299      	cmp	r1, r3
 800dd64:	bfde      	ittt	le
 800dd66:	2330      	movle	r3, #48	@ 0x30
 800dd68:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dd6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dd70:	1b92      	subs	r2, r2, r6
 800dd72:	6122      	str	r2, [r4, #16]
 800dd74:	f8cd a000 	str.w	sl, [sp]
 800dd78:	464b      	mov	r3, r9
 800dd7a:	aa03      	add	r2, sp, #12
 800dd7c:	4621      	mov	r1, r4
 800dd7e:	4640      	mov	r0, r8
 800dd80:	f7ff fee6 	bl	800db50 <_printf_common>
 800dd84:	3001      	adds	r0, #1
 800dd86:	d14a      	bne.n	800de1e <_printf_i+0x1f2>
 800dd88:	f04f 30ff 	mov.w	r0, #4294967295
 800dd8c:	b004      	add	sp, #16
 800dd8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd92:	6823      	ldr	r3, [r4, #0]
 800dd94:	f043 0320 	orr.w	r3, r3, #32
 800dd98:	6023      	str	r3, [r4, #0]
 800dd9a:	4833      	ldr	r0, [pc, #204]	@ (800de68 <_printf_i+0x23c>)
 800dd9c:	2778      	movs	r7, #120	@ 0x78
 800dd9e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dda2:	6823      	ldr	r3, [r4, #0]
 800dda4:	6831      	ldr	r1, [r6, #0]
 800dda6:	061f      	lsls	r7, r3, #24
 800dda8:	f851 5b04 	ldr.w	r5, [r1], #4
 800ddac:	d402      	bmi.n	800ddb4 <_printf_i+0x188>
 800ddae:	065f      	lsls	r7, r3, #25
 800ddb0:	bf48      	it	mi
 800ddb2:	b2ad      	uxthmi	r5, r5
 800ddb4:	6031      	str	r1, [r6, #0]
 800ddb6:	07d9      	lsls	r1, r3, #31
 800ddb8:	bf44      	itt	mi
 800ddba:	f043 0320 	orrmi.w	r3, r3, #32
 800ddbe:	6023      	strmi	r3, [r4, #0]
 800ddc0:	b11d      	cbz	r5, 800ddca <_printf_i+0x19e>
 800ddc2:	2310      	movs	r3, #16
 800ddc4:	e7ac      	b.n	800dd20 <_printf_i+0xf4>
 800ddc6:	4827      	ldr	r0, [pc, #156]	@ (800de64 <_printf_i+0x238>)
 800ddc8:	e7e9      	b.n	800dd9e <_printf_i+0x172>
 800ddca:	6823      	ldr	r3, [r4, #0]
 800ddcc:	f023 0320 	bic.w	r3, r3, #32
 800ddd0:	6023      	str	r3, [r4, #0]
 800ddd2:	e7f6      	b.n	800ddc2 <_printf_i+0x196>
 800ddd4:	4616      	mov	r6, r2
 800ddd6:	e7bd      	b.n	800dd54 <_printf_i+0x128>
 800ddd8:	6833      	ldr	r3, [r6, #0]
 800ddda:	6825      	ldr	r5, [r4, #0]
 800dddc:	6961      	ldr	r1, [r4, #20]
 800ddde:	1d18      	adds	r0, r3, #4
 800dde0:	6030      	str	r0, [r6, #0]
 800dde2:	062e      	lsls	r6, r5, #24
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	d501      	bpl.n	800ddec <_printf_i+0x1c0>
 800dde8:	6019      	str	r1, [r3, #0]
 800ddea:	e002      	b.n	800ddf2 <_printf_i+0x1c6>
 800ddec:	0668      	lsls	r0, r5, #25
 800ddee:	d5fb      	bpl.n	800dde8 <_printf_i+0x1bc>
 800ddf0:	8019      	strh	r1, [r3, #0]
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	6123      	str	r3, [r4, #16]
 800ddf6:	4616      	mov	r6, r2
 800ddf8:	e7bc      	b.n	800dd74 <_printf_i+0x148>
 800ddfa:	6833      	ldr	r3, [r6, #0]
 800ddfc:	1d1a      	adds	r2, r3, #4
 800ddfe:	6032      	str	r2, [r6, #0]
 800de00:	681e      	ldr	r6, [r3, #0]
 800de02:	6862      	ldr	r2, [r4, #4]
 800de04:	2100      	movs	r1, #0
 800de06:	4630      	mov	r0, r6
 800de08:	f7f2 f9e2 	bl	80001d0 <memchr>
 800de0c:	b108      	cbz	r0, 800de12 <_printf_i+0x1e6>
 800de0e:	1b80      	subs	r0, r0, r6
 800de10:	6060      	str	r0, [r4, #4]
 800de12:	6863      	ldr	r3, [r4, #4]
 800de14:	6123      	str	r3, [r4, #16]
 800de16:	2300      	movs	r3, #0
 800de18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de1c:	e7aa      	b.n	800dd74 <_printf_i+0x148>
 800de1e:	6923      	ldr	r3, [r4, #16]
 800de20:	4632      	mov	r2, r6
 800de22:	4649      	mov	r1, r9
 800de24:	4640      	mov	r0, r8
 800de26:	47d0      	blx	sl
 800de28:	3001      	adds	r0, #1
 800de2a:	d0ad      	beq.n	800dd88 <_printf_i+0x15c>
 800de2c:	6823      	ldr	r3, [r4, #0]
 800de2e:	079b      	lsls	r3, r3, #30
 800de30:	d413      	bmi.n	800de5a <_printf_i+0x22e>
 800de32:	68e0      	ldr	r0, [r4, #12]
 800de34:	9b03      	ldr	r3, [sp, #12]
 800de36:	4298      	cmp	r0, r3
 800de38:	bfb8      	it	lt
 800de3a:	4618      	movlt	r0, r3
 800de3c:	e7a6      	b.n	800dd8c <_printf_i+0x160>
 800de3e:	2301      	movs	r3, #1
 800de40:	4632      	mov	r2, r6
 800de42:	4649      	mov	r1, r9
 800de44:	4640      	mov	r0, r8
 800de46:	47d0      	blx	sl
 800de48:	3001      	adds	r0, #1
 800de4a:	d09d      	beq.n	800dd88 <_printf_i+0x15c>
 800de4c:	3501      	adds	r5, #1
 800de4e:	68e3      	ldr	r3, [r4, #12]
 800de50:	9903      	ldr	r1, [sp, #12]
 800de52:	1a5b      	subs	r3, r3, r1
 800de54:	42ab      	cmp	r3, r5
 800de56:	dcf2      	bgt.n	800de3e <_printf_i+0x212>
 800de58:	e7eb      	b.n	800de32 <_printf_i+0x206>
 800de5a:	2500      	movs	r5, #0
 800de5c:	f104 0619 	add.w	r6, r4, #25
 800de60:	e7f5      	b.n	800de4e <_printf_i+0x222>
 800de62:	bf00      	nop
 800de64:	080123c2 	.word	0x080123c2
 800de68:	080123d3 	.word	0x080123d3

0800de6c <std>:
 800de6c:	2300      	movs	r3, #0
 800de6e:	b510      	push	{r4, lr}
 800de70:	4604      	mov	r4, r0
 800de72:	e9c0 3300 	strd	r3, r3, [r0]
 800de76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800de7a:	6083      	str	r3, [r0, #8]
 800de7c:	8181      	strh	r1, [r0, #12]
 800de7e:	6643      	str	r3, [r0, #100]	@ 0x64
 800de80:	81c2      	strh	r2, [r0, #14]
 800de82:	6183      	str	r3, [r0, #24]
 800de84:	4619      	mov	r1, r3
 800de86:	2208      	movs	r2, #8
 800de88:	305c      	adds	r0, #92	@ 0x5c
 800de8a:	f000 f948 	bl	800e11e <memset>
 800de8e:	4b0d      	ldr	r3, [pc, #52]	@ (800dec4 <std+0x58>)
 800de90:	6263      	str	r3, [r4, #36]	@ 0x24
 800de92:	4b0d      	ldr	r3, [pc, #52]	@ (800dec8 <std+0x5c>)
 800de94:	62a3      	str	r3, [r4, #40]	@ 0x28
 800de96:	4b0d      	ldr	r3, [pc, #52]	@ (800decc <std+0x60>)
 800de98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800de9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ded0 <std+0x64>)
 800de9c:	6323      	str	r3, [r4, #48]	@ 0x30
 800de9e:	4b0d      	ldr	r3, [pc, #52]	@ (800ded4 <std+0x68>)
 800dea0:	6224      	str	r4, [r4, #32]
 800dea2:	429c      	cmp	r4, r3
 800dea4:	d006      	beq.n	800deb4 <std+0x48>
 800dea6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800deaa:	4294      	cmp	r4, r2
 800deac:	d002      	beq.n	800deb4 <std+0x48>
 800deae:	33d0      	adds	r3, #208	@ 0xd0
 800deb0:	429c      	cmp	r4, r3
 800deb2:	d105      	bne.n	800dec0 <std+0x54>
 800deb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800deb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800debc:	f000 b9be 	b.w	800e23c <__retarget_lock_init_recursive>
 800dec0:	bd10      	pop	{r4, pc}
 800dec2:	bf00      	nop
 800dec4:	0800e099 	.word	0x0800e099
 800dec8:	0800e0bb 	.word	0x0800e0bb
 800decc:	0800e0f3 	.word	0x0800e0f3
 800ded0:	0800e117 	.word	0x0800e117
 800ded4:	2000536c 	.word	0x2000536c

0800ded8 <stdio_exit_handler>:
 800ded8:	4a02      	ldr	r2, [pc, #8]	@ (800dee4 <stdio_exit_handler+0xc>)
 800deda:	4903      	ldr	r1, [pc, #12]	@ (800dee8 <stdio_exit_handler+0x10>)
 800dedc:	4803      	ldr	r0, [pc, #12]	@ (800deec <stdio_exit_handler+0x14>)
 800dede:	f000 b869 	b.w	800dfb4 <_fwalk_sglue>
 800dee2:	bf00      	nop
 800dee4:	2000002c 	.word	0x2000002c
 800dee8:	0800fbb5 	.word	0x0800fbb5
 800deec:	2000003c 	.word	0x2000003c

0800def0 <cleanup_stdio>:
 800def0:	6841      	ldr	r1, [r0, #4]
 800def2:	4b0c      	ldr	r3, [pc, #48]	@ (800df24 <cleanup_stdio+0x34>)
 800def4:	4299      	cmp	r1, r3
 800def6:	b510      	push	{r4, lr}
 800def8:	4604      	mov	r4, r0
 800defa:	d001      	beq.n	800df00 <cleanup_stdio+0x10>
 800defc:	f001 fe5a 	bl	800fbb4 <_fflush_r>
 800df00:	68a1      	ldr	r1, [r4, #8]
 800df02:	4b09      	ldr	r3, [pc, #36]	@ (800df28 <cleanup_stdio+0x38>)
 800df04:	4299      	cmp	r1, r3
 800df06:	d002      	beq.n	800df0e <cleanup_stdio+0x1e>
 800df08:	4620      	mov	r0, r4
 800df0a:	f001 fe53 	bl	800fbb4 <_fflush_r>
 800df0e:	68e1      	ldr	r1, [r4, #12]
 800df10:	4b06      	ldr	r3, [pc, #24]	@ (800df2c <cleanup_stdio+0x3c>)
 800df12:	4299      	cmp	r1, r3
 800df14:	d004      	beq.n	800df20 <cleanup_stdio+0x30>
 800df16:	4620      	mov	r0, r4
 800df18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df1c:	f001 be4a 	b.w	800fbb4 <_fflush_r>
 800df20:	bd10      	pop	{r4, pc}
 800df22:	bf00      	nop
 800df24:	2000536c 	.word	0x2000536c
 800df28:	200053d4 	.word	0x200053d4
 800df2c:	2000543c 	.word	0x2000543c

0800df30 <global_stdio_init.part.0>:
 800df30:	b510      	push	{r4, lr}
 800df32:	4b0b      	ldr	r3, [pc, #44]	@ (800df60 <global_stdio_init.part.0+0x30>)
 800df34:	4c0b      	ldr	r4, [pc, #44]	@ (800df64 <global_stdio_init.part.0+0x34>)
 800df36:	4a0c      	ldr	r2, [pc, #48]	@ (800df68 <global_stdio_init.part.0+0x38>)
 800df38:	601a      	str	r2, [r3, #0]
 800df3a:	4620      	mov	r0, r4
 800df3c:	2200      	movs	r2, #0
 800df3e:	2104      	movs	r1, #4
 800df40:	f7ff ff94 	bl	800de6c <std>
 800df44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800df48:	2201      	movs	r2, #1
 800df4a:	2109      	movs	r1, #9
 800df4c:	f7ff ff8e 	bl	800de6c <std>
 800df50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800df54:	2202      	movs	r2, #2
 800df56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df5a:	2112      	movs	r1, #18
 800df5c:	f7ff bf86 	b.w	800de6c <std>
 800df60:	200054a4 	.word	0x200054a4
 800df64:	2000536c 	.word	0x2000536c
 800df68:	0800ded9 	.word	0x0800ded9

0800df6c <__sfp_lock_acquire>:
 800df6c:	4801      	ldr	r0, [pc, #4]	@ (800df74 <__sfp_lock_acquire+0x8>)
 800df6e:	f000 b966 	b.w	800e23e <__retarget_lock_acquire_recursive>
 800df72:	bf00      	nop
 800df74:	200054ad 	.word	0x200054ad

0800df78 <__sfp_lock_release>:
 800df78:	4801      	ldr	r0, [pc, #4]	@ (800df80 <__sfp_lock_release+0x8>)
 800df7a:	f000 b961 	b.w	800e240 <__retarget_lock_release_recursive>
 800df7e:	bf00      	nop
 800df80:	200054ad 	.word	0x200054ad

0800df84 <__sinit>:
 800df84:	b510      	push	{r4, lr}
 800df86:	4604      	mov	r4, r0
 800df88:	f7ff fff0 	bl	800df6c <__sfp_lock_acquire>
 800df8c:	6a23      	ldr	r3, [r4, #32]
 800df8e:	b11b      	cbz	r3, 800df98 <__sinit+0x14>
 800df90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df94:	f7ff bff0 	b.w	800df78 <__sfp_lock_release>
 800df98:	4b04      	ldr	r3, [pc, #16]	@ (800dfac <__sinit+0x28>)
 800df9a:	6223      	str	r3, [r4, #32]
 800df9c:	4b04      	ldr	r3, [pc, #16]	@ (800dfb0 <__sinit+0x2c>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d1f5      	bne.n	800df90 <__sinit+0xc>
 800dfa4:	f7ff ffc4 	bl	800df30 <global_stdio_init.part.0>
 800dfa8:	e7f2      	b.n	800df90 <__sinit+0xc>
 800dfaa:	bf00      	nop
 800dfac:	0800def1 	.word	0x0800def1
 800dfb0:	200054a4 	.word	0x200054a4

0800dfb4 <_fwalk_sglue>:
 800dfb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfb8:	4607      	mov	r7, r0
 800dfba:	4688      	mov	r8, r1
 800dfbc:	4614      	mov	r4, r2
 800dfbe:	2600      	movs	r6, #0
 800dfc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dfc4:	f1b9 0901 	subs.w	r9, r9, #1
 800dfc8:	d505      	bpl.n	800dfd6 <_fwalk_sglue+0x22>
 800dfca:	6824      	ldr	r4, [r4, #0]
 800dfcc:	2c00      	cmp	r4, #0
 800dfce:	d1f7      	bne.n	800dfc0 <_fwalk_sglue+0xc>
 800dfd0:	4630      	mov	r0, r6
 800dfd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfd6:	89ab      	ldrh	r3, [r5, #12]
 800dfd8:	2b01      	cmp	r3, #1
 800dfda:	d907      	bls.n	800dfec <_fwalk_sglue+0x38>
 800dfdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	d003      	beq.n	800dfec <_fwalk_sglue+0x38>
 800dfe4:	4629      	mov	r1, r5
 800dfe6:	4638      	mov	r0, r7
 800dfe8:	47c0      	blx	r8
 800dfea:	4306      	orrs	r6, r0
 800dfec:	3568      	adds	r5, #104	@ 0x68
 800dfee:	e7e9      	b.n	800dfc4 <_fwalk_sglue+0x10>

0800dff0 <sniprintf>:
 800dff0:	b40c      	push	{r2, r3}
 800dff2:	b530      	push	{r4, r5, lr}
 800dff4:	4b17      	ldr	r3, [pc, #92]	@ (800e054 <sniprintf+0x64>)
 800dff6:	1e0c      	subs	r4, r1, #0
 800dff8:	681d      	ldr	r5, [r3, #0]
 800dffa:	b09d      	sub	sp, #116	@ 0x74
 800dffc:	da08      	bge.n	800e010 <sniprintf+0x20>
 800dffe:	238b      	movs	r3, #139	@ 0x8b
 800e000:	602b      	str	r3, [r5, #0]
 800e002:	f04f 30ff 	mov.w	r0, #4294967295
 800e006:	b01d      	add	sp, #116	@ 0x74
 800e008:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e00c:	b002      	add	sp, #8
 800e00e:	4770      	bx	lr
 800e010:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e014:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e018:	bf14      	ite	ne
 800e01a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e01e:	4623      	moveq	r3, r4
 800e020:	9304      	str	r3, [sp, #16]
 800e022:	9307      	str	r3, [sp, #28]
 800e024:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e028:	9002      	str	r0, [sp, #8]
 800e02a:	9006      	str	r0, [sp, #24]
 800e02c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e030:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e032:	ab21      	add	r3, sp, #132	@ 0x84
 800e034:	a902      	add	r1, sp, #8
 800e036:	4628      	mov	r0, r5
 800e038:	9301      	str	r3, [sp, #4]
 800e03a:	f001 fc3b 	bl	800f8b4 <_svfiprintf_r>
 800e03e:	1c43      	adds	r3, r0, #1
 800e040:	bfbc      	itt	lt
 800e042:	238b      	movlt	r3, #139	@ 0x8b
 800e044:	602b      	strlt	r3, [r5, #0]
 800e046:	2c00      	cmp	r4, #0
 800e048:	d0dd      	beq.n	800e006 <sniprintf+0x16>
 800e04a:	9b02      	ldr	r3, [sp, #8]
 800e04c:	2200      	movs	r2, #0
 800e04e:	701a      	strb	r2, [r3, #0]
 800e050:	e7d9      	b.n	800e006 <sniprintf+0x16>
 800e052:	bf00      	nop
 800e054:	20000038 	.word	0x20000038

0800e058 <siprintf>:
 800e058:	b40e      	push	{r1, r2, r3}
 800e05a:	b500      	push	{lr}
 800e05c:	b09c      	sub	sp, #112	@ 0x70
 800e05e:	ab1d      	add	r3, sp, #116	@ 0x74
 800e060:	9002      	str	r0, [sp, #8]
 800e062:	9006      	str	r0, [sp, #24]
 800e064:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e068:	4809      	ldr	r0, [pc, #36]	@ (800e090 <siprintf+0x38>)
 800e06a:	9107      	str	r1, [sp, #28]
 800e06c:	9104      	str	r1, [sp, #16]
 800e06e:	4909      	ldr	r1, [pc, #36]	@ (800e094 <siprintf+0x3c>)
 800e070:	f853 2b04 	ldr.w	r2, [r3], #4
 800e074:	9105      	str	r1, [sp, #20]
 800e076:	6800      	ldr	r0, [r0, #0]
 800e078:	9301      	str	r3, [sp, #4]
 800e07a:	a902      	add	r1, sp, #8
 800e07c:	f001 fc1a 	bl	800f8b4 <_svfiprintf_r>
 800e080:	9b02      	ldr	r3, [sp, #8]
 800e082:	2200      	movs	r2, #0
 800e084:	701a      	strb	r2, [r3, #0]
 800e086:	b01c      	add	sp, #112	@ 0x70
 800e088:	f85d eb04 	ldr.w	lr, [sp], #4
 800e08c:	b003      	add	sp, #12
 800e08e:	4770      	bx	lr
 800e090:	20000038 	.word	0x20000038
 800e094:	ffff0208 	.word	0xffff0208

0800e098 <__sread>:
 800e098:	b510      	push	{r4, lr}
 800e09a:	460c      	mov	r4, r1
 800e09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0a0:	f000 f87e 	bl	800e1a0 <_read_r>
 800e0a4:	2800      	cmp	r0, #0
 800e0a6:	bfab      	itete	ge
 800e0a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e0aa:	89a3      	ldrhlt	r3, [r4, #12]
 800e0ac:	181b      	addge	r3, r3, r0
 800e0ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e0b2:	bfac      	ite	ge
 800e0b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e0b6:	81a3      	strhlt	r3, [r4, #12]
 800e0b8:	bd10      	pop	{r4, pc}

0800e0ba <__swrite>:
 800e0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0be:	461f      	mov	r7, r3
 800e0c0:	898b      	ldrh	r3, [r1, #12]
 800e0c2:	05db      	lsls	r3, r3, #23
 800e0c4:	4605      	mov	r5, r0
 800e0c6:	460c      	mov	r4, r1
 800e0c8:	4616      	mov	r6, r2
 800e0ca:	d505      	bpl.n	800e0d8 <__swrite+0x1e>
 800e0cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0d0:	2302      	movs	r3, #2
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	f000 f852 	bl	800e17c <_lseek_r>
 800e0d8:	89a3      	ldrh	r3, [r4, #12]
 800e0da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e0e2:	81a3      	strh	r3, [r4, #12]
 800e0e4:	4632      	mov	r2, r6
 800e0e6:	463b      	mov	r3, r7
 800e0e8:	4628      	mov	r0, r5
 800e0ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ee:	f000 b869 	b.w	800e1c4 <_write_r>

0800e0f2 <__sseek>:
 800e0f2:	b510      	push	{r4, lr}
 800e0f4:	460c      	mov	r4, r1
 800e0f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0fa:	f000 f83f 	bl	800e17c <_lseek_r>
 800e0fe:	1c43      	adds	r3, r0, #1
 800e100:	89a3      	ldrh	r3, [r4, #12]
 800e102:	bf15      	itete	ne
 800e104:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e106:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e10a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e10e:	81a3      	strheq	r3, [r4, #12]
 800e110:	bf18      	it	ne
 800e112:	81a3      	strhne	r3, [r4, #12]
 800e114:	bd10      	pop	{r4, pc}

0800e116 <__sclose>:
 800e116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e11a:	f000 b81f 	b.w	800e15c <_close_r>

0800e11e <memset>:
 800e11e:	4402      	add	r2, r0
 800e120:	4603      	mov	r3, r0
 800e122:	4293      	cmp	r3, r2
 800e124:	d100      	bne.n	800e128 <memset+0xa>
 800e126:	4770      	bx	lr
 800e128:	f803 1b01 	strb.w	r1, [r3], #1
 800e12c:	e7f9      	b.n	800e122 <memset+0x4>

0800e12e <strncmp>:
 800e12e:	b510      	push	{r4, lr}
 800e130:	b16a      	cbz	r2, 800e14e <strncmp+0x20>
 800e132:	3901      	subs	r1, #1
 800e134:	1884      	adds	r4, r0, r2
 800e136:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e13a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e13e:	429a      	cmp	r2, r3
 800e140:	d103      	bne.n	800e14a <strncmp+0x1c>
 800e142:	42a0      	cmp	r0, r4
 800e144:	d001      	beq.n	800e14a <strncmp+0x1c>
 800e146:	2a00      	cmp	r2, #0
 800e148:	d1f5      	bne.n	800e136 <strncmp+0x8>
 800e14a:	1ad0      	subs	r0, r2, r3
 800e14c:	bd10      	pop	{r4, pc}
 800e14e:	4610      	mov	r0, r2
 800e150:	e7fc      	b.n	800e14c <strncmp+0x1e>
	...

0800e154 <_localeconv_r>:
 800e154:	4800      	ldr	r0, [pc, #0]	@ (800e158 <_localeconv_r+0x4>)
 800e156:	4770      	bx	lr
 800e158:	20000178 	.word	0x20000178

0800e15c <_close_r>:
 800e15c:	b538      	push	{r3, r4, r5, lr}
 800e15e:	4d06      	ldr	r5, [pc, #24]	@ (800e178 <_close_r+0x1c>)
 800e160:	2300      	movs	r3, #0
 800e162:	4604      	mov	r4, r0
 800e164:	4608      	mov	r0, r1
 800e166:	602b      	str	r3, [r5, #0]
 800e168:	f7f6 faac 	bl	80046c4 <_close>
 800e16c:	1c43      	adds	r3, r0, #1
 800e16e:	d102      	bne.n	800e176 <_close_r+0x1a>
 800e170:	682b      	ldr	r3, [r5, #0]
 800e172:	b103      	cbz	r3, 800e176 <_close_r+0x1a>
 800e174:	6023      	str	r3, [r4, #0]
 800e176:	bd38      	pop	{r3, r4, r5, pc}
 800e178:	200054a8 	.word	0x200054a8

0800e17c <_lseek_r>:
 800e17c:	b538      	push	{r3, r4, r5, lr}
 800e17e:	4d07      	ldr	r5, [pc, #28]	@ (800e19c <_lseek_r+0x20>)
 800e180:	4604      	mov	r4, r0
 800e182:	4608      	mov	r0, r1
 800e184:	4611      	mov	r1, r2
 800e186:	2200      	movs	r2, #0
 800e188:	602a      	str	r2, [r5, #0]
 800e18a:	461a      	mov	r2, r3
 800e18c:	f7f6 fac1 	bl	8004712 <_lseek>
 800e190:	1c43      	adds	r3, r0, #1
 800e192:	d102      	bne.n	800e19a <_lseek_r+0x1e>
 800e194:	682b      	ldr	r3, [r5, #0]
 800e196:	b103      	cbz	r3, 800e19a <_lseek_r+0x1e>
 800e198:	6023      	str	r3, [r4, #0]
 800e19a:	bd38      	pop	{r3, r4, r5, pc}
 800e19c:	200054a8 	.word	0x200054a8

0800e1a0 <_read_r>:
 800e1a0:	b538      	push	{r3, r4, r5, lr}
 800e1a2:	4d07      	ldr	r5, [pc, #28]	@ (800e1c0 <_read_r+0x20>)
 800e1a4:	4604      	mov	r4, r0
 800e1a6:	4608      	mov	r0, r1
 800e1a8:	4611      	mov	r1, r2
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	602a      	str	r2, [r5, #0]
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	f7f6 fa4f 	bl	8004652 <_read>
 800e1b4:	1c43      	adds	r3, r0, #1
 800e1b6:	d102      	bne.n	800e1be <_read_r+0x1e>
 800e1b8:	682b      	ldr	r3, [r5, #0]
 800e1ba:	b103      	cbz	r3, 800e1be <_read_r+0x1e>
 800e1bc:	6023      	str	r3, [r4, #0]
 800e1be:	bd38      	pop	{r3, r4, r5, pc}
 800e1c0:	200054a8 	.word	0x200054a8

0800e1c4 <_write_r>:
 800e1c4:	b538      	push	{r3, r4, r5, lr}
 800e1c6:	4d07      	ldr	r5, [pc, #28]	@ (800e1e4 <_write_r+0x20>)
 800e1c8:	4604      	mov	r4, r0
 800e1ca:	4608      	mov	r0, r1
 800e1cc:	4611      	mov	r1, r2
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	602a      	str	r2, [r5, #0]
 800e1d2:	461a      	mov	r2, r3
 800e1d4:	f7f6 fa5a 	bl	800468c <_write>
 800e1d8:	1c43      	adds	r3, r0, #1
 800e1da:	d102      	bne.n	800e1e2 <_write_r+0x1e>
 800e1dc:	682b      	ldr	r3, [r5, #0]
 800e1de:	b103      	cbz	r3, 800e1e2 <_write_r+0x1e>
 800e1e0:	6023      	str	r3, [r4, #0]
 800e1e2:	bd38      	pop	{r3, r4, r5, pc}
 800e1e4:	200054a8 	.word	0x200054a8

0800e1e8 <__errno>:
 800e1e8:	4b01      	ldr	r3, [pc, #4]	@ (800e1f0 <__errno+0x8>)
 800e1ea:	6818      	ldr	r0, [r3, #0]
 800e1ec:	4770      	bx	lr
 800e1ee:	bf00      	nop
 800e1f0:	20000038 	.word	0x20000038

0800e1f4 <__libc_init_array>:
 800e1f4:	b570      	push	{r4, r5, r6, lr}
 800e1f6:	4d0d      	ldr	r5, [pc, #52]	@ (800e22c <__libc_init_array+0x38>)
 800e1f8:	4c0d      	ldr	r4, [pc, #52]	@ (800e230 <__libc_init_array+0x3c>)
 800e1fa:	1b64      	subs	r4, r4, r5
 800e1fc:	10a4      	asrs	r4, r4, #2
 800e1fe:	2600      	movs	r6, #0
 800e200:	42a6      	cmp	r6, r4
 800e202:	d109      	bne.n	800e218 <__libc_init_array+0x24>
 800e204:	4d0b      	ldr	r5, [pc, #44]	@ (800e234 <__libc_init_array+0x40>)
 800e206:	4c0c      	ldr	r4, [pc, #48]	@ (800e238 <__libc_init_array+0x44>)
 800e208:	f003 fa26 	bl	8011658 <_init>
 800e20c:	1b64      	subs	r4, r4, r5
 800e20e:	10a4      	asrs	r4, r4, #2
 800e210:	2600      	movs	r6, #0
 800e212:	42a6      	cmp	r6, r4
 800e214:	d105      	bne.n	800e222 <__libc_init_array+0x2e>
 800e216:	bd70      	pop	{r4, r5, r6, pc}
 800e218:	f855 3b04 	ldr.w	r3, [r5], #4
 800e21c:	4798      	blx	r3
 800e21e:	3601      	adds	r6, #1
 800e220:	e7ee      	b.n	800e200 <__libc_init_array+0xc>
 800e222:	f855 3b04 	ldr.w	r3, [r5], #4
 800e226:	4798      	blx	r3
 800e228:	3601      	adds	r6, #1
 800e22a:	e7f2      	b.n	800e212 <__libc_init_array+0x1e>
 800e22c:	080127c8 	.word	0x080127c8
 800e230:	080127c8 	.word	0x080127c8
 800e234:	080127c8 	.word	0x080127c8
 800e238:	080127cc 	.word	0x080127cc

0800e23c <__retarget_lock_init_recursive>:
 800e23c:	4770      	bx	lr

0800e23e <__retarget_lock_acquire_recursive>:
 800e23e:	4770      	bx	lr

0800e240 <__retarget_lock_release_recursive>:
 800e240:	4770      	bx	lr

0800e242 <memcpy>:
 800e242:	440a      	add	r2, r1
 800e244:	4291      	cmp	r1, r2
 800e246:	f100 33ff 	add.w	r3, r0, #4294967295
 800e24a:	d100      	bne.n	800e24e <memcpy+0xc>
 800e24c:	4770      	bx	lr
 800e24e:	b510      	push	{r4, lr}
 800e250:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e254:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e258:	4291      	cmp	r1, r2
 800e25a:	d1f9      	bne.n	800e250 <memcpy+0xe>
 800e25c:	bd10      	pop	{r4, pc}

0800e25e <quorem>:
 800e25e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e262:	6903      	ldr	r3, [r0, #16]
 800e264:	690c      	ldr	r4, [r1, #16]
 800e266:	42a3      	cmp	r3, r4
 800e268:	4607      	mov	r7, r0
 800e26a:	db7e      	blt.n	800e36a <quorem+0x10c>
 800e26c:	3c01      	subs	r4, #1
 800e26e:	f101 0814 	add.w	r8, r1, #20
 800e272:	00a3      	lsls	r3, r4, #2
 800e274:	f100 0514 	add.w	r5, r0, #20
 800e278:	9300      	str	r3, [sp, #0]
 800e27a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e27e:	9301      	str	r3, [sp, #4]
 800e280:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e284:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e288:	3301      	adds	r3, #1
 800e28a:	429a      	cmp	r2, r3
 800e28c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e290:	fbb2 f6f3 	udiv	r6, r2, r3
 800e294:	d32e      	bcc.n	800e2f4 <quorem+0x96>
 800e296:	f04f 0a00 	mov.w	sl, #0
 800e29a:	46c4      	mov	ip, r8
 800e29c:	46ae      	mov	lr, r5
 800e29e:	46d3      	mov	fp, sl
 800e2a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e2a4:	b298      	uxth	r0, r3
 800e2a6:	fb06 a000 	mla	r0, r6, r0, sl
 800e2aa:	0c02      	lsrs	r2, r0, #16
 800e2ac:	0c1b      	lsrs	r3, r3, #16
 800e2ae:	fb06 2303 	mla	r3, r6, r3, r2
 800e2b2:	f8de 2000 	ldr.w	r2, [lr]
 800e2b6:	b280      	uxth	r0, r0
 800e2b8:	b292      	uxth	r2, r2
 800e2ba:	1a12      	subs	r2, r2, r0
 800e2bc:	445a      	add	r2, fp
 800e2be:	f8de 0000 	ldr.w	r0, [lr]
 800e2c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e2cc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e2d0:	b292      	uxth	r2, r2
 800e2d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e2d6:	45e1      	cmp	r9, ip
 800e2d8:	f84e 2b04 	str.w	r2, [lr], #4
 800e2dc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e2e0:	d2de      	bcs.n	800e2a0 <quorem+0x42>
 800e2e2:	9b00      	ldr	r3, [sp, #0]
 800e2e4:	58eb      	ldr	r3, [r5, r3]
 800e2e6:	b92b      	cbnz	r3, 800e2f4 <quorem+0x96>
 800e2e8:	9b01      	ldr	r3, [sp, #4]
 800e2ea:	3b04      	subs	r3, #4
 800e2ec:	429d      	cmp	r5, r3
 800e2ee:	461a      	mov	r2, r3
 800e2f0:	d32f      	bcc.n	800e352 <quorem+0xf4>
 800e2f2:	613c      	str	r4, [r7, #16]
 800e2f4:	4638      	mov	r0, r7
 800e2f6:	f001 f979 	bl	800f5ec <__mcmp>
 800e2fa:	2800      	cmp	r0, #0
 800e2fc:	db25      	blt.n	800e34a <quorem+0xec>
 800e2fe:	4629      	mov	r1, r5
 800e300:	2000      	movs	r0, #0
 800e302:	f858 2b04 	ldr.w	r2, [r8], #4
 800e306:	f8d1 c000 	ldr.w	ip, [r1]
 800e30a:	fa1f fe82 	uxth.w	lr, r2
 800e30e:	fa1f f38c 	uxth.w	r3, ip
 800e312:	eba3 030e 	sub.w	r3, r3, lr
 800e316:	4403      	add	r3, r0
 800e318:	0c12      	lsrs	r2, r2, #16
 800e31a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e31e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e322:	b29b      	uxth	r3, r3
 800e324:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e328:	45c1      	cmp	r9, r8
 800e32a:	f841 3b04 	str.w	r3, [r1], #4
 800e32e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e332:	d2e6      	bcs.n	800e302 <quorem+0xa4>
 800e334:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e338:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e33c:	b922      	cbnz	r2, 800e348 <quorem+0xea>
 800e33e:	3b04      	subs	r3, #4
 800e340:	429d      	cmp	r5, r3
 800e342:	461a      	mov	r2, r3
 800e344:	d30b      	bcc.n	800e35e <quorem+0x100>
 800e346:	613c      	str	r4, [r7, #16]
 800e348:	3601      	adds	r6, #1
 800e34a:	4630      	mov	r0, r6
 800e34c:	b003      	add	sp, #12
 800e34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e352:	6812      	ldr	r2, [r2, #0]
 800e354:	3b04      	subs	r3, #4
 800e356:	2a00      	cmp	r2, #0
 800e358:	d1cb      	bne.n	800e2f2 <quorem+0x94>
 800e35a:	3c01      	subs	r4, #1
 800e35c:	e7c6      	b.n	800e2ec <quorem+0x8e>
 800e35e:	6812      	ldr	r2, [r2, #0]
 800e360:	3b04      	subs	r3, #4
 800e362:	2a00      	cmp	r2, #0
 800e364:	d1ef      	bne.n	800e346 <quorem+0xe8>
 800e366:	3c01      	subs	r4, #1
 800e368:	e7ea      	b.n	800e340 <quorem+0xe2>
 800e36a:	2000      	movs	r0, #0
 800e36c:	e7ee      	b.n	800e34c <quorem+0xee>
	...

0800e370 <_dtoa_r>:
 800e370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e374:	69c7      	ldr	r7, [r0, #28]
 800e376:	b099      	sub	sp, #100	@ 0x64
 800e378:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e37c:	ec55 4b10 	vmov	r4, r5, d0
 800e380:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e382:	9109      	str	r1, [sp, #36]	@ 0x24
 800e384:	4683      	mov	fp, r0
 800e386:	920e      	str	r2, [sp, #56]	@ 0x38
 800e388:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e38a:	b97f      	cbnz	r7, 800e3ac <_dtoa_r+0x3c>
 800e38c:	2010      	movs	r0, #16
 800e38e:	f000 fdfd 	bl	800ef8c <malloc>
 800e392:	4602      	mov	r2, r0
 800e394:	f8cb 001c 	str.w	r0, [fp, #28]
 800e398:	b920      	cbnz	r0, 800e3a4 <_dtoa_r+0x34>
 800e39a:	4ba7      	ldr	r3, [pc, #668]	@ (800e638 <_dtoa_r+0x2c8>)
 800e39c:	21ef      	movs	r1, #239	@ 0xef
 800e39e:	48a7      	ldr	r0, [pc, #668]	@ (800e63c <_dtoa_r+0x2cc>)
 800e3a0:	f001 fc5a 	bl	800fc58 <__assert_func>
 800e3a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e3a8:	6007      	str	r7, [r0, #0]
 800e3aa:	60c7      	str	r7, [r0, #12]
 800e3ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e3b0:	6819      	ldr	r1, [r3, #0]
 800e3b2:	b159      	cbz	r1, 800e3cc <_dtoa_r+0x5c>
 800e3b4:	685a      	ldr	r2, [r3, #4]
 800e3b6:	604a      	str	r2, [r1, #4]
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	4093      	lsls	r3, r2
 800e3bc:	608b      	str	r3, [r1, #8]
 800e3be:	4658      	mov	r0, fp
 800e3c0:	f000 feda 	bl	800f178 <_Bfree>
 800e3c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	601a      	str	r2, [r3, #0]
 800e3cc:	1e2b      	subs	r3, r5, #0
 800e3ce:	bfb9      	ittee	lt
 800e3d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e3d4:	9303      	strlt	r3, [sp, #12]
 800e3d6:	2300      	movge	r3, #0
 800e3d8:	6033      	strge	r3, [r6, #0]
 800e3da:	9f03      	ldr	r7, [sp, #12]
 800e3dc:	4b98      	ldr	r3, [pc, #608]	@ (800e640 <_dtoa_r+0x2d0>)
 800e3de:	bfbc      	itt	lt
 800e3e0:	2201      	movlt	r2, #1
 800e3e2:	6032      	strlt	r2, [r6, #0]
 800e3e4:	43bb      	bics	r3, r7
 800e3e6:	d112      	bne.n	800e40e <_dtoa_r+0x9e>
 800e3e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e3ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e3ee:	6013      	str	r3, [r2, #0]
 800e3f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e3f4:	4323      	orrs	r3, r4
 800e3f6:	f000 854d 	beq.w	800ee94 <_dtoa_r+0xb24>
 800e3fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e3fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e654 <_dtoa_r+0x2e4>
 800e400:	2b00      	cmp	r3, #0
 800e402:	f000 854f 	beq.w	800eea4 <_dtoa_r+0xb34>
 800e406:	f10a 0303 	add.w	r3, sl, #3
 800e40a:	f000 bd49 	b.w	800eea0 <_dtoa_r+0xb30>
 800e40e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e412:	2200      	movs	r2, #0
 800e414:	ec51 0b17 	vmov	r0, r1, d7
 800e418:	2300      	movs	r3, #0
 800e41a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e41e:	f7f2 fb53 	bl	8000ac8 <__aeabi_dcmpeq>
 800e422:	4680      	mov	r8, r0
 800e424:	b158      	cbz	r0, 800e43e <_dtoa_r+0xce>
 800e426:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e428:	2301      	movs	r3, #1
 800e42a:	6013      	str	r3, [r2, #0]
 800e42c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e42e:	b113      	cbz	r3, 800e436 <_dtoa_r+0xc6>
 800e430:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e432:	4b84      	ldr	r3, [pc, #528]	@ (800e644 <_dtoa_r+0x2d4>)
 800e434:	6013      	str	r3, [r2, #0]
 800e436:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e658 <_dtoa_r+0x2e8>
 800e43a:	f000 bd33 	b.w	800eea4 <_dtoa_r+0xb34>
 800e43e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e442:	aa16      	add	r2, sp, #88	@ 0x58
 800e444:	a917      	add	r1, sp, #92	@ 0x5c
 800e446:	4658      	mov	r0, fp
 800e448:	f001 f980 	bl	800f74c <__d2b>
 800e44c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e450:	4681      	mov	r9, r0
 800e452:	2e00      	cmp	r6, #0
 800e454:	d077      	beq.n	800e546 <_dtoa_r+0x1d6>
 800e456:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e458:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e45c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e460:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e464:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e468:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e46c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e470:	4619      	mov	r1, r3
 800e472:	2200      	movs	r2, #0
 800e474:	4b74      	ldr	r3, [pc, #464]	@ (800e648 <_dtoa_r+0x2d8>)
 800e476:	f7f1 ff07 	bl	8000288 <__aeabi_dsub>
 800e47a:	a369      	add	r3, pc, #420	@ (adr r3, 800e620 <_dtoa_r+0x2b0>)
 800e47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e480:	f7f2 f8ba 	bl	80005f8 <__aeabi_dmul>
 800e484:	a368      	add	r3, pc, #416	@ (adr r3, 800e628 <_dtoa_r+0x2b8>)
 800e486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48a:	f7f1 feff 	bl	800028c <__adddf3>
 800e48e:	4604      	mov	r4, r0
 800e490:	4630      	mov	r0, r6
 800e492:	460d      	mov	r5, r1
 800e494:	f7f2 f846 	bl	8000524 <__aeabi_i2d>
 800e498:	a365      	add	r3, pc, #404	@ (adr r3, 800e630 <_dtoa_r+0x2c0>)
 800e49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49e:	f7f2 f8ab 	bl	80005f8 <__aeabi_dmul>
 800e4a2:	4602      	mov	r2, r0
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	4629      	mov	r1, r5
 800e4aa:	f7f1 feef 	bl	800028c <__adddf3>
 800e4ae:	4604      	mov	r4, r0
 800e4b0:	460d      	mov	r5, r1
 800e4b2:	f7f2 fb51 	bl	8000b58 <__aeabi_d2iz>
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	4607      	mov	r7, r0
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	4620      	mov	r0, r4
 800e4be:	4629      	mov	r1, r5
 800e4c0:	f7f2 fb0c 	bl	8000adc <__aeabi_dcmplt>
 800e4c4:	b140      	cbz	r0, 800e4d8 <_dtoa_r+0x168>
 800e4c6:	4638      	mov	r0, r7
 800e4c8:	f7f2 f82c 	bl	8000524 <__aeabi_i2d>
 800e4cc:	4622      	mov	r2, r4
 800e4ce:	462b      	mov	r3, r5
 800e4d0:	f7f2 fafa 	bl	8000ac8 <__aeabi_dcmpeq>
 800e4d4:	b900      	cbnz	r0, 800e4d8 <_dtoa_r+0x168>
 800e4d6:	3f01      	subs	r7, #1
 800e4d8:	2f16      	cmp	r7, #22
 800e4da:	d851      	bhi.n	800e580 <_dtoa_r+0x210>
 800e4dc:	4b5b      	ldr	r3, [pc, #364]	@ (800e64c <_dtoa_r+0x2dc>)
 800e4de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e4ea:	f7f2 faf7 	bl	8000adc <__aeabi_dcmplt>
 800e4ee:	2800      	cmp	r0, #0
 800e4f0:	d048      	beq.n	800e584 <_dtoa_r+0x214>
 800e4f2:	3f01      	subs	r7, #1
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	9312      	str	r3, [sp, #72]	@ 0x48
 800e4f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e4fa:	1b9b      	subs	r3, r3, r6
 800e4fc:	1e5a      	subs	r2, r3, #1
 800e4fe:	bf44      	itt	mi
 800e500:	f1c3 0801 	rsbmi	r8, r3, #1
 800e504:	2300      	movmi	r3, #0
 800e506:	9208      	str	r2, [sp, #32]
 800e508:	bf54      	ite	pl
 800e50a:	f04f 0800 	movpl.w	r8, #0
 800e50e:	9308      	strmi	r3, [sp, #32]
 800e510:	2f00      	cmp	r7, #0
 800e512:	db39      	blt.n	800e588 <_dtoa_r+0x218>
 800e514:	9b08      	ldr	r3, [sp, #32]
 800e516:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e518:	443b      	add	r3, r7
 800e51a:	9308      	str	r3, [sp, #32]
 800e51c:	2300      	movs	r3, #0
 800e51e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e522:	2b09      	cmp	r3, #9
 800e524:	d864      	bhi.n	800e5f0 <_dtoa_r+0x280>
 800e526:	2b05      	cmp	r3, #5
 800e528:	bfc4      	itt	gt
 800e52a:	3b04      	subgt	r3, #4
 800e52c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e52e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e530:	f1a3 0302 	sub.w	r3, r3, #2
 800e534:	bfcc      	ite	gt
 800e536:	2400      	movgt	r4, #0
 800e538:	2401      	movle	r4, #1
 800e53a:	2b03      	cmp	r3, #3
 800e53c:	d863      	bhi.n	800e606 <_dtoa_r+0x296>
 800e53e:	e8df f003 	tbb	[pc, r3]
 800e542:	372a      	.short	0x372a
 800e544:	5535      	.short	0x5535
 800e546:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e54a:	441e      	add	r6, r3
 800e54c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e550:	2b20      	cmp	r3, #32
 800e552:	bfc1      	itttt	gt
 800e554:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e558:	409f      	lslgt	r7, r3
 800e55a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e55e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e562:	bfd6      	itet	le
 800e564:	f1c3 0320 	rsble	r3, r3, #32
 800e568:	ea47 0003 	orrgt.w	r0, r7, r3
 800e56c:	fa04 f003 	lslle.w	r0, r4, r3
 800e570:	f7f1 ffc8 	bl	8000504 <__aeabi_ui2d>
 800e574:	2201      	movs	r2, #1
 800e576:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e57a:	3e01      	subs	r6, #1
 800e57c:	9214      	str	r2, [sp, #80]	@ 0x50
 800e57e:	e777      	b.n	800e470 <_dtoa_r+0x100>
 800e580:	2301      	movs	r3, #1
 800e582:	e7b8      	b.n	800e4f6 <_dtoa_r+0x186>
 800e584:	9012      	str	r0, [sp, #72]	@ 0x48
 800e586:	e7b7      	b.n	800e4f8 <_dtoa_r+0x188>
 800e588:	427b      	negs	r3, r7
 800e58a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e58c:	2300      	movs	r3, #0
 800e58e:	eba8 0807 	sub.w	r8, r8, r7
 800e592:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e594:	e7c4      	b.n	800e520 <_dtoa_r+0x1b0>
 800e596:	2300      	movs	r3, #0
 800e598:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e59a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	dc35      	bgt.n	800e60c <_dtoa_r+0x29c>
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	9300      	str	r3, [sp, #0]
 800e5a4:	9307      	str	r3, [sp, #28]
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e5aa:	e00b      	b.n	800e5c4 <_dtoa_r+0x254>
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	e7f3      	b.n	800e598 <_dtoa_r+0x228>
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e5b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5b6:	18fb      	adds	r3, r7, r3
 800e5b8:	9300      	str	r3, [sp, #0]
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	2b01      	cmp	r3, #1
 800e5be:	9307      	str	r3, [sp, #28]
 800e5c0:	bfb8      	it	lt
 800e5c2:	2301      	movlt	r3, #1
 800e5c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e5c8:	2100      	movs	r1, #0
 800e5ca:	2204      	movs	r2, #4
 800e5cc:	f102 0514 	add.w	r5, r2, #20
 800e5d0:	429d      	cmp	r5, r3
 800e5d2:	d91f      	bls.n	800e614 <_dtoa_r+0x2a4>
 800e5d4:	6041      	str	r1, [r0, #4]
 800e5d6:	4658      	mov	r0, fp
 800e5d8:	f000 fd8e 	bl	800f0f8 <_Balloc>
 800e5dc:	4682      	mov	sl, r0
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	d13c      	bne.n	800e65c <_dtoa_r+0x2ec>
 800e5e2:	4b1b      	ldr	r3, [pc, #108]	@ (800e650 <_dtoa_r+0x2e0>)
 800e5e4:	4602      	mov	r2, r0
 800e5e6:	f240 11af 	movw	r1, #431	@ 0x1af
 800e5ea:	e6d8      	b.n	800e39e <_dtoa_r+0x2e>
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	e7e0      	b.n	800e5b2 <_dtoa_r+0x242>
 800e5f0:	2401      	movs	r4, #1
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e5f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e5fc:	9300      	str	r3, [sp, #0]
 800e5fe:	9307      	str	r3, [sp, #28]
 800e600:	2200      	movs	r2, #0
 800e602:	2312      	movs	r3, #18
 800e604:	e7d0      	b.n	800e5a8 <_dtoa_r+0x238>
 800e606:	2301      	movs	r3, #1
 800e608:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e60a:	e7f5      	b.n	800e5f8 <_dtoa_r+0x288>
 800e60c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e60e:	9300      	str	r3, [sp, #0]
 800e610:	9307      	str	r3, [sp, #28]
 800e612:	e7d7      	b.n	800e5c4 <_dtoa_r+0x254>
 800e614:	3101      	adds	r1, #1
 800e616:	0052      	lsls	r2, r2, #1
 800e618:	e7d8      	b.n	800e5cc <_dtoa_r+0x25c>
 800e61a:	bf00      	nop
 800e61c:	f3af 8000 	nop.w
 800e620:	636f4361 	.word	0x636f4361
 800e624:	3fd287a7 	.word	0x3fd287a7
 800e628:	8b60c8b3 	.word	0x8b60c8b3
 800e62c:	3fc68a28 	.word	0x3fc68a28
 800e630:	509f79fb 	.word	0x509f79fb
 800e634:	3fd34413 	.word	0x3fd34413
 800e638:	080123f1 	.word	0x080123f1
 800e63c:	08012408 	.word	0x08012408
 800e640:	7ff00000 	.word	0x7ff00000
 800e644:	080123c1 	.word	0x080123c1
 800e648:	3ff80000 	.word	0x3ff80000
 800e64c:	08012500 	.word	0x08012500
 800e650:	08012460 	.word	0x08012460
 800e654:	080123ed 	.word	0x080123ed
 800e658:	080123c0 	.word	0x080123c0
 800e65c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e660:	6018      	str	r0, [r3, #0]
 800e662:	9b07      	ldr	r3, [sp, #28]
 800e664:	2b0e      	cmp	r3, #14
 800e666:	f200 80a4 	bhi.w	800e7b2 <_dtoa_r+0x442>
 800e66a:	2c00      	cmp	r4, #0
 800e66c:	f000 80a1 	beq.w	800e7b2 <_dtoa_r+0x442>
 800e670:	2f00      	cmp	r7, #0
 800e672:	dd33      	ble.n	800e6dc <_dtoa_r+0x36c>
 800e674:	4bad      	ldr	r3, [pc, #692]	@ (800e92c <_dtoa_r+0x5bc>)
 800e676:	f007 020f 	and.w	r2, r7, #15
 800e67a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e67e:	ed93 7b00 	vldr	d7, [r3]
 800e682:	05f8      	lsls	r0, r7, #23
 800e684:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e688:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e68c:	d516      	bpl.n	800e6bc <_dtoa_r+0x34c>
 800e68e:	4ba8      	ldr	r3, [pc, #672]	@ (800e930 <_dtoa_r+0x5c0>)
 800e690:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e694:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e698:	f7f2 f8d8 	bl	800084c <__aeabi_ddiv>
 800e69c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6a0:	f004 040f 	and.w	r4, r4, #15
 800e6a4:	2603      	movs	r6, #3
 800e6a6:	4da2      	ldr	r5, [pc, #648]	@ (800e930 <_dtoa_r+0x5c0>)
 800e6a8:	b954      	cbnz	r4, 800e6c0 <_dtoa_r+0x350>
 800e6aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6b2:	f7f2 f8cb 	bl	800084c <__aeabi_ddiv>
 800e6b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6ba:	e028      	b.n	800e70e <_dtoa_r+0x39e>
 800e6bc:	2602      	movs	r6, #2
 800e6be:	e7f2      	b.n	800e6a6 <_dtoa_r+0x336>
 800e6c0:	07e1      	lsls	r1, r4, #31
 800e6c2:	d508      	bpl.n	800e6d6 <_dtoa_r+0x366>
 800e6c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e6c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e6cc:	f7f1 ff94 	bl	80005f8 <__aeabi_dmul>
 800e6d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e6d4:	3601      	adds	r6, #1
 800e6d6:	1064      	asrs	r4, r4, #1
 800e6d8:	3508      	adds	r5, #8
 800e6da:	e7e5      	b.n	800e6a8 <_dtoa_r+0x338>
 800e6dc:	f000 80d2 	beq.w	800e884 <_dtoa_r+0x514>
 800e6e0:	427c      	negs	r4, r7
 800e6e2:	4b92      	ldr	r3, [pc, #584]	@ (800e92c <_dtoa_r+0x5bc>)
 800e6e4:	4d92      	ldr	r5, [pc, #584]	@ (800e930 <_dtoa_r+0x5c0>)
 800e6e6:	f004 020f 	and.w	r2, r4, #15
 800e6ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e6f6:	f7f1 ff7f 	bl	80005f8 <__aeabi_dmul>
 800e6fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6fe:	1124      	asrs	r4, r4, #4
 800e700:	2300      	movs	r3, #0
 800e702:	2602      	movs	r6, #2
 800e704:	2c00      	cmp	r4, #0
 800e706:	f040 80b2 	bne.w	800e86e <_dtoa_r+0x4fe>
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d1d3      	bne.n	800e6b6 <_dtoa_r+0x346>
 800e70e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e710:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e714:	2b00      	cmp	r3, #0
 800e716:	f000 80b7 	beq.w	800e888 <_dtoa_r+0x518>
 800e71a:	4b86      	ldr	r3, [pc, #536]	@ (800e934 <_dtoa_r+0x5c4>)
 800e71c:	2200      	movs	r2, #0
 800e71e:	4620      	mov	r0, r4
 800e720:	4629      	mov	r1, r5
 800e722:	f7f2 f9db 	bl	8000adc <__aeabi_dcmplt>
 800e726:	2800      	cmp	r0, #0
 800e728:	f000 80ae 	beq.w	800e888 <_dtoa_r+0x518>
 800e72c:	9b07      	ldr	r3, [sp, #28]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	f000 80aa 	beq.w	800e888 <_dtoa_r+0x518>
 800e734:	9b00      	ldr	r3, [sp, #0]
 800e736:	2b00      	cmp	r3, #0
 800e738:	dd37      	ble.n	800e7aa <_dtoa_r+0x43a>
 800e73a:	1e7b      	subs	r3, r7, #1
 800e73c:	9304      	str	r3, [sp, #16]
 800e73e:	4620      	mov	r0, r4
 800e740:	4b7d      	ldr	r3, [pc, #500]	@ (800e938 <_dtoa_r+0x5c8>)
 800e742:	2200      	movs	r2, #0
 800e744:	4629      	mov	r1, r5
 800e746:	f7f1 ff57 	bl	80005f8 <__aeabi_dmul>
 800e74a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e74e:	9c00      	ldr	r4, [sp, #0]
 800e750:	3601      	adds	r6, #1
 800e752:	4630      	mov	r0, r6
 800e754:	f7f1 fee6 	bl	8000524 <__aeabi_i2d>
 800e758:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e75c:	f7f1 ff4c 	bl	80005f8 <__aeabi_dmul>
 800e760:	4b76      	ldr	r3, [pc, #472]	@ (800e93c <_dtoa_r+0x5cc>)
 800e762:	2200      	movs	r2, #0
 800e764:	f7f1 fd92 	bl	800028c <__adddf3>
 800e768:	4605      	mov	r5, r0
 800e76a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e76e:	2c00      	cmp	r4, #0
 800e770:	f040 808d 	bne.w	800e88e <_dtoa_r+0x51e>
 800e774:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e778:	4b71      	ldr	r3, [pc, #452]	@ (800e940 <_dtoa_r+0x5d0>)
 800e77a:	2200      	movs	r2, #0
 800e77c:	f7f1 fd84 	bl	8000288 <__aeabi_dsub>
 800e780:	4602      	mov	r2, r0
 800e782:	460b      	mov	r3, r1
 800e784:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e788:	462a      	mov	r2, r5
 800e78a:	4633      	mov	r3, r6
 800e78c:	f7f2 f9c4 	bl	8000b18 <__aeabi_dcmpgt>
 800e790:	2800      	cmp	r0, #0
 800e792:	f040 828b 	bne.w	800ecac <_dtoa_r+0x93c>
 800e796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e79a:	462a      	mov	r2, r5
 800e79c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e7a0:	f7f2 f99c 	bl	8000adc <__aeabi_dcmplt>
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	f040 8128 	bne.w	800e9fa <_dtoa_r+0x68a>
 800e7aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e7ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e7b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	f2c0 815a 	blt.w	800ea6e <_dtoa_r+0x6fe>
 800e7ba:	2f0e      	cmp	r7, #14
 800e7bc:	f300 8157 	bgt.w	800ea6e <_dtoa_r+0x6fe>
 800e7c0:	4b5a      	ldr	r3, [pc, #360]	@ (800e92c <_dtoa_r+0x5bc>)
 800e7c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e7c6:	ed93 7b00 	vldr	d7, [r3]
 800e7ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	ed8d 7b00 	vstr	d7, [sp]
 800e7d2:	da03      	bge.n	800e7dc <_dtoa_r+0x46c>
 800e7d4:	9b07      	ldr	r3, [sp, #28]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	f340 8101 	ble.w	800e9de <_dtoa_r+0x66e>
 800e7dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e7e0:	4656      	mov	r6, sl
 800e7e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7e6:	4620      	mov	r0, r4
 800e7e8:	4629      	mov	r1, r5
 800e7ea:	f7f2 f82f 	bl	800084c <__aeabi_ddiv>
 800e7ee:	f7f2 f9b3 	bl	8000b58 <__aeabi_d2iz>
 800e7f2:	4680      	mov	r8, r0
 800e7f4:	f7f1 fe96 	bl	8000524 <__aeabi_i2d>
 800e7f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7fc:	f7f1 fefc 	bl	80005f8 <__aeabi_dmul>
 800e800:	4602      	mov	r2, r0
 800e802:	460b      	mov	r3, r1
 800e804:	4620      	mov	r0, r4
 800e806:	4629      	mov	r1, r5
 800e808:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e80c:	f7f1 fd3c 	bl	8000288 <__aeabi_dsub>
 800e810:	f806 4b01 	strb.w	r4, [r6], #1
 800e814:	9d07      	ldr	r5, [sp, #28]
 800e816:	eba6 040a 	sub.w	r4, r6, sl
 800e81a:	42a5      	cmp	r5, r4
 800e81c:	4602      	mov	r2, r0
 800e81e:	460b      	mov	r3, r1
 800e820:	f040 8117 	bne.w	800ea52 <_dtoa_r+0x6e2>
 800e824:	f7f1 fd32 	bl	800028c <__adddf3>
 800e828:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e82c:	4604      	mov	r4, r0
 800e82e:	460d      	mov	r5, r1
 800e830:	f7f2 f972 	bl	8000b18 <__aeabi_dcmpgt>
 800e834:	2800      	cmp	r0, #0
 800e836:	f040 80f9 	bne.w	800ea2c <_dtoa_r+0x6bc>
 800e83a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e83e:	4620      	mov	r0, r4
 800e840:	4629      	mov	r1, r5
 800e842:	f7f2 f941 	bl	8000ac8 <__aeabi_dcmpeq>
 800e846:	b118      	cbz	r0, 800e850 <_dtoa_r+0x4e0>
 800e848:	f018 0f01 	tst.w	r8, #1
 800e84c:	f040 80ee 	bne.w	800ea2c <_dtoa_r+0x6bc>
 800e850:	4649      	mov	r1, r9
 800e852:	4658      	mov	r0, fp
 800e854:	f000 fc90 	bl	800f178 <_Bfree>
 800e858:	2300      	movs	r3, #0
 800e85a:	7033      	strb	r3, [r6, #0]
 800e85c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e85e:	3701      	adds	r7, #1
 800e860:	601f      	str	r7, [r3, #0]
 800e862:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e864:	2b00      	cmp	r3, #0
 800e866:	f000 831d 	beq.w	800eea4 <_dtoa_r+0xb34>
 800e86a:	601e      	str	r6, [r3, #0]
 800e86c:	e31a      	b.n	800eea4 <_dtoa_r+0xb34>
 800e86e:	07e2      	lsls	r2, r4, #31
 800e870:	d505      	bpl.n	800e87e <_dtoa_r+0x50e>
 800e872:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e876:	f7f1 febf 	bl	80005f8 <__aeabi_dmul>
 800e87a:	3601      	adds	r6, #1
 800e87c:	2301      	movs	r3, #1
 800e87e:	1064      	asrs	r4, r4, #1
 800e880:	3508      	adds	r5, #8
 800e882:	e73f      	b.n	800e704 <_dtoa_r+0x394>
 800e884:	2602      	movs	r6, #2
 800e886:	e742      	b.n	800e70e <_dtoa_r+0x39e>
 800e888:	9c07      	ldr	r4, [sp, #28]
 800e88a:	9704      	str	r7, [sp, #16]
 800e88c:	e761      	b.n	800e752 <_dtoa_r+0x3e2>
 800e88e:	4b27      	ldr	r3, [pc, #156]	@ (800e92c <_dtoa_r+0x5bc>)
 800e890:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e892:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e896:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e89a:	4454      	add	r4, sl
 800e89c:	2900      	cmp	r1, #0
 800e89e:	d053      	beq.n	800e948 <_dtoa_r+0x5d8>
 800e8a0:	4928      	ldr	r1, [pc, #160]	@ (800e944 <_dtoa_r+0x5d4>)
 800e8a2:	2000      	movs	r0, #0
 800e8a4:	f7f1 ffd2 	bl	800084c <__aeabi_ddiv>
 800e8a8:	4633      	mov	r3, r6
 800e8aa:	462a      	mov	r2, r5
 800e8ac:	f7f1 fcec 	bl	8000288 <__aeabi_dsub>
 800e8b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e8b4:	4656      	mov	r6, sl
 800e8b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8ba:	f7f2 f94d 	bl	8000b58 <__aeabi_d2iz>
 800e8be:	4605      	mov	r5, r0
 800e8c0:	f7f1 fe30 	bl	8000524 <__aeabi_i2d>
 800e8c4:	4602      	mov	r2, r0
 800e8c6:	460b      	mov	r3, r1
 800e8c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8cc:	f7f1 fcdc 	bl	8000288 <__aeabi_dsub>
 800e8d0:	3530      	adds	r5, #48	@ 0x30
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e8da:	f806 5b01 	strb.w	r5, [r6], #1
 800e8de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e8e2:	f7f2 f8fb 	bl	8000adc <__aeabi_dcmplt>
 800e8e6:	2800      	cmp	r0, #0
 800e8e8:	d171      	bne.n	800e9ce <_dtoa_r+0x65e>
 800e8ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e8ee:	4911      	ldr	r1, [pc, #68]	@ (800e934 <_dtoa_r+0x5c4>)
 800e8f0:	2000      	movs	r0, #0
 800e8f2:	f7f1 fcc9 	bl	8000288 <__aeabi_dsub>
 800e8f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e8fa:	f7f2 f8ef 	bl	8000adc <__aeabi_dcmplt>
 800e8fe:	2800      	cmp	r0, #0
 800e900:	f040 8095 	bne.w	800ea2e <_dtoa_r+0x6be>
 800e904:	42a6      	cmp	r6, r4
 800e906:	f43f af50 	beq.w	800e7aa <_dtoa_r+0x43a>
 800e90a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e90e:	4b0a      	ldr	r3, [pc, #40]	@ (800e938 <_dtoa_r+0x5c8>)
 800e910:	2200      	movs	r2, #0
 800e912:	f7f1 fe71 	bl	80005f8 <__aeabi_dmul>
 800e916:	4b08      	ldr	r3, [pc, #32]	@ (800e938 <_dtoa_r+0x5c8>)
 800e918:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e91c:	2200      	movs	r2, #0
 800e91e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e922:	f7f1 fe69 	bl	80005f8 <__aeabi_dmul>
 800e926:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e92a:	e7c4      	b.n	800e8b6 <_dtoa_r+0x546>
 800e92c:	08012500 	.word	0x08012500
 800e930:	080124d8 	.word	0x080124d8
 800e934:	3ff00000 	.word	0x3ff00000
 800e938:	40240000 	.word	0x40240000
 800e93c:	401c0000 	.word	0x401c0000
 800e940:	40140000 	.word	0x40140000
 800e944:	3fe00000 	.word	0x3fe00000
 800e948:	4631      	mov	r1, r6
 800e94a:	4628      	mov	r0, r5
 800e94c:	f7f1 fe54 	bl	80005f8 <__aeabi_dmul>
 800e950:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e954:	9415      	str	r4, [sp, #84]	@ 0x54
 800e956:	4656      	mov	r6, sl
 800e958:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e95c:	f7f2 f8fc 	bl	8000b58 <__aeabi_d2iz>
 800e960:	4605      	mov	r5, r0
 800e962:	f7f1 fddf 	bl	8000524 <__aeabi_i2d>
 800e966:	4602      	mov	r2, r0
 800e968:	460b      	mov	r3, r1
 800e96a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e96e:	f7f1 fc8b 	bl	8000288 <__aeabi_dsub>
 800e972:	3530      	adds	r5, #48	@ 0x30
 800e974:	f806 5b01 	strb.w	r5, [r6], #1
 800e978:	4602      	mov	r2, r0
 800e97a:	460b      	mov	r3, r1
 800e97c:	42a6      	cmp	r6, r4
 800e97e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e982:	f04f 0200 	mov.w	r2, #0
 800e986:	d124      	bne.n	800e9d2 <_dtoa_r+0x662>
 800e988:	4bac      	ldr	r3, [pc, #688]	@ (800ec3c <_dtoa_r+0x8cc>)
 800e98a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e98e:	f7f1 fc7d 	bl	800028c <__adddf3>
 800e992:	4602      	mov	r2, r0
 800e994:	460b      	mov	r3, r1
 800e996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e99a:	f7f2 f8bd 	bl	8000b18 <__aeabi_dcmpgt>
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	d145      	bne.n	800ea2e <_dtoa_r+0x6be>
 800e9a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e9a6:	49a5      	ldr	r1, [pc, #660]	@ (800ec3c <_dtoa_r+0x8cc>)
 800e9a8:	2000      	movs	r0, #0
 800e9aa:	f7f1 fc6d 	bl	8000288 <__aeabi_dsub>
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9b6:	f7f2 f891 	bl	8000adc <__aeabi_dcmplt>
 800e9ba:	2800      	cmp	r0, #0
 800e9bc:	f43f aef5 	beq.w	800e7aa <_dtoa_r+0x43a>
 800e9c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e9c2:	1e73      	subs	r3, r6, #1
 800e9c4:	9315      	str	r3, [sp, #84]	@ 0x54
 800e9c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e9ca:	2b30      	cmp	r3, #48	@ 0x30
 800e9cc:	d0f8      	beq.n	800e9c0 <_dtoa_r+0x650>
 800e9ce:	9f04      	ldr	r7, [sp, #16]
 800e9d0:	e73e      	b.n	800e850 <_dtoa_r+0x4e0>
 800e9d2:	4b9b      	ldr	r3, [pc, #620]	@ (800ec40 <_dtoa_r+0x8d0>)
 800e9d4:	f7f1 fe10 	bl	80005f8 <__aeabi_dmul>
 800e9d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9dc:	e7bc      	b.n	800e958 <_dtoa_r+0x5e8>
 800e9de:	d10c      	bne.n	800e9fa <_dtoa_r+0x68a>
 800e9e0:	4b98      	ldr	r3, [pc, #608]	@ (800ec44 <_dtoa_r+0x8d4>)
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e9e8:	f7f1 fe06 	bl	80005f8 <__aeabi_dmul>
 800e9ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e9f0:	f7f2 f888 	bl	8000b04 <__aeabi_dcmpge>
 800e9f4:	2800      	cmp	r0, #0
 800e9f6:	f000 8157 	beq.w	800eca8 <_dtoa_r+0x938>
 800e9fa:	2400      	movs	r4, #0
 800e9fc:	4625      	mov	r5, r4
 800e9fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea00:	43db      	mvns	r3, r3
 800ea02:	9304      	str	r3, [sp, #16]
 800ea04:	4656      	mov	r6, sl
 800ea06:	2700      	movs	r7, #0
 800ea08:	4621      	mov	r1, r4
 800ea0a:	4658      	mov	r0, fp
 800ea0c:	f000 fbb4 	bl	800f178 <_Bfree>
 800ea10:	2d00      	cmp	r5, #0
 800ea12:	d0dc      	beq.n	800e9ce <_dtoa_r+0x65e>
 800ea14:	b12f      	cbz	r7, 800ea22 <_dtoa_r+0x6b2>
 800ea16:	42af      	cmp	r7, r5
 800ea18:	d003      	beq.n	800ea22 <_dtoa_r+0x6b2>
 800ea1a:	4639      	mov	r1, r7
 800ea1c:	4658      	mov	r0, fp
 800ea1e:	f000 fbab 	bl	800f178 <_Bfree>
 800ea22:	4629      	mov	r1, r5
 800ea24:	4658      	mov	r0, fp
 800ea26:	f000 fba7 	bl	800f178 <_Bfree>
 800ea2a:	e7d0      	b.n	800e9ce <_dtoa_r+0x65e>
 800ea2c:	9704      	str	r7, [sp, #16]
 800ea2e:	4633      	mov	r3, r6
 800ea30:	461e      	mov	r6, r3
 800ea32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea36:	2a39      	cmp	r2, #57	@ 0x39
 800ea38:	d107      	bne.n	800ea4a <_dtoa_r+0x6da>
 800ea3a:	459a      	cmp	sl, r3
 800ea3c:	d1f8      	bne.n	800ea30 <_dtoa_r+0x6c0>
 800ea3e:	9a04      	ldr	r2, [sp, #16]
 800ea40:	3201      	adds	r2, #1
 800ea42:	9204      	str	r2, [sp, #16]
 800ea44:	2230      	movs	r2, #48	@ 0x30
 800ea46:	f88a 2000 	strb.w	r2, [sl]
 800ea4a:	781a      	ldrb	r2, [r3, #0]
 800ea4c:	3201      	adds	r2, #1
 800ea4e:	701a      	strb	r2, [r3, #0]
 800ea50:	e7bd      	b.n	800e9ce <_dtoa_r+0x65e>
 800ea52:	4b7b      	ldr	r3, [pc, #492]	@ (800ec40 <_dtoa_r+0x8d0>)
 800ea54:	2200      	movs	r2, #0
 800ea56:	f7f1 fdcf 	bl	80005f8 <__aeabi_dmul>
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	4604      	mov	r4, r0
 800ea60:	460d      	mov	r5, r1
 800ea62:	f7f2 f831 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea66:	2800      	cmp	r0, #0
 800ea68:	f43f aebb 	beq.w	800e7e2 <_dtoa_r+0x472>
 800ea6c:	e6f0      	b.n	800e850 <_dtoa_r+0x4e0>
 800ea6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ea70:	2a00      	cmp	r2, #0
 800ea72:	f000 80db 	beq.w	800ec2c <_dtoa_r+0x8bc>
 800ea76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea78:	2a01      	cmp	r2, #1
 800ea7a:	f300 80bf 	bgt.w	800ebfc <_dtoa_r+0x88c>
 800ea7e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ea80:	2a00      	cmp	r2, #0
 800ea82:	f000 80b7 	beq.w	800ebf4 <_dtoa_r+0x884>
 800ea86:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ea8a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ea8c:	4646      	mov	r6, r8
 800ea8e:	9a08      	ldr	r2, [sp, #32]
 800ea90:	2101      	movs	r1, #1
 800ea92:	441a      	add	r2, r3
 800ea94:	4658      	mov	r0, fp
 800ea96:	4498      	add	r8, r3
 800ea98:	9208      	str	r2, [sp, #32]
 800ea9a:	f000 fc21 	bl	800f2e0 <__i2b>
 800ea9e:	4605      	mov	r5, r0
 800eaa0:	b15e      	cbz	r6, 800eaba <_dtoa_r+0x74a>
 800eaa2:	9b08      	ldr	r3, [sp, #32]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	dd08      	ble.n	800eaba <_dtoa_r+0x74a>
 800eaa8:	42b3      	cmp	r3, r6
 800eaaa:	9a08      	ldr	r2, [sp, #32]
 800eaac:	bfa8      	it	ge
 800eaae:	4633      	movge	r3, r6
 800eab0:	eba8 0803 	sub.w	r8, r8, r3
 800eab4:	1af6      	subs	r6, r6, r3
 800eab6:	1ad3      	subs	r3, r2, r3
 800eab8:	9308      	str	r3, [sp, #32]
 800eaba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eabc:	b1f3      	cbz	r3, 800eafc <_dtoa_r+0x78c>
 800eabe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	f000 80b7 	beq.w	800ec34 <_dtoa_r+0x8c4>
 800eac6:	b18c      	cbz	r4, 800eaec <_dtoa_r+0x77c>
 800eac8:	4629      	mov	r1, r5
 800eaca:	4622      	mov	r2, r4
 800eacc:	4658      	mov	r0, fp
 800eace:	f000 fcc7 	bl	800f460 <__pow5mult>
 800ead2:	464a      	mov	r2, r9
 800ead4:	4601      	mov	r1, r0
 800ead6:	4605      	mov	r5, r0
 800ead8:	4658      	mov	r0, fp
 800eada:	f000 fc17 	bl	800f30c <__multiply>
 800eade:	4649      	mov	r1, r9
 800eae0:	9004      	str	r0, [sp, #16]
 800eae2:	4658      	mov	r0, fp
 800eae4:	f000 fb48 	bl	800f178 <_Bfree>
 800eae8:	9b04      	ldr	r3, [sp, #16]
 800eaea:	4699      	mov	r9, r3
 800eaec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eaee:	1b1a      	subs	r2, r3, r4
 800eaf0:	d004      	beq.n	800eafc <_dtoa_r+0x78c>
 800eaf2:	4649      	mov	r1, r9
 800eaf4:	4658      	mov	r0, fp
 800eaf6:	f000 fcb3 	bl	800f460 <__pow5mult>
 800eafa:	4681      	mov	r9, r0
 800eafc:	2101      	movs	r1, #1
 800eafe:	4658      	mov	r0, fp
 800eb00:	f000 fbee 	bl	800f2e0 <__i2b>
 800eb04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb06:	4604      	mov	r4, r0
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	f000 81cf 	beq.w	800eeac <_dtoa_r+0xb3c>
 800eb0e:	461a      	mov	r2, r3
 800eb10:	4601      	mov	r1, r0
 800eb12:	4658      	mov	r0, fp
 800eb14:	f000 fca4 	bl	800f460 <__pow5mult>
 800eb18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb1a:	2b01      	cmp	r3, #1
 800eb1c:	4604      	mov	r4, r0
 800eb1e:	f300 8095 	bgt.w	800ec4c <_dtoa_r+0x8dc>
 800eb22:	9b02      	ldr	r3, [sp, #8]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	f040 8087 	bne.w	800ec38 <_dtoa_r+0x8c8>
 800eb2a:	9b03      	ldr	r3, [sp, #12]
 800eb2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	f040 8089 	bne.w	800ec48 <_dtoa_r+0x8d8>
 800eb36:	9b03      	ldr	r3, [sp, #12]
 800eb38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800eb3c:	0d1b      	lsrs	r3, r3, #20
 800eb3e:	051b      	lsls	r3, r3, #20
 800eb40:	b12b      	cbz	r3, 800eb4e <_dtoa_r+0x7de>
 800eb42:	9b08      	ldr	r3, [sp, #32]
 800eb44:	3301      	adds	r3, #1
 800eb46:	9308      	str	r3, [sp, #32]
 800eb48:	f108 0801 	add.w	r8, r8, #1
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	f000 81b0 	beq.w	800eeb8 <_dtoa_r+0xb48>
 800eb58:	6923      	ldr	r3, [r4, #16]
 800eb5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eb5e:	6918      	ldr	r0, [r3, #16]
 800eb60:	f000 fb72 	bl	800f248 <__hi0bits>
 800eb64:	f1c0 0020 	rsb	r0, r0, #32
 800eb68:	9b08      	ldr	r3, [sp, #32]
 800eb6a:	4418      	add	r0, r3
 800eb6c:	f010 001f 	ands.w	r0, r0, #31
 800eb70:	d077      	beq.n	800ec62 <_dtoa_r+0x8f2>
 800eb72:	f1c0 0320 	rsb	r3, r0, #32
 800eb76:	2b04      	cmp	r3, #4
 800eb78:	dd6b      	ble.n	800ec52 <_dtoa_r+0x8e2>
 800eb7a:	9b08      	ldr	r3, [sp, #32]
 800eb7c:	f1c0 001c 	rsb	r0, r0, #28
 800eb80:	4403      	add	r3, r0
 800eb82:	4480      	add	r8, r0
 800eb84:	4406      	add	r6, r0
 800eb86:	9308      	str	r3, [sp, #32]
 800eb88:	f1b8 0f00 	cmp.w	r8, #0
 800eb8c:	dd05      	ble.n	800eb9a <_dtoa_r+0x82a>
 800eb8e:	4649      	mov	r1, r9
 800eb90:	4642      	mov	r2, r8
 800eb92:	4658      	mov	r0, fp
 800eb94:	f000 fcbe 	bl	800f514 <__lshift>
 800eb98:	4681      	mov	r9, r0
 800eb9a:	9b08      	ldr	r3, [sp, #32]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	dd05      	ble.n	800ebac <_dtoa_r+0x83c>
 800eba0:	4621      	mov	r1, r4
 800eba2:	461a      	mov	r2, r3
 800eba4:	4658      	mov	r0, fp
 800eba6:	f000 fcb5 	bl	800f514 <__lshift>
 800ebaa:	4604      	mov	r4, r0
 800ebac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d059      	beq.n	800ec66 <_dtoa_r+0x8f6>
 800ebb2:	4621      	mov	r1, r4
 800ebb4:	4648      	mov	r0, r9
 800ebb6:	f000 fd19 	bl	800f5ec <__mcmp>
 800ebba:	2800      	cmp	r0, #0
 800ebbc:	da53      	bge.n	800ec66 <_dtoa_r+0x8f6>
 800ebbe:	1e7b      	subs	r3, r7, #1
 800ebc0:	9304      	str	r3, [sp, #16]
 800ebc2:	4649      	mov	r1, r9
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	220a      	movs	r2, #10
 800ebc8:	4658      	mov	r0, fp
 800ebca:	f000 faf7 	bl	800f1bc <__multadd>
 800ebce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ebd0:	4681      	mov	r9, r0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	f000 8172 	beq.w	800eebc <_dtoa_r+0xb4c>
 800ebd8:	2300      	movs	r3, #0
 800ebda:	4629      	mov	r1, r5
 800ebdc:	220a      	movs	r2, #10
 800ebde:	4658      	mov	r0, fp
 800ebe0:	f000 faec 	bl	800f1bc <__multadd>
 800ebe4:	9b00      	ldr	r3, [sp, #0]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	4605      	mov	r5, r0
 800ebea:	dc67      	bgt.n	800ecbc <_dtoa_r+0x94c>
 800ebec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebee:	2b02      	cmp	r3, #2
 800ebf0:	dc41      	bgt.n	800ec76 <_dtoa_r+0x906>
 800ebf2:	e063      	b.n	800ecbc <_dtoa_r+0x94c>
 800ebf4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ebf6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ebfa:	e746      	b.n	800ea8a <_dtoa_r+0x71a>
 800ebfc:	9b07      	ldr	r3, [sp, #28]
 800ebfe:	1e5c      	subs	r4, r3, #1
 800ec00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ec02:	42a3      	cmp	r3, r4
 800ec04:	bfbf      	itttt	lt
 800ec06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ec08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ec0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ec0c:	1ae3      	sublt	r3, r4, r3
 800ec0e:	bfb4      	ite	lt
 800ec10:	18d2      	addlt	r2, r2, r3
 800ec12:	1b1c      	subge	r4, r3, r4
 800ec14:	9b07      	ldr	r3, [sp, #28]
 800ec16:	bfbc      	itt	lt
 800ec18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ec1a:	2400      	movlt	r4, #0
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	bfb5      	itete	lt
 800ec20:	eba8 0603 	sublt.w	r6, r8, r3
 800ec24:	9b07      	ldrge	r3, [sp, #28]
 800ec26:	2300      	movlt	r3, #0
 800ec28:	4646      	movge	r6, r8
 800ec2a:	e730      	b.n	800ea8e <_dtoa_r+0x71e>
 800ec2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ec2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ec30:	4646      	mov	r6, r8
 800ec32:	e735      	b.n	800eaa0 <_dtoa_r+0x730>
 800ec34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ec36:	e75c      	b.n	800eaf2 <_dtoa_r+0x782>
 800ec38:	2300      	movs	r3, #0
 800ec3a:	e788      	b.n	800eb4e <_dtoa_r+0x7de>
 800ec3c:	3fe00000 	.word	0x3fe00000
 800ec40:	40240000 	.word	0x40240000
 800ec44:	40140000 	.word	0x40140000
 800ec48:	9b02      	ldr	r3, [sp, #8]
 800ec4a:	e780      	b.n	800eb4e <_dtoa_r+0x7de>
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec50:	e782      	b.n	800eb58 <_dtoa_r+0x7e8>
 800ec52:	d099      	beq.n	800eb88 <_dtoa_r+0x818>
 800ec54:	9a08      	ldr	r2, [sp, #32]
 800ec56:	331c      	adds	r3, #28
 800ec58:	441a      	add	r2, r3
 800ec5a:	4498      	add	r8, r3
 800ec5c:	441e      	add	r6, r3
 800ec5e:	9208      	str	r2, [sp, #32]
 800ec60:	e792      	b.n	800eb88 <_dtoa_r+0x818>
 800ec62:	4603      	mov	r3, r0
 800ec64:	e7f6      	b.n	800ec54 <_dtoa_r+0x8e4>
 800ec66:	9b07      	ldr	r3, [sp, #28]
 800ec68:	9704      	str	r7, [sp, #16]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	dc20      	bgt.n	800ecb0 <_dtoa_r+0x940>
 800ec6e:	9300      	str	r3, [sp, #0]
 800ec70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec72:	2b02      	cmp	r3, #2
 800ec74:	dd1e      	ble.n	800ecb4 <_dtoa_r+0x944>
 800ec76:	9b00      	ldr	r3, [sp, #0]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	f47f aec0 	bne.w	800e9fe <_dtoa_r+0x68e>
 800ec7e:	4621      	mov	r1, r4
 800ec80:	2205      	movs	r2, #5
 800ec82:	4658      	mov	r0, fp
 800ec84:	f000 fa9a 	bl	800f1bc <__multadd>
 800ec88:	4601      	mov	r1, r0
 800ec8a:	4604      	mov	r4, r0
 800ec8c:	4648      	mov	r0, r9
 800ec8e:	f000 fcad 	bl	800f5ec <__mcmp>
 800ec92:	2800      	cmp	r0, #0
 800ec94:	f77f aeb3 	ble.w	800e9fe <_dtoa_r+0x68e>
 800ec98:	4656      	mov	r6, sl
 800ec9a:	2331      	movs	r3, #49	@ 0x31
 800ec9c:	f806 3b01 	strb.w	r3, [r6], #1
 800eca0:	9b04      	ldr	r3, [sp, #16]
 800eca2:	3301      	adds	r3, #1
 800eca4:	9304      	str	r3, [sp, #16]
 800eca6:	e6ae      	b.n	800ea06 <_dtoa_r+0x696>
 800eca8:	9c07      	ldr	r4, [sp, #28]
 800ecaa:	9704      	str	r7, [sp, #16]
 800ecac:	4625      	mov	r5, r4
 800ecae:	e7f3      	b.n	800ec98 <_dtoa_r+0x928>
 800ecb0:	9b07      	ldr	r3, [sp, #28]
 800ecb2:	9300      	str	r3, [sp, #0]
 800ecb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	f000 8104 	beq.w	800eec4 <_dtoa_r+0xb54>
 800ecbc:	2e00      	cmp	r6, #0
 800ecbe:	dd05      	ble.n	800eccc <_dtoa_r+0x95c>
 800ecc0:	4629      	mov	r1, r5
 800ecc2:	4632      	mov	r2, r6
 800ecc4:	4658      	mov	r0, fp
 800ecc6:	f000 fc25 	bl	800f514 <__lshift>
 800ecca:	4605      	mov	r5, r0
 800eccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d05a      	beq.n	800ed88 <_dtoa_r+0xa18>
 800ecd2:	6869      	ldr	r1, [r5, #4]
 800ecd4:	4658      	mov	r0, fp
 800ecd6:	f000 fa0f 	bl	800f0f8 <_Balloc>
 800ecda:	4606      	mov	r6, r0
 800ecdc:	b928      	cbnz	r0, 800ecea <_dtoa_r+0x97a>
 800ecde:	4b84      	ldr	r3, [pc, #528]	@ (800eef0 <_dtoa_r+0xb80>)
 800ece0:	4602      	mov	r2, r0
 800ece2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ece6:	f7ff bb5a 	b.w	800e39e <_dtoa_r+0x2e>
 800ecea:	692a      	ldr	r2, [r5, #16]
 800ecec:	3202      	adds	r2, #2
 800ecee:	0092      	lsls	r2, r2, #2
 800ecf0:	f105 010c 	add.w	r1, r5, #12
 800ecf4:	300c      	adds	r0, #12
 800ecf6:	f7ff faa4 	bl	800e242 <memcpy>
 800ecfa:	2201      	movs	r2, #1
 800ecfc:	4631      	mov	r1, r6
 800ecfe:	4658      	mov	r0, fp
 800ed00:	f000 fc08 	bl	800f514 <__lshift>
 800ed04:	f10a 0301 	add.w	r3, sl, #1
 800ed08:	9307      	str	r3, [sp, #28]
 800ed0a:	9b00      	ldr	r3, [sp, #0]
 800ed0c:	4453      	add	r3, sl
 800ed0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ed10:	9b02      	ldr	r3, [sp, #8]
 800ed12:	f003 0301 	and.w	r3, r3, #1
 800ed16:	462f      	mov	r7, r5
 800ed18:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed1a:	4605      	mov	r5, r0
 800ed1c:	9b07      	ldr	r3, [sp, #28]
 800ed1e:	4621      	mov	r1, r4
 800ed20:	3b01      	subs	r3, #1
 800ed22:	4648      	mov	r0, r9
 800ed24:	9300      	str	r3, [sp, #0]
 800ed26:	f7ff fa9a 	bl	800e25e <quorem>
 800ed2a:	4639      	mov	r1, r7
 800ed2c:	9002      	str	r0, [sp, #8]
 800ed2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ed32:	4648      	mov	r0, r9
 800ed34:	f000 fc5a 	bl	800f5ec <__mcmp>
 800ed38:	462a      	mov	r2, r5
 800ed3a:	9008      	str	r0, [sp, #32]
 800ed3c:	4621      	mov	r1, r4
 800ed3e:	4658      	mov	r0, fp
 800ed40:	f000 fc70 	bl	800f624 <__mdiff>
 800ed44:	68c2      	ldr	r2, [r0, #12]
 800ed46:	4606      	mov	r6, r0
 800ed48:	bb02      	cbnz	r2, 800ed8c <_dtoa_r+0xa1c>
 800ed4a:	4601      	mov	r1, r0
 800ed4c:	4648      	mov	r0, r9
 800ed4e:	f000 fc4d 	bl	800f5ec <__mcmp>
 800ed52:	4602      	mov	r2, r0
 800ed54:	4631      	mov	r1, r6
 800ed56:	4658      	mov	r0, fp
 800ed58:	920e      	str	r2, [sp, #56]	@ 0x38
 800ed5a:	f000 fa0d 	bl	800f178 <_Bfree>
 800ed5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed62:	9e07      	ldr	r6, [sp, #28]
 800ed64:	ea43 0102 	orr.w	r1, r3, r2
 800ed68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed6a:	4319      	orrs	r1, r3
 800ed6c:	d110      	bne.n	800ed90 <_dtoa_r+0xa20>
 800ed6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ed72:	d029      	beq.n	800edc8 <_dtoa_r+0xa58>
 800ed74:	9b08      	ldr	r3, [sp, #32]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	dd02      	ble.n	800ed80 <_dtoa_r+0xa10>
 800ed7a:	9b02      	ldr	r3, [sp, #8]
 800ed7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ed80:	9b00      	ldr	r3, [sp, #0]
 800ed82:	f883 8000 	strb.w	r8, [r3]
 800ed86:	e63f      	b.n	800ea08 <_dtoa_r+0x698>
 800ed88:	4628      	mov	r0, r5
 800ed8a:	e7bb      	b.n	800ed04 <_dtoa_r+0x994>
 800ed8c:	2201      	movs	r2, #1
 800ed8e:	e7e1      	b.n	800ed54 <_dtoa_r+0x9e4>
 800ed90:	9b08      	ldr	r3, [sp, #32]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	db04      	blt.n	800eda0 <_dtoa_r+0xa30>
 800ed96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ed98:	430b      	orrs	r3, r1
 800ed9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ed9c:	430b      	orrs	r3, r1
 800ed9e:	d120      	bne.n	800ede2 <_dtoa_r+0xa72>
 800eda0:	2a00      	cmp	r2, #0
 800eda2:	dded      	ble.n	800ed80 <_dtoa_r+0xa10>
 800eda4:	4649      	mov	r1, r9
 800eda6:	2201      	movs	r2, #1
 800eda8:	4658      	mov	r0, fp
 800edaa:	f000 fbb3 	bl	800f514 <__lshift>
 800edae:	4621      	mov	r1, r4
 800edb0:	4681      	mov	r9, r0
 800edb2:	f000 fc1b 	bl	800f5ec <__mcmp>
 800edb6:	2800      	cmp	r0, #0
 800edb8:	dc03      	bgt.n	800edc2 <_dtoa_r+0xa52>
 800edba:	d1e1      	bne.n	800ed80 <_dtoa_r+0xa10>
 800edbc:	f018 0f01 	tst.w	r8, #1
 800edc0:	d0de      	beq.n	800ed80 <_dtoa_r+0xa10>
 800edc2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800edc6:	d1d8      	bne.n	800ed7a <_dtoa_r+0xa0a>
 800edc8:	9a00      	ldr	r2, [sp, #0]
 800edca:	2339      	movs	r3, #57	@ 0x39
 800edcc:	7013      	strb	r3, [r2, #0]
 800edce:	4633      	mov	r3, r6
 800edd0:	461e      	mov	r6, r3
 800edd2:	3b01      	subs	r3, #1
 800edd4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800edd8:	2a39      	cmp	r2, #57	@ 0x39
 800edda:	d052      	beq.n	800ee82 <_dtoa_r+0xb12>
 800eddc:	3201      	adds	r2, #1
 800edde:	701a      	strb	r2, [r3, #0]
 800ede0:	e612      	b.n	800ea08 <_dtoa_r+0x698>
 800ede2:	2a00      	cmp	r2, #0
 800ede4:	dd07      	ble.n	800edf6 <_dtoa_r+0xa86>
 800ede6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800edea:	d0ed      	beq.n	800edc8 <_dtoa_r+0xa58>
 800edec:	9a00      	ldr	r2, [sp, #0]
 800edee:	f108 0301 	add.w	r3, r8, #1
 800edf2:	7013      	strb	r3, [r2, #0]
 800edf4:	e608      	b.n	800ea08 <_dtoa_r+0x698>
 800edf6:	9b07      	ldr	r3, [sp, #28]
 800edf8:	9a07      	ldr	r2, [sp, #28]
 800edfa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800edfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee00:	4293      	cmp	r3, r2
 800ee02:	d028      	beq.n	800ee56 <_dtoa_r+0xae6>
 800ee04:	4649      	mov	r1, r9
 800ee06:	2300      	movs	r3, #0
 800ee08:	220a      	movs	r2, #10
 800ee0a:	4658      	mov	r0, fp
 800ee0c:	f000 f9d6 	bl	800f1bc <__multadd>
 800ee10:	42af      	cmp	r7, r5
 800ee12:	4681      	mov	r9, r0
 800ee14:	f04f 0300 	mov.w	r3, #0
 800ee18:	f04f 020a 	mov.w	r2, #10
 800ee1c:	4639      	mov	r1, r7
 800ee1e:	4658      	mov	r0, fp
 800ee20:	d107      	bne.n	800ee32 <_dtoa_r+0xac2>
 800ee22:	f000 f9cb 	bl	800f1bc <__multadd>
 800ee26:	4607      	mov	r7, r0
 800ee28:	4605      	mov	r5, r0
 800ee2a:	9b07      	ldr	r3, [sp, #28]
 800ee2c:	3301      	adds	r3, #1
 800ee2e:	9307      	str	r3, [sp, #28]
 800ee30:	e774      	b.n	800ed1c <_dtoa_r+0x9ac>
 800ee32:	f000 f9c3 	bl	800f1bc <__multadd>
 800ee36:	4629      	mov	r1, r5
 800ee38:	4607      	mov	r7, r0
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	220a      	movs	r2, #10
 800ee3e:	4658      	mov	r0, fp
 800ee40:	f000 f9bc 	bl	800f1bc <__multadd>
 800ee44:	4605      	mov	r5, r0
 800ee46:	e7f0      	b.n	800ee2a <_dtoa_r+0xaba>
 800ee48:	9b00      	ldr	r3, [sp, #0]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	bfcc      	ite	gt
 800ee4e:	461e      	movgt	r6, r3
 800ee50:	2601      	movle	r6, #1
 800ee52:	4456      	add	r6, sl
 800ee54:	2700      	movs	r7, #0
 800ee56:	4649      	mov	r1, r9
 800ee58:	2201      	movs	r2, #1
 800ee5a:	4658      	mov	r0, fp
 800ee5c:	f000 fb5a 	bl	800f514 <__lshift>
 800ee60:	4621      	mov	r1, r4
 800ee62:	4681      	mov	r9, r0
 800ee64:	f000 fbc2 	bl	800f5ec <__mcmp>
 800ee68:	2800      	cmp	r0, #0
 800ee6a:	dcb0      	bgt.n	800edce <_dtoa_r+0xa5e>
 800ee6c:	d102      	bne.n	800ee74 <_dtoa_r+0xb04>
 800ee6e:	f018 0f01 	tst.w	r8, #1
 800ee72:	d1ac      	bne.n	800edce <_dtoa_r+0xa5e>
 800ee74:	4633      	mov	r3, r6
 800ee76:	461e      	mov	r6, r3
 800ee78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee7c:	2a30      	cmp	r2, #48	@ 0x30
 800ee7e:	d0fa      	beq.n	800ee76 <_dtoa_r+0xb06>
 800ee80:	e5c2      	b.n	800ea08 <_dtoa_r+0x698>
 800ee82:	459a      	cmp	sl, r3
 800ee84:	d1a4      	bne.n	800edd0 <_dtoa_r+0xa60>
 800ee86:	9b04      	ldr	r3, [sp, #16]
 800ee88:	3301      	adds	r3, #1
 800ee8a:	9304      	str	r3, [sp, #16]
 800ee8c:	2331      	movs	r3, #49	@ 0x31
 800ee8e:	f88a 3000 	strb.w	r3, [sl]
 800ee92:	e5b9      	b.n	800ea08 <_dtoa_r+0x698>
 800ee94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ee96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800eef4 <_dtoa_r+0xb84>
 800ee9a:	b11b      	cbz	r3, 800eea4 <_dtoa_r+0xb34>
 800ee9c:	f10a 0308 	add.w	r3, sl, #8
 800eea0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800eea2:	6013      	str	r3, [r2, #0]
 800eea4:	4650      	mov	r0, sl
 800eea6:	b019      	add	sp, #100	@ 0x64
 800eea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eeae:	2b01      	cmp	r3, #1
 800eeb0:	f77f ae37 	ble.w	800eb22 <_dtoa_r+0x7b2>
 800eeb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eeb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800eeb8:	2001      	movs	r0, #1
 800eeba:	e655      	b.n	800eb68 <_dtoa_r+0x7f8>
 800eebc:	9b00      	ldr	r3, [sp, #0]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	f77f aed6 	ble.w	800ec70 <_dtoa_r+0x900>
 800eec4:	4656      	mov	r6, sl
 800eec6:	4621      	mov	r1, r4
 800eec8:	4648      	mov	r0, r9
 800eeca:	f7ff f9c8 	bl	800e25e <quorem>
 800eece:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800eed2:	f806 8b01 	strb.w	r8, [r6], #1
 800eed6:	9b00      	ldr	r3, [sp, #0]
 800eed8:	eba6 020a 	sub.w	r2, r6, sl
 800eedc:	4293      	cmp	r3, r2
 800eede:	ddb3      	ble.n	800ee48 <_dtoa_r+0xad8>
 800eee0:	4649      	mov	r1, r9
 800eee2:	2300      	movs	r3, #0
 800eee4:	220a      	movs	r2, #10
 800eee6:	4658      	mov	r0, fp
 800eee8:	f000 f968 	bl	800f1bc <__multadd>
 800eeec:	4681      	mov	r9, r0
 800eeee:	e7ea      	b.n	800eec6 <_dtoa_r+0xb56>
 800eef0:	08012460 	.word	0x08012460
 800eef4:	080123e4 	.word	0x080123e4

0800eef8 <_free_r>:
 800eef8:	b538      	push	{r3, r4, r5, lr}
 800eefa:	4605      	mov	r5, r0
 800eefc:	2900      	cmp	r1, #0
 800eefe:	d041      	beq.n	800ef84 <_free_r+0x8c>
 800ef00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef04:	1f0c      	subs	r4, r1, #4
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	bfb8      	it	lt
 800ef0a:	18e4      	addlt	r4, r4, r3
 800ef0c:	f000 f8e8 	bl	800f0e0 <__malloc_lock>
 800ef10:	4a1d      	ldr	r2, [pc, #116]	@ (800ef88 <_free_r+0x90>)
 800ef12:	6813      	ldr	r3, [r2, #0]
 800ef14:	b933      	cbnz	r3, 800ef24 <_free_r+0x2c>
 800ef16:	6063      	str	r3, [r4, #4]
 800ef18:	6014      	str	r4, [r2, #0]
 800ef1a:	4628      	mov	r0, r5
 800ef1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef20:	f000 b8e4 	b.w	800f0ec <__malloc_unlock>
 800ef24:	42a3      	cmp	r3, r4
 800ef26:	d908      	bls.n	800ef3a <_free_r+0x42>
 800ef28:	6820      	ldr	r0, [r4, #0]
 800ef2a:	1821      	adds	r1, r4, r0
 800ef2c:	428b      	cmp	r3, r1
 800ef2e:	bf01      	itttt	eq
 800ef30:	6819      	ldreq	r1, [r3, #0]
 800ef32:	685b      	ldreq	r3, [r3, #4]
 800ef34:	1809      	addeq	r1, r1, r0
 800ef36:	6021      	streq	r1, [r4, #0]
 800ef38:	e7ed      	b.n	800ef16 <_free_r+0x1e>
 800ef3a:	461a      	mov	r2, r3
 800ef3c:	685b      	ldr	r3, [r3, #4]
 800ef3e:	b10b      	cbz	r3, 800ef44 <_free_r+0x4c>
 800ef40:	42a3      	cmp	r3, r4
 800ef42:	d9fa      	bls.n	800ef3a <_free_r+0x42>
 800ef44:	6811      	ldr	r1, [r2, #0]
 800ef46:	1850      	adds	r0, r2, r1
 800ef48:	42a0      	cmp	r0, r4
 800ef4a:	d10b      	bne.n	800ef64 <_free_r+0x6c>
 800ef4c:	6820      	ldr	r0, [r4, #0]
 800ef4e:	4401      	add	r1, r0
 800ef50:	1850      	adds	r0, r2, r1
 800ef52:	4283      	cmp	r3, r0
 800ef54:	6011      	str	r1, [r2, #0]
 800ef56:	d1e0      	bne.n	800ef1a <_free_r+0x22>
 800ef58:	6818      	ldr	r0, [r3, #0]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	6053      	str	r3, [r2, #4]
 800ef5e:	4408      	add	r0, r1
 800ef60:	6010      	str	r0, [r2, #0]
 800ef62:	e7da      	b.n	800ef1a <_free_r+0x22>
 800ef64:	d902      	bls.n	800ef6c <_free_r+0x74>
 800ef66:	230c      	movs	r3, #12
 800ef68:	602b      	str	r3, [r5, #0]
 800ef6a:	e7d6      	b.n	800ef1a <_free_r+0x22>
 800ef6c:	6820      	ldr	r0, [r4, #0]
 800ef6e:	1821      	adds	r1, r4, r0
 800ef70:	428b      	cmp	r3, r1
 800ef72:	bf04      	itt	eq
 800ef74:	6819      	ldreq	r1, [r3, #0]
 800ef76:	685b      	ldreq	r3, [r3, #4]
 800ef78:	6063      	str	r3, [r4, #4]
 800ef7a:	bf04      	itt	eq
 800ef7c:	1809      	addeq	r1, r1, r0
 800ef7e:	6021      	streq	r1, [r4, #0]
 800ef80:	6054      	str	r4, [r2, #4]
 800ef82:	e7ca      	b.n	800ef1a <_free_r+0x22>
 800ef84:	bd38      	pop	{r3, r4, r5, pc}
 800ef86:	bf00      	nop
 800ef88:	200054b4 	.word	0x200054b4

0800ef8c <malloc>:
 800ef8c:	4b02      	ldr	r3, [pc, #8]	@ (800ef98 <malloc+0xc>)
 800ef8e:	4601      	mov	r1, r0
 800ef90:	6818      	ldr	r0, [r3, #0]
 800ef92:	f000 b825 	b.w	800efe0 <_malloc_r>
 800ef96:	bf00      	nop
 800ef98:	20000038 	.word	0x20000038

0800ef9c <sbrk_aligned>:
 800ef9c:	b570      	push	{r4, r5, r6, lr}
 800ef9e:	4e0f      	ldr	r6, [pc, #60]	@ (800efdc <sbrk_aligned+0x40>)
 800efa0:	460c      	mov	r4, r1
 800efa2:	6831      	ldr	r1, [r6, #0]
 800efa4:	4605      	mov	r5, r0
 800efa6:	b911      	cbnz	r1, 800efae <sbrk_aligned+0x12>
 800efa8:	f000 fe46 	bl	800fc38 <_sbrk_r>
 800efac:	6030      	str	r0, [r6, #0]
 800efae:	4621      	mov	r1, r4
 800efb0:	4628      	mov	r0, r5
 800efb2:	f000 fe41 	bl	800fc38 <_sbrk_r>
 800efb6:	1c43      	adds	r3, r0, #1
 800efb8:	d103      	bne.n	800efc2 <sbrk_aligned+0x26>
 800efba:	f04f 34ff 	mov.w	r4, #4294967295
 800efbe:	4620      	mov	r0, r4
 800efc0:	bd70      	pop	{r4, r5, r6, pc}
 800efc2:	1cc4      	adds	r4, r0, #3
 800efc4:	f024 0403 	bic.w	r4, r4, #3
 800efc8:	42a0      	cmp	r0, r4
 800efca:	d0f8      	beq.n	800efbe <sbrk_aligned+0x22>
 800efcc:	1a21      	subs	r1, r4, r0
 800efce:	4628      	mov	r0, r5
 800efd0:	f000 fe32 	bl	800fc38 <_sbrk_r>
 800efd4:	3001      	adds	r0, #1
 800efd6:	d1f2      	bne.n	800efbe <sbrk_aligned+0x22>
 800efd8:	e7ef      	b.n	800efba <sbrk_aligned+0x1e>
 800efda:	bf00      	nop
 800efdc:	200054b0 	.word	0x200054b0

0800efe0 <_malloc_r>:
 800efe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efe4:	1ccd      	adds	r5, r1, #3
 800efe6:	f025 0503 	bic.w	r5, r5, #3
 800efea:	3508      	adds	r5, #8
 800efec:	2d0c      	cmp	r5, #12
 800efee:	bf38      	it	cc
 800eff0:	250c      	movcc	r5, #12
 800eff2:	2d00      	cmp	r5, #0
 800eff4:	4606      	mov	r6, r0
 800eff6:	db01      	blt.n	800effc <_malloc_r+0x1c>
 800eff8:	42a9      	cmp	r1, r5
 800effa:	d904      	bls.n	800f006 <_malloc_r+0x26>
 800effc:	230c      	movs	r3, #12
 800effe:	6033      	str	r3, [r6, #0]
 800f000:	2000      	movs	r0, #0
 800f002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f006:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f0dc <_malloc_r+0xfc>
 800f00a:	f000 f869 	bl	800f0e0 <__malloc_lock>
 800f00e:	f8d8 3000 	ldr.w	r3, [r8]
 800f012:	461c      	mov	r4, r3
 800f014:	bb44      	cbnz	r4, 800f068 <_malloc_r+0x88>
 800f016:	4629      	mov	r1, r5
 800f018:	4630      	mov	r0, r6
 800f01a:	f7ff ffbf 	bl	800ef9c <sbrk_aligned>
 800f01e:	1c43      	adds	r3, r0, #1
 800f020:	4604      	mov	r4, r0
 800f022:	d158      	bne.n	800f0d6 <_malloc_r+0xf6>
 800f024:	f8d8 4000 	ldr.w	r4, [r8]
 800f028:	4627      	mov	r7, r4
 800f02a:	2f00      	cmp	r7, #0
 800f02c:	d143      	bne.n	800f0b6 <_malloc_r+0xd6>
 800f02e:	2c00      	cmp	r4, #0
 800f030:	d04b      	beq.n	800f0ca <_malloc_r+0xea>
 800f032:	6823      	ldr	r3, [r4, #0]
 800f034:	4639      	mov	r1, r7
 800f036:	4630      	mov	r0, r6
 800f038:	eb04 0903 	add.w	r9, r4, r3
 800f03c:	f000 fdfc 	bl	800fc38 <_sbrk_r>
 800f040:	4581      	cmp	r9, r0
 800f042:	d142      	bne.n	800f0ca <_malloc_r+0xea>
 800f044:	6821      	ldr	r1, [r4, #0]
 800f046:	1a6d      	subs	r5, r5, r1
 800f048:	4629      	mov	r1, r5
 800f04a:	4630      	mov	r0, r6
 800f04c:	f7ff ffa6 	bl	800ef9c <sbrk_aligned>
 800f050:	3001      	adds	r0, #1
 800f052:	d03a      	beq.n	800f0ca <_malloc_r+0xea>
 800f054:	6823      	ldr	r3, [r4, #0]
 800f056:	442b      	add	r3, r5
 800f058:	6023      	str	r3, [r4, #0]
 800f05a:	f8d8 3000 	ldr.w	r3, [r8]
 800f05e:	685a      	ldr	r2, [r3, #4]
 800f060:	bb62      	cbnz	r2, 800f0bc <_malloc_r+0xdc>
 800f062:	f8c8 7000 	str.w	r7, [r8]
 800f066:	e00f      	b.n	800f088 <_malloc_r+0xa8>
 800f068:	6822      	ldr	r2, [r4, #0]
 800f06a:	1b52      	subs	r2, r2, r5
 800f06c:	d420      	bmi.n	800f0b0 <_malloc_r+0xd0>
 800f06e:	2a0b      	cmp	r2, #11
 800f070:	d917      	bls.n	800f0a2 <_malloc_r+0xc2>
 800f072:	1961      	adds	r1, r4, r5
 800f074:	42a3      	cmp	r3, r4
 800f076:	6025      	str	r5, [r4, #0]
 800f078:	bf18      	it	ne
 800f07a:	6059      	strne	r1, [r3, #4]
 800f07c:	6863      	ldr	r3, [r4, #4]
 800f07e:	bf08      	it	eq
 800f080:	f8c8 1000 	streq.w	r1, [r8]
 800f084:	5162      	str	r2, [r4, r5]
 800f086:	604b      	str	r3, [r1, #4]
 800f088:	4630      	mov	r0, r6
 800f08a:	f000 f82f 	bl	800f0ec <__malloc_unlock>
 800f08e:	f104 000b 	add.w	r0, r4, #11
 800f092:	1d23      	adds	r3, r4, #4
 800f094:	f020 0007 	bic.w	r0, r0, #7
 800f098:	1ac2      	subs	r2, r0, r3
 800f09a:	bf1c      	itt	ne
 800f09c:	1a1b      	subne	r3, r3, r0
 800f09e:	50a3      	strne	r3, [r4, r2]
 800f0a0:	e7af      	b.n	800f002 <_malloc_r+0x22>
 800f0a2:	6862      	ldr	r2, [r4, #4]
 800f0a4:	42a3      	cmp	r3, r4
 800f0a6:	bf0c      	ite	eq
 800f0a8:	f8c8 2000 	streq.w	r2, [r8]
 800f0ac:	605a      	strne	r2, [r3, #4]
 800f0ae:	e7eb      	b.n	800f088 <_malloc_r+0xa8>
 800f0b0:	4623      	mov	r3, r4
 800f0b2:	6864      	ldr	r4, [r4, #4]
 800f0b4:	e7ae      	b.n	800f014 <_malloc_r+0x34>
 800f0b6:	463c      	mov	r4, r7
 800f0b8:	687f      	ldr	r7, [r7, #4]
 800f0ba:	e7b6      	b.n	800f02a <_malloc_r+0x4a>
 800f0bc:	461a      	mov	r2, r3
 800f0be:	685b      	ldr	r3, [r3, #4]
 800f0c0:	42a3      	cmp	r3, r4
 800f0c2:	d1fb      	bne.n	800f0bc <_malloc_r+0xdc>
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	6053      	str	r3, [r2, #4]
 800f0c8:	e7de      	b.n	800f088 <_malloc_r+0xa8>
 800f0ca:	230c      	movs	r3, #12
 800f0cc:	6033      	str	r3, [r6, #0]
 800f0ce:	4630      	mov	r0, r6
 800f0d0:	f000 f80c 	bl	800f0ec <__malloc_unlock>
 800f0d4:	e794      	b.n	800f000 <_malloc_r+0x20>
 800f0d6:	6005      	str	r5, [r0, #0]
 800f0d8:	e7d6      	b.n	800f088 <_malloc_r+0xa8>
 800f0da:	bf00      	nop
 800f0dc:	200054b4 	.word	0x200054b4

0800f0e0 <__malloc_lock>:
 800f0e0:	4801      	ldr	r0, [pc, #4]	@ (800f0e8 <__malloc_lock+0x8>)
 800f0e2:	f7ff b8ac 	b.w	800e23e <__retarget_lock_acquire_recursive>
 800f0e6:	bf00      	nop
 800f0e8:	200054ac 	.word	0x200054ac

0800f0ec <__malloc_unlock>:
 800f0ec:	4801      	ldr	r0, [pc, #4]	@ (800f0f4 <__malloc_unlock+0x8>)
 800f0ee:	f7ff b8a7 	b.w	800e240 <__retarget_lock_release_recursive>
 800f0f2:	bf00      	nop
 800f0f4:	200054ac 	.word	0x200054ac

0800f0f8 <_Balloc>:
 800f0f8:	b570      	push	{r4, r5, r6, lr}
 800f0fa:	69c6      	ldr	r6, [r0, #28]
 800f0fc:	4604      	mov	r4, r0
 800f0fe:	460d      	mov	r5, r1
 800f100:	b976      	cbnz	r6, 800f120 <_Balloc+0x28>
 800f102:	2010      	movs	r0, #16
 800f104:	f7ff ff42 	bl	800ef8c <malloc>
 800f108:	4602      	mov	r2, r0
 800f10a:	61e0      	str	r0, [r4, #28]
 800f10c:	b920      	cbnz	r0, 800f118 <_Balloc+0x20>
 800f10e:	4b18      	ldr	r3, [pc, #96]	@ (800f170 <_Balloc+0x78>)
 800f110:	4818      	ldr	r0, [pc, #96]	@ (800f174 <_Balloc+0x7c>)
 800f112:	216b      	movs	r1, #107	@ 0x6b
 800f114:	f000 fda0 	bl	800fc58 <__assert_func>
 800f118:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f11c:	6006      	str	r6, [r0, #0]
 800f11e:	60c6      	str	r6, [r0, #12]
 800f120:	69e6      	ldr	r6, [r4, #28]
 800f122:	68f3      	ldr	r3, [r6, #12]
 800f124:	b183      	cbz	r3, 800f148 <_Balloc+0x50>
 800f126:	69e3      	ldr	r3, [r4, #28]
 800f128:	68db      	ldr	r3, [r3, #12]
 800f12a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f12e:	b9b8      	cbnz	r0, 800f160 <_Balloc+0x68>
 800f130:	2101      	movs	r1, #1
 800f132:	fa01 f605 	lsl.w	r6, r1, r5
 800f136:	1d72      	adds	r2, r6, #5
 800f138:	0092      	lsls	r2, r2, #2
 800f13a:	4620      	mov	r0, r4
 800f13c:	f000 fdaa 	bl	800fc94 <_calloc_r>
 800f140:	b160      	cbz	r0, 800f15c <_Balloc+0x64>
 800f142:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f146:	e00e      	b.n	800f166 <_Balloc+0x6e>
 800f148:	2221      	movs	r2, #33	@ 0x21
 800f14a:	2104      	movs	r1, #4
 800f14c:	4620      	mov	r0, r4
 800f14e:	f000 fda1 	bl	800fc94 <_calloc_r>
 800f152:	69e3      	ldr	r3, [r4, #28]
 800f154:	60f0      	str	r0, [r6, #12]
 800f156:	68db      	ldr	r3, [r3, #12]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d1e4      	bne.n	800f126 <_Balloc+0x2e>
 800f15c:	2000      	movs	r0, #0
 800f15e:	bd70      	pop	{r4, r5, r6, pc}
 800f160:	6802      	ldr	r2, [r0, #0]
 800f162:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f166:	2300      	movs	r3, #0
 800f168:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f16c:	e7f7      	b.n	800f15e <_Balloc+0x66>
 800f16e:	bf00      	nop
 800f170:	080123f1 	.word	0x080123f1
 800f174:	08012471 	.word	0x08012471

0800f178 <_Bfree>:
 800f178:	b570      	push	{r4, r5, r6, lr}
 800f17a:	69c6      	ldr	r6, [r0, #28]
 800f17c:	4605      	mov	r5, r0
 800f17e:	460c      	mov	r4, r1
 800f180:	b976      	cbnz	r6, 800f1a0 <_Bfree+0x28>
 800f182:	2010      	movs	r0, #16
 800f184:	f7ff ff02 	bl	800ef8c <malloc>
 800f188:	4602      	mov	r2, r0
 800f18a:	61e8      	str	r0, [r5, #28]
 800f18c:	b920      	cbnz	r0, 800f198 <_Bfree+0x20>
 800f18e:	4b09      	ldr	r3, [pc, #36]	@ (800f1b4 <_Bfree+0x3c>)
 800f190:	4809      	ldr	r0, [pc, #36]	@ (800f1b8 <_Bfree+0x40>)
 800f192:	218f      	movs	r1, #143	@ 0x8f
 800f194:	f000 fd60 	bl	800fc58 <__assert_func>
 800f198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f19c:	6006      	str	r6, [r0, #0]
 800f19e:	60c6      	str	r6, [r0, #12]
 800f1a0:	b13c      	cbz	r4, 800f1b2 <_Bfree+0x3a>
 800f1a2:	69eb      	ldr	r3, [r5, #28]
 800f1a4:	6862      	ldr	r2, [r4, #4]
 800f1a6:	68db      	ldr	r3, [r3, #12]
 800f1a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f1ac:	6021      	str	r1, [r4, #0]
 800f1ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f1b2:	bd70      	pop	{r4, r5, r6, pc}
 800f1b4:	080123f1 	.word	0x080123f1
 800f1b8:	08012471 	.word	0x08012471

0800f1bc <__multadd>:
 800f1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1c0:	690d      	ldr	r5, [r1, #16]
 800f1c2:	4607      	mov	r7, r0
 800f1c4:	460c      	mov	r4, r1
 800f1c6:	461e      	mov	r6, r3
 800f1c8:	f101 0c14 	add.w	ip, r1, #20
 800f1cc:	2000      	movs	r0, #0
 800f1ce:	f8dc 3000 	ldr.w	r3, [ip]
 800f1d2:	b299      	uxth	r1, r3
 800f1d4:	fb02 6101 	mla	r1, r2, r1, r6
 800f1d8:	0c1e      	lsrs	r6, r3, #16
 800f1da:	0c0b      	lsrs	r3, r1, #16
 800f1dc:	fb02 3306 	mla	r3, r2, r6, r3
 800f1e0:	b289      	uxth	r1, r1
 800f1e2:	3001      	adds	r0, #1
 800f1e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f1e8:	4285      	cmp	r5, r0
 800f1ea:	f84c 1b04 	str.w	r1, [ip], #4
 800f1ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f1f2:	dcec      	bgt.n	800f1ce <__multadd+0x12>
 800f1f4:	b30e      	cbz	r6, 800f23a <__multadd+0x7e>
 800f1f6:	68a3      	ldr	r3, [r4, #8]
 800f1f8:	42ab      	cmp	r3, r5
 800f1fa:	dc19      	bgt.n	800f230 <__multadd+0x74>
 800f1fc:	6861      	ldr	r1, [r4, #4]
 800f1fe:	4638      	mov	r0, r7
 800f200:	3101      	adds	r1, #1
 800f202:	f7ff ff79 	bl	800f0f8 <_Balloc>
 800f206:	4680      	mov	r8, r0
 800f208:	b928      	cbnz	r0, 800f216 <__multadd+0x5a>
 800f20a:	4602      	mov	r2, r0
 800f20c:	4b0c      	ldr	r3, [pc, #48]	@ (800f240 <__multadd+0x84>)
 800f20e:	480d      	ldr	r0, [pc, #52]	@ (800f244 <__multadd+0x88>)
 800f210:	21ba      	movs	r1, #186	@ 0xba
 800f212:	f000 fd21 	bl	800fc58 <__assert_func>
 800f216:	6922      	ldr	r2, [r4, #16]
 800f218:	3202      	adds	r2, #2
 800f21a:	f104 010c 	add.w	r1, r4, #12
 800f21e:	0092      	lsls	r2, r2, #2
 800f220:	300c      	adds	r0, #12
 800f222:	f7ff f80e 	bl	800e242 <memcpy>
 800f226:	4621      	mov	r1, r4
 800f228:	4638      	mov	r0, r7
 800f22a:	f7ff ffa5 	bl	800f178 <_Bfree>
 800f22e:	4644      	mov	r4, r8
 800f230:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f234:	3501      	adds	r5, #1
 800f236:	615e      	str	r6, [r3, #20]
 800f238:	6125      	str	r5, [r4, #16]
 800f23a:	4620      	mov	r0, r4
 800f23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f240:	08012460 	.word	0x08012460
 800f244:	08012471 	.word	0x08012471

0800f248 <__hi0bits>:
 800f248:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f24c:	4603      	mov	r3, r0
 800f24e:	bf36      	itet	cc
 800f250:	0403      	lslcc	r3, r0, #16
 800f252:	2000      	movcs	r0, #0
 800f254:	2010      	movcc	r0, #16
 800f256:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f25a:	bf3c      	itt	cc
 800f25c:	021b      	lslcc	r3, r3, #8
 800f25e:	3008      	addcc	r0, #8
 800f260:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f264:	bf3c      	itt	cc
 800f266:	011b      	lslcc	r3, r3, #4
 800f268:	3004      	addcc	r0, #4
 800f26a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f26e:	bf3c      	itt	cc
 800f270:	009b      	lslcc	r3, r3, #2
 800f272:	3002      	addcc	r0, #2
 800f274:	2b00      	cmp	r3, #0
 800f276:	db05      	blt.n	800f284 <__hi0bits+0x3c>
 800f278:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f27c:	f100 0001 	add.w	r0, r0, #1
 800f280:	bf08      	it	eq
 800f282:	2020      	moveq	r0, #32
 800f284:	4770      	bx	lr

0800f286 <__lo0bits>:
 800f286:	6803      	ldr	r3, [r0, #0]
 800f288:	4602      	mov	r2, r0
 800f28a:	f013 0007 	ands.w	r0, r3, #7
 800f28e:	d00b      	beq.n	800f2a8 <__lo0bits+0x22>
 800f290:	07d9      	lsls	r1, r3, #31
 800f292:	d421      	bmi.n	800f2d8 <__lo0bits+0x52>
 800f294:	0798      	lsls	r0, r3, #30
 800f296:	bf49      	itett	mi
 800f298:	085b      	lsrmi	r3, r3, #1
 800f29a:	089b      	lsrpl	r3, r3, #2
 800f29c:	2001      	movmi	r0, #1
 800f29e:	6013      	strmi	r3, [r2, #0]
 800f2a0:	bf5c      	itt	pl
 800f2a2:	6013      	strpl	r3, [r2, #0]
 800f2a4:	2002      	movpl	r0, #2
 800f2a6:	4770      	bx	lr
 800f2a8:	b299      	uxth	r1, r3
 800f2aa:	b909      	cbnz	r1, 800f2b0 <__lo0bits+0x2a>
 800f2ac:	0c1b      	lsrs	r3, r3, #16
 800f2ae:	2010      	movs	r0, #16
 800f2b0:	b2d9      	uxtb	r1, r3
 800f2b2:	b909      	cbnz	r1, 800f2b8 <__lo0bits+0x32>
 800f2b4:	3008      	adds	r0, #8
 800f2b6:	0a1b      	lsrs	r3, r3, #8
 800f2b8:	0719      	lsls	r1, r3, #28
 800f2ba:	bf04      	itt	eq
 800f2bc:	091b      	lsreq	r3, r3, #4
 800f2be:	3004      	addeq	r0, #4
 800f2c0:	0799      	lsls	r1, r3, #30
 800f2c2:	bf04      	itt	eq
 800f2c4:	089b      	lsreq	r3, r3, #2
 800f2c6:	3002      	addeq	r0, #2
 800f2c8:	07d9      	lsls	r1, r3, #31
 800f2ca:	d403      	bmi.n	800f2d4 <__lo0bits+0x4e>
 800f2cc:	085b      	lsrs	r3, r3, #1
 800f2ce:	f100 0001 	add.w	r0, r0, #1
 800f2d2:	d003      	beq.n	800f2dc <__lo0bits+0x56>
 800f2d4:	6013      	str	r3, [r2, #0]
 800f2d6:	4770      	bx	lr
 800f2d8:	2000      	movs	r0, #0
 800f2da:	4770      	bx	lr
 800f2dc:	2020      	movs	r0, #32
 800f2de:	4770      	bx	lr

0800f2e0 <__i2b>:
 800f2e0:	b510      	push	{r4, lr}
 800f2e2:	460c      	mov	r4, r1
 800f2e4:	2101      	movs	r1, #1
 800f2e6:	f7ff ff07 	bl	800f0f8 <_Balloc>
 800f2ea:	4602      	mov	r2, r0
 800f2ec:	b928      	cbnz	r0, 800f2fa <__i2b+0x1a>
 800f2ee:	4b05      	ldr	r3, [pc, #20]	@ (800f304 <__i2b+0x24>)
 800f2f0:	4805      	ldr	r0, [pc, #20]	@ (800f308 <__i2b+0x28>)
 800f2f2:	f240 1145 	movw	r1, #325	@ 0x145
 800f2f6:	f000 fcaf 	bl	800fc58 <__assert_func>
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	6144      	str	r4, [r0, #20]
 800f2fe:	6103      	str	r3, [r0, #16]
 800f300:	bd10      	pop	{r4, pc}
 800f302:	bf00      	nop
 800f304:	08012460 	.word	0x08012460
 800f308:	08012471 	.word	0x08012471

0800f30c <__multiply>:
 800f30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f310:	4614      	mov	r4, r2
 800f312:	690a      	ldr	r2, [r1, #16]
 800f314:	6923      	ldr	r3, [r4, #16]
 800f316:	429a      	cmp	r2, r3
 800f318:	bfa8      	it	ge
 800f31a:	4623      	movge	r3, r4
 800f31c:	460f      	mov	r7, r1
 800f31e:	bfa4      	itt	ge
 800f320:	460c      	movge	r4, r1
 800f322:	461f      	movge	r7, r3
 800f324:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f328:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f32c:	68a3      	ldr	r3, [r4, #8]
 800f32e:	6861      	ldr	r1, [r4, #4]
 800f330:	eb0a 0609 	add.w	r6, sl, r9
 800f334:	42b3      	cmp	r3, r6
 800f336:	b085      	sub	sp, #20
 800f338:	bfb8      	it	lt
 800f33a:	3101      	addlt	r1, #1
 800f33c:	f7ff fedc 	bl	800f0f8 <_Balloc>
 800f340:	b930      	cbnz	r0, 800f350 <__multiply+0x44>
 800f342:	4602      	mov	r2, r0
 800f344:	4b44      	ldr	r3, [pc, #272]	@ (800f458 <__multiply+0x14c>)
 800f346:	4845      	ldr	r0, [pc, #276]	@ (800f45c <__multiply+0x150>)
 800f348:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f34c:	f000 fc84 	bl	800fc58 <__assert_func>
 800f350:	f100 0514 	add.w	r5, r0, #20
 800f354:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f358:	462b      	mov	r3, r5
 800f35a:	2200      	movs	r2, #0
 800f35c:	4543      	cmp	r3, r8
 800f35e:	d321      	bcc.n	800f3a4 <__multiply+0x98>
 800f360:	f107 0114 	add.w	r1, r7, #20
 800f364:	f104 0214 	add.w	r2, r4, #20
 800f368:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f36c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f370:	9302      	str	r3, [sp, #8]
 800f372:	1b13      	subs	r3, r2, r4
 800f374:	3b15      	subs	r3, #21
 800f376:	f023 0303 	bic.w	r3, r3, #3
 800f37a:	3304      	adds	r3, #4
 800f37c:	f104 0715 	add.w	r7, r4, #21
 800f380:	42ba      	cmp	r2, r7
 800f382:	bf38      	it	cc
 800f384:	2304      	movcc	r3, #4
 800f386:	9301      	str	r3, [sp, #4]
 800f388:	9b02      	ldr	r3, [sp, #8]
 800f38a:	9103      	str	r1, [sp, #12]
 800f38c:	428b      	cmp	r3, r1
 800f38e:	d80c      	bhi.n	800f3aa <__multiply+0x9e>
 800f390:	2e00      	cmp	r6, #0
 800f392:	dd03      	ble.n	800f39c <__multiply+0x90>
 800f394:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d05b      	beq.n	800f454 <__multiply+0x148>
 800f39c:	6106      	str	r6, [r0, #16]
 800f39e:	b005      	add	sp, #20
 800f3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3a4:	f843 2b04 	str.w	r2, [r3], #4
 800f3a8:	e7d8      	b.n	800f35c <__multiply+0x50>
 800f3aa:	f8b1 a000 	ldrh.w	sl, [r1]
 800f3ae:	f1ba 0f00 	cmp.w	sl, #0
 800f3b2:	d024      	beq.n	800f3fe <__multiply+0xf2>
 800f3b4:	f104 0e14 	add.w	lr, r4, #20
 800f3b8:	46a9      	mov	r9, r5
 800f3ba:	f04f 0c00 	mov.w	ip, #0
 800f3be:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f3c2:	f8d9 3000 	ldr.w	r3, [r9]
 800f3c6:	fa1f fb87 	uxth.w	fp, r7
 800f3ca:	b29b      	uxth	r3, r3
 800f3cc:	fb0a 330b 	mla	r3, sl, fp, r3
 800f3d0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f3d4:	f8d9 7000 	ldr.w	r7, [r9]
 800f3d8:	4463      	add	r3, ip
 800f3da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f3de:	fb0a c70b 	mla	r7, sl, fp, ip
 800f3e2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f3e6:	b29b      	uxth	r3, r3
 800f3e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f3ec:	4572      	cmp	r2, lr
 800f3ee:	f849 3b04 	str.w	r3, [r9], #4
 800f3f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f3f6:	d8e2      	bhi.n	800f3be <__multiply+0xb2>
 800f3f8:	9b01      	ldr	r3, [sp, #4]
 800f3fa:	f845 c003 	str.w	ip, [r5, r3]
 800f3fe:	9b03      	ldr	r3, [sp, #12]
 800f400:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f404:	3104      	adds	r1, #4
 800f406:	f1b9 0f00 	cmp.w	r9, #0
 800f40a:	d021      	beq.n	800f450 <__multiply+0x144>
 800f40c:	682b      	ldr	r3, [r5, #0]
 800f40e:	f104 0c14 	add.w	ip, r4, #20
 800f412:	46ae      	mov	lr, r5
 800f414:	f04f 0a00 	mov.w	sl, #0
 800f418:	f8bc b000 	ldrh.w	fp, [ip]
 800f41c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f420:	fb09 770b 	mla	r7, r9, fp, r7
 800f424:	4457      	add	r7, sl
 800f426:	b29b      	uxth	r3, r3
 800f428:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f42c:	f84e 3b04 	str.w	r3, [lr], #4
 800f430:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f434:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f438:	f8be 3000 	ldrh.w	r3, [lr]
 800f43c:	fb09 330a 	mla	r3, r9, sl, r3
 800f440:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f444:	4562      	cmp	r2, ip
 800f446:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f44a:	d8e5      	bhi.n	800f418 <__multiply+0x10c>
 800f44c:	9f01      	ldr	r7, [sp, #4]
 800f44e:	51eb      	str	r3, [r5, r7]
 800f450:	3504      	adds	r5, #4
 800f452:	e799      	b.n	800f388 <__multiply+0x7c>
 800f454:	3e01      	subs	r6, #1
 800f456:	e79b      	b.n	800f390 <__multiply+0x84>
 800f458:	08012460 	.word	0x08012460
 800f45c:	08012471 	.word	0x08012471

0800f460 <__pow5mult>:
 800f460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f464:	4615      	mov	r5, r2
 800f466:	f012 0203 	ands.w	r2, r2, #3
 800f46a:	4607      	mov	r7, r0
 800f46c:	460e      	mov	r6, r1
 800f46e:	d007      	beq.n	800f480 <__pow5mult+0x20>
 800f470:	4c25      	ldr	r4, [pc, #148]	@ (800f508 <__pow5mult+0xa8>)
 800f472:	3a01      	subs	r2, #1
 800f474:	2300      	movs	r3, #0
 800f476:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f47a:	f7ff fe9f 	bl	800f1bc <__multadd>
 800f47e:	4606      	mov	r6, r0
 800f480:	10ad      	asrs	r5, r5, #2
 800f482:	d03d      	beq.n	800f500 <__pow5mult+0xa0>
 800f484:	69fc      	ldr	r4, [r7, #28]
 800f486:	b97c      	cbnz	r4, 800f4a8 <__pow5mult+0x48>
 800f488:	2010      	movs	r0, #16
 800f48a:	f7ff fd7f 	bl	800ef8c <malloc>
 800f48e:	4602      	mov	r2, r0
 800f490:	61f8      	str	r0, [r7, #28]
 800f492:	b928      	cbnz	r0, 800f4a0 <__pow5mult+0x40>
 800f494:	4b1d      	ldr	r3, [pc, #116]	@ (800f50c <__pow5mult+0xac>)
 800f496:	481e      	ldr	r0, [pc, #120]	@ (800f510 <__pow5mult+0xb0>)
 800f498:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f49c:	f000 fbdc 	bl	800fc58 <__assert_func>
 800f4a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f4a4:	6004      	str	r4, [r0, #0]
 800f4a6:	60c4      	str	r4, [r0, #12]
 800f4a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f4ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f4b0:	b94c      	cbnz	r4, 800f4c6 <__pow5mult+0x66>
 800f4b2:	f240 2171 	movw	r1, #625	@ 0x271
 800f4b6:	4638      	mov	r0, r7
 800f4b8:	f7ff ff12 	bl	800f2e0 <__i2b>
 800f4bc:	2300      	movs	r3, #0
 800f4be:	f8c8 0008 	str.w	r0, [r8, #8]
 800f4c2:	4604      	mov	r4, r0
 800f4c4:	6003      	str	r3, [r0, #0]
 800f4c6:	f04f 0900 	mov.w	r9, #0
 800f4ca:	07eb      	lsls	r3, r5, #31
 800f4cc:	d50a      	bpl.n	800f4e4 <__pow5mult+0x84>
 800f4ce:	4631      	mov	r1, r6
 800f4d0:	4622      	mov	r2, r4
 800f4d2:	4638      	mov	r0, r7
 800f4d4:	f7ff ff1a 	bl	800f30c <__multiply>
 800f4d8:	4631      	mov	r1, r6
 800f4da:	4680      	mov	r8, r0
 800f4dc:	4638      	mov	r0, r7
 800f4de:	f7ff fe4b 	bl	800f178 <_Bfree>
 800f4e2:	4646      	mov	r6, r8
 800f4e4:	106d      	asrs	r5, r5, #1
 800f4e6:	d00b      	beq.n	800f500 <__pow5mult+0xa0>
 800f4e8:	6820      	ldr	r0, [r4, #0]
 800f4ea:	b938      	cbnz	r0, 800f4fc <__pow5mult+0x9c>
 800f4ec:	4622      	mov	r2, r4
 800f4ee:	4621      	mov	r1, r4
 800f4f0:	4638      	mov	r0, r7
 800f4f2:	f7ff ff0b 	bl	800f30c <__multiply>
 800f4f6:	6020      	str	r0, [r4, #0]
 800f4f8:	f8c0 9000 	str.w	r9, [r0]
 800f4fc:	4604      	mov	r4, r0
 800f4fe:	e7e4      	b.n	800f4ca <__pow5mult+0x6a>
 800f500:	4630      	mov	r0, r6
 800f502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f506:	bf00      	nop
 800f508:	080124cc 	.word	0x080124cc
 800f50c:	080123f1 	.word	0x080123f1
 800f510:	08012471 	.word	0x08012471

0800f514 <__lshift>:
 800f514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f518:	460c      	mov	r4, r1
 800f51a:	6849      	ldr	r1, [r1, #4]
 800f51c:	6923      	ldr	r3, [r4, #16]
 800f51e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f522:	68a3      	ldr	r3, [r4, #8]
 800f524:	4607      	mov	r7, r0
 800f526:	4691      	mov	r9, r2
 800f528:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f52c:	f108 0601 	add.w	r6, r8, #1
 800f530:	42b3      	cmp	r3, r6
 800f532:	db0b      	blt.n	800f54c <__lshift+0x38>
 800f534:	4638      	mov	r0, r7
 800f536:	f7ff fddf 	bl	800f0f8 <_Balloc>
 800f53a:	4605      	mov	r5, r0
 800f53c:	b948      	cbnz	r0, 800f552 <__lshift+0x3e>
 800f53e:	4602      	mov	r2, r0
 800f540:	4b28      	ldr	r3, [pc, #160]	@ (800f5e4 <__lshift+0xd0>)
 800f542:	4829      	ldr	r0, [pc, #164]	@ (800f5e8 <__lshift+0xd4>)
 800f544:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f548:	f000 fb86 	bl	800fc58 <__assert_func>
 800f54c:	3101      	adds	r1, #1
 800f54e:	005b      	lsls	r3, r3, #1
 800f550:	e7ee      	b.n	800f530 <__lshift+0x1c>
 800f552:	2300      	movs	r3, #0
 800f554:	f100 0114 	add.w	r1, r0, #20
 800f558:	f100 0210 	add.w	r2, r0, #16
 800f55c:	4618      	mov	r0, r3
 800f55e:	4553      	cmp	r3, sl
 800f560:	db33      	blt.n	800f5ca <__lshift+0xb6>
 800f562:	6920      	ldr	r0, [r4, #16]
 800f564:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f568:	f104 0314 	add.w	r3, r4, #20
 800f56c:	f019 091f 	ands.w	r9, r9, #31
 800f570:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f574:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f578:	d02b      	beq.n	800f5d2 <__lshift+0xbe>
 800f57a:	f1c9 0e20 	rsb	lr, r9, #32
 800f57e:	468a      	mov	sl, r1
 800f580:	2200      	movs	r2, #0
 800f582:	6818      	ldr	r0, [r3, #0]
 800f584:	fa00 f009 	lsl.w	r0, r0, r9
 800f588:	4310      	orrs	r0, r2
 800f58a:	f84a 0b04 	str.w	r0, [sl], #4
 800f58e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f592:	459c      	cmp	ip, r3
 800f594:	fa22 f20e 	lsr.w	r2, r2, lr
 800f598:	d8f3      	bhi.n	800f582 <__lshift+0x6e>
 800f59a:	ebac 0304 	sub.w	r3, ip, r4
 800f59e:	3b15      	subs	r3, #21
 800f5a0:	f023 0303 	bic.w	r3, r3, #3
 800f5a4:	3304      	adds	r3, #4
 800f5a6:	f104 0015 	add.w	r0, r4, #21
 800f5aa:	4584      	cmp	ip, r0
 800f5ac:	bf38      	it	cc
 800f5ae:	2304      	movcc	r3, #4
 800f5b0:	50ca      	str	r2, [r1, r3]
 800f5b2:	b10a      	cbz	r2, 800f5b8 <__lshift+0xa4>
 800f5b4:	f108 0602 	add.w	r6, r8, #2
 800f5b8:	3e01      	subs	r6, #1
 800f5ba:	4638      	mov	r0, r7
 800f5bc:	612e      	str	r6, [r5, #16]
 800f5be:	4621      	mov	r1, r4
 800f5c0:	f7ff fdda 	bl	800f178 <_Bfree>
 800f5c4:	4628      	mov	r0, r5
 800f5c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	e7c5      	b.n	800f55e <__lshift+0x4a>
 800f5d2:	3904      	subs	r1, #4
 800f5d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800f5dc:	459c      	cmp	ip, r3
 800f5de:	d8f9      	bhi.n	800f5d4 <__lshift+0xc0>
 800f5e0:	e7ea      	b.n	800f5b8 <__lshift+0xa4>
 800f5e2:	bf00      	nop
 800f5e4:	08012460 	.word	0x08012460
 800f5e8:	08012471 	.word	0x08012471

0800f5ec <__mcmp>:
 800f5ec:	690a      	ldr	r2, [r1, #16]
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	6900      	ldr	r0, [r0, #16]
 800f5f2:	1a80      	subs	r0, r0, r2
 800f5f4:	b530      	push	{r4, r5, lr}
 800f5f6:	d10e      	bne.n	800f616 <__mcmp+0x2a>
 800f5f8:	3314      	adds	r3, #20
 800f5fa:	3114      	adds	r1, #20
 800f5fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f600:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f604:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f608:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f60c:	4295      	cmp	r5, r2
 800f60e:	d003      	beq.n	800f618 <__mcmp+0x2c>
 800f610:	d205      	bcs.n	800f61e <__mcmp+0x32>
 800f612:	f04f 30ff 	mov.w	r0, #4294967295
 800f616:	bd30      	pop	{r4, r5, pc}
 800f618:	42a3      	cmp	r3, r4
 800f61a:	d3f3      	bcc.n	800f604 <__mcmp+0x18>
 800f61c:	e7fb      	b.n	800f616 <__mcmp+0x2a>
 800f61e:	2001      	movs	r0, #1
 800f620:	e7f9      	b.n	800f616 <__mcmp+0x2a>
	...

0800f624 <__mdiff>:
 800f624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f628:	4689      	mov	r9, r1
 800f62a:	4606      	mov	r6, r0
 800f62c:	4611      	mov	r1, r2
 800f62e:	4648      	mov	r0, r9
 800f630:	4614      	mov	r4, r2
 800f632:	f7ff ffdb 	bl	800f5ec <__mcmp>
 800f636:	1e05      	subs	r5, r0, #0
 800f638:	d112      	bne.n	800f660 <__mdiff+0x3c>
 800f63a:	4629      	mov	r1, r5
 800f63c:	4630      	mov	r0, r6
 800f63e:	f7ff fd5b 	bl	800f0f8 <_Balloc>
 800f642:	4602      	mov	r2, r0
 800f644:	b928      	cbnz	r0, 800f652 <__mdiff+0x2e>
 800f646:	4b3f      	ldr	r3, [pc, #252]	@ (800f744 <__mdiff+0x120>)
 800f648:	f240 2137 	movw	r1, #567	@ 0x237
 800f64c:	483e      	ldr	r0, [pc, #248]	@ (800f748 <__mdiff+0x124>)
 800f64e:	f000 fb03 	bl	800fc58 <__assert_func>
 800f652:	2301      	movs	r3, #1
 800f654:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f658:	4610      	mov	r0, r2
 800f65a:	b003      	add	sp, #12
 800f65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f660:	bfbc      	itt	lt
 800f662:	464b      	movlt	r3, r9
 800f664:	46a1      	movlt	r9, r4
 800f666:	4630      	mov	r0, r6
 800f668:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f66c:	bfba      	itte	lt
 800f66e:	461c      	movlt	r4, r3
 800f670:	2501      	movlt	r5, #1
 800f672:	2500      	movge	r5, #0
 800f674:	f7ff fd40 	bl	800f0f8 <_Balloc>
 800f678:	4602      	mov	r2, r0
 800f67a:	b918      	cbnz	r0, 800f684 <__mdiff+0x60>
 800f67c:	4b31      	ldr	r3, [pc, #196]	@ (800f744 <__mdiff+0x120>)
 800f67e:	f240 2145 	movw	r1, #581	@ 0x245
 800f682:	e7e3      	b.n	800f64c <__mdiff+0x28>
 800f684:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f688:	6926      	ldr	r6, [r4, #16]
 800f68a:	60c5      	str	r5, [r0, #12]
 800f68c:	f109 0310 	add.w	r3, r9, #16
 800f690:	f109 0514 	add.w	r5, r9, #20
 800f694:	f104 0e14 	add.w	lr, r4, #20
 800f698:	f100 0b14 	add.w	fp, r0, #20
 800f69c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f6a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f6a4:	9301      	str	r3, [sp, #4]
 800f6a6:	46d9      	mov	r9, fp
 800f6a8:	f04f 0c00 	mov.w	ip, #0
 800f6ac:	9b01      	ldr	r3, [sp, #4]
 800f6ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f6b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f6b6:	9301      	str	r3, [sp, #4]
 800f6b8:	fa1f f38a 	uxth.w	r3, sl
 800f6bc:	4619      	mov	r1, r3
 800f6be:	b283      	uxth	r3, r0
 800f6c0:	1acb      	subs	r3, r1, r3
 800f6c2:	0c00      	lsrs	r0, r0, #16
 800f6c4:	4463      	add	r3, ip
 800f6c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f6ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f6ce:	b29b      	uxth	r3, r3
 800f6d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f6d4:	4576      	cmp	r6, lr
 800f6d6:	f849 3b04 	str.w	r3, [r9], #4
 800f6da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f6de:	d8e5      	bhi.n	800f6ac <__mdiff+0x88>
 800f6e0:	1b33      	subs	r3, r6, r4
 800f6e2:	3b15      	subs	r3, #21
 800f6e4:	f023 0303 	bic.w	r3, r3, #3
 800f6e8:	3415      	adds	r4, #21
 800f6ea:	3304      	adds	r3, #4
 800f6ec:	42a6      	cmp	r6, r4
 800f6ee:	bf38      	it	cc
 800f6f0:	2304      	movcc	r3, #4
 800f6f2:	441d      	add	r5, r3
 800f6f4:	445b      	add	r3, fp
 800f6f6:	461e      	mov	r6, r3
 800f6f8:	462c      	mov	r4, r5
 800f6fa:	4544      	cmp	r4, r8
 800f6fc:	d30e      	bcc.n	800f71c <__mdiff+0xf8>
 800f6fe:	f108 0103 	add.w	r1, r8, #3
 800f702:	1b49      	subs	r1, r1, r5
 800f704:	f021 0103 	bic.w	r1, r1, #3
 800f708:	3d03      	subs	r5, #3
 800f70a:	45a8      	cmp	r8, r5
 800f70c:	bf38      	it	cc
 800f70e:	2100      	movcc	r1, #0
 800f710:	440b      	add	r3, r1
 800f712:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f716:	b191      	cbz	r1, 800f73e <__mdiff+0x11a>
 800f718:	6117      	str	r7, [r2, #16]
 800f71a:	e79d      	b.n	800f658 <__mdiff+0x34>
 800f71c:	f854 1b04 	ldr.w	r1, [r4], #4
 800f720:	46e6      	mov	lr, ip
 800f722:	0c08      	lsrs	r0, r1, #16
 800f724:	fa1c fc81 	uxtah	ip, ip, r1
 800f728:	4471      	add	r1, lr
 800f72a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f72e:	b289      	uxth	r1, r1
 800f730:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f734:	f846 1b04 	str.w	r1, [r6], #4
 800f738:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f73c:	e7dd      	b.n	800f6fa <__mdiff+0xd6>
 800f73e:	3f01      	subs	r7, #1
 800f740:	e7e7      	b.n	800f712 <__mdiff+0xee>
 800f742:	bf00      	nop
 800f744:	08012460 	.word	0x08012460
 800f748:	08012471 	.word	0x08012471

0800f74c <__d2b>:
 800f74c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f750:	460f      	mov	r7, r1
 800f752:	2101      	movs	r1, #1
 800f754:	ec59 8b10 	vmov	r8, r9, d0
 800f758:	4616      	mov	r6, r2
 800f75a:	f7ff fccd 	bl	800f0f8 <_Balloc>
 800f75e:	4604      	mov	r4, r0
 800f760:	b930      	cbnz	r0, 800f770 <__d2b+0x24>
 800f762:	4602      	mov	r2, r0
 800f764:	4b23      	ldr	r3, [pc, #140]	@ (800f7f4 <__d2b+0xa8>)
 800f766:	4824      	ldr	r0, [pc, #144]	@ (800f7f8 <__d2b+0xac>)
 800f768:	f240 310f 	movw	r1, #783	@ 0x30f
 800f76c:	f000 fa74 	bl	800fc58 <__assert_func>
 800f770:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f774:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f778:	b10d      	cbz	r5, 800f77e <__d2b+0x32>
 800f77a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f77e:	9301      	str	r3, [sp, #4]
 800f780:	f1b8 0300 	subs.w	r3, r8, #0
 800f784:	d023      	beq.n	800f7ce <__d2b+0x82>
 800f786:	4668      	mov	r0, sp
 800f788:	9300      	str	r3, [sp, #0]
 800f78a:	f7ff fd7c 	bl	800f286 <__lo0bits>
 800f78e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f792:	b1d0      	cbz	r0, 800f7ca <__d2b+0x7e>
 800f794:	f1c0 0320 	rsb	r3, r0, #32
 800f798:	fa02 f303 	lsl.w	r3, r2, r3
 800f79c:	430b      	orrs	r3, r1
 800f79e:	40c2      	lsrs	r2, r0
 800f7a0:	6163      	str	r3, [r4, #20]
 800f7a2:	9201      	str	r2, [sp, #4]
 800f7a4:	9b01      	ldr	r3, [sp, #4]
 800f7a6:	61a3      	str	r3, [r4, #24]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	bf0c      	ite	eq
 800f7ac:	2201      	moveq	r2, #1
 800f7ae:	2202      	movne	r2, #2
 800f7b0:	6122      	str	r2, [r4, #16]
 800f7b2:	b1a5      	cbz	r5, 800f7de <__d2b+0x92>
 800f7b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f7b8:	4405      	add	r5, r0
 800f7ba:	603d      	str	r5, [r7, #0]
 800f7bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f7c0:	6030      	str	r0, [r6, #0]
 800f7c2:	4620      	mov	r0, r4
 800f7c4:	b003      	add	sp, #12
 800f7c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7ca:	6161      	str	r1, [r4, #20]
 800f7cc:	e7ea      	b.n	800f7a4 <__d2b+0x58>
 800f7ce:	a801      	add	r0, sp, #4
 800f7d0:	f7ff fd59 	bl	800f286 <__lo0bits>
 800f7d4:	9b01      	ldr	r3, [sp, #4]
 800f7d6:	6163      	str	r3, [r4, #20]
 800f7d8:	3020      	adds	r0, #32
 800f7da:	2201      	movs	r2, #1
 800f7dc:	e7e8      	b.n	800f7b0 <__d2b+0x64>
 800f7de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f7e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f7e6:	6038      	str	r0, [r7, #0]
 800f7e8:	6918      	ldr	r0, [r3, #16]
 800f7ea:	f7ff fd2d 	bl	800f248 <__hi0bits>
 800f7ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f7f2:	e7e5      	b.n	800f7c0 <__d2b+0x74>
 800f7f4:	08012460 	.word	0x08012460
 800f7f8:	08012471 	.word	0x08012471

0800f7fc <__ssputs_r>:
 800f7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f800:	688e      	ldr	r6, [r1, #8]
 800f802:	461f      	mov	r7, r3
 800f804:	42be      	cmp	r6, r7
 800f806:	680b      	ldr	r3, [r1, #0]
 800f808:	4682      	mov	sl, r0
 800f80a:	460c      	mov	r4, r1
 800f80c:	4690      	mov	r8, r2
 800f80e:	d82d      	bhi.n	800f86c <__ssputs_r+0x70>
 800f810:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f814:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f818:	d026      	beq.n	800f868 <__ssputs_r+0x6c>
 800f81a:	6965      	ldr	r5, [r4, #20]
 800f81c:	6909      	ldr	r1, [r1, #16]
 800f81e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f822:	eba3 0901 	sub.w	r9, r3, r1
 800f826:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f82a:	1c7b      	adds	r3, r7, #1
 800f82c:	444b      	add	r3, r9
 800f82e:	106d      	asrs	r5, r5, #1
 800f830:	429d      	cmp	r5, r3
 800f832:	bf38      	it	cc
 800f834:	461d      	movcc	r5, r3
 800f836:	0553      	lsls	r3, r2, #21
 800f838:	d527      	bpl.n	800f88a <__ssputs_r+0x8e>
 800f83a:	4629      	mov	r1, r5
 800f83c:	f7ff fbd0 	bl	800efe0 <_malloc_r>
 800f840:	4606      	mov	r6, r0
 800f842:	b360      	cbz	r0, 800f89e <__ssputs_r+0xa2>
 800f844:	6921      	ldr	r1, [r4, #16]
 800f846:	464a      	mov	r2, r9
 800f848:	f7fe fcfb 	bl	800e242 <memcpy>
 800f84c:	89a3      	ldrh	r3, [r4, #12]
 800f84e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f856:	81a3      	strh	r3, [r4, #12]
 800f858:	6126      	str	r6, [r4, #16]
 800f85a:	6165      	str	r5, [r4, #20]
 800f85c:	444e      	add	r6, r9
 800f85e:	eba5 0509 	sub.w	r5, r5, r9
 800f862:	6026      	str	r6, [r4, #0]
 800f864:	60a5      	str	r5, [r4, #8]
 800f866:	463e      	mov	r6, r7
 800f868:	42be      	cmp	r6, r7
 800f86a:	d900      	bls.n	800f86e <__ssputs_r+0x72>
 800f86c:	463e      	mov	r6, r7
 800f86e:	6820      	ldr	r0, [r4, #0]
 800f870:	4632      	mov	r2, r6
 800f872:	4641      	mov	r1, r8
 800f874:	f000 f9c6 	bl	800fc04 <memmove>
 800f878:	68a3      	ldr	r3, [r4, #8]
 800f87a:	1b9b      	subs	r3, r3, r6
 800f87c:	60a3      	str	r3, [r4, #8]
 800f87e:	6823      	ldr	r3, [r4, #0]
 800f880:	4433      	add	r3, r6
 800f882:	6023      	str	r3, [r4, #0]
 800f884:	2000      	movs	r0, #0
 800f886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f88a:	462a      	mov	r2, r5
 800f88c:	f000 fa28 	bl	800fce0 <_realloc_r>
 800f890:	4606      	mov	r6, r0
 800f892:	2800      	cmp	r0, #0
 800f894:	d1e0      	bne.n	800f858 <__ssputs_r+0x5c>
 800f896:	6921      	ldr	r1, [r4, #16]
 800f898:	4650      	mov	r0, sl
 800f89a:	f7ff fb2d 	bl	800eef8 <_free_r>
 800f89e:	230c      	movs	r3, #12
 800f8a0:	f8ca 3000 	str.w	r3, [sl]
 800f8a4:	89a3      	ldrh	r3, [r4, #12]
 800f8a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8aa:	81a3      	strh	r3, [r4, #12]
 800f8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f8b0:	e7e9      	b.n	800f886 <__ssputs_r+0x8a>
	...

0800f8b4 <_svfiprintf_r>:
 800f8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8b8:	4698      	mov	r8, r3
 800f8ba:	898b      	ldrh	r3, [r1, #12]
 800f8bc:	061b      	lsls	r3, r3, #24
 800f8be:	b09d      	sub	sp, #116	@ 0x74
 800f8c0:	4607      	mov	r7, r0
 800f8c2:	460d      	mov	r5, r1
 800f8c4:	4614      	mov	r4, r2
 800f8c6:	d510      	bpl.n	800f8ea <_svfiprintf_r+0x36>
 800f8c8:	690b      	ldr	r3, [r1, #16]
 800f8ca:	b973      	cbnz	r3, 800f8ea <_svfiprintf_r+0x36>
 800f8cc:	2140      	movs	r1, #64	@ 0x40
 800f8ce:	f7ff fb87 	bl	800efe0 <_malloc_r>
 800f8d2:	6028      	str	r0, [r5, #0]
 800f8d4:	6128      	str	r0, [r5, #16]
 800f8d6:	b930      	cbnz	r0, 800f8e6 <_svfiprintf_r+0x32>
 800f8d8:	230c      	movs	r3, #12
 800f8da:	603b      	str	r3, [r7, #0]
 800f8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f8e0:	b01d      	add	sp, #116	@ 0x74
 800f8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8e6:	2340      	movs	r3, #64	@ 0x40
 800f8e8:	616b      	str	r3, [r5, #20]
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8ee:	2320      	movs	r3, #32
 800f8f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f8f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8f8:	2330      	movs	r3, #48	@ 0x30
 800f8fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fa98 <_svfiprintf_r+0x1e4>
 800f8fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f902:	f04f 0901 	mov.w	r9, #1
 800f906:	4623      	mov	r3, r4
 800f908:	469a      	mov	sl, r3
 800f90a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f90e:	b10a      	cbz	r2, 800f914 <_svfiprintf_r+0x60>
 800f910:	2a25      	cmp	r2, #37	@ 0x25
 800f912:	d1f9      	bne.n	800f908 <_svfiprintf_r+0x54>
 800f914:	ebba 0b04 	subs.w	fp, sl, r4
 800f918:	d00b      	beq.n	800f932 <_svfiprintf_r+0x7e>
 800f91a:	465b      	mov	r3, fp
 800f91c:	4622      	mov	r2, r4
 800f91e:	4629      	mov	r1, r5
 800f920:	4638      	mov	r0, r7
 800f922:	f7ff ff6b 	bl	800f7fc <__ssputs_r>
 800f926:	3001      	adds	r0, #1
 800f928:	f000 80a7 	beq.w	800fa7a <_svfiprintf_r+0x1c6>
 800f92c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f92e:	445a      	add	r2, fp
 800f930:	9209      	str	r2, [sp, #36]	@ 0x24
 800f932:	f89a 3000 	ldrb.w	r3, [sl]
 800f936:	2b00      	cmp	r3, #0
 800f938:	f000 809f 	beq.w	800fa7a <_svfiprintf_r+0x1c6>
 800f93c:	2300      	movs	r3, #0
 800f93e:	f04f 32ff 	mov.w	r2, #4294967295
 800f942:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f946:	f10a 0a01 	add.w	sl, sl, #1
 800f94a:	9304      	str	r3, [sp, #16]
 800f94c:	9307      	str	r3, [sp, #28]
 800f94e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f952:	931a      	str	r3, [sp, #104]	@ 0x68
 800f954:	4654      	mov	r4, sl
 800f956:	2205      	movs	r2, #5
 800f958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f95c:	484e      	ldr	r0, [pc, #312]	@ (800fa98 <_svfiprintf_r+0x1e4>)
 800f95e:	f7f0 fc37 	bl	80001d0 <memchr>
 800f962:	9a04      	ldr	r2, [sp, #16]
 800f964:	b9d8      	cbnz	r0, 800f99e <_svfiprintf_r+0xea>
 800f966:	06d0      	lsls	r0, r2, #27
 800f968:	bf44      	itt	mi
 800f96a:	2320      	movmi	r3, #32
 800f96c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f970:	0711      	lsls	r1, r2, #28
 800f972:	bf44      	itt	mi
 800f974:	232b      	movmi	r3, #43	@ 0x2b
 800f976:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f97a:	f89a 3000 	ldrb.w	r3, [sl]
 800f97e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f980:	d015      	beq.n	800f9ae <_svfiprintf_r+0xfa>
 800f982:	9a07      	ldr	r2, [sp, #28]
 800f984:	4654      	mov	r4, sl
 800f986:	2000      	movs	r0, #0
 800f988:	f04f 0c0a 	mov.w	ip, #10
 800f98c:	4621      	mov	r1, r4
 800f98e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f992:	3b30      	subs	r3, #48	@ 0x30
 800f994:	2b09      	cmp	r3, #9
 800f996:	d94b      	bls.n	800fa30 <_svfiprintf_r+0x17c>
 800f998:	b1b0      	cbz	r0, 800f9c8 <_svfiprintf_r+0x114>
 800f99a:	9207      	str	r2, [sp, #28]
 800f99c:	e014      	b.n	800f9c8 <_svfiprintf_r+0x114>
 800f99e:	eba0 0308 	sub.w	r3, r0, r8
 800f9a2:	fa09 f303 	lsl.w	r3, r9, r3
 800f9a6:	4313      	orrs	r3, r2
 800f9a8:	9304      	str	r3, [sp, #16]
 800f9aa:	46a2      	mov	sl, r4
 800f9ac:	e7d2      	b.n	800f954 <_svfiprintf_r+0xa0>
 800f9ae:	9b03      	ldr	r3, [sp, #12]
 800f9b0:	1d19      	adds	r1, r3, #4
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	9103      	str	r1, [sp, #12]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	bfbb      	ittet	lt
 800f9ba:	425b      	neglt	r3, r3
 800f9bc:	f042 0202 	orrlt.w	r2, r2, #2
 800f9c0:	9307      	strge	r3, [sp, #28]
 800f9c2:	9307      	strlt	r3, [sp, #28]
 800f9c4:	bfb8      	it	lt
 800f9c6:	9204      	strlt	r2, [sp, #16]
 800f9c8:	7823      	ldrb	r3, [r4, #0]
 800f9ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800f9cc:	d10a      	bne.n	800f9e4 <_svfiprintf_r+0x130>
 800f9ce:	7863      	ldrb	r3, [r4, #1]
 800f9d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9d2:	d132      	bne.n	800fa3a <_svfiprintf_r+0x186>
 800f9d4:	9b03      	ldr	r3, [sp, #12]
 800f9d6:	1d1a      	adds	r2, r3, #4
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	9203      	str	r2, [sp, #12]
 800f9dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f9e0:	3402      	adds	r4, #2
 800f9e2:	9305      	str	r3, [sp, #20]
 800f9e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800faa8 <_svfiprintf_r+0x1f4>
 800f9e8:	7821      	ldrb	r1, [r4, #0]
 800f9ea:	2203      	movs	r2, #3
 800f9ec:	4650      	mov	r0, sl
 800f9ee:	f7f0 fbef 	bl	80001d0 <memchr>
 800f9f2:	b138      	cbz	r0, 800fa04 <_svfiprintf_r+0x150>
 800f9f4:	9b04      	ldr	r3, [sp, #16]
 800f9f6:	eba0 000a 	sub.w	r0, r0, sl
 800f9fa:	2240      	movs	r2, #64	@ 0x40
 800f9fc:	4082      	lsls	r2, r0
 800f9fe:	4313      	orrs	r3, r2
 800fa00:	3401      	adds	r4, #1
 800fa02:	9304      	str	r3, [sp, #16]
 800fa04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa08:	4824      	ldr	r0, [pc, #144]	@ (800fa9c <_svfiprintf_r+0x1e8>)
 800fa0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fa0e:	2206      	movs	r2, #6
 800fa10:	f7f0 fbde 	bl	80001d0 <memchr>
 800fa14:	2800      	cmp	r0, #0
 800fa16:	d036      	beq.n	800fa86 <_svfiprintf_r+0x1d2>
 800fa18:	4b21      	ldr	r3, [pc, #132]	@ (800faa0 <_svfiprintf_r+0x1ec>)
 800fa1a:	bb1b      	cbnz	r3, 800fa64 <_svfiprintf_r+0x1b0>
 800fa1c:	9b03      	ldr	r3, [sp, #12]
 800fa1e:	3307      	adds	r3, #7
 800fa20:	f023 0307 	bic.w	r3, r3, #7
 800fa24:	3308      	adds	r3, #8
 800fa26:	9303      	str	r3, [sp, #12]
 800fa28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa2a:	4433      	add	r3, r6
 800fa2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa2e:	e76a      	b.n	800f906 <_svfiprintf_r+0x52>
 800fa30:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa34:	460c      	mov	r4, r1
 800fa36:	2001      	movs	r0, #1
 800fa38:	e7a8      	b.n	800f98c <_svfiprintf_r+0xd8>
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	3401      	adds	r4, #1
 800fa3e:	9305      	str	r3, [sp, #20]
 800fa40:	4619      	mov	r1, r3
 800fa42:	f04f 0c0a 	mov.w	ip, #10
 800fa46:	4620      	mov	r0, r4
 800fa48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa4c:	3a30      	subs	r2, #48	@ 0x30
 800fa4e:	2a09      	cmp	r2, #9
 800fa50:	d903      	bls.n	800fa5a <_svfiprintf_r+0x1a6>
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d0c6      	beq.n	800f9e4 <_svfiprintf_r+0x130>
 800fa56:	9105      	str	r1, [sp, #20]
 800fa58:	e7c4      	b.n	800f9e4 <_svfiprintf_r+0x130>
 800fa5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa5e:	4604      	mov	r4, r0
 800fa60:	2301      	movs	r3, #1
 800fa62:	e7f0      	b.n	800fa46 <_svfiprintf_r+0x192>
 800fa64:	ab03      	add	r3, sp, #12
 800fa66:	9300      	str	r3, [sp, #0]
 800fa68:	462a      	mov	r2, r5
 800fa6a:	4b0e      	ldr	r3, [pc, #56]	@ (800faa4 <_svfiprintf_r+0x1f0>)
 800fa6c:	a904      	add	r1, sp, #16
 800fa6e:	4638      	mov	r0, r7
 800fa70:	f7fd fe44 	bl	800d6fc <_printf_float>
 800fa74:	1c42      	adds	r2, r0, #1
 800fa76:	4606      	mov	r6, r0
 800fa78:	d1d6      	bne.n	800fa28 <_svfiprintf_r+0x174>
 800fa7a:	89ab      	ldrh	r3, [r5, #12]
 800fa7c:	065b      	lsls	r3, r3, #25
 800fa7e:	f53f af2d 	bmi.w	800f8dc <_svfiprintf_r+0x28>
 800fa82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa84:	e72c      	b.n	800f8e0 <_svfiprintf_r+0x2c>
 800fa86:	ab03      	add	r3, sp, #12
 800fa88:	9300      	str	r3, [sp, #0]
 800fa8a:	462a      	mov	r2, r5
 800fa8c:	4b05      	ldr	r3, [pc, #20]	@ (800faa4 <_svfiprintf_r+0x1f0>)
 800fa8e:	a904      	add	r1, sp, #16
 800fa90:	4638      	mov	r0, r7
 800fa92:	f7fe f8cb 	bl	800dc2c <_printf_i>
 800fa96:	e7ed      	b.n	800fa74 <_svfiprintf_r+0x1c0>
 800fa98:	080125c8 	.word	0x080125c8
 800fa9c:	080125d2 	.word	0x080125d2
 800faa0:	0800d6fd 	.word	0x0800d6fd
 800faa4:	0800f7fd 	.word	0x0800f7fd
 800faa8:	080125ce 	.word	0x080125ce

0800faac <__sflush_r>:
 800faac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fab4:	0716      	lsls	r6, r2, #28
 800fab6:	4605      	mov	r5, r0
 800fab8:	460c      	mov	r4, r1
 800faba:	d454      	bmi.n	800fb66 <__sflush_r+0xba>
 800fabc:	684b      	ldr	r3, [r1, #4]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	dc02      	bgt.n	800fac8 <__sflush_r+0x1c>
 800fac2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	dd48      	ble.n	800fb5a <__sflush_r+0xae>
 800fac8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800faca:	2e00      	cmp	r6, #0
 800facc:	d045      	beq.n	800fb5a <__sflush_r+0xae>
 800face:	2300      	movs	r3, #0
 800fad0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fad4:	682f      	ldr	r7, [r5, #0]
 800fad6:	6a21      	ldr	r1, [r4, #32]
 800fad8:	602b      	str	r3, [r5, #0]
 800fada:	d030      	beq.n	800fb3e <__sflush_r+0x92>
 800fadc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fade:	89a3      	ldrh	r3, [r4, #12]
 800fae0:	0759      	lsls	r1, r3, #29
 800fae2:	d505      	bpl.n	800faf0 <__sflush_r+0x44>
 800fae4:	6863      	ldr	r3, [r4, #4]
 800fae6:	1ad2      	subs	r2, r2, r3
 800fae8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800faea:	b10b      	cbz	r3, 800faf0 <__sflush_r+0x44>
 800faec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800faee:	1ad2      	subs	r2, r2, r3
 800faf0:	2300      	movs	r3, #0
 800faf2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800faf4:	6a21      	ldr	r1, [r4, #32]
 800faf6:	4628      	mov	r0, r5
 800faf8:	47b0      	blx	r6
 800fafa:	1c43      	adds	r3, r0, #1
 800fafc:	89a3      	ldrh	r3, [r4, #12]
 800fafe:	d106      	bne.n	800fb0e <__sflush_r+0x62>
 800fb00:	6829      	ldr	r1, [r5, #0]
 800fb02:	291d      	cmp	r1, #29
 800fb04:	d82b      	bhi.n	800fb5e <__sflush_r+0xb2>
 800fb06:	4a2a      	ldr	r2, [pc, #168]	@ (800fbb0 <__sflush_r+0x104>)
 800fb08:	410a      	asrs	r2, r1
 800fb0a:	07d6      	lsls	r6, r2, #31
 800fb0c:	d427      	bmi.n	800fb5e <__sflush_r+0xb2>
 800fb0e:	2200      	movs	r2, #0
 800fb10:	6062      	str	r2, [r4, #4]
 800fb12:	04d9      	lsls	r1, r3, #19
 800fb14:	6922      	ldr	r2, [r4, #16]
 800fb16:	6022      	str	r2, [r4, #0]
 800fb18:	d504      	bpl.n	800fb24 <__sflush_r+0x78>
 800fb1a:	1c42      	adds	r2, r0, #1
 800fb1c:	d101      	bne.n	800fb22 <__sflush_r+0x76>
 800fb1e:	682b      	ldr	r3, [r5, #0]
 800fb20:	b903      	cbnz	r3, 800fb24 <__sflush_r+0x78>
 800fb22:	6560      	str	r0, [r4, #84]	@ 0x54
 800fb24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fb26:	602f      	str	r7, [r5, #0]
 800fb28:	b1b9      	cbz	r1, 800fb5a <__sflush_r+0xae>
 800fb2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb2e:	4299      	cmp	r1, r3
 800fb30:	d002      	beq.n	800fb38 <__sflush_r+0x8c>
 800fb32:	4628      	mov	r0, r5
 800fb34:	f7ff f9e0 	bl	800eef8 <_free_r>
 800fb38:	2300      	movs	r3, #0
 800fb3a:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb3c:	e00d      	b.n	800fb5a <__sflush_r+0xae>
 800fb3e:	2301      	movs	r3, #1
 800fb40:	4628      	mov	r0, r5
 800fb42:	47b0      	blx	r6
 800fb44:	4602      	mov	r2, r0
 800fb46:	1c50      	adds	r0, r2, #1
 800fb48:	d1c9      	bne.n	800fade <__sflush_r+0x32>
 800fb4a:	682b      	ldr	r3, [r5, #0]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d0c6      	beq.n	800fade <__sflush_r+0x32>
 800fb50:	2b1d      	cmp	r3, #29
 800fb52:	d001      	beq.n	800fb58 <__sflush_r+0xac>
 800fb54:	2b16      	cmp	r3, #22
 800fb56:	d11e      	bne.n	800fb96 <__sflush_r+0xea>
 800fb58:	602f      	str	r7, [r5, #0]
 800fb5a:	2000      	movs	r0, #0
 800fb5c:	e022      	b.n	800fba4 <__sflush_r+0xf8>
 800fb5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb62:	b21b      	sxth	r3, r3
 800fb64:	e01b      	b.n	800fb9e <__sflush_r+0xf2>
 800fb66:	690f      	ldr	r7, [r1, #16]
 800fb68:	2f00      	cmp	r7, #0
 800fb6a:	d0f6      	beq.n	800fb5a <__sflush_r+0xae>
 800fb6c:	0793      	lsls	r3, r2, #30
 800fb6e:	680e      	ldr	r6, [r1, #0]
 800fb70:	bf08      	it	eq
 800fb72:	694b      	ldreq	r3, [r1, #20]
 800fb74:	600f      	str	r7, [r1, #0]
 800fb76:	bf18      	it	ne
 800fb78:	2300      	movne	r3, #0
 800fb7a:	eba6 0807 	sub.w	r8, r6, r7
 800fb7e:	608b      	str	r3, [r1, #8]
 800fb80:	f1b8 0f00 	cmp.w	r8, #0
 800fb84:	dde9      	ble.n	800fb5a <__sflush_r+0xae>
 800fb86:	6a21      	ldr	r1, [r4, #32]
 800fb88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fb8a:	4643      	mov	r3, r8
 800fb8c:	463a      	mov	r2, r7
 800fb8e:	4628      	mov	r0, r5
 800fb90:	47b0      	blx	r6
 800fb92:	2800      	cmp	r0, #0
 800fb94:	dc08      	bgt.n	800fba8 <__sflush_r+0xfc>
 800fb96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb9e:	81a3      	strh	r3, [r4, #12]
 800fba0:	f04f 30ff 	mov.w	r0, #4294967295
 800fba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fba8:	4407      	add	r7, r0
 800fbaa:	eba8 0800 	sub.w	r8, r8, r0
 800fbae:	e7e7      	b.n	800fb80 <__sflush_r+0xd4>
 800fbb0:	dfbffffe 	.word	0xdfbffffe

0800fbb4 <_fflush_r>:
 800fbb4:	b538      	push	{r3, r4, r5, lr}
 800fbb6:	690b      	ldr	r3, [r1, #16]
 800fbb8:	4605      	mov	r5, r0
 800fbba:	460c      	mov	r4, r1
 800fbbc:	b913      	cbnz	r3, 800fbc4 <_fflush_r+0x10>
 800fbbe:	2500      	movs	r5, #0
 800fbc0:	4628      	mov	r0, r5
 800fbc2:	bd38      	pop	{r3, r4, r5, pc}
 800fbc4:	b118      	cbz	r0, 800fbce <_fflush_r+0x1a>
 800fbc6:	6a03      	ldr	r3, [r0, #32]
 800fbc8:	b90b      	cbnz	r3, 800fbce <_fflush_r+0x1a>
 800fbca:	f7fe f9db 	bl	800df84 <__sinit>
 800fbce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d0f3      	beq.n	800fbbe <_fflush_r+0xa>
 800fbd6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fbd8:	07d0      	lsls	r0, r2, #31
 800fbda:	d404      	bmi.n	800fbe6 <_fflush_r+0x32>
 800fbdc:	0599      	lsls	r1, r3, #22
 800fbde:	d402      	bmi.n	800fbe6 <_fflush_r+0x32>
 800fbe0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbe2:	f7fe fb2c 	bl	800e23e <__retarget_lock_acquire_recursive>
 800fbe6:	4628      	mov	r0, r5
 800fbe8:	4621      	mov	r1, r4
 800fbea:	f7ff ff5f 	bl	800faac <__sflush_r>
 800fbee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fbf0:	07da      	lsls	r2, r3, #31
 800fbf2:	4605      	mov	r5, r0
 800fbf4:	d4e4      	bmi.n	800fbc0 <_fflush_r+0xc>
 800fbf6:	89a3      	ldrh	r3, [r4, #12]
 800fbf8:	059b      	lsls	r3, r3, #22
 800fbfa:	d4e1      	bmi.n	800fbc0 <_fflush_r+0xc>
 800fbfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbfe:	f7fe fb1f 	bl	800e240 <__retarget_lock_release_recursive>
 800fc02:	e7dd      	b.n	800fbc0 <_fflush_r+0xc>

0800fc04 <memmove>:
 800fc04:	4288      	cmp	r0, r1
 800fc06:	b510      	push	{r4, lr}
 800fc08:	eb01 0402 	add.w	r4, r1, r2
 800fc0c:	d902      	bls.n	800fc14 <memmove+0x10>
 800fc0e:	4284      	cmp	r4, r0
 800fc10:	4623      	mov	r3, r4
 800fc12:	d807      	bhi.n	800fc24 <memmove+0x20>
 800fc14:	1e43      	subs	r3, r0, #1
 800fc16:	42a1      	cmp	r1, r4
 800fc18:	d008      	beq.n	800fc2c <memmove+0x28>
 800fc1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fc22:	e7f8      	b.n	800fc16 <memmove+0x12>
 800fc24:	4402      	add	r2, r0
 800fc26:	4601      	mov	r1, r0
 800fc28:	428a      	cmp	r2, r1
 800fc2a:	d100      	bne.n	800fc2e <memmove+0x2a>
 800fc2c:	bd10      	pop	{r4, pc}
 800fc2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fc32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fc36:	e7f7      	b.n	800fc28 <memmove+0x24>

0800fc38 <_sbrk_r>:
 800fc38:	b538      	push	{r3, r4, r5, lr}
 800fc3a:	4d06      	ldr	r5, [pc, #24]	@ (800fc54 <_sbrk_r+0x1c>)
 800fc3c:	2300      	movs	r3, #0
 800fc3e:	4604      	mov	r4, r0
 800fc40:	4608      	mov	r0, r1
 800fc42:	602b      	str	r3, [r5, #0]
 800fc44:	f7f4 fd72 	bl	800472c <_sbrk>
 800fc48:	1c43      	adds	r3, r0, #1
 800fc4a:	d102      	bne.n	800fc52 <_sbrk_r+0x1a>
 800fc4c:	682b      	ldr	r3, [r5, #0]
 800fc4e:	b103      	cbz	r3, 800fc52 <_sbrk_r+0x1a>
 800fc50:	6023      	str	r3, [r4, #0]
 800fc52:	bd38      	pop	{r3, r4, r5, pc}
 800fc54:	200054a8 	.word	0x200054a8

0800fc58 <__assert_func>:
 800fc58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc5a:	4614      	mov	r4, r2
 800fc5c:	461a      	mov	r2, r3
 800fc5e:	4b09      	ldr	r3, [pc, #36]	@ (800fc84 <__assert_func+0x2c>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	4605      	mov	r5, r0
 800fc64:	68d8      	ldr	r0, [r3, #12]
 800fc66:	b954      	cbnz	r4, 800fc7e <__assert_func+0x26>
 800fc68:	4b07      	ldr	r3, [pc, #28]	@ (800fc88 <__assert_func+0x30>)
 800fc6a:	461c      	mov	r4, r3
 800fc6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fc70:	9100      	str	r1, [sp, #0]
 800fc72:	462b      	mov	r3, r5
 800fc74:	4905      	ldr	r1, [pc, #20]	@ (800fc8c <__assert_func+0x34>)
 800fc76:	f000 f86f 	bl	800fd58 <fiprintf>
 800fc7a:	f000 f87f 	bl	800fd7c <abort>
 800fc7e:	4b04      	ldr	r3, [pc, #16]	@ (800fc90 <__assert_func+0x38>)
 800fc80:	e7f4      	b.n	800fc6c <__assert_func+0x14>
 800fc82:	bf00      	nop
 800fc84:	20000038 	.word	0x20000038
 800fc88:	0801261e 	.word	0x0801261e
 800fc8c:	080125f0 	.word	0x080125f0
 800fc90:	080125e3 	.word	0x080125e3

0800fc94 <_calloc_r>:
 800fc94:	b570      	push	{r4, r5, r6, lr}
 800fc96:	fba1 5402 	umull	r5, r4, r1, r2
 800fc9a:	b93c      	cbnz	r4, 800fcac <_calloc_r+0x18>
 800fc9c:	4629      	mov	r1, r5
 800fc9e:	f7ff f99f 	bl	800efe0 <_malloc_r>
 800fca2:	4606      	mov	r6, r0
 800fca4:	b928      	cbnz	r0, 800fcb2 <_calloc_r+0x1e>
 800fca6:	2600      	movs	r6, #0
 800fca8:	4630      	mov	r0, r6
 800fcaa:	bd70      	pop	{r4, r5, r6, pc}
 800fcac:	220c      	movs	r2, #12
 800fcae:	6002      	str	r2, [r0, #0]
 800fcb0:	e7f9      	b.n	800fca6 <_calloc_r+0x12>
 800fcb2:	462a      	mov	r2, r5
 800fcb4:	4621      	mov	r1, r4
 800fcb6:	f7fe fa32 	bl	800e11e <memset>
 800fcba:	e7f5      	b.n	800fca8 <_calloc_r+0x14>

0800fcbc <__ascii_mbtowc>:
 800fcbc:	b082      	sub	sp, #8
 800fcbe:	b901      	cbnz	r1, 800fcc2 <__ascii_mbtowc+0x6>
 800fcc0:	a901      	add	r1, sp, #4
 800fcc2:	b142      	cbz	r2, 800fcd6 <__ascii_mbtowc+0x1a>
 800fcc4:	b14b      	cbz	r3, 800fcda <__ascii_mbtowc+0x1e>
 800fcc6:	7813      	ldrb	r3, [r2, #0]
 800fcc8:	600b      	str	r3, [r1, #0]
 800fcca:	7812      	ldrb	r2, [r2, #0]
 800fccc:	1e10      	subs	r0, r2, #0
 800fcce:	bf18      	it	ne
 800fcd0:	2001      	movne	r0, #1
 800fcd2:	b002      	add	sp, #8
 800fcd4:	4770      	bx	lr
 800fcd6:	4610      	mov	r0, r2
 800fcd8:	e7fb      	b.n	800fcd2 <__ascii_mbtowc+0x16>
 800fcda:	f06f 0001 	mvn.w	r0, #1
 800fcde:	e7f8      	b.n	800fcd2 <__ascii_mbtowc+0x16>

0800fce0 <_realloc_r>:
 800fce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fce4:	4680      	mov	r8, r0
 800fce6:	4615      	mov	r5, r2
 800fce8:	460c      	mov	r4, r1
 800fcea:	b921      	cbnz	r1, 800fcf6 <_realloc_r+0x16>
 800fcec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fcf0:	4611      	mov	r1, r2
 800fcf2:	f7ff b975 	b.w	800efe0 <_malloc_r>
 800fcf6:	b92a      	cbnz	r2, 800fd04 <_realloc_r+0x24>
 800fcf8:	f7ff f8fe 	bl	800eef8 <_free_r>
 800fcfc:	2400      	movs	r4, #0
 800fcfe:	4620      	mov	r0, r4
 800fd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd04:	f000 f841 	bl	800fd8a <_malloc_usable_size_r>
 800fd08:	4285      	cmp	r5, r0
 800fd0a:	4606      	mov	r6, r0
 800fd0c:	d802      	bhi.n	800fd14 <_realloc_r+0x34>
 800fd0e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fd12:	d8f4      	bhi.n	800fcfe <_realloc_r+0x1e>
 800fd14:	4629      	mov	r1, r5
 800fd16:	4640      	mov	r0, r8
 800fd18:	f7ff f962 	bl	800efe0 <_malloc_r>
 800fd1c:	4607      	mov	r7, r0
 800fd1e:	2800      	cmp	r0, #0
 800fd20:	d0ec      	beq.n	800fcfc <_realloc_r+0x1c>
 800fd22:	42b5      	cmp	r5, r6
 800fd24:	462a      	mov	r2, r5
 800fd26:	4621      	mov	r1, r4
 800fd28:	bf28      	it	cs
 800fd2a:	4632      	movcs	r2, r6
 800fd2c:	f7fe fa89 	bl	800e242 <memcpy>
 800fd30:	4621      	mov	r1, r4
 800fd32:	4640      	mov	r0, r8
 800fd34:	f7ff f8e0 	bl	800eef8 <_free_r>
 800fd38:	463c      	mov	r4, r7
 800fd3a:	e7e0      	b.n	800fcfe <_realloc_r+0x1e>

0800fd3c <__ascii_wctomb>:
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	4608      	mov	r0, r1
 800fd40:	b141      	cbz	r1, 800fd54 <__ascii_wctomb+0x18>
 800fd42:	2aff      	cmp	r2, #255	@ 0xff
 800fd44:	d904      	bls.n	800fd50 <__ascii_wctomb+0x14>
 800fd46:	228a      	movs	r2, #138	@ 0x8a
 800fd48:	601a      	str	r2, [r3, #0]
 800fd4a:	f04f 30ff 	mov.w	r0, #4294967295
 800fd4e:	4770      	bx	lr
 800fd50:	700a      	strb	r2, [r1, #0]
 800fd52:	2001      	movs	r0, #1
 800fd54:	4770      	bx	lr
	...

0800fd58 <fiprintf>:
 800fd58:	b40e      	push	{r1, r2, r3}
 800fd5a:	b503      	push	{r0, r1, lr}
 800fd5c:	4601      	mov	r1, r0
 800fd5e:	ab03      	add	r3, sp, #12
 800fd60:	4805      	ldr	r0, [pc, #20]	@ (800fd78 <fiprintf+0x20>)
 800fd62:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd66:	6800      	ldr	r0, [r0, #0]
 800fd68:	9301      	str	r3, [sp, #4]
 800fd6a:	f000 f83f 	bl	800fdec <_vfiprintf_r>
 800fd6e:	b002      	add	sp, #8
 800fd70:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd74:	b003      	add	sp, #12
 800fd76:	4770      	bx	lr
 800fd78:	20000038 	.word	0x20000038

0800fd7c <abort>:
 800fd7c:	b508      	push	{r3, lr}
 800fd7e:	2006      	movs	r0, #6
 800fd80:	f000 fa08 	bl	8010194 <raise>
 800fd84:	2001      	movs	r0, #1
 800fd86:	f7f4 fc59 	bl	800463c <_exit>

0800fd8a <_malloc_usable_size_r>:
 800fd8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd8e:	1f18      	subs	r0, r3, #4
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	bfbc      	itt	lt
 800fd94:	580b      	ldrlt	r3, [r1, r0]
 800fd96:	18c0      	addlt	r0, r0, r3
 800fd98:	4770      	bx	lr

0800fd9a <__sfputc_r>:
 800fd9a:	6893      	ldr	r3, [r2, #8]
 800fd9c:	3b01      	subs	r3, #1
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	b410      	push	{r4}
 800fda2:	6093      	str	r3, [r2, #8]
 800fda4:	da08      	bge.n	800fdb8 <__sfputc_r+0x1e>
 800fda6:	6994      	ldr	r4, [r2, #24]
 800fda8:	42a3      	cmp	r3, r4
 800fdaa:	db01      	blt.n	800fdb0 <__sfputc_r+0x16>
 800fdac:	290a      	cmp	r1, #10
 800fdae:	d103      	bne.n	800fdb8 <__sfputc_r+0x1e>
 800fdb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdb4:	f000 b932 	b.w	801001c <__swbuf_r>
 800fdb8:	6813      	ldr	r3, [r2, #0]
 800fdba:	1c58      	adds	r0, r3, #1
 800fdbc:	6010      	str	r0, [r2, #0]
 800fdbe:	7019      	strb	r1, [r3, #0]
 800fdc0:	4608      	mov	r0, r1
 800fdc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdc6:	4770      	bx	lr

0800fdc8 <__sfputs_r>:
 800fdc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdca:	4606      	mov	r6, r0
 800fdcc:	460f      	mov	r7, r1
 800fdce:	4614      	mov	r4, r2
 800fdd0:	18d5      	adds	r5, r2, r3
 800fdd2:	42ac      	cmp	r4, r5
 800fdd4:	d101      	bne.n	800fdda <__sfputs_r+0x12>
 800fdd6:	2000      	movs	r0, #0
 800fdd8:	e007      	b.n	800fdea <__sfputs_r+0x22>
 800fdda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdde:	463a      	mov	r2, r7
 800fde0:	4630      	mov	r0, r6
 800fde2:	f7ff ffda 	bl	800fd9a <__sfputc_r>
 800fde6:	1c43      	adds	r3, r0, #1
 800fde8:	d1f3      	bne.n	800fdd2 <__sfputs_r+0xa>
 800fdea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fdec <_vfiprintf_r>:
 800fdec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdf0:	460d      	mov	r5, r1
 800fdf2:	b09d      	sub	sp, #116	@ 0x74
 800fdf4:	4614      	mov	r4, r2
 800fdf6:	4698      	mov	r8, r3
 800fdf8:	4606      	mov	r6, r0
 800fdfa:	b118      	cbz	r0, 800fe04 <_vfiprintf_r+0x18>
 800fdfc:	6a03      	ldr	r3, [r0, #32]
 800fdfe:	b90b      	cbnz	r3, 800fe04 <_vfiprintf_r+0x18>
 800fe00:	f7fe f8c0 	bl	800df84 <__sinit>
 800fe04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fe06:	07d9      	lsls	r1, r3, #31
 800fe08:	d405      	bmi.n	800fe16 <_vfiprintf_r+0x2a>
 800fe0a:	89ab      	ldrh	r3, [r5, #12]
 800fe0c:	059a      	lsls	r2, r3, #22
 800fe0e:	d402      	bmi.n	800fe16 <_vfiprintf_r+0x2a>
 800fe10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fe12:	f7fe fa14 	bl	800e23e <__retarget_lock_acquire_recursive>
 800fe16:	89ab      	ldrh	r3, [r5, #12]
 800fe18:	071b      	lsls	r3, r3, #28
 800fe1a:	d501      	bpl.n	800fe20 <_vfiprintf_r+0x34>
 800fe1c:	692b      	ldr	r3, [r5, #16]
 800fe1e:	b99b      	cbnz	r3, 800fe48 <_vfiprintf_r+0x5c>
 800fe20:	4629      	mov	r1, r5
 800fe22:	4630      	mov	r0, r6
 800fe24:	f000 f938 	bl	8010098 <__swsetup_r>
 800fe28:	b170      	cbz	r0, 800fe48 <_vfiprintf_r+0x5c>
 800fe2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fe2c:	07dc      	lsls	r4, r3, #31
 800fe2e:	d504      	bpl.n	800fe3a <_vfiprintf_r+0x4e>
 800fe30:	f04f 30ff 	mov.w	r0, #4294967295
 800fe34:	b01d      	add	sp, #116	@ 0x74
 800fe36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe3a:	89ab      	ldrh	r3, [r5, #12]
 800fe3c:	0598      	lsls	r0, r3, #22
 800fe3e:	d4f7      	bmi.n	800fe30 <_vfiprintf_r+0x44>
 800fe40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fe42:	f7fe f9fd 	bl	800e240 <__retarget_lock_release_recursive>
 800fe46:	e7f3      	b.n	800fe30 <_vfiprintf_r+0x44>
 800fe48:	2300      	movs	r3, #0
 800fe4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe4c:	2320      	movs	r3, #32
 800fe4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fe52:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe56:	2330      	movs	r3, #48	@ 0x30
 800fe58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010008 <_vfiprintf_r+0x21c>
 800fe5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fe60:	f04f 0901 	mov.w	r9, #1
 800fe64:	4623      	mov	r3, r4
 800fe66:	469a      	mov	sl, r3
 800fe68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe6c:	b10a      	cbz	r2, 800fe72 <_vfiprintf_r+0x86>
 800fe6e:	2a25      	cmp	r2, #37	@ 0x25
 800fe70:	d1f9      	bne.n	800fe66 <_vfiprintf_r+0x7a>
 800fe72:	ebba 0b04 	subs.w	fp, sl, r4
 800fe76:	d00b      	beq.n	800fe90 <_vfiprintf_r+0xa4>
 800fe78:	465b      	mov	r3, fp
 800fe7a:	4622      	mov	r2, r4
 800fe7c:	4629      	mov	r1, r5
 800fe7e:	4630      	mov	r0, r6
 800fe80:	f7ff ffa2 	bl	800fdc8 <__sfputs_r>
 800fe84:	3001      	adds	r0, #1
 800fe86:	f000 80a7 	beq.w	800ffd8 <_vfiprintf_r+0x1ec>
 800fe8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe8c:	445a      	add	r2, fp
 800fe8e:	9209      	str	r2, [sp, #36]	@ 0x24
 800fe90:	f89a 3000 	ldrb.w	r3, [sl]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	f000 809f 	beq.w	800ffd8 <_vfiprintf_r+0x1ec>
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	f04f 32ff 	mov.w	r2, #4294967295
 800fea0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fea4:	f10a 0a01 	add.w	sl, sl, #1
 800fea8:	9304      	str	r3, [sp, #16]
 800feaa:	9307      	str	r3, [sp, #28]
 800feac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800feb0:	931a      	str	r3, [sp, #104]	@ 0x68
 800feb2:	4654      	mov	r4, sl
 800feb4:	2205      	movs	r2, #5
 800feb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800feba:	4853      	ldr	r0, [pc, #332]	@ (8010008 <_vfiprintf_r+0x21c>)
 800febc:	f7f0 f988 	bl	80001d0 <memchr>
 800fec0:	9a04      	ldr	r2, [sp, #16]
 800fec2:	b9d8      	cbnz	r0, 800fefc <_vfiprintf_r+0x110>
 800fec4:	06d1      	lsls	r1, r2, #27
 800fec6:	bf44      	itt	mi
 800fec8:	2320      	movmi	r3, #32
 800feca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fece:	0713      	lsls	r3, r2, #28
 800fed0:	bf44      	itt	mi
 800fed2:	232b      	movmi	r3, #43	@ 0x2b
 800fed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fed8:	f89a 3000 	ldrb.w	r3, [sl]
 800fedc:	2b2a      	cmp	r3, #42	@ 0x2a
 800fede:	d015      	beq.n	800ff0c <_vfiprintf_r+0x120>
 800fee0:	9a07      	ldr	r2, [sp, #28]
 800fee2:	4654      	mov	r4, sl
 800fee4:	2000      	movs	r0, #0
 800fee6:	f04f 0c0a 	mov.w	ip, #10
 800feea:	4621      	mov	r1, r4
 800feec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fef0:	3b30      	subs	r3, #48	@ 0x30
 800fef2:	2b09      	cmp	r3, #9
 800fef4:	d94b      	bls.n	800ff8e <_vfiprintf_r+0x1a2>
 800fef6:	b1b0      	cbz	r0, 800ff26 <_vfiprintf_r+0x13a>
 800fef8:	9207      	str	r2, [sp, #28]
 800fefa:	e014      	b.n	800ff26 <_vfiprintf_r+0x13a>
 800fefc:	eba0 0308 	sub.w	r3, r0, r8
 800ff00:	fa09 f303 	lsl.w	r3, r9, r3
 800ff04:	4313      	orrs	r3, r2
 800ff06:	9304      	str	r3, [sp, #16]
 800ff08:	46a2      	mov	sl, r4
 800ff0a:	e7d2      	b.n	800feb2 <_vfiprintf_r+0xc6>
 800ff0c:	9b03      	ldr	r3, [sp, #12]
 800ff0e:	1d19      	adds	r1, r3, #4
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	9103      	str	r1, [sp, #12]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	bfbb      	ittet	lt
 800ff18:	425b      	neglt	r3, r3
 800ff1a:	f042 0202 	orrlt.w	r2, r2, #2
 800ff1e:	9307      	strge	r3, [sp, #28]
 800ff20:	9307      	strlt	r3, [sp, #28]
 800ff22:	bfb8      	it	lt
 800ff24:	9204      	strlt	r2, [sp, #16]
 800ff26:	7823      	ldrb	r3, [r4, #0]
 800ff28:	2b2e      	cmp	r3, #46	@ 0x2e
 800ff2a:	d10a      	bne.n	800ff42 <_vfiprintf_r+0x156>
 800ff2c:	7863      	ldrb	r3, [r4, #1]
 800ff2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff30:	d132      	bne.n	800ff98 <_vfiprintf_r+0x1ac>
 800ff32:	9b03      	ldr	r3, [sp, #12]
 800ff34:	1d1a      	adds	r2, r3, #4
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	9203      	str	r2, [sp, #12]
 800ff3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ff3e:	3402      	adds	r4, #2
 800ff40:	9305      	str	r3, [sp, #20]
 800ff42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010018 <_vfiprintf_r+0x22c>
 800ff46:	7821      	ldrb	r1, [r4, #0]
 800ff48:	2203      	movs	r2, #3
 800ff4a:	4650      	mov	r0, sl
 800ff4c:	f7f0 f940 	bl	80001d0 <memchr>
 800ff50:	b138      	cbz	r0, 800ff62 <_vfiprintf_r+0x176>
 800ff52:	9b04      	ldr	r3, [sp, #16]
 800ff54:	eba0 000a 	sub.w	r0, r0, sl
 800ff58:	2240      	movs	r2, #64	@ 0x40
 800ff5a:	4082      	lsls	r2, r0
 800ff5c:	4313      	orrs	r3, r2
 800ff5e:	3401      	adds	r4, #1
 800ff60:	9304      	str	r3, [sp, #16]
 800ff62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff66:	4829      	ldr	r0, [pc, #164]	@ (801000c <_vfiprintf_r+0x220>)
 800ff68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ff6c:	2206      	movs	r2, #6
 800ff6e:	f7f0 f92f 	bl	80001d0 <memchr>
 800ff72:	2800      	cmp	r0, #0
 800ff74:	d03f      	beq.n	800fff6 <_vfiprintf_r+0x20a>
 800ff76:	4b26      	ldr	r3, [pc, #152]	@ (8010010 <_vfiprintf_r+0x224>)
 800ff78:	bb1b      	cbnz	r3, 800ffc2 <_vfiprintf_r+0x1d6>
 800ff7a:	9b03      	ldr	r3, [sp, #12]
 800ff7c:	3307      	adds	r3, #7
 800ff7e:	f023 0307 	bic.w	r3, r3, #7
 800ff82:	3308      	adds	r3, #8
 800ff84:	9303      	str	r3, [sp, #12]
 800ff86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff88:	443b      	add	r3, r7
 800ff8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ff8c:	e76a      	b.n	800fe64 <_vfiprintf_r+0x78>
 800ff8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff92:	460c      	mov	r4, r1
 800ff94:	2001      	movs	r0, #1
 800ff96:	e7a8      	b.n	800feea <_vfiprintf_r+0xfe>
 800ff98:	2300      	movs	r3, #0
 800ff9a:	3401      	adds	r4, #1
 800ff9c:	9305      	str	r3, [sp, #20]
 800ff9e:	4619      	mov	r1, r3
 800ffa0:	f04f 0c0a 	mov.w	ip, #10
 800ffa4:	4620      	mov	r0, r4
 800ffa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffaa:	3a30      	subs	r2, #48	@ 0x30
 800ffac:	2a09      	cmp	r2, #9
 800ffae:	d903      	bls.n	800ffb8 <_vfiprintf_r+0x1cc>
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d0c6      	beq.n	800ff42 <_vfiprintf_r+0x156>
 800ffb4:	9105      	str	r1, [sp, #20]
 800ffb6:	e7c4      	b.n	800ff42 <_vfiprintf_r+0x156>
 800ffb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800ffbc:	4604      	mov	r4, r0
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	e7f0      	b.n	800ffa4 <_vfiprintf_r+0x1b8>
 800ffc2:	ab03      	add	r3, sp, #12
 800ffc4:	9300      	str	r3, [sp, #0]
 800ffc6:	462a      	mov	r2, r5
 800ffc8:	4b12      	ldr	r3, [pc, #72]	@ (8010014 <_vfiprintf_r+0x228>)
 800ffca:	a904      	add	r1, sp, #16
 800ffcc:	4630      	mov	r0, r6
 800ffce:	f7fd fb95 	bl	800d6fc <_printf_float>
 800ffd2:	4607      	mov	r7, r0
 800ffd4:	1c78      	adds	r0, r7, #1
 800ffd6:	d1d6      	bne.n	800ff86 <_vfiprintf_r+0x19a>
 800ffd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ffda:	07d9      	lsls	r1, r3, #31
 800ffdc:	d405      	bmi.n	800ffea <_vfiprintf_r+0x1fe>
 800ffde:	89ab      	ldrh	r3, [r5, #12]
 800ffe0:	059a      	lsls	r2, r3, #22
 800ffe2:	d402      	bmi.n	800ffea <_vfiprintf_r+0x1fe>
 800ffe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ffe6:	f7fe f92b 	bl	800e240 <__retarget_lock_release_recursive>
 800ffea:	89ab      	ldrh	r3, [r5, #12]
 800ffec:	065b      	lsls	r3, r3, #25
 800ffee:	f53f af1f 	bmi.w	800fe30 <_vfiprintf_r+0x44>
 800fff2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fff4:	e71e      	b.n	800fe34 <_vfiprintf_r+0x48>
 800fff6:	ab03      	add	r3, sp, #12
 800fff8:	9300      	str	r3, [sp, #0]
 800fffa:	462a      	mov	r2, r5
 800fffc:	4b05      	ldr	r3, [pc, #20]	@ (8010014 <_vfiprintf_r+0x228>)
 800fffe:	a904      	add	r1, sp, #16
 8010000:	4630      	mov	r0, r6
 8010002:	f7fd fe13 	bl	800dc2c <_printf_i>
 8010006:	e7e4      	b.n	800ffd2 <_vfiprintf_r+0x1e6>
 8010008:	080125c8 	.word	0x080125c8
 801000c:	080125d2 	.word	0x080125d2
 8010010:	0800d6fd 	.word	0x0800d6fd
 8010014:	0800fdc9 	.word	0x0800fdc9
 8010018:	080125ce 	.word	0x080125ce

0801001c <__swbuf_r>:
 801001c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801001e:	460e      	mov	r6, r1
 8010020:	4614      	mov	r4, r2
 8010022:	4605      	mov	r5, r0
 8010024:	b118      	cbz	r0, 801002e <__swbuf_r+0x12>
 8010026:	6a03      	ldr	r3, [r0, #32]
 8010028:	b90b      	cbnz	r3, 801002e <__swbuf_r+0x12>
 801002a:	f7fd ffab 	bl	800df84 <__sinit>
 801002e:	69a3      	ldr	r3, [r4, #24]
 8010030:	60a3      	str	r3, [r4, #8]
 8010032:	89a3      	ldrh	r3, [r4, #12]
 8010034:	071a      	lsls	r2, r3, #28
 8010036:	d501      	bpl.n	801003c <__swbuf_r+0x20>
 8010038:	6923      	ldr	r3, [r4, #16]
 801003a:	b943      	cbnz	r3, 801004e <__swbuf_r+0x32>
 801003c:	4621      	mov	r1, r4
 801003e:	4628      	mov	r0, r5
 8010040:	f000 f82a 	bl	8010098 <__swsetup_r>
 8010044:	b118      	cbz	r0, 801004e <__swbuf_r+0x32>
 8010046:	f04f 37ff 	mov.w	r7, #4294967295
 801004a:	4638      	mov	r0, r7
 801004c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801004e:	6823      	ldr	r3, [r4, #0]
 8010050:	6922      	ldr	r2, [r4, #16]
 8010052:	1a98      	subs	r0, r3, r2
 8010054:	6963      	ldr	r3, [r4, #20]
 8010056:	b2f6      	uxtb	r6, r6
 8010058:	4283      	cmp	r3, r0
 801005a:	4637      	mov	r7, r6
 801005c:	dc05      	bgt.n	801006a <__swbuf_r+0x4e>
 801005e:	4621      	mov	r1, r4
 8010060:	4628      	mov	r0, r5
 8010062:	f7ff fda7 	bl	800fbb4 <_fflush_r>
 8010066:	2800      	cmp	r0, #0
 8010068:	d1ed      	bne.n	8010046 <__swbuf_r+0x2a>
 801006a:	68a3      	ldr	r3, [r4, #8]
 801006c:	3b01      	subs	r3, #1
 801006e:	60a3      	str	r3, [r4, #8]
 8010070:	6823      	ldr	r3, [r4, #0]
 8010072:	1c5a      	adds	r2, r3, #1
 8010074:	6022      	str	r2, [r4, #0]
 8010076:	701e      	strb	r6, [r3, #0]
 8010078:	6962      	ldr	r2, [r4, #20]
 801007a:	1c43      	adds	r3, r0, #1
 801007c:	429a      	cmp	r2, r3
 801007e:	d004      	beq.n	801008a <__swbuf_r+0x6e>
 8010080:	89a3      	ldrh	r3, [r4, #12]
 8010082:	07db      	lsls	r3, r3, #31
 8010084:	d5e1      	bpl.n	801004a <__swbuf_r+0x2e>
 8010086:	2e0a      	cmp	r6, #10
 8010088:	d1df      	bne.n	801004a <__swbuf_r+0x2e>
 801008a:	4621      	mov	r1, r4
 801008c:	4628      	mov	r0, r5
 801008e:	f7ff fd91 	bl	800fbb4 <_fflush_r>
 8010092:	2800      	cmp	r0, #0
 8010094:	d0d9      	beq.n	801004a <__swbuf_r+0x2e>
 8010096:	e7d6      	b.n	8010046 <__swbuf_r+0x2a>

08010098 <__swsetup_r>:
 8010098:	b538      	push	{r3, r4, r5, lr}
 801009a:	4b29      	ldr	r3, [pc, #164]	@ (8010140 <__swsetup_r+0xa8>)
 801009c:	4605      	mov	r5, r0
 801009e:	6818      	ldr	r0, [r3, #0]
 80100a0:	460c      	mov	r4, r1
 80100a2:	b118      	cbz	r0, 80100ac <__swsetup_r+0x14>
 80100a4:	6a03      	ldr	r3, [r0, #32]
 80100a6:	b90b      	cbnz	r3, 80100ac <__swsetup_r+0x14>
 80100a8:	f7fd ff6c 	bl	800df84 <__sinit>
 80100ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100b0:	0719      	lsls	r1, r3, #28
 80100b2:	d422      	bmi.n	80100fa <__swsetup_r+0x62>
 80100b4:	06da      	lsls	r2, r3, #27
 80100b6:	d407      	bmi.n	80100c8 <__swsetup_r+0x30>
 80100b8:	2209      	movs	r2, #9
 80100ba:	602a      	str	r2, [r5, #0]
 80100bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80100c0:	81a3      	strh	r3, [r4, #12]
 80100c2:	f04f 30ff 	mov.w	r0, #4294967295
 80100c6:	e033      	b.n	8010130 <__swsetup_r+0x98>
 80100c8:	0758      	lsls	r0, r3, #29
 80100ca:	d512      	bpl.n	80100f2 <__swsetup_r+0x5a>
 80100cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80100ce:	b141      	cbz	r1, 80100e2 <__swsetup_r+0x4a>
 80100d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80100d4:	4299      	cmp	r1, r3
 80100d6:	d002      	beq.n	80100de <__swsetup_r+0x46>
 80100d8:	4628      	mov	r0, r5
 80100da:	f7fe ff0d 	bl	800eef8 <_free_r>
 80100de:	2300      	movs	r3, #0
 80100e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80100e2:	89a3      	ldrh	r3, [r4, #12]
 80100e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80100e8:	81a3      	strh	r3, [r4, #12]
 80100ea:	2300      	movs	r3, #0
 80100ec:	6063      	str	r3, [r4, #4]
 80100ee:	6923      	ldr	r3, [r4, #16]
 80100f0:	6023      	str	r3, [r4, #0]
 80100f2:	89a3      	ldrh	r3, [r4, #12]
 80100f4:	f043 0308 	orr.w	r3, r3, #8
 80100f8:	81a3      	strh	r3, [r4, #12]
 80100fa:	6923      	ldr	r3, [r4, #16]
 80100fc:	b94b      	cbnz	r3, 8010112 <__swsetup_r+0x7a>
 80100fe:	89a3      	ldrh	r3, [r4, #12]
 8010100:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010108:	d003      	beq.n	8010112 <__swsetup_r+0x7a>
 801010a:	4621      	mov	r1, r4
 801010c:	4628      	mov	r0, r5
 801010e:	f000 f883 	bl	8010218 <__smakebuf_r>
 8010112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010116:	f013 0201 	ands.w	r2, r3, #1
 801011a:	d00a      	beq.n	8010132 <__swsetup_r+0x9a>
 801011c:	2200      	movs	r2, #0
 801011e:	60a2      	str	r2, [r4, #8]
 8010120:	6962      	ldr	r2, [r4, #20]
 8010122:	4252      	negs	r2, r2
 8010124:	61a2      	str	r2, [r4, #24]
 8010126:	6922      	ldr	r2, [r4, #16]
 8010128:	b942      	cbnz	r2, 801013c <__swsetup_r+0xa4>
 801012a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801012e:	d1c5      	bne.n	80100bc <__swsetup_r+0x24>
 8010130:	bd38      	pop	{r3, r4, r5, pc}
 8010132:	0799      	lsls	r1, r3, #30
 8010134:	bf58      	it	pl
 8010136:	6962      	ldrpl	r2, [r4, #20]
 8010138:	60a2      	str	r2, [r4, #8]
 801013a:	e7f4      	b.n	8010126 <__swsetup_r+0x8e>
 801013c:	2000      	movs	r0, #0
 801013e:	e7f7      	b.n	8010130 <__swsetup_r+0x98>
 8010140:	20000038 	.word	0x20000038

08010144 <_raise_r>:
 8010144:	291f      	cmp	r1, #31
 8010146:	b538      	push	{r3, r4, r5, lr}
 8010148:	4605      	mov	r5, r0
 801014a:	460c      	mov	r4, r1
 801014c:	d904      	bls.n	8010158 <_raise_r+0x14>
 801014e:	2316      	movs	r3, #22
 8010150:	6003      	str	r3, [r0, #0]
 8010152:	f04f 30ff 	mov.w	r0, #4294967295
 8010156:	bd38      	pop	{r3, r4, r5, pc}
 8010158:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801015a:	b112      	cbz	r2, 8010162 <_raise_r+0x1e>
 801015c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010160:	b94b      	cbnz	r3, 8010176 <_raise_r+0x32>
 8010162:	4628      	mov	r0, r5
 8010164:	f000 f830 	bl	80101c8 <_getpid_r>
 8010168:	4622      	mov	r2, r4
 801016a:	4601      	mov	r1, r0
 801016c:	4628      	mov	r0, r5
 801016e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010172:	f000 b817 	b.w	80101a4 <_kill_r>
 8010176:	2b01      	cmp	r3, #1
 8010178:	d00a      	beq.n	8010190 <_raise_r+0x4c>
 801017a:	1c59      	adds	r1, r3, #1
 801017c:	d103      	bne.n	8010186 <_raise_r+0x42>
 801017e:	2316      	movs	r3, #22
 8010180:	6003      	str	r3, [r0, #0]
 8010182:	2001      	movs	r0, #1
 8010184:	e7e7      	b.n	8010156 <_raise_r+0x12>
 8010186:	2100      	movs	r1, #0
 8010188:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801018c:	4620      	mov	r0, r4
 801018e:	4798      	blx	r3
 8010190:	2000      	movs	r0, #0
 8010192:	e7e0      	b.n	8010156 <_raise_r+0x12>

08010194 <raise>:
 8010194:	4b02      	ldr	r3, [pc, #8]	@ (80101a0 <raise+0xc>)
 8010196:	4601      	mov	r1, r0
 8010198:	6818      	ldr	r0, [r3, #0]
 801019a:	f7ff bfd3 	b.w	8010144 <_raise_r>
 801019e:	bf00      	nop
 80101a0:	20000038 	.word	0x20000038

080101a4 <_kill_r>:
 80101a4:	b538      	push	{r3, r4, r5, lr}
 80101a6:	4d07      	ldr	r5, [pc, #28]	@ (80101c4 <_kill_r+0x20>)
 80101a8:	2300      	movs	r3, #0
 80101aa:	4604      	mov	r4, r0
 80101ac:	4608      	mov	r0, r1
 80101ae:	4611      	mov	r1, r2
 80101b0:	602b      	str	r3, [r5, #0]
 80101b2:	f7f4 fa33 	bl	800461c <_kill>
 80101b6:	1c43      	adds	r3, r0, #1
 80101b8:	d102      	bne.n	80101c0 <_kill_r+0x1c>
 80101ba:	682b      	ldr	r3, [r5, #0]
 80101bc:	b103      	cbz	r3, 80101c0 <_kill_r+0x1c>
 80101be:	6023      	str	r3, [r4, #0]
 80101c0:	bd38      	pop	{r3, r4, r5, pc}
 80101c2:	bf00      	nop
 80101c4:	200054a8 	.word	0x200054a8

080101c8 <_getpid_r>:
 80101c8:	f7f4 ba20 	b.w	800460c <_getpid>

080101cc <__swhatbuf_r>:
 80101cc:	b570      	push	{r4, r5, r6, lr}
 80101ce:	460c      	mov	r4, r1
 80101d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101d4:	2900      	cmp	r1, #0
 80101d6:	b096      	sub	sp, #88	@ 0x58
 80101d8:	4615      	mov	r5, r2
 80101da:	461e      	mov	r6, r3
 80101dc:	da0d      	bge.n	80101fa <__swhatbuf_r+0x2e>
 80101de:	89a3      	ldrh	r3, [r4, #12]
 80101e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80101e4:	f04f 0100 	mov.w	r1, #0
 80101e8:	bf14      	ite	ne
 80101ea:	2340      	movne	r3, #64	@ 0x40
 80101ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80101f0:	2000      	movs	r0, #0
 80101f2:	6031      	str	r1, [r6, #0]
 80101f4:	602b      	str	r3, [r5, #0]
 80101f6:	b016      	add	sp, #88	@ 0x58
 80101f8:	bd70      	pop	{r4, r5, r6, pc}
 80101fa:	466a      	mov	r2, sp
 80101fc:	f000 f848 	bl	8010290 <_fstat_r>
 8010200:	2800      	cmp	r0, #0
 8010202:	dbec      	blt.n	80101de <__swhatbuf_r+0x12>
 8010204:	9901      	ldr	r1, [sp, #4]
 8010206:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801020a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801020e:	4259      	negs	r1, r3
 8010210:	4159      	adcs	r1, r3
 8010212:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010216:	e7eb      	b.n	80101f0 <__swhatbuf_r+0x24>

08010218 <__smakebuf_r>:
 8010218:	898b      	ldrh	r3, [r1, #12]
 801021a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801021c:	079d      	lsls	r5, r3, #30
 801021e:	4606      	mov	r6, r0
 8010220:	460c      	mov	r4, r1
 8010222:	d507      	bpl.n	8010234 <__smakebuf_r+0x1c>
 8010224:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010228:	6023      	str	r3, [r4, #0]
 801022a:	6123      	str	r3, [r4, #16]
 801022c:	2301      	movs	r3, #1
 801022e:	6163      	str	r3, [r4, #20]
 8010230:	b003      	add	sp, #12
 8010232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010234:	ab01      	add	r3, sp, #4
 8010236:	466a      	mov	r2, sp
 8010238:	f7ff ffc8 	bl	80101cc <__swhatbuf_r>
 801023c:	9f00      	ldr	r7, [sp, #0]
 801023e:	4605      	mov	r5, r0
 8010240:	4639      	mov	r1, r7
 8010242:	4630      	mov	r0, r6
 8010244:	f7fe fecc 	bl	800efe0 <_malloc_r>
 8010248:	b948      	cbnz	r0, 801025e <__smakebuf_r+0x46>
 801024a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801024e:	059a      	lsls	r2, r3, #22
 8010250:	d4ee      	bmi.n	8010230 <__smakebuf_r+0x18>
 8010252:	f023 0303 	bic.w	r3, r3, #3
 8010256:	f043 0302 	orr.w	r3, r3, #2
 801025a:	81a3      	strh	r3, [r4, #12]
 801025c:	e7e2      	b.n	8010224 <__smakebuf_r+0xc>
 801025e:	89a3      	ldrh	r3, [r4, #12]
 8010260:	6020      	str	r0, [r4, #0]
 8010262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010266:	81a3      	strh	r3, [r4, #12]
 8010268:	9b01      	ldr	r3, [sp, #4]
 801026a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801026e:	b15b      	cbz	r3, 8010288 <__smakebuf_r+0x70>
 8010270:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010274:	4630      	mov	r0, r6
 8010276:	f000 f81d 	bl	80102b4 <_isatty_r>
 801027a:	b128      	cbz	r0, 8010288 <__smakebuf_r+0x70>
 801027c:	89a3      	ldrh	r3, [r4, #12]
 801027e:	f023 0303 	bic.w	r3, r3, #3
 8010282:	f043 0301 	orr.w	r3, r3, #1
 8010286:	81a3      	strh	r3, [r4, #12]
 8010288:	89a3      	ldrh	r3, [r4, #12]
 801028a:	431d      	orrs	r5, r3
 801028c:	81a5      	strh	r5, [r4, #12]
 801028e:	e7cf      	b.n	8010230 <__smakebuf_r+0x18>

08010290 <_fstat_r>:
 8010290:	b538      	push	{r3, r4, r5, lr}
 8010292:	4d07      	ldr	r5, [pc, #28]	@ (80102b0 <_fstat_r+0x20>)
 8010294:	2300      	movs	r3, #0
 8010296:	4604      	mov	r4, r0
 8010298:	4608      	mov	r0, r1
 801029a:	4611      	mov	r1, r2
 801029c:	602b      	str	r3, [r5, #0]
 801029e:	f7f4 fa1d 	bl	80046dc <_fstat>
 80102a2:	1c43      	adds	r3, r0, #1
 80102a4:	d102      	bne.n	80102ac <_fstat_r+0x1c>
 80102a6:	682b      	ldr	r3, [r5, #0]
 80102a8:	b103      	cbz	r3, 80102ac <_fstat_r+0x1c>
 80102aa:	6023      	str	r3, [r4, #0]
 80102ac:	bd38      	pop	{r3, r4, r5, pc}
 80102ae:	bf00      	nop
 80102b0:	200054a8 	.word	0x200054a8

080102b4 <_isatty_r>:
 80102b4:	b538      	push	{r3, r4, r5, lr}
 80102b6:	4d06      	ldr	r5, [pc, #24]	@ (80102d0 <_isatty_r+0x1c>)
 80102b8:	2300      	movs	r3, #0
 80102ba:	4604      	mov	r4, r0
 80102bc:	4608      	mov	r0, r1
 80102be:	602b      	str	r3, [r5, #0]
 80102c0:	f7f4 fa1c 	bl	80046fc <_isatty>
 80102c4:	1c43      	adds	r3, r0, #1
 80102c6:	d102      	bne.n	80102ce <_isatty_r+0x1a>
 80102c8:	682b      	ldr	r3, [r5, #0]
 80102ca:	b103      	cbz	r3, 80102ce <_isatty_r+0x1a>
 80102cc:	6023      	str	r3, [r4, #0]
 80102ce:	bd38      	pop	{r3, r4, r5, pc}
 80102d0:	200054a8 	.word	0x200054a8

080102d4 <atan2>:
 80102d4:	f000 b958 	b.w	8010588 <__ieee754_atan2>

080102d8 <pow>:
 80102d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102da:	ed2d 8b02 	vpush	{d8}
 80102de:	eeb0 8a40 	vmov.f32	s16, s0
 80102e2:	eef0 8a60 	vmov.f32	s17, s1
 80102e6:	ec55 4b11 	vmov	r4, r5, d1
 80102ea:	f000 fa15 	bl	8010718 <__ieee754_pow>
 80102ee:	4622      	mov	r2, r4
 80102f0:	462b      	mov	r3, r5
 80102f2:	4620      	mov	r0, r4
 80102f4:	4629      	mov	r1, r5
 80102f6:	ec57 6b10 	vmov	r6, r7, d0
 80102fa:	f7f0 fc17 	bl	8000b2c <__aeabi_dcmpun>
 80102fe:	2800      	cmp	r0, #0
 8010300:	d13b      	bne.n	801037a <pow+0xa2>
 8010302:	ec51 0b18 	vmov	r0, r1, d8
 8010306:	2200      	movs	r2, #0
 8010308:	2300      	movs	r3, #0
 801030a:	f7f0 fbdd 	bl	8000ac8 <__aeabi_dcmpeq>
 801030e:	b1b8      	cbz	r0, 8010340 <pow+0x68>
 8010310:	2200      	movs	r2, #0
 8010312:	2300      	movs	r3, #0
 8010314:	4620      	mov	r0, r4
 8010316:	4629      	mov	r1, r5
 8010318:	f7f0 fbd6 	bl	8000ac8 <__aeabi_dcmpeq>
 801031c:	2800      	cmp	r0, #0
 801031e:	d146      	bne.n	80103ae <pow+0xd6>
 8010320:	ec45 4b10 	vmov	d0, r4, r5
 8010324:	f000 f848 	bl	80103b8 <finite>
 8010328:	b338      	cbz	r0, 801037a <pow+0xa2>
 801032a:	2200      	movs	r2, #0
 801032c:	2300      	movs	r3, #0
 801032e:	4620      	mov	r0, r4
 8010330:	4629      	mov	r1, r5
 8010332:	f7f0 fbd3 	bl	8000adc <__aeabi_dcmplt>
 8010336:	b300      	cbz	r0, 801037a <pow+0xa2>
 8010338:	f7fd ff56 	bl	800e1e8 <__errno>
 801033c:	2322      	movs	r3, #34	@ 0x22
 801033e:	e01b      	b.n	8010378 <pow+0xa0>
 8010340:	ec47 6b10 	vmov	d0, r6, r7
 8010344:	f000 f838 	bl	80103b8 <finite>
 8010348:	b9e0      	cbnz	r0, 8010384 <pow+0xac>
 801034a:	eeb0 0a48 	vmov.f32	s0, s16
 801034e:	eef0 0a68 	vmov.f32	s1, s17
 8010352:	f000 f831 	bl	80103b8 <finite>
 8010356:	b1a8      	cbz	r0, 8010384 <pow+0xac>
 8010358:	ec45 4b10 	vmov	d0, r4, r5
 801035c:	f000 f82c 	bl	80103b8 <finite>
 8010360:	b180      	cbz	r0, 8010384 <pow+0xac>
 8010362:	4632      	mov	r2, r6
 8010364:	463b      	mov	r3, r7
 8010366:	4630      	mov	r0, r6
 8010368:	4639      	mov	r1, r7
 801036a:	f7f0 fbdf 	bl	8000b2c <__aeabi_dcmpun>
 801036e:	2800      	cmp	r0, #0
 8010370:	d0e2      	beq.n	8010338 <pow+0x60>
 8010372:	f7fd ff39 	bl	800e1e8 <__errno>
 8010376:	2321      	movs	r3, #33	@ 0x21
 8010378:	6003      	str	r3, [r0, #0]
 801037a:	ecbd 8b02 	vpop	{d8}
 801037e:	ec47 6b10 	vmov	d0, r6, r7
 8010382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010384:	2200      	movs	r2, #0
 8010386:	2300      	movs	r3, #0
 8010388:	4630      	mov	r0, r6
 801038a:	4639      	mov	r1, r7
 801038c:	f7f0 fb9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8010390:	2800      	cmp	r0, #0
 8010392:	d0f2      	beq.n	801037a <pow+0xa2>
 8010394:	eeb0 0a48 	vmov.f32	s0, s16
 8010398:	eef0 0a68 	vmov.f32	s1, s17
 801039c:	f000 f80c 	bl	80103b8 <finite>
 80103a0:	2800      	cmp	r0, #0
 80103a2:	d0ea      	beq.n	801037a <pow+0xa2>
 80103a4:	ec45 4b10 	vmov	d0, r4, r5
 80103a8:	f000 f806 	bl	80103b8 <finite>
 80103ac:	e7c3      	b.n	8010336 <pow+0x5e>
 80103ae:	4f01      	ldr	r7, [pc, #4]	@ (80103b4 <pow+0xdc>)
 80103b0:	2600      	movs	r6, #0
 80103b2:	e7e2      	b.n	801037a <pow+0xa2>
 80103b4:	3ff00000 	.word	0x3ff00000

080103b8 <finite>:
 80103b8:	b082      	sub	sp, #8
 80103ba:	ed8d 0b00 	vstr	d0, [sp]
 80103be:	9801      	ldr	r0, [sp, #4]
 80103c0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80103c4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80103c8:	0fc0      	lsrs	r0, r0, #31
 80103ca:	b002      	add	sp, #8
 80103cc:	4770      	bx	lr
	...

080103d0 <__ieee754_sqrt>:
 80103d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103d4:	4a68      	ldr	r2, [pc, #416]	@ (8010578 <__ieee754_sqrt+0x1a8>)
 80103d6:	ec55 4b10 	vmov	r4, r5, d0
 80103da:	43aa      	bics	r2, r5
 80103dc:	462b      	mov	r3, r5
 80103de:	4621      	mov	r1, r4
 80103e0:	d110      	bne.n	8010404 <__ieee754_sqrt+0x34>
 80103e2:	4622      	mov	r2, r4
 80103e4:	4620      	mov	r0, r4
 80103e6:	4629      	mov	r1, r5
 80103e8:	f7f0 f906 	bl	80005f8 <__aeabi_dmul>
 80103ec:	4602      	mov	r2, r0
 80103ee:	460b      	mov	r3, r1
 80103f0:	4620      	mov	r0, r4
 80103f2:	4629      	mov	r1, r5
 80103f4:	f7ef ff4a 	bl	800028c <__adddf3>
 80103f8:	4604      	mov	r4, r0
 80103fa:	460d      	mov	r5, r1
 80103fc:	ec45 4b10 	vmov	d0, r4, r5
 8010400:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010404:	2d00      	cmp	r5, #0
 8010406:	dc0e      	bgt.n	8010426 <__ieee754_sqrt+0x56>
 8010408:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801040c:	4322      	orrs	r2, r4
 801040e:	d0f5      	beq.n	80103fc <__ieee754_sqrt+0x2c>
 8010410:	b19d      	cbz	r5, 801043a <__ieee754_sqrt+0x6a>
 8010412:	4622      	mov	r2, r4
 8010414:	4620      	mov	r0, r4
 8010416:	4629      	mov	r1, r5
 8010418:	f7ef ff36 	bl	8000288 <__aeabi_dsub>
 801041c:	4602      	mov	r2, r0
 801041e:	460b      	mov	r3, r1
 8010420:	f7f0 fa14 	bl	800084c <__aeabi_ddiv>
 8010424:	e7e8      	b.n	80103f8 <__ieee754_sqrt+0x28>
 8010426:	152a      	asrs	r2, r5, #20
 8010428:	d115      	bne.n	8010456 <__ieee754_sqrt+0x86>
 801042a:	2000      	movs	r0, #0
 801042c:	e009      	b.n	8010442 <__ieee754_sqrt+0x72>
 801042e:	0acb      	lsrs	r3, r1, #11
 8010430:	3a15      	subs	r2, #21
 8010432:	0549      	lsls	r1, r1, #21
 8010434:	2b00      	cmp	r3, #0
 8010436:	d0fa      	beq.n	801042e <__ieee754_sqrt+0x5e>
 8010438:	e7f7      	b.n	801042a <__ieee754_sqrt+0x5a>
 801043a:	462a      	mov	r2, r5
 801043c:	e7fa      	b.n	8010434 <__ieee754_sqrt+0x64>
 801043e:	005b      	lsls	r3, r3, #1
 8010440:	3001      	adds	r0, #1
 8010442:	02dc      	lsls	r4, r3, #11
 8010444:	d5fb      	bpl.n	801043e <__ieee754_sqrt+0x6e>
 8010446:	1e44      	subs	r4, r0, #1
 8010448:	1b12      	subs	r2, r2, r4
 801044a:	f1c0 0420 	rsb	r4, r0, #32
 801044e:	fa21 f404 	lsr.w	r4, r1, r4
 8010452:	4323      	orrs	r3, r4
 8010454:	4081      	lsls	r1, r0
 8010456:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801045a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801045e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010462:	07d2      	lsls	r2, r2, #31
 8010464:	bf5c      	itt	pl
 8010466:	005b      	lslpl	r3, r3, #1
 8010468:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801046c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010470:	bf58      	it	pl
 8010472:	0049      	lslpl	r1, r1, #1
 8010474:	2600      	movs	r6, #0
 8010476:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801047a:	106d      	asrs	r5, r5, #1
 801047c:	0049      	lsls	r1, r1, #1
 801047e:	2016      	movs	r0, #22
 8010480:	4632      	mov	r2, r6
 8010482:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8010486:	1917      	adds	r7, r2, r4
 8010488:	429f      	cmp	r7, r3
 801048a:	bfde      	ittt	le
 801048c:	193a      	addle	r2, r7, r4
 801048e:	1bdb      	suble	r3, r3, r7
 8010490:	1936      	addle	r6, r6, r4
 8010492:	0fcf      	lsrs	r7, r1, #31
 8010494:	3801      	subs	r0, #1
 8010496:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801049a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801049e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80104a2:	d1f0      	bne.n	8010486 <__ieee754_sqrt+0xb6>
 80104a4:	4604      	mov	r4, r0
 80104a6:	2720      	movs	r7, #32
 80104a8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80104ac:	429a      	cmp	r2, r3
 80104ae:	eb00 0e0c 	add.w	lr, r0, ip
 80104b2:	db02      	blt.n	80104ba <__ieee754_sqrt+0xea>
 80104b4:	d113      	bne.n	80104de <__ieee754_sqrt+0x10e>
 80104b6:	458e      	cmp	lr, r1
 80104b8:	d811      	bhi.n	80104de <__ieee754_sqrt+0x10e>
 80104ba:	f1be 0f00 	cmp.w	lr, #0
 80104be:	eb0e 000c 	add.w	r0, lr, ip
 80104c2:	da42      	bge.n	801054a <__ieee754_sqrt+0x17a>
 80104c4:	2800      	cmp	r0, #0
 80104c6:	db40      	blt.n	801054a <__ieee754_sqrt+0x17a>
 80104c8:	f102 0801 	add.w	r8, r2, #1
 80104cc:	1a9b      	subs	r3, r3, r2
 80104ce:	458e      	cmp	lr, r1
 80104d0:	bf88      	it	hi
 80104d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80104d6:	eba1 010e 	sub.w	r1, r1, lr
 80104da:	4464      	add	r4, ip
 80104dc:	4642      	mov	r2, r8
 80104de:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80104e2:	3f01      	subs	r7, #1
 80104e4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80104e8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80104ec:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80104f0:	d1dc      	bne.n	80104ac <__ieee754_sqrt+0xdc>
 80104f2:	4319      	orrs	r1, r3
 80104f4:	d01b      	beq.n	801052e <__ieee754_sqrt+0x15e>
 80104f6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801057c <__ieee754_sqrt+0x1ac>
 80104fa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8010580 <__ieee754_sqrt+0x1b0>
 80104fe:	e9da 0100 	ldrd	r0, r1, [sl]
 8010502:	e9db 2300 	ldrd	r2, r3, [fp]
 8010506:	f7ef febf 	bl	8000288 <__aeabi_dsub>
 801050a:	e9da 8900 	ldrd	r8, r9, [sl]
 801050e:	4602      	mov	r2, r0
 8010510:	460b      	mov	r3, r1
 8010512:	4640      	mov	r0, r8
 8010514:	4649      	mov	r1, r9
 8010516:	f7f0 faeb 	bl	8000af0 <__aeabi_dcmple>
 801051a:	b140      	cbz	r0, 801052e <__ieee754_sqrt+0x15e>
 801051c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010520:	e9da 0100 	ldrd	r0, r1, [sl]
 8010524:	e9db 2300 	ldrd	r2, r3, [fp]
 8010528:	d111      	bne.n	801054e <__ieee754_sqrt+0x17e>
 801052a:	3601      	adds	r6, #1
 801052c:	463c      	mov	r4, r7
 801052e:	1072      	asrs	r2, r6, #1
 8010530:	0863      	lsrs	r3, r4, #1
 8010532:	07f1      	lsls	r1, r6, #31
 8010534:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8010538:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801053c:	bf48      	it	mi
 801053e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8010542:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8010546:	4618      	mov	r0, r3
 8010548:	e756      	b.n	80103f8 <__ieee754_sqrt+0x28>
 801054a:	4690      	mov	r8, r2
 801054c:	e7be      	b.n	80104cc <__ieee754_sqrt+0xfc>
 801054e:	f7ef fe9d 	bl	800028c <__adddf3>
 8010552:	e9da 8900 	ldrd	r8, r9, [sl]
 8010556:	4602      	mov	r2, r0
 8010558:	460b      	mov	r3, r1
 801055a:	4640      	mov	r0, r8
 801055c:	4649      	mov	r1, r9
 801055e:	f7f0 fabd 	bl	8000adc <__aeabi_dcmplt>
 8010562:	b120      	cbz	r0, 801056e <__ieee754_sqrt+0x19e>
 8010564:	1ca0      	adds	r0, r4, #2
 8010566:	bf08      	it	eq
 8010568:	3601      	addeq	r6, #1
 801056a:	3402      	adds	r4, #2
 801056c:	e7df      	b.n	801052e <__ieee754_sqrt+0x15e>
 801056e:	1c63      	adds	r3, r4, #1
 8010570:	f023 0401 	bic.w	r4, r3, #1
 8010574:	e7db      	b.n	801052e <__ieee754_sqrt+0x15e>
 8010576:	bf00      	nop
 8010578:	7ff00000 	.word	0x7ff00000
 801057c:	20000200 	.word	0x20000200
 8010580:	200001f8 	.word	0x200001f8
 8010584:	00000000 	.word	0x00000000

08010588 <__ieee754_atan2>:
 8010588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801058c:	ec57 6b11 	vmov	r6, r7, d1
 8010590:	4273      	negs	r3, r6
 8010592:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8010710 <__ieee754_atan2+0x188>
 8010596:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801059a:	4333      	orrs	r3, r6
 801059c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80105a0:	4543      	cmp	r3, r8
 80105a2:	ec51 0b10 	vmov	r0, r1, d0
 80105a6:	4635      	mov	r5, r6
 80105a8:	d809      	bhi.n	80105be <__ieee754_atan2+0x36>
 80105aa:	4244      	negs	r4, r0
 80105ac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80105b0:	4304      	orrs	r4, r0
 80105b2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80105b6:	4544      	cmp	r4, r8
 80105b8:	468e      	mov	lr, r1
 80105ba:	4681      	mov	r9, r0
 80105bc:	d907      	bls.n	80105ce <__ieee754_atan2+0x46>
 80105be:	4632      	mov	r2, r6
 80105c0:	463b      	mov	r3, r7
 80105c2:	f7ef fe63 	bl	800028c <__adddf3>
 80105c6:	ec41 0b10 	vmov	d0, r0, r1
 80105ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105ce:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80105d2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80105d6:	4334      	orrs	r4, r6
 80105d8:	d103      	bne.n	80105e2 <__ieee754_atan2+0x5a>
 80105da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105de:	f000 bddf 	b.w	80111a0 <atan>
 80105e2:	17bc      	asrs	r4, r7, #30
 80105e4:	f004 0402 	and.w	r4, r4, #2
 80105e8:	ea53 0909 	orrs.w	r9, r3, r9
 80105ec:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80105f0:	d107      	bne.n	8010602 <__ieee754_atan2+0x7a>
 80105f2:	2c02      	cmp	r4, #2
 80105f4:	d05f      	beq.n	80106b6 <__ieee754_atan2+0x12e>
 80105f6:	2c03      	cmp	r4, #3
 80105f8:	d1e5      	bne.n	80105c6 <__ieee754_atan2+0x3e>
 80105fa:	a141      	add	r1, pc, #260	@ (adr r1, 8010700 <__ieee754_atan2+0x178>)
 80105fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010600:	e7e1      	b.n	80105c6 <__ieee754_atan2+0x3e>
 8010602:	4315      	orrs	r5, r2
 8010604:	d106      	bne.n	8010614 <__ieee754_atan2+0x8c>
 8010606:	f1be 0f00 	cmp.w	lr, #0
 801060a:	da5f      	bge.n	80106cc <__ieee754_atan2+0x144>
 801060c:	a13e      	add	r1, pc, #248	@ (adr r1, 8010708 <__ieee754_atan2+0x180>)
 801060e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010612:	e7d8      	b.n	80105c6 <__ieee754_atan2+0x3e>
 8010614:	4542      	cmp	r2, r8
 8010616:	d10f      	bne.n	8010638 <__ieee754_atan2+0xb0>
 8010618:	4293      	cmp	r3, r2
 801061a:	f104 34ff 	add.w	r4, r4, #4294967295
 801061e:	d107      	bne.n	8010630 <__ieee754_atan2+0xa8>
 8010620:	2c02      	cmp	r4, #2
 8010622:	d84c      	bhi.n	80106be <__ieee754_atan2+0x136>
 8010624:	4b34      	ldr	r3, [pc, #208]	@ (80106f8 <__ieee754_atan2+0x170>)
 8010626:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801062a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801062e:	e7ca      	b.n	80105c6 <__ieee754_atan2+0x3e>
 8010630:	2c02      	cmp	r4, #2
 8010632:	d848      	bhi.n	80106c6 <__ieee754_atan2+0x13e>
 8010634:	4b31      	ldr	r3, [pc, #196]	@ (80106fc <__ieee754_atan2+0x174>)
 8010636:	e7f6      	b.n	8010626 <__ieee754_atan2+0x9e>
 8010638:	4543      	cmp	r3, r8
 801063a:	d0e4      	beq.n	8010606 <__ieee754_atan2+0x7e>
 801063c:	1a9b      	subs	r3, r3, r2
 801063e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8010642:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010646:	da1e      	bge.n	8010686 <__ieee754_atan2+0xfe>
 8010648:	2f00      	cmp	r7, #0
 801064a:	da01      	bge.n	8010650 <__ieee754_atan2+0xc8>
 801064c:	323c      	adds	r2, #60	@ 0x3c
 801064e:	db1e      	blt.n	801068e <__ieee754_atan2+0x106>
 8010650:	4632      	mov	r2, r6
 8010652:	463b      	mov	r3, r7
 8010654:	f7f0 f8fa 	bl	800084c <__aeabi_ddiv>
 8010658:	ec41 0b10 	vmov	d0, r0, r1
 801065c:	f000 ff38 	bl	80114d0 <fabs>
 8010660:	f000 fd9e 	bl	80111a0 <atan>
 8010664:	ec51 0b10 	vmov	r0, r1, d0
 8010668:	2c01      	cmp	r4, #1
 801066a:	d013      	beq.n	8010694 <__ieee754_atan2+0x10c>
 801066c:	2c02      	cmp	r4, #2
 801066e:	d015      	beq.n	801069c <__ieee754_atan2+0x114>
 8010670:	2c00      	cmp	r4, #0
 8010672:	d0a8      	beq.n	80105c6 <__ieee754_atan2+0x3e>
 8010674:	a318      	add	r3, pc, #96	@ (adr r3, 80106d8 <__ieee754_atan2+0x150>)
 8010676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801067a:	f7ef fe05 	bl	8000288 <__aeabi_dsub>
 801067e:	a318      	add	r3, pc, #96	@ (adr r3, 80106e0 <__ieee754_atan2+0x158>)
 8010680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010684:	e014      	b.n	80106b0 <__ieee754_atan2+0x128>
 8010686:	a118      	add	r1, pc, #96	@ (adr r1, 80106e8 <__ieee754_atan2+0x160>)
 8010688:	e9d1 0100 	ldrd	r0, r1, [r1]
 801068c:	e7ec      	b.n	8010668 <__ieee754_atan2+0xe0>
 801068e:	2000      	movs	r0, #0
 8010690:	2100      	movs	r1, #0
 8010692:	e7e9      	b.n	8010668 <__ieee754_atan2+0xe0>
 8010694:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010698:	4619      	mov	r1, r3
 801069a:	e794      	b.n	80105c6 <__ieee754_atan2+0x3e>
 801069c:	a30e      	add	r3, pc, #56	@ (adr r3, 80106d8 <__ieee754_atan2+0x150>)
 801069e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a2:	f7ef fdf1 	bl	8000288 <__aeabi_dsub>
 80106a6:	4602      	mov	r2, r0
 80106a8:	460b      	mov	r3, r1
 80106aa:	a10d      	add	r1, pc, #52	@ (adr r1, 80106e0 <__ieee754_atan2+0x158>)
 80106ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106b0:	f7ef fdea 	bl	8000288 <__aeabi_dsub>
 80106b4:	e787      	b.n	80105c6 <__ieee754_atan2+0x3e>
 80106b6:	a10a      	add	r1, pc, #40	@ (adr r1, 80106e0 <__ieee754_atan2+0x158>)
 80106b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106bc:	e783      	b.n	80105c6 <__ieee754_atan2+0x3e>
 80106be:	a10c      	add	r1, pc, #48	@ (adr r1, 80106f0 <__ieee754_atan2+0x168>)
 80106c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106c4:	e77f      	b.n	80105c6 <__ieee754_atan2+0x3e>
 80106c6:	2000      	movs	r0, #0
 80106c8:	2100      	movs	r1, #0
 80106ca:	e77c      	b.n	80105c6 <__ieee754_atan2+0x3e>
 80106cc:	a106      	add	r1, pc, #24	@ (adr r1, 80106e8 <__ieee754_atan2+0x160>)
 80106ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106d2:	e778      	b.n	80105c6 <__ieee754_atan2+0x3e>
 80106d4:	f3af 8000 	nop.w
 80106d8:	33145c07 	.word	0x33145c07
 80106dc:	3ca1a626 	.word	0x3ca1a626
 80106e0:	54442d18 	.word	0x54442d18
 80106e4:	400921fb 	.word	0x400921fb
 80106e8:	54442d18 	.word	0x54442d18
 80106ec:	3ff921fb 	.word	0x3ff921fb
 80106f0:	54442d18 	.word	0x54442d18
 80106f4:	3fe921fb 	.word	0x3fe921fb
 80106f8:	08012738 	.word	0x08012738
 80106fc:	08012720 	.word	0x08012720
 8010700:	54442d18 	.word	0x54442d18
 8010704:	c00921fb 	.word	0xc00921fb
 8010708:	54442d18 	.word	0x54442d18
 801070c:	bff921fb 	.word	0xbff921fb
 8010710:	7ff00000 	.word	0x7ff00000
 8010714:	00000000 	.word	0x00000000

08010718 <__ieee754_pow>:
 8010718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801071c:	b091      	sub	sp, #68	@ 0x44
 801071e:	ed8d 1b00 	vstr	d1, [sp]
 8010722:	e9dd 1900 	ldrd	r1, r9, [sp]
 8010726:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801072a:	ea5a 0001 	orrs.w	r0, sl, r1
 801072e:	ec57 6b10 	vmov	r6, r7, d0
 8010732:	d113      	bne.n	801075c <__ieee754_pow+0x44>
 8010734:	19b3      	adds	r3, r6, r6
 8010736:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801073a:	4152      	adcs	r2, r2
 801073c:	4298      	cmp	r0, r3
 801073e:	4b98      	ldr	r3, [pc, #608]	@ (80109a0 <__ieee754_pow+0x288>)
 8010740:	4193      	sbcs	r3, r2
 8010742:	f080 84ea 	bcs.w	801111a <__ieee754_pow+0xa02>
 8010746:	e9dd 2300 	ldrd	r2, r3, [sp]
 801074a:	4630      	mov	r0, r6
 801074c:	4639      	mov	r1, r7
 801074e:	f7ef fd9d 	bl	800028c <__adddf3>
 8010752:	ec41 0b10 	vmov	d0, r0, r1
 8010756:	b011      	add	sp, #68	@ 0x44
 8010758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801075c:	4a91      	ldr	r2, [pc, #580]	@ (80109a4 <__ieee754_pow+0x28c>)
 801075e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010762:	4590      	cmp	r8, r2
 8010764:	463d      	mov	r5, r7
 8010766:	4633      	mov	r3, r6
 8010768:	d806      	bhi.n	8010778 <__ieee754_pow+0x60>
 801076a:	d101      	bne.n	8010770 <__ieee754_pow+0x58>
 801076c:	2e00      	cmp	r6, #0
 801076e:	d1ea      	bne.n	8010746 <__ieee754_pow+0x2e>
 8010770:	4592      	cmp	sl, r2
 8010772:	d801      	bhi.n	8010778 <__ieee754_pow+0x60>
 8010774:	d10e      	bne.n	8010794 <__ieee754_pow+0x7c>
 8010776:	b169      	cbz	r1, 8010794 <__ieee754_pow+0x7c>
 8010778:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801077c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8010780:	431d      	orrs	r5, r3
 8010782:	d1e0      	bne.n	8010746 <__ieee754_pow+0x2e>
 8010784:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010788:	18db      	adds	r3, r3, r3
 801078a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801078e:	4152      	adcs	r2, r2
 8010790:	429d      	cmp	r5, r3
 8010792:	e7d4      	b.n	801073e <__ieee754_pow+0x26>
 8010794:	2d00      	cmp	r5, #0
 8010796:	46c3      	mov	fp, r8
 8010798:	da3a      	bge.n	8010810 <__ieee754_pow+0xf8>
 801079a:	4a83      	ldr	r2, [pc, #524]	@ (80109a8 <__ieee754_pow+0x290>)
 801079c:	4592      	cmp	sl, r2
 801079e:	d84d      	bhi.n	801083c <__ieee754_pow+0x124>
 80107a0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80107a4:	4592      	cmp	sl, r2
 80107a6:	f240 84c7 	bls.w	8011138 <__ieee754_pow+0xa20>
 80107aa:	ea4f 522a 	mov.w	r2, sl, asr #20
 80107ae:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80107b2:	2a14      	cmp	r2, #20
 80107b4:	dd0f      	ble.n	80107d6 <__ieee754_pow+0xbe>
 80107b6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80107ba:	fa21 f402 	lsr.w	r4, r1, r2
 80107be:	fa04 f202 	lsl.w	r2, r4, r2
 80107c2:	428a      	cmp	r2, r1
 80107c4:	f040 84b8 	bne.w	8011138 <__ieee754_pow+0xa20>
 80107c8:	f004 0401 	and.w	r4, r4, #1
 80107cc:	f1c4 0402 	rsb	r4, r4, #2
 80107d0:	2900      	cmp	r1, #0
 80107d2:	d158      	bne.n	8010886 <__ieee754_pow+0x16e>
 80107d4:	e00e      	b.n	80107f4 <__ieee754_pow+0xdc>
 80107d6:	2900      	cmp	r1, #0
 80107d8:	d154      	bne.n	8010884 <__ieee754_pow+0x16c>
 80107da:	f1c2 0214 	rsb	r2, r2, #20
 80107de:	fa4a f402 	asr.w	r4, sl, r2
 80107e2:	fa04 f202 	lsl.w	r2, r4, r2
 80107e6:	4552      	cmp	r2, sl
 80107e8:	f040 84a3 	bne.w	8011132 <__ieee754_pow+0xa1a>
 80107ec:	f004 0401 	and.w	r4, r4, #1
 80107f0:	f1c4 0402 	rsb	r4, r4, #2
 80107f4:	4a6d      	ldr	r2, [pc, #436]	@ (80109ac <__ieee754_pow+0x294>)
 80107f6:	4592      	cmp	sl, r2
 80107f8:	d12e      	bne.n	8010858 <__ieee754_pow+0x140>
 80107fa:	f1b9 0f00 	cmp.w	r9, #0
 80107fe:	f280 8494 	bge.w	801112a <__ieee754_pow+0xa12>
 8010802:	496a      	ldr	r1, [pc, #424]	@ (80109ac <__ieee754_pow+0x294>)
 8010804:	4632      	mov	r2, r6
 8010806:	463b      	mov	r3, r7
 8010808:	2000      	movs	r0, #0
 801080a:	f7f0 f81f 	bl	800084c <__aeabi_ddiv>
 801080e:	e7a0      	b.n	8010752 <__ieee754_pow+0x3a>
 8010810:	2400      	movs	r4, #0
 8010812:	bbc1      	cbnz	r1, 8010886 <__ieee754_pow+0x16e>
 8010814:	4a63      	ldr	r2, [pc, #396]	@ (80109a4 <__ieee754_pow+0x28c>)
 8010816:	4592      	cmp	sl, r2
 8010818:	d1ec      	bne.n	80107f4 <__ieee754_pow+0xdc>
 801081a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 801081e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8010822:	431a      	orrs	r2, r3
 8010824:	f000 8479 	beq.w	801111a <__ieee754_pow+0xa02>
 8010828:	4b61      	ldr	r3, [pc, #388]	@ (80109b0 <__ieee754_pow+0x298>)
 801082a:	4598      	cmp	r8, r3
 801082c:	d908      	bls.n	8010840 <__ieee754_pow+0x128>
 801082e:	f1b9 0f00 	cmp.w	r9, #0
 8010832:	f2c0 8476 	blt.w	8011122 <__ieee754_pow+0xa0a>
 8010836:	e9dd 0100 	ldrd	r0, r1, [sp]
 801083a:	e78a      	b.n	8010752 <__ieee754_pow+0x3a>
 801083c:	2402      	movs	r4, #2
 801083e:	e7e8      	b.n	8010812 <__ieee754_pow+0xfa>
 8010840:	f1b9 0f00 	cmp.w	r9, #0
 8010844:	f04f 0000 	mov.w	r0, #0
 8010848:	f04f 0100 	mov.w	r1, #0
 801084c:	da81      	bge.n	8010752 <__ieee754_pow+0x3a>
 801084e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010852:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010856:	e77c      	b.n	8010752 <__ieee754_pow+0x3a>
 8010858:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801085c:	d106      	bne.n	801086c <__ieee754_pow+0x154>
 801085e:	4632      	mov	r2, r6
 8010860:	463b      	mov	r3, r7
 8010862:	4630      	mov	r0, r6
 8010864:	4639      	mov	r1, r7
 8010866:	f7ef fec7 	bl	80005f8 <__aeabi_dmul>
 801086a:	e772      	b.n	8010752 <__ieee754_pow+0x3a>
 801086c:	4a51      	ldr	r2, [pc, #324]	@ (80109b4 <__ieee754_pow+0x29c>)
 801086e:	4591      	cmp	r9, r2
 8010870:	d109      	bne.n	8010886 <__ieee754_pow+0x16e>
 8010872:	2d00      	cmp	r5, #0
 8010874:	db07      	blt.n	8010886 <__ieee754_pow+0x16e>
 8010876:	ec47 6b10 	vmov	d0, r6, r7
 801087a:	b011      	add	sp, #68	@ 0x44
 801087c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010880:	f7ff bda6 	b.w	80103d0 <__ieee754_sqrt>
 8010884:	2400      	movs	r4, #0
 8010886:	ec47 6b10 	vmov	d0, r6, r7
 801088a:	9302      	str	r3, [sp, #8]
 801088c:	f000 fe20 	bl	80114d0 <fabs>
 8010890:	9b02      	ldr	r3, [sp, #8]
 8010892:	ec51 0b10 	vmov	r0, r1, d0
 8010896:	bb53      	cbnz	r3, 80108ee <__ieee754_pow+0x1d6>
 8010898:	4b44      	ldr	r3, [pc, #272]	@ (80109ac <__ieee754_pow+0x294>)
 801089a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801089e:	429a      	cmp	r2, r3
 80108a0:	d002      	beq.n	80108a8 <__ieee754_pow+0x190>
 80108a2:	f1b8 0f00 	cmp.w	r8, #0
 80108a6:	d122      	bne.n	80108ee <__ieee754_pow+0x1d6>
 80108a8:	f1b9 0f00 	cmp.w	r9, #0
 80108ac:	da05      	bge.n	80108ba <__ieee754_pow+0x1a2>
 80108ae:	4602      	mov	r2, r0
 80108b0:	460b      	mov	r3, r1
 80108b2:	2000      	movs	r0, #0
 80108b4:	493d      	ldr	r1, [pc, #244]	@ (80109ac <__ieee754_pow+0x294>)
 80108b6:	f7ef ffc9 	bl	800084c <__aeabi_ddiv>
 80108ba:	2d00      	cmp	r5, #0
 80108bc:	f6bf af49 	bge.w	8010752 <__ieee754_pow+0x3a>
 80108c0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80108c4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80108c8:	ea58 0804 	orrs.w	r8, r8, r4
 80108cc:	d108      	bne.n	80108e0 <__ieee754_pow+0x1c8>
 80108ce:	4602      	mov	r2, r0
 80108d0:	460b      	mov	r3, r1
 80108d2:	4610      	mov	r0, r2
 80108d4:	4619      	mov	r1, r3
 80108d6:	f7ef fcd7 	bl	8000288 <__aeabi_dsub>
 80108da:	4602      	mov	r2, r0
 80108dc:	460b      	mov	r3, r1
 80108de:	e794      	b.n	801080a <__ieee754_pow+0xf2>
 80108e0:	2c01      	cmp	r4, #1
 80108e2:	f47f af36 	bne.w	8010752 <__ieee754_pow+0x3a>
 80108e6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80108ea:	4619      	mov	r1, r3
 80108ec:	e731      	b.n	8010752 <__ieee754_pow+0x3a>
 80108ee:	0feb      	lsrs	r3, r5, #31
 80108f0:	3b01      	subs	r3, #1
 80108f2:	ea53 0204 	orrs.w	r2, r3, r4
 80108f6:	d102      	bne.n	80108fe <__ieee754_pow+0x1e6>
 80108f8:	4632      	mov	r2, r6
 80108fa:	463b      	mov	r3, r7
 80108fc:	e7e9      	b.n	80108d2 <__ieee754_pow+0x1ba>
 80108fe:	3c01      	subs	r4, #1
 8010900:	431c      	orrs	r4, r3
 8010902:	d016      	beq.n	8010932 <__ieee754_pow+0x21a>
 8010904:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8010990 <__ieee754_pow+0x278>
 8010908:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801090c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010910:	f240 8112 	bls.w	8010b38 <__ieee754_pow+0x420>
 8010914:	4b28      	ldr	r3, [pc, #160]	@ (80109b8 <__ieee754_pow+0x2a0>)
 8010916:	459a      	cmp	sl, r3
 8010918:	4b25      	ldr	r3, [pc, #148]	@ (80109b0 <__ieee754_pow+0x298>)
 801091a:	d916      	bls.n	801094a <__ieee754_pow+0x232>
 801091c:	4598      	cmp	r8, r3
 801091e:	d80b      	bhi.n	8010938 <__ieee754_pow+0x220>
 8010920:	f1b9 0f00 	cmp.w	r9, #0
 8010924:	da0b      	bge.n	801093e <__ieee754_pow+0x226>
 8010926:	2000      	movs	r0, #0
 8010928:	b011      	add	sp, #68	@ 0x44
 801092a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801092e:	f000 be8b 	b.w	8011648 <__math_oflow>
 8010932:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8010998 <__ieee754_pow+0x280>
 8010936:	e7e7      	b.n	8010908 <__ieee754_pow+0x1f0>
 8010938:	f1b9 0f00 	cmp.w	r9, #0
 801093c:	dcf3      	bgt.n	8010926 <__ieee754_pow+0x20e>
 801093e:	2000      	movs	r0, #0
 8010940:	b011      	add	sp, #68	@ 0x44
 8010942:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010946:	f000 be77 	b.w	8011638 <__math_uflow>
 801094a:	4598      	cmp	r8, r3
 801094c:	d20c      	bcs.n	8010968 <__ieee754_pow+0x250>
 801094e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010952:	2200      	movs	r2, #0
 8010954:	2300      	movs	r3, #0
 8010956:	f7f0 f8c1 	bl	8000adc <__aeabi_dcmplt>
 801095a:	3800      	subs	r0, #0
 801095c:	bf18      	it	ne
 801095e:	2001      	movne	r0, #1
 8010960:	f1b9 0f00 	cmp.w	r9, #0
 8010964:	daec      	bge.n	8010940 <__ieee754_pow+0x228>
 8010966:	e7df      	b.n	8010928 <__ieee754_pow+0x210>
 8010968:	4b10      	ldr	r3, [pc, #64]	@ (80109ac <__ieee754_pow+0x294>)
 801096a:	4598      	cmp	r8, r3
 801096c:	f04f 0200 	mov.w	r2, #0
 8010970:	d924      	bls.n	80109bc <__ieee754_pow+0x2a4>
 8010972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010976:	2300      	movs	r3, #0
 8010978:	f7f0 f8b0 	bl	8000adc <__aeabi_dcmplt>
 801097c:	3800      	subs	r0, #0
 801097e:	bf18      	it	ne
 8010980:	2001      	movne	r0, #1
 8010982:	f1b9 0f00 	cmp.w	r9, #0
 8010986:	dccf      	bgt.n	8010928 <__ieee754_pow+0x210>
 8010988:	e7da      	b.n	8010940 <__ieee754_pow+0x228>
 801098a:	bf00      	nop
 801098c:	f3af 8000 	nop.w
 8010990:	00000000 	.word	0x00000000
 8010994:	3ff00000 	.word	0x3ff00000
 8010998:	00000000 	.word	0x00000000
 801099c:	bff00000 	.word	0xbff00000
 80109a0:	fff00000 	.word	0xfff00000
 80109a4:	7ff00000 	.word	0x7ff00000
 80109a8:	433fffff 	.word	0x433fffff
 80109ac:	3ff00000 	.word	0x3ff00000
 80109b0:	3fefffff 	.word	0x3fefffff
 80109b4:	3fe00000 	.word	0x3fe00000
 80109b8:	43f00000 	.word	0x43f00000
 80109bc:	4b5a      	ldr	r3, [pc, #360]	@ (8010b28 <__ieee754_pow+0x410>)
 80109be:	f7ef fc63 	bl	8000288 <__aeabi_dsub>
 80109c2:	a351      	add	r3, pc, #324	@ (adr r3, 8010b08 <__ieee754_pow+0x3f0>)
 80109c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c8:	4604      	mov	r4, r0
 80109ca:	460d      	mov	r5, r1
 80109cc:	f7ef fe14 	bl	80005f8 <__aeabi_dmul>
 80109d0:	a34f      	add	r3, pc, #316	@ (adr r3, 8010b10 <__ieee754_pow+0x3f8>)
 80109d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109d6:	4606      	mov	r6, r0
 80109d8:	460f      	mov	r7, r1
 80109da:	4620      	mov	r0, r4
 80109dc:	4629      	mov	r1, r5
 80109de:	f7ef fe0b 	bl	80005f8 <__aeabi_dmul>
 80109e2:	4b52      	ldr	r3, [pc, #328]	@ (8010b2c <__ieee754_pow+0x414>)
 80109e4:	4682      	mov	sl, r0
 80109e6:	468b      	mov	fp, r1
 80109e8:	2200      	movs	r2, #0
 80109ea:	4620      	mov	r0, r4
 80109ec:	4629      	mov	r1, r5
 80109ee:	f7ef fe03 	bl	80005f8 <__aeabi_dmul>
 80109f2:	4602      	mov	r2, r0
 80109f4:	460b      	mov	r3, r1
 80109f6:	a148      	add	r1, pc, #288	@ (adr r1, 8010b18 <__ieee754_pow+0x400>)
 80109f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109fc:	f7ef fc44 	bl	8000288 <__aeabi_dsub>
 8010a00:	4622      	mov	r2, r4
 8010a02:	462b      	mov	r3, r5
 8010a04:	f7ef fdf8 	bl	80005f8 <__aeabi_dmul>
 8010a08:	4602      	mov	r2, r0
 8010a0a:	460b      	mov	r3, r1
 8010a0c:	2000      	movs	r0, #0
 8010a0e:	4948      	ldr	r1, [pc, #288]	@ (8010b30 <__ieee754_pow+0x418>)
 8010a10:	f7ef fc3a 	bl	8000288 <__aeabi_dsub>
 8010a14:	4622      	mov	r2, r4
 8010a16:	4680      	mov	r8, r0
 8010a18:	4689      	mov	r9, r1
 8010a1a:	462b      	mov	r3, r5
 8010a1c:	4620      	mov	r0, r4
 8010a1e:	4629      	mov	r1, r5
 8010a20:	f7ef fdea 	bl	80005f8 <__aeabi_dmul>
 8010a24:	4602      	mov	r2, r0
 8010a26:	460b      	mov	r3, r1
 8010a28:	4640      	mov	r0, r8
 8010a2a:	4649      	mov	r1, r9
 8010a2c:	f7ef fde4 	bl	80005f8 <__aeabi_dmul>
 8010a30:	a33b      	add	r3, pc, #236	@ (adr r3, 8010b20 <__ieee754_pow+0x408>)
 8010a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a36:	f7ef fddf 	bl	80005f8 <__aeabi_dmul>
 8010a3a:	4602      	mov	r2, r0
 8010a3c:	460b      	mov	r3, r1
 8010a3e:	4650      	mov	r0, sl
 8010a40:	4659      	mov	r1, fp
 8010a42:	f7ef fc21 	bl	8000288 <__aeabi_dsub>
 8010a46:	4602      	mov	r2, r0
 8010a48:	460b      	mov	r3, r1
 8010a4a:	4680      	mov	r8, r0
 8010a4c:	4689      	mov	r9, r1
 8010a4e:	4630      	mov	r0, r6
 8010a50:	4639      	mov	r1, r7
 8010a52:	f7ef fc1b 	bl	800028c <__adddf3>
 8010a56:	2400      	movs	r4, #0
 8010a58:	4632      	mov	r2, r6
 8010a5a:	463b      	mov	r3, r7
 8010a5c:	4620      	mov	r0, r4
 8010a5e:	460d      	mov	r5, r1
 8010a60:	f7ef fc12 	bl	8000288 <__aeabi_dsub>
 8010a64:	4602      	mov	r2, r0
 8010a66:	460b      	mov	r3, r1
 8010a68:	4640      	mov	r0, r8
 8010a6a:	4649      	mov	r1, r9
 8010a6c:	f7ef fc0c 	bl	8000288 <__aeabi_dsub>
 8010a70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010a74:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010a78:	2300      	movs	r3, #0
 8010a7a:	9304      	str	r3, [sp, #16]
 8010a7c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010a80:	4606      	mov	r6, r0
 8010a82:	460f      	mov	r7, r1
 8010a84:	4652      	mov	r2, sl
 8010a86:	465b      	mov	r3, fp
 8010a88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010a8c:	f7ef fbfc 	bl	8000288 <__aeabi_dsub>
 8010a90:	4622      	mov	r2, r4
 8010a92:	462b      	mov	r3, r5
 8010a94:	f7ef fdb0 	bl	80005f8 <__aeabi_dmul>
 8010a98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010a9c:	4680      	mov	r8, r0
 8010a9e:	4689      	mov	r9, r1
 8010aa0:	4630      	mov	r0, r6
 8010aa2:	4639      	mov	r1, r7
 8010aa4:	f7ef fda8 	bl	80005f8 <__aeabi_dmul>
 8010aa8:	4602      	mov	r2, r0
 8010aaa:	460b      	mov	r3, r1
 8010aac:	4640      	mov	r0, r8
 8010aae:	4649      	mov	r1, r9
 8010ab0:	f7ef fbec 	bl	800028c <__adddf3>
 8010ab4:	4652      	mov	r2, sl
 8010ab6:	465b      	mov	r3, fp
 8010ab8:	4606      	mov	r6, r0
 8010aba:	460f      	mov	r7, r1
 8010abc:	4620      	mov	r0, r4
 8010abe:	4629      	mov	r1, r5
 8010ac0:	f7ef fd9a 	bl	80005f8 <__aeabi_dmul>
 8010ac4:	460b      	mov	r3, r1
 8010ac6:	4602      	mov	r2, r0
 8010ac8:	4680      	mov	r8, r0
 8010aca:	4689      	mov	r9, r1
 8010acc:	4630      	mov	r0, r6
 8010ace:	4639      	mov	r1, r7
 8010ad0:	f7ef fbdc 	bl	800028c <__adddf3>
 8010ad4:	4b17      	ldr	r3, [pc, #92]	@ (8010b34 <__ieee754_pow+0x41c>)
 8010ad6:	4299      	cmp	r1, r3
 8010ad8:	4604      	mov	r4, r0
 8010ada:	460d      	mov	r5, r1
 8010adc:	468a      	mov	sl, r1
 8010ade:	468b      	mov	fp, r1
 8010ae0:	f340 82ef 	ble.w	80110c2 <__ieee754_pow+0x9aa>
 8010ae4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8010ae8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8010aec:	4303      	orrs	r3, r0
 8010aee:	f000 81e8 	beq.w	8010ec2 <__ieee754_pow+0x7aa>
 8010af2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010af6:	2200      	movs	r2, #0
 8010af8:	2300      	movs	r3, #0
 8010afa:	f7ef ffef 	bl	8000adc <__aeabi_dcmplt>
 8010afe:	3800      	subs	r0, #0
 8010b00:	bf18      	it	ne
 8010b02:	2001      	movne	r0, #1
 8010b04:	e710      	b.n	8010928 <__ieee754_pow+0x210>
 8010b06:	bf00      	nop
 8010b08:	60000000 	.word	0x60000000
 8010b0c:	3ff71547 	.word	0x3ff71547
 8010b10:	f85ddf44 	.word	0xf85ddf44
 8010b14:	3e54ae0b 	.word	0x3e54ae0b
 8010b18:	55555555 	.word	0x55555555
 8010b1c:	3fd55555 	.word	0x3fd55555
 8010b20:	652b82fe 	.word	0x652b82fe
 8010b24:	3ff71547 	.word	0x3ff71547
 8010b28:	3ff00000 	.word	0x3ff00000
 8010b2c:	3fd00000 	.word	0x3fd00000
 8010b30:	3fe00000 	.word	0x3fe00000
 8010b34:	408fffff 	.word	0x408fffff
 8010b38:	4bd5      	ldr	r3, [pc, #852]	@ (8010e90 <__ieee754_pow+0x778>)
 8010b3a:	402b      	ands	r3, r5
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	b92b      	cbnz	r3, 8010b4c <__ieee754_pow+0x434>
 8010b40:	4bd4      	ldr	r3, [pc, #848]	@ (8010e94 <__ieee754_pow+0x77c>)
 8010b42:	f7ef fd59 	bl	80005f8 <__aeabi_dmul>
 8010b46:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8010b4a:	468b      	mov	fp, r1
 8010b4c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8010b50:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010b54:	4413      	add	r3, r2
 8010b56:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b58:	4bcf      	ldr	r3, [pc, #828]	@ (8010e98 <__ieee754_pow+0x780>)
 8010b5a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8010b5e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8010b62:	459b      	cmp	fp, r3
 8010b64:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010b68:	dd08      	ble.n	8010b7c <__ieee754_pow+0x464>
 8010b6a:	4bcc      	ldr	r3, [pc, #816]	@ (8010e9c <__ieee754_pow+0x784>)
 8010b6c:	459b      	cmp	fp, r3
 8010b6e:	f340 81a5 	ble.w	8010ebc <__ieee754_pow+0x7a4>
 8010b72:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b74:	3301      	adds	r3, #1
 8010b76:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b78:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8010b7c:	f04f 0a00 	mov.w	sl, #0
 8010b80:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8010b84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010b86:	4bc6      	ldr	r3, [pc, #792]	@ (8010ea0 <__ieee754_pow+0x788>)
 8010b88:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010b8c:	ed93 7b00 	vldr	d7, [r3]
 8010b90:	4629      	mov	r1, r5
 8010b92:	ec53 2b17 	vmov	r2, r3, d7
 8010b96:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010b9a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010b9e:	f7ef fb73 	bl	8000288 <__aeabi_dsub>
 8010ba2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010ba6:	4606      	mov	r6, r0
 8010ba8:	460f      	mov	r7, r1
 8010baa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010bae:	f7ef fb6d 	bl	800028c <__adddf3>
 8010bb2:	4602      	mov	r2, r0
 8010bb4:	460b      	mov	r3, r1
 8010bb6:	2000      	movs	r0, #0
 8010bb8:	49ba      	ldr	r1, [pc, #744]	@ (8010ea4 <__ieee754_pow+0x78c>)
 8010bba:	f7ef fe47 	bl	800084c <__aeabi_ddiv>
 8010bbe:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8010bc2:	4602      	mov	r2, r0
 8010bc4:	460b      	mov	r3, r1
 8010bc6:	4630      	mov	r0, r6
 8010bc8:	4639      	mov	r1, r7
 8010bca:	f7ef fd15 	bl	80005f8 <__aeabi_dmul>
 8010bce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010bd2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8010bd6:	106d      	asrs	r5, r5, #1
 8010bd8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8010bdc:	f04f 0b00 	mov.w	fp, #0
 8010be0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8010be4:	4661      	mov	r1, ip
 8010be6:	2200      	movs	r2, #0
 8010be8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8010bec:	4658      	mov	r0, fp
 8010bee:	46e1      	mov	r9, ip
 8010bf0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8010bf4:	4614      	mov	r4, r2
 8010bf6:	461d      	mov	r5, r3
 8010bf8:	f7ef fcfe 	bl	80005f8 <__aeabi_dmul>
 8010bfc:	4602      	mov	r2, r0
 8010bfe:	460b      	mov	r3, r1
 8010c00:	4630      	mov	r0, r6
 8010c02:	4639      	mov	r1, r7
 8010c04:	f7ef fb40 	bl	8000288 <__aeabi_dsub>
 8010c08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010c0c:	4606      	mov	r6, r0
 8010c0e:	460f      	mov	r7, r1
 8010c10:	4620      	mov	r0, r4
 8010c12:	4629      	mov	r1, r5
 8010c14:	f7ef fb38 	bl	8000288 <__aeabi_dsub>
 8010c18:	4602      	mov	r2, r0
 8010c1a:	460b      	mov	r3, r1
 8010c1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010c20:	f7ef fb32 	bl	8000288 <__aeabi_dsub>
 8010c24:	465a      	mov	r2, fp
 8010c26:	464b      	mov	r3, r9
 8010c28:	f7ef fce6 	bl	80005f8 <__aeabi_dmul>
 8010c2c:	4602      	mov	r2, r0
 8010c2e:	460b      	mov	r3, r1
 8010c30:	4630      	mov	r0, r6
 8010c32:	4639      	mov	r1, r7
 8010c34:	f7ef fb28 	bl	8000288 <__aeabi_dsub>
 8010c38:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8010c3c:	f7ef fcdc 	bl	80005f8 <__aeabi_dmul>
 8010c40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c44:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010c48:	4610      	mov	r0, r2
 8010c4a:	4619      	mov	r1, r3
 8010c4c:	f7ef fcd4 	bl	80005f8 <__aeabi_dmul>
 8010c50:	a37d      	add	r3, pc, #500	@ (adr r3, 8010e48 <__ieee754_pow+0x730>)
 8010c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c56:	4604      	mov	r4, r0
 8010c58:	460d      	mov	r5, r1
 8010c5a:	f7ef fccd 	bl	80005f8 <__aeabi_dmul>
 8010c5e:	a37c      	add	r3, pc, #496	@ (adr r3, 8010e50 <__ieee754_pow+0x738>)
 8010c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c64:	f7ef fb12 	bl	800028c <__adddf3>
 8010c68:	4622      	mov	r2, r4
 8010c6a:	462b      	mov	r3, r5
 8010c6c:	f7ef fcc4 	bl	80005f8 <__aeabi_dmul>
 8010c70:	a379      	add	r3, pc, #484	@ (adr r3, 8010e58 <__ieee754_pow+0x740>)
 8010c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c76:	f7ef fb09 	bl	800028c <__adddf3>
 8010c7a:	4622      	mov	r2, r4
 8010c7c:	462b      	mov	r3, r5
 8010c7e:	f7ef fcbb 	bl	80005f8 <__aeabi_dmul>
 8010c82:	a377      	add	r3, pc, #476	@ (adr r3, 8010e60 <__ieee754_pow+0x748>)
 8010c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c88:	f7ef fb00 	bl	800028c <__adddf3>
 8010c8c:	4622      	mov	r2, r4
 8010c8e:	462b      	mov	r3, r5
 8010c90:	f7ef fcb2 	bl	80005f8 <__aeabi_dmul>
 8010c94:	a374      	add	r3, pc, #464	@ (adr r3, 8010e68 <__ieee754_pow+0x750>)
 8010c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c9a:	f7ef faf7 	bl	800028c <__adddf3>
 8010c9e:	4622      	mov	r2, r4
 8010ca0:	462b      	mov	r3, r5
 8010ca2:	f7ef fca9 	bl	80005f8 <__aeabi_dmul>
 8010ca6:	a372      	add	r3, pc, #456	@ (adr r3, 8010e70 <__ieee754_pow+0x758>)
 8010ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cac:	f7ef faee 	bl	800028c <__adddf3>
 8010cb0:	4622      	mov	r2, r4
 8010cb2:	4606      	mov	r6, r0
 8010cb4:	460f      	mov	r7, r1
 8010cb6:	462b      	mov	r3, r5
 8010cb8:	4620      	mov	r0, r4
 8010cba:	4629      	mov	r1, r5
 8010cbc:	f7ef fc9c 	bl	80005f8 <__aeabi_dmul>
 8010cc0:	4602      	mov	r2, r0
 8010cc2:	460b      	mov	r3, r1
 8010cc4:	4630      	mov	r0, r6
 8010cc6:	4639      	mov	r1, r7
 8010cc8:	f7ef fc96 	bl	80005f8 <__aeabi_dmul>
 8010ccc:	465a      	mov	r2, fp
 8010cce:	4604      	mov	r4, r0
 8010cd0:	460d      	mov	r5, r1
 8010cd2:	464b      	mov	r3, r9
 8010cd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010cd8:	f7ef fad8 	bl	800028c <__adddf3>
 8010cdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010ce0:	f7ef fc8a 	bl	80005f8 <__aeabi_dmul>
 8010ce4:	4622      	mov	r2, r4
 8010ce6:	462b      	mov	r3, r5
 8010ce8:	f7ef fad0 	bl	800028c <__adddf3>
 8010cec:	465a      	mov	r2, fp
 8010cee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010cf2:	464b      	mov	r3, r9
 8010cf4:	4658      	mov	r0, fp
 8010cf6:	4649      	mov	r1, r9
 8010cf8:	f7ef fc7e 	bl	80005f8 <__aeabi_dmul>
 8010cfc:	4b6a      	ldr	r3, [pc, #424]	@ (8010ea8 <__ieee754_pow+0x790>)
 8010cfe:	2200      	movs	r2, #0
 8010d00:	4606      	mov	r6, r0
 8010d02:	460f      	mov	r7, r1
 8010d04:	f7ef fac2 	bl	800028c <__adddf3>
 8010d08:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010d0c:	f7ef fabe 	bl	800028c <__adddf3>
 8010d10:	46d8      	mov	r8, fp
 8010d12:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8010d16:	460d      	mov	r5, r1
 8010d18:	465a      	mov	r2, fp
 8010d1a:	460b      	mov	r3, r1
 8010d1c:	4640      	mov	r0, r8
 8010d1e:	4649      	mov	r1, r9
 8010d20:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8010d24:	f7ef fc68 	bl	80005f8 <__aeabi_dmul>
 8010d28:	465c      	mov	r4, fp
 8010d2a:	4680      	mov	r8, r0
 8010d2c:	4689      	mov	r9, r1
 8010d2e:	4b5e      	ldr	r3, [pc, #376]	@ (8010ea8 <__ieee754_pow+0x790>)
 8010d30:	2200      	movs	r2, #0
 8010d32:	4620      	mov	r0, r4
 8010d34:	4629      	mov	r1, r5
 8010d36:	f7ef faa7 	bl	8000288 <__aeabi_dsub>
 8010d3a:	4632      	mov	r2, r6
 8010d3c:	463b      	mov	r3, r7
 8010d3e:	f7ef faa3 	bl	8000288 <__aeabi_dsub>
 8010d42:	4602      	mov	r2, r0
 8010d44:	460b      	mov	r3, r1
 8010d46:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010d4a:	f7ef fa9d 	bl	8000288 <__aeabi_dsub>
 8010d4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010d52:	f7ef fc51 	bl	80005f8 <__aeabi_dmul>
 8010d56:	4622      	mov	r2, r4
 8010d58:	4606      	mov	r6, r0
 8010d5a:	460f      	mov	r7, r1
 8010d5c:	462b      	mov	r3, r5
 8010d5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010d62:	f7ef fc49 	bl	80005f8 <__aeabi_dmul>
 8010d66:	4602      	mov	r2, r0
 8010d68:	460b      	mov	r3, r1
 8010d6a:	4630      	mov	r0, r6
 8010d6c:	4639      	mov	r1, r7
 8010d6e:	f7ef fa8d 	bl	800028c <__adddf3>
 8010d72:	4606      	mov	r6, r0
 8010d74:	460f      	mov	r7, r1
 8010d76:	4602      	mov	r2, r0
 8010d78:	460b      	mov	r3, r1
 8010d7a:	4640      	mov	r0, r8
 8010d7c:	4649      	mov	r1, r9
 8010d7e:	f7ef fa85 	bl	800028c <__adddf3>
 8010d82:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8010d86:	a33c      	add	r3, pc, #240	@ (adr r3, 8010e78 <__ieee754_pow+0x760>)
 8010d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d8c:	4658      	mov	r0, fp
 8010d8e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8010d92:	460d      	mov	r5, r1
 8010d94:	f7ef fc30 	bl	80005f8 <__aeabi_dmul>
 8010d98:	465c      	mov	r4, fp
 8010d9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010d9e:	4642      	mov	r2, r8
 8010da0:	464b      	mov	r3, r9
 8010da2:	4620      	mov	r0, r4
 8010da4:	4629      	mov	r1, r5
 8010da6:	f7ef fa6f 	bl	8000288 <__aeabi_dsub>
 8010daa:	4602      	mov	r2, r0
 8010dac:	460b      	mov	r3, r1
 8010dae:	4630      	mov	r0, r6
 8010db0:	4639      	mov	r1, r7
 8010db2:	f7ef fa69 	bl	8000288 <__aeabi_dsub>
 8010db6:	a332      	add	r3, pc, #200	@ (adr r3, 8010e80 <__ieee754_pow+0x768>)
 8010db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dbc:	f7ef fc1c 	bl	80005f8 <__aeabi_dmul>
 8010dc0:	a331      	add	r3, pc, #196	@ (adr r3, 8010e88 <__ieee754_pow+0x770>)
 8010dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc6:	4606      	mov	r6, r0
 8010dc8:	460f      	mov	r7, r1
 8010dca:	4620      	mov	r0, r4
 8010dcc:	4629      	mov	r1, r5
 8010dce:	f7ef fc13 	bl	80005f8 <__aeabi_dmul>
 8010dd2:	4602      	mov	r2, r0
 8010dd4:	460b      	mov	r3, r1
 8010dd6:	4630      	mov	r0, r6
 8010dd8:	4639      	mov	r1, r7
 8010dda:	f7ef fa57 	bl	800028c <__adddf3>
 8010dde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010de0:	4b32      	ldr	r3, [pc, #200]	@ (8010eac <__ieee754_pow+0x794>)
 8010de2:	4413      	add	r3, r2
 8010de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de8:	f7ef fa50 	bl	800028c <__adddf3>
 8010dec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010df0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010df2:	f7ef fb97 	bl	8000524 <__aeabi_i2d>
 8010df6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010df8:	4b2d      	ldr	r3, [pc, #180]	@ (8010eb0 <__ieee754_pow+0x798>)
 8010dfa:	4413      	add	r3, r2
 8010dfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010e00:	4606      	mov	r6, r0
 8010e02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010e06:	460f      	mov	r7, r1
 8010e08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010e0c:	f7ef fa3e 	bl	800028c <__adddf3>
 8010e10:	4642      	mov	r2, r8
 8010e12:	464b      	mov	r3, r9
 8010e14:	f7ef fa3a 	bl	800028c <__adddf3>
 8010e18:	4632      	mov	r2, r6
 8010e1a:	463b      	mov	r3, r7
 8010e1c:	f7ef fa36 	bl	800028c <__adddf3>
 8010e20:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8010e24:	4632      	mov	r2, r6
 8010e26:	463b      	mov	r3, r7
 8010e28:	4658      	mov	r0, fp
 8010e2a:	460d      	mov	r5, r1
 8010e2c:	f7ef fa2c 	bl	8000288 <__aeabi_dsub>
 8010e30:	4642      	mov	r2, r8
 8010e32:	464b      	mov	r3, r9
 8010e34:	f7ef fa28 	bl	8000288 <__aeabi_dsub>
 8010e38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e3c:	f7ef fa24 	bl	8000288 <__aeabi_dsub>
 8010e40:	465c      	mov	r4, fp
 8010e42:	4602      	mov	r2, r0
 8010e44:	e036      	b.n	8010eb4 <__ieee754_pow+0x79c>
 8010e46:	bf00      	nop
 8010e48:	4a454eef 	.word	0x4a454eef
 8010e4c:	3fca7e28 	.word	0x3fca7e28
 8010e50:	93c9db65 	.word	0x93c9db65
 8010e54:	3fcd864a 	.word	0x3fcd864a
 8010e58:	a91d4101 	.word	0xa91d4101
 8010e5c:	3fd17460 	.word	0x3fd17460
 8010e60:	518f264d 	.word	0x518f264d
 8010e64:	3fd55555 	.word	0x3fd55555
 8010e68:	db6fabff 	.word	0xdb6fabff
 8010e6c:	3fdb6db6 	.word	0x3fdb6db6
 8010e70:	33333303 	.word	0x33333303
 8010e74:	3fe33333 	.word	0x3fe33333
 8010e78:	e0000000 	.word	0xe0000000
 8010e7c:	3feec709 	.word	0x3feec709
 8010e80:	dc3a03fd 	.word	0xdc3a03fd
 8010e84:	3feec709 	.word	0x3feec709
 8010e88:	145b01f5 	.word	0x145b01f5
 8010e8c:	be3e2fe0 	.word	0xbe3e2fe0
 8010e90:	7ff00000 	.word	0x7ff00000
 8010e94:	43400000 	.word	0x43400000
 8010e98:	0003988e 	.word	0x0003988e
 8010e9c:	000bb679 	.word	0x000bb679
 8010ea0:	08012770 	.word	0x08012770
 8010ea4:	3ff00000 	.word	0x3ff00000
 8010ea8:	40080000 	.word	0x40080000
 8010eac:	08012750 	.word	0x08012750
 8010eb0:	08012760 	.word	0x08012760
 8010eb4:	460b      	mov	r3, r1
 8010eb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010eba:	e5d7      	b.n	8010a6c <__ieee754_pow+0x354>
 8010ebc:	f04f 0a01 	mov.w	sl, #1
 8010ec0:	e65e      	b.n	8010b80 <__ieee754_pow+0x468>
 8010ec2:	a3b4      	add	r3, pc, #720	@ (adr r3, 8011194 <__ieee754_pow+0xa7c>)
 8010ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec8:	4630      	mov	r0, r6
 8010eca:	4639      	mov	r1, r7
 8010ecc:	f7ef f9de 	bl	800028c <__adddf3>
 8010ed0:	4642      	mov	r2, r8
 8010ed2:	e9cd 0100 	strd	r0, r1, [sp]
 8010ed6:	464b      	mov	r3, r9
 8010ed8:	4620      	mov	r0, r4
 8010eda:	4629      	mov	r1, r5
 8010edc:	f7ef f9d4 	bl	8000288 <__aeabi_dsub>
 8010ee0:	4602      	mov	r2, r0
 8010ee2:	460b      	mov	r3, r1
 8010ee4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ee8:	f7ef fe16 	bl	8000b18 <__aeabi_dcmpgt>
 8010eec:	2800      	cmp	r0, #0
 8010eee:	f47f ae00 	bne.w	8010af2 <__ieee754_pow+0x3da>
 8010ef2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8010ef6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010efa:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8010efe:	fa43 fa0a 	asr.w	sl, r3, sl
 8010f02:	44da      	add	sl, fp
 8010f04:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8010f08:	489d      	ldr	r0, [pc, #628]	@ (8011180 <__ieee754_pow+0xa68>)
 8010f0a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8010f0e:	4108      	asrs	r0, r1
 8010f10:	ea00 030a 	and.w	r3, r0, sl
 8010f14:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8010f18:	f1c1 0114 	rsb	r1, r1, #20
 8010f1c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8010f20:	fa4a fa01 	asr.w	sl, sl, r1
 8010f24:	f1bb 0f00 	cmp.w	fp, #0
 8010f28:	4640      	mov	r0, r8
 8010f2a:	4649      	mov	r1, r9
 8010f2c:	f04f 0200 	mov.w	r2, #0
 8010f30:	bfb8      	it	lt
 8010f32:	f1ca 0a00 	rsblt	sl, sl, #0
 8010f36:	f7ef f9a7 	bl	8000288 <__aeabi_dsub>
 8010f3a:	4680      	mov	r8, r0
 8010f3c:	4689      	mov	r9, r1
 8010f3e:	4632      	mov	r2, r6
 8010f40:	463b      	mov	r3, r7
 8010f42:	4640      	mov	r0, r8
 8010f44:	4649      	mov	r1, r9
 8010f46:	f7ef f9a1 	bl	800028c <__adddf3>
 8010f4a:	2400      	movs	r4, #0
 8010f4c:	a37c      	add	r3, pc, #496	@ (adr r3, 8011140 <__ieee754_pow+0xa28>)
 8010f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f52:	4620      	mov	r0, r4
 8010f54:	460d      	mov	r5, r1
 8010f56:	f7ef fb4f 	bl	80005f8 <__aeabi_dmul>
 8010f5a:	4642      	mov	r2, r8
 8010f5c:	e9cd 0100 	strd	r0, r1, [sp]
 8010f60:	464b      	mov	r3, r9
 8010f62:	4620      	mov	r0, r4
 8010f64:	4629      	mov	r1, r5
 8010f66:	f7ef f98f 	bl	8000288 <__aeabi_dsub>
 8010f6a:	4602      	mov	r2, r0
 8010f6c:	460b      	mov	r3, r1
 8010f6e:	4630      	mov	r0, r6
 8010f70:	4639      	mov	r1, r7
 8010f72:	f7ef f989 	bl	8000288 <__aeabi_dsub>
 8010f76:	a374      	add	r3, pc, #464	@ (adr r3, 8011148 <__ieee754_pow+0xa30>)
 8010f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f7c:	f7ef fb3c 	bl	80005f8 <__aeabi_dmul>
 8010f80:	a373      	add	r3, pc, #460	@ (adr r3, 8011150 <__ieee754_pow+0xa38>)
 8010f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f86:	4680      	mov	r8, r0
 8010f88:	4689      	mov	r9, r1
 8010f8a:	4620      	mov	r0, r4
 8010f8c:	4629      	mov	r1, r5
 8010f8e:	f7ef fb33 	bl	80005f8 <__aeabi_dmul>
 8010f92:	4602      	mov	r2, r0
 8010f94:	460b      	mov	r3, r1
 8010f96:	4640      	mov	r0, r8
 8010f98:	4649      	mov	r1, r9
 8010f9a:	f7ef f977 	bl	800028c <__adddf3>
 8010f9e:	4604      	mov	r4, r0
 8010fa0:	460d      	mov	r5, r1
 8010fa2:	4602      	mov	r2, r0
 8010fa4:	460b      	mov	r3, r1
 8010fa6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010faa:	f7ef f96f 	bl	800028c <__adddf3>
 8010fae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010fb2:	4680      	mov	r8, r0
 8010fb4:	4689      	mov	r9, r1
 8010fb6:	f7ef f967 	bl	8000288 <__aeabi_dsub>
 8010fba:	4602      	mov	r2, r0
 8010fbc:	460b      	mov	r3, r1
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	4629      	mov	r1, r5
 8010fc2:	f7ef f961 	bl	8000288 <__aeabi_dsub>
 8010fc6:	4642      	mov	r2, r8
 8010fc8:	4606      	mov	r6, r0
 8010fca:	460f      	mov	r7, r1
 8010fcc:	464b      	mov	r3, r9
 8010fce:	4640      	mov	r0, r8
 8010fd0:	4649      	mov	r1, r9
 8010fd2:	f7ef fb11 	bl	80005f8 <__aeabi_dmul>
 8010fd6:	a360      	add	r3, pc, #384	@ (adr r3, 8011158 <__ieee754_pow+0xa40>)
 8010fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fdc:	4604      	mov	r4, r0
 8010fde:	460d      	mov	r5, r1
 8010fe0:	f7ef fb0a 	bl	80005f8 <__aeabi_dmul>
 8010fe4:	a35e      	add	r3, pc, #376	@ (adr r3, 8011160 <__ieee754_pow+0xa48>)
 8010fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fea:	f7ef f94d 	bl	8000288 <__aeabi_dsub>
 8010fee:	4622      	mov	r2, r4
 8010ff0:	462b      	mov	r3, r5
 8010ff2:	f7ef fb01 	bl	80005f8 <__aeabi_dmul>
 8010ff6:	a35c      	add	r3, pc, #368	@ (adr r3, 8011168 <__ieee754_pow+0xa50>)
 8010ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ffc:	f7ef f946 	bl	800028c <__adddf3>
 8011000:	4622      	mov	r2, r4
 8011002:	462b      	mov	r3, r5
 8011004:	f7ef faf8 	bl	80005f8 <__aeabi_dmul>
 8011008:	a359      	add	r3, pc, #356	@ (adr r3, 8011170 <__ieee754_pow+0xa58>)
 801100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801100e:	f7ef f93b 	bl	8000288 <__aeabi_dsub>
 8011012:	4622      	mov	r2, r4
 8011014:	462b      	mov	r3, r5
 8011016:	f7ef faef 	bl	80005f8 <__aeabi_dmul>
 801101a:	a357      	add	r3, pc, #348	@ (adr r3, 8011178 <__ieee754_pow+0xa60>)
 801101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011020:	f7ef f934 	bl	800028c <__adddf3>
 8011024:	4622      	mov	r2, r4
 8011026:	462b      	mov	r3, r5
 8011028:	f7ef fae6 	bl	80005f8 <__aeabi_dmul>
 801102c:	4602      	mov	r2, r0
 801102e:	460b      	mov	r3, r1
 8011030:	4640      	mov	r0, r8
 8011032:	4649      	mov	r1, r9
 8011034:	f7ef f928 	bl	8000288 <__aeabi_dsub>
 8011038:	4604      	mov	r4, r0
 801103a:	460d      	mov	r5, r1
 801103c:	4602      	mov	r2, r0
 801103e:	460b      	mov	r3, r1
 8011040:	4640      	mov	r0, r8
 8011042:	4649      	mov	r1, r9
 8011044:	f7ef fad8 	bl	80005f8 <__aeabi_dmul>
 8011048:	2200      	movs	r2, #0
 801104a:	e9cd 0100 	strd	r0, r1, [sp]
 801104e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011052:	4620      	mov	r0, r4
 8011054:	4629      	mov	r1, r5
 8011056:	f7ef f917 	bl	8000288 <__aeabi_dsub>
 801105a:	4602      	mov	r2, r0
 801105c:	460b      	mov	r3, r1
 801105e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011062:	f7ef fbf3 	bl	800084c <__aeabi_ddiv>
 8011066:	4632      	mov	r2, r6
 8011068:	4604      	mov	r4, r0
 801106a:	460d      	mov	r5, r1
 801106c:	463b      	mov	r3, r7
 801106e:	4640      	mov	r0, r8
 8011070:	4649      	mov	r1, r9
 8011072:	f7ef fac1 	bl	80005f8 <__aeabi_dmul>
 8011076:	4632      	mov	r2, r6
 8011078:	463b      	mov	r3, r7
 801107a:	f7ef f907 	bl	800028c <__adddf3>
 801107e:	4602      	mov	r2, r0
 8011080:	460b      	mov	r3, r1
 8011082:	4620      	mov	r0, r4
 8011084:	4629      	mov	r1, r5
 8011086:	f7ef f8ff 	bl	8000288 <__aeabi_dsub>
 801108a:	4642      	mov	r2, r8
 801108c:	464b      	mov	r3, r9
 801108e:	f7ef f8fb 	bl	8000288 <__aeabi_dsub>
 8011092:	460b      	mov	r3, r1
 8011094:	4602      	mov	r2, r0
 8011096:	493b      	ldr	r1, [pc, #236]	@ (8011184 <__ieee754_pow+0xa6c>)
 8011098:	2000      	movs	r0, #0
 801109a:	f7ef f8f5 	bl	8000288 <__aeabi_dsub>
 801109e:	ec41 0b10 	vmov	d0, r0, r1
 80110a2:	ee10 3a90 	vmov	r3, s1
 80110a6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80110aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80110ae:	da30      	bge.n	8011112 <__ieee754_pow+0x9fa>
 80110b0:	4650      	mov	r0, sl
 80110b2:	f000 fa15 	bl	80114e0 <scalbn>
 80110b6:	ec51 0b10 	vmov	r0, r1, d0
 80110ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80110be:	f7ff bbd2 	b.w	8010866 <__ieee754_pow+0x14e>
 80110c2:	4c31      	ldr	r4, [pc, #196]	@ (8011188 <__ieee754_pow+0xa70>)
 80110c4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80110c8:	42a3      	cmp	r3, r4
 80110ca:	d91a      	bls.n	8011102 <__ieee754_pow+0x9ea>
 80110cc:	4b2f      	ldr	r3, [pc, #188]	@ (801118c <__ieee754_pow+0xa74>)
 80110ce:	440b      	add	r3, r1
 80110d0:	4303      	orrs	r3, r0
 80110d2:	d009      	beq.n	80110e8 <__ieee754_pow+0x9d0>
 80110d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80110d8:	2200      	movs	r2, #0
 80110da:	2300      	movs	r3, #0
 80110dc:	f7ef fcfe 	bl	8000adc <__aeabi_dcmplt>
 80110e0:	3800      	subs	r0, #0
 80110e2:	bf18      	it	ne
 80110e4:	2001      	movne	r0, #1
 80110e6:	e42b      	b.n	8010940 <__ieee754_pow+0x228>
 80110e8:	4642      	mov	r2, r8
 80110ea:	464b      	mov	r3, r9
 80110ec:	f7ef f8cc 	bl	8000288 <__aeabi_dsub>
 80110f0:	4632      	mov	r2, r6
 80110f2:	463b      	mov	r3, r7
 80110f4:	f7ef fd06 	bl	8000b04 <__aeabi_dcmpge>
 80110f8:	2800      	cmp	r0, #0
 80110fa:	d1eb      	bne.n	80110d4 <__ieee754_pow+0x9bc>
 80110fc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801119c <__ieee754_pow+0xa84>
 8011100:	e6f7      	b.n	8010ef2 <__ieee754_pow+0x7da>
 8011102:	469a      	mov	sl, r3
 8011104:	4b22      	ldr	r3, [pc, #136]	@ (8011190 <__ieee754_pow+0xa78>)
 8011106:	459a      	cmp	sl, r3
 8011108:	f63f aef3 	bhi.w	8010ef2 <__ieee754_pow+0x7da>
 801110c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8011110:	e715      	b.n	8010f3e <__ieee754_pow+0x826>
 8011112:	ec51 0b10 	vmov	r0, r1, d0
 8011116:	4619      	mov	r1, r3
 8011118:	e7cf      	b.n	80110ba <__ieee754_pow+0x9a2>
 801111a:	491a      	ldr	r1, [pc, #104]	@ (8011184 <__ieee754_pow+0xa6c>)
 801111c:	2000      	movs	r0, #0
 801111e:	f7ff bb18 	b.w	8010752 <__ieee754_pow+0x3a>
 8011122:	2000      	movs	r0, #0
 8011124:	2100      	movs	r1, #0
 8011126:	f7ff bb14 	b.w	8010752 <__ieee754_pow+0x3a>
 801112a:	4630      	mov	r0, r6
 801112c:	4639      	mov	r1, r7
 801112e:	f7ff bb10 	b.w	8010752 <__ieee754_pow+0x3a>
 8011132:	460c      	mov	r4, r1
 8011134:	f7ff bb5e 	b.w	80107f4 <__ieee754_pow+0xdc>
 8011138:	2400      	movs	r4, #0
 801113a:	f7ff bb49 	b.w	80107d0 <__ieee754_pow+0xb8>
 801113e:	bf00      	nop
 8011140:	00000000 	.word	0x00000000
 8011144:	3fe62e43 	.word	0x3fe62e43
 8011148:	fefa39ef 	.word	0xfefa39ef
 801114c:	3fe62e42 	.word	0x3fe62e42
 8011150:	0ca86c39 	.word	0x0ca86c39
 8011154:	be205c61 	.word	0xbe205c61
 8011158:	72bea4d0 	.word	0x72bea4d0
 801115c:	3e663769 	.word	0x3e663769
 8011160:	c5d26bf1 	.word	0xc5d26bf1
 8011164:	3ebbbd41 	.word	0x3ebbbd41
 8011168:	af25de2c 	.word	0xaf25de2c
 801116c:	3f11566a 	.word	0x3f11566a
 8011170:	16bebd93 	.word	0x16bebd93
 8011174:	3f66c16c 	.word	0x3f66c16c
 8011178:	5555553e 	.word	0x5555553e
 801117c:	3fc55555 	.word	0x3fc55555
 8011180:	fff00000 	.word	0xfff00000
 8011184:	3ff00000 	.word	0x3ff00000
 8011188:	4090cbff 	.word	0x4090cbff
 801118c:	3f6f3400 	.word	0x3f6f3400
 8011190:	3fe00000 	.word	0x3fe00000
 8011194:	652b82fe 	.word	0x652b82fe
 8011198:	3c971547 	.word	0x3c971547
 801119c:	4090cc00 	.word	0x4090cc00

080111a0 <atan>:
 80111a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111a4:	ec55 4b10 	vmov	r4, r5, d0
 80111a8:	4bbf      	ldr	r3, [pc, #764]	@ (80114a8 <atan+0x308>)
 80111aa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80111ae:	429e      	cmp	r6, r3
 80111b0:	46ab      	mov	fp, r5
 80111b2:	d918      	bls.n	80111e6 <atan+0x46>
 80111b4:	4bbd      	ldr	r3, [pc, #756]	@ (80114ac <atan+0x30c>)
 80111b6:	429e      	cmp	r6, r3
 80111b8:	d801      	bhi.n	80111be <atan+0x1e>
 80111ba:	d109      	bne.n	80111d0 <atan+0x30>
 80111bc:	b144      	cbz	r4, 80111d0 <atan+0x30>
 80111be:	4622      	mov	r2, r4
 80111c0:	462b      	mov	r3, r5
 80111c2:	4620      	mov	r0, r4
 80111c4:	4629      	mov	r1, r5
 80111c6:	f7ef f861 	bl	800028c <__adddf3>
 80111ca:	4604      	mov	r4, r0
 80111cc:	460d      	mov	r5, r1
 80111ce:	e006      	b.n	80111de <atan+0x3e>
 80111d0:	f1bb 0f00 	cmp.w	fp, #0
 80111d4:	f340 812b 	ble.w	801142e <atan+0x28e>
 80111d8:	a597      	add	r5, pc, #604	@ (adr r5, 8011438 <atan+0x298>)
 80111da:	e9d5 4500 	ldrd	r4, r5, [r5]
 80111de:	ec45 4b10 	vmov	d0, r4, r5
 80111e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111e6:	4bb2      	ldr	r3, [pc, #712]	@ (80114b0 <atan+0x310>)
 80111e8:	429e      	cmp	r6, r3
 80111ea:	d813      	bhi.n	8011214 <atan+0x74>
 80111ec:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80111f0:	429e      	cmp	r6, r3
 80111f2:	d80c      	bhi.n	801120e <atan+0x6e>
 80111f4:	a392      	add	r3, pc, #584	@ (adr r3, 8011440 <atan+0x2a0>)
 80111f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111fa:	4620      	mov	r0, r4
 80111fc:	4629      	mov	r1, r5
 80111fe:	f7ef f845 	bl	800028c <__adddf3>
 8011202:	4bac      	ldr	r3, [pc, #688]	@ (80114b4 <atan+0x314>)
 8011204:	2200      	movs	r2, #0
 8011206:	f7ef fc87 	bl	8000b18 <__aeabi_dcmpgt>
 801120a:	2800      	cmp	r0, #0
 801120c:	d1e7      	bne.n	80111de <atan+0x3e>
 801120e:	f04f 3aff 	mov.w	sl, #4294967295
 8011212:	e029      	b.n	8011268 <atan+0xc8>
 8011214:	f000 f95c 	bl	80114d0 <fabs>
 8011218:	4ba7      	ldr	r3, [pc, #668]	@ (80114b8 <atan+0x318>)
 801121a:	429e      	cmp	r6, r3
 801121c:	ec55 4b10 	vmov	r4, r5, d0
 8011220:	f200 80bc 	bhi.w	801139c <atan+0x1fc>
 8011224:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8011228:	429e      	cmp	r6, r3
 801122a:	f200 809e 	bhi.w	801136a <atan+0x1ca>
 801122e:	4622      	mov	r2, r4
 8011230:	462b      	mov	r3, r5
 8011232:	4620      	mov	r0, r4
 8011234:	4629      	mov	r1, r5
 8011236:	f7ef f829 	bl	800028c <__adddf3>
 801123a:	4b9e      	ldr	r3, [pc, #632]	@ (80114b4 <atan+0x314>)
 801123c:	2200      	movs	r2, #0
 801123e:	f7ef f823 	bl	8000288 <__aeabi_dsub>
 8011242:	2200      	movs	r2, #0
 8011244:	4606      	mov	r6, r0
 8011246:	460f      	mov	r7, r1
 8011248:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801124c:	4620      	mov	r0, r4
 801124e:	4629      	mov	r1, r5
 8011250:	f7ef f81c 	bl	800028c <__adddf3>
 8011254:	4602      	mov	r2, r0
 8011256:	460b      	mov	r3, r1
 8011258:	4630      	mov	r0, r6
 801125a:	4639      	mov	r1, r7
 801125c:	f7ef faf6 	bl	800084c <__aeabi_ddiv>
 8011260:	f04f 0a00 	mov.w	sl, #0
 8011264:	4604      	mov	r4, r0
 8011266:	460d      	mov	r5, r1
 8011268:	4622      	mov	r2, r4
 801126a:	462b      	mov	r3, r5
 801126c:	4620      	mov	r0, r4
 801126e:	4629      	mov	r1, r5
 8011270:	f7ef f9c2 	bl	80005f8 <__aeabi_dmul>
 8011274:	4602      	mov	r2, r0
 8011276:	460b      	mov	r3, r1
 8011278:	4680      	mov	r8, r0
 801127a:	4689      	mov	r9, r1
 801127c:	f7ef f9bc 	bl	80005f8 <__aeabi_dmul>
 8011280:	a371      	add	r3, pc, #452	@ (adr r3, 8011448 <atan+0x2a8>)
 8011282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011286:	4606      	mov	r6, r0
 8011288:	460f      	mov	r7, r1
 801128a:	f7ef f9b5 	bl	80005f8 <__aeabi_dmul>
 801128e:	a370      	add	r3, pc, #448	@ (adr r3, 8011450 <atan+0x2b0>)
 8011290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011294:	f7ee fffa 	bl	800028c <__adddf3>
 8011298:	4632      	mov	r2, r6
 801129a:	463b      	mov	r3, r7
 801129c:	f7ef f9ac 	bl	80005f8 <__aeabi_dmul>
 80112a0:	a36d      	add	r3, pc, #436	@ (adr r3, 8011458 <atan+0x2b8>)
 80112a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112a6:	f7ee fff1 	bl	800028c <__adddf3>
 80112aa:	4632      	mov	r2, r6
 80112ac:	463b      	mov	r3, r7
 80112ae:	f7ef f9a3 	bl	80005f8 <__aeabi_dmul>
 80112b2:	a36b      	add	r3, pc, #428	@ (adr r3, 8011460 <atan+0x2c0>)
 80112b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b8:	f7ee ffe8 	bl	800028c <__adddf3>
 80112bc:	4632      	mov	r2, r6
 80112be:	463b      	mov	r3, r7
 80112c0:	f7ef f99a 	bl	80005f8 <__aeabi_dmul>
 80112c4:	a368      	add	r3, pc, #416	@ (adr r3, 8011468 <atan+0x2c8>)
 80112c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ca:	f7ee ffdf 	bl	800028c <__adddf3>
 80112ce:	4632      	mov	r2, r6
 80112d0:	463b      	mov	r3, r7
 80112d2:	f7ef f991 	bl	80005f8 <__aeabi_dmul>
 80112d6:	a366      	add	r3, pc, #408	@ (adr r3, 8011470 <atan+0x2d0>)
 80112d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112dc:	f7ee ffd6 	bl	800028c <__adddf3>
 80112e0:	4642      	mov	r2, r8
 80112e2:	464b      	mov	r3, r9
 80112e4:	f7ef f988 	bl	80005f8 <__aeabi_dmul>
 80112e8:	a363      	add	r3, pc, #396	@ (adr r3, 8011478 <atan+0x2d8>)
 80112ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ee:	4680      	mov	r8, r0
 80112f0:	4689      	mov	r9, r1
 80112f2:	4630      	mov	r0, r6
 80112f4:	4639      	mov	r1, r7
 80112f6:	f7ef f97f 	bl	80005f8 <__aeabi_dmul>
 80112fa:	a361      	add	r3, pc, #388	@ (adr r3, 8011480 <atan+0x2e0>)
 80112fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011300:	f7ee ffc2 	bl	8000288 <__aeabi_dsub>
 8011304:	4632      	mov	r2, r6
 8011306:	463b      	mov	r3, r7
 8011308:	f7ef f976 	bl	80005f8 <__aeabi_dmul>
 801130c:	a35e      	add	r3, pc, #376	@ (adr r3, 8011488 <atan+0x2e8>)
 801130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011312:	f7ee ffb9 	bl	8000288 <__aeabi_dsub>
 8011316:	4632      	mov	r2, r6
 8011318:	463b      	mov	r3, r7
 801131a:	f7ef f96d 	bl	80005f8 <__aeabi_dmul>
 801131e:	a35c      	add	r3, pc, #368	@ (adr r3, 8011490 <atan+0x2f0>)
 8011320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011324:	f7ee ffb0 	bl	8000288 <__aeabi_dsub>
 8011328:	4632      	mov	r2, r6
 801132a:	463b      	mov	r3, r7
 801132c:	f7ef f964 	bl	80005f8 <__aeabi_dmul>
 8011330:	a359      	add	r3, pc, #356	@ (adr r3, 8011498 <atan+0x2f8>)
 8011332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011336:	f7ee ffa7 	bl	8000288 <__aeabi_dsub>
 801133a:	4632      	mov	r2, r6
 801133c:	463b      	mov	r3, r7
 801133e:	f7ef f95b 	bl	80005f8 <__aeabi_dmul>
 8011342:	4602      	mov	r2, r0
 8011344:	460b      	mov	r3, r1
 8011346:	4640      	mov	r0, r8
 8011348:	4649      	mov	r1, r9
 801134a:	f7ee ff9f 	bl	800028c <__adddf3>
 801134e:	4622      	mov	r2, r4
 8011350:	462b      	mov	r3, r5
 8011352:	f7ef f951 	bl	80005f8 <__aeabi_dmul>
 8011356:	f1ba 3fff 	cmp.w	sl, #4294967295
 801135a:	4602      	mov	r2, r0
 801135c:	460b      	mov	r3, r1
 801135e:	d148      	bne.n	80113f2 <atan+0x252>
 8011360:	4620      	mov	r0, r4
 8011362:	4629      	mov	r1, r5
 8011364:	f7ee ff90 	bl	8000288 <__aeabi_dsub>
 8011368:	e72f      	b.n	80111ca <atan+0x2a>
 801136a:	4b52      	ldr	r3, [pc, #328]	@ (80114b4 <atan+0x314>)
 801136c:	2200      	movs	r2, #0
 801136e:	4620      	mov	r0, r4
 8011370:	4629      	mov	r1, r5
 8011372:	f7ee ff89 	bl	8000288 <__aeabi_dsub>
 8011376:	4b4f      	ldr	r3, [pc, #316]	@ (80114b4 <atan+0x314>)
 8011378:	4606      	mov	r6, r0
 801137a:	460f      	mov	r7, r1
 801137c:	2200      	movs	r2, #0
 801137e:	4620      	mov	r0, r4
 8011380:	4629      	mov	r1, r5
 8011382:	f7ee ff83 	bl	800028c <__adddf3>
 8011386:	4602      	mov	r2, r0
 8011388:	460b      	mov	r3, r1
 801138a:	4630      	mov	r0, r6
 801138c:	4639      	mov	r1, r7
 801138e:	f7ef fa5d 	bl	800084c <__aeabi_ddiv>
 8011392:	f04f 0a01 	mov.w	sl, #1
 8011396:	4604      	mov	r4, r0
 8011398:	460d      	mov	r5, r1
 801139a:	e765      	b.n	8011268 <atan+0xc8>
 801139c:	4b47      	ldr	r3, [pc, #284]	@ (80114bc <atan+0x31c>)
 801139e:	429e      	cmp	r6, r3
 80113a0:	d21c      	bcs.n	80113dc <atan+0x23c>
 80113a2:	4b47      	ldr	r3, [pc, #284]	@ (80114c0 <atan+0x320>)
 80113a4:	2200      	movs	r2, #0
 80113a6:	4620      	mov	r0, r4
 80113a8:	4629      	mov	r1, r5
 80113aa:	f7ee ff6d 	bl	8000288 <__aeabi_dsub>
 80113ae:	4b44      	ldr	r3, [pc, #272]	@ (80114c0 <atan+0x320>)
 80113b0:	4606      	mov	r6, r0
 80113b2:	460f      	mov	r7, r1
 80113b4:	2200      	movs	r2, #0
 80113b6:	4620      	mov	r0, r4
 80113b8:	4629      	mov	r1, r5
 80113ba:	f7ef f91d 	bl	80005f8 <__aeabi_dmul>
 80113be:	4b3d      	ldr	r3, [pc, #244]	@ (80114b4 <atan+0x314>)
 80113c0:	2200      	movs	r2, #0
 80113c2:	f7ee ff63 	bl	800028c <__adddf3>
 80113c6:	4602      	mov	r2, r0
 80113c8:	460b      	mov	r3, r1
 80113ca:	4630      	mov	r0, r6
 80113cc:	4639      	mov	r1, r7
 80113ce:	f7ef fa3d 	bl	800084c <__aeabi_ddiv>
 80113d2:	f04f 0a02 	mov.w	sl, #2
 80113d6:	4604      	mov	r4, r0
 80113d8:	460d      	mov	r5, r1
 80113da:	e745      	b.n	8011268 <atan+0xc8>
 80113dc:	4622      	mov	r2, r4
 80113de:	462b      	mov	r3, r5
 80113e0:	4938      	ldr	r1, [pc, #224]	@ (80114c4 <atan+0x324>)
 80113e2:	2000      	movs	r0, #0
 80113e4:	f7ef fa32 	bl	800084c <__aeabi_ddiv>
 80113e8:	f04f 0a03 	mov.w	sl, #3
 80113ec:	4604      	mov	r4, r0
 80113ee:	460d      	mov	r5, r1
 80113f0:	e73a      	b.n	8011268 <atan+0xc8>
 80113f2:	4b35      	ldr	r3, [pc, #212]	@ (80114c8 <atan+0x328>)
 80113f4:	4e35      	ldr	r6, [pc, #212]	@ (80114cc <atan+0x32c>)
 80113f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80113fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113fe:	f7ee ff43 	bl	8000288 <__aeabi_dsub>
 8011402:	4622      	mov	r2, r4
 8011404:	462b      	mov	r3, r5
 8011406:	f7ee ff3f 	bl	8000288 <__aeabi_dsub>
 801140a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801140e:	4602      	mov	r2, r0
 8011410:	460b      	mov	r3, r1
 8011412:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011416:	f7ee ff37 	bl	8000288 <__aeabi_dsub>
 801141a:	f1bb 0f00 	cmp.w	fp, #0
 801141e:	4604      	mov	r4, r0
 8011420:	460d      	mov	r5, r1
 8011422:	f6bf aedc 	bge.w	80111de <atan+0x3e>
 8011426:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801142a:	461d      	mov	r5, r3
 801142c:	e6d7      	b.n	80111de <atan+0x3e>
 801142e:	a51c      	add	r5, pc, #112	@ (adr r5, 80114a0 <atan+0x300>)
 8011430:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011434:	e6d3      	b.n	80111de <atan+0x3e>
 8011436:	bf00      	nop
 8011438:	54442d18 	.word	0x54442d18
 801143c:	3ff921fb 	.word	0x3ff921fb
 8011440:	8800759c 	.word	0x8800759c
 8011444:	7e37e43c 	.word	0x7e37e43c
 8011448:	e322da11 	.word	0xe322da11
 801144c:	3f90ad3a 	.word	0x3f90ad3a
 8011450:	24760deb 	.word	0x24760deb
 8011454:	3fa97b4b 	.word	0x3fa97b4b
 8011458:	a0d03d51 	.word	0xa0d03d51
 801145c:	3fb10d66 	.word	0x3fb10d66
 8011460:	c54c206e 	.word	0xc54c206e
 8011464:	3fb745cd 	.word	0x3fb745cd
 8011468:	920083ff 	.word	0x920083ff
 801146c:	3fc24924 	.word	0x3fc24924
 8011470:	5555550d 	.word	0x5555550d
 8011474:	3fd55555 	.word	0x3fd55555
 8011478:	2c6a6c2f 	.word	0x2c6a6c2f
 801147c:	bfa2b444 	.word	0xbfa2b444
 8011480:	52defd9a 	.word	0x52defd9a
 8011484:	3fadde2d 	.word	0x3fadde2d
 8011488:	af749a6d 	.word	0xaf749a6d
 801148c:	3fb3b0f2 	.word	0x3fb3b0f2
 8011490:	fe231671 	.word	0xfe231671
 8011494:	3fbc71c6 	.word	0x3fbc71c6
 8011498:	9998ebc4 	.word	0x9998ebc4
 801149c:	3fc99999 	.word	0x3fc99999
 80114a0:	54442d18 	.word	0x54442d18
 80114a4:	bff921fb 	.word	0xbff921fb
 80114a8:	440fffff 	.word	0x440fffff
 80114ac:	7ff00000 	.word	0x7ff00000
 80114b0:	3fdbffff 	.word	0x3fdbffff
 80114b4:	3ff00000 	.word	0x3ff00000
 80114b8:	3ff2ffff 	.word	0x3ff2ffff
 80114bc:	40038000 	.word	0x40038000
 80114c0:	3ff80000 	.word	0x3ff80000
 80114c4:	bff00000 	.word	0xbff00000
 80114c8:	08012780 	.word	0x08012780
 80114cc:	080127a0 	.word	0x080127a0

080114d0 <fabs>:
 80114d0:	ec51 0b10 	vmov	r0, r1, d0
 80114d4:	4602      	mov	r2, r0
 80114d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80114da:	ec43 2b10 	vmov	d0, r2, r3
 80114de:	4770      	bx	lr

080114e0 <scalbn>:
 80114e0:	b570      	push	{r4, r5, r6, lr}
 80114e2:	ec55 4b10 	vmov	r4, r5, d0
 80114e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80114ea:	4606      	mov	r6, r0
 80114ec:	462b      	mov	r3, r5
 80114ee:	b991      	cbnz	r1, 8011516 <scalbn+0x36>
 80114f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80114f4:	4323      	orrs	r3, r4
 80114f6:	d03d      	beq.n	8011574 <scalbn+0x94>
 80114f8:	4b35      	ldr	r3, [pc, #212]	@ (80115d0 <scalbn+0xf0>)
 80114fa:	4620      	mov	r0, r4
 80114fc:	4629      	mov	r1, r5
 80114fe:	2200      	movs	r2, #0
 8011500:	f7ef f87a 	bl	80005f8 <__aeabi_dmul>
 8011504:	4b33      	ldr	r3, [pc, #204]	@ (80115d4 <scalbn+0xf4>)
 8011506:	429e      	cmp	r6, r3
 8011508:	4604      	mov	r4, r0
 801150a:	460d      	mov	r5, r1
 801150c:	da0f      	bge.n	801152e <scalbn+0x4e>
 801150e:	a328      	add	r3, pc, #160	@ (adr r3, 80115b0 <scalbn+0xd0>)
 8011510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011514:	e01e      	b.n	8011554 <scalbn+0x74>
 8011516:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801151a:	4291      	cmp	r1, r2
 801151c:	d10b      	bne.n	8011536 <scalbn+0x56>
 801151e:	4622      	mov	r2, r4
 8011520:	4620      	mov	r0, r4
 8011522:	4629      	mov	r1, r5
 8011524:	f7ee feb2 	bl	800028c <__adddf3>
 8011528:	4604      	mov	r4, r0
 801152a:	460d      	mov	r5, r1
 801152c:	e022      	b.n	8011574 <scalbn+0x94>
 801152e:	460b      	mov	r3, r1
 8011530:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011534:	3936      	subs	r1, #54	@ 0x36
 8011536:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801153a:	4296      	cmp	r6, r2
 801153c:	dd0d      	ble.n	801155a <scalbn+0x7a>
 801153e:	2d00      	cmp	r5, #0
 8011540:	a11d      	add	r1, pc, #116	@ (adr r1, 80115b8 <scalbn+0xd8>)
 8011542:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011546:	da02      	bge.n	801154e <scalbn+0x6e>
 8011548:	a11d      	add	r1, pc, #116	@ (adr r1, 80115c0 <scalbn+0xe0>)
 801154a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801154e:	a31a      	add	r3, pc, #104	@ (adr r3, 80115b8 <scalbn+0xd8>)
 8011550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011554:	f7ef f850 	bl	80005f8 <__aeabi_dmul>
 8011558:	e7e6      	b.n	8011528 <scalbn+0x48>
 801155a:	1872      	adds	r2, r6, r1
 801155c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8011560:	428a      	cmp	r2, r1
 8011562:	dcec      	bgt.n	801153e <scalbn+0x5e>
 8011564:	2a00      	cmp	r2, #0
 8011566:	dd08      	ble.n	801157a <scalbn+0x9a>
 8011568:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801156c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011570:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011574:	ec45 4b10 	vmov	d0, r4, r5
 8011578:	bd70      	pop	{r4, r5, r6, pc}
 801157a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801157e:	da08      	bge.n	8011592 <scalbn+0xb2>
 8011580:	2d00      	cmp	r5, #0
 8011582:	a10b      	add	r1, pc, #44	@ (adr r1, 80115b0 <scalbn+0xd0>)
 8011584:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011588:	dac1      	bge.n	801150e <scalbn+0x2e>
 801158a:	a10f      	add	r1, pc, #60	@ (adr r1, 80115c8 <scalbn+0xe8>)
 801158c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011590:	e7bd      	b.n	801150e <scalbn+0x2e>
 8011592:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011596:	3236      	adds	r2, #54	@ 0x36
 8011598:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801159c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80115a0:	4620      	mov	r0, r4
 80115a2:	4b0d      	ldr	r3, [pc, #52]	@ (80115d8 <scalbn+0xf8>)
 80115a4:	4629      	mov	r1, r5
 80115a6:	2200      	movs	r2, #0
 80115a8:	e7d4      	b.n	8011554 <scalbn+0x74>
 80115aa:	bf00      	nop
 80115ac:	f3af 8000 	nop.w
 80115b0:	c2f8f359 	.word	0xc2f8f359
 80115b4:	01a56e1f 	.word	0x01a56e1f
 80115b8:	8800759c 	.word	0x8800759c
 80115bc:	7e37e43c 	.word	0x7e37e43c
 80115c0:	8800759c 	.word	0x8800759c
 80115c4:	fe37e43c 	.word	0xfe37e43c
 80115c8:	c2f8f359 	.word	0xc2f8f359
 80115cc:	81a56e1f 	.word	0x81a56e1f
 80115d0:	43500000 	.word	0x43500000
 80115d4:	ffff3cb0 	.word	0xffff3cb0
 80115d8:	3c900000 	.word	0x3c900000

080115dc <with_errno>:
 80115dc:	b510      	push	{r4, lr}
 80115de:	ed2d 8b02 	vpush	{d8}
 80115e2:	eeb0 8a40 	vmov.f32	s16, s0
 80115e6:	eef0 8a60 	vmov.f32	s17, s1
 80115ea:	4604      	mov	r4, r0
 80115ec:	f7fc fdfc 	bl	800e1e8 <__errno>
 80115f0:	eeb0 0a48 	vmov.f32	s0, s16
 80115f4:	eef0 0a68 	vmov.f32	s1, s17
 80115f8:	ecbd 8b02 	vpop	{d8}
 80115fc:	6004      	str	r4, [r0, #0]
 80115fe:	bd10      	pop	{r4, pc}

08011600 <xflow>:
 8011600:	4603      	mov	r3, r0
 8011602:	b507      	push	{r0, r1, r2, lr}
 8011604:	ec51 0b10 	vmov	r0, r1, d0
 8011608:	b183      	cbz	r3, 801162c <xflow+0x2c>
 801160a:	4602      	mov	r2, r0
 801160c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011610:	e9cd 2300 	strd	r2, r3, [sp]
 8011614:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011618:	f7ee ffee 	bl	80005f8 <__aeabi_dmul>
 801161c:	ec41 0b10 	vmov	d0, r0, r1
 8011620:	2022      	movs	r0, #34	@ 0x22
 8011622:	b003      	add	sp, #12
 8011624:	f85d eb04 	ldr.w	lr, [sp], #4
 8011628:	f7ff bfd8 	b.w	80115dc <with_errno>
 801162c:	4602      	mov	r2, r0
 801162e:	460b      	mov	r3, r1
 8011630:	e7ee      	b.n	8011610 <xflow+0x10>
 8011632:	0000      	movs	r0, r0
 8011634:	0000      	movs	r0, r0
	...

08011638 <__math_uflow>:
 8011638:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011640 <__math_uflow+0x8>
 801163c:	f7ff bfe0 	b.w	8011600 <xflow>
 8011640:	00000000 	.word	0x00000000
 8011644:	10000000 	.word	0x10000000

08011648 <__math_oflow>:
 8011648:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011650 <__math_oflow+0x8>
 801164c:	f7ff bfd8 	b.w	8011600 <xflow>
 8011650:	00000000 	.word	0x00000000
 8011654:	70000000 	.word	0x70000000

08011658 <_init>:
 8011658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801165a:	bf00      	nop
 801165c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801165e:	bc08      	pop	{r3}
 8011660:	469e      	mov	lr, r3
 8011662:	4770      	bx	lr

08011664 <_fini>:
 8011664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011666:	bf00      	nop
 8011668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801166a:	bc08      	pop	{r3}
 801166c:	469e      	mov	lr, r3
 801166e:	4770      	bx	lr
